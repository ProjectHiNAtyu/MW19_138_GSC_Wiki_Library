// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

playerregenhealthadd()
{
    setdvarifuninitialized( "scr_br_carriable_respawn_time", 0 );
    setdvarifuninitialized( "scr_br_carriable_inactive_delete_time", 300 );
    setdvarifuninitialized( "scr_br_carriable_spawn_system", 0 );
    setdvarifuninitialized( "scr_br_carriable_max_entity_cariables", 50 );
    setdvarifuninitialized( "scr_br_carriable_spawn_chance", 0 );
    precachestring( &"MP_BR_INGAME/PICKUP_PROPANE" );
    precachestring( &"MP_BR_INGAME/PICKUP_POISON" );
    setdvarifuninitialized( "carriableFuseTime", 5 );
    setdvarifuninitialized( "carriableThrowForce", 500 );
    level.destroyscorelaunchonly = [];
    level.destroyscorelaunchonly["propane"] = spawnstruct();
    level.destroyscorelaunchonly["propane"].weaponname = "gas_can_mp";
    level.destroyscorelaunchonly["propane"].modelname = "offhand_wm_container_gas_tank_01";
    level.destroyscorelaunchonly["propane"].parachutecleanup = &"MP_BR_INGAME/PICKUP_PROPANE";
    level.destroyscorelaunchonly["propane"].getnextpayloadspawnmodule = ::deposit_from_compromised_convoy_delayed_failsafe;
    level.destroyscorelaunchonly["propane"].getnumbersspawnpoint = "gas_tank_explode";
    level.destroyscorelaunchonly["propane"].getnextprop = "vfx_propane_exp_main";
    level.destroyscorelaunchonly["propane"].getnextrpgspawnmodule = "vfx_propane_exp_air";
    level.destroyscorelaunchonly["propane"].juggernaut_setupexecute = "vfx_carriable_fuse";
    level.destroyscorelaunchonly["propane"]._id_12359 = "vfx_fire_spout";
    level.destroyscorelaunchonly["propane"].juggernaut_state = "canister_warning";
    level.destroyscorelaunchonly["propane"]._id_12FF0 = getcompleteweaponname( level.destroyscorelaunchonly["propane"].weaponname );
    level.destroyscorelaunchonly["neurotoxin"] = spawnstruct();
    level.destroyscorelaunchonly["neurotoxin"].weaponname = "gas_can_toxic_mp";
    level.destroyscorelaunchonly["neurotoxin"].modelname = "offhand_wm_container_gas_tank_02";
    level.destroyscorelaunchonly["neurotoxin"].parachutecleanup = &"MP_BR_INGAME/PICKUP_POISON";
    level.destroyscorelaunchonly["neurotoxin"].getnextpayloadspawnmodule = ::deposit_from_compromised_convoy_delayed;
    level.destroyscorelaunchonly["neurotoxin"].getnumbersspawnpoint = "neuro_tank_explode";
    level.destroyscorelaunchonly["neurotoxin"].getnextprop = "vfx_ntoxin_exp_main";
    level.destroyscorelaunchonly["neurotoxin"].getnextrpgspawnmodule = "vfx_ntoxin_exp_air";
    level.destroyscorelaunchonly["neurotoxin"].killstreak_update_hint_logic = "vfx_ntoxin_ground_gas";
    level.destroyscorelaunchonly["neurotoxin"].killstreak_loadout_state = "vfx_ntoxin_air_gas";
    level.destroyscorelaunchonly["neurotoxin"].juggernaut_setupexecute = "vfx_carriable_fuse";
    level.destroyscorelaunchonly["neurotoxin"].juggernaut_state = "canister_warning";
    level.destroyscorelaunchonly["neurotoxin"]._id_12FF0 = getcompleteweaponname( level.destroyscorelaunchonly["neurotoxin"].weaponname );
    level._effect["flash_bang_explode"] = loadfx( "vfx/iw8_mp/equipment/flashbang/vfx_flash_bang" );
    level._effect["vfx_propane_exp_main"] = loadfx( "vfx/iw8_br/equipment/vfx_propane_exp_main" );
    level._effect["vfx_propane_exp_air"] = loadfx( "vfx/iw8_br/equipment/vfx_propane_exp_air" );
    level._effect["fire_drip_test"] = loadfx( "vfx/core/smktrail/smoke_geotrail_rpg" );
    level._effect["vfx_carriable_fuse"] = loadfx( "vfx/iw8_br/equipment/vfx_canister_fuse" );
    level._effect["vfx_fire_spout"] = loadfx( "vfx/iw8_br/equipment/vfx_fire_spout" );
    level._effect["vfx_ntoxin_ground_gas"] = loadfx( "vfx/iw8_br/equipment/vfx_ntoxin_ground_gas" );
    level._effect["vfx_ntoxin_air_gas"] = loadfx( "vfx/iw8_br/equipment/vfx_ntoxin_air_gas" );
    level._effect["vfx_ntoxin_exp_main"] = loadfx( "vfx/iw8_br/equipment/vfx_ntoxin_exp_main" );
    level._effect["vfx_ntoxin_exp_air"] = loadfx( "vfx/iw8_br/equipment/vfx_ntoxin_exp_air" );
    level._id_12B47 = [];
    level.destroypropspecatehud = [];
    scripts\engine\scriptable::_id_11CDB( "br_carriable_pickup", ::_id_11CE2 );
    scripts\engine\scriptable::_id_11CDA( ::_id_11CE0 );
    eggtrigger();
}

_id_121D1( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0 ) )
    {

    }

    if ( !isdefined( var_1 ) )
        var_1 = ( 0, 0, 0 );

    if ( !isdefined( var_2 ) )
        var_2 = ( 0, 0, 0 );

    level._id_12B47 = scripts\engine\utility::array_removeundefined( level._id_12B47 );
    var_3 = getdvarint( "scr_br_carriable_max_entity_cariables", 50 );

    if ( level._id_12B47.size >= var_3 )
    {
        var_4 = 999999999;
        var_5 = undefined;

        foreach ( var_7 in level._id_12B47 )
        {
            if ( istrue( var_7.juggernaut_shouldexecute ) || var_7 islinked() )
                continue;

            if ( var_7.resetstreamerposhint < var_4 )
            {
                var_4 = var_7.resetstreamerposhint;
                var_5 = var_7;
            }
        }

        if ( !isdefined( var_5 ) )
        {

        }

        var_5 delete();
    }

    var_9 = spawn( "script_model", var_1 );
    var_9 setmodel( var_0.modelname );
    var_9.angles = var_2;
    var_9.destroyscoreevent = var_0;
    var_9 destinations( var_0 );
    level._id_12B47 = scripts\engine\utility::array_add( level._id_12B47, var_9 );
    return var_9;
}

eggtrigger()
{
    foreach ( var_1 in level._id_12B47 )
    {
        if ( !isdefined( var_1 ) )
            continue;

        if ( var_1 islinked() )
            var_1 destroy_vehicles( 1 );

        var_1 delete();
    }

    level._id_12B47 = [];

    switch ( getdvarint( "scr_br_carriable_spawn_system", 0 ) )
    {
        case 0:
            _id_121B0();
            break;
        case 1:
            _id_121AE();
            break;
        default:
            _id_121B0();
            break;
    }
}

_id_121B0()
{
    var_0 = getentitylessscriptablearrayinradius( "scriptable_br_carriable_propane", "classname" );
    var_1 = getentitylessscriptablearrayinradius( "scriptable_br_carriable_neurotoxin", "classname" );
    var_2 = scripts\engine\utility::array_randomize( scripts\engine\utility::array_combine( var_0, var_1 ) );

    if ( var_2.size == 0 )
        return;

    var_3 = getdvarfloat( "scr_br_carriable_spawn_chance", 0 );
    var_4 = floor( var_3 * var_2.size );

    for ( var_5 = 0; var_5 < var_2.size; var_5++ )
    {
        if ( var_5 < var_4 )
        {
            var_2[var_5] setscriptablepartstate( "br_carriable_pickup", "useable" );
            continue;
        }

        var_2[var_5] setscriptablepartstate( "br_carriable_pickup", "disabled" );
    }
}

_id_121AE()
{
    var_0 = getdvarfloat( "scr_br_carriable_spawn_chance", 0 );
    var_1 = scripts\engine\utility::array_randomize( getentitylessscriptablearrayinradius( "scriptable_br_carriable_propane", "classname" ) );
    var_2 = scripts\engine\utility::array_randomize( getentitylessscriptablearrayinradius( "scriptable_br_carriable_neurotoxin", "classname" ) );

    if ( var_1.size > 0 )
    {
        var_3 = floor( var_0 * var_1.size );

        for ( var_4 = 0; var_4 < var_1.size; var_4++ )
        {
            if ( var_4 < var_3 )
            {
                var_1[var_4] setscriptablepartstate( "br_carriable_pickup", "useable" );
                continue;
            }

            var_1[var_4] setscriptablepartstate( "br_carriable_pickup", "disabled" );
        }
    }

    if ( var_2.size > 0 )
    {
        var_3 = floor( var_0 * var_2.size );

        for ( var_4 = 0; var_4 < var_2.size; var_4++ )
        {
            if ( var_4 < var_3 )
            {
                var_2[var_4] setscriptablepartstate( "br_carriable_pickup", "useable" );
                continue;
            }

            var_2[var_4] setscriptablepartstate( "br_carriable_pickup", "disabled" );
        }
    }
}

_id_11CE2( var_0, var_1, var_2, var_3, var_4 )
{
    if ( istrue( level.gameended ) )
        return;

    if ( !var_3 scripts\cp_mp\utility\player_utility::_isalive() || istrue( var_3.inlaststand ) )
        return;

    if ( var_3 scripts\cp_mp\utility\player_utility::isinvehicle() )
    {
        if ( isdefined( level.showuseresultsfeedback ) )
        {
            var_3 [[ level.showuseresultsfeedback ]]( 17 );
            return;
        }
    }

    if ( !var_0 deployed( var_3 ) )
        return;

    if ( var_2 == "useable" )
    {
        var_5 = level.destroyscorelaunchonly["propane"];

        if ( var_0.classname == "scriptable_br_carriable_neurotoxin" )
            var_5 = level.destroyscorelaunchonly["neurotoxin"];

        var_0 setscriptablepartstate( "br_carriable_pickup", "disabled" );
        level notify( "carriable_kill_callout_" + var_0.origin );
        var_6 = _id_121D1( var_5, var_3.origin );
        var_6 thread destroy_bad_traversals( var_3 );
        level thread _id_11A93( var_0, var_1 );
    }
}

projectileimpactexplode( var_0 )
{
    return var_0.type == "br_carriable_neurotoxin" || var_0.type == "br_carriable_propane";
}

_id_11CE0( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 )
{
    if ( !isdefined( var_2 ) || !projectileimpactexplode( var_2 ) )
        return;

    level thread _id_11CE1( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 );
}

_id_11CE1( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 )
{
    waittillframeend;
    var_11 = level.destroyscorelaunchonly["propane"];

    if ( var_2.type == "br_carriable_neurotoxin" )
        var_11 = level.destroyscorelaunchonly["neurotoxin"];

    level notify( "carriable_kill_callout_" + var_2.origin );
    var_12 = _id_121D1( var_11, var_2.origin, var_2.angles );
    var_12.owner = var_1;
    var_12.team = var_1.team;
    var_12 thread [[ var_11.getnextpayloadspawnmodule ]]();
    var_12 makeunusable();
    var_12 hide();
    var_12.origin = var_2.origin + ( 0, 0, 10000 );
    wait 5;
    var_12 delete();
}

_id_11A93( var_0, var_1 )
{
    var_2 = getdvarfloat( "scr_br_carriable_respawn_time", 0 );

    if ( var_2 == 0 )
        return;

    wait( var_2 );
    var_0 setscriptablepartstate( "br_carriable_pickup", "useable" );
}

_id_121AA( var_0 )
{
    var_1 = "propane";

    if ( var_0.script_noteworthy == "carriable_neurotoxin" )
        var_1 = "neurotoxin";

    var_2 = level.destroyscorelaunchonly[var_1];
    var_3 = _id_121D1( var_2, var_0.origin );
}

destinations( var_0 )
{
    self.start_origin = self.origin;
    self.destroyscoreevent = var_0;

    if ( !isdefined( self.script_health ) )
        self.script_health = 16;

    self setnonstick( 1 );
    self sethintstring( self.destroyscoreevent.parachutecleanup );
    self setuseholdduration( "duration_short" );
    self sethintrequiresholding( 1 );
    destroy_vehicle_if_driver_dies();
}

destroy_vehicle_on_pilot_death()
{
    self.origin = self.start_origin;
    self show();
    destroy_vehicle_if_driver_dies();
}

destroy_vehicle_if_driver_dies()
{
    self physics_takecontrol( 1 );
    self physics_registerforcollisioncallback();
    thread destroyawardlaunchonly();
    self.resetstreamerposhint = gettime();

    if ( !isdefined( self.juggernaut_shouldexecute ) )
        self.juggernaut_shouldexecute = 0;

    if ( !self.juggernaut_shouldexecute )
    {
        self makeusable();
        thread destroy_intro_tank();
        thread desired_landing_spot();
    }

    if ( self.script_health > 0 )
    {
        self setcandamage( 1 );
        self.gasmask_resist = 0;
        self.health = 99999999;
        thread deployingplayer();
    }
}

deployingplayer()
{
    self endon( "death" );
    self endon( "explode" );
    self endon( "pickup" );

    for (;;)
    {
        self waittill( "damage", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );
        self.health = 99999999;

        if ( var_0 < 2 )
        {
            thread destorder( var_1 );
            continue;
        }

        switch ( var_4 )
        {
            case "MOD_CRUSH":
            case "MOD_IMPACT":
            case "melee":
            case "MOD_MELEE":
                break;
            default:
                self.owner = var_1;
                self.team = var_1.team;
                thread deregisterscriptableinstance();
                return;
        }
    }
}

destorder( var_0 )
{
    self endon( "death" );
    self endon( "explode" );
    self endon( "pickup" );

    if ( istrue( self.juggernaut_shouldexecute ) )
        return;

    if ( 0 )
        thread descendsolostarts( var_0 );

    self.juggernaut_shouldexecute = 1;
    self playsoundonmovingent( self.destroyscoreevent.juggernaut_state );
    playfxontag( level._effect[self.destroyscoreevent.juggernaut_setupexecute], self, "tag_fx" );
    var_1 = getdvarfloat( "carriableFuseTime", 5 );
    wait( var_1 );
    self.owner = var_0;
    self.team = var_0.team;
    thread deregisterscriptableinstance();
}

descendsolostarts( var_0 )
{
    var_1 = var_0 scripts\mp\hud_util::createprimaryprogressbar();
    var_2 = var_0 scripts\mp\hud_util::createprimaryprogressbartext();
    var_2 settext( "FUSE LIT" );
    var_3 = getdvarfloat( "carriableFuseTime", 5 );

    if ( var_3 <= 0 )
        var_3 = 1;

    var_1 scripts\mp\hud_util::updatebar( 0, 1 / var_3 );
    var_0 scripts\engine\utility::_id_12E40( "death", "weapon_fired", "drop_object" );
    var_1 scripts\mp\hud_util::destroyelem();
    var_2 scripts\mp\hud_util::destroyelem();
}

deregisterscriptableinstance()
{
    level endon( "game_ended" );
    self endon( "death" );
    self notify( "explode" );
    level notify( "carriable_kill_callout_" + self.origin );

    if ( istrue( self.juggernaut_shouldexecute ) )
        stopfxontag( level._effect[self.destroyscoreevent.juggernaut_setupexecute], self, "tag_fx" );

    if ( self islinked() )
    {
        thread destprogress( ( 0, 0, -90 ), self.owner );
        wait 0.1;
    }

    self [[ self.destroyscoreevent.getnextpayloadspawnmodule ]]();
    self makeunusable();
    self hide();
    self.origin = self.origin + ( 0, 0, 10000 );
    wait 5;
    self delete();
}

destroy_intro_tank()
{
    self endon( "death" );
    self endon( "explode" );
    self endon( "pickup" );

    for (;;)
    {
        self waittill( "trigger", var_0 );

        if ( isdefined( var_0 ) && isalive( var_0 ) && deployed( var_0 ) )
        {
            thread destroy_bad_traversals( var_0 );
            return;
        }
    }
}

destroy_bad_traversals( var_0 )
{
    self notify( "pickup" );
    level notify( "carriable_kill_callout_" + self.origin );
    var_1 = self getlinkedparent();

    if ( isdefined( var_1 ) )
        self unlink();

    var_0 scripts\mp\equipment::allow_equipment( 0, "carriable" );
    self physicslaunchserver( self.origin, ( 0, 0, 0 ) );
    self physicsstopserver();
    self show();
    self hide( 1 );
    self linkto( var_0, "tag_accessory_right", ( 0, 0, 0 ), var_0.angles );

    if ( isdefined( self.projectile ) )
        self.projectile delete();

    self setcandamage( 0 );
    self setotherent( var_0 );
    self makeunusable();
    self.carrier = var_0;
    self.owner = var_0;
    var_0.iscarrying = 1;
    var_0.wait_between_stations = var_0 getcurrentweapon();
    var_0 giveweapon( self.destroyscoreevent._id_12FF0 );
    var_0 setweaponammoclip( self.destroyscoreevent._id_12FF0, 1 );
    var_0 switchtoweapon( self.destroyscoreevent._id_12FF0 );
    var_0 thread destroyaward( self );
    var_0 thread descendpos( self );
    var_0 thread destroycrateinbadtrigger( self );
    var_0 thread destroy_jammer_relocate( self );
    var_0 thread destroy_lmgs( self );
    var_0 thread deregistergasmaskscriptableatframeend();

    if ( !isai( var_0 ) )
    {
        var_0 notifyonplayercommand( "lethal_attempt_carriable", "+frag" );
        var_0 notifyonplayercommand( "lethal_attempt_carriable", "+smoke" );
        var_0 notifyonplayercommand( "fuse_attempt_carriable", "+speed_throw" );

        if ( !var_0 isconsoleplayer() )
            var_0 notifyonplayercommand( "fuse_attempt_carriable", "+toggleads_throw" );
    }

    var_0 scripts\common\utility::allow_supers( 0 );
    var_0 allowmelee( 0 );
    var_0 allowsupersprint( 0 );
}

_id_12BB4( var_0 )
{
    var_1 = undefined;

    if ( issameweapon( var_0 ) )
    {
        if ( nullweapon( var_0 ) )
            return 0;

        foreach ( var_3 in level.destroyscorelaunchonly )
        {
            if ( var_3._id_12FF0 == var_0 )
                return 0;
        }

        var_1 = var_0.basename;
    }

    if ( isstring( var_0 ) )
    {
        if ( var_0 == "none" )
            return 0;

        foreach ( var_3 in level.destroyscorelaunchonly )
        {
            if ( var_3._id_12FF0.basename == var_0 )
                return 0;
        }

        var_1 = var_0;
    }

    if ( scripts\mp\utility\killstreak::isremotekillstreakweapon( var_1 ) )
        return 0;

    if ( scripts\mp\utility\weapon::iskillstreakweapon( var_0 ) )
        return 0;

    return 1;
}

deployed( var_0 )
{
    if ( !isplayer( var_0 ) )
        return 0;

    if ( !var_0 scripts\common\utility::is_weapon_allowed() )
        return 0;

    if ( var_0 scripts\mp\supers::issuperinuse() )
        return 0;

    if ( var_0 scripts\cp_mp\utility\player_utility::isinvehicle() )
        return 0;

    if ( istrue( var_0.inlaststand ) )
        return 0;

    if ( istrue( var_0.isreviving ) )
        return 0;

    if ( var_0 isskydiving() )
        return 0;

    if ( istrue( var_0.isjuggernaut ) )
    {
        if ( isdefined( level.showuseresultsfeedback ) )
        {
            var_0 [[ level.showuseresultsfeedback ]]( 16 );
            return 0;
        }
    }

    if ( isdefined( var_0.manuallyjoiningkillstreak ) && var_0.manuallyjoiningkillstreak )
        return 0;

    if ( istrue( var_0.iscarrying ) )
    {
        if ( isdefined( level.showuseresultsfeedback ) )
        {
            var_0 [[ level.showuseresultsfeedback ]]( 3 );
            return 0;
        }
    }

    var_1 = var_0 getcurrentweapon();

    if ( isdefined( var_1 ) )
    {
        if ( !_id_12BB4( var_1 ) )
        {
            var_0 scripts\mp\hud_message::showerrormessage( "MP/FIELD_UPGRADE_CANNOT_USE" );
            return 0;
        }
    }

    var_2 = var_0.changingweapon;

    if ( isdefined( var_2 ) && var_0 isswitchingweapon() )
    {
        if ( !_id_12BB4( var_2 ) )
            return 0;
    }

    if ( var_0 scripts\cp_mp\utility\inventory_utility::isanymonitoredweaponswitchinprogress() )
    {
        var_2 = var_0 scripts\cp_mp\utility\inventory_utility::getcurrentmonitoredweaponswitchweapon();

        if ( !_id_12BB4( var_2 ) )
            return 0;
    }

    if ( var_0 scripts\mp\utility\player::isusingremote() )
        return 0;

    if ( istrue( self.juggernaut_shouldexecute ) )
        return 0;

    if ( istrue( var_0.playlandingbreath ) )
        return 0;

    return 1;
}

destroyaward( var_0 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "drop_object" );
    var_1 = 0;
    var_2 = getdvarfloat( "carriableThrowForce", 500 );
    var_3 = undefined;

    for (;;)
    {
        self waittill( "grenade_fire", var_4, var_5 );

        if ( var_5 != var_0.destroyscoreevent._id_12FF0 )
            continue;

        if ( isdefined( var_4 ) )
        {
            var_3 = var_4.origin;
            waitframe();
            var_4 delete();
        }

        self setweaponammoclip( var_0.destroyscoreevent._id_12FF0, 0 );
        break;
    }

    if ( self issprintsliding() )
    {
        var_1 = -12;
        var_2 = var_2 + 200;
    }

    var_6 = self getplayerangles();
    var_6 = var_6 + ( var_1, 0, 0 );
    var_6 = ( clamp( var_6[0], -85, 85 ), var_6[1], var_6[2] );
    var_7 = anglestoforward( var_6 );
    var_0 thread destprogress( var_7 * var_2, self, var_3 );
}

gettingupfromlaststand()
{
    self disableweaponswitch();
    scripts\engine\utility::_id_12E40( "weapon_change", "death_or_disconnect", "drop_object" );
    self enableweaponswitch();
}

destroycrateinbadtrigger( var_0 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "drop_object" );
    thread gettingupfromlaststand();

    for (;;)
    {
        self waittill( "weapon_change", var_1 );

        if ( !isdefined( var_1 ) )
            continue;

        if ( var_1 != var_0.destroyscoreevent._id_12FF0 )
            break;
    }

    var_0 thread destroy_vehicles( 0 );
}

deregistergasmaskscriptableatframeend()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "drop_object" );

    for (;;)
    {
        self waittill( "lethal_attempt_carriable" );
        scripts\mp\hud_message::showerrormessage( "MP/FIELD_UPGRADE_CANNOT_USE" );
    }
}

destroy_lmgs( var_0 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "drop_object" );

    for (;;)
    {
        if ( self isskydiving() )
            break;

        if ( scripts\mp\supers::issuperinuse() )
            break;

        if ( scripts\cp_mp\utility\player_utility::isinvehicle( 1 ) )
            break;

        if ( self isinexecutionattack() || self isinexecutionvictim() )
            break;

        waitframe();
    }

    var_0 thread destroy_vehicles( 0 );
}

descendpos( var_0 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "drop_object" );

    for (;;)
    {
        self waittill( "fuse_attempt_carriable" );

        if ( self getcurrentweapon() == var_0.destroyscoreevent._id_12FF0 && !self attackbuttonpressed() )
        {
            var_1 = self getgestureanimlength( "ges_gas_can_ignite" );
            thread scripts\mp\gametypes\br_public.gsc::updatelocationbesttimehud( "iw8_ges_plyr_gas_can_ignite", var_1 );
            wait( var_1 );
            var_0 thread destorder( self );
            return;
        }
    }
}

destroy_jammer_relocate( var_0 )
{
    level endon( "game_ended" );
    self endon( "drop_object" );
    self waittill( "death_or_disconnect" );
    var_1 = self getplayerangles();
    var_1 = ( clamp( var_1[0], -85, 85 ), scripts\engine\utility::absangleclamp180( var_1[1] ), 0 );
    var_2 = anglestoforward( var_1 );
    var_3 = 90;
    var_0 thread destprogress( var_2 * var_3, self );
}

destpoint( var_0, var_1, var_2 )
{
    self.origin_prev = undefined;
    var_3 = self;

    if ( !isdefined( var_2 ) )
    {
        if ( isdefined( var_1 ) )
            var_2 = var_1 geteye();
        else
            var_2 = self.origin;
    }

    if ( isdefined( var_1 ) )
    {
        var_4 = vectortoangles( ( var_0[0], var_0[1], -45 ) );
        var_4 = var_4 + ( 0, 0, -45 );
        self.angles = var_4;
        var_3 = var_1;
        var_5 = anglestoright( var_0 );
        var_6 = var_2 + ( var_5[0], var_5[1], 0 ) * 7;

        if ( var_1 issprintsliding() )
            var_6 = var_6 + ( 0, 0, 10 );

        var_7 = var_6;
        var_8 = vectornormalize( var_0 ) * 80;
        var_9 = [ "physicscontents_clipshot", "physicscontents_missileclip", "physicscontents_solid", "physicscontents_vehicle", "physicscontents_player", "physicscontents_actor", "physicscontents_glass", "physicscontents_itemclip" ];
        var_10 = physics_createcontents( var_9 );
        var_11 = scripts\engine\trace::sphere_trace( var_7, var_7 + var_8, 38, var_1, var_10 );

        if ( var_11["fraction"] < 1 )
        {
            var_12 = 0.7 * var_11["fraction"];
            self.origin = var_7 + var_8 * var_12;
        }
        else
            self.origin = var_11["position"];
    }

    self dontinterpolate();
    self physicslaunchserver( self.origin, var_0 );
}

destroyawardlaunchonly()
{
    self endon( "death" );
    self endon( "explode" );
    self endon( "pickup" );

    for (;;)
    {
        self waittill( "collision", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 );

        if ( !istrue( self.juggernaut_shouldexecute ) )
            continue;

        if ( isdefined( var_7 ) && isdefined( var_7.vehiclename ) )
        {
            if ( !isdefined( self.owner ) )
            {
                var_8 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getdriver( var_7 );

                if ( !isdefined( var_8 ) || !isplayer( var_8 ) )
                    continue;

                self.owner = var_8;
            }

            thread deregisterscriptableinstance();
            break;
        }
    }
}

destprogress( var_0, var_1, var_2 )
{
    self.moverdoesnotkill = 1;
    destroy_vehicles( 1 );
    destpoint( var_0, var_1, var_2 );
    destroy_vehicle_if_driver_dies();
}

destroy_vehicles( var_0 )
{
    var_1 = 40;
    var_2 = 11.0;
    var_3 = 7.1;

    if ( !isdefined( var_0 ) )
        var_0 = 0;

    self.droptime = gettime();
    self notify( "dropped" );
    var_4 = ( 0, 0, 0 );
    var_5 = self.carrier;

    if ( isdefined( var_5 ) && var_5.team != "spectator" )
    {
        var_6 = var_5.origin;
        var_4 = var_5.angles;
        var_5 notify( "drop_object" );
    }
    else
        var_6 = self.start_origin;

    var_7 = ( 0, var_4[1], 0 );
    var_8 = anglestoforward( var_7 );
    var_6 = var_6 + ( ( 0, 0, var_2 ) + var_3 * var_8 );
    self.origin = var_6;
    self.angles = var_4;
    self show();
    var_9 = self getlinkedparent();

    if ( isdefined( var_9 ) )
        self unlink();

    destructiblecarlightssetup();
    self dontinterpolate();
    self.ownerteam = "any";

    if ( !var_0 )
    {
        var_10 = var_8 * var_1;
        destpoint( var_10 );
        destroy_vehicle_if_driver_dies();
    }

    return 1;
}

destructiblecarlightssetup()
{
    if ( isdefined( self.carrier ) )
    {
        self.carrier.iscarrying = 0;
        self setotherent( undefined );
        self.carrier thread destructiblevehiclesetup();
        self.carrier scripts\mp\equipment::allow_equipment( 1, "carriable" );

        if ( !isai( self.carrier ) )
        {
            self.carrier notifyonplayercommandremove( "lethal_attempt_carriable", "+frag" );
            self.carrier notifyonplayercommandremove( "lethal_attempt_carriable", "+smoke" );
            self.carrier notifyonplayercommandremove( "fuse_attempt_carriable", "+speed_throw" );

            if ( !self.carrier isconsoleplayer() )
                self.carrier notifyonplayercommandremove( "fuse_attempt_carriable", "+toggleads_throw" );
        }

        self.carrier scripts\common\utility::allow_supers( 1 );
        self.carrier allowmelee( 1 );
        self.carrier allowsupersprint( 1 );
        self.carrier = undefined;
    }
}

destructiblevehiclesetup()
{
    self endon( "death_or_disconnect" );

    foreach ( var_1 in level.destroyscorelaunchonly )
    {
        if ( self getcurrentweapon() == var_1._id_12FF0 )
        {
            if ( self getweaponammoclip( var_1._id_12FF0 ) == 0 )
            {
                wait 0.3;
                self switchtoweaponimmediate( self.wait_between_stations );
            }
            else
                self switchtoweaponimmediate( self.wait_between_stations );

            self takeweapon( var_1._id_12FF0 );
            break;
        }
        else if ( self hasweapon( var_1._id_12FF0 ) )
        {
            self takeweapon( var_1._id_12FF0 );
            break;
        }
    }
}

get_active_bombzones( var_0, var_1 )
{
    if ( !isdefined( level._id_12B47 ) )
        return;

    var_2 = var_1 * var_1;

    foreach ( var_4 in level._id_12B47 )
    {
        if ( isdefined( var_4 ) && !var_4 islinked() && distance2dsquared( var_4.origin, var_0 ) > var_2 )
            var_4 delete();
    }
}

desired_landing_spot()
{
    self endon( "death" );
    self endon( "explode" );
    self endon( "pickup" );
    var_0 = getdvarfloat( "scr_br_carriable_inactive_delete_time", 300 );

    if ( var_0 == 0 )
        return;

    wait( var_0 );
    self delete();
}

deposit_from_compromised_convoy_delayed_failsafe()
{
    var_0 = 2;
    var_1 = self.origin + ( 0, 0, -96 );
    var_2 = physicstrace( self.origin, var_1 );
    var_3 = var_2 == var_1;
    var_4 = "detonateGround";

    if ( var_3 )
        var_4 = "detonateAir";

    var_5 = easepower( "br_carriable_explosion_propane", self.origin, self.angles );
    var_5 setscriptablepartstate( "carrible_explode_base", var_4 );
    var_5 thread enable_keypad_interaction( 5 );
    var_6 = spawn( "script_origin", self.origin );
    var_6.angles = self.angles;
    var_6.owner = self.owner;
    var_6.team = self.team;
    var_6.script_noteworthy = "fake_molotov";
    var_6.weapon_name = "gas_can_mp";

    if ( isplayer( self.owner ) )
        self radiusdamage( var_6.origin, 250, 400, 1, self.owner, "MOD_EXPLOSIVE", "c4_mp_p" );
    else
        self radiusdamage( var_6.origin, 250, 400, 1, undefined, "MOD_EXPLOSIVE", "c4_mp_p" );

    var_7 = "gas_can_fire_spout";
    var_8 = 3;
    level.destroypropspecatehud = scripts\engine\utility::array_removedead( level.destroypropspecatehud );
    var_9 = 0;

    for ( var_10 = makecrateusableforplayer( var_8 ); var_9 < var_8; var_9++ )
    {
        if ( level.destroypropspecatehud.size >= 12 )
            break;

        var_11 = magicgrenademanual( var_7, self.origin + var_10[var_9] * 0.02, var_10[var_9], 5 );
        level.destroypropspecatehud = scripts\engine\utility::array_add( level.destroypropspecatehud, var_11 );
        var_11 thread is_trials_level( var_6 );
    }

    if ( var_2 != var_1 )
        var_6 scripts\mp\equipment\molotov::molotov_simulate_impact( var_6, var_2, ( 0, 0, 0 ), undefined, ( 0, 0, 0 ), gettime() );
    else if ( level.destroypropspecatehud.size < 12 )
    {
        var_11 = magicgrenademanual( var_7, self.origin + ( 0, 0, -30 ), ( 0, 0, -200 ), 5 );
        level.destroypropspecatehud = scripts\engine\utility::array_add( level.destroypropspecatehud, var_11 );
        var_11 thread is_trials_level( var_6 );
    }

    var_6 thread enable_keypad_interaction( 30 );
}

makecrateusableforplayer( var_0 )
{
    var_1 = [];

    if ( var_0 <= 0 )
        return var_1;

    var_2 = 360.0 / var_0;
    var_3 = randomfloatrange( -1 * var_2, var_2 );

    for ( var_4 = 0; var_4 < var_0; var_4++ )
    {
        var_5 = randomfloatrange( -0.5 * var_2, 0.5 * var_2 );
        var_6 = var_4 * var_2 + var_5 + var_3;
        var_7 = vectornormalize( rotatepointaroundvector( ( 0, 0, 1 ), ( 0, 0.7, 0.7 ), var_6 ) );
        var_8 = randomfloatrange( 250, 400 );
        var_1[var_1.size] = var_7 * var_8;
    }

    return var_1;
}

is_trials_level( var_0 )
{
    self endon( "death" );
    self endon( "missile_dest_failed" );
    self waittill( "missile_stuck", var_1 );
    var_0 scripts\mp\equipment\molotov::molotov_simulate_impact( var_0, self.origin, var_0.angles, undefined, ( 0, 0, 0 ), gettime() );
    level.destroypropspecatehud = scripts\engine\utility::array_remove( level.destroypropspecatehud, self );
    self delete();
}

enable_keypad_interaction( var_0 )
{
    self endon( "death" );

    if ( !isdefined( var_0 ) )
        var_0 = 5;

    wait( var_0 );

    if ( isdefined( self ) )
    {
        if ( isent( self ) )
            self delete();
        else
            self freescriptable();
    }
}

deposit_from_compromised_convoy_delayed()
{
    var_0 = 2;
    var_1 = self.origin + ( 0, 0, -96 );
    var_2 = physicstrace( self.origin, var_1 );
    var_3 = var_2 == var_1;
    var_4 = self.owner;

    if ( !isplayer( var_4 ) )
        var_4 = undefined;

    var_5 = "detonateGround";

    if ( var_3 )
        var_5 = "detonateAir";

    var_6 = easepower( "br_carriable_explosion_neurotoxin", self.origin, self.angles );
    var_6 setscriptablepartstate( "carrible_explode_base", var_5 );
    self radiusdamage( self.origin, 150, 250, 1, var_4, "MOD_EXPLOSIVE" );
    thread spawn_tut_loot( var_6, var_3, var_4 );
}

spawn_tut_loot( var_0, var_1, var_2 )
{
    var_3 = self.destroyscoreevent;
    var_4 = self.origin;
    var_5 = "groundLoop";

    if ( var_1 )
        var_5 = "airLoop";

    var_0 setscriptablepartstate( "carrible_neurotoxin_loop", var_5 );
    level allow_player_skip_deathshield( var_4, var_2 );
    wait( float( 30.0 ) );

    if ( isdefined( var_0 ) )
    {
        var_0 setscriptablepartstate( "carrible_neurotoxin_loop", "gasEnd" );
        var_0 thread enable_keypad_interaction( 5 );
    }
}

allow_player_skip_deathshield( var_0, var_1 )
{
    if ( !isdefined( level.allassassin_givewait ) )
        level.allassassin_givewait = [];

    var_2 = spawnstruct();
    var_2.enemygunship_watchdebuglocation = var_0;
    var_2.gastrap_dmg_trig = gettime() + 30000;
    var_2.owner = var_1;
    level.allassassin_givewait = scripts\engine\utility::array_add( level.allassassin_givewait, var_2 );

    if ( level.allassassin_givewait.size > 1 )
        return;

    level thread spawn_unique_drone();
}

spawn_unique_drone()
{
    var_0 = 250;
    var_1 = 9;

    while ( level.allassassin_givewait.size > 0 )
    {
        var_2 = [];
        var_3 = [];

        foreach ( var_5 in level.allassassin_givewait )
        {
            if ( gettime() > var_5.gastrap_dmg_trig )
            {
                var_2[var_2.size] = var_5;
                continue;
            }

            var_6 = scripts\mp\utility\player::getplayersinradius( var_5.enemygunship_watchdebuglocation, var_0 );

            foreach ( var_8 in var_6 )
                var_8.enemygunship_watchexfilsequencestart = var_5;

            var_3 = scripts\engine\utility::array_combine_unique( var_3, var_6 );
        }

        foreach ( var_8 in var_3 )
        {
            if ( !isdefined( var_8.enemygunship_watchexfilsequencestart ) )
                continue;

            if ( var_8.team == var_8.enemygunship_watchexfilsequencestart.owner.team && var_8 != var_8.enemygunship_watchexfilsequencestart.owner )
            {
                var_8.enemygunship_watchexfilsequencestart = undefined;
                continue;
            }

            if ( scripts\cp_mp\gasmask::hasgasmask( var_8 ) )
            {
                var_8 thread spawn_vehicles();

                if ( isdefined( level.kioskfiresaledoneforplayer ) )
                    var_8 [[ level.kioskfiresaledoneforplayer ]]( "carriable_neurotoxin" );
                else if ( !istrue( var_8.gasmaskequipped ) )
                    var_8 notify( "toggle_gasmask" );

                var_8 scripts\cp_mp\gasmask::processdamage( var_1 );
            }
            else
            {
                var_8 dodamage( var_1, var_8.origin, var_8.enemygunship_watchexfilsequencestart.owner, undefined, "MOD_TRIGGER_HURT", "danger_circle_br" );

                if ( var_8 scripts\mp\gametypes\br_public.gsc::hasarmor() )
                    var_8 scripts\mp\gametypes\br_public.gsc::damagearmor( var_1 );

                var_8 scripts\mp\gametypes\br_circle.gsc::_id_12972();
            }

            var_8.enemygunship_watchexfilsequencestart = undefined;
        }

        if ( var_2.size > 0 )
            level.allassassin_givewait = scripts\engine\utility::array_remove_array( level.allassassin_givewait, var_2 );

        wait 1;
    }
}

spawn_vehicles()
{
    var_0 = self;
    var_1 = 1100;

    if ( !isdefined( var_0.playingtutorialdialogue ) )
    {
        var_0.playingtutorialdialogue = gettime();

        while ( !istrue( var_0.gasmaskequipped ) || gettime() < var_0.playingtutorialdialogue + var_1 )
            wait 0.5;

        var_0.playingtutorialdialogue = undefined;

        if ( isdefined( level.kiosk_num_purchases ) )
            var_0 [[ level.kiosk_num_purchases ]]( "carriable_neurotoxin" );
        else if ( istrue( var_0.gasmaskequipped ) )
            var_0 notify( "toggle_gasmask" );

        return;
    }

    var_0.playingtutorialdialogue = gettime();
}
