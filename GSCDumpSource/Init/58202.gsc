// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_11E8E( var_0, var_1 )
{
    if ( !isdefined( var_0 ) || !isdefined( var_1 ) )
        return;

    if ( !isdefined( level.damageclonewatch ) )
        level.damageclonewatch = [];

    var_2 = !isdefined( level.damageclonewatch[var_0] ) || level.damageclonewatch[var_0] != var_1;
    level.damageclonewatch[var_0] = var_1;

    if ( var_2 )
        setomnvar( var_0, var_1 );
}

_id_11E8D( var_0, var_1 )
{
    if ( !isdefined( self ) || !isdefined( var_0 ) || !isdefined( var_1 ) )
        return;

    if ( !isdefined( self.damageclonewatch ) )
        self.damageclonewatch = [];

    var_2 = !isdefined( self.damageclonewatch[var_0] ) || self.damageclonewatch[var_0] != var_1;
    self.damageclonewatch[var_0] = var_1;

    if ( var_2 )
        self setclientomnvar( var_0, var_1 );
}

_id_11E97( var_0, var_1 )
{
    self endon( "disconnect" );
    self notify( "setOmvnar" + var_0 );
    self endon( "setOmvnar" + var_0 );

    if ( !isdefined( self._id_11C25 ) )
    {
        self._id_11C25 = spawnstruct();
        self._id_11C25.steam_damage_players = [];
        self._id_11C25.revive_origin = -1;
    }

    var_2 = gettime();

    if ( var_2 > self._id_11C25.revive_origin )
    {
        self._id_11C25.steam_damage_players = [];
        self._id_11C25.revive_origin = var_2;
    }

    if ( isdefined( self._id_11C25.steam_damage_players[var_0] ) )
    {
        waitframe();
        thread _id_11E97( var_0, var_1 );
    }
    else
    {
        self._id_11C25.steam_damage_players[var_0] = 1;
        self setclientomnvar( var_0, var_1 );
    }
}
