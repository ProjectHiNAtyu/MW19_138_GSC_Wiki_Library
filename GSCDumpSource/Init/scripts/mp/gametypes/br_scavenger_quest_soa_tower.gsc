// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    scripts\engine\scriptable::_id_11CDB( "body", ::_id_11C7E );
    var_0 = scripts\mp\gametypes\br_quest_util.gsc::registerquestcategory( "scavenger_soa_tower", 1 );
    scripts\mp\gametypes\br_quest_util.gsc::zone_stompeenemyprogressupdate( "scavenger_soa_tower", "brloot_scavenger_tablet_soa_tower" );

    if ( !var_0 )
        return;

    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger_soa_tower" )._id_11D1C = getdvarint( "scr_br_SOATower_searchCircleSize", 1000 );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger_soa_tower" ).should_do_vo_call = getdvarint( "scr_br_SOATower_missionTimeBase", 300 );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger_soa_tower" ).should_drop_grenade_pickup = getdvarint( "scr_br_SOATower_missionTimeBonus", 60 );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger_soa_tower" )._id_11A86 = getdvarint( "scr_br_SOATower_resetTimerOnPickup", 1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_1195C( "scavenger_soa_tower", ::_id_12379 );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "scavenger_soa_tower", ::_id_12373 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_1194E( "scavenger_soa_tower", ::_id_1236F );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestlocale( "scavenger_locale_soa_tower" );
    scripts\mp\gametypes\br_quest_util.gsc::registercreatequestlocale( "scavenger_locale_soa_tower", ::_id_12363 );
    scripts\mp\gametypes\br_quest_util.gsc::zoneislocked( "scavenger_locale_soa_tower", ::_id_12369 );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "scavenger_locale_soa_tower", ::_id_12371 );
    scripts\mp\gametypes\br_quest_util.gsc::registercheckiflocaleisavailable( "scavenger_locale_soa_tower", ::_id_1235F );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestcircletick( "scavenger_locale_soa_tower", ::_id_12361 );
    scripts\mp\gametypes\br_quest_util.gsc::zvelscale( "scavenger_locale_soa_tower", ::_id_12366 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11950( "scavenger_locale_soa_tower", ::_id_12376 );
    scripts\mp\gametypes\br_quest_util.gsc::watch_for_player_going_belowmap_or_oob( "scavenger_soa_tower", 1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11951( "scavenger_soa_tower", ::_id_1236C );
    var_1 = [];
    var_1[0] = scripts\mp\gametypes\br_quest_util.gsc::filtercondition_isdead;
    scripts\mp\gametypes\br_quest_util.gsc::registerplayerfilter( "scavenger_soa_tower", var_1 );
    level thread _id_1211D();
}

_id_1211D()
{
    level waittill( "prematch_fade_done" );
    player_current_primary_is_rpg();
    _id_1211F( ( 19934, -12275, -174 ) );
    _id_1211F( ( 18431, -16469, -102 ) );
    _id_1211F( ( 19912, -16488, -88 ) );
}

_id_1211F( var_0 )
{
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::_id_1225E( "scavenger_soa_tower", scripts\engine\utility::drop_to_ground( var_0, 0, -100, ( 0, 0, 1 ) ) + ( 0, 0, 25 ), 0 );
    scripts\mp\gametypes\br_pickups.gsc::_id_11959( var_1 );
}

_id_12373()
{
    scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
}

_id_1236F( var_0 )
{
    if ( var_0.team == self.team )
    {
        var_1 = scripts\mp\utility\teams::getteamdata( self.team, "players" );
        scripts\mp\gametypes\br_quest_util.gsc::getquestinstancedata( "scavenger_locale_soa_tower", self.team ).playerlist = var_1;

        if ( isdefined( self._id_12550 ) && isdefined( self._id_12550.damagedisabledfeedback ) && var_1.size )
            self._id_12550.damagedisabledfeedback setotherent( var_1[0] );

        if ( !scripts\mp\gametypes\br_quest_util.gsc::isteamvalid( var_0.team ) )
        {
            self.result = "fail";
            scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
        }
    }
}

_id_12366( var_0 )
{
    if ( !disablesuperammo( var_0 ) )
        return;

    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
    scripts\mp\gametypes\br_quest_util.gsc::overtime_music( var_0 );
}

_id_12376( var_0 )
{
    if ( !disablesuperammo( var_0 ) )
        return;

    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshow( "scavenger_soa_tower" );
    scripts\mp\gametypes\br_quest_util.gsc::_id_12058( var_0 );
}

disablesuperammo( var_0 )
{
    if ( var_0.team == self.subscribedinstances[0].team )
        return 1;
    else
        return 0;
}

_id_12363( var_0 )
{
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::createlocaleinstance( "scavenger_locale_soa_tower", "scavenger_soa_tower", self.team );

    if ( !isdefined( var_0 ) )
    {
        var_1.curorigin = ( 0, 0, 0 );
        var_1.enabled = 0;
        return var_1;
    }

    var_1 scripts\mp\gametypes\br_quest_util.gsc::force_bleedout_all_downed_players( "ui_mp_br_mapmenu_icon_vault_objective", "current" );
    var_1.playerlist = scripts\mp\utility\teams::getteamdata( self.team, "players" );
    var_1.tr_respawn = 0;
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "scavenger_locale_soa_tower", var_1 );
    var_1 _id_11F79( var_0 );
    return var_1;
}

_id_12369( var_0 )
{
    self.tr_respawn++;
    var_1 = _id_11F79( var_0 );

    if ( var_1 )
    {
        self.subscribedinstances[0].gameisending = var_0.origin;
        scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.subscribedinstances[0].team, "br_scavenger_soa_tower_quest_next_location" );
        level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_obj_next_nptarget", self.subscribedinstances[0].team, 1 );

        if ( istrue( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger_soa_tower" )._id_11A86 ) )
            self.subscribedinstances[0] scripts\mp\gametypes\br_quest_util.gsc::watch_for_player_in_gulag( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger_soa_tower" ).should_do_vo_call, 1 );
        else
            self.subscribedinstances[0] scripts\mp\gametypes\br_quest_util.gsc::watch_for_player_entered_trap_room( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger_soa_tower" ).should_drop_grenade_pickup );
    }
}

_id_11F79( var_0 )
{
    if ( !isdefined( var_0 ) )
    {
        var_1 = self.subscribedinstances[0];

        foreach ( var_3 in scripts\mp\utility\teams::getteamdata( var_1.team, "players" ) )
            var_3 scripts\mp\utility\lower_message::_id_11EBD( "br_assassination_notargets", undefined, 5 );

        var_1.result = "no_locale";
        var_1 scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
        return 0;
    }

    getlootspawnpointcount( var_0.index );
    _id_122F9( var_0.origin, var_0.angles, self );
    self.curorigin = var_0.origin + ( 0, 0, 50 );
    _id_12B24();
    return 1;
}

_id_12371()
{
    getcombatrecordsupermisc();
    self.playerlist = undefined;
    self.subscribedinstances = undefined;

    if ( isdefined( self.damagedisabledfeedback ) )
    {
        if ( self.damagedisabledfeedback getscriptablepartstate( "body" ) == "scavenger_soa_tower_closed" )
            self.damagedisabledfeedback delete();
    }
}

_id_12361( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( !isdefined( var_1 ) )
        return;

    if ( !isdefined( self.curorigin ) )
        return;

    if ( !isdefined( self.lastcircletick ) )
        self.lastcircletick = -1;

    var_2 = gettime();

    if ( self.lastcircletick == var_2 )
        return;

    self.lastcircletick = var_2;
    var_3 = distance2d( self.curorigin, var_0 );

    if ( var_3 > var_1 )
    {
        foreach ( var_5 in self.subscribedinstances )
            var_5 failscavengerquest();
    }
}

_id_1235F()
{
    return 0;
}

takequestitem( var_0 )
{
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::createquestinstance( "scavenger_soa_tower", self.team, var_0.index, var_0 );
    var_1 scripts\mp\gametypes\br_quest_util.gsc::registerteamonquest( self.team, self );
    var_1 scripts\mp\gametypes\br_quest_util.gsc::zombiepingtime( self );
    var_1.team = self.team;
    var_1.playerlist = scripts\mp\utility\teams::getteamdata( self.team, "players" );
    var_1.startlocation = self.origin;
    var_1.gameisending = self.origin;
    var_1._id_11A51 = var_0._id_11A51;
    var_2 = select_bridge_two_spawners( var_1.startlocation, var_1._id_11A51[0] );
    var_3 = var_1 scripts\mp\gametypes\br_quest_util.gsc::requestquestlocale( "scavenger_locale_soa_tower", var_2, 1 );
    scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshowtoteam( "scavenger_soa_tower", self.team );
    var_1.totalscavengeditems = 0;
    var_1 scripts\mp\gametypes\br_quest_util.gsc::watch_for_player_in_gulag( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger_soa_tower" ).should_do_vo_call, 4 );
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "scavenger_soa_tower", var_1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_124A9( "scavenger_soa_tower", self, self.team );
    var_4 = spawnstruct();
    var_4.excludedplayers = [];
    var_4.excludedplayers[0] = self;
    var_4.vehicleoutline = scripts\mp\gametypes\br_quest_util.gsc::min_z( "scavenger_soa_tower", scripts\mp\gametypes\br_quest_util.gsc::mine_caves_cell_support_internal( self.team ) );
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_scavenger_soa_tower_quest_start_team", var_4 );
    scripts\mp\gametypes\br_quest_util.gsc::displayplayersplash( self, "br_scavenger_soa_tower_quest_start_tablet_finder", var_4 );

    if ( !scripts\mp\gametypes\br_public.gsc::rear_minigun_model() )
        scripts\mp\gametypes\br_quest_util.gsc::monitor_waypoint_objective_on_front_truck( self.team, "br_mission_pickup_tablet" );

    scripts\mp\gametypes\br_quest_util.gsc::global_stealth_broken_func( var_1.team, self, 6, scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "scavenger_soa_tower" ) );
    level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_gen_accept", var_1.team, 1 );
}

select_bridge_two_spawners( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2._id_11D1F = "getUnusedLootCacheArray";
    var_2._id_11D1B = var_0;
    var_2._id_11D22 = 10000;
    var_2._id_11D23 = 0;
    var_2._id_11D20 = 4000;
    var_2._id_11D21 = 2000;
    var_2._id_11D1D = 1;
    var_2._id_11A51 = var_1;
    var_2.mintime = 45;

    if ( kickafkplayer() )
    {
        if ( var_2._id_11D22 < level.watch_for_driver_spawned )
            var_2._id_11D22 = level.watch_for_driver_spawned;

        var_2._id_11D20 = level.watch_for_driver_spawned;
        var_2._id_11D21 = level.watch_for_flash_detonation;
    }

    var_3 = getdvarint( "scr_br_questScavDistMin", -1 );
    var_4 = getdvarint( "scr_br_questScavDistMax", -1 );

    if ( var_3 >= 0 )
        var_2._id_11D21 = var_3;

    if ( var_4 >= 0 )
        var_2._id_11D20 = var_4;

    return var_2;
}

kickafkplayer()
{
    var_0 = 0;
    var_1 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "overrideQuestSearchParams", "scavenger_soa_tower" );

    if ( isdefined( var_1 ) )
        return var_1;

    var_2 = scripts\mp\utility\game::missions_clearinappropriaterewards();

    switch ( var_2 )
    {
        case "mini":
        case "risk":
        case "dmz":
            var_0 = 1;
            break;
    }

    return var_0;
}

exitdriver( var_0 )
{
    var_1 = easepower( "brloot_access_card_gold_vault_lockbox_1", var_0.origin + ( 0, 0, 20 ) );
    scripts\mp\gametypes\br_pickups.gsc::_id_11959( var_1 );
    playsoundatpos( var_1.origin, "br_legendary_loot_drop" );
    var_2 = spawnstruct();
    var_3 = scripts\mp\gametypes\br_quest_util.gsc::mine_caves_cell_support_internal( self.team );
    var_4 = scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "scavenger_soa_tower" );
    var_5 = scripts\mp\gametypes\br_quest_util.gsc::mine_caves_ambush( scripts\mp\gametypes\br_quest_util.gsc::mine_cave_turrets( "scavenger_soa_tower" ) );
    var_2.target_show_damage_damage_watch = scripts\mp\gametypes\br_quest_util.gsc::target_wavespawning_to_jammer5( var_4, var_3, var_5 );

    foreach ( var_7 in self.playerlist )
    {
        if ( isdefined( var_7 ) && getdvarint( "seasonal_event_id_num", 0 ) == 6 )
            var_7 scripts\cp\helicopter\chopper_boss::_id_11A49( "t9_ch_global_complete_side_mission_for_s3_5_event_wz", 1 );
    }

    if ( !scripts\mp\gametypes\br_public.gsc::rear_minigun_model() )
    {
        scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_scavenger_soa_tower_quest_complete", var_2 );
        level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_misc_success", self.team, 1, 1 );
    }

    self._id_11B21 = var_0.origin;
    self._id_11B1E = var_0.angles;
    self.result = "success";
    scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
}

failscavengerquest()
{
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_scavenger_soa_tower_quest_circle_failure" );
    level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_obj_circle_fail", self.team, 1 );
    self.result = "fail";
    scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
}

_id_12B24()
{
    foreach ( var_1 in self.playerlist )
        var_1 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivesetparameter( self.tr_respawn );

    var_3 = scripts\mp\gametypes\br_quest_util.gsc::sortvalidplayersinarray( self.playerlist );

    foreach ( var_1 in var_3["valid"] )
    {
        var_1 scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshow( "scavenger_soa_tower" );
        scripts\mp\gametypes\br_quest_util.gsc::_id_12058( var_1 );
    }

    foreach ( var_1 in var_3["invalid"] )
    {
        var_1 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
        scripts\mp\gametypes\br_quest_util.gsc::overtime_music( var_1 );
    }
}

overwatch_player( var_0 )
{
    scripts\mp\gametypes\br_quest_util.gsc::overtime_music( var_0 );
    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
}

getcombatrecordsupermisc()
{
    foreach ( var_1 in self.playerlist )
        overwatch_player( var_1 );

    scripts\mp\gametypes\br_quest_util.gsc::getcodecomputerdisplaycode();
}

_id_1236C()
{
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_scavenger_soa_tower_quest_timer_expired" );
    level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_gen_fail", self.team, 1 );
}

_id_122F9( var_0, var_1, var_2 )
{
    var_3 = wave_default_internal();
    var_0 = var_3.origin;
    var_1 = var_3.angles;
    var_4 = spawn( "script_model", var_0 );
    var_5 = var_2.playerlist[0];
    var_4.angles = var_1;
    var_4 setotherent( var_5 );
    var_4 setmodel( "military_loot_crate_01_br_scavenger_01_soa_tower" );
    var_4 setscriptablepartstate( "body", "scavenger_soa_tower_closed" );
    var_4.questlocale = var_2;
    var_2.damagedisabledfeedback = var_4;
    var_2 scripts\mp\gametypes\br_quest_util.gsc::spawn_ending_individual_guys_death( var_3.origin + ( 0, 0, 50 ) );

    foreach ( var_7 in level.players )
    {
        if ( var_7 != var_5 && ( var_5.team == "none" || var_7.team != var_5.team ) )
            var_4 disablescriptableplayeruse( var_7 );
    }
}

player_current_primary_is_rpg()
{
    level.ai_force_damage_hit = [];
    level.ai_force_damage_hit[0] = [];
    level.ai_force_damage_hit[1] = [];
    level.ai_force_damage_hit[2] = [];
    level.ai_force_damage_hit[0][0] = player_controls_failsafe( scripts\engine\utility::drop_to_ground( ( 20355, -14236, -22 ), 0, -100, ( 0, 0, 1 ) ), ( 0, 180, 0 ) );
    level.ai_force_damage_hit[0][1] = player_controls_failsafe( scripts\engine\utility::drop_to_ground( ( 20915, -14865, -22 ), 0, -100, ( 0, 0, 1 ) ), ( 0, 90, 0 ) );
    level.ai_force_damage_hit[0][2] = player_controls_failsafe( scripts\engine\utility::drop_to_ground( ( 19789, -13962, -22 ), 0, -100, ( 0, 0, 1 ) ), ( 0, 0, 0 ) );
    level.ai_force_damage_hit[1][0] = player_controls_failsafe( scripts\engine\utility::drop_to_ground( ( 19656, -14016, 298 ), 0, -100, ( 0, 0, 1 ) ), ( 0, 180, 0 ) );
    level.ai_force_damage_hit[1][1] = player_controls_failsafe( scripts\engine\utility::drop_to_ground( ( 20346, -15735, 298 ), 0, -100, ( 0, 0, 1 ) ), ( 0, 45, 0 ) );
    level.ai_force_damage_hit[1][2] = player_controls_failsafe( ( 20900, -14194, 241 ), ( 0, 90, 0 ) );
    level.ai_force_damage_hit[2][0] = player_controls_failsafe( scripts\engine\utility::drop_to_ground( ( 19699, -13932, 437 ), 0, -100, ( 0, 0, 1 ) ), ( 0, 90, 0 ) );
    level.ai_force_damage_hit[2][1] = player_controls_failsafe( ( 20072, -15288, 387 ), ( 0, 0, 0 ) );
    level.ai_force_damage_hit[2][2] = player_controls_failsafe( scripts\engine\utility::drop_to_ground( ( 20500, -15233, 442 ), 0, -100, ( 0, 0, 1 ) ), ( 0, 270, 0 ) );
}

player_controls_failsafe( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2.origin = var_0;
    var_2.angles = var_1;
    return var_2;
}

wave_default_internal()
{
    var_0 = randomint( level.ai_force_damage_hit[self.tr_respawn].size );
    var_1 = level.ai_force_damage_hit[self.tr_respawn][var_0];
    level.ai_force_damage_hit[self.tr_respawn] = scripts\engine\utility::array_remove( level.ai_force_damage_hit[self.tr_respawn], var_1 );
    return var_1;
}

_id_11C7E( var_0, var_1, var_2, var_3, var_4 )
{
    if ( istrue( var_3 scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "playerSkipLootPickup", var_0 ) ) )
        return;

    if ( var_2 == "scavenger_soa_tower_closed" && isdefined( var_0.entity ) )
    {
        var_5 = var_0.entity.questlocale.subscribedinstances[0];

        if ( var_3.team != var_5.team )
        {
            var_3 iprintlnbold( "Chest Requires a Scavenger Mission" );
            return;
        }

        var_0 setscriptablepartstate( "body", "scavenger_soa_tower_opening" );
        var_6 = getdvarint( "scr_br_scavenger_cacheDeleteDelay", 30 );
        var_0.entity scripts\engine\utility::delaycallwatchself( var_6, ::delete );
        var_5 scripts\mp\gametypes\br_quest_util.gsc::zombiepingtime( var_3 );

        switch ( var_0.entity.questlocale.tr_respawn )
        {
            case 0:
                var_0.entity _id_1211E();
                break;
            case 1:
                var_0.entity _id_1211E();
                break;
            case 3:
                break;
        }

        if ( var_0.entity.questlocale.tr_respawn == 2 )
        {
            var_5._id_11B21 = var_0.origin;
            var_5._id_11B1E = var_0.angles;
            scripts\mp\gametypes\br_quest_util.gsc::global_stealth_broken_func( var_5.team, var_3, 8, scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "scavenger_soa_tower" ) );
            var_5 exitdriver( var_0.entity );
        }
        else
        {
            scripts\mp\gametypes\br_quest_util.gsc::global_stealth_broken_func( var_5.team, var_3, 7, scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "scavenger_soa_tower" ) );
            var_7 = select_bridge_two_spawners( var_0.origin, var_5._id_11A51[var_0.entity.questlocale.tr_respawn + 1] );
            var_0.entity.questlocale scripts\mp\gametypes\br_quest_util.gsc::spawn_ending_individual_guys( "scavenger_locale_soa_tower", var_7 );
        }

        level notify( "lootcache_opened_kill_callout" + var_0.origin );
        var_8 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getFriendlyPlayers" ) ]]( var_3.team, 0 );

        foreach ( var_10 in var_8 )
            var_10 notify( "calloutmarkerping_warzoneKillQuestIcon" );
    }
}

_id_1211E()
{
    var_0 = [ "weapon", "lethal", "ammo", "plunder" ];
    var_0 = scripts\engine\utility::array_randomize( var_0 );
    var_1 = var_0.size;
    var_2 = "mp/loot/br/bodycount/lootset_root.csv";
    var_3 = scripts\mp\gametypes\br_pickups.gsc::playersetattractiontime();

    for ( var_4 = 0; var_4 < var_1; var_4++ )
    {
        var_5 = registerscriptedspawnpoints( var_0[var_4], 0, 3, var_2 );

        if ( scripts\mp\gametypes\br_lootcache.gsc::delay_put_players_in_black_screen( var_5 ) )
        {
            var_6 = self.angles + ( 0, 45, 0 );
            scripts\mp\gametypes\br_lootcache.gsc::selfrevivemonitorrevivebuttonpressed( var_5, var_3, self.origin, var_6, undefined, 0 );
        }
    }
}

_id_12379()
{
    self._id_11A51 = [];
    var_0 = self.origin;

    for ( var_1 = 0; var_1 < 3; var_1++ )
    {
        var_2 = select_bridge_two_spawners( var_0 );
        var_3 = scripts\mp\gametypes\br_quest_util.gsc::is_point_in_cylinder( "scavenger_soa_tower", var_2 );

        if ( !isdefined( var_3 ) )
            return 0;

        getlootspawnpointcount( var_3.index );
        var_0 = var_3.origin;
        self._id_11A51[var_1] = var_3;
    }

    return 1;
}
