// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    scripts\engine\scriptable::_id_11CDB( "body", ::labels );
    var_0 = scripts\mp\gametypes\br_quest_util.gsc::registerquestcategory( "geigerstash", 1 );

    if ( !var_0 )
        return;

    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "geigerstash" )._id_11D1C = getdvarint( "scr_br_geigerstash_searchCircleSize", 7000 );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "geigerstash" ).should_do_vo_call = getdvarint( "scr_br_geigerstash_missionTimeBase", 180 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_1195C( "geigerstash", ::labelsused );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "geigerstash", ::ks_pointsperkingslain );
    scripts\mp\gametypes\br_quest_util.gsc::_id_1194E( "geigerstash", ::ks_pointbonusforteam );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestcircletick( "geigerstash", ::ks_circlemoving );
    scripts\mp\gametypes\br_quest_util.gsc::zvelscale( "geigerstash", ::ks_circleradius );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11950( "geigerstash", ::ks_pointstowin );
    scripts\mp\gametypes\br_quest_util.gsc::watch_for_player_going_belowmap_or_oob( "geigerstash", 1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11951( "geigerstash", ::ks_killleaders );
}

labelsused()
{
    var_0 = self.origin;
    var_1 = select_bridge_two_spawners( var_0 );
    var_2 = scripts\mp\gametypes\br_quest_util.gsc::is_point_in_cylinder( "geigerstash", var_1 );

    if ( !isdefined( var_2 ) )
        return 0;

    getlootspawnpointcount( var_2.index );
    var_0 = var_2.origin;
    self._id_11A51 = var_2;
    return 1;
}

ks_circlemoving( var_0, var_1 )
{
    if ( !isdefined( self.lastcircletick ) )
        self.lastcircletick = -1;

    var_2 = gettime();

    if ( self.lastcircletick == var_2 )
        return;

    self.lastcircletick = var_2;
    var_3 = distance2d( self.curorigin, var_0 );

    if ( var_3 > var_1 )
        instance();
}

ks_circleradius( var_0 )
{
    if ( !disablespawningforplayer( var_0 ) )
        return;

    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
}

ks_pointstowin( var_0 )
{
    if ( !disablespawningforplayer( var_0 ) )
        return;

    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshow( "geigerstash" );
}

ks_killleaders()
{
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_geigerstash_quest_timer_expired" );
    var_0 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getFriendlyPlayers" ) ]]( self.team, 0 );
    ks_pointkingsgetnobonus( var_0 );
    level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_gen_fail", self.team, 1 );
}

ks_pointkingsgetnobonus( var_0 )
{
    var_1 = "secondary";
    var_2 = "equip_geiger_counter";
    var_0[0] scripts\mp\equipment::_id_1261F( var_0, var_1, var_2, 0 );

    foreach ( var_4 in var_0 )
    {
        if ( isdefined( var_4.helidrivable ) )
            scripts\mp\gametypes\br_pickups.gsc::select_patrol_one_spawners( var_4.helidrivable );
    }
}

ks_pointsperkingslain()
{
    getcircleindexforpoint();

    foreach ( var_1 in self.playerlist )
        var_1 setclientomnvar( "ui_br_geiger_target", -1 );

    scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
}

ks_pointbonusforteam( var_0 )
{
    if ( var_0.team == self.team )
    {
        var_1 = scripts\mp\utility\teams::getteamdata( self.team, "players" );
        scripts\mp\gametypes\br_quest_util.gsc::getquestinstancedata( "geigerstash", self.team ).playerlist = var_1;

        if ( isdefined( self ) && isdefined( self.damagedisabledfeedback ) && var_1.size )
            self.damagedisabledfeedback setotherent( var_1[0] );

        if ( !scripts\mp\gametypes\br_quest_util.gsc::isteamvalid( var_0.team ) )
        {
            self.result = "fail";
            scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
        }
    }
}

disablespawningforplayer( var_0 )
{
    if ( var_0.team == self.team )
        return 1;
    else
        return 0;
}

takequestitem( var_0 )
{
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::createquestinstance( "geigerstash", self.team, var_0.index, var_0 );
    var_1 scripts\mp\gametypes\br_quest_util.gsc::registerteamonquest( self.team, self );
    var_1 scripts\mp\gametypes\br_quest_util.gsc::zombiepingtime( self );
    var_1.team = self.team;
    var_1.startlocation = self.origin;
    var_1.gameisending = self.origin;
    var_1._id_11A51 = var_0._id_11A51;
    var_1.playerlist = scripts\mp\utility\teams::getteamdata( self.team, "players" );
    var_2 = select_bridge_two_spawners( var_1.startlocation, var_1._id_11A51 );
    var_1 _id_122C3( var_1._id_11A51.origin, var_1._id_11A51.angles );
    var_1 _id_12AFA();
    scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshowtoteam( "geigerstash", self.team );
    var_1 scripts\mp\gametypes\br_quest_util.gsc::watch_for_player_in_gulag( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "geigerstash" ).should_do_vo_call, 4 );
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "geigerstash", var_1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_124A9( "geigerstash", self, self.team );
    var_3 = spawnstruct();
    var_3.excludedplayers = [];
    var_3.excludedplayers[0] = self;
    var_3.vehicleoutline = scripts\mp\gametypes\br_quest_util.gsc::min_z( "geigerstash", scripts\mp\gametypes\br_quest_util.gsc::mine_caves_cell_support_internal( self.team ) );
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_geigerstash_quest_start_team_notify", var_3 );
    scripts\mp\gametypes\br_quest_util.gsc::displayplayersplash( self, "br_geigerstash_quest_start_tablet_finder", var_3 );
    scripts\mp\gametypes\br_quest_util.gsc::monitor_waypoint_objective_on_front_truck( self.team, "br_mission_pickup_tablet" );
}

select_bridge_two_spawners( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2._id_11D1F = "getUnusedLootCacheArray";
    var_2._id_11D1B = var_0;
    var_2._id_11D22 = 10000;
    var_2._id_11D23 = 0;
    var_2._id_11D20 = 4000;
    var_2._id_11D21 = 2000;
    var_2._id_11D1D = 1;
    var_2._id_11A51 = var_1;
    var_2.mintime = 60;

    if ( getdvar( "scr_br_gametype", "" ) == "dmz" )
    {
        if ( var_2._id_11D22 < level.watch_for_heli_bosses_dead )
            var_2._id_11D22 = level.watch_for_heli_bosses_dead;

        var_2._id_11D20 = level.watch_for_heli_bosses_dead;
        var_2._id_11D21 = level.watch_for_heli_death;
    }

    return var_2;
}

_id_122C3( var_0, var_1 )
{
    var_2 = spawn( "script_model", var_0 );
    var_3 = self.playerlist[0];
    var_2.angles = var_1;
    var_2 setotherent( var_3 );
    var_2 setmodel( "military_loot_crate_01_br_geigerstash_01" );
    var_2 setscriptablepartstate( "body", "geigerstash_closed" );
    var_2.watch_for_maze_ai_events = self;
    self.damagedisabledfeedback = var_2;
    var_2.watch_for_maze_ai_events.curorigin = var_2.origin;

    foreach ( var_5 in level.players )
    {
        if ( var_5 != var_3 && ( var_3.team == "none" || var_5.team != var_3.team ) )
            var_2 disablescriptableplayeruse( var_5 );
    }

    var_7 = "secondary";
    var_8 = "equip_geiger_counter";
    self.playerlist[0] scripts\mp\equipment::monitor_balloons( self.playerlist, var_7, var_8 );
    var_9 = self.damagedisabledfeedback getentitynumber();

    foreach ( var_5 in self.playerlist )
        var_5 setclientomnvar( "ui_br_geiger_target", var_9 );
}

_id_12AFA()
{
    var_0 = scripts\mp\gametypes\br_quest_util.gsc::sortvalidplayersinarray( self.playerlist );

    foreach ( var_2 in var_0["valid"] )
        var_2 scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshow( "geigerstash" );

    foreach ( var_2 in var_0["invalid"] )
        var_2 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
}

outro_dialogue_logic( var_0 )
{
    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
}

getcircleindexforpoint()
{
    foreach ( var_1 in self.playerlist )
        outro_dialogue_logic( var_1 );
}

labels( var_0, var_1, var_2, var_3, var_4 )
{
    if ( istrue( var_3 scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "playerSkipLootPickup", var_0 ) ) )
        return;

    if ( var_2 == "geigerstash_closed" && isdefined( var_0.entity ) )
    {
        var_5 = var_0.entity.watch_for_maze_ai_events;

        if ( istrue( var_5.removed ) )
        {
            var_3 scripts\mp\utility\lower_message::_id_11EBD( "contract_expired", undefined, 5 );
            return;
        }

        var_0 setscriptablepartstate( "body", "geigerstash_opening" );
        var_6 = getdvarint( "scr_br_geigerstash_cacheDeleteDelay", 30 );
        var_0.entity scripts\engine\utility::delaycallwatchself( var_6, ::delete );
        var_5._id_11B21 = var_0.origin;
        var_5._id_11B1E = var_0.angles;
        var_5 existingkills( var_0.entity );
        level notify( "lootcache_opened_kill_callout" + var_0.origin );
        var_7 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getFriendlyPlayers" ) ]]( var_3.team, 0 );

        foreach ( var_9 in var_7 )
            var_9 notify( "calloutmarkerping_warzoneKillQuestIcon" );

        ks_pointkingsgetnobonus( var_7 );
    }
}

existingkills( var_0 )
{
    var_1 = spawnstruct();
    var_2 = scripts\mp\gametypes\br_quest_util.gsc::mine_caves_cell_support_internal( self.team );
    var_3 = scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "geigerstash" );
    var_4 = scripts\mp\gametypes\br_quest_util.gsc::mine_caves_ambush( scripts\mp\gametypes\br_quest_util.gsc::mine_cave_turrets( "geigerstash" ) );
    var_1.target_show_damage_damage_watch = scripts\mp\gametypes\br_quest_util.gsc::target_wavespawning_to_jammer5( var_3, var_2, var_4 );
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_geigerstash_quest_complete", var_1 );
    self._id_11B21 = var_0.origin;
    self._id_11B1E = var_0.angles;
    self.result = "success";

    foreach ( var_6 in self.playerlist )
        var_6 setclientomnvar( "ui_br_geiger_target", -1 );

    scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();

    foreach ( var_6 in scripts\mp\utility\teams::getteamdata( self.team, "players" ) )
        var_6 scripts\cp\helicopter\chopper_boss::stop_passedby_once( "br_geiger_contract" );
}

instance()
{
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_geigerstash_quest_circle_failure" );
    level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_obj_circle_fail", self.team, 1 );
    self.result = "fail";

    foreach ( var_1 in self.playerlist )
        var_1 setclientomnvar( "ui_br_geiger_target", -1 );

    scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
}
