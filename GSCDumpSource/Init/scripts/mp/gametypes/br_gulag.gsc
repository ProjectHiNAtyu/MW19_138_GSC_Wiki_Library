// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

initgulag()
{
    level._id_11A9F = getdvarfloat( "scr_br_respawn_circleInterpPct", 0.75 );

    if ( !istrue( level.usegulag ) )
        return;

    if ( scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "gulag" ) )
    {
        level.usegulag = 0;
        return;
    }

    setomnvar( "ui_gulag_state", 1 );
    setomnvar( "ui_gulag_show_closing_state", 0 );
    level.gulag = spawnstruct();
    level.gulag.arenaflag = getdvarint( "scr_br_fc_flag", 1 );
    level.gulag.maxplayers = getmaxplayers();
    level.gulag.maxuses = getdvarint( "scr_br_fc_max_uses", 1 );
    level.gulag.endonshutdown = getdvarint( "scr_br_fc_end_on_shutdown", 3 );
    level.gulag.timelimit = getdvarint( "scr_br_fc_timelimit", 15.0 );
    level.gulag.maxqueue = getdvarint( "scr_br_fc_max_queue_wait", 3 );
    level.gulag.onekillwin = getdvarint( "scr_br_fc_one_kill_win", 1 );
    level.gulag.multiarena = getdvarint( "scr_br_fc_multi_arena", 1 );
    level.gulag.planerespawn = getdvarint( "scr_br_fc_plane_respawn", 0 );
    level.gulag.plunderdelta = getdvarint( "scr_br_fc_intro_cinematic", 1 );
    level.gulag._id_12B6E = getdvarint( "scr_br_fc_useCellSpawns", 1 );
    level.gulag._id_12B83 = getdvarint( "scr_br_fc_useFloorRocks", 0 );
    level.gulag._id_122D6 = getdvarint( "scr_br_fc_spawnLoot", 0 );
    level.gulag.lethaldelay = getdvarint( "scr_br_fc_lethalDelay", 4 );
    level.gulag._id_12537 = getdvarint( "scr_br_fc_prestream_geo_timeout", 9 );
    level.gulag.start_area_fx_end = getdvarint( "scr_br_fc_numArmorHealth", 0 );
    level.gulag.stack_patch_waittill_root = getdvarint( "scr_br_gulag_nuketown", 1 );
    level.gulag.fail_mission_if_killed = getdvarint( "scr_br_fc_countdownTime", 3 );
    level.gulag.get_players_at_zone = getdvarint( "scr_br_fc_defaultPlunder", 5 );
    level.gulag.dialog_mount_nag_watcher = getdvarint( "scr_br_gulag_chair", 1 );
    level.gulag._id_12D9E = getdvarint( "scr_br_gulag_voices", 1 );
    _setdomflagiconinfo( "waypoint_captureneutral", "neutral", "MP_BR_INGAME/DOM_CAPTURE", 0 );
    _setdomflagiconinfo( "waypoint_capture", "enemy", "MP_BR_INGAME/DOM_CAPTURE", 0 );
    _setdomflagiconinfo( "waypoint_defend", "friendly", "MP_INGAME_ONLY/OBJ_DEFEND_CAPS", 0 );
    _setdomflagiconinfo( "waypoint_defending", "friendly", "MP_INGAME_ONLY/OBJ_DEFENDING_CAPS", 0 );
    _setdomflagiconinfo( "waypoint_contested", "contest", "MP_INGAME_ONLY/OBJ_CONTESTED_CAPS", 1 );
    _setdomflagiconinfo( "waypoint_taking", "friendly", "MP_INGAME_ONLY/OBJ_TAKING_CAPS", 1 );
    _setdomflagiconinfo( "waypoint_losing", "enemy", "MP_INGAME_ONLY/OBJ_LOSING_CAPS", 1 );
    level.gulag.retreatanddie = [];

    if ( istrue( level.gulag.arenaflag ) )
        scripts\mp\gametypes\br_dom_quest.gsc::_id_11F5F();

    _id_11F96();
    level.gulag.arenas = gulaggetarenas();
    gulaggesturesinit();
    gulaginitloadouts();

    if ( level.gulag.plunderdelta )
        scripts\mp\utility\lui_game_event_aggregator::registeronluieventcallback( ::uniquelootcallbacks );

    if ( level.gulag._id_12B83 )
        scripts\engine\scriptable::_id_11CDB( "brloot_rock", ::rockused );

    level.gulag.betting = getdvarint( "scr_br_fc_betting", 0 );

    if ( level.gulag.betting )
    {
        if ( !istrue( level.br_plunder_enabled ) )
            level.gulag.betting = 0;

        if ( getdvarint( "scr_br_fc_countdownTime", 3 ) == 3 )
            level.gulag.fail_mission_if_killed = 15;
    }

    if ( !isdefined( level.gulag.arenas[0].jailspawns[0].chair ) )
        level.gulag.dialog_mount_nag_watcher = 0;

    foreach ( var_1 in level.gulag.arenas )
        level thread monitorgulag( var_1 );

    thread spawnac130();
    playing_bomb_counter_beep();
    level.keyboard_monitor_disable = ::x1ops;
}

_setdomflagiconinfo( var_0, var_1, var_2, var_3 )
{
    level.waypointcolors[var_0] = var_1;
    level.waypointbgtype[var_0] = 1;
    level.waypointstring[var_0] = var_2;
    level.waypointshader[var_0] = "ui_mp_br_mapmenu_icon_gulag_overtime_objective";
    level.waypointpulses[var_0] = var_3;
}

playing_bomb_counter_beep()
{
    game["dialog"]["gulag_spawn"] = "gulag_spawn";
    game["dialog"]["gulag_spawn_rules"] = "gulag_spawn_rules";
    game["dialog"]["gulag_objective"] = "gulag_objective";
    game["dialog"]["gulag_next"] = "gulag_next";
    game["dialog"]["gulag_win"] = "gulag_win";
    game["dialog"]["gulag_lose"] = "gulag_lose";
    game["dialog"]["gulag_teammate_gulag"] = "gulag_teammate_gulag";
    game["dialog"]["gulag_teammate_lose"] = "gulag_teammate_lose";
    game["dialog"]["gulag_teammate_win"] = "gulag_teammate_win";
    game["dialog"]["gulag_gulag_active"] = "gulag_gulag_active";
    game["dialog"]["gulag_gulag_close"] = "gulag_gulag_close";
    game["dialog"]["gulag_noenemy"] = "gulag_noenemy";
    game["dialog"]["gulag_timeout"] = "gulag_timeout";
    game["dialog"]["gulag_buyback"] = "gulag_buyback";
    game["dialog"]["gulag_taunt"] = "gulag_taunt";
    game["dialog"]["gulag_obj_wait"] = "gulag_obj_wait";
}

gulaggetarenas()
{
    var_0 = make_trophy_explosion();

    if ( scripts\mp\gametypes\br_public.gsc::processvoqueue() )
        var_0 = scripts\engine\utility::getstructarray( "gulag_tutorial", "targetname" );

    for ( var_1 = 0; var_1 < var_0.size; var_1++ )
    {
        var_2 = var_0[var_1];
        var_2.mp_m_speed_patch = var_1;
        setuparena( var_2 );
    }

    return var_0;
}

make_trophy_explosion()
{
    var_0 = scripts\engine\utility::getstructarray( "gulag", "targetname" );
    var_1 = [];

    foreach ( var_3 in var_0 )
    {
        var_4 = isdefined( var_3.script_noteworthy ) && var_3.script_noteworthy == "nuketown";

        if ( istrue( level.gulag.stack_patch_waittill_root ) && var_4 || !istrue( level.gulag.stack_patch_waittill_root ) && !var_4 )
            var_1[var_1.size] = var_3;
    }

    if ( var_1.size > 0 )
        var_0 = var_1;

    if ( var_0.size > 1 )
        var_0 = scripts\engine\utility::array_randomize( var_0 );

    return var_0;
}

setuparena( var_0 )
{
    var_0.jailspawns = [];
    var_0.fightspawns = [];
    var_0.dialog_monitor_getoffground = [];
    var_0.gates = [];
    var_0.floor = [];
    var_0.weapons = [];
    var_0.molotovs = [];
    var_0.dialog_reachnextcheckpoint = [];
    var_0._id_11B79 = [];
    var_0.jailedplayers = [];
    var_0.arenaplayers = [];
    var_0.matches = [];
    var_0.loadingplayers = [];
    var_0.fightover = 1;
    var_0.steam_damage_player = [];
    var_0.steam_damage_player["ui_br_gulag_players_1"] = 0;
    var_0.steam_damage_player["ui_br_gulag_data"] = 0;
    var_1 = [];
    var_2 = scripts\engine\utility::getstructarray( var_0.target, "targetname" );

    foreach ( var_4 in var_2 )
    {
        if ( var_4.script_noteworthy == "prison_spawn" )
        {
            var_0.jailspawns[var_0.jailspawns.size] = var_4;
            continue;
        }

        if ( var_4.script_noteworthy == "fight_spawn" )
        {
            var_0.fightspawns[var_0.fightspawns.size] = var_4;
            continue;
        }

        if ( var_4.script_noteworthy == "cell_spawn" )
        {
            var_0.dialog_monitor_getoffground[var_0.dialog_monitor_getoffground.size] = var_4;
            continue;
        }

        if ( var_4.script_noteworthy == "gulag_center" )
        {
            var_0.center = var_4.origin;
            continue;
        }

        if ( var_4.script_noteworthy == "spectator" )
        {
            var_0._id_1232B = var_4;
            continue;
        }

        if ( isdefined( var_4.script_parameters ) && var_4.script_parameters == "gulag_loot" )
        {
            var_1[var_1.size] = var_4;
            continue;
        }

        if ( var_4.script_noteworthy == "voices" )
            var_0._id_11B79[var_0._id_11B79.size] = var_4;
    }

    if ( !isdefined( var_0.center ) )
        var_0.center = getgulagcenter( var_0 );

    if ( getdvarint( "scr_br_fc_shifted_spawns", 1 ) > 0 )
        var_0.fightspawns = scripts\engine\utility::array_sort_with_func( var_0.fightspawns, ::exfil_regroup_spot );
    else
        var_0.fightspawns = scripts\engine\utility::array_sort_with_func( var_0.fightspawns, ::exfil_retreat );

    foreach ( var_7 in var_0.dialog_monitor_getoffground )
        _id_11F55( var_0, var_7 );

    var_0.dialog_monitor_getoffground = scripts\engine\utility::array_sort_with_func( var_0.dialog_monitor_getoffground, ::exfil_retreat );

    foreach ( var_10 in var_0.jailspawns )
        _id_11F75( var_0, var_10 );

    if ( istrue( level.gulag._id_122D6 ) )
        var_0.weapons = spawnlootweapons( var_1 );

    spawnrocks( var_0 );

    if ( istrue( level.gulag.arenaflag ) )
        _id_11F60( var_0 );

    thread _id_124B1( var_0 );
}

gulaggesturesinit()
{
    level.gulag.gestures_enabled = getdvarint( "scr_br_fc_gestures", 0 );

    if ( !istrue( level.gulag.gestures_enabled ) )
        return;

    level.gulag.gestures = [];
    level.gulag.gestures["fc_gesture_neg"] = [ "iw8_ges_plyr_gesture_crush", "iw8_ges_plyr_gesture_rally", "iw8_ges_plyr_gesture_revive" ];
    level.gulag.gestures["fc_gesture_pos"] = [ "iw8_ges_plyr_gesture_doubletime", "iw8_ges_plyr_gesture_hold", "iw8_ges_plyr_gesture_ok", "iw8_ges_plyr_gesture_thumbs_up" ];
    level.gulag.gesturesounds["fc_gesture_neg"] = [ "tmp_gulag_gesture_neg_crush", "tmp_gulag_gesture_neg_rally", "tmp_gulag_gesture_neg_revive" ];
    level.gulag.gesturesounds["fc_gesture_pos"] = [ "tmp_gulag_gesture_pos_doubletime", "tmp_gulag_gesture_pos_hold", "tmp_gulag_gesture_pos_ok", "tmp_gulag_gesture_pos_thumbs_up" ];
}

getmaxplayers()
{
    var_0 = int( clamp( getdvarint( "scr_br_fc_max_players", 2 ), 2, 2 ) );

    if ( var_0 % 2 != 0 )
        var_0 = var_0 - 1;

    return var_0;
}

exfil_retreat( var_0, var_1 )
{
    return var_0.script_index < var_1.script_index;
}

exfil_regroup_spot( var_0, var_1 )
{
    if ( var_0.script_index == 4 )
        return 1;
    else if ( var_0.script_index == 5 )
        return 1;
    else if ( var_1.script_index == 4 )
        return 0;
    else if ( var_1.script_index == 5 )
        return 0;

    return exfil_retreat( var_0, var_1 );
}

copystructwithoffset( var_0, var_1, var_2 )
{
    var_3 = spawnstruct();
    var_3.origin = var_0.origin + var_1;
    var_3.angles = var_0.angles;
    var_3.script_index = var_2;
    return var_3;
}

getgulagcenter( var_0 )
{
    var_1 = ( 0, 0, 0 );

    foreach ( var_3 in var_0.fightspawns )
        var_1 = var_1 + var_3.origin;

    var_1 = var_1 / var_0.fightspawns.size;
    return var_1;
}

spawnweapon( var_0, var_1, var_2 )
{
    var_3 = scripts\mp\gametypes\br_weapons.gsc::createspawnweaponatpos( getgroundposition( var_0.origin + ( 0, 0, 12 ), 12 ), var_0.angles + ( 0, 0, 90 ), var_1, [] );
    var_3 thread outlinewatchplayerprox( var_2 );
    return var_3;
}

spawnlootweapons( var_0 )
{
    var_1 = [];
    var_2 = [];
    var_2["none"] = [ "none" ];
    var_2["tactical"] = scripts\mp\gametypes\br_pickups.gsc::getgulagpickupsforclass( "tactical" );
    var_2["lethal"] = scripts\mp\gametypes\br_pickups.gsc::getgulagpickupsforclass( "lethal" );
    var_3 = [];

    foreach ( var_5 in var_2 )
    {
        foreach ( var_7 in var_5 )
        {
            var_8 = 1;

            if ( isdefined( var_3[var_7] ) )
                continue;

            var_9 = level.br_lootiteminfo[var_7];

            if ( isdefined( var_9 ) )
            {
                var_10 = level.br_lootiteminfo[var_7].baseweapon + "_mp";
                var_8 = weaponclipsize( var_10 ) * 1;
            }

            var_3[var_7] = var_8;
        }
    }

    var_13 = [ "tactical", "tactical", "lethal", "lethal", "lethal" ];
    var_13 = scripts\engine\utility::array_randomize( var_13 );
    var_14 = [];
    var_14["floor_center_01"] = scripts\engine\utility::random( var_2[var_13[0]] );
    var_14["floor_center_02"] = scripts\engine\utility::random( var_2[var_13[1]] );
    var_14["floor_right_01"] = scripts\engine\utility::random( var_2[var_13[2]] );
    var_14["floor_left_01"] = scripts\engine\utility::random( var_2[var_13[3]] );
    var_14["floor_mid_01"] = scripts\engine\utility::random( var_2[var_13[4]] );

    if ( getdvarint( "scr_br_fc_shifted_spawns", 1 ) > 0 )
        var_14["floor_left_01"] = var_14["floor_right_01"];

    foreach ( var_16 in var_0 )
    {
        if ( !isdefined( var_16.script_noteworthy ) )
            continue;

        var_17 = var_14[var_16.script_noteworthy];

        if ( !isdefined( var_17 ) )
            continue;

        if ( var_17 == "none" )
            continue;

        var_18 = var_16.origin;
        var_19 = var_16.angles;

        if ( !isdefined( var_19 ) )
            var_19 = ( 0, 0, 0 );
        else
            var_19 = ( 0, var_19[1], 0 );

        var_7 = easepower( var_17, var_18, var_19 );

        if ( isdefined( var_7 ) )
        {
            var_7.part = var_17;
            scripts\mp\gametypes\br_pickups.gsc::select_back_two_spawners( var_7, var_3[var_17] );
            var_7.keepinmap = 1;
            var_1[var_1.size] = var_7;
            continue;
        }
    }

    return var_1;
}

update_readings( var_0 )
{
    if ( update_restock_ui( var_0 ) )
    {
        var_1 = var_0.matches[0];

        foreach ( var_3 in var_1 )
        {
            if ( var_3 == self )
                continue;
            else if ( quickdropall( var_3, var_0 ) )
                return 0;
        }

        return 1;
    }

    return 0;
}

update_restock_ui( var_0 )
{
    if ( ismatchpending( var_0 ) )
    {
        var_1 = var_0.matches[0];

        foreach ( var_3 in var_1 )
        {
            if ( var_3 == self )
                return 1;
        }
    }

    return 0;
}

ismatchpending( var_0 )
{
    if ( var_0.matches.size == 0 )
        return 0;

    var_1 = var_0.matches[0];

    if ( var_1.size < 2 )
        return 0;

    return 1;
}

isfightready( var_0 )
{
    if ( !ismatchpending( var_0 ) )
        return 0;

    var_1 = var_0.matches[0];

    foreach ( var_3 in var_1 )
    {
        if ( istrue( var_3.entergulagwait ) || !istrue( var_3.jailed ) )
            return 0;
    }

    return 1;
}

mp_m_king_patch( var_0 )
{
    var_1 = 5000;

    if ( !isdefined( var_0.spawndomplates ) )
    {
        var_0.spawndomplates = gettime() + var_1;
        return;
    }

    if ( gettime() > var_0.spawndomplates )
    {
        var_0.jailedplayers = scripts\engine\utility::array_removeundefined( var_0.jailedplayers );
        updatematchqueuepositions( var_0 );

        if ( var_0.mp_m_speed_patch == 0 )
        {
            level.gulag.retreatanddie = scripts\engine\utility::array_removeundefined( level.gulag.retreatanddie );

            foreach ( var_3 in level.gulag.retreatanddie )
            {
                if ( !istrue( var_3.inlaststand ) )
                    level.gulag.retreatanddie = scripts\engine\utility::array_remove( level.gulag.retreatanddie, var_3 );
            }
        }

        var_0.spawndomplates = gettime() + var_1;
    }
}

monitorgulag( var_0 )
{
    level endon( "game_ended" );
    var_1 = lossendgame();

    for (;;)
    {
        mp_m_king_patch( var_0 );

        if ( istrue( level.br_prematchstarted ) )
        {
            if ( istrue( level.gulag.shutdown ) )
            {
                if ( var_0.loadingplayers.size != 0 )
                    var_0 scripts\engine\utility::waittill_notify_or_timeout( "loadingPlayersEmpty", var_1 );

                if ( level.gulag.endonshutdown == 1 )
                {
                    foreach ( var_3 in var_0.jailedplayers )
                    {
                        var_3.gulagloser = 1;
                        var_3 kill();
                    }

                    var_0.shutdown = 1;
                }
                else if ( level.gulag.endonshutdown == 2 )
                    thread dojailbreak( var_0 );
                else if ( level.gulag.endonshutdown == 3 && ( istrue( var_0.shutdown ) || !ismatchpending( var_0 ) && !bomb_vest_timer_remaining_time_ms() ) )
                {
                    foreach ( var_3 in var_0.jailedplayers )
                    {
                        if ( isalive( var_3 ) )
                        {
                            var_3 playergulagarenaready();
                            thread gulagvictory( var_0, var_3, 1, 0, "shutdown" );
                        }
                    }

                    var_0.shutdown = 1;
                }
            }

            if ( propwatchcleanupondisconnect() )
            {
                waitframe();
                continue;
            }

            if ( isfightready( var_0 ) )
                beginnewfight( var_0 );
            else
                _id_11EB6( var_0 );
        }

        waitframe();
    }
}

test_br_ending( var_0 )
{
    if ( !istrue( level.usegulag ) )
        return;

    level.gulag.paused = var_0;
}

propwatchcleanupondisconnect()
{
    return istrue( level.usegulag ) && istrue( level.gulag.paused );
}

bot_allowed_to_try_last_loadout()
{
    if ( !istrue( level.usegulag ) )
        return 0;

    foreach ( var_1 in level.gulag.arenas )
    {
        if ( !var_1.fightover )
            return 1;
    }

    return 0;
}

record_finished_area()
{
    if ( isdefined( self ) && isalive( self ) )
        gulagvictory( self.arena, self, 1, 1, "jailbreakEvent" );
}

circletimer( var_0 )
{
    if ( istrue( level.usegulag ) && !istrue( level.gulag.shutdown ) )
    {
        var_1 = manned_turret_createhintobject();

        if ( var_0 >= var_1 )
            shutdowngulag( "circle_index", var_0 );
    }
}

shutdowngulag( var_0, var_1, var_2 )
{
    if ( !istrue( level.usegulag ) || istrue( level.gulag.shutdown ) )
        return;

    setomnvar( "ui_gulag_state", 0 );
    setomnvar( "ui_gulag_show_closing_state", 2 );
    level.gulag.shutdown = 1;
    thread makeac130flyaway();

    if ( !istrue( var_2 ) )
    {
        foreach ( var_4 in level.players )
        {
            if ( istrue( var_4.inlaststand ) )
            {
                level.gulag.retreatanddie[level.gulag.retreatanddie.size] = var_4;
                continue;
            }

            if ( !isdefined( var_4 ) || !isalive( var_4 ) || isdefined( var_4.gulag ) )
                continue;

            var_4 playergulagdonesplash();
        }
    }

    getentitylessscriptablearray( "dlog_event_br_gulag_shutdown", [ "reason", var_0, "reason_count", var_1 ] );
}

bomb_vest_timer_remaining_time_ms()
{
    return level.gulag.retreatanddie.size > 0;
}

update_objective_ownerclient()
{
    if ( !istrue( level.usegulag ) || !istrue( level.gulag.shutdown ) )
        return 0;

    return scripts\engine\utility::array_contains( level.gulag.retreatanddie, self );
}

mp_oilrig_patches( var_0 )
{
    if ( istrue( level.gulag.shutdown ) && bomb_vest_timer_remaining_time_ms() )
    {
        if ( isdefined( var_0 ) && var_0 update_objective_ownerclient() )
        {
            level.gulag.retreatanddie = scripts\engine\utility::array_remove( level.gulag.retreatanddie, var_0 );
            return 1;
        }
        else
            level.gulag.retreatanddie = scripts\engine\utility::array_removeundefined( level.gulag.retreatanddie );
    }

    return 0;
}

onplayerdisconnect( var_0 )
{
    if ( !istrue( level.usegulag ) )
        return;

    mp_oilrig_patches( var_0 );
}

unset_just_keep_moving( var_0 )
{
    if ( !istrue( level.usegulag ) )
        return;

    if ( istrue( var_0 ) )
    {
        self.laststandbegintime = undefined;

        if ( mp_oilrig_patches( self ) )
            playergulagdonesplash();
    }
}

manned_turret_createhintobject()
{
    if ( !isdefined( level.br_level ) || !isdefined( level.br_level.br_circledelaytimes ) )
        return 0;

    var_0 = level.br_level.cheesewedge;

    if ( !isdefined( var_0 ) )
        var_0 = 0;

    return level.br_level.br_circledelaytimes.size - 1 - getdvarint( "scr_br_fc_circle_disable", 3 ) - var_0;
}

_id_11F6B()
{
    var_0 = modeloadoutupdateammo();
    var_1 = gettime() + var_0 * 1000;
    setomnvar( "ui_gulag_timer", var_1 );
    thread _id_1203B( var_0 );
}

_id_1203B( var_0 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    var_1 = getdvarint( "scr_br_display_gulag_close_message", 90 );
    var_2 = var_0 - var_1;

    if ( 0 < var_2 )
    {
        wait( var_2 );
        setomnvar( "ui_gulag_show_closing_state", 1 );
    }
}

modeloadoutupdateammo()
{
    var_0 = 0;

    if ( isdefined( level.br_level ) && isdefined( level.br_level.checkpoint_create_carepackage ) )
    {
        var_1 = manned_turret_createhintobject();

        for ( var_2 = 0; var_2 < var_1; var_2++ )
        {
            var_3 = level.br_level.br_circledelaytimes[var_2];
            var_4 = level.br_level.br_circleclosetimes[var_2];
            var_0 = var_0 + var_3 + var_4;
        }
    }

    return int( var_0 );
}

playergulagdonesplash()
{
    if ( istrue( self.gulagdone ) )
        return;

    self.gulagdone = 1;
    scripts\mp\gametypes\br_killstreaks.gsc::get_actual_grenade_name( self, "gulag_closed", undefined, 2 );
    scripts\mp\gametypes\br_public.gsc::cloud_cover( "gulag_gulag_close", self );

    if ( istrue( level.br_pickups._id_11AB3 ) && scripts\mp\gametypes\br_public.gsc::hasrespawntoken() )
    {
        scripts\mp\gametypes\br_pickups.gsc::removerespawntoken();
        thread scripts\mp\hud_message::showsplash( "br_respawn_token_disabled" );
        thread scripts\mp\utility\points::giveunifiedpoints( "br_respawn_token_convert" );
    }
}

dojailbreak( var_0 )
{
    if ( var_0.jailedplayers.size == 0 )
    {
        var_0.shutdown = 1;
        return;
    }

    var_0.isjailbreak = 1;
    var_0.arenaplayers = scripts\engine\utility::array_removeundefined( var_0.jailedplayers );
    jailbreaktimerwait( var_0 );
    var_1 = getloadoutindex();

    foreach ( var_3 in var_0.arenaplayers )
    {
        var_3 thread mp_speedball_check_trigger_pos( var_0 );
        var_3 initplayerarena( var_0, 1, var_1 );

        if ( istrue( level.gulag.gestures_enabled ) && !isbot( var_3 ) )
            var_3 playergulaggesturesdisable();

        if ( getdvarint( "scr_br_fc_outline_countdown", 1 ) > 0 && var_0.arenaplayers.size > 0 )
            var_3 hudoutlinedisableforclients( var_0.arenaplayers );
    }

    playsoundatpos( var_0.center, "iw8_mp_snatch_fight_start" );
    var_0.fightover = 0;

    if ( !isoneteamleft( var_0 ) )
    {
        var_0.time = level.gulag.timelimit;
        updatematchtimerhud( var_0, var_0.time );
        waittillgulagmatchend( var_0, 0 );
    }
    else
    {
        var_0.time = 8;
        updatematchtimerhud( var_0, var_0.time );
        wait( var_0.time );
    }

    foreach ( var_3 in var_0.arenaplayers )
    {
        if ( isdefined( var_3 ) && isdefined( var_3.gulagjailbreakhud ) )
            var_3.gulagjailbreakhud destroy();
    }

    handleendarena( var_0 );
    var_0.shutdown = 1;
}

jailbreaktimerwait( var_0 )
{
    foreach ( var_2 in var_0.arenaplayers )
    {
        if ( !isdefined( var_2 ) )
            continue;

        var_2 thread scripts\mp\hud_message::showsplash( "br_gulag_jail_break" );

        if ( getdvarint( "scr_br_fc_outline_countdown", 1 ) > 0 )
            var_2 hudoutlineenableforclients( var_0.arenaplayers, "outline_nodepth_red" );
    }

    wait 3;

    foreach ( var_2 in var_0.arenaplayers )
    {
        if ( !isdefined( var_2 ) )
            continue;

        var_2 playeraddjailbreaktimer();
    }

    gulagcountdowntimer( var_0, 0 );

    foreach ( var_2 in var_0.arenaplayers )
    {
        if ( !isdefined( var_2 ) )
            continue;

        var_2 setclientomnvar( "ui_match_start_countdown", 0 );
        var_2 setclientomnvar( "ui_match_in_progress", 1 );

        if ( isdefined( var_2 ) && isdefined( var_2.gulagjailbreakhud ) )
            var_2.gulagjailbreakhud.label = &"MP/BR_GULAG_JAILBREAK";
    }
}

playeraddjailbreaktimer()
{
    self.gulagjailbreakhud = scripts\mp\hud_util::createfontstring( "default", 2 );
    self.gulagjailbreakhud scripts\mp\hud_util::setpoint( "CENTER", "CENTER", 0, -150 );
    self.gulagjailbreakhud.label = &"MP/BR_GULAG_JAILBREAK_IN";
}

resetequipment( var_0 )
{
    if ( !istrue( level.gulag._id_122D6 ) )
        return;

    for ( var_1 = 0; var_1 < var_0.weapons.size; var_1++ )
    {
        var_2 = var_0.weapons[var_1];
        var_2 setscriptablepartstate( var_2.part, "visible" );
    }
}

validateplayers( var_0 )
{
    return var_0.arenaplayers.size >= 2;
}

beginnewfight( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "fight_over_early" );
    var_0.fightover = 0;
    resetequipment( var_0 );
    _id_11A70( var_0 );
    var_0.arenaplayers = popnextmatch( var_0 );
    var_1 = 0;

    foreach ( var_4, var_3 in var_0.arenaplayers )
    {
        if ( isdefined( var_3 ) )
            var_0.jailedplayers = scripts\engine\utility::array_remove( var_0.jailedplayers, var_3 );

        if ( !isdefined( var_3 ) )
        {
            var_1 = 1;
            continue;
        }

        if ( var_3.gulag == 0 || var_3.jailed == 0 || var_3.gulagarena == 1 )
        {
            scripts\mp\utility\script::getdropbagspawntypeenum( "Player: " + var_3.name + " - invalid for gulag - p.gulag = " + var_3.gulag + ", p.jailed = " + var_3.jailed + ", p.gulagArena = " + var_3.gulagarena );
            var_1 = 1;
            continue;
        }

        var_3.fighterindex = var_4;
    }

    foreach ( var_6 in var_0.jailedplayers )
    {
        if ( !isdefined( var_6 ) )
            continue;

        var_6.gulagposition--;
        var_6 setweaponammoclip( "rock_mp", 5 );
    }

    if ( var_1 )
    {
        var_0.jailedplayers = scripts\engine\utility::array_removeundefined( var_0.jailedplayers );
        var_0.arenaplayers = scripts\engine\utility::array_removeundefined( var_0.arenaplayers );

        if ( !validateplayers( var_0 ) )
        {
            handleendarena( var_0, undefined, 1 );
            return;
        }
    }

    var_8 = startbetting( var_0, var_0.arenaplayers );

    if ( getdvarint( "scr_br_fc_spectate_outlines", 0 ) )
        thread manageoutlines( var_0, var_0.arenaplayers, var_8 );

    var_0.arenaspawncounter = 0;
    var_9 = getloadoutindex();

    foreach ( var_6 in var_0.arenaplayers )
    {
        if ( !isdefined( var_6 ) )
            continue;

        var_6 thread mp_speedball_check_trigger_pos( var_0, var_8 );
        var_6 thread initplayerarena( var_0, 0, var_9 );
    }

    thread watchlethaldelay( var_0 );
    wait 2;

    if ( !validateplayers( var_0 ) )
    {
        handleendarena( var_0, var_8, 1 );
        return;
    }

    _id_12AE2( var_0 );
    _id_12AE1( var_0 );
    var_12 = gulagcountdowntimer( var_0, 1, var_8 );

    if ( !var_12 )
        return;

    endbetting( var_0, var_8 );

    foreach ( var_6 in var_0.arenaplayers )
    {
        var_6 playergulagarenaready();
        var_6 thread utilflare_shootflare();
    }

    thread _id_12481( var_0 );
    var_0.time = level.gulag.timelimit;
    updatematchtimerhud( var_0, var_0.time );
    waittillgulagmatchend( var_0, 1 );
    handleendarena( var_0, var_8 );

    if ( !isfightready( var_0 ) )
        _id_12B1A( var_0 );
}

watchlethaldelay( var_0 )
{
    var_0 endon( "fight_over" );
    var_0 endon( "matchEnded" );
    level endon( "game_ended" );

    if ( level.gulag.lethaldelay <= 0 )
        return;

    var_0.lethaldelaystarttime = gettime();
    var_0.lethaldelayendtime = var_0.lethaldelaystarttime + level.gulag.lethaldelay * 1000 + level.gulag.fail_mission_if_killed * 1000 + 2000;

    while ( gettime() < var_0.lethaldelayendtime )
        waitframe();

    var_0 notify( "lethal_delay_end" );
}

watchlethaldelayplayer( var_0 )
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );

    if ( level.gulag.lethaldelay == 0 )
        return;

    if ( !isai( self ) )
    {
        self notifyonplayercommand( "lethal_attempt_gulag", "+frag" );
        self notifyonplayercommand( "lethal_attempt_gulag", "+smoke" );
    }

    scripts\mp\equipment::allow_equipment_slot( "primary", 0 );
    scripts\mp\equipment::allow_equipment_slot( "secondary", 0 );
    watchlethaldelayfeedbackplayer( var_0, self );
    scripts\mp\equipment::allow_equipment_slot( "primary", 1 );
    scripts\mp\equipment::allow_equipment_slot( "secondary", 1 );

    if ( scripts\cp_mp\utility\game_utility::isrealismenabled() )
        self playlocalsound( "ui_restock_lethals" );

    self setclientomnvar( "ui_recharge_notify", 2 );

    if ( !isai( self ) )
    {
        self notifyonplayercommandremove( "lethal_attempt_gulag", "+frag" );
        self notifyonplayercommandremove( "lethal_attempt_gulag", "+smoke" );
    }
}

watchlethaldelayfeedbackplayer( var_0, var_1 )
{
    level endon( "game_ended" );
    var_0 endon( "matchEnded" );
    var_0 endon( "lethal_delay_end" );

    for (;;)
    {
        self waittill( "lethal_attempt_gulag" );
        var_2 = ( var_0.lethaldelayendtime - gettime() ) / 1000;
        var_2 = int( max( 0, ceil( var_2 ) ) );
        var_1 scripts\mp\hud_message::showerrormessage( "MP/LETHALS_UNAVAILABLE_FOR_N", var_2 );
    }
}

_id_12481( var_0 )
{
    var_0 endon( "matchEnded" );
    playsoundatpos( var_0.center, "iw8_mp_snatch_fight_start" );
    wait 1;
    scripts\mp\gametypes\br_public.gsc::brleaderdialog( "gulag_gulag_active", 0, var_0.jailedplayers );
    scripts\mp\gametypes\br_public.gsc::brleaderdialog( "gulag_objective", 0, var_0.arenaplayers );
    wait 2;

    foreach ( var_2 in var_0.jailedplayers )
    {
        if ( var_2.gulagposition <= 1 )
        {
            scripts\mp\gametypes\br_public.gsc::cloud_cover( "gulag_next", var_2, 0 );
            continue;
        }

        if ( var_2.gulagposition == 2 )
            scripts\mp\gametypes\br_public.gsc::cloud_cover( "gulag_taunt", var_2, 0 );
    }
}

utilflare_shootflare()
{
    self endon( "disconnect" );
    self setclientomnvar( "ui_objective_text", 0 );
    wait 3;
    self setclientomnvar( "ui_objective_text", -1 );
}

handleonekillwin( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( var_2 ) && isplayer( var_2 ) && var_1 != var_2 && isalive( var_2 ) && scripts\engine\utility::array_contains( var_0.arenaplayers, var_2 ) )
    {
        thread gulagvictory( var_0, var_2, 0, 0, "winner" );
        payoutbet( var_3, var_2, 1 );
    }

    payoutbet( var_3, var_1, 0 );
}

manageoutlines( var_0, var_1, var_2 )
{
    manageoutlineactive( var_0, var_1, var_2 );

    if ( istrue( level.gulag.onekillwin ) )
        return;

    manageoutlinecleanup( var_0, var_1 );
}

manageoutlineswatchplayersaddedtojail( var_0 )
{
    var_0 endon( "fight_over" );

    for (;;)
    {
        var_0 waittill( "player_added_to_jail" );
        updateoutlines( var_0 );
    }
}

manageoutlineactive( var_0, var_1, var_2 )
{
    var_0 endon( "fight_over" );
    thread manageoutlineswatchplayersaddedtojail( var_0 );

    for (;;)
    {
        if ( var_0.jailedplayers.size )
        {
            var_3 = scripts\engine\utility::array_removeundefined( var_0.jailedplayers );

            foreach ( var_5 in var_1 )
            {
                if ( !isdefined( var_5 ) )
                    continue;

                var_5 hudoutlineenableforclients( var_3, "outline_nodepth_white" );
            }
        }

        if ( isdefined( var_2 ) )
        {
            foreach ( var_8 in var_2.bets )
            {
                if ( !isdefined( var_8.owner ) )
                    continue;

                var_9 = scripts\engine\utility::ter_op( var_2.bettingopen, var_8.playerfocus, var_8.playerbeton );

                if ( var_9 != -1 )
                {
                    var_10 = var_2.fighters[var_9];

                    if ( isdefined( var_10 ) )
                        var_10 hudoutlineenableforclient( var_8.owner, "outline_nodepth_green" );
                }
            }
        }

        var_0 waittill( "update_outlines" );
    }
}

manageoutlinecleanup( var_0, var_1 )
{
    var_2 = scripts\engine\utility::array_removeundefined( var_0.jailedplayers );

    if ( !var_2.size )
        return;

    foreach ( var_4 in var_1 )
    {
        if ( !isdefined( var_4 ) )
            continue;

        var_4 hudoutlinedisableforclients( var_2 );
    }
}

updateoutlines( var_0 )
{
    var_0 notify( "update_outlines" );
}

playergulagarenaready()
{
    van_blocker_moves( 1 );
    self setclientomnvar( "ui_br_infil_started", 1 );
    self setclientomnvar( "ui_match_start_countdown", 0 );
    self setclientomnvar( "ui_match_in_progress", 1 );

    if ( istrue( level.gulag.gestures_enabled ) && !isbot( self ) )
        playergulaggesturesdisable();
}

gulagcountdowntimer( var_0, var_1, var_2 )
{
    var_3 = level.gulag.fail_mission_if_killed;

    while ( var_3 > 0 )
    {
        foreach ( var_5 in var_0.arenaplayers )
        {
            var_5 setclientomnvar( "ui_match_in_progress", 0 );
            var_5 setclientomnvar( "ui_match_start_countdown", var_3 );
        }

        var_3 = var_3 - 1;
        wait 1;

        if ( istrue( var_1 ) && !validateplayers( var_0 ) )
        {
            handleendarena( var_0, var_2, 1 );
            return 0;
        }
    }

    return 1;
}

mp_rust_patch( var_0, var_1, var_2 )
{
    var_0 endon( "matchEnded" );

    while ( var_1 > 0 )
    {
        if ( level.gameended )
            return;

        var_3 = var_1;

        if ( !istrue( var_0.overtime ) )
            var_3 = var_3 - var_2;

        if ( var_3 <= 5 )
        {
            var_4 = scripts\mp\gamelogic::maderecentkill( var_3 );
            gulagloading( var_0, var_4 );
        }

        if ( var_1 > 1 )
            var_1 = var_1 - 1;

        wait 1;
    }
}

gulagloading( var_0, var_1 )
{
    foreach ( var_3 in var_0.jailedplayers )
    {
        if ( isdefined( var_3 ) )
            var_3 playlocalsound( var_1 );
    }

    foreach ( var_3 in var_0.arenaplayers )
    {
        if ( isdefined( var_3 ) )
            var_3 playlocalsound( var_1 );
    }
}

maxtimelimit()
{
    return getdvarint( "scr_br_fc_overtime", 15.0 );
}

waittillgulagmatchend( var_0, var_1 )
{
    var_2 = maxtimelimit();
    var_0.time = var_0.time + var_2;
    thread mp_rust_patch( var_0, var_0.time, var_2 );

    for (;;)
    {
        if ( !isanyonealive( var_0 ) || isoneteamleft( var_0 ) )
            break;

        var_0.time = var_0.time - level.framedurationseconds;

        if ( istrue( level.gulag.arenaflag ) && !istrue( var_0.overtime ) && var_0.time <= var_2 )
        {
            var_0.overtime = 1;
            var_0.handle_no_ammo_mun.arenaflag bot_ctf_can_switch_to_defender( 1 );
            var_0.handle_no_ammo_mun.arenaflag bot_ctf_enemy_team_flag_is_picked_up( var_0, 1 );
            var_0.handle_no_ammo_mun.arenaflag.flagmodel playsoundonmovingent( "flag_spawned" );
        }

        if ( istrue( var_0.overtime ) )
        {
            var_3 = clamp( var_0.time / var_2, 0.0, 1.0 );
            _id_11ED6( var_0, var_3 );
        }

        if ( var_0.time <= 0 )
        {
            _id_12E87( var_0 );

            if ( istrue( var_1 ) )
            {
                foreach ( var_5 in var_0.arenaplayers )
                {
                    var_5 thread mp_shipment_patch( var_0 );
                    var_5 setplayermusicstate( "br_gulag_lose" );
                    var_5 playsoundtoplayer( "gulag_crowd_boo_loser", var_5 );
                    var_5 clearclienttriggeraudiozone( 2 );
                }
            }

            break;
        }

        waitframe();
    }

    var_0 notify( "matchEnded" );
}

_id_12E87( var_0 )
{
    while ( isdefined( var_0.handle_no_ammo_mun.arenaflag.claimteam ) && var_0.handle_no_ammo_mun.arenaflag.claimteam != "none" && !istrue( var_0.handle_no_ammo_mun.arenaflag.stalemate ) )
        waitframe();
}

isanyonealive( var_0 )
{
    foreach ( var_2 in var_0.arenaplayers )
    {
        if ( isalive( var_2 ) )
            return 1;
    }

    return 0;
}

isoneteamleft( var_0 )
{
    var_1 = undefined;

    foreach ( var_3 in var_0.arenaplayers )
    {
        if ( isalive( var_3 ) )
        {
            if ( !isdefined( var_1 ) )
            {
                var_1 = var_3.team;
                continue;
            }

            if ( var_1 != var_3.team )
                return 0;
        }
    }

    return 1;
}

handleendarena( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_0 notify( "lethal_delay_end" );
    var_0 notify( "fight_over" );
    var_0.fightover = 1;

    if ( !isdefined( var_4 ) )
        var_4 = "winner";

    endbetting( var_0, var_1 );
    updatematchtimerhud( var_0, 0 );
    var_6 = undefined;

    foreach ( var_8 in var_0.arenaplayers )
    {
        if ( !isdefined( var_8 ) )
            continue;

        if ( isalive( var_8 ) )
        {
            var_6 = var_8;

            if ( istrue( var_2 ) )
                var_6 playergulagarenaready();

            if ( isdefined( var_5 ) && var_8.team == var_5.team )
            {
                thread gulagvictory( var_0, var_8, 0, 0, var_4, 0, var_5, var_3 );
                continue;
            }

            thread gulagvictory( var_0, var_8, 0, 0, "winner" );
        }
    }

    if ( istrue( level.gulag.arenaflag ) && istrue( var_0.overtime ) )
        var_0.handle_no_ammo_mun.arenaflag bot_ctf_can_switch_to_defender( 0 );

    payoutremainingbets( var_6, var_1 );
    wait 2.0;

    if ( istrue( level.gulag.arenaflag ) && istrue( var_0.overtime ) )
    {
        var_0.overtime = 0;
        var_0.handle_no_ammo_mun.arenaflag bot_ctf_enemy_team_flag_is_picked_up( var_0, 0 );
    }

    empendearly( var_0 );
    wait 1.0;
}

upload_station_interact_used_think( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "gulag_end" );

    if ( !isdefined( self.arena ) )
        return;

    var_2 = self.arena;

    if ( istrue( self._id_12ECA ) )
    {
        self notify( "pull_out_of_gulag" );

        if ( !isalive( self ) )
        {
            thread playergulagautowin( var_0 );
            return;
        }
        else if ( istrue( self.checkpointstruct ) )
        {
            scripts\mp\gametypes\br.gsc::_id_12A58( self );
            level thread scripts\mp\gametypes\br.gsc::_id_12B17();
        }
    }
    else if ( istrue( self.gulagarena ) )
    {
        if ( !var_2.fightover )
        {
            var_2 notify( "matchEnded" );
            var_2 notify( "fight_over_early" );
            thread handleendarena( var_2, undefined, 1, 1, var_1, var_0 );
        }

        return;
    }
    else
    {
        var_2.jailedplayers = scripts\engine\utility::array_remove( var_2.jailedplayers, self );
        updatematchqueuepositions( var_2 );

        if ( istrue( self.gulag ) && !istrue( self.jailed ) )
            self waittill( "gulag_start" );
    }

    thread gulagvictory( var_2, self, 1, 0, var_1, 0, var_0, 1 );
}

getnextjailspawn( var_0 )
{
    if ( isdefined( var_0.jailspawncounter ) )
    {
        var_0.jailspawncounter++;
        var_0.jailspawncounter = var_0.jailspawncounter % var_0.jailspawns.size;
    }
    else
        var_0.jailspawncounter = 0;

    var_1 = var_0.jailspawns[var_0.jailspawncounter];
    return var_1;
}

_id_11F75( var_0, var_1 )
{
    if ( isdefined( var_1.target ) )
    {
        var_2 = scripts\engine\utility::getstruct( var_1.target, "targetname" );

        if ( isdefined( var_2 ) )
            var_1.chair = var_2;
    }
}

outlinewatchplayerprox( var_0 )
{
    self endon( "death" );
    self endon( "trigger" );
    self.outlinedplayers = [];

    switch ( var_0 )
    {
        case 0:
        default:
            var_1 = "outline_depth_white";
            break;
        case 1:
            var_1 = "outline_depth_green";
            break;
        case 2:
            var_1 = "outline_depth_cyan";
            break;
        case 3:
            var_1 = "outline_depth_red";
            break;
        case 4:
            var_1 = "outline_depth_orange";
            break;
    }

    for (;;)
    {
        var_2 = scripts\common\utility::playersinsphere( self.origin, 2000 );
        var_3 = scripts\engine\utility::array_difference( level.players, var_2 );

        foreach ( var_5 in var_2 )
        {
            var_6 = distancesquared( self.origin, var_5.origin );
            var_7 = var_5 getentitynumber();

            if ( !isdefined( self.outlinedplayers[var_7] ) )
                self.outlinedplayers[var_7] = scripts\mp\utility\outline::outlineenableforplayer( self, var_5, var_1, "level_script" );
        }

        foreach ( var_5 in var_3 )
        {
            var_7 = var_5 getentitynumber();

            if ( isdefined( self.outlinedplayers[var_7] ) )
            {
                scripts\mp\utility\outline::outlinedisable( self.outlinedplayers[var_7], self );
                self.outlinedplayers[var_7] = undefined;
            }
        }

        waitframe();
    }
}

gulagstreamlocationstart( var_0 )
{
    if ( ( isbot( self ) || self isplayerheadless() ) && !istrue( self.search_turret_no_target_stop_delay ) )
        return 0;

    self setallstreamloaddist( 10000.0 );
    self setadditionalstreampos( var_0, 1 );
    return !self isadditionalstreamposready();
}

gulagstreamlocationwait()
{
    if ( !istrue( self.search_turret_no_target_stop_delay ) )
    {
        self endon( "gulagStreamLocationComplete" );
        thread gulagstreamlocationwaittimeout( level.gulag._id_12537 );

        while ( !self isadditionalstreamposready() )
            waitframe();

        self notify( "gulagStreamLocationComplete" );
    }
    else
        wait( level.gulag._id_12537 );
}

gulagstreamlocationwaittimeout( var_0 )
{
    self endon( "disconnect" );
    self endon( "gulagStreamLocationComplete" );
    wait( var_0 );
    self notify( "gulagStreamLocationComplete" );
}

gulagstreamlocationend()
{
    self clearadditionalstreampos();
    self notify( "gulagStreamLocationComplete" );
}

mp_t_gun_course_patch()
{
    self setallstreamloaddist( 0.0 );
}

addloadingplayer( var_0, var_1 )
{
    var_1.entergulagwait = 1;
    var_0.loadingplayers[var_0.loadingplayers.size] = var_1;
    thread addloadingplayerdisconnectwatch( var_0, var_1 );
}

addloadingplayerdisconnectwatch( var_0, var_1 )
{
    var_1 endon( "removeLoadingPlayer" );
    var_1 waittill( "disconnect" );
    thread removeloadingplayer( var_0, var_1 );
}

removeloadingplayer( var_0, var_1 )
{
    var_1 notify( "removeLoadingPlayer" );

    if ( isdefined( var_1 ) )
        var_0.loadingplayers = scripts\engine\utility::array_remove( var_0.loadingplayers, var_1 );
    else
        var_0.loadingplayers = scripts\engine\utility::array_removeundefined( var_0.loadingplayers );

    if ( var_0.loadingplayers.size == 0 )
        var_0 notify( "loadingPlayersEmpty" );
}

quickdropall( var_0, var_1 )
{
    return scripts\engine\utility::array_contains( var_1.loadingplayers, var_0 );
}

entergulag( var_0 )
{
    var_0 notify( "enter_gulag" );
    var_0.entergulagwait = 0;
    scripts\mp\deathicons::outofboundstriggersspawned( var_0 );
}

entergulagwait( var_0 )
{
    if ( var_0.entergulagwait )
        var_0 waittill( "enter_gulag" );
}

playergetnextarena()
{
    if ( !istrue( level.gulag.multiarena ) )
        return level.gulag.arenas[0];

    var_1 = undefined;
    var_2 = undefined;

    foreach ( var_4 in level.gulag.arenas )
    {
        foreach ( var_6 in var_4.matches )
        {
            if ( var_6.size == 1 && isdefined( var_6[0] ) && var_6[0].team != self.team && ( !isdefined( var_1 ) || var_6[0].recordinterval < var_2 ) )
            {
                var_1 = var_4;
                var_2 = var_6[0].recordinterval;
            }
        }
    }

    if ( isdefined( var_1 ) )
        return var_1;

    var_9 = [];

    for ( var_10 = 0; var_10 < level.gulag.arenas.size; var_10++ )
    {
        var_4 = level.gulag.arenas[var_10];

        if ( var_4.matches.size > 0 && var_4.matches.size < level.gulag.maxqueue )
            var_9[var_9.size] = var_4;
    }

    if ( var_9.size > 0 )
    {
        foreach ( var_4 in var_9 )
        {
            foreach ( var_6 in var_4.matches )
            {
                foreach ( var_14 in var_6 )
                {
                    if ( isdefined( var_14 ) && var_14.team == self.team )
                        return var_4;
                }
            }
        }

        var_4 = var_9[randomint( var_9.size )];
        return var_4;
    }

    var_1 = undefined;
    var_18 = undefined;

    for ( var_10 = 0; var_10 < level.gulag.arenas.size; var_10++ )
    {
        var_4 = level.gulag.arenas[var_10];

        if ( var_4.matches.size == 0 )
            return var_4;
        else if ( !isdefined( var_18 ) || var_4.matches.size < var_18 )
        {
            var_1 = var_4;
            var_18 = var_4.matches.size;
        }
    }

    return var_1;
}

quickdropcache( var_0, var_1 )
{
    if ( !ismatchpending( var_0 ) )
        return 0;

    var_2 = var_1.gulagposition - 1;

    if ( var_2 >= 0 && var_0.matches[var_2].size > 1 )
        return 1;

    return 0;
}

_id_11EB6( var_0 )
{
    foreach ( var_2 in var_0.jailedplayers )
    {
        if ( !quickdropcache( var_0, var_2 ) && isdefined( var_2.recordkillstreakendstats ) && !isdefined( var_2.recordmolotov ) )
        {
            var_2 setclientomnvar( "ui_br_gulag_match_end_time", var_2.recordkillstreakendstats );
            var_2.recordmolotov = 1;
        }
    }
}

unload_all_vehicles_in_module( var_0 )
{
    self.recordkillstreakendstats = undefined;
    self.recordmolotov = undefined;
    self setclientomnvar( "ui_br_gulag_match_end_time", 0 );
}

update_track_operational_status( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "initPlayerArena" );
    self endon( "gulag_end" );
    var_1 = getdvarint( "scr_br_fc_jailTimeout", 95 );

    if ( var_1 <= 0 )
        return;

    self.recordkillstreakendstats = gettime() + var_1 * 1000;
    wait( var_1 );

    if ( quickdropcache( var_0, self ) )
    {
        var_2 = self.gulagposition * ( level.gulag.timelimit + maxtimelimit() + level.gulag.fail_mission_if_killed + 2 + 2.0 + 1.0 + 1 );
        var_3 = gettime() + var_2 * 1000;

        while ( var_3 > gettime() && quickdropcache( var_0, self ) )
            waitframe();
    }

    while ( propwatchcleanupondisconnect() )
        waitframe();

    thread gulagvictory( var_0, self, 1, 0, "timeout" );
}

initplayerjail( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "gulag_end" );
    self.recordinterval = gettime();
    scripts\mp\gametypes\br_analytics.gsc::choppergunner_watchownerexitaction( self, scripts\engine\utility::ter_op( istrue( var_0 ), "default", "debug" ) );
    updatex1finhud();
    var_1 = playergetnextarena();
    self.arena = var_1;

    if ( !scripts\engine\utility::array_contains( var_1.jailedplayers, self ) )
    {
        var_1 notify( "player_added_to_jail", self );
        var_1.jailedplayers[var_1.jailedplayers.size] = self;
    }

    playergulaghud( var_1 );
    thread playerwatchdisconnect( var_1 );
    updatematchqueuepositions( var_1 );
    addloadingplayer( var_1, self );
    mp_oilrig_patches( self );

    if ( !isdefined( self.gulaguses ) )
        self.gulaguses = 0;

    self.gulaguses++;
    setplayervargulag( 1 );
    setplayervargulagarena( 0 );
    _id_11EE0( 1 );
    _id_11EDD( var_1 );
    scripts\mp\outofbounds::enableoobimmunity( self );

    if ( isdefined( level.disableteamrewards ) )
        [[ level.disableteamrewards ]]();

    var_2 = getnextjailspawn( var_1 );
    var_3 = getgroundposition( var_2.origin, 12 );
    var_4 = ( 0, 0, 0 );

    if ( isdefined( var_2.angles ) )
        var_4 = var_2.angles;

    var_5 = gulagstreamlocationstart( var_3 );
    self.mp_piccadilly_patch = 1;
    self._id_12536 = spawnstruct();
    self._id_12536.origin = var_3;
    self._id_12536.angles = var_4;

    if ( istrue( var_0 ) )
        entergulagwait( self );
    else
        entergulag( self );

    scripts\mp\gametypes\br_quest_util.gsc::subway_car_move_think();
    scripts\mp\gametypes\br_alt_mode_escape.gsc::init_exfil();
    var_6 = gettime();

    if ( scripts\mp\gametypes\br_public.gsc::processvoqueue() )
        self notify( "play_gulag_vo" );

    if ( level.gulag.betting )
    {
        var_7 = level.gulag.get_players_at_zone;

        if ( isdefined( self.plundercountondeath ) )
            var_7 = int( max( var_7, int( self.plundercountondeath / 2 ) ) );

        scripts\mp\gametypes\br_plunder.gsc::playersetplundercount( var_7 );
    }

    updatelootleadercirclesize();

    if ( var_5 )
    {
        scripts\mp\gametypes\br.gsc::spawnintermission( var_3 + ( 0, 0, 100 ), self.angles );
        scripts\mp\spectating::setdisabled();
        gulagstreamlocationstart( var_3 );
    }

    if ( var_5 )
        gulagstreamlocationwait();

    if ( scripts\mp\gametypes\br_gametypes.gsc::progress_obj( "playerPreSpawnGulagJail" ) )
        scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "playerPreSpawnGulagJail" );

    scripts\mp\class::loadout_emptycacheofloadout( "gamemode" );
    self.pers["gamemodeLoadout"] = level.gulag.recordedgameendstats;
    self.class = "gamemode";
    self.forcespawnangles = var_4;
    self.forcespawnorigin = var_3;
    scripts\mp\playerlogic::spawnplayer( undefined, 0 );
    scripts\cp_mp\execution::_clearexecution();
    self setclientomnvar( "ui_gulag", 1 );
    self._id_12536 = undefined;
    self.mp_piccadilly_patch = 0;
    _id_11A7E();

    if ( var_5 )
        gulagstreamlocationend();

    v_start_pos();
    vehicle_collision_takedamage( var_6 );

    if ( scripts\mp\gametypes\br_public.gsc::processvoqueue() )
        self clearsoundsubmix( "iw8_br_gulag_tutorial", 2 );
    else
        self clearsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 2 );

    self setclientomnvar( "ui_br_infil_started", 1 );
    var_8 = var_1.fightover && update_readings( var_1 );
    var_9 = undefined;

    if ( level.gulag.dialog_mount_nag_watcher )
        var_9 = 0.5;

    if ( !var_8 )
        gulagfadefromblack( var_9 );

    gulagloadingtextclear();

    if ( !var_8 )
    {
        scripts\mp\gametypes\br_public.gsc::cloud_cover( "gulag_spawn", self, 0 );
        thread umbra( var_1, var_2 );
    }

    var_10 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( self.team, self.squadindex );

    foreach ( var_12 in var_10 )
    {
        if ( !isdefined( var_12 ) || !isalive( var_12 ) )
            continue;

        if ( var_12 != self )
        {
            var_12 thread scripts\mp\hud_message::showsplash( "br_gulag_teammate_in", undefined, self );
            scripts\mp\gametypes\br_public.gsc::cloud_cover( "gulag_teammate_gulag", var_12 );
        }
    }

    if ( !istrue( self.jailed ) )
    {
        _id_11EE7( 1 );
        scripts\mp\utility\perk::blockperkfunction( "specialty_scavenger" );
    }

    removeloadingplayer( var_1, self );
    scripts\mp\gametypes\br_pickups.gsc::initplayer( 1 );

    if ( istrue( level.gulag.gestures_enabled ) && !isbot( self ) )
        thread playergulaggestures();

    van_initomnvars( 0 );

    if ( istrue( level.gulag.arenaflag ) && istrue( var_1.overtime ) )
        var_1.handle_no_ammo_mun.arenaflag thread bot_ctf_flag_picked_up_of_team( 1, self );

    thread update_track_operational_status( var_1 );
    thread update_track_timer( var_1 );
    self notify( "gulag_start" );
}

update_track_timer( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "initPlayerArena" );
    self endon( "gulag_end" );
    wait 5;

    if ( ismatchpending( var_0 ) )
        return;

    scripts\mp\gametypes\br_public.gsc::cloud_cover( "gulag_obj_wait", self, 0 );
}

van_initomnvars( var_0 )
{
    if ( var_0 )
        self enableoffhandthrowback();
    else
        self disableoffhandthrowback();
}

playergulaggestures()
{
    level endon( "game_ended" );
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "gulag_gestures_stop" );
    self enableoffhandweapons();
    self allowfire( 0 );
    self allowads( 0 );
    self notifyonplayercommand( "fc_gesture_neg", "+attack" );
    self notifyonplayercommand( "fc_gesture_pos", "+speed_throw" );
    var_0 = 0;

    for (;;)
    {
        var_1 = scripts\engine\utility::_id_12E47( "fc_gesture_neg", "fc_gesture_pos" );

        if ( self isgestureplaying() || self isswitchingweapon() || self isreloading() || self ismantling() || self isthrowinggrenade() || self israisingweapon() || self ismeleeing() )
            continue;

        if ( getdvarint( "scr_br_fc_gestures_test", 0 ) > 0 )
        {
            if ( var_0 >= level.gulag.gestures[var_1].size )
                var_0 = 0;

            var_2 = level.gulag.gesturesounds[var_1][var_0];
            var_3 = level.gulag.gestures[var_1][var_0];
            var_0++;
        }
        else
        {
            var_0 = randomint( level.gulag.gestures[var_1].size );
            var_2 = level.gulag.gesturesounds[var_1][var_0];
            var_3 = level.gulag.gestures[var_1][var_0];
        }

        if ( isdefined( var_2 ) && var_2 != "" )
            self playsound( var_2 );

        var_4 = getcompleteweaponname( var_3 );

        if ( isdefined( var_4 ) && !nullweapon( var_4 ) )
            scripts\cp_mp\gestures::watchradialgesture( var_4 );
    }
}

playergulaggesturesdisable()
{
    self notify( "gulag_gestures_stop" );
    self notifyonplayercommandremove( "fc_gesture_neg", "+attack" );
    self notifyonplayercommandremove( "fc_gesture_pos", "+speed_throw" );
    self allowfire( 1 );
    self allowads( 1 );
}

fadeoutin( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    if ( !isdefined( var_0 ) )
        var_0 = 1.0;

    gulagfadetoblack();
    wait( var_0 );
    gulagfadefromblack();
}

gulagfadetoblack( var_0 )
{
    uniquelootitemid();

    if ( istrue( var_0 ) )
        mp_m_cornfield_patch();
}

gulagfadefromblack( var_0 )
{
    thread uniquelootitemlookup( var_0 );
    mp_layover_patch();
}

mp_m_cornfield_patch()
{
    var_0 = scripts\mp\gametypes\br_spectate.gsc::minigun_track_target_think( self );

    foreach ( var_2 in var_0 )
        var_2 uniquelootitemid();
}

mp_layover_patch()
{
    var_0 = scripts\mp\gametypes\br_spectate.gsc::minigun_track_target_think( self );

    foreach ( var_2 in var_0 )
        var_2 thread uniquelootitemlookup();
}

initthermometerwatch( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    if ( !isdefined( var_0 ) )
        var_0 = 1.0;

    mp_m_cornfield_patch();
    wait( var_0 );
    mp_layover_patch();
}

mp_m_speedball_patch()
{
    if ( update_player_about_remaining_enemies() )
        return 1;

    return 0;
}

gulagloadingtext()
{
    var_0 = scripts\mp\hud_util::createfontstring( "default", 1.5 );
    var_0 scripts\mp\hud_util::setpoint( "CENTER", "CENTER", 0, -100 );
    var_0.label = &"MP/BR_GULAG_TRAVEL";
    self.gulagloadingtext = var_0;
}

gulagloadingtextclear()
{
    if ( isdefined( self.gulagloadingtext ) )
        self.gulagloadingtext destroy();
}

vcloseangles( var_0, var_1 )
{
    self cancelmantle();
    self setorigin( var_0, 1 );
    self setplayerangles( var_1 );
}

initplayerarena( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self notify( "initPlayerArena" );
    unicornpoints();
    scripts\mp\gametypes\br_pickups.gsc::initplayer();
    self allowprone( 0 );
    self allowcrouch( 0 );
    van_initomnvars( 1 );
    van_blocker_moves( 0 );
    playertakeawayrock( var_0 );
    unload_all_vehicles_in_module( var_0 );
    scripts\mp\equipment::allow_equipment_slot( "primary", 0 );
    scripts\mp\equipment::allow_equipment_slot( "secondary", 0 );
    thread update_bomb_vest_controller( var_0 );

    if ( istrue( var_1 ) )
    {
        _id_11EE7( 0 );
        setplayervargulagarena( 1 );
        playergivearenaloadout( var_0, var_2 );

        if ( level.gulag.lethaldelay > 0 )
            thread watchlethaldelayplayer( var_0 );

        return;
    }

    scripts\mp\gametypes\br_public.gsc::cloud_cover( "gulag_spawn_rules", self, 0 );
    var_3 = mp_m_speedball_patch();

    if ( !var_3 )
        thread fadeoutin();

    thread initthermometerwatch();
    wait 1;
    playergivearenaloadout( var_0, var_2 );
    thread vehicle_ai_avoidance_cleanup( 3 );

    if ( getdvarint( "scr_br_verify_gulag_loadouts", 0 ) == 1 )
    {
        level.gulag.lethaldelay = 0;
        thread _id_12D44( var_0 );
    }

    if ( level.gulag.lethaldelay > 0 )
        thread watchlethaldelayplayer( var_0 );

    var_4 = getnextarenaspawn( var_0 );
    var_5 = getgroundposition( var_4.origin, 1 );
    var_6 = var_4.angles;

    if ( !isdefined( var_4.angles ) )
        var_6 = ( 0, 0, 0 );

    vcloseangles( var_5, var_6 );
    _id_11EE7( 0 );
    setplayervargulagarena( 1 );
    self.health = self.maxhealth;
    scripts\mp\gametypes\br_armor.gsc::monitor_bush_trig( level.gulag.start_area_fx_end );

    if ( getdvarint( "scr_br_fc_outline_countdown", 1 ) > 0 )
        self hudoutlineenableforclients( var_0.arenaplayers, "outline_nodepth_red" );

    if ( var_3 )
        gulagfadefromblack();

    wait 1;
    self allowprone( 1 );
    self allowcrouch( 1 );
    wait( level.gulag.fail_mission_if_killed - 1 );
    wait 1;

    if ( getdvarint( "scr_br_fc_outline_countdown", 1 ) > 0 && var_0.arenaplayers.size > 0 )
        self hudoutlinedisableforclients( var_0.arenaplayers );
}

van_blocker_moves( var_0 )
{
    if ( var_0 )
    {
        self allowmelee( 1 );
        self allowmovement( 1 );
        self enableusability();
        self enableoffhandweapons();
        self allowads( 1 );
        self allowfire( 1 );
    }
    else
    {
        self allowmelee( 0 );
        self allowmovement( 0 );
        self disableusability();
        self disableoffhandweapons();
        self allowads( 0 );
        self allowfire( 0 );
    }
}

getnextarenaspawn( var_0 )
{
    if ( !isdefined( var_0.arenaspawncounter ) )
        var_0.arenaspawncounter = 0;

    var_1 = undefined;

    if ( _id_12B6E( var_0 ) )
        var_1 = var_0.dialog_monitor_getoffground[var_0.arenaspawncounter];
    else
        var_1 = var_0.fightspawns[var_0.arenaspawncounter];

    var_0.arenaspawncounter++;
    var_0.arenaspawncounter = var_0.arenaspawncounter % var_0.fightspawns.size;
    return var_1;
}

vehicle_ai_avoidance_cleanup( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self.plotarmor = 1;
    scripts\engine\utility::_id_12E5A( var_0, "death", "gulagRespawn" );
    self.plotarmor = undefined;
}

gulagvictory( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    level endon( "game_ended" );
    var_1 endon( "death_or_disconnect" );
    var_1 notify( "gulag_end" );

    if ( !isdefined( var_5 ) )
        var_5 = 0;

    var_1 thread unicornpoints();
    var_1 unload_all_vehicles_in_module();
    var_1 thread vehicle_ai_avoidance_cleanup( 5 );
    var_1.gulagloser = 0;

    if ( var_0.jailedplayers.size > 0 && getdvarint( "scr_br_fc_spectate_outlines", 0 ) )
        var_1 hudoutlinedisableforclients( var_0.jailedplayers );

    if ( var_0.arenaplayers.size > 0 && getdvarint( "scr_br_fc_outline_countdown", 1 ) > 0 )
        var_1 hudoutlinedisableforclients( var_0.arenaplayers );

    var_0.arenaplayers = scripts\engine\utility::array_remove( var_0.arenaplayers, var_1 );
    var_8 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_1.team, var_1.squadindex );

    foreach ( var_10 in var_8 )
    {
        if ( !isdefined( var_10 ) || !isalive( var_10 ) )
            continue;

        if ( var_10 != var_1 )
        {
            var_10 thread scripts\mp\hud_message::showsplash( "br_gulag_teammate_out", undefined, var_1 );
            scripts\mp\gametypes\br_public.gsc::cloud_cover( "gulag_teammate_win", var_10 );
        }
    }

    var_12 = "";

    if ( isdefined( var_4 ) )
        var_12 = var_4;

    if ( !istrue( var_3 ) && !istrue( var_5 ) && !istrue( var_7 ) )
        var_1 thread _id_1292D( 3 );

    if ( var_2 )
    {
        if ( !istrue( var_3 ) )
        {
            if ( var_4 == "timeout" )
                scripts\mp\gametypes\br_public.gsc::cloud_cover( "gulag_timeout", var_1, 0 );
            else
                scripts\mp\gametypes\br_public.gsc::cloud_cover( "gulag_noenemy", var_1, 0 );
        }

        var_0.jailedplayers = scripts\engine\utility::array_remove( var_0.jailedplayers, var_1 );
        updatematchqueuepositions( var_0 );
    }
    else
        scripts\mp\gametypes\br_public.gsc::cloud_cover( "gulag_win", var_1, 0 );

    var_1 playsoundtoplayer( "gulag_crowd_cheer_winner", var_1 );
    var_1 setplayermusicstate( "br_gulag_win" );

    if ( istrue( level.gulag.onekillwin ) && ( istrue( var_0.isjailbreak ) || level.gulag.maxplayers > 2 ) )
        var_1 playerhide();

    var_1 van_initomnvars( 1 );
    var_1 van_blocker_moves( 1 );
    var_1 unsetspecialistbonus( 0 );
    var_1 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "isRespawning", 1 );
    var_1 scripts\mp\weapons::deleteplacedequipment();
    var_13 = scripts\mp\gametypes\br_public.gsc::make_focus_fire_headicon() / 1000;
    var_14 = var_1 unsetreduceregendelayonkills( 0, var_13 );
    var_15 = var_1 updatex1stashhud( var_14 );
    wait 2.0;

    if ( istrue( level.gulag.arenaflag ) )
        var_0.handle_no_ammo_mun.arenaflag thread bot_ctf_flag_picked_up_of_team( 0, var_1 );

    var_1 clearclienttriggeraudiozone( 2 );
    var_1 gulagfadetoblack( 1 );
    wait 1;
    var_1 gulagwinnerrespawn( var_5, var_4, var_14, 1, var_15, undefined, var_6, var_3, var_7 );
}

updatex1stashhud( var_0 )
{
    var_1 = scripts\mp\gametypes\br_public.gsc::vandalize_attack_nodes( var_0.origin, var_0.height );
    self setpredictedstreamloaddist( 0.0 );
    scripts\mp\gametypes\br_public.gsc::vandalize_internal( var_1 );
    return var_1;
}

mp_speedball_check_trigger_pos( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "gulag_end" );
    self endon( "gulagLost" );
    self waittill( "death", var_2 );

    if ( istrue( level.gulag.onekillwin ) )
        handleonekillwin( var_0, self, var_2, var_1 );

    thread mp_shipment_patch( var_0 );
}

mp_shipment_patch( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "pull_out_of_gulag" );
    self notify( "gulagLost" );

    if ( istrue( self.gulagloser ) )
        return;

    self.gulagloser = 1;
    self._id_1232B = var_0._id_1232B;
    thread using_self_revive( 1 );
    var_0.jailedplayers = scripts\engine\utility::array_removeundefined( var_0.jailedplayers );

    if ( var_0.jailedplayers.size > 0 && getdvarint( "scr_br_fc_spectate_outlines", 0 ) )
        self hudoutlinedisableforclients( var_0.jailedplayers );

    var_0.arenaplayers = scripts\engine\utility::array_removeundefined( var_0.arenaplayers );

    if ( var_0.arenaplayers.size > 0 && getdvarint( "scr_br_fc_outline_countdown", 1 ) > 0 )
        self hudoutlinedisableforclients( var_0.arenaplayers );

    var_0.arenaplayers = scripts\engine\utility::array_remove( var_0.arenaplayers, self );

    if ( isdefined( self ) )
        var_1 = self.name;
    else
        var_1 = "<undefined>";

    self setplayermusicstate( "br_gulag_lose" );
    scripts\mp\weapons::deleteplacedequipment();
    scripts\mp\gametypes\br.gsc::set_spawner_type( self );
    level thread scripts\mp\gametypes\br.gsc::_id_12B17();
    scripts\mp\gametypes\br_public.gsc::cloud_cover( "gulag_lose", self, 0, 1 );
    scripts\mp\gametypes\br_public.gsc::cloudcoverfx( "gulag_teammate_lose", self.team, self, 0, 0 );

    if ( isalive( self ) )
    {
        thread scripts\mp\gametypes\br_spectate.gsc::_id_12926();
        self.plotarmor = 1;
        self freezecontrols( 1 );
    }

    wait 2.0;
    self clearclienttriggeraudiozone( 2 );

    if ( istrue( level.gulag.arenaflag ) )
        var_0.handle_no_ammo_mun.arenaflag thread bot_ctf_flag_picked_up_of_team( 0, self );

    scripts\cp\helicopter\chopper_boss::stopusingbomb( 2 );
    scripts\mp\gametypes\br_analytics.gsc::choppergunner_watchintrodisown( self, "loser" );
    playerdestroyhud( var_0 );
    setplayervargulag( 0 );
    setplayervargulagarena( 0, 1 );
    _id_11EE7( 0 );

    if ( isalive( self ) )
    {
        if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "teamSpectate" ) )
            scripts\mp\gametypes\br_spectate.gsc::setup_teleport_rooms( self, undefined, 1 );

        gulagfadetoblack();
        wait 1;

        if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "teamSpectate" ) )
            scripts\mp\gametypes\br_spectate.gsc::setup_teleport_rooms( self, undefined, 1 );

        if ( isalive( self ) )
        {
            var_2 = spawnstruct();
            var_2.origin = self.origin;
            var_2.angles = self.angles;
            var_2.attacker = self.lastattacker;
            self.health = 0;
            self notify( "death" );
            self notify( "death_or_disconnect" );
            scripts\mp\gametypes\br_spectate.gsc::spawnspectator( var_2, 1, 1 );
            scripts\mp\playerlogic::removefromalivecount( 0 );
        }

        gulagfadefromblack();
    }

    self.plotarmor = undefined;
}

using_self_revive( var_0 )
{
    if ( istrue( level.usegulag ) )
    {
        if ( var_0 )
        {
            self._id_12ECA = var_0;
            self setclientomnvar( "ui_gulag", var_0 );
        }
        else
        {
            self._id_12ECA = undefined;
            self setclientomnvar( "ui_gulag", 0 );
        }

        _id_11EDF( var_0 );
    }
}

validtousesticker()
{
    if ( istrue( level.usegulag ) && istrue( self._id_12ECA ) && scripts\mp\gametypes\br_public.gsc::minigun_warning_time( self.team, self.squadindex ) > 0 )
        scripts\mp\gametypes\br_public.gsc::cloud_cover( "gulag_buyback", self, 0, 1 );
}

x1ops( var_0, var_1 )
{
    if ( istrue( var_1.gulagarena ) )
    {
        var_2 = var_1.arena;
        var_2.molotovs[var_2.molotovs.size] = var_0;
    }
}

empendearly( var_0 )
{
    foreach ( var_2 in var_0.molotovs )
    {
        if ( isdefined( var_2 ) )
            thread scripts\mp\equipment\molotov::showteamtanks( var_2 );
    }

    var_0.molotovs = [];
}

mp_m_trench_patch_giveplayer_c4( var_0 )
{
    var_1 = isdefined( level.br_circle ) && isdefined( level.br_circle.safecircleent );

    if ( !var_1 )
        return 1;

    var_2 = scripts\mp\gametypes\br_circle.gsc::getsafecircleorigin();
    var_3 = scripts\mp\gametypes\br_circle.gsc::getsafecircleradius();
    var_4 = distance2d( var_0, var_2 );
    return var_4 < var_3;
}

mp_m_trench_patch( var_0 )
{
    var_1 = isdefined( level.br_circle ) && isdefined( level.br_circle.dangercircleent );

    if ( !var_1 )
        return 1;

    var_2 = scripts\mp\gametypes\br_circle.gsc::getdangercircleorigin();
    var_3 = scripts\mp\gametypes\br_circle.gsc::getdangercircleradius();
    var_4 = distance2d( var_0, var_2 );
    return var_4 < var_3;
}

mp_m_stack_patch( var_0, var_1 )
{
    if ( !scripts\mp\gametypes\br_c130.gsc::ispointinbounds( var_0, 1 ) )
        return 0;

    if ( !isdefined( level.br_circle ) || !isdefined( level.br_circle.safecircleent ) || !isdefined( level.br_circle.dangercircleent ) )
        return 1;

    if ( scripts\mp\utility\game::missions_clearinappropriaterewards() == "truckwar" )
    {
        if ( mp_m_trench_patch( var_0 ) )
            return 1;
    }
    else
    {
        if ( mp_m_trench_patch_giveplayer_c4( var_0 ) )
            return 1;

        if ( !mp_m_trench_patch( var_0 ) )
            return 0;
    }

    if ( isdefined( var_1 ) )
    {
        var_2 = scripts\mp\gametypes\br_circle.gsc::getmintimetillpointindangercircle( var_0 );

        if ( var_1 > var_2 )
            return 0;
    }

    var_3 = scripts\mp\gametypes\br_circle.gsc::getsafecircleorigin();
    var_4 = scripts\mp\gametypes\br_circle.gsc::getsafecircleradius();
    var_5 = scripts\mp\gametypes\br_circle.gsc::getdangercircleorigin();
    var_6 = scripts\mp\gametypes\br_circle.gsc::getdangercircleradius();
    var_7 = length( var_5 - var_3 );
    var_8 = vectornormalize( var_5 - var_3 );
    var_9 = level._id_11A9F;
    var_10 = var_3 + var_8 * var_7 * var_9;
    var_11 = var_4 + ( var_6 - var_4 ) * var_9;
    var_12 = distance2d( var_0, var_10 );
    return var_12 < var_11;
}

quickdropremoveammofrominventory( var_0, var_1 )
{
    if ( var_0 == self )
        return 0;

    if ( !isalive( var_0 ) || var_0 scripts\mp\gametypes\br_public.gsc::questtypes() || istrue( var_0.checkpointstruct ) )
        return 0;

    if ( !mp_m_stack_patch( var_0.origin, var_1 ) )
        return 0;

    return 1;
}

unset_relic_headbullets( var_0, var_1, var_2 )
{
    var_3 = undefined;

    if ( istrue( level.onlinegame ) && self getprivatepartysize() )
    {
        var_4 = undefined;

        foreach ( var_6 in self getfireteammembers() )
        {
            if ( !quickdropremoveammofrominventory( var_6, var_1 ) )
                continue;

            var_4 = var_6;

            if ( var_6 isfireteamleader() )
                break;
        }

        if ( isdefined( var_4 ) && istrue( var_0 ) )
        {
            var_3 = var_4;
            var_4 = undefined;

            foreach ( var_6 in self getfireteammembers() )
            {
                if ( isdefined( var_3 ) && var_3 == var_6 )
                    continue;

                if ( !quickdropremoveammofrominventory( var_6, var_1 ) )
                    continue;

                var_4 = var_6;

                if ( var_6 isfireteamleader() )
                    break;
            }
        }

        if ( isdefined( var_4 ) )
            return var_4;
    }

    if ( isdefined( self.lastdeathpos ) )
    {
        var_10 = undefined;
        var_11 = undefined;
        var_12 = scripts\mp\gametypes\br_public.gsc::minigunbackup( self.team, self.squadindex );

        foreach ( var_14 in var_12 )
        {
            if ( isdefined( var_3 ) && var_3 == var_14 )
                continue;

            if ( !quickdropremoveammofrominventory( var_14, var_1 ) )
                continue;

            if ( var_14 isparachuting() || var_14 isskydiving() )
                continue;

            var_15 = distance2dsquared( self.lastdeathpos, var_14.origin );

            if ( !isdefined( var_11 ) || var_15 < var_11 )
            {
                var_10 = var_14;
                var_11 = var_15;
            }
        }

        if ( isdefined( var_10 ) && istrue( var_0 ) && !isdefined( var_3 ) )
        {
            var_3 = var_10;
            var_10 = undefined;
            var_11 = undefined;

            foreach ( var_14 in var_12 )
            {
                if ( isdefined( var_3 ) && var_3 == var_14 )
                    continue;

                if ( !quickdropremoveammofrominventory( var_14, var_1 ) )
                    continue;

                if ( var_14 isparachuting() || var_14 isskydiving() )
                    continue;

                var_15 = distance2dsquared( self.lastdeathpos, var_14.origin );

                if ( !isdefined( var_11 ) || var_15 < var_11 )
                {
                    var_10 = var_14;
                    var_11 = var_15;
                }
            }
        }

        if ( isdefined( var_10 ) )
            return var_10;
    }

    var_10 = undefined;
    var_19 = scripts\engine\utility::array_randomize( scripts\mp\gametypes\br_public.gsc::minigunbackup( self.team, self.squadindex ) );

    foreach ( var_21 in var_19 )
    {
        if ( isdefined( var_3 ) && var_3 == var_21 )
            continue;

        if ( !quickdropremoveammofrominventory( var_21, var_1 ) )
            continue;

        var_10 = var_21;

        if ( istrue( var_21 scripts\mp\gametypes\br_public.gsc::questrewarduav() ) )
            break;
    }

    if ( isdefined( var_10 ) )
        return var_10;
    else if ( !istrue( var_2 ) )
    {
        if ( scripts\mp\utility\game::missions_clearinappropriaterewards() == "dmz" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "risk" )
        {
            var_23 = scripts\mp\utility\teams::getteamdata( self.team, "teamCount" );

            if ( var_23 == 1 && !istrue( self.giveachievementsmoke ) && !scripts\mp\outofbounds::ispointinoutofbounds( self.origin ) )
                return self;
        }
    }

    return undefined;
}

minigameinfo( var_0, var_1, var_2 )
{
    var_3 = add_object_to_trap_room_ents( var_0, var_1, var_2 );
    scripts\mp\gametypes\br_analytics.gsc::circle_acceleration( var_0, 0, var_3 );
    return var_3;
}

add_object_to_trap_room_ents( var_0, var_1, var_2 )
{
    var_3 = 3.14159;
    var_4 = scripts\mp\gametypes\br_circle.gsc::getsafecircleorigin();
    var_5 = vectornormalize( var_0 - var_4 );
    var_6 = vectortoangles( var_5 );
    var_7 = randomfloatrange( getdvarfloat( "scr_br_respawn_rand_ang_min", 10.0 ), getdvarfloat( "scr_br_respawn_rand_ang_max", 60.0 ) );

    if ( scripts\mp\utility\game::missions_clearinappropriaterewards() == "dmz" && getdvarint( "scr_dmz_respawn_rand_ang", 0 ) == 1 )
        var_8 = vectornormalize( anglestoforward( var_6 + ( 0, scripts\engine\utility::ter_op( scripts\engine\utility::cointoss(), var_7, var_7 * -1 ), 0 ) ) );
    else
        var_8 = var_5;

    var_9 = var_0 + var_8 * var_1;

    if ( mp_m_stack_patch( var_9, var_2 ) )
        return var_9;

    var_8 = var_8 * -1;
    var_9 = var_0 + var_8 * var_1;

    if ( mp_m_stack_patch( var_9, var_2 ) )
        return var_9;

    var_8 = vectornormalize( var_4 - var_0 );
    var_9 = var_0 + var_8 * var_1;

    if ( mp_m_stack_patch( var_9, var_2 ) )
        return var_9;

    var_10 = var_1;
    var_11 = distance2d( var_0, var_4 );
    var_12 = var_10 / var_11;

    if ( var_12 > var_3 )
        var_12 = var_3;

    var_13 = var_12 * 180 / var_3;
    var_9 = rotatepointaroundvector( ( 0, 0, 1 ), var_0 - var_4, var_13 ) + var_4;

    if ( mp_m_stack_patch( var_9, var_2 ) )
        return var_9;

    var_9 = scripts\mp\gametypes\br_circle.gsc::getrandompointincircle( var_0, var_1 );

    if ( mp_m_stack_patch( var_9, var_2 ) )
        return var_9;

    return undefined;
}

unset_relic_gun_game()
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "missions" ) )
        return undefined;

    foreach ( var_5, var_1 in level.questinfo.quests )
    {
        foreach ( var_4, var_3 in var_1.instances )
        {
            if ( var_4 == self.team && !scripts\mp\gametypes\br_quest_util.gsc::race_set_player_safe( var_3 ) )
            {
                switch ( var_3.category )
                {
                    case "assassination":
                        if ( isdefined( var_3.targetplayer ) )
                            return var_3.targetplayer.origin;

                        break;
                    case "domination":
                        if ( isdefined( var_3._id_12550 ) && isdefined( var_3._id_12550.domflag ) && isdefined( var_3._id_12550.domflag.curorigin ) )
                            return var_3._id_12550.domflag.curorigin;

                        break;
                    case "scavenger_adler":
                    case "scavenger":
                        if ( isdefined( var_3._id_12550.damagedisabledfeedback.origin ) && isdefined( var_3._id_12550.damagedisabledfeedback ) )
                            return var_3._id_12550.damagedisabledfeedback.origin;

                        break;
                    case "x2_map":
                    case "x2_amb1":
                    case "x2_bomb":
                    case "x2_stash":
                    case "x1fin":
                    case "x1stash":
                    case "history":
                    case "smokinggun":
                    case "vip":
                        break;
                    default:
                        break;
                }
            }
        }
    }

    return undefined;
}

unset_relic_grounded( var_0 )
{
    foreach ( var_2 in level.br_pickups.crates )
    {
        if ( !isdefined( var_2 ) || !isdefined( var_2.team ) || var_2.team != self.team )
            continue;

        if ( isdefined( var_2.playerscaptured ) && isdefined( var_2.playerscaptured[self getentitynumber()] ) )
            continue;

        if ( mp_m_stack_patch( var_2.origin, var_0 ) )
            return var_2.origin;
    }
}

unsetreduceregendelayonkills( var_0, var_1, var_2 )
{
    var_3 = undefined;
    var_4 = undefined;
    var_5 = var_2;
    var_6 = 1;

    if ( isdefined( self.setspawnpoint ) )
    {
        var_3 = self.setspawnpoint.playerspawnpos;
        var_4 = self.setspawnpoint.playerspawnangles;
    }

    var_7 = getdvarfloat( "scr_br_respawnMaxLastDeathOffset", -1 );

    if ( !isdefined( var_3 ) && var_7 >= 0 && isdefined( self.lastdeathpos ) )
    {
        var_8 = minigameinfo( self.lastdeathpos, var_7, var_1 );

        if ( isdefined( var_8 ) )
        {
            var_3 = scripts\mp\gametypes\br_public.gsc::helihint_deposit( var_8 );
            var_4 = loot_getitemcountlefthand( var_3, self.lastdeathpos );
        }
    }

    var_7 = getdvarfloat( "scr_br_respawnMaxTeammateOffset", 1000 );

    if ( !isdefined( var_3 ) && var_7 >= 0 )
    {
        var_9 = unset_relic_headbullets( var_0, var_1 );

        if ( isdefined( var_9 ) )
        {
            var_10 = getdvarfloat( "scr_bmo_respawn_intermission_time", 5.0 ) * 1000;
            var_11 = getdvarfloat( "scr_bmo_redeploy_window", 30.0 ) * 1000;

            if ( ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "risk" || getdvar( "scr_br_gametype", "" ) == "kingslayer" ) && isdefined( level.teamdata[self.team]["lastParachuteTime"] ) && level.teamdata[self.team]["lastParachuteTime"] + var_11 > gettime() + var_10 && distance2d( level.teamdata[self.team]["lastParachuteOrigin"], var_9.origin ) < getdvarfloat( "scr_br_respawnMaxTeammateOffset", 1000 ) * 1.25 )
            {
                var_3 = level.teamdata[self.team]["lastParachuteOrigin"];
                var_4 = level.teamdata[self.team]["lastParachuteAngles"];
            }
            else
            {
                var_3 = minigameinfo( var_9.origin, var_7, var_1 );

                if ( isdefined( var_3 ) )
                {
                    var_3 = scripts\mp\gametypes\br_public.gsc::helihint_deposit( var_3 );
                    var_4 = loot_getitemcountlefthand( var_3, var_9.origin );
                    level.teamdata[self.team]["lastParachuteOrigin"] = var_3;
                    level.teamdata[self.team]["lastParachuteAngles"] = var_4;
                    level.teamdata[self.team]["lastParachuteTime"] = gettime();
                }
            }
        }
    }

    var_7 = getdvarfloat( "scr_br_respawnMaxMissionOffset", 3000 );

    if ( !isdefined( var_3 ) && var_7 >= 0 )
    {
        var_12 = unset_relic_gun_game();

        if ( isdefined( var_12 ) )
        {
            var_3 = minigameinfo( var_12, var_7, var_1 );
            var_4 = loot_getitemcountlefthand( var_3, var_12 );
        }
    }

    var_7 = getdvarfloat( "scr_br_respawnMaxCrateOffset", 3000 );

    if ( !isdefined( var_3 ) && var_7 >= 0 )
    {
        var_13 = unset_relic_grounded( var_1 );

        if ( isdefined( var_13 ) )
        {
            var_3 = minigameinfo( var_13, var_7, var_1 );
            var_4 = loot_getitemcountlefthand( var_3, var_13 );
        }
    }

    if ( !isdefined( var_3 ) )
    {
        if ( isdefined( level.br_circle ) && isdefined( level.br_circle.safecircleent ) )
        {
            if ( getdvarint( "scr_br_useClosestSafePointFromSquadmate", 1 ) )
            {
                var_14 = getdvarfloat( "scr_br_closestSafePointTimeOffset", 2.0 );
                var_3 = scripts\mp\gametypes\br_circle.gsc::enemygunship_getshotgoal( self, var_1, var_14 );
            }

            if ( !isdefined( var_3 ) )
            {
                var_15 = scripts\mp\gametypes\br_circle.gsc::getsafecircleorigin();
                var_16 = scripts\mp\gametypes\br_circle.gsc::getsafecircleradius();
                var_17 = getdvarfloat( "scr_br_minRespawnRadiusPct", 0.5 );
                var_18 = getdvarfloat( "scr_br_maxRespawnRadiusPct", 0.9 );
                var_19 = getdvarint( "scr_br_maxRespawnDropToGround", 1 );
                var_20 = getdvarint( "scr_br_maxRespawnSnapToNavMesh", 1 );
                var_3 = scripts\mp\gametypes\br_circle.gsc::mine_caves_vo( var_15, var_16, var_18, var_18, var_19, var_20, 0, var_1 );
            }
        }
        else if ( isdefined( level.prematchspawnorigins ) )
        {
            if ( isdefined( level.teamdata[self.team]["chosenSpawnWipeOrigin"] ) && isdefined( level.teamdata[self.team]["spawnWipeOriginUseStartTime"] ) && isdefined( level.brenableagents ) && level.teamdata[self.team]["spawnWipeOriginUseStartTime"] + level.brenableagents * 1000 > gettime() )
                var_3 = level.teamdata[self.team]["chosenSpawnWipeOrigin"];
            else
            {
                var_21 = [];

                foreach ( var_23 in level.prematchspawnorigins )
                {
                    if ( distance2dsquared( var_23.origin, self.origin ) > var_7 )
                        var_21[var_21.size] = var_23;
                }

                if ( var_21.size == 0 )
                    var_21 = level.prematchspawnorigins;

                var_21 = scripts\engine\utility::array_randomize( var_21 );
                var_3 = var_21[0].origin;
                var_3 = var_3 + scripts\engine\math::random_vector_2d() * randomfloatrange( 100, 500 );
                level.teamdata[self.team]["chosenSpawnWipeOrigin"] = var_3;
                level.teamdata[self.team]["spawnWipeOriginUseStartTime"] = gettime();
            }

            var_4 = ( 0, 0, 0 );

            if ( var_3[2] > 10000 & !isdefined( var_2 ) )
            {
                var_6 = 0;
                var_5 = scripts\mp\gametypes\br_infils.gsc::getinfilspawnoffset();
            }
        }
        else
        {
            var_3 = ( 0, 0, 0 );
            var_4 = ( 0, 0, 0 );
        }
    }

    if ( !isdefined( var_4 ) )
    {
        var_25 = scripts\mp\gametypes\br_circle.gsc::getsafecircleorigin();
        var_26 = vectortoyaw( var_25 - var_3 );
        var_4 = ( 0, var_26, 0 );
    }

    if ( var_6 )
    {
        if ( !isdefined( var_5 ) )
            var_5 = scripts\cp_mp\parachute::getc130height();

        if ( isdefined( level.br_circle ) )
        {
            var_27 = level.br_circle.circleindex;
            var_28 = manned_turret_createhintobject();
            var_29 = isdefined( var_27 ) && var_27 >= var_28;

            if ( var_29 )
                var_5 = var_5 * getdvarfloat( "scr_br_gulagClosedSpawnOffsetScaler", 0.55 );
        }

        if ( isdefined( level._id_11AA6 ) )
            var_5 = level._id_11AA6;

        var_30 = ( 0, 0, var_5 );
        var_3 = scripts\mp\gametypes\br.gsc::maxelderrank( var_3, var_30 );
    }

    var_31 = spawnstruct();
    var_31.origin = var_3;
    var_31.angles = var_4;
    var_31.height = var_5;
    return var_31;
}

loot_getitemcountlefthand( var_0, var_1 )
{
    if ( isdefined( var_0 ) && isdefined( var_1 ) )
    {
        var_2 = vectortoyaw( var_1 - var_0 );
        var_3 = ( 0, var_2, 0 );
        return var_3;
    }
}

gulagwinnerrespawn( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    var_10 = !istrue( var_0 );

    if ( !istrue( var_0 ) && !istrue( var_8 ) )
        scripts\cp\helicopter\chopper_boss::stopusingbomb( 1 );

    if ( isdefined( var_1 ) )
        scripts\mp\gametypes\br_analytics.gsc::choppergunner_watchintrodisown( self, var_1 );

    using_self_revive( 0 );
    setplayervargulag( 0 );
    setplayervargulagarena( 0 );

    if ( scripts\mp\utility\game::getgametype() == "br" )
        playerdestroyhud( self.arena );

    _id_11EE7( 0 );
    level notify( "update_circle_hide" );
    self.recordinterval = undefined;
    scripts\mp\gametypes\br.gsc::monitor_game_end_on_front_truck_death( self );
    playertakeawayrock( self.arena );
    mp_t_reflex_patch();

    if ( isdefined( level.gulag ) && istrue( level.gulag.planerespawn ) )
    {
        playerrespawngulagcleanup( var_0 );
        mp_t_gun_course_patch();
        playersetupac130();

        if ( isdefined( self.oobimmunity ) )
            scripts\mp\outofbounds::disableoobimmunity( self );

        return;
    }

    if ( !isdefined( var_2 ) )
        var_2 = unsetreduceregendelayonkills();

    var_11 = var_2.origin;
    var_12 = var_2.angles;
    var_13 = var_11;

    if ( isdefined( var_4 ) )
        var_13 = var_4;

    mp_t_gun_course_patch();
    vcloseangles( var_13, var_12 );
    var_14 = spawn( "script_model", var_13 );
    var_14 setmodel( "tag_origin" );
    var_14.angles = var_12;
    var_14 hide();
    var_14 showtoplayer( self );
    self playerlinktoabsolute( var_14, "tag_origin" );
    self playerhide();
    thread uniquepoolid( var_14 );
    waitframe();

    if ( isdefined( self.oobimmunity ) )
        scripts\mp\outofbounds::disableoobimmunity( self );

    playerrespawngulagcleanup( var_0 );

    if ( getdvarint( "scr_skip_respawn_gate", 1 ) == 0 )
        scripts\mp\gametypes\br_public.gsc::vehicle_collision_updateinstanceend();

    scripts\mp\gametypes\br_public.gsc::unload_vehicles_on_weapons_free_thread();

    if ( isdefined( var_4 ) )
        var_14.origin = var_11;

    var_14 playsoundtoplayer( "br_ac130_flyby", self );
    wait 1.5;
    self unlink();
    self clearsoundsubmix( "deaths_door_mp" );

    if ( scripts\mp\gametypes\br_public.gsc::processvoqueue() )
        self clearsoundsubmix( "iw8_br_gulag_tutorial", 2 );
    else
        self clearsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 2 );

    self clearclienttriggeraudiozone( 1 );
    self playershow();
    unsetspecialistbonus( 1 );
    var_15 = 0;

    if ( isdefined( level.targs_done ) )
        var_15 = level.targs_done;

    if ( !scripts\mp\gametypes\br_public.gsc::prophasclonesleft() )
        thread scripts\cp_mp\parachute::startfreefall( var_15, 0, undefined, undefined, 1 );

    if ( !istrue( var_3 ) )
        thread _id_1292D( 7 );

    if ( istrue( var_5 ) )
        self setclientomnvar( "ui_br_transition_type", 0 );

    if ( scripts\mp\utility\game::getgametype() == "br" )
        self setclientomnvar( "ui_show_spectateHud", -1 );

    _id_11A7E();

    if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "armor" ) )
        scripts\mp\gametypes\br_armor.gsc::monitor_truck();

    scripts\mp\gametypes\br_quest_util.gsc::success_zone_width();
    scripts\mp\gametypes\br_rewards.gsc::success_zone_width();
    scripts\mp\gametypes\br_alt_mode_escape.gsc::init_exit_doors();
    scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "gulagWinnerRespawn", self );
    wait 0.5;

    if ( scripts\mp\utility\game::getgametype() == "br" )
        gulagfadefromblack();

    waitframe();
    var_14 delete();

    if ( istrue( level._id_120C3 ) )
        scripts\mp\gametypes\br_skydive_protection.gsc::playerzombieemp( 1 );

    if ( scripts\mp\gametypes\br_public.gsc::processvoqueue() )
        self notify( "respawn_from_gulag" );

    self notify( "can_show_splashes" );

    if ( istrue( getdvar( "scr_br_gametype", "" ) == "truckwar" ) && !istrue( var_8 ) )
    {
        var_16 = "br_gulag_winner_redeploy_mogulag";
        var_17 = undefined;
    }

    if ( istrue( getdvar( "scr_br_gametype", "" ) == "dmz" ) || istrue( getdvar( "scr_br_gametype", "" ) == "kingslayer" ) || istrue( getdvar( "scr_br_gametype", "" ) == "rumble" ) || istrue( getdvar( "scr_br_gametype", "" ) == "risk" ) || istrue( getdvar( "scr_br_gametype", "" ) == "sandbox" ) )
    {
        var_16 = "br_gulag_winner_redeploy_mogulag";
        var_17 = undefined;
    }
    else if ( istrue( var_7 ) )
    {
        var_16 = "br_gulag_jailbreak_redeploy";
        var_17 = undefined;
    }
    else if ( istrue( var_0 ) || istrue( var_8 ) )
    {
        var_16 = "br_gulag_kiosk_redeploy";
        var_17 = var_6;
    }
    else
    {
        if ( istrue( isdefined( level.gulag ) && !istrue( level.gulag.shutdown ) ) && checkgulagusecount() )
            var_16 = "br_gulag_winner_redeploy_mogulag";
        else
            var_16 = "br_gulag_winner_redeploy";

        var_17 = undefined;
    }

    if ( !istrue( var_9 ) )
        thread scripts\mp\hud_message::showsplash( var_16, undefined, var_17 );

    if ( isdefined( level.gulag ) && istrue( level.gulag.shutdown ) && !istrue( self.gulagdone ) )
    {
        wait 2.0;
        playergulagdonesplash();
    }
}

uniquepoolid( var_0 )
{
    var_0 endon( "death" );
    self waittill( "disconnect" );

    if ( isdefined( var_0 ) )
        var_0 delete();
}

unsetspecialistbonus( var_0 )
{
    if ( var_0 )
    {
        self enableoffhandweapons();
        self enableusability();
    }
    else
    {
        self disableoffhandweapons();
        self disableusability();
    }
}

_id_1292D( var_0 )
{
    self endon( "disconnect" );
    var_1 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "triggerRespawnOverlay" );

    if ( istrue( var_1 ) )
        return;

    _id_1292E();
}

_id_1292E()
{
    wait 0.5;
    thread scripts\mp\hud_message::showsplash( "br_gulag_winner" );
}

playerrespawngulagcleanup( var_0 )
{
    self notify( "gulagRespawn" );
    scripts\mp\equipment\molotov::molotov_clear_burning();
    self.health = self.maxhealth;
    scripts\mp\healthoverlay::onexitdeathsdoor( 1 );

    if ( !istrue( var_0 ) )
    {
        scripts\mp\utility\player::enableplayerforspawnlogic( 0 );
        self setclientomnvar( "ui_gulag", 0 );
        scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "isRespawning", 0 );

        if ( isdefined( self.arena ) )
            removeloadingplayer( self.arena, self );

        self.arena = undefined;
    }
}

mp_t_reflex_patch()
{
    if ( getdvarint( "scr_br_fc_keep_gun", 0 ) != 0 )
        gulagwinnerremembergunandammo();
    else if ( isdefined( level.chopper_gunner ) || getdvarint( "scr_br_fc_loadouts", 1 ) != 0 && getdvarint( "scr_br_fc_winner_loadout", -1 ) > -1 )
        self.mp_t_reflex_containers_collisions = 1;
}

mp_vacant_patch_thread()
{
    if ( !istrue( level.usegulag ) && !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "gulagWinnerRestoreLoadoutUseGulag" ) )
        return 0;

    var_0 = 0;

    if ( getdvarint( "scr_br_fc_keep_gun", 0 ) != 0 )
        var_0 = mp_vacant_patch();
    else if ( isdefined( level.chopper_gunner ) || getdvarint( "scr_br_fc_loadouts", 1 ) != 0 && getdvarint( "scr_br_fc_winner_loadout", -1 ) > -1 )
        var_0 = mp_village2_patches();

    return var_0;
}

gulagwinnerremembergunandammo()
{
    self.br_gulagguncurrent = self getcurrentprimaryweapon();
    var_0 = self getweaponslistprimaries();
    var_0 = scripts\engine\utility::array_remove( var_0, getcompleteweaponname( "iw8_knifestab_mp" ) );
    var_0 = scripts\engine\utility::array_remove( var_0, getcompleteweaponname( "iw8_throwingknife_fire_melee_mp" ) );
    var_0 = scripts\engine\utility::array_remove( var_0, getcompleteweaponname( "iw8_throwingknife_electric_melee_mp" ) );
    var_0 = scripts\engine\utility::array_remove( var_0, getcompleteweaponname( "iw8_throwingknife_drill_melee_mp" ) );
    var_0 = scripts\engine\utility::array_remove( var_0, getcompleteweaponname( "iw8_fists_mp" ) );
    self.br_gulagguns = [];
    self.br_gulagammo = [];

    foreach ( var_2 in var_0 )
    {
        var_3 = createheadicon( var_2 );

        if ( getsubstr( var_3, 0, 4 ) == "alt_" )
            continue;

        self.br_gulagguns[self.br_gulagguns.size] = var_2;
        self.br_gulagammo[var_3] = weaponclipsize( var_2 ) * 3;
    }

    var_5 = self getweaponslistoffhands();
    self.br_gulagoffhands = [];

    foreach ( var_7 in var_5 )
    {
        var_8 = self getweaponammoclip( var_7 );

        if ( var_8 <= 0 )
            continue;

        self.br_gulagoffhands[self.br_gulagoffhands.size] = var_7;
        var_9 = createheadicon( var_7 );
        self.br_gulagammo[var_9] = weaponstartammo( var_7 );
    }
}

mp_vacant_patch()
{
    if ( isdefined( self.br_gulagguns ) && isdefined( self.br_gulagoffhands ) && isdefined( self.br_gulagammo ) )
    {
        self takeallweapons();
        scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();
        self.equipment["primary"] = undefined;
        self.equipment["secondary"] = undefined;
        self.equipment["health"] = undefined;
        self.equipment["super"] = undefined;

        if ( self.br_gulagguns.size < 2 )
            self giveweapon( getcompleteweaponname( "iw8_fists_mp" ) );

        var_0 = 0;

        foreach ( var_2 in self.br_gulagguns )
        {
            var_3 = createheadicon( var_2 );
            scripts\cp_mp\utility\inventory_utility::_giveweapon( var_2 );
            self setweaponammostock( var_2, 0 );

            if ( !var_0 )
            {
                self assignweaponprimaryslot( var_3 );
                scripts\cp_mp\utility\inventory_utility::_switchtoweapon( var_2 );
                var_0 = 1;
            }

            scripts\mp\weapons::fixupplayerweapons( self, var_3 );
            thread scripts\mp\gametypes\br_respawn.gsc::giveweaponpickup( var_3 );
            var_4 = weaponclipsize( var_2 );
            var_5 = int( min( var_4, 25 ) );

            if ( isdefined( self.br_gulagammo[var_3] ) )
                var_5 = int( max( var_5, self.br_gulagammo[var_3] ) );

            var_6 = 0;

            if ( var_5 > var_4 )
            {
                var_6 = var_5 - var_4;
                var_5 = var_4;
            }

            self setweaponammoclip( var_2, var_5 );

            if ( var_6 > 0 )
            {
                var_7 = scripts\mp\gametypes\br_weapons.gsc::br_ammo_type_for_weapon( var_2 );
                scripts\mp\gametypes\br_weapons.gsc::br_ammo_give_type( self, var_7, var_6 );
            }
        }

        scripts\mp\gametypes\br_weapons.gsc::br_ammo_update_weapons( self );

        foreach ( var_10 in self.br_gulagoffhands )
        {
            var_11 = scripts\mp\equipment::getequipmentreffromweapon( var_10 );

            if ( isdefined( var_11 ) && isdefined( level.br_pickups.br_equipnametoscriptable[var_11] ) )
            {
                var_12 = level.br_pickups.br_equipnametoscriptable[var_11];
                scripts\mp\gametypes\br_pickups.gsc::br_forcegivecustompickupitem( self, var_12, 1 );
                var_3 = createheadicon( var_10 );

                if ( isdefined( self.br_gulagammo[var_3] ) )
                {
                    var_13 = self.br_gulagammo[var_3];
                    self setweaponammoclip( var_10, var_13 );
                }
            }
        }

        if ( isdefined( self.br_gulagguncurrent ) )
            self switchtoweaponimmediate( self.br_gulagguncurrent );

        self.br_gulaggun = undefined;
        self.br_gulagammo = undefined;
        self.br_gulagoffhands = undefined;
        self.br_gulagguncurrent = undefined;
        return 1;
    }

    return 0;
}

mp_village2_patches()
{
    if ( istrue( self.mp_t_reflex_containers_collisions ) )
    {
        var_0 = getdvarint( "scr_br_fc_winner_loadout", -1 );

        if ( var_0 > -1 )
            self.pers["gamemodeLoadout"] = level.mp_raid_patch[var_0];
        else
            self.pers["gamemodeLoadout"] = level.chopper_gunner;

        self.class = "gamemode";
        self.prevweaponobj = undefined;
        var_1 = scripts\mp\class::loadout_getclassstruct();
        var_1 = scripts\mp\class::loadout_updateclass( var_1, "gamemode" );
        scripts\mp\class::preloadandqueueclassstruct( var_1, 1, 1 );
        scripts\mp\class::giveloadout( self.team, "gamemode", 0, 0 );
        self givestartammo( var_1.loadoutprimaryobject );
        self givestartammo( var_1.loadoutsecondaryobject );
        scripts\mp\gametypes\br.gsc::monitor_game_end_on_front_truck_death( self );
        scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();
        scripts\mp\gametypes\br_weapons.gsc::checkpoint_overwatch();
        scripts\mp\gametypes\br_weapons.gsc::br_ammo_update_weapons( self );
        self notify( "ammo_update" );
        thread scripts\mp\gametypes\br.gsc::checkpoint_fx_play();

        if ( isdefined( level.init_cp_execution ) && level.init_cp_execution.watchthrowingkifefireswipe == 1 )
            scripts\mp\gametypes\br.gsc::clear_bomb_vest_controller_holder();

        self.mp_t_reflex_containers_collisions = undefined;
        return 1;
    }

    return 0;
}

popnextmatch( var_0 )
{
    var_1 = var_0.matches[0];
    var_0.matches = scripts\engine\utility::array_remove_index( var_0.matches, 0 );
    return var_1;
}

checkgulagusecount()
{
    if ( level.gulag.maxuses >= 0 )
    {
        var_0 = self.gulaguses;

        if ( !isdefined( var_0 ) )
            var_0 = 0;

        if ( var_0 >= level.gulag.maxuses )
            return 0;
    }

    return 1;
}

trygulagspawn()
{
    if ( !istrue( self.br_infilstarted ) || !scripts\mp\flags::gameflag( "prematch_done" ) )
        return 0;

    if ( istrue( self.gulag ) )
        return 0;

    if ( scripts\mp\gametypes\br_public.gsc::hasrespawntoken() && !scripts\mp\gametypes\br_pickups.gsc::_id_11AB4() )
    {
        thread playergulagautowin();
        return 1;
    }

    if ( !uid() )
        return 0;

    thread initplayerjail( 1 );
    return 1;
}

uid()
{
    if ( !istrue( self.br_infilstarted ) || !scripts\mp\flags::gameflag( "prematch_done" ) )
        return 0;

    if ( istrue( self.gulag ) )
        return 0;

    if ( !istrue( level.usegulag ) )
        return 0;

    if ( istrue( level.gulag.shutdown ) && !update_objective_ownerclient() )
        return 0;

    if ( getdvarint( "scr_br_all_assassin_version", 0 ) )
        return 0;

    if ( istrue( self.gulagloser ) )
        return 0;

    if ( !checkgulagusecount() )
        return 0;

    return 1;
}

playergulaghud( var_0 )
{
    if ( isdefined( var_0.fightover ) && !var_0.fightover )
        usefailvehiclemsg( var_0 );

    if ( isdefined( var_0.fightover ) && !var_0.fightover && isdefined( var_0.time ) && var_0.time > 0 )
    {
        var_1 = var_0.time;

        if ( !istrue( var_0.overtime ) )
        {
            var_2 = maxtimelimit();
            var_1 = var_1 - var_2;
        }

        self setclientomnvar( "ui_br_gulag_match_end_time", gettime() + int( var_1 * 1000 ) );
    }
    else
        self setclientomnvar( "ui_br_gulag_match_end_time", 0 );
}

updatematchtimerhud( var_0, var_1 )
{
    _updatematchtimerhudinternal( var_0.arenaplayers, var_1 );
    _updatematchtimerhudinternal( var_0.jailedplayers, var_1 );
}

_updatematchtimerhudinternal( var_0, var_1 )
{
    foreach ( var_3 in var_0 )
    {
        if ( !isdefined( var_3 ) )
            continue;

        if ( var_1 > 0 )
        {
            var_3 setclientomnvar( "ui_br_gulag_match_end_time", gettime() + int( var_1 * 1000 ) );
            continue;
        }

        var_3 setclientomnvar( "ui_br_gulag_match_end_time", 0 );
    }
}

updatematchqueuepositions( var_0 )
{
    for ( var_1 = 2; var_1 <= level.gulag.maxplayers; var_1 = var_1 + 2 )
    {
        var_2 = [];

        foreach ( var_4 in var_0.jailedplayers )
        {
            if ( !isdefined( var_4 ) )
                continue;

            var_5 = 0;

            foreach ( var_12, var_7 in var_2 )
            {
                if ( var_7.size >= var_1 )
                    continue;

                var_8 = 0;

                foreach ( var_10 in var_7 )
                {
                    if ( var_10.team == var_4.team )
                    {
                        var_8 = 1;
                        break;
                    }
                }

                if ( !var_8 )
                {
                    var_5 = 1;
                    var_4.gulagposition = var_12 + 1;
                    var_2[var_12][var_2[var_12].size] = var_4;
                    break;
                }
            }

            if ( !var_5 )
            {
                var_4.gulagposition = var_2.size + 1;
                var_2[var_2.size] = [ var_4 ];
            }
        }

        var_0.matches = var_2;

        if ( var_2.size <= level.gulag.maxqueue )
            break;
    }

    _id_12AE2( var_0 );
}

playerwatchdisconnect( var_0 )
{
    self endon( "gulagLost" );
    self endon( "gulag_end" );
    self waittill( "death_or_disconnect" );

    if ( isdefined( self ) && istrue( self.gulagarena ) )
        return;

    if ( isdefined( self ) )
    {
        if ( istrue( self.gulagarena ) )
            var_0.arenaplayers = scripts\engine\utility::array_remove( var_0.arenaplayers, self );
        else if ( istrue( self.jailed ) )
            var_0.jailedplayers = scripts\engine\utility::array_remove( var_0.jailedplayers, self );

        playerdestroyhud( var_0 );
    }
    else
    {
        var_0.jailedplayers = scripts\engine\utility::array_removeundefined( var_0.jailedplayers );
        var_0.arenaplayers = scripts\engine\utility::array_removeundefined( var_0.arenaplayers );
    }

    updatematchqueuepositions( var_0 );
}

playerdestroyhud( var_0 )
{
    self setclientomnvar( "ui_br_gulag_match_end_time", 0 );

    if ( isdefined( var_0 ) )
        unload_after_timeout( var_0 );

    if ( isdefined( self.gulagjailbreakhud ) )
        self.gulagjailbreakhud destroy();

    self.mp_port2_gw_patch = undefined;
}

setplayervargulag( var_0 )
{
    if ( isdefined( self.gulag ) && self.gulag == var_0 )
        return;

    self.gulag = var_0;
    level notify( "update_circle_hide" );
}

setplayervargulagarena( var_0, var_1 )
{
    if ( isdefined( self.gulagarena ) && self.gulagarena == var_0 )
        return;

    if ( !istrue( var_1 ) )
        _id_11EDF( var_0 );

    self.gulagarena = var_0;
    level notify( "update_circle_hide" );
}

_id_11EDF( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 256;
    else
        self.game_extrainfo = self.game_extrainfo & ~256;
}

_id_11EE7( var_0 )
{
    if ( isdefined( self.jailed ) && self.jailed == var_0 )
        return;

    _id_11EE0( var_0 );
    self.jailed = var_0;
    level notify( "update_circle_hide" );
}

_id_11EE0( var_0 )
{
    if ( var_0 )
        self.game_extrainfo = self.game_extrainfo | 128;
    else
        self.game_extrainfo = self.game_extrainfo & ~128;
}

_id_11EDD( var_0 )
{
    if ( var_0.mp_m_speed_patch > 7 )
        return;

    var_1 = 3;
    var_2 = 3;
    var_3 = int( pow( 2, var_1 ) ) - 1;
    var_4 = ( var_0.mp_m_speed_patch & var_3 ) << var_2;
    var_5 = ~( var_3 << var_2 );
    var_6 = self.game_extrainfo;
    var_7 = var_6 & var_5;
    var_8 = var_7 + var_4;
    self.game_extrainfo = var_8;
}

startbetting( var_0, var_1 )
{
    if ( !level.gulag.betting )
        return undefined;

    var_2 = spawnstruct();
    var_2.fighters = var_1;
    var_2.bets = [];
    var_2.bettingopen = 1;
    var_2 thread show_betting_to_players( var_0 );
    return var_2;
}

show_betting_to_players( var_0 )
{
    self endon( "end_betting" );

    for (;;)
    {
        var_1 = getbettingplayers( var_0, self );

        foreach ( var_3 in var_1 )
        {
            if ( isbot( var_3 ) )
                continue;

            if ( isdefined( self.bets[var_3.guid] ) )
                continue;

            thread showbettinghud( var_0, var_3 );
        }

        var_0 waittill( "player_added_to_jail" );
    }
}

showbettinghud( var_0, var_1 )
{
    self endon( "end_betting" );
    var_2 = spawnstruct();
    var_2.owner = var_1;
    self.bets[var_1.guid] = var_2;
    var_2.updatearenaomnvardata = 0;
    var_2.usbvm = 1;
    var_3 = 0;
    var_4 = 50;
    var_2.hudavailable = var_1 scripts\mp\hud_util::createfontstring( "default", 1.2 );
    var_2.hudavailable scripts\mp\hud_util::setpoint( "TOP", "TOP", var_3, var_4 );
    var_2.hudavailable.label = &"MP_GULAG_BETTING/AVAILABLE";
    var_2.hudavailable scripts\mp\hud::fontpulseinit();
    var_2.ph_loadouts = var_1 scripts\mp\hud_util::createfontstring( "default", 1.2 );
    var_2.ph_loadouts scripts\mp\hud_util::setpoint( "TOP", "TOP", var_3, var_4 - 15 );
    var_2.ph_loadouts.label = &"MP_GULAG_BETTING/BET_CLEAR";
    var_2.ph_loadouts.alpha = 0.0;
    var_5 = -90;
    var_6 = 65;
    var_2.ph_checkforovertime = var_1 scripts\mp\hud_util::createfontstring( "default", 1.2 );
    var_2.ph_checkforovertime scripts\mp\hud_util::setpoint( "TOP", "TOP", var_5, var_6 );
    var_2.ph_checkforovertime.label = &"MP_GULAG_BETTING/BET_INCREASE_LEFT";
    var_2.ph_checkforovertime.alpha = 1.0;
    var_2.phoneisringing = var_1 scripts\mp\hud_util::createfontstring( "default", 1.25 );
    var_2.phoneisringing scripts\mp\hud_util::setpoint( "TOP", "TOP", var_5 - 20, var_6 + 12 );
    var_2.phoneisringing.label = &"MP_GULAG_BETTING/ODDS_PERCENT";
    var_2.phoneisringing setvalue( randomint( 60 ) + 20 );
    var_2.phoneisringing.alpha = 1.0;
    var_2.phoneplayring = var_1 scripts\mp\hud_util::createfontstring( "default", 1.25 );
    var_2.phoneplayring scripts\mp\hud_util::setpoint( "TOP", "TOP", var_5 + 20, var_6 + 12 );
    var_2.phoneplayring.label = &"MP_GULAG_BETTING/ODDS_RATIO";
    var_2.phoneplayring setvalue( randomint( 10 ) + 1 );
    var_2.phoneplayring.alpha = 1.0;
    var_2.phonesringing_code = var_1 scripts\mp\hud_util::createfontstring( "default", 1.5 );
    var_2.phonesringing_code scripts\mp\hud_util::setpoint( "TOP", "TOP", var_5, var_6 + 25 );
    var_2.phonesringing_code.label = &"";

    if ( isdefined( self.fighters[var_2.updatearenaomnvardata] ) )
        var_2.phonesringing_code setplayernamestring( self.fighters[var_2.updatearenaomnvardata] );

    var_2.phonesringing_code.alpha = 1.0;
    var_2.petrograd_lead_model = var_1 scripts\mp\hud_util::createfontstring( "default", 1.5 );
    var_2.petrograd_lead_model scripts\mp\hud_util::setpoint( "TOP", "TOP", var_5, var_6 + 40 );
    var_2.petrograd_lead_model.label = &"MP_GULAG_BETTING/CURRENT_BET";
    var_2.petrograd_lead_model.alpha = 0.0;
    var_2.petrograd_lead_model scripts\mp\hud::fontpulseinit();
    var_7 = 90;
    var_8 = 65;
    var_2.ph_endgame = var_1 scripts\mp\hud_util::createfontstring( "default", 1.2 );
    var_2.ph_endgame scripts\mp\hud_util::setpoint( "TOP", "TOP", var_7, var_8 );
    var_2.ph_endgame.label = &"MP_GULAG_BETTING/BET_INCREASE_RIGHT";
    var_2.ph_endgame.alpha = 1.0;
    var_2.phonemorsesinglescriptableused = var_1 scripts\mp\hud_util::createfontstring( "default", 1.25 );
    var_2.phonemorsesinglescriptableused scripts\mp\hud_util::setpoint( "TOP", "TOP", var_7 - 20, var_8 + 12 );
    var_2.phonemorsesinglescriptableused.label = &"MP_GULAG_BETTING/ODDS_PERCENT";
    var_2.phonemorsesinglescriptableused setvalue( randomint( 60 ) + 20 );
    var_2.phonemorsesinglescriptableused.alpha = 1.0;
    var_2.phonesfx = var_1 scripts\mp\hud_util::createfontstring( "default", 1.25 );
    var_2.phonesfx scripts\mp\hud_util::setpoint( "TOP", "TOP", var_7 + 20, var_8 + 12 );
    var_2.phonesfx.label = &"MP_GULAG_BETTING/ODDS_RATIO";
    var_2.phonesfx setvalue( randomint( 10 ) + 1 );
    var_2.phonesfx.alpha = 1.0;
    var_2.phonesringing_singlemorse = var_1 scripts\mp\hud_util::createfontstring( "default", 1.5 );
    var_2.phonesringing_singlemorse scripts\mp\hud_util::setpoint( "TOP", "TOP", var_7, var_8 + 25 );
    var_2.phonesringing_singlemorse.label = &"";

    if ( isdefined( self.fighters[var_2.usbvm] ) )
        var_2.phonesringing_singlemorse setplayernamestring( self.fighters[var_2.usbvm] );

    var_2.phonesringing_singlemorse.alpha = 1.0;
    var_2.petwatchtype = var_1 scripts\mp\hud_util::createfontstring( "default", 1.5 );
    var_2.petwatchtype scripts\mp\hud_util::setpoint( "TOP", "TOP", var_7, var_8 + 40 );
    var_2.petwatchtype.label = &"MP_GULAG_BETTING/CURRENT_BET";
    var_2.petwatchtype.alpha = 0.0;
    var_2.petwatchtype scripts\mp\hud::fontpulseinit();
    var_2.playerbeton = -1;
    var_2.amount = 0;
    updatebethud( var_2 );
    thread watchbetplaced( var_2 );
    thread watchbetclear( var_2 );
}

watchbetclear( var_0 )
{
    self endon( "end_betting" );
    var_0.owner endon( "disconnect" );
    var_1 = "betClear";
    thread notifyonplayercommandbetting( var_0.owner, var_1, "+special" );
    thread notifyonplayercommandbetting( var_0.owner, var_1, "+usereload" );

    for (;;)
    {
        var_0.owner waittill( var_1 );

        if ( var_0.playerbeton == -1 )
            continue;

        var_0.playerbeton = -1;
        var_0.amount = 0;
        updatebethud( var_0 );
    }
}

watchbetplaced( var_0 )
{
    self endon( "end_betting" );
    var_0.owner endon( "disconnect" );
    var_1 = "betPlacedLeft";
    var_2 = "betPlacedRight";
    thread notifyonplayercommandbetting( var_0.owner, var_1, "+smoke" );
    thread notifyonplayercommandbetting( var_0.owner, var_2, "+reload" );
    thread notifyonplayercommandbetting( var_0.owner, var_2, "+frag" );

    for (;;)
    {
        var_3 = var_0.owner scripts\engine\utility::_id_12E47( var_1, var_2 );
        var_4 = -1;

        if ( var_3 == var_1 )
            var_4 = var_0.updatearenaomnvardata;
        else if ( var_3 == var_2 )
            var_4 = var_0.usbvm;

        if ( var_0.playerbeton == var_4 )
            var_5 = var_0.amount + 1;
        else
            var_5 = 1;

        if ( var_5 > var_0.owner.plundercount )
        {
            betchangefail( var_0 );
            continue;
        }

        var_0.amount = var_5;
        var_0.playerbeton = var_4;
        updatebethud( var_0 );
    }
}

notifyonplayercommandbetting( var_0, var_1, var_2 )
{
    var_0 notifyonplayercommand( var_1, var_2 );
    self waittill( "end_betting" );

    if ( isdefined( var_0 ) )
        var_0 notifyonplayercommandremove( var_1, var_2 );
}

betchangefail( var_0 )
{
    var_0.owner playlocalsound( "br_pickup_deny" );
    var_0.hudavailable thread scripts\mp\hud::fontpulse( var_0.owner );
}

updatebethud( var_0 )
{
    var_1 = 100;
    var_0.hudavailable setvalue( ( var_0.owner.plundercount - var_0.amount ) * var_1 );

    if ( var_0.playerbeton == -1 )
    {
        var_0.ph_checkforovertime.label = &"MP_GULAG_BETTING/BET_CHANGE_LEFT";
        var_0.ph_endgame.label = &"MP_GULAG_BETTING/BET_CHANGE_RIGHT";
        var_0.ph_loadouts.alpha = 0.0;
        var_0.petrograd_lead_model setvalue( 0 );
        var_0.petwatchtype setvalue( 0 );
        var_0.petrograd_lead_model.alpha = 0.0;
        var_0.petwatchtype.alpha = 0.0;
    }
    else if ( var_0.playerbeton == var_0.updatearenaomnvardata )
    {
        var_0.ph_checkforovertime.label = &"MP_GULAG_BETTING/BET_INCREASE_LEFT";
        var_0.ph_endgame.label = &"MP_GULAG_BETTING/BET_CHANGE_RIGHT";
        var_0.ph_loadouts.alpha = 1.0;
        var_0.petrograd_lead_model setvalue( var_0.amount * var_1 );
        var_0.petrograd_lead_model.alpha = 1.0;
        var_0.petwatchtype.alpha = 0.0;
    }
    else if ( var_0.playerbeton == var_0.usbvm )
    {
        var_0.ph_checkforovertime.label = &"MP_GULAG_BETTING/BET_CHANGE_LEFT";
        var_0.ph_endgame.label = &"MP_GULAG_BETTING/BET_INCREASE_RIGHT";
        var_0.ph_loadouts.alpha = 1.0;
        var_0.petwatchtype setvalue( var_0.amount * var_1 );
        var_0.petwatchtype.alpha = 1.0;
        var_0.petrograd_lead_model.alpha = 0.0;
    }
}

cleanupbethud( var_0, var_1 )
{
    var_0 notify( "cleanUpBetHud" );

    if ( isdefined( var_1 ) )
    {
        var_0 endon( "cleanUpBetHud" );
        wait( var_1 );
    }

    var_2 = [ var_0.ph_checkforovertime, var_0.ph_endgame, var_0.petrograd_lead_model, var_0.petwatchtype, var_0.phonesringing_code, var_0.phonesringing_singlemorse, var_0.phoneisringing, var_0.phoneplayring, var_0.phonemorsesinglescriptableused, var_0.phonesfx, var_0.hudavailable, var_0.ph_loadouts ];

    foreach ( var_4 in var_2 )
    {
        if ( isdefined( var_4 ) )
            var_4 destroy();
    }
}

watchbetbutton( var_0, var_1, var_2, var_3 )
{
    self endon( "end_betting" );

    for (;;)
    {
        var_1 waittill( var_2 );
        var_0 notify( "betPlaced", var_3 );
    }
}

endbetting( var_0, var_1 )
{
    if ( !isdefined( var_1 ) || !istrue( var_1.bettingopen ) )
        return;

    var_1 notify( "end_betting" );
    var_1.bettingopen = 0;

    foreach ( var_3 in var_1.bets )
    {
        var_4 = [ var_3.ph_loadouts, var_3.hudavailable, var_3.phonemorsesinglescriptableused, var_3.phoneisringing, var_3.phonesfx, var_3.phoneplayring, var_3.ph_checkforovertime, var_3.ph_endgame ];

        if ( var_3.playerbeton != -1 )
        {
            if ( var_3.playerbeton == var_3.updatearenaomnvardata )
            {
                var_4[var_4.size] = var_3.phonesringing_singlemorse;
                var_4[var_4.size] = var_3.ph_endgame;
                var_4[var_4.size] = var_3.petwatchtype;
            }
            else if ( var_3.playerbeton == var_3.usbvm )
            {
                var_4[var_4.size] = var_3.phonesringing_code;
                var_4[var_4.size] = var_3.ph_checkforovertime;
                var_4[var_4.size] = var_3.petrograd_lead_model;
            }
        }
        else
            cleanupbethud( var_3, 0.0 );

        foreach ( var_6 in var_4 )
        {
            if ( isdefined( var_6 ) )
                var_6 destroy();
        }
    }

    updateoutlines( var_0 );
}

payoutremainingbets( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        return;

    var_2 = -1;

    if ( isdefined( var_0 ) )
        var_2 = var_0.fighterindex;

    foreach ( var_4 in var_1.bets )
    {
        if ( var_4.playerbeton != -1 && isdefined( var_4.owner ) && !istrue( var_4.paidout ) )
        {
            var_5 = var_4.playerbeton == var_2;
            _completebet( var_1, var_4, var_5 );
        }

        thread cleanupbethud( var_4, 2.5 );
    }
}

_completebet( var_0, var_1, var_2 )
{
    var_3 = ( 0, 1, 0 );
    var_4 = ( 1, 0, 0 );
    var_1.paidout = 1;

    if ( var_2 )
    {
        var_1.owner scripts\mp\gametypes\br_plunder.gsc::playersetplundercount( var_1.owner.plundercount + var_1.amount );

        if ( var_1.playerbeton == var_1.updatearenaomnvardata )
        {
            var_1.phonesringing_code.color = var_3;
            var_1.phonesringing_code.label = &"MP_GULAG_BETTING/FIGHER_WINNER";
            var_1.petrograd_lead_model.color = var_3;
            var_1.petrograd_lead_model.label = &"MP_GULAG_BETTING/AMOUNT_WON";
            var_1.owner playlocalsound( "ammo_crate_use" );
            var_1.petrograd_lead_model thread scripts\mp\hud::fontpulse( var_1.owner );
        }
        else if ( var_1.playerbeton == var_1.usbvm )
        {
            var_1.phonesringing_singlemorse.color = var_3;
            var_1.phonesringing_singlemorse.label = &"MP_GULAG_BETTING/FIGHER_WINNER";
            var_1.petwatchtype.color = var_3;
            var_1.petwatchtype.label = &"MP_GULAG_BETTING/AMOUNT_WON";
            var_1.owner playlocalsound( "ammo_crate_use" );
            var_1.petwatchtype thread scripts\mp\hud::fontpulse( var_1.owner );
        }
    }
    else
    {
        if ( isalive( var_1.owner ) )
        {
            var_5 = var_1.owner.plundercount - var_1.amount;
            var_5 = int( max( 0, var_5 ) );
            var_1.owner scripts\mp\gametypes\br_plunder.gsc::playersetplundercount( var_5 );
        }

        if ( var_1.playerbeton == var_1.updatearenaomnvardata )
        {
            var_1.phonesringing_code.color = var_4;
            var_1.phonesringing_code.label = &"MP_GULAG_BETTING/FIGHER_LOSER";
            var_1.petrograd_lead_model.color = var_4;
            var_1.petrograd_lead_model.label = &"MP_GULAG_BETTING/AMOUNT_LOST";
            var_1.petrograd_lead_model thread scripts\mp\hud::fontpulse( var_1.owner );
        }
        else if ( var_1.playerbeton == var_1.usbvm )
        {
            var_1.phonesringing_singlemorse.color = var_4;
            var_1.phonesringing_singlemorse.label = &"MP_GULAG_BETTING/FIGHER_LOSER";
            var_1.petwatchtype.color = var_4;
            var_1.petwatchtype.label = &"MP_GULAG_BETTING/AMOUNT_LOST";
            var_1.petwatchtype thread scripts\mp\hud::fontpulse( var_1.owner );
        }
    }

    var_6 = var_0.fighters[var_1.playerbeton];

    if ( isdefined( var_6 ) )
        var_6 hudoutlinedisableforclient( var_1.owner );
}

getbettingplayers( var_0, var_1 )
{
    var_2 = var_0.jailedplayers;

    if ( level.gulag.betting > 1 )
    {
        foreach ( var_4 in var_1.fighters )
            var_2[var_2.size] = var_4;
    }

    return var_2;
}

payoutbet( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0 ) )
        return;

    foreach ( var_4 in var_0.bets )
    {
        if ( var_4.playerbeton == var_1.fighterindex && isdefined( var_4.owner ) && !istrue( var_4.paidout ) )
        {
            _completebet( var_0, var_4, var_2 );
            thread cleanupbethud( var_4, 2.5 );
        }
    }
}

rock_used( var_0 )
{
    var_1 = self.arena;
    var_0 scripts\engine\utility::waittill_notify_or_timeout( "missile_stuck", 4 );
    wait 2;

    if ( isdefined( var_0 ) )
        var_0 delete();

    if ( istrue( level.usegulag ) && level.gulag._id_12B83 )
        spawnrock( var_1 );
}

spawnrocks( var_0 )
{
    var_0.rocks = getentitylessscriptablearrayinradius( var_0.target, "targetname" );

    if ( var_0.rocks.size == 0 || !level.gulag._id_12B83 )
    {
        for ( var_1 = 0; var_1 < var_0.rocks.size; var_1++ )
        {
            var_2 = var_0.rocks[var_1];
            var_2 setscriptablepartstate( "brloot_rock", "hidden" );
        }

        return;
    }

    var_3 = 20;

    if ( var_0.rocks.size < var_3 )
        var_3 = var_0.rocks.size;

    var_0.rocks = scripts\engine\utility::array_randomize( var_0.rocks );
    var_0.rockcounter = var_3;
    var_4 = getdvarint( "scr_br_fc_rocks", 1 ) == 0;

    for ( var_1 = 0; var_1 < var_0.rocks.size; var_1++ )
    {
        var_2 = var_0.rocks[var_1];
        var_2.arena = var_0;

        if ( var_1 >= var_3 || var_4 )
            var_2 setscriptablepartstate( "brloot_rock", "hidden" );
    }
}

rockused( var_0, var_1, var_2, var_3, var_4 )
{
    if ( !isdefined( var_0 ) || !isdefined( var_3 ) )
        return;

    var_5 = getcompleteweaponname( "rock_mp" );

    if ( var_3 hasweapon( var_5 ) && var_3 getammocount( var_5 ) > 0 )
        return;

    var_0 setscriptablepartstate( "brloot_rock", "hidden" );
    var_3 thread scripts\mp\gametypes\br_pickups.gsc::playerplaypickupanim();
    var_3 scripts\mp\equipment::giveequipment( "equip_rock", "primary" );
    var_3 playlocalsound( "br_rock_pickup" );
}

spawnrock( var_0 )
{
    if ( istrue( var_0.shutdown ) || var_0.rocks.size == 0 )
        return;

    var_1 = var_0.rocks[var_0.rockcounter];
    var_1 setscriptablepartstate( "brloot_rock", "visible" );
    var_0.rockcounter++;

    if ( var_0.rockcounter >= var_0.rocks.size )
        var_0.rockcounter = 0;
}

playertakeawayrock( var_0 )
{
    var_1 = getcompleteweaponname( "rock_mp" );

    if ( self hasweapon( var_1 ) )
    {
        self takeweapon( var_1 );
        self clearaccessory();

        if ( level.gulag._id_12B83 )
            spawnrock( var_0 );
    }
}

gettangentoncirclefrompoint( var_0, var_1, var_2 )
{
    var_3 = var_2[0] - var_0[0];
    var_4 = var_2[1] - var_0[1];
    var_5 = var_1;
    var_6 = var_3 * var_3;
    var_7 = var_4 * var_4;
    var_8 = var_5 * var_5;
    var_9 = var_6 + var_7 - var_8;
    var_10 = undefined;
    var_11 = 1;

    if ( var_9 > 0 )
    {
        var_12 = ( var_8 * var_3 - var_5 * var_4 * sqrt( var_6 + var_7 - var_8 ) ) / ( var_6 + var_7 );
        var_13 = ( var_8 * var_4 + var_5 * var_3 * sqrt( var_6 + var_7 - var_8 ) ) / ( var_6 + var_7 );
        var_10 = ( var_12, var_13, var_2[2] ) + ( var_0[0], var_0[1], 0 );
    }
    else
    {
        var_14 = vectornormalize( ( var_3, var_4, 0 ) );
        var_15 = var_0 + var_14 * var_1;
        var_10 = ( var_15[0], var_15[1], var_2[2] );
        var_11 = 0;
    }

    return [ var_10, var_11 ];
}

spawnac130()
{
    if ( !istrue( level.gulag.planerespawn ) )
        return;

    level waittill( "prematch_started" );

    if ( !istrue( level.br_infils_disabled ) )
        wait 10;

    var_0 = undefined;
    var_1 = undefined;

    if ( isdefined( level.br_ac130 ) )
        var_0 = level.br_ac130.startpt;
    else
    {
        var_2 = scripts\mp\gametypes\br_c130.gsc::createtestc130path();
        var_0 = var_2.startpt;
    }

    if ( isdefined( level.br_circle ) && isdefined( level.br_circle.safecircleent ) )
        var_1 = level.br_circle.safecircleent.origin[2];
    else
        var_1 = level.br_level.br_circleradii[0];

    var_1 = var_1 - 100;
    [var_4, var_5] = gettangentoncirclefrompoint( level.br_level.br_mapcenter, var_1, var_0 );
    var_6 = 0;
    var_7 = 0;

    if ( var_5 )
    {
        var_6 = distance( var_0, var_4 );
        var_7 = var_6 / scripts\mp\gametypes\br_c130.gsc::getc130speed();
    }

    var_8 = ( level.br_level.br_mapcenter[0], level.br_level.br_mapcenter[1], var_0[2] );
    level.gulag.ac130linker = spawn( "script_model", var_8 );
    level.gulag.ac130linker setmodel( "tag_origin" );
    level.gulag.ac130linker.radius = var_1;
    level.gulag.ac130 = scripts\mp\gametypes\br_c130.gsc::gunship_spawn( var_0, var_4, var_7, 0, ::ac130handlemovement );
    level.gulag.ac130 thread ac130setupanim();
    level.gulag.ac130.riders = [];

    if ( var_7 <= 0 )
    {
        var_9 = var_4 - level.br_level.br_mapcenter;
        var_10 = vectornormalize( ( var_9[0], var_9[1], 0 ) );
        var_11 = vectortoangles( var_10 );
        level.gulag.ac130 unlink();
        level.gulag.ac130.angles = ( 0, var_11[1] + 90, 0 );
        level.gulag.ac130.origin = var_4;
        level.gulag.ac130 thread ac130linkandspin();
    }
}

ac130setupanim()
{
    var_0 = spawnstruct();
    self.animstruct = var_0;
    var_0.movingc130 = self;
    scripts\mp\gametypes\br_infils.gsc::spawnplayerpositionparentent( var_0, self );
    scripts\mp\gametypes\br_infils.gsc::spawnplayerpositionent( var_0, "j_prop_1" );
    scripts\mp\gametypes\br_infils.gsc::playac130infilloopanims( var_0 );
}

ac130handlemovement( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "death" );
    self playloopsound( "br_ac130_lp" );

    if ( var_1 > 0 )
    {
        self moveto( var_0, var_1, 0, 0 );
        wait( var_1 );
    }

    thread ac130linkandspin();
}

ac130linkandspin()
{
    self notify( "ac130LinkAndSpin" );
    self endon( "ac130LinkAndSpin" );
    level.gulag.ac130linker endon( "death" );
    var_0 = 6.28318;
    var_1 = scripts\mp\gametypes\br_c130.gsc::getc130speed();
    var_2 = level.gulag.ac130linker.radius;
    var_3 = var_0 * var_2 / var_1;
    self linkto( level.gulag.ac130linker, "tag_origin" );

    if ( var_3 <= 0 )
        return;

    for (;;)
    {
        level.gulag.ac130linker rotateyaw( 360, var_3 );
        wait( var_3 );
    }
}

waittillallarenasshutdown()
{
    var_0 = level.gulag.arenas.size;

    if ( !istrue( level.gulag.multiarena ) )
        var_0 = 1;

    for (;;)
    {
        var_1 = 0;

        for ( var_2 = 0; var_2 < var_0; var_2++ )
        {
            var_3 = level.gulag.arenas[var_2];

            if ( !istrue( var_3.shutdown ) )
            {
                var_1 = 1;
                break;
            }
        }

        if ( !var_1 )
            return;

        waitframe();
    }
}

makeac130flyaway()
{
    if ( !istrue( level.gulag.planerespawn ) )
        return;

    var_0 = gettime();
    waittillallarenasshutdown();
    var_1 = gettime();
    wait( getdvarint( "scr_br_fc_respawn_wait", 15 ) );
    waittillframeend;

    foreach ( var_3 in level.gulag.ac130.riders )
    {
        if ( isdefined( var_3 ) )
        {
            var_3.jumptype = "solo";
            var_3 notify( "halo_kick_c130" );
        }
    }

    while ( level.gulag.ac130.riders.size > 0 )
        waitframe();

    var_5 = level.gulag.ac130.origin;
    var_6 = anglestoforward( level.gulag.ac130.angles );
    var_7 = level.br_level.br_circleradii[0] * 2;
    var_8 = var_5 + var_6 * var_7;
    var_8 = var_8 + var_6 * scripts\mp\gametypes\br_c130.gsc::getc130speed();
    var_9 = distance( var_5, var_8 );
    var_10 = var_9 / scripts\mp\gametypes\br_c130.gsc::getc130speed();
    level.gulag.ac130 notify( "ac130LinkAndSpin" );
    level.gulag.ac130 unlink();
    level.gulag.ac130 moveto( var_8, var_10, 0, 0 );
    wait( var_10 );
    scripts\mp\gametypes\br_public.gsc::cleanac130struct( level.gulag.ac130.animstruct );

    if ( isdefined( level.gulag.ac130 ) )
        level.gulag.ac130 delete();

    if ( isdefined( level.gulag.ac130linker ) )
        level.gulag.ac130linker delete();
}

transitioncircle( var_0, var_1 )
{
    if ( !istrue( level.gulag.planerespawn ) )
        return;

    if ( !isdefined( level.gulag.ac130 ) || !isdefined( level.gulag.ac130linker ) )
        return;

    var_2 = ( level.br_circle.safecircleent.origin[0], level.br_circle.safecircleent.origin[1], level.gulag.ac130linker.origin[2] );
    var_0 = var_0 - 100;

    if ( level.gulag.ac130linker.radius != var_0 )
    {
        var_3 = vectornormalize( level.gulag.ac130linker.origin - level.gulag.ac130.origin );
        var_4 = level.gulag.ac130.origin + var_3 * var_0;
        level.gulag.ac130 unlink();
        level.gulag.ac130linker.origin = var_4;
        level.gulag.ac130linker.radius = var_0;
        level.gulag.ac130linker dontinterpolate();
        level.gulag.ac130 thread ac130linkandspin();
    }

    level.gulag.ac130linker moveto( var_2, var_1 );
    wait( var_1 );
}

playersetupac130()
{
    self.infilanimindex = 1;
    self.isjumpmaster = 0;
    scripts\mp\gametypes\br_infils.gsc::playerlinktopositionent( level.gulag.ac130.animstruct );
    thread scripts\mp\gametypes\br_infils.gsc::playerplayinfilloopanim( level.gulag.ac130.animstruct );
    thread playerputinc130( level.gulag.ac130 );
    scripts\mp\gametypes\br_infils.gsc::playersetupcontrolsforinfil( 1 );
    thread playerac130cleanup();
    thread playerautodeployaftertime();
    thread playerspawnprotectionac130();
    level.gulag.ac130.riders[level.gulag.ac130.riders.size] = self;
}

playerputinc130( var_0 )
{
    self.angles = var_0.angles;
    thread listenjump( var_0 );
    thread scripts\mp\gametypes\br_c130.gsc::listenkick( var_0, 0 );
    scripts\mp\utility\game::_id_11EE1( self, 1 );
    self.br_infil_type = "c130";
    thread scripts\mp\gametypes\br_c130.gsc::orbitcam( var_0 );
}

listenjump( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "cancel_c130" );
    self endon( "br_jump" );
    self.redeployenabled = 0;
    scripts\engine\utility::waittill_either( "halo_jump_c130", "halo_jump_solo_c130" );
    self.jumptype = "solo";
    thread scripts\mp\gametypes\br_c130.gsc::leaveplane( var_0, 0, self getplayerangles(), 0 );
}

playerspawnprotectionac130()
{
    self endon( "death_or_disconnect" );
    self.plotarmor = 1;
    scripts\mp\gametypes\br_c130.gsc::setplayervarinrespawnc130( 1 );
    waittillplayerdoneskydivingac130( self );
    self.plotarmor = undefined;
    scripts\mp\gametypes\br_c130.gsc::setplayervarinrespawnc130( 0 );
}

waittillplayerdoneskydivingac130( var_0 )
{
    var_0 endon( "timeout_gulag_ac130" );
    thread _waittillplayerdoneskydivingac130timeout( var_0 );
    var_0 waittill( "infil_jump_done" );

    while ( !var_0 isparachuting() && !var_0 isonground() )
        waitframe();
}

_waittillplayerdoneskydivingac130timeout( var_0 )
{
    var_0 endon( "death_or_disconnect" );
    var_0 scripts\engine\utility::_id_12E54( getdvarint( "scr_br_fc_respawn_wait", 15 ), "halo_kick_c130", "halo_jump_solo_c130" );
    wait 15;
    var_0 notify( "timeout_gulag_ac130" );
}

playerautodeployaftertime()
{
    level endon( "game_ended" );
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "cancel_c130" );
    self endon( "br_jump" );
    wait( getdvarint( "scr_br_fc_respawn_wait", 15 ) );
    self.jumptype = "solo";
    self notify( "halo_kick_c130" );
}

playerac130cleanup()
{
    level endon( "game_ended" );
    scripts\engine\utility::_id_12E41( "disconnect", "death", "cancel_c130", "infil_jump_done" );

    if ( !isdefined( level.gulag.ac130.riders ) )
        return;

    if ( isdefined( self ) )
        level.gulag.ac130.riders = scripts\engine\utility::array_remove( level.gulag.ac130.riders, self );
    else
        level.gulag.ac130.riders = scripts\engine\utility::array_removeundefined( level.gulag.ac130.riders );
}

playergulagautowin( var_0, var_1, var_2, var_3 )
{
    var_4 = self;
    level endon( "game_ended" );
    var_4 endon( "disconnect" );
    var_4 notify( "gulag_auto_win" );

    if ( istrue( var_4.respawningfromtoken ) )
        return;

    [var_6, var_7] = var_4 update_ai_array( var_0, var_1, var_3 );
    var_4.respawningfromtoken = 1;
    var_8 = var_4 vehicle_collision_registerevent();
    var_9 = scripts\mp\gametypes\br_public.gsc::make_focus_fire_headicon() / 1000;
    var_10 = var_4 unsetreduceregendelayonkills( 0, var_9 );
    var_11 = var_4 updatex1stashhud( var_10 );
    self.forcespawnorigin = var_11;
    var_12 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "playerGulagAutoWinWait", var_0, var_1 );

    if ( !istrue( var_12 ) )
    {
        var_13 = 1.0;
        wait( var_13 );
    }

    if ( var_8 )
        var_4 scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );

    var_14 = 1.0;
    var_4 gulagfadetoblack( 1 );
    wait( var_14 );
    var_4 scripts\mp\hud_message::ending_viewing_players_setup();
    var_4 scripts\mp\playerlogic::spawnplayer( undefined, 0 );
    var_4 scripts\cp_mp\execution::_clearexecution();
    var_4 scripts\mp\gametypes\br_pickups.gsc::initplayer();
    var_4 scripts\mp\gametypes\br_spectate.gsc::unload_vehicles_on_weapons_free();
    var_4.respawningfromtoken = undefined;

    if ( !isdefined( var_0 ) && !istrue( var_2 ) )
        var_4 thread _id_1292D( 4 );

    var_4 gulagwinnerrespawn( 1, var_7, var_10, 1, var_11, undefined, var_6, var_3 );
}

update_ai_array( var_0, var_1, var_2, var_3 )
{
    var_4 = self;
    var_5 = var_4;
    var_6 = "token";

    if ( isdefined( var_0 ) )
    {
        var_7 = istrue( var_4.checkpointstruct ) && !isalive( var_4 ) && istrue( var_4._id_12ECA );
        var_5 = var_0;
        var_6 = "token_sponsored";

        if ( !istrue( var_3 ) )
        {
            if ( istrue( var_1 ) )
                var_8 = 6;
            else
                var_8 = 10;

            var_4 thread _id_1292D( var_8 );
        }
    }

    if ( isdefined( var_0 ) || istrue( var_2 ) )
    {
        var_4 scripts\mp\playerlogic::addtoalivecount();
        scripts\mp\gametypes\br.gsc::_id_12A58( var_4 );
    }

    scripts\mp\gametypes\br_analytics.gsc::choppergunner_watchownerexitaction( var_4, var_6 );
    scripts\mp\gametypes\br_analytics.gsc::circleradius( self, int( isdefined( var_0 ) ) );

    if ( istrue( var_5.hasrespawntoken ) )
        var_5 scripts\mp\gametypes\br_pickups.gsc::removerespawntoken();

    return [ var_5, var_6 ];
}

vehicle_collision_registerevent()
{
    var_0 = self;
    var_1 = istrue( var_0.wait_for_computer_power );

    if ( var_1 )
    {
        var_0 scripts\mp\utility\lower_message::setlowermessageomnvar( 76 );

        while ( istrue( var_0.wait_for_computer_power ) )
            waitframe();
    }

    return var_1;
}

gulaginitloadouts()
{
    level.gulag.recordedgameendstats = fnanimatedprop_setanim();
    fnanimatedprop_setup();
}

fnanimatedprop_setanim()
{
    var_0 = [];
    var_0["loadoutArchetype"] = "archetype_assault";
    var_0["loadoutPrimary"] = "iw8_fists";
    var_0["loadoutPrimaryAttachment"] = "none";
    var_0["loadoutPrimaryAttachment2"] = "none";
    var_0["loadoutPrimaryCamo"] = "none";
    var_0["loadoutPrimaryReticle"] = "none";
    var_0["loadoutSecondary"] = "none";
    var_0["loadoutSecondaryAttachment"] = "none";
    var_0["loadoutSecondaryAttachment2"] = "none";
    var_0["loadoutSecondaryCamo"] = "none";
    var_0["loadoutSecondaryReticle"] = "none";
    var_0["loadoutMeleeSlot"] = "none";
    var_0["loadoutEquipmentPrimary"] = "equip_rock";
    var_0["loadoutEquipmentSecondary"] = "none";
    var_0["loadoutStreakType"] = "assault";
    var_0["loadoutKillstreak1"] = "none";
    var_0["loadoutKillstreak2"] = "none";
    var_0["loadoutKillstreak3"] = "none";
    var_0["loadoutSuper"] = "super_br_extract";
    var_0["loadoutPerks"] = [ "specialty_null" ];
    var_0["loadoutGesture"] = "playerData";
    var_0["loadoutExecution"] = "none";
    return var_0;
}

fnanimatedprop_setup()
{
    level.mp_raid_patch = [];
    level.mp_runner_patch = dont_update_volume();

    if ( getdvar( "scr_br_gulag_loadout_override" ) != "" )
    {
        var_0 = strtok( getdvar( "scr_br_gulag_loadout_override" ), " " );
        var_1 = [];

        for ( var_2 = 0; var_2 < var_0.size; var_2++ )
            var_1[var_1.size] = int( var_0[var_1.size] );

        var_3 = var_1.size;

        for ( var_4 = 0; var_4 < var_3; var_4++ )
            level.mp_raid_patch[level.mp_raid_patch.size] = fn_spec_op_post_customization( var_1[var_4] );
    }
    else
    {
        var_3 = tablelookupgetnumcols( level.mp_runner_patch ) - 1;

        for ( var_4 = 0; var_4 < var_3; var_4++ )
            level.mp_raid_patch[level.mp_raid_patch.size] = fn_spec_op_post_customization( var_4 );
    }
}

dont_update_volume()
{
    var_0 = getdvarint( "scr_br_gulag_table_override", 0 );

    if ( var_0 )
        return "mp/classtable_br_gulag" + var_0 + ".csv";

    var_1 = randomint( 1337 ) + 1;

    if ( var_1 == 1337 )
        return "mp/classtable_br_gulag99.csv";

    var_2 = randomint( 100 ) + 1;

    if ( var_2 > 90 )
        return "mp/classtable_br_gulag4.csv";
    else if ( var_2 > 65 )
        return "mp/classtable_br_gulag2.csv";
    else if ( var_2 > 40 )
        return "mp/classtable_br_gulag3.csv";
    else
        return "mp/classtable_br_gulag1.csv";

    return "mp/classtable_br_gulag1.csv";
}

fn_spec_op_post_customization( var_0 )
{
    var_1["loadoutArchetype"] = "archetype_assault";
    var_1["loadoutPrimary"] = tablelookup( level.mp_runner_patch, 0, "loadoutPrimary", var_0 + 1 );
    var_1["loadoutPrimaryAttachment"] = tablelookup( level.mp_runner_patch, 0, "loadoutPrimaryAttachment1", var_0 + 1 );
    var_1["loadoutPrimaryAttachment2"] = tablelookup( level.mp_runner_patch, 0, "loadoutPrimaryAttachment2", var_0 + 1 );
    var_1["loadoutPrimaryAttachment3"] = tablelookup( level.mp_runner_patch, 0, "loadoutPrimaryAttachment3", var_0 + 1 );
    var_1["loadoutPrimaryAttachment4"] = tablelookup( level.mp_runner_patch, 0, "loadoutPrimaryAttachment4", var_0 + 1 );
    var_1["loadoutPrimaryAttachment5"] = tablelookup( level.mp_runner_patch, 0, "loadoutPrimaryAttachment5", var_0 + 1 );
    var_1["loadoutPrimaryCamo"] = tablelookup( level.mp_runner_patch, 0, "loadoutPrimaryCamo", var_0 + 1 );
    var_1["loadoutPrimaryReticle"] = tablelookup( level.mp_runner_patch, 0, "loadoutPrimaryReticle", var_0 + 1 );
    var_1["loadoutSecondary"] = tablelookup( level.mp_runner_patch, 0, "loadoutSecondary", var_0 + 1 );
    var_1["loadoutSecondaryAttachment"] = tablelookup( level.mp_runner_patch, 0, "loadoutSecondaryAttachment1", var_0 + 1 );
    var_1["loadoutSecondaryAttachment2"] = tablelookup( level.mp_runner_patch, 0, "loadoutSecondaryAttachment2", var_0 + 1 );
    var_1["loadoutSecondaryAttachment3"] = tablelookup( level.mp_runner_patch, 0, "loadoutSecondaryAttachment3", var_0 + 1 );
    var_1["loadoutSecondaryAttachment4"] = tablelookup( level.mp_runner_patch, 0, "loadoutSecondaryAttachment4", var_0 + 1 );
    var_1["loadoutSecondaryAttachment5"] = tablelookup( level.mp_runner_patch, 0, "loadoutSecondaryAttachment5", var_0 + 1 );
    var_1["loadoutSecondaryCamo"] = tablelookup( level.mp_runner_patch, 0, "loadoutSecondaryCamo", var_0 + 1 );
    var_1["loadoutSecondaryReticle"] = tablelookup( level.mp_runner_patch, 0, "loadoutSecondaryReticle", var_0 + 1 );
    var_1["loadoutMeleeSlot"] = "none";
    var_1["loadoutEquipmentPrimary"] = tablelookup( level.mp_runner_patch, 0, "loadoutEquipmentPrimary", var_0 + 1 );
    var_1["loadoutEquipmentSecondary"] = tablelookup( level.mp_runner_patch, 0, "loadoutEquipmentSecondary", var_0 + 1 );
    var_1["loadoutStreakType"] = "assault";
    var_1["loadoutKillstreak1"] = "none";
    var_1["loadoutKillstreak2"] = "none";
    var_1["loadoutKillstreak3"] = "none";
    var_1["loadoutSuper"] = "none";
    var_1["loadoutPerks"] = [ tablelookup( level.mp_runner_patch, 0, "loadoutPerk1", var_0 + 1 ), tablelookup( level.mp_runner_patch, 0, "loadoutPerk2", var_0 + 1 ), tablelookup( level.mp_runner_patch, 0, "loadoutPerk3", var_0 + 1 ), tablelookup( level.mp_runner_patch, 0, "loadoutExtraPerk1", var_0 + 1 ), tablelookup( level.mp_runner_patch, 0, "loadoutExtraPerk2", var_0 + 1 ), tablelookup( level.mp_runner_patch, 0, "loadoutExtraPerk3", var_0 + 1 ) ];
    var_1["loadoutGesture"] = "playerData";
    var_1["tableColumn"] = var_0;
    return var_1;
}

playergivearenaloadout( var_0, var_1 )
{
    if ( getdvarint( "scr_br_fc_loadouts", 1 ) == 0 )
        return;

    self.pers["gamemodeLoadout"] = level.mp_raid_patch[var_1];
    disablespawncamera( var_1 );
    self.class = "gamemode";
    self.prevweaponobj = undefined;
    var_2 = scripts\mp\class::loadout_getclassstruct();
    var_2 = scripts\mp\class::loadout_updateclass( var_2, "gamemode" );
    scripts\mp\class::preloadandqueueclassstruct( var_2, 1, 1 );
    scripts\mp\class::giveloadout( self.team, "gamemode", 0, 0 );
    self givestartammo( var_2.loadoutprimaryobject );

    if ( isdefined( var_2.loadoutsecondaryobject ) )
        self givestartammo( var_2.loadoutsecondaryobject );

    self.mp_port2_gw_patch = level.mp_raid_patch[var_1]["tableColumn"];
    useshouldsucceedcallback( var_0, "loadoutRow", self.mp_port2_gw_patch );
}

disablespawncamera( var_0 )
{
    if ( getdvarint( "scr_br_alt_mode_gg", 0 ) )
    {
        switch ( var_0 )
        {
            case 0:
                var_1 = "iw8_pi_decho";
                break;
            case 1:
                var_1 = "iw8_pi_cpapa";
                break;
            case 2:
                var_1 = "iw8_pi_decho";
                break;
            case 3:
                var_1 = "iw8_pi_cpapa";
                break;
            case 4:
                var_1 = "iw8_pi_decho";
                break;
            case 5:
                var_1 = "iw8_pi_cpapa";
                break;
            case 6:
                var_1 = "iw8_pi_decho";
                break;
            case 7:
                var_1 = "iw8_pi_cpapa";
                break;
            case 8:
                var_1 = "iw8_pi_decho";
                break;
            case 9:
            default:
                var_1 = "iw8_pi_cpapa";
        }

        self.pers["gamemodeLoadout"]["loadoutPrimary"] = var_1;
        self.pers["gamemodeLoadout"]["loadoutPrimaryAttachment"] = "none";
        self.pers["gamemodeLoadout"]["loadoutPrimaryAttachment2"] = "none";
        self.pers["gamemodeLoadout"]["loadoutPrimaryAttachment3"] = "none";
        self.pers["gamemodeLoadout"]["loadoutPrimaryAttachment4"] = "none";
        self.pers["gamemodeLoadout"]["loadoutPrimaryAttachment5"] = "none";
        self.pers["gamemodeLoadout"]["loadoutSecondary"] = "none";
        self.pers["gamemodeLoadout"]["loadoutSecondaryAttachment"] = "none";
        self.pers["gamemodeLoadout"]["loadoutSecondaryAttachment2"] = "none";
        self.pers["gamemodeLoadout"]["loadoutSecondaryAttachment3"] = "none";
        self.pers["gamemodeLoadout"]["loadoutSecondaryAttachment4"] = "none";
        self.pers["gamemodeLoadout"]["loadoutSecondaryAttachment5"] = "none";
        self.pers["gamemodeLoadout"]["loadoutPerks"] = [ "specialty_null" ];
    }
}

getloadoutindex()
{
    if ( getdvarint( "scr_br_fc_loadouts", 1 ) == 0 )
        return;

    var_0 = getdvarint( "scr_br_fc_loadoutOverride", -1 );

    if ( var_0 > -1 && var_0 < level.mp_raid_patch.size )
        return var_0;

    if ( getdvar( "scr_br_gulag_loadout_override" ) != "" )
    {
        if ( !isdefined( level.mp_port2_gw_patch ) || level.mp_port2_gw_patch >= level.mp_raid_patch.size )
            level.mp_port2_gw_patch = 0;

        var_1 = level.mp_port2_gw_patch;
        level.mp_port2_gw_patch = level.mp_port2_gw_patch + 1;
    }
    else
        var_1 = randomint( level.mp_raid_patch.size );

    return var_1;
}

_id_12D44( var_0 )
{
    var_0 endon( "fight_over" );
    var_0 endon( "matchEnded" );
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    var_1 = level.gulag.timelimit;
    level.gulag.timelimit = 180;
    iprintln( "Loadout verification starting in 3 seconds." );
    wait 3.0;
    iprintln( "Verification start!" );

    for ( var_2 = 0; var_2 < level.mp_raid_patch.size; var_2++ )
    {
        iprintln( "Loadout: " + var_2 );
        playergivearenaloadout( var_0, var_2 );
        wait 5.0;
        scripts\cp_mp\utility\inventory_utility::_switchtoweapon( self.secondaryweapon );
        wait 4.0;
    }

    playergivearenaloadout( var_0, 0 );
    level.gulag.timelimit = var_1;
    iprintln( "Verification done!" );
}

_id_11F60( var_0 )
{
    var_1 = getdvarint( "scr_br_fc_flag_radius", 50 );
    var_0.handle_no_ammo_mun = spawnstruct();
    var_2 = getgroundposition( var_0.center, 1 );
    var_0.handle_no_ammo_mun.trigger = spawn( "trigger_radius", var_2, 0, int( var_1 ), int( level.checkpoint_fx_set ) );
    var_3 = scripts\mp\gametypes\obj_dom.gsc::setupobjective( var_0.handle_no_ammo_mun.trigger, "neutral", undefined, 1 );
    var_3.onuse = ::arenaflag_onuse;
    var_3.onbeginuse = ::arenaflag_onusebegin;
    var_3.onenduse = ::arenaflag_onuseend;
    var_3.onuseupdate = ::arenaflag_onuseupdate;
    var_3.oncontested = ::arenaflag_oncontested;
    var_3.isarena = 1;
    var_3 scripts\mp\gameobjects::pinobjiconontriggertouch();
    var_3.id = "domFlag";
    var_3 scripts\mp\gameobjects::setcapturebehavior( "persistent" );
    var_3.scriptable delete();
    var_3.ignorestomp = 1;
    var_3 scripts\mp\gameobjects::requestid( 0, 1, undefined, 0, 0 );
    var_3.visibilitymanuallycontrolled = 1;
    var_3 bot_ctf_can_switch_to_defender( 0 );
    var_3 bot_ctf_enemy_team_flag_is_picked_up( var_0, 0 );
    var_3.arena = var_0;
    var_0.handle_no_ammo_mun.arenaflag = var_3;
}

handledropbags( var_0 )
{
    wait 1.0;

    if ( isdefined( var_0 ) && isdefined( var_0.handle_no_ammo_mun ) && isdefined( var_0.handle_no_ammo_mun.arenaflag ) && isdefined( var_0.handle_no_ammo_mun.arenaflag.flagmodel ) )
        return;
}

bot_ctf_can_switch_to_defender( var_0 )
{
    if ( var_0 )
    {
        scripts\mp\gameobjects::allowuse( "any" );
        self.trigger scripts\engine\utility::trigger_on();
    }
    else
    {
        scripts\mp\gameobjects::allowuse( "none" );
        self.trigger scripts\engine\utility::trigger_off();
        scripts\mp\gameobjects::resetcaptureprogress();
    }
}

bot_ctf_enemy_team_flag_is_picked_up( var_0, var_1, var_2, var_3 )
{
    self notify( "arenaFlag_setVisible" );

    if ( var_1 )
    {
        var_4 = "waypoint_captureneutral";

        if ( istrue( var_2 ) )
            var_4 = level.play_ai_taking_to_convoy_firsttime;

        thread bot_choose_defend_role( var_0 );
        thread scripts\mp\gameobjects::setobjectivestatusicons( var_4 );
        thread scripts\mp\gameobjects::setownerteam( "neutral" );
        thread scripts\mp\gametypes\obj_dom.gsc::updateflagstate( "idle", 0, "none" );
        self.flagmodel show();
        thread bot_ctf_get_node_chance( var_0, 1 );

        if ( !istrue( var_2 ) )
        {
            _id_11ED5( var_0, 1 );
            return;
        }
    }
    else
        thread bot_ctf_flag_is_home_of_team( var_0, var_2, var_3 );
}

bot_ctf_flag_is_home_of_team( var_0, var_1, var_2 )
{
    self endon( "arenaFlag_setVisible" );

    if ( !istrue( var_2 ) )
    {
        objective_setpinned( self.objidnum, 0 );
        wait 1;
    }

    thread bot_ctf_get_node_chance( var_0, 0 );
    thread bot_choose_attack_zone( var_2 );
    thread scripts\mp\gametypes\obj_dom.gsc::updateflagstate( "off", 0, "none" );
    self.flagmodel hide( 1 );

    if ( !istrue( var_1 ) )
    {
        _id_11ED5( var_0, 0 );
        _id_11ED6( var_0, 0 );
    }
}

bot_ctf_flag_picked_up_of_team( var_0, var_1 )
{
    var_1 endon( "death_or_disconnect" );

    if ( var_0 )
    {
        var_1 setclientomnvar( "ui_overtime_timer_show", 1 );
        objective_addclienttomask( self.objidnum, var_1 );
    }
    else
    {
        objective_unpinforclient( self.objidnum, var_1 );
        wait 1;
        var_1 setclientomnvar( "ui_overtime_timer_show", 0 );
        objective_removeclientfrommask( self.objidnum, var_1 );
    }

    thread bot_ctf_my_team_flag_is_picked_up( var_0, var_1 );
}

bot_clear_hq_zone( var_0, var_1 )
{
    thread bot_ctf_enemy_team_flag_is_picked_up( var_0, 1, 1 );
    wait( var_1 );
    thread bot_ctf_enemy_team_flag_is_picked_up( var_0, 0, 1, 1 );
}

bot_choose_defend_role( var_0 )
{
    objective_removeallfrommask( self.objidnum );

    foreach ( var_2 in var_0.jailedplayers )
        objective_addclienttomask( self.objidnum, var_2 );

    foreach ( var_2 in var_0.arenaplayers )
        objective_addclienttomask( self.objidnum, var_2 );

    objective_showtoplayersinmask( self.objidnum );
}

bot_choose_attack_zone( var_0 )
{
    objective_setshowprogress( self.objidnum, 0 );
    objective_removeallfrommask( self.objidnum );
    objective_showtoplayersinmask( self.objidnum );
}

bot_ctf_get_node_chance( var_0, var_1 )
{
    if ( var_1 )
    {
        if ( var_0.jailedplayers.size > 0 )
            self.flagmodel hudoutlineenableforclients( var_0.jailedplayers, "outline_nodepth_orange" );

        if ( var_0.arenaplayers.size > 0 )
            self.flagmodel hudoutlineenableforclients( var_0.arenaplayers, "outline_nodepth_orange" );
    }
    else
    {
        if ( var_0.jailedplayers.size > 0 )
            self.flagmodel hudoutlinedisableforclients( var_0.jailedplayers );

        if ( var_0.arenaplayers.size > 0 )
            self.flagmodel hudoutlinedisableforclients( var_0.arenaplayers );
    }
}

bot_ctf_my_team_flag_is_picked_up( var_0, var_1 )
{
    if ( var_0 )
        self.flagmodel hudoutlineenableforclient( var_1, "outline_nodepth_orange" );
    else
        self.flagmodel hudoutlinedisableforclient( var_1 );
}

arenaflag_onusebegin( var_0 )
{
    var_1 = getdvarint( "scr_br_fc_flag_capture_time", 3.0 );
    var_0.iscapturing = 1;
    var_2 = scripts\mp\gameobjects::getownerteam();

    if ( var_2 == "neutral" )
        var_0 setclientomnvar( "ui_objective_state", 1 );

    self.neutralizing = istrue( level.flagneutralization ) && var_2 != "neutral";

    if ( !istrue( self.neutralized ) )
        self.didstatusnotify = 0;

    var_3 = var_1;
    scripts\mp\gameobjects::setusetime( var_3 );

    if ( istrue( level.capturedecay ) )
        thread scripts\mp\gameobjects::useobjectdecay( var_0.team );

    if ( var_3 > 0 )
    {
        foreach ( var_5 in self.arena.arenaplayers )
        {
            if ( var_5 != var_0 && var_5.team != var_0.team )
            {
                self.prevownerteam = var_5.team;
                break;
            }
        }

        scripts\mp\gametypes\obj_dom.gsc::updateflagcapturestate( var_0.team );
        scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_taking", "waypoint_losing" );
    }
}

arenaflag_onuseupdate( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\mp\gameobjects::getownerteam();

    if ( var_1 > 0.05 && var_2 && !self.didstatusnotify )
        self.didstatusnotify = 1;
}

arenaflag_onuseend( var_0, var_1, var_2 )
{
    self.didstatusnotify = 0;

    if ( var_2 )
        scripts\mp\objidpoolmanager::objective_show_progress( self.objidnum, 0 );

    if ( isplayer( var_1 ) )
    {
        var_1.iscapturing = 0;
        var_1 setclientomnvar( "ui_objective_state", 0 );
        var_1.ui_dom_securing = undefined;
    }

    var_3 = scripts\mp\gameobjects::getownerteam();

    if ( var_3 == "neutral" )
    {
        scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_captureneutral" );
        thread scripts\mp\gametypes\obj_dom.gsc::updateflagstate( "idle", 0 );
    }
    else
    {
        scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_defend", "waypoint_capture" );
        thread scripts\mp\gametypes\obj_dom.gsc::updateflagstate( var_3, 0 );
    }

    if ( !var_2 )
        self.neutralized = 0;
}

bot_ctf_ai_director_update( var_0, var_1 )
{
    scripts\mp\gameobjects::setownerteam( var_0 );
    self notify( "capture", var_1 );
    self notify( "assault", var_1 );
    scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_defending", "waypoint_capture" );
    self.neutralized = 0;
    thread scripts\mp\gametypes\obj_dom.gsc::updateflagstate( var_0, 0, var_0 );

    if ( self.touchlist[var_0].size == 0 && isdefined( self.oldtouchlist ) )
        self.touchlist = self.oldtouchlist;

    foreach ( var_3 in self.arena.arenaplayers )
    {
        if ( var_3 != var_1 && var_3.team != var_0 && isdefined( self.assisttouchlist[var_3.team] ) )
        {
            self.assisttouchlist[var_3.team] = [];
            break;
        }
    }
}

arenaflag_onuse( var_0 )
{
    var_1 = var_0.team;
    self.capturetime = gettime();
    self.neutralized = 0;
    bot_ctf_ai_director_update( var_1, var_0 );

    if ( !self.neutralized )
    {
        foreach ( var_3 in self.arena.arenaplayers )
        {
            if ( isalive( var_3 ) && var_3.team != var_1 )
                var_3 thread mp_shipment_patch( self.arena );
        }

        thread handleendarena( self.arena );
        self.firstcapture = 0;
    }
}

arenaflag_oncontested()
{
    scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_contested" );
    scripts\mp\objidpoolmanager::objective_set_progress_team( self.objidnum, undefined );
    thread scripts\mp\gametypes\obj_dom.gsc::updateflagstate( "contested", 0 );
}

loot_setitemcount( var_0, var_1 )
{
    var_2 = 0;
    var_3 = 0;
    var_4 = "";

    switch ( var_0 )
    {
        case "playerArena0":
            [var_2, var_3, var_4] = [ 0, 8, "ui_br_gulag_players_1" ];
            var_1 = var_1 + 1;
            break;
        case "playerArena1":
            [var_2, var_3, var_4] = [ 8, 8, "ui_br_gulag_players_1" ];
            var_1 = var_1 + 1;
            break;
        case "playerJail0":
            [var_2, var_3, var_4] = [ 16, 8, "ui_br_gulag_players_1" ];
            var_1 = var_1 + 1;
            break;
        case "playerJail1":
            [var_2, var_3, var_4] = [ 24, 8, "ui_br_gulag_players_1" ];
            var_1 = var_1 + 1;
            break;
        case "loadoutRow":
            [var_2, var_3, var_4] = [ 0, 8, "ui_br_gulag_data" ];
            var_1 = var_1 + 1;
            break;
        case "playerHealth0":
            [var_2, var_3, var_4] = [ 8, 8, "ui_br_gulag_data" ];
            break;
        case "playerHealth1":
            [var_2, var_3, var_4] = [ 16, 8, "ui_br_gulag_data" ];
            break;
        default:
            break;
    }

    return [ var_2, var_3, var_4, var_1 ];
}

target_remap_key_value_pairs( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = int( pow( 2, var_4 ) ) - 1;
    var_6 = ( var_2 & var_5 ) << var_3;
    var_7 = ~( var_5 << var_3 );
    var_8 = var_0.steam_damage_player[var_1];
    var_9 = var_8 & var_7;
    var_10 = var_9 + var_6;
    var_0.steam_damage_player[var_1] = var_10;
}

_id_11E81( var_0, var_1, var_2 )
{
    [var_4, var_5, var_6, var_2] = loot_setitemcount( var_1, var_2 );

    if ( var_6 == "" )
        return;

    target_remap_key_value_pairs( var_0, var_6, var_2, var_4, var_5 );
}

_id_11E83( var_0, var_1, var_2 )
{
    var_3 = -1;

    if ( isdefined( var_2 ) )
        var_3 = var_2 getentitynumber();

    _id_11E81( var_0, var_1, var_3 );
}

_id_11E82( var_0, var_1, var_2 )
{
    var_3 = 0;

    if ( isdefined( var_2 ) )
        var_3 = var_2.health;

    _id_11E81( var_0, var_1, var_3 );
}

_id_12AE2( var_0 )
{
    var_0.steam_damage_player["ui_br_gulag_players_1"] = 0;

    for ( var_1 = 0; var_1 < level.gulag.maxplayers; var_1++ )
    {
        var_2 = var_0.arenaplayers[var_1];
        _id_11E83( var_0, "playerArena" + var_1, var_2 );
    }

    var_3 = var_0.matches[0];

    if ( !isdefined( var_3 ) )
        var_3 = [];

    _id_11E83( var_0, "playerJail0", var_3[0] );
    _id_11E83( var_0, "playerJail1", var_3[1] );
    var_4 = scripts\engine\utility::array_combine( var_0.jailedplayers, var_0.arenaplayers );

    foreach ( var_2 in var_4 )
    {
        var_2 setclientomnvar( "ui_br_gulag_players_1", var_0.steam_damage_player["ui_br_gulag_players_1"] );

        foreach ( var_11, var_7 in var_0.matches )
        {
            if ( isdefined( var_7[0] ) && var_2 == var_7[0] || isdefined( var_7[1] ) && var_2 == var_7[1] )
            {
                var_8 = !quickdropcache( var_0, var_2 );
                var_9 = var_11 + 1;
                var_10 = var_8 + ( var_9 << 1 );
                var_2 setclientomnvar( "ui_br_gulag_queue_position", var_10 );
                break;
            }
        }
    }
}

usefailvehiclemsg( var_0 )
{
    self setclientomnvar( "ui_br_gulag_data", var_0.steam_damage_player["ui_br_gulag_data"] );
}

_id_12AE1( var_0 )
{
    _id_11A70( var_0 );

    for ( var_1 = 0; var_1 < level.gulag.maxplayers; var_1++ )
    {
        var_2 = var_0.arenaplayers[var_1];
        _id_11E82( var_0, "playerHealth" + var_1, var_2 );
    }

    foreach ( var_2 in var_0.jailedplayers )
        var_2 usefailvehiclemsg( var_0 );

    foreach ( var_2 in var_0.arenaplayers )
        var_2 usedprops( var_0 );
}

_id_11A70( var_0 )
{
    var_0.steam_damage_player["ui_br_gulag_data"] = 0;
}

usedprops( var_0 )
{
    if ( !isdefined( self.mp_port2_gw_patch ) )
        self setclientomnvar( "ui_br_gulag_data", var_0.steam_damage_player["ui_br_gulag_data"] );
    else
        useshouldsucceedcallback( var_0, "loadoutRow", self.mp_port2_gw_patch );
}

useshouldsucceedcallback( var_0, var_1, var_2 )
{
    [var_4, var_5, var_6, var_2] = loot_setitemcount( var_1, var_2 );

    if ( var_6 == "" )
        return;

    updatehistoryhud( var_0, var_6, var_2, var_4, var_5 );
}

updatehistoryhud( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = int( pow( 2, var_4 ) ) - 1;
    var_6 = ( var_2 & var_5 ) << var_3;
    var_7 = ~( var_5 << var_3 );
    var_8 = var_0.steam_damage_player[var_1];
    var_9 = var_8 & var_7;
    var_10 = var_9 + var_6;
    self setclientomnvar( var_1, var_10 );
}

_id_12B1A( var_0 )
{
    _id_12AE2( var_0 );
    _id_12AE1( var_0 );
}

unload_after_timeout( var_0 )
{
    var_1 = getarraykeys( var_0.steam_damage_player );

    foreach ( var_3 in var_1 )
        self setclientomnvar( var_3, 0 );

    self setclientomnvar( "ui_overtime_timer", 0 );
    self setclientomnvar( "ui_overtime_timer_show", 0 );
}

_id_11ED6( var_0, var_1 )
{
    foreach ( var_3 in var_0.arenaplayers )
        var_3 setclientomnvar( "ui_overtime_timer", var_1 );

    foreach ( var_3 in var_0.jailedplayers )
        var_3 setclientomnvar( "ui_overtime_timer", var_1 );
}

_id_11ED5( var_0, var_1 )
{
    foreach ( var_3 in var_0.arenaplayers )
        var_3 setclientomnvar( "ui_overtime_timer_show", var_1 );

    foreach ( var_3 in var_0.jailedplayers )
        var_3 setclientomnvar( "ui_overtime_timer_show", var_1 );
}

update_bomb_vest_controller( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "gulag_end" );
    var_1 = "playerHealth0";

    if ( var_0.arenaplayers[0] != self )
        var_1 = "playerHealth1";

    for (;;)
    {
        _id_12AE1( var_0 );

        if ( self.health <= 0 )
            return;

        scripts\engine\utility::_id_12E44( "damage", "force_regeneration", "removeAdrenaline", "healed", "healhRegenThink", "vampirism", "spawned_player" );
    }
}

updatex1finhud()
{
    if ( level.gulag.plunderdelta && !isbot( self ) )
    {
        var_0 = low_on_ammo();
        self preloadcinematicforplayer( var_0 );
    }
}

updatelootleadercirclesize()
{
    if ( level.gulag.plunderdelta && !isbot( self ) )
    {
        self setclientomnvar( "ui_br_bink_overlay_state", 1 );
        self setplayermusicstate( "br_gulag_intro" );

        if ( scripts\mp\gametypes\br_public.gsc::processvoqueue() )
            self setsoundsubmix( "iw8_br_gulag_tutorial", 0.5 );
        else
            self setsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 0.5 );

        var_0 = low_on_ammo();
        self playcinematicforplayer( var_0 );
        self.vehicle_damage_setstate = 1;
    }
    else
        gulagloadingtext();
}

v_start_pos()
{
    self setclientomnvar( "ui_br_bink_overlay_state", 2 );
}

vehicle_collision_takedamage( var_0 )
{
    if ( level.gulag.plunderdelta && !isbot( self ) && !self isplayerheadless() )
    {
        self freezecontrols( 1 );
        addincoming( var_0 );
        self freezecontrols( 0 );
        self setclientomnvar( "ui_br_bink_overlay_state", 5 );
        self stopcinematicforplayer();
        self.vehicle_damage_setstate = undefined;
    }
}

addincoming( var_0 )
{
    self endon( "bink_complete" );
    var_1 = lossendgame();

    while ( gettime() - var_0 < var_1 && !self crouchbuttonpressed() && !self usebuttonpressed() && !self jumpbuttonpressed() )
        waitframe();
}

uniquelootcallbacks( var_0, var_1 )
{
    if ( var_0 == "bink_complete" )
        self notify( "bink_complete" );
}

update_player_about_remaining_enemies()
{
    if ( scripts\mp\utility\game::getgametype() != "br" )
        return 0;

    var_0 = self getclientomnvar( "ui_br_bink_overlay_state" );

    if ( var_0 != 0 && var_0 != 6 )
        return 1;

    return 0;
}

update_operator_west_char_loc()
{
    var_0 = self getclientomnvar( "ui_br_bink_overlay_state" );
    return var_0 == 7;
}

uniquelootitemid()
{
    self setclientomnvar( "ui_br_bink_overlay_state", 7 );
}

uniquelootitemlookup( var_0 )
{
    self endon( "disconnect" );

    if ( update_player_about_remaining_enemies() )
    {
        if ( isdefined( var_0 ) )
            wait( var_0 );

        self setclientomnvar( "ui_br_bink_overlay_state", 6 );
        wait 1;
        self setclientomnvar( "ui_br_bink_overlay_state", 0 );
    }
}

low_on_ammo()
{
    if ( scripts\cp_mp\utility\game_utility::radialairstrike() )
    {
        if ( level.set_relic_no_ammo_mun == "pm" )
            return "rebirth_pm_gulag_intro";
        else
            return "rebirth_gulag_intro";
    }
    else if ( istrue( level.gulag.stack_patch_waittill_root ) )
        return "mp_donetsk_gulag_intro2";
    else
        return "mp_donetsk_gulag_intro";
}

lossendgame()
{
    if ( istrue( level.gulag.stack_patch_waittill_root ) )
        return 35000;
    else
        return 17000;
}

_id_11F55( var_0, var_1 )
{
    if ( !level.gulag._id_12B6E )
        return;

    if ( !isdefined( var_1.target ) )
        return;

    var_2 = getentarray( var_1.target, "targetname" );

    if ( var_2.size > 1 )
        level.gulag._id_12B6E = 0;
    else
    {
        var_1.door = getent( var_1.target, "targetname" );

        if ( isdefined( var_1.door ) )
        {
            var_1.door.closed = 1;
            var_3 = getent( var_1.door.target, "targetname" );
            var_3 delete();
            var_4 = anglestoforward( var_1.door.angles );
            var_1.door.enemy_targets_headshot = var_1.door.origin;
            var_1.door.table_getaddblueprintattachments = var_1.door.origin + var_4 * 60;
        }
    }
}

_id_12B6E( var_0 )
{
    return level.gulag._id_12B6E && var_0.dialog_monitor_getoffground.size > 0;
}

_id_11A7E()
{
    var_0 = self;
    var_0.fastcrouchspeedmod = 0;
    var_0 scripts\mp\weapons::updatemovespeedscale();
}

#using_animtree("script_model");

umbra( var_0, var_1 )
{
    if ( !level.gulag.dialog_mount_nag_watcher )
        return;

    self endon( "playerChairBreakoutCleanup" );
    var_2 = var_1.chair;
    self playerhide();
    self showtoplayer( self );
    var_3 = spawn( "script_arms", var_2.origin, 0, 0, self );
    var_3.angles = var_2.angles;
    var_3 useanimtree( #animtree );
    var_3 hide();
    var_3 showtoplayer( self );
    self.usbserver = var_3;
    var_4 = spawn( "script_model", var_2.origin );
    var_4.angles = var_2.angles;
    var_4 setmodel( "misc_vm_gulag_cuffs" );
    var_4 useanimtree( #animtree );
    var_4 hide();
    var_4 showtoplayer( self );
    self.straps = var_4;
    self setorigin( var_2.origin );
    self playerlinktoabsolute( var_3, "tag_player" );
    underbridge_reinforce_enemy_monitor( 1 );
    thread unfreeze_controls_after_spawn( var_3, var_4 );
    self playanimscriptsceneevent( "scripted_scene", "gulag_chair_breakout_start" );
    var_3 animscripted( "chair", var_2.origin, var_2.angles, %sdr_mp_gulag_breakout_wz_2_start_plr );
    var_3 scriptmodelplayanim( "sdr_mp_gulag_breakout_wz_2_start_plr" );
    var_4 animscripted( "chair", var_2.origin, var_2.angles, %sdr_mp_gulag_breakout_wz_2_start_straps );
    var_4 scriptmodelplayanim( "sdr_mp_gulag_breakout_wz_2_start_straps" );
    var_3 waittillmatch( "chair", "end" );
    thread unfreezeplayercontrols();
    self playerlinkto( var_3, "tag_player", 0, 30, 30, 45, 60, 0 );
    var_3 hide();
    var_3 showtoplayer( self );
    updatec4vehiclemultkill( var_3, var_4, var_2 );
    self playanimscriptsceneevent( "scripted_scene", "gulag_chair_breakout_exit" );
    var_3 animscripted( "chair", var_2.origin, var_2.angles, %sdr_mp_gulag_breakout_wz_2_exit_plr );
    var_3 scriptmodelplayanim( "sdr_mp_gulag_breakout_wz_2_exit_plr" );
    var_4 animscripted( "chair", var_2.origin, var_2.angles, %sdr_mp_gulag_breakout_wz_2_exit_straps );
    var_4 scriptmodelplayanim( "sdr_mp_gulag_breakout_wz_2_exit_straps" );
    var_3 waittillmatch( "chair", "end" );
    thread unblockclasschange( var_3, var_4 );
}

updatec4vehiclemultkill( var_0, var_1, var_2 )
{
    self endon( "playerChairBreakoutCleanup" );
    self endon( "chairBreakout" );

    for (;;)
    {
        self playanimscriptsceneevent( "scripted_scene", "gulag_chair_breakout_loop" );
        var_0 animscripted( "chair", var_2.origin, var_2.angles, %sdr_mp_gulag_breakout_wz_2_loop_plr );
        var_0 scriptmodelplayanim( "sdr_mp_gulag_breakout_wz_2_loop_plr" );
        var_1 animscripted( "chair", var_2.origin, var_2.angles, %sdr_mp_gulag_breakout_wz_2_loop_straps );
        var_1 scriptmodelplayanim( "sdr_mp_gulag_breakout_wz_2_loop_straps" );
        var_0 waittillmatch( "chair", "end" );
    }
}

unfreezeplayercontrols()
{
    self endon( "playerChairBreakoutCleanup" );
    self endon( "disconnect" );
    wait 1;

    for (;;)
    {
        if ( isdefined( self ) )
        {
            var_0 = self getnormalizedmovement();

            if ( self usebuttonpressed() || self jumpbuttonpressed() || var_0[0] > 0.5 || var_0[1] > 0.5 )
                break;
        }

        waitframe();
    }

    self playerlinktoabsolute( self.usbserver, "tag_player" );
    self.usbserver hide();
    self.usbserver showtoplayer( self );
    self.straps hide();
    self.straps showtoplayer( self );
    self notify( "chairBreakout" );
}

unicornpoints()
{
    unblockclasschange( self.usbserver, self.straps );
}

unblockclasschange( var_0, var_1 )
{
    if ( !level.gulag.dialog_mount_nag_watcher )
        return;

    if ( !isdefined( self.usbserver ) )
        return;

    if ( isdefined( self ) )
    {
        self unlink();
        self stopanimscriptsceneevent();
        self playershow( 1 );
        underbridge_reinforce_enemy_monitor( 0 );
        self.usbserver = undefined;
        self.straps = undefined;
        self notify( "playerChairBreakoutCleanup" );
    }

    var_0 delete();
    var_1 delete();
}

unfreeze_controls_after_spawn( var_0, var_1 )
{
    self endon( "playerChairBreakoutCleanup" );
    self waittill( "death_or_disconnect" );
    thread unblockclasschange( var_0, var_1 );
}

underbridge_reinforce_enemy_monitor( var_0 )
{
    if ( var_0 )
        self disableweapons();
    else
        self enableweapons();

    var_1 = !var_0;
    self allowmelee( var_1 );
    self allowfire( var_1 );
}

matchstartextractsitedelay( var_0 )
{
    if ( isdefined( var_0.dialog_play_shieldstow ) )
    {
        var_0.dialog_play_shieldstow++;
        var_0.dialog_play_shieldstow = var_0.dialog_play_shieldstow % var_0.dialog_reachnextcheckpoint.size;
    }
    else
        var_0.dialog_play_shieldstow = 0;

    var_1 = var_0.dialog_reachnextcheckpoint[var_0.dialog_play_shieldstow];
    return var_1;
}

_id_11F96()
{
    if ( !istrue( level.gulag._id_12D9E ) )
        return;

    level.gulag.extractquest_alwaysallowdeposit = [];
    var_0 = 0;
    level.gulag.extractquest_alwaysallowdeposit[var_0] = spawnstruct();
    level.gulag.extractquest_alwaysallowdeposit[var_0].battle_tracks_stopbattletracksforplayer = "dx_brm_rm1_gulag_muffled_chatter_";
    level.gulag.extractquest_alwaysallowdeposit[var_0].aliases = [ 10, 20, 30, 40 ];
    level.gulag.extractquest_alwaysallowdeposit[var_0].get_type_to_drop = [ 1, 1, 1, 0 ];
    var_0++;
    level.gulag.extractquest_alwaysallowdeposit[var_0] = spawnstruct();
    level.gulag.extractquest_alwaysallowdeposit[var_0].battle_tracks_stopbattletracksforplayer = "dx_brm_rm1_gulag_muffled_chatter_";
    level.gulag.extractquest_alwaysallowdeposit[var_0].aliases = [ 90, 100, 110 ];
    level.gulag.extractquest_alwaysallowdeposit[var_0].get_type_to_drop = [ 1, 1, 0 ];
    var_0++;
    level.gulag.extractquest_alwaysallowdeposit[var_0] = spawnstruct();
    level.gulag.extractquest_alwaysallowdeposit[var_0].battle_tracks_stopbattletracksforplayer = "dx_brm_rm2_gulag_announcement_";
    level.gulag.extractquest_alwaysallowdeposit[var_0].aliases = [ 10 ];
    level.gulag.extractquest_alwaysallowdeposit[var_0].get_type_to_drop = [ 0 ];
    var_0++;
    level.gulag.extractquest_alwaysallowdeposit[var_0] = spawnstruct();
    level.gulag.extractquest_alwaysallowdeposit[var_0].battle_tracks_stopbattletracksforplayer = "dx_brm_rm2_gulag_announcement_";
    level.gulag.extractquest_alwaysallowdeposit[var_0].aliases = [ 20 ];
    level.gulag.extractquest_alwaysallowdeposit[var_0].get_type_to_drop = [ 0 ];
    var_0++;
    level.gulag.extractquest_alwaysallowdeposit[var_0] = spawnstruct();
    level.gulag.extractquest_alwaysallowdeposit[var_0].battle_tracks_stopbattletracksforplayer = "dx_brm_rm2_gulag_announcement_";
    level.gulag.extractquest_alwaysallowdeposit[var_0].aliases = [ 30 ];
    level.gulag.extractquest_alwaysallowdeposit[var_0].get_type_to_drop = [ 0 ];
    var_0++;
    level.gulag.extractquest_alwaysallowdeposit[var_0] = spawnstruct();
    level.gulag.extractquest_alwaysallowdeposit[var_0].battle_tracks_stopbattletracksforplayer = "dx_brm_rm2_gulag_announcement_";
    level.gulag.extractquest_alwaysallowdeposit[var_0].aliases = [ 40 ];
    level.gulag.extractquest_alwaysallowdeposit[var_0].get_type_to_drop = [ 0 ];
    var_0++;
    level.gulag.extractquest_alwaysallowdeposit[var_0] = spawnstruct();
    level.gulag.extractquest_alwaysallowdeposit[var_0].battle_tracks_stopbattletracksforplayer = "dx_brm_rm2_gulag_recording_";
    level.gulag.extractquest_alwaysallowdeposit[var_0].aliases = [ 10 ];
    level.gulag.extractquest_alwaysallowdeposit[var_0].get_type_to_drop = [ 0 ];
    var_0++;
    level.gulag.extractquest_alwaysallowdeposit[var_0] = spawnstruct();
    level.gulag.extractquest_alwaysallowdeposit[var_0].battle_tracks_stopbattletracksforplayer = "dx_brm_rm2_gulag_recording_";
    level.gulag.extractquest_alwaysallowdeposit[var_0].aliases = [ 20, 30, 40, 50, 60, 20, 70, 80, 90, 80, 20, 30, 100, 110 ];
    level.gulag.extractquest_alwaysallowdeposit[var_0].get_type_to_drop = [ 0.5, 1.0, 1.5, 0.7, 0.3, 1.0, 0.4, 0.8, 1.0, 0.5, 1.0, 1.5, 2.0, 0 ];
    var_0++;
    level.gulag.extractquest_alwaysallowdeposit = scripts\engine\utility::array_randomize( level.gulag.extractquest_alwaysallowdeposit );
}

_id_124B1( var_0 )
{
    if ( !istrue( level.gulag._id_12D9E ) || var_0._id_11B79.size == 0 )
        return;

    var_0._id_12D9D = spawn( "script_model", var_0.origin );
    var_0._id_12D9D setmodel( "tag_origin" );
    var_1 = randomint( level.gulag.extractquest_alwaysallowdeposit.size );
    var_2 = randomint( var_0._id_11B79.size );

    for (;;)
    {
        _id_12E9E();

        while ( var_0.jailedplayers.size == 0 )
            waitframe();

        var_5 = var_0._id_11B79[var_2];
        var_6 = level.gulag.extractquest_alwaysallowdeposit[var_1];
        var_0._id_12D9D.origin = var_5.origin;
        var_0._id_12D9D dontinterpolate();
        waitframe();

        for ( var_7 = 0; var_7 < var_6.aliases.size; var_7++ )
        {
            var_8 = var_6.battle_tracks_stopbattletracksforplayer + var_6.aliases[var_7];
            var_0._id_12D9D playsoundonmovingent( var_8 );
            var_9 = lookupsoundlength( var_8, 1 ) / 1000.0;
            var_10 = var_6.get_type_to_drop[var_7] + var_9;
            wait( var_10 );
        }

        var_2 = randomint( var_0._id_11B79.size );
        var_1++;

        if ( var_1 >= level.gulag.extractquest_alwaysallowdeposit.size )
            var_1 = 0;
    }
}

_id_12E9E()
{
    var_0 = getdvarint( "scr_br_gulag_voice_min", 90 );
    var_1 = getdvarint( "scr_br_gulag_voice_max", 180 );
    var_2 = randomfloatrange( var_0, var_1 );
    wait( var_2 );
}
