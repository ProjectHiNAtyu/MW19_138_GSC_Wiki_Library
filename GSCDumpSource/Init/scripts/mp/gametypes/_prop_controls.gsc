// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_11F76()
{
    if ( isbot( self ) )
        return;

    self notifyonplayercommand( "lock", "+attack" );
    self notifyonplayercommand( "lock", "+attack_akimbo_accessible" );
    self notifyonplayercommand( "changeProp", "+weapnext" );
    self notifyonplayercommand( "setToSlope", "+usereload" );
    self notifyonplayercommand( "setToSlope", "+activate" );
    self notifyonplayercommand( "propAbility", "+smoke" );
    self notifyonplayercommand( "cloneProp", "+actionslot 2" );
    self notifyonplayercommand( "zoomin", "+actionslot 3" );
    self notifyonplayercommand( "zoomout", "+actionslot 4" );
    thread enable_nvgs();
}

enable_nvgs()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "cleanupKeyBindings" );
    self waittill( "death" );
    thread enable_motionblur();
}

enable_motionblur()
{
    self notify( "cleanupKeyBindings" );

    if ( isbot( self ) )
        return;

    self notifyonplayercommandremove( "lock", "+attack" );
    self notifyonplayercommandremove( "lock", "+attack_akimbo_accessible" );
    self notifyonplayercommandremove( "changeProp", "+weapnext" );
    self notifyonplayercommandremove( "setToSlope", "+usereload" );
    self notifyonplayercommandremove( "setToSlope", "+activate" );
    self notifyonplayercommandremove( "propAbility", "+smoke" );
    self notifyonplayercommandremove( "cloneProp", "+actionslot 2" );
    self notifyonplayercommandremove( "zoomin", "+actionslot 3" );
    self notifyonplayercommandremove( "zoomout", "+actionslot 4" );
}

anim_trafficking_play_scene( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\mp\hud_util::createfontstring( "default", 0.9 );
    var_4.x = 15;
    var_4.y = self.fx_ent_index;
    var_4.alignx = "left";
    var_4.aligny = "top";
    var_4.horzalign = "left_adjustable";
    var_4.vertalign = "top_adjustable";
    var_4.fontscale = 1;
    var_4.alpha = 1;
    var_4.glowalpha = 0;
    var_4.hidewheninmenu = 0;
    var_4._id_12483 = var_4.fontscale;

    if ( isdefined( var_3 ) && !scripts\engine\utility::is_player_gamepad_enabled() )
        var_4.label = var_3;
    else if ( isdefined( var_0 ) )
        var_4.label = var_0;
    else if ( isdefined( var_2 ) )
    {

    }

    if ( isdefined( var_1 ) )
        var_4 setvalue( var_1 );

    self.fx_ent_index = self.fx_ent_index + 18;
    return var_4;
}

waittill_all_targets_activated_or_player_death()
{
    self.fx_ent_index = 152;
    self.disable_fulton_group_interactions = anim_trafficking_play_scene( &"MP_PH/CHANGE", 0 );
    self._id_1233B = anim_trafficking_play_scene( &"MP_PH/SPIN", undefined, undefined, &"MP_PH/SPIN_PC" );
    self.scriptable_damaged_funcs = anim_trafficking_play_scene( &"MP_PH/LOCK" );
    self.set_vehicle_anims_decho_civ = anim_trafficking_play_scene( &"MP_PH/SLOPE", undefined, undefined, &"MP_PH/SLOPE_PC" );
    self.ai_ground_think = anim_trafficking_play_scene();
    self.enemy_aggro_at_closest_player = anim_trafficking_play_scene( &"MP_PH/CLONE" );
    _id_11EC5();
    self._id_1315C = anim_trafficking_play_scene( &"MP_PH/ZOOM" );
    thread _id_12B34();
}

enabledbasejumping()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self waittill( "death" );
    thread enable_motionblur();
    thread enable_traversals_for_bombers();
}

_id_11C17( var_0 )
{
    if ( isdefined( var_0 ) )
        var_0 destroy();
}

enable_traversals_for_bombers()
{
    self notify( "cleanupPropControlsHUD" );
    _id_11C17( self.disable_fulton_group_interactions );
    _id_11C17( self._id_1233B );
    _id_11C17( self.scriptable_damaged_funcs );
    _id_11C17( self.set_vehicle_anims_decho_civ );
    _id_11C17( self.ai_ground_think );
    _id_11C17( self._id_1315C );
    _id_11C17( self._id_12329 );
    _id_11C17( self.enemy_aggro_at_closest_player );
}

_id_12B34()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );

    if ( isbot( self ) )
        return;

    waittillframeend;
    var_0 = scripts\engine\utility::is_player_gamepad_enabled();

    for (;;)
    {
        var_1 = scripts\engine\utility::is_player_gamepad_enabled();

        if ( var_1 != var_0 )
        {
            var_0 = var_1;

            if ( var_1 )
            {
                if ( !istrue( self._id_120D6 ) )
                    self.set_vehicle_anims_decho_civ.label = &"MP_PH/SLOPE";
                else
                    self.set_vehicle_anims_decho_civ.label = &"MP_PH/SLOPED";
            }
            else if ( !istrue( self._id_120D6 ) )
                self.set_vehicle_anims_decho_civ.label = &"MP_PH/SLOPE_PC";
            else
                self.set_vehicle_anims_decho_civ.label = &"MP_PH/SLOPED_PC";
        }

        waitframe();
    }
}

waittill_any_return_no_endon_death_1()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    self.lock = 0;
    self._id_120D6 = 0;

    if ( isbot( self ) )
        return;

    if ( !scripts\mp\gametypes\br_gametype_prop.gsc::_id_12B90() )
    {
        self setclientomnvar( "ui_ph_is_locked", 0 );
        self setclientomnvar( "ui_ph_matching_slope", 0 );
    }

    thread waittill_any_timeout_no_endon_death_2();
    thread waitingtoplayreviveanimation();
    thread waittill_dropped_cash_collected();
    self.waittill_player_completes_assassination_contract = 0;
    self.hvi_patrol_exit = 0;
    self.get_intermission_time = 1;

    for (;;)
    {
        var_0 = scripts\engine\utility::_id_12E4A( "lock", "changeProp", "setToSlope", "propAbility", "cloneProp" );

        if ( !isdefined( var_0 ) )
            continue;

        if ( self.waittill_player_completes_assassination_contract )
            continue;

        if ( self.hvi_patrol_exit )
            continue;

        waittillframeend;

        if ( var_0 == "lock" )
        {
            waittill_any_return_no_endon_death_5();
            continue;
        }

        if ( var_0 == "changeProp" )
        {
            waitteardowninfilmapomnvars();
            continue;
        }

        if ( var_0 == "setToSlope" )
        {
            waittill_any_return_no_endon_death_6();
            continue;
        }

        if ( var_0 == "propAbility" )
        {
            waitillcanspawnclient();
            continue;
        }

        if ( var_0 == "cloneProp" )
            waittill_all_agents_dead();
    }
}

waittill_any_return_no_endon_death_5()
{
    if ( self ismantling() )
        return;

    if ( self.lock )
        _id_12A54();
    else
        scriptable_carriable_use();
}

_id_11954( var_0 )
{
    var_1 = 3;

    if ( !isdefined( var_0._id_12B73 ) )
        var_0._id_12B73 = 0;

    var_0._id_12B72[var_0._id_12B73] = var_0.prop.info;
    var_0._id_12B73++;

    if ( var_0._id_12B73 >= var_1 )
        var_0._id_12B73 = 0;
}

waitteardowninfilmapomnvars( var_0 )
{
    if ( !waittill_any_return_1() && !istrue( var_0 ) )
        return;

    if ( istrue( level.pc ) && !istrue( var_0 ) )
    {
        var_1 = 300;

        if ( isdefined( self.respawn_trigger_think ) && gettime() - self.respawn_trigger_think < var_1 )
            return;

        self.respawn_trigger_think = gettime();
    }

    self notify( "changed_prop" );
    _id_11954( self );
    self.prop.info = scripts\mp\gametypes\br_gametype_prop.gsc::max_projectile_check( self );
    waitthenrespawnsnowballs( self.prop.info );
    self.maxhealth = int( scripts\mp\gametypes\br_gametype_prop.gsc::milestonephasepercent_drops( self.prop.info ) );
    self setnormalhealth( 1.0 );
    _id_11EC4( self.fulton_initrepository );
    _id_11EC4( "CLONE" );

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_12B90() )
    {
        self.ai_ground_think.alpha = 1;
        self.enemy_aggro_at_closest_player.alpha = 1;
    }

    if ( !istrue( var_0 ) )
        waittill_any_2();
}

waittill_any_return_1()
{
    return self.disable_health_regen > 0;
}

waittill_any_2()
{
    waittill_interrogation_dialogue_or_timeout( self.disable_health_regen - 1 );
}

waittill_interrogation_dialogue_or_timeout( var_0 )
{
    self.disable_health_regen = var_0;

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_12B90() )
    {
        self.disable_fulton_group_interactions setvalue( self.disable_health_regen );

        if ( self.disable_health_regen <= 0 )
            self.disable_fulton_group_interactions.alpha = 0.5;
        else if ( self.disable_health_regen > 0 && self.disable_fulton_group_interactions.alpha < 1 )
            self.disable_fulton_group_interactions.alpha = 1.0;
    }
    else
        self setclientomnvar( "ui_ph_num_changes_left", self.disable_health_regen );
}

waitthenrespawnsnowballs( var_0 )
{
    self.prop.info = var_0;
    self.waittill_any_return_7 = var_0;
    self.prop setmodel( var_0.modelname );
    self.prop._id_130B4 = var_0._id_130B4;
    self.prop.blueprintcreatingteam = var_0.blueprintcreatingteam;
    self.prop unlink();
    self.waittill_any_5 unlink();
    self.waittill_any_5.origin = self.waiting_to_connect.origin;
    self.prop.origin = self.waittill_any_5.origin;
    self.waittill_any_5.angles = ( self.angles[0], self.waittill_any_5.angles[1], self.angles[2] );
    self.prop.angles = self.waittill_any_5.angles;

    if ( istrue( self.process_anim_ents ) )
    {
        self.prop.angles = self.angles;
        self.process_anim_ents = 0;
    }

    scripts\mp\gametypes\br_gametype_prop.gsc::bonusdeathplunder();
    scripts\mp\gametypes\br_gametype_prop.gsc::bombpuzzle_setup_marker_vfx();
    self.prop linkto( self.waittill_any_5, "J_prop_1" );

    if ( self._id_120D6 && istrue( self.lock ) )
        self.waittill_any_5 _id_11E0C( self.prop );

    self.waittill_any_5 linkto( self.waiting_to_connect );
    self._id_126F1 = var_0.waittill_any_timeout_no_endon_death_5;
    self._id_126F0 = var_0.waittill_any_return_4;
    self setcamerathirdperson( 1, self._id_126F1, self._id_126F0 );
}

waittill_any_return_no_endon_death_6()
{
    if ( !istrue( self._id_120D6 ) )
    {
        self._id_120D6 = 1;

        if ( istrue( self.lock ) )
        {
            self.waittill_any_5 unlink();
            self.waittill_any_5 _id_11E0C( self.prop );
            self.waittill_any_5 linkto( self.waiting_to_connect );
        }

        if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_12B90() )
        {
            if ( scripts\engine\utility::is_player_gamepad_enabled() )
                self.set_vehicle_anims_decho_civ.label = &"MP_PH/SLOPED";
            else
                self.set_vehicle_anims_decho_civ.label = &"MP_PH/SLOPED_PC";
        }
        else
            self setclientomnvar( "ui_ph_matching_slope", 1 );
    }
    else
    {
        self._id_120D6 = 0;

        if ( istrue( self.lock ) )
        {
            self.waittill_any_5 unlink();
            self.waittill_any_5.angles = ( self.angles[0], self.waittill_any_5.angles[1], self.angles[2] );
            self.waittill_any_5.origin = self.waiting_to_connect.origin;
            self.waittill_any_5 linkto( self.waiting_to_connect );
        }

        if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_12B90() )
        {
            if ( scripts\engine\utility::is_player_gamepad_enabled() )
                self.set_vehicle_anims_decho_civ.label = &"MP_PH/SLOPE";
            else
                self.set_vehicle_anims_decho_civ.label = &"MP_PH/SLOPE_PC";
        }
        else
            self setclientomnvar( "ui_ph_matching_slope", 0 );
    }
}

waitillcanspawnclient()
{
    if ( waittill_any_return_3() )
    {
        thread isffprotectedaction();
        waittill_any_4();
    }
}

waittill_all_agents_dead()
{
    if ( waittill_any_return_2() )
    {
        thread enemy_ai_enter_alert_due_to_grenade_explode();
        thread waittill_any_3();
    }
}

waittill_any_return_2()
{
    return self.enemy_claymore_watchfortrigger > 0;
}

waittill_any_3()
{
    waittill_juggs_alive( self.enemy_claymore_watchfortrigger - 1 );
}

waittill_juggs_alive( var_0 )
{
    self.enemy_claymore_watchfortrigger = var_0;

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_12B90() )
    {
        self.enemy_aggro_at_closest_player setvalue( self.enemy_claymore_watchfortrigger );

        if ( self.enemy_claymore_watchfortrigger <= 0 )
            self.enemy_aggro_at_closest_player.alpha = 0.5;
        else if ( self.enemy_claymore_watchfortrigger > 0 && self.enemy_aggro_at_closest_player.alpha < 1 )
            self.enemy_aggro_at_closest_player.alpha = 1.0;
    }
    else
        self setclientomnvar( "ui_ph_num_clones_left", self.enemy_claymore_watchfortrigger );
}

waittill_any_return_3()
{
    return self.ai_hold_behavior > 0;
}

waittill_any_4()
{
    waittill_near_goal( self.ai_hold_behavior - 1 );
}

waittill_near_goal( var_0 )
{
    self.ai_hold_behavior = var_0;

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_12B90() )
    {
        self.ai_ground_think setvalue( self.ai_hold_behavior );

        if ( self.ai_hold_behavior <= 0 )
            self.ai_ground_think.alpha = 0.5;
        else if ( self.ai_hold_behavior > 0 && self.ai_ground_think.alpha < 1 )
            self.ai_ground_think.alpha = 1.0;
    }
    else
        self setclientomnvar( "ui_ph_num_flashes_left", self.ai_hold_behavior );
}

_id_11E0C( var_0 )
{
    var_1 = lbravo_spawner_jammer1( var_0, 0 );

    if ( !isdefined( var_1 ) )
        return;

    var_2 = anglestoforward( self.angles );
    var_3 = anglestoright( self.angles );
    var_4 = vectortoangles( var_1 );
    var_5 = angleclamp180( var_4[0] + 90 );
    var_4 = ( 0, var_4[1], 0 );
    var_6 = anglestoforward( var_4 );
    var_7 = vectordot( var_6, var_3 );

    if ( var_7 < 0 )
        var_7 = -1;
    else
        var_7 = 1;

    var_8 = vectordot( var_6, var_2 );
    var_9 = var_8 * var_5;
    var_10 = ( 1 - abs( var_8 ) ) * var_5 * var_7;
    self.angles = ( var_9, self.angles[1], var_10 );
}

manualturret_clearplacementinstructions( var_0, var_1 )
{
    var_2 = 128;
    var_3 = game["defenders"];
    var_4 = level.teamdata[var_3]["alivePlayers"];

    if ( var_4.size > var_2 )
    {
        var_4 = scripts\mp\utility\player::getplayersinradius( var_0, 500, var_3 );

        if ( var_4.size > var_2 )
        {
            var_4 = scripts\mp\utility\player::getplayersinradius( var_0, 50, var_3 );

            if ( var_4.size > var_2 )
                return var_1;
        }
    }

    var_5 = [];

    foreach ( var_7 in var_4 )
        var_5[var_5.size] = var_7.prop;
}

lbravo_spawner_jammer1( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        var_2 = self;
    else
        var_2 = var_0;

    var_3 = manualturret_clearplacementinstructions( self.origin, var_2 );
    var_4 = [ self.origin ];

    for ( var_5 = -1.0; var_5 <= 1.0; var_5 = var_5 + 2.0 )
    {
        for ( var_6 = -1.0; var_6 <= 1.0; var_6 = var_6 + 2.0 )
        {
            var_7 = var_2 getpointinbounds( var_5, var_6, 0.0 );
            var_7 = ( var_7[0], var_7[1], self.origin[2] );
            var_4[var_4.size] = var_7;
        }
    }

    var_8 = ( 0, 0, 0 );
    var_9 = 0;

    foreach ( var_11 in var_4 )
    {
        var_12 = scripts\engine\trace::_bullet_trace( var_11 + ( 0, 0, 4 ), var_11 + ( 0, 0, -16 ), 0, var_3 );
        var_13 = var_12["fraction"] > 0.0 && var_12["fraction"] < 1;

        if ( var_13 )
        {
            var_8 = var_8 + var_12["normal"];
            var_9++;
        }
    }

    if ( var_9 > 0 )
    {
        var_8 = var_8 / var_9;
        return var_8;
    }
    else
        return undefined;
}

waittill_any_timeout_no_endon_death_2()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    var_0 = 0;
    var_1 = 0;
    var_2 = 0;

    for (;;)
    {
        waitframe();
        var_3 = self getnormalizedmovement();
        var_4 = self jumpbuttonpressed();

        if ( !isdefined( var_3 ) )
            continue;

        if ( self.waittill_player_completes_assassination_contract )
            continue;

        var_5 = var_3[0] != 0 || var_3[1] != 0 || var_4;

        if ( self.lock && var_2 && !var_5 )
            var_2 = 0;
        else if ( self.lock && !var_0 && var_5 )
            var_2 = 1;
        else if ( self.lock && var_5 && !var_2 )
            _id_12A54();

        var_0 = self.lock;
        var_1 = var_5;
    }
}

_id_12A54()
{
    self unlink();

    if ( self._id_120D6 )
    {
        self.waittill_any_5 unlink();
        self.waittill_any_5.angles = ( self.angles[0], self.waittill_any_5.angles[1], self.angles[2] );
        self.waittill_any_5.origin = self.waiting_to_connect.origin;
        self.waittill_any_5 linkto( self.waiting_to_connect );
    }

    self.waiting_to_connect linkto( self );
    self.lock = 0;

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_12B90() )
    {
        self.scriptable_damaged_funcs.label = &"MP_PH/LOCK";
        thread isfriendlyfireprotectedperiod();
    }
    else
        self setclientomnvar( "ui_ph_is_locked", 0 );
}

scriptable_carriable_use()
{
    if ( !defusebomb() )
        return;

    self.waiting_to_connect unlink();
    self.waiting_to_connect.origin = self.origin;
    var_0 = self getgroundentity();

    if ( isdefined( var_0 ) && var_0 infiltransistioning() )
        self.waiting_to_connect linkto( var_0 );

    self playerlinkto( self.waiting_to_connect );

    if ( self._id_120D6 )
    {
        self.waittill_any_5 unlink();
        self.waittill_any_5 _id_11E0C( self.prop );
        self.waittill_any_5.origin = self.origin;
        self.waittill_any_5 linkto( self.waiting_to_connect );
    }

    self.lock = 1;
    self notify( "locked" );

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_12B90() )
    {
        self.scriptable_damaged_funcs.label = &"MP_PH/LOCKED";
        thread isfriendlyfireprotectedperiod();
    }
    else
        self setclientomnvar( "ui_ph_is_locked", 1 );
}

infiltransistioning()
{
    return isalive( self ) && ( scripts\common\vehicle::isvehicle() || isdefined( self.classname ) && self.classname == "script_vehicle" );
}

isfriendlyfireprotectedperiod()
{
    self endon( "death" );
    self endon( "disconnect" );
    level endon( "game_ended" );
    self notify( "flashLockPropKey" );
    self endon( "flashLockPropKey" );
    var_0 = self.scriptable_damaged_funcs._id_12483 + 0.75;
    self.scriptable_damaged_funcs changefontscaleovertime( 0.1 );
    self.scriptable_damaged_funcs.fontscale = var_0;
    wait 0.1;

    if ( isdefined( self.scriptable_damaged_funcs ) )
    {
        self.scriptable_damaged_funcs changefontscaleovertime( 0.1 );
        self.scriptable_damaged_funcs.fontscale = self.scriptable_damaged_funcs._id_12483;
    }
}

defusebomb()
{
    if ( !self isonground() )
    {
        var_0 = getgroundposition( self.origin, 15, 30000, 0 );
        var_1 = getentarray( "trigger_hurt", "classname" );

        foreach ( var_3 in var_1 )
        {
            if ( ispointinvolume( var_0, var_3 ) )
                return 0;
        }
    }

    return 1;
}

waittill_player_behind_cover()
{
    level endon( "noPropsToSpectate" );
    self.waittill_player_completes_assassination_contract = 0;
    self.hvi_patrol_exit = 0;

    if ( !isdefined( self._id_1232A ) )
        self._id_1232A = 0;

    for (;;)
    {
        var_0 = scripts\engine\utility::_id_12E46( "spectate" );

        if ( self.hvi_patrol_exit )
            continue;

        if ( var_0 == "spectate" )
        {
            if ( self.waittill_player_completes_assassination_contract )
            {
                self notify( "endPropSpectate" );
                continue;
            }

            scripts\mp\gametypes\br_gametype_prop.gsc::forbiddencachespawns();

            if ( self._id_12326.size <= 1 )
                continue;

            self.waittill_player_completes_assassination_contract = 1;
            waiting_for_disable( 0 );
            thread waittill_player_closes_tac_map();
            childthread waittill_player_collects_death_cash();
        }
    }
}

waittill_player_collects_death_cash()
{
    self endon( "endPropSpectate" );

    if ( display_headicon_to_players() )
        _id_1232C();
    else
    {
        is_raid_gamemode( 1 );
        _id_1232C();
    }

    for (;;)
    {
        var_0 = scripts\engine\utility::_id_12E47( "zoomin", "zoomout" );

        if ( self.hvi_patrol_exit )
            continue;

        if ( var_0 == "zoomin" )
        {
            is_raid_gamemode( 1 );
            display_headicon_to_players();
            spawn_exfil_heli_and_rpgs();
        }

        if ( var_0 == "zoomout" )
        {
            is_raid_gamemode( 0 );
            display_headicon_to_players();
            spawn_exfil_heli_and_rpgs();
        }
    }
}

display_headicon_to_players()
{
    var_0 = self._id_12326[self._id_1232A];

    if ( !isdefined( var_0 ) )
        return 0;

    if ( var_0 == self )
        return 0;

    if ( scripts\mp\utility\player::isreallyalive( var_0 ) )
        return 1;

    return 0;
}

is_raid_gamemode( var_0 )
{
    var_1 = self._id_1232A;

    for (;;)
    {
        if ( istrue( var_0 ) )
            self._id_1232A++;
        else
            self._id_1232A--;

        if ( var_0 && self._id_12326.size <= self._id_1232A )
            self._id_1232A = 0;
        else if ( self._id_1232A < 0 )
            self._id_1232A = self._id_12326.size - 1;

        if ( self._id_1232A == var_1 )
            break;

        if ( display_headicon_to_players() )
            break;
    }
}

waittill_player_closes_tac_map()
{
    self endon( "death_or_disconnect" );
    footprint_mask_clipheight();
    scripts\engine\utility::waittill_any_ents( self, "endPropSpectate", level, "noPropsToSpectate" );

    if ( istrue( self.hvi_patrol_exit ) )
        return;

    self.hvi_patrol_exit = 1;
    getkeypadstatefromomnvar();
    _id_11ADC();
    waittillframeend;
    waiting_for_disable( 1 );
    self.waittill_player_completes_assassination_contract = 0;
    self.hvi_patrol_exit = 0;
}

footprint_mask_clipheight()
{
    self._id_12328 = scripts\mp\hud_util::createfontstring( "default", 1 );
    self._id_12328.label = &"MP_PH/SPECCOMMANDS";
    self._id_12328.x = 20;
    self._id_12328.y = -80;
    self._id_12328.alignx = "center";
    self._id_12328.aligny = "middle";
    self._id_12328.horzalign = "center_adjustable";
    self._id_12328.vertalign = "bottom_adjustable";
    self._id_12328.archived = 1;
    self._id_12328.fontscale = 1;
    self._id_12328.alpha = 1;
    self._id_12328.glowalpha = 0.5;
    self._id_12328.hidewheninmenu = 0;
}

getkeypadstatefromomnvar()
{
    if ( isdefined( self._id_12328 ) )
        self._id_12328 destroy();
}

_id_1232C()
{
    var_0 = self._id_12326[self._id_1232A];
    self._id_1232E = var_0;
    self.waiting_to_connect unlink();
    self.waiting_to_connect.origin = self.origin;
    self setorigin( var_0.origin );
    self.angles = var_0.angles;
    self playerlinkto( var_0.waiting_to_connect );
}

spawn_exfil_heli_and_rpgs()
{
    var_0 = self._id_12326[self._id_1232A];
    self unlink();
    self.origin = var_0.origin;
    self.angles = var_0.angles;
    self playerlinkto( var_0.waiting_to_connect );
}

_id_11ADC()
{
    self unlink();
    self setorigin( self.waiting_to_connect.origin );

    if ( self.lock )
        self playerlinkto( self.waiting_to_connect );
    else
    {
        self.waiting_to_connect linkto( self );
        self.waiting_to_connect.origin = self.origin;
    }
}

spawnvector()
{
    level endon( "game_ended" );
    level waittill( "noPropsToSpectate" );
    _id_11C17( self._id_12329 );
}

waitingtoplayreviveanimation()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );
    var_0 = 10;
    self._id_126F1 = self.prop.info.waittill_any_timeout_no_endon_death_5;

    for (;;)
    {
        var_1 = scripts\engine\utility::_id_12E47( "zoomin", "zoomout" );

        if ( istrue( self.hvi_patrol_exit ) )
            continue;

        if ( !isdefined( var_1 ) )
            continue;

        if ( istrue( self.waittill_player_completes_assassination_contract ) )
            continue;

        if ( var_1 == "zoomin" )
        {
            if ( self._id_126F1 - var_0 < 50 )
                continue;

            self._id_126F1 = self._id_126F1 - var_0;
            self setcamerathirdperson( 1, self._id_126F1, self._id_126F0 );
            continue;
        }

        if ( var_1 == "zoomout" )
        {
            var_2 = clamp( self.prop.info.waittill_any_timeout_no_endon_death_5 + 50, 50, 360 );

            if ( self._id_126F1 + var_0 > var_2 )
                continue;

            self._id_126F1 = self._id_126F1 + var_0;
            self setcamerathirdperson( 1, self._id_126F1, self._id_126F0 );
        }
    }
}

waittill_dropped_cash_collected()
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );

    for (;;)
    {
        if ( self adsbuttonpressed( 1 ) && !istrue( self.waittill_any_5._id_1233A ) )
        {
            self.waittill_any_5 scriptmodelpauseanim( 0 );
            self.waittill_any_5._id_1233A = 1;
        }
        else if ( !self adsbuttonpressed( 1 ) && istrue( self.waittill_any_5._id_1233A ) )
        {
            self.waittill_any_5 scriptmodelpauseanim( 1 );
            self.waittill_any_5._id_1233A = 0;
        }

        wait 0.05;
    }
}

_id_11EC5()
{
    switch ( self.fulton_initrepository )
    {
        case "FLASH":
            self.ai_ground_think.label = &"MP_PH/FLASH";
            break;
        default:
            break;
    }
}

_id_11EC4( var_0, var_1 )
{
    switch ( var_0 )
    {
        case "FLASH":
            if ( !isdefined( var_1 ) )
                var_1 = level.tower_ground_mortar_2.settings.waittill_any_timeout_no_endon_death_4;

            waittill_near_goal( var_1 );
            break;
        case "CLONE":
            if ( !isdefined( var_1 ) )
                var_1 = level.tower_ground_mortar_2.settings.waittill_any_timeout_no_endon_death_3;

            waittill_juggs_alive( var_1 );
            break;
        default:
            break;
    }
}

isfromkillstreak( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    thread scripts\mp\shellshock::endondeath();
    self endon( "end_explode" );
    self waittill( "explode", var_1 );

    if ( !isdefined( var_0 ) )
        return;

    isffprotectedaction( var_0, var_1 );
}

isffprotectedaction( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        var_0 = self;

    if ( !isdefined( var_1 ) )
        var_1 = self.origin;

    playfx( scripts\engine\utility::getfx( "propFlash" ), var_1 + ( 0, 0, 4 ) );
    playsoundatpos( var_1, "prop_flashbang" );

    foreach ( var_3 in level.players )
    {
        if ( var_3 == var_0 )
            continue;

        if ( istrue( var_3.isflagcarrymode ) )
            continue;

        if ( !isdefined( var_3 ) || !isalive( var_3 ) || !isdefined( var_3.team ) || var_3 scripts\mp\gametypes\br_gametype_prop.gsc::update_sentry_settings() )
            continue;

        var_4 = var_1 + ( 0, 0, 4 ) - var_3 geteye();
        var_5 = length( var_4 );
        var_6 = 500.0;
        var_7 = 150.0;

        if ( var_5 <= var_6 )
        {
            if ( var_5 <= var_7 )
                var_8 = 1;
            else
                var_8 = 1 - ( var_5 - var_7 ) / ( var_6 - var_7 );

            var_9 = vectornormalize( var_4 );
            var_10 = anglestoforward( var_3 getplayerangles() );
            var_11 = vectordot( var_10, var_9 );
            var_3 applyflash( var_1 + ( 0, 0, 4 ), var_8, var_11, var_0, var_0.team, 2.0 );
        }
    }
}

applyflash( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = 2.5;

    if ( !isdefined( var_5 ) )
        var_5 = 0;

    if ( var_2 < 0.25 )
        var_2 = 0.25;
    else if ( var_2 > 0.8 )
        var_2 = 1;

    var_7 = var_1 * var_2 * var_6;
    var_7 = var_7 + var_5;

    if ( var_7 < 0.25 )
        return;

    var_3 thread scripts\mp\damagefeedback::updatedamagefeedback( "standard" );
    thread scripts\mp\equipment\flash_grenade::applyflash( var_3, var_7 );
}

getclosestmatchingmasterlootnode()
{
    var_0 = 9;

    if ( self.waittill_all_current_vo_plays.size + 1 <= var_0 )
        return;

    var_1 = 0;

    foreach ( var_3 in self.waittill_all_current_vo_plays )
    {
        if ( isdefined( var_3 ) )
            var_1++;
    }

    if ( var_1 + 1 <= var_0 )
        return;

    var_5 = [];
    var_6 = undefined;

    for ( var_7 = 0; var_7 < self.waittill_all_current_vo_plays.size; var_7++ )
    {
        var_3 = self.waittill_all_current_vo_plays[var_7];

        if ( !isdefined( var_3 ) )
            continue;

        if ( !isdefined( var_6 ) )
        {
            var_6 = var_3;
            continue;
        }

        var_5[var_5.size] = var_3;
    }

    var_6 notify( "maxDelete" );
    var_6 delete();
    self.waittill_all_current_vo_plays = var_5;
}

enemy_ai_enter_alert_due_to_grenade_explode()
{
    if ( !isdefined( self.waittill_all_current_vo_plays ) )
        self.waittill_all_current_vo_plays = [];
    else
        getclosestmatchingmasterlootnode();

    var_0 = spawn( "script_model", self.prop.origin );
    var_0.targetname = "propClone";
    var_0 setmodel( self.prop.model );
    var_0.angles = self.prop.angles;
    var_0.health = 50;
    var_0.playerowner = self;
    var_0 setcandamage( 1 );
    var_0 thread scripts\mp\damage::monitordamage( var_0.health, "hitequip", ::enemies_validate_life, ::gasmaskhealthperpip );
    var_0 thread scripts\mp\gametypes\br_gametype_prop.gsc::padcorner3to0dist( game["defenders"], "outline_nodepth_orange" );
    var_0 scripts\mp\sentientpoolmanager::registersentient( "Tactical_Static", self.team );
    self.waittill_all_current_vo_plays[self.waittill_all_current_vo_plays.size] = var_0;
}

gasmaskhealthperpip( var_0 )
{
    if ( !isdefined( var_0.attacker ) )
        return 0;

    if ( isplayer( var_0.attacker ) )
    {
        if ( istrue( self.propmatchslope ) )
            return 0;

        var_0.attacker thread scripts\mp\damagefeedback::updatedamagefeedback( "hitequip" );
        self.lastattacker = var_0.inflictor;
    }

    return var_0.damage;
}

enemies_validate_life( var_0 )
{
    if ( !isdefined( self.propmatchslope ) )
        self.propmatchslope = 1;

    if ( isdefined( self.lastattacker ) )
    {
        self.lastattacker thread scripts\mp\gametypes\br_gametype_prop.gsc::monitor_death_thread( "clone_destroyed" );

        if ( isdefined( self.playerowner ) )
            self.playerowner thread scripts\mp\gametypes\br_gametype_prop.gsc::monitor_death_thread( "clone_was_destroyed" );
    }

    var_1 = "prop_death";
    var_2 = "propDeathFX";
    playsoundatpos( self.origin + ( 0, 0, 4 ), var_1 );
    playfx( scripts\engine\utility::getfx( var_2 ), self.origin + ( 0, 0, 4 ) );

    if ( isdefined( self ) )
        self delete();
}

inittutzones( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    if ( !isdefined( var_0 ) )
        var_0 = 5;

    if ( !isdefined( var_1 ) )
        var_1 = 1;

    if ( !isdefined( var_2 ) )
        var_2 = 1;

    var_3 = newclienthudelem( self );
    var_3.foreground = 0;
    var_3.x = 0;
    var_3.y = 0;
    var_3 setshader( "black", 640, 480 );
    var_3.alignx = "left";
    var_3.aligny = "top";
    var_3.horzalign = "fullscreen";
    var_3.vertalign = "fullscreen";
    var_3.alpha = 0;
    waitframe();

    if ( var_1 > 0 )
        var_3 fadeovertime( var_1 );

    var_3.alpha = 1;
    wait( var_0 - var_2 );

    if ( var_2 > 0 )
        var_3 fadeovertime( var_2 );

    var_3.alpha = 0;
    wait( var_2 );
    waitframe();
    _id_11C17( var_3 );
}

_id_12F62()
{
    self endon( "death_or_disconnect" );
    self notifyonplayercommand( "specialGrenade", "+smoke" );

    for (;;)
    {
        self waittill( "specialGrenade" );
        self._id_1270C = self._id_1270C + 1;
    }
}

overheatcooldown()
{
    level waittill( "game_ended" );

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_12B90() )
    {
        level.hidequestcircletoall.alpha = 0;
        level.tower_ground_mortar_2._id_1300C.alpha = 0;
        level._id_1300D.alpha = 0;
    }

    foreach ( var_1 in level.players )
        var_1 waiting_for_disable( 0 );
}

_id_11C26( var_0, var_1 )
{
    if ( isdefined( var_0 ) )
        var_0.alpha = var_1;
}

waiting_for_disable( var_0, var_1 )
{
    if ( istrue( var_0 ) )
        var_2 = 1;
    else
        var_2 = 0;

    if ( scripts\mp\gametypes\br_gametype_prop.gsc::_id_12B90() || istrue( var_1 ) )
    {
        _id_11C26( self.disable_fulton_group_interactions, var_2 );
        _id_11C26( self._id_1233B, var_2 );
        _id_11C26( self.scriptable_damaged_funcs, var_2 );
        _id_11C26( self.set_vehicle_anims_decho_civ, var_2 );
        _id_11C26( self.ai_ground_think, var_2 );
        _id_11C26( self.enemy_aggro_at_closest_player, var_2 );
        _id_11C26( self._id_1315C, var_2 );

        if ( !istrue( level.spawntimestamp ) )
            _id_11C26( self._id_12329, var_2 );
    }
}
