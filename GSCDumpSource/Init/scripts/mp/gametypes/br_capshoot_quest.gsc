// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    var_0 = min_pt( game["attackers"] );

    foreach ( var_2 in var_0 )
        addplundercarrycredit( var_2 );

    var_4 = min_pt( game["defenders"] );

    foreach ( var_2 in var_4 )
        addplundercarrycredit( var_2 );

    scripts\mp\gametypes\br_quest_util.gsc::registerquestlocale( "cap_locale" );
    scripts\mp\gametypes\br_quest_util.gsc::registercreatequestlocale( "cap_locale", ::delayeddetach );
    scripts\mp\gametypes\br_quest_util.gsc::registercheckiflocaleisavailable( "cap_locale", ::delayed_explosion_things );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "cap_locale", ::delayedshowtablets );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestcircletick( "cap_locale", ::delayedattach );
    scripts\mp\gametypes\br_quest_util.gsc::zvelscale( "cap_locale", ::delayeddetachbreak );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11950( "cap_locale", ::delayedeventtypes );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "cap_locale" ).nextid = 0;
    _id_11F54();
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "canTakePickupLoot", ::delay_spawn_room_soldiers );
    game["dialog"]["mission_cap_accept"] = "mission_mission_dom_accept_secure";
    game["dialog"]["mission_cap_success"] = "mission_mission_dom_success";
}

min_pt( var_0 )
{
    if ( var_0 == game["attackers"] )
        return lootchopper_getzonebyindex();
    else
        return make_focus_fire_objective();
}

lootchopper_getzonebyindex()
{
    return [ "capshoot_killstreak" ];
}

make_focus_fire_objective()
{
    return [ "capshoot_killstreak_d" ];
}

addplundercarrycredit( var_0 )
{
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::registerquestcategory( var_0, 1 );

    if ( !var_1 )
        return;

    scripts\mp\gametypes\br_quest_util.gsc::zone_stompeenemyprogressupdate( var_0, "brloot_domination_tablet" );
    scripts\mp\gametypes\br_quest_util.gsc::_id_1195C( var_0, ::delete_after_flank_trigger_spawns );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( var_0, ::delayedunsetbettermissionrewards );
    scripts\mp\gametypes\br_quest_util.gsc::watch_for_player_going_belowmap_or_oob( var_0, 1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11951( var_0, ::delay_start_infiltrate_objective );
}

delayedunsetbettermissionrewards()
{
    if ( isdefined( level._id_1269C[self.team] ) )
        level._id_1269C[self.team] = scripts\engine\utility::array_remove( level._id_1269C[self.team], self.squadindex );

    scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
    scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehidefromteam( self.team );
    self._id_12550 thread delayed_depositing();
}

delayedshowtablets()
{
    foreach ( var_1 in self.subscribedinstances )
        var_1 thread scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();

    getcargotruckspawns();
    self.delay_suspend_vehicle_convoy = undefined;
}

delete_after_flank_trigger_spawns()
{
    self.questcategory = "capshoot";
    return 1;
}

delayeddetach( var_0 )
{
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "cap_locale" ).nextid++;
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::createlocaleinstance( "cap_locale", self.questcategory, "CapPoint:" + scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "cap_locale" ).nextid );

    if ( !isdefined( var_0 ) )
    {
        var_1.curorigin = ( 0, 0, 0 );
        var_1.enabled = 0;
        return var_1;
    }

    var_2 = var_0.origin;

    if ( !( var_0.spawnflags & 23 ) )
    {

    }

    var_3 = scripts\mp\gametypes\br_quest_util.gsc::watch_for_molotov_ambush_and_spawners( var_0 );
    var_4 = spawn( "trigger_radius", var_2, 0, int( var_3 ), int( level.checkpoint_add_carepackage_munitions ) );
    var_4.script_label = "";
    level._id_11E8F = ::delay_turn_on_headlights;
    var_5 = scripts\mp\gametypes\obj_dom.gsc::setupobjective( var_4 );
    var_5.onuse = ::delay_turn_off_red_lights_along_track;
    var_5.onbeginuse = ::delay_thirdpersoncamera;
    var_5.onuseupdate = ::delay_turn_off_tum_display;
    var_5.onenduse = ::delay_turn_laser_trap_back_on;
    var_5.usecondition = ::delaydestroyhudelem;
    var_5.lockupdatingicons = 1;
    var_5.docustommusicloopafternuke = 1;
    var_5.flagmodel setmodel( "lm_domination_point_01" );
    scripts\mp\objidpoolmanager::update_objective_position( var_5.objidnum, var_5.curorigin + ( 0, 0, 60 ) );
    level.flagcapturetime = getdvarfloat( "scr_br_cap_quest_capture_time", 30 );
    var_5 scripts\mp\gameobjects::setusetime( level.flagcapturetime );
    var_1.lastcircletick = -1;
    var_1.delay_suspend_vehicle_convoy = var_5;
    var_1.curorigin = var_5.curorigin;
    var_1.team = self.team;
    var_5.locale = var_1;
    var_5.squadindex = self.squadindex;
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "cap_locale", var_1 );
    return var_1;
}

delayed_explosion_things( var_0 )
{
    var_1 = getdvarfloat( "scr_br_cap_quest_max_capture_percent", 0.2 );
    var_2 = getdvarfloat( "scr_br_cap_quest_max_teams", 4 );
    var_3 = 0;

    if ( isdefined( self.delay_suspend_vehicle_convoy.curprogress ) )
        var_3 = self.delay_suspend_vehicle_convoy.curprogress / self.delay_suspend_vehicle_convoy.usetime;

    if ( var_3 > var_1 )
        return 0;

    if ( self.subscribedinstances.size >= var_2 )
        return 0;

    return 1;
}

delayedattach( var_0, var_1 )
{
    if ( !isdefined( self.delay_suspend_vehicle_convoy ) )
        return;

    var_2 = gettime();

    if ( self.lastcircletick == var_2 )
        return;

    self.lastcircletick = var_2;

    if ( isdefined( self.delay_suspend_vehicle_convoy ) && isdefined( self.delay_suspend_vehicle_convoy.traincar ) )
        self.curorigin = self.delay_suspend_vehicle_convoy.traincar.origin;

    var_3 = distance2d( self.curorigin, var_0 );

    if ( var_3 > var_1 )
    {
        foreach ( var_5 in self.subscribedinstances )
        {
            if ( isdefined( var_5 ) )
            {
                scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_5.team, "br_capshoot_quest_circle_failure" );
                var_6 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_5.team, var_5.squadindex );
                level thread scripts\mp\gametypes\br_public.gsc::brleaderdialog( "br_capshoot_quest_circle_failure", 1, var_6 );
            }

            var_5.result = "circle";
        }

        scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
    }
}

delayeddetachbreak( var_0 )
{
    delay_then_run_wave_override( var_0 );
}

delayedeventtypes( var_0 )
{
    foreach ( var_2 in self.teams )
    {
        if ( var_0.team == self.subscribedinstances[0].team )
            delay_vehicle_to_push_explode_sequence( var_0 );
    }
}

delay_spawn_room_soldiers( var_0 )
{
    if ( !scripts\mp\gametypes\br_pickups.gsc::race_ui_checkpoint( var_0.scriptablename ) )
        return undefined;

    var_1 = var_0.playoverwatch_dialogue;

    if ( isdefined( var_1.questcategory ) && var_1.questcategory == "capshoot" )
    {
        if ( self.team == var_1.team )
        {
            var_2 = min_pt( self.team );

            foreach ( var_4 in var_2 )
            {
                if ( isdefined( level.questinfo.quests[var_4] ) )
                {
                    foreach ( var_6 in level.questinfo.quests[var_4].instances )
                    {
                        if ( isdefined( var_6 ) && self.squadindex == var_6.squadindex )
                            return 10;
                    }
                }
            }

            return 1;
        }
        else
            return 22;
    }

    return undefined;
}

takequestitem( var_0 )
{
    var_1 = monitor_player_near_truck( var_0._id_125DE, self, 1, var_0 );

    if ( isdefined( var_1 ) )
    {
        _id_12059( var_0._id_125DE, [ self ] );
        var_1 _id_12385( [ self ] );

        if ( istrue( level.cleanupswaploadoutflags.tmtylsquadafterspawnfunc ) && isdefined( var_0.tacmapexplanation ) )
        {
            var_2 = [[ var_0.tacmapexplanation ]]( var_0 );

            if ( isdefined( var_2 ) && isdefined( var_0.tacmapvo ) )
            {
                monitor_player_near_truck( var_0.tacmapvo, var_2, 0, var_0 );
                _id_12059( var_0.tacmapvo, [ var_2 ] );
                var_1 _id_12385( [ var_2 ] );
            }
        }
    }
}

bonus_targets( var_0, var_1, var_2, var_3 )
{
    var_4 = undefined;
    var_5 = 1;

    if ( isdefined( var_0 ) )
    {
        foreach ( var_7 in var_1 )
        {
            if ( var_5 )
            {
                var_4 = monitor_player_near_truck( var_0, var_7, 1 );
                var_5 = 0;
                continue;
            }

            monitor_player_near_truck( var_0, var_7, 0 );
        }

        if ( isdefined( var_4 ) )
        {
            _id_12059( var_0, var_1 );
            var_4 _id_12385( var_1 );
        }
    }

    if ( isdefined( var_2 ) )
    {
        foreach ( var_10 in var_3 )
        {
            if ( var_5 )
            {
                var_4 = monitor_player_near_truck( var_2, var_10, 1 );
                var_5 = 0;
                continue;
            }

            monitor_player_near_truck( var_2, var_10, 0 );
        }

        if ( isdefined( var_4 ) )
        {
            _id_12059( var_2, var_3 );
            var_4 _id_12385( var_3 );
        }
    }

    return var_4;
}

monitor_player_near_truck( var_0, var_1, var_2, var_3 )
{
    var_4 = getdvarint( "scr_br_CAP_questTime", 240 );
    var_5 = activate_gas_trap_cloud_parent( var_0, var_1, var_4, var_3 );
    var_6 = spawnstruct();
    var_6 = var_1 minigun_attack_max_cooldown( var_0 );

    if ( isdefined( var_3 ) && isdefined( var_3.transient_world_autolod_enabled ) )
        var_6._id_11A51 = [[ var_3.transient_world_autolod_enabled ]]( var_1, var_3 );

    var_7 = var_5 scripts\mp\gametypes\br_quest_util.gsc::requestquestlocale( "cap_locale", var_6, var_2 );

    if ( !var_7.enabled )
    {
        var_5.result = "no_locale";
        var_5 scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( var_1.team );
    }
    else
    {
        var_7.squadindex = var_1.squadindex;
        var_7 delaydropbags();
        scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( var_0, var_5 );
    }
}

minigun_attack_max_cooldown( var_0 )
{
    var_1 = self;
    var_2 = spawnstruct();
    var_2._id_11D1F = "questPointsArray";
    var_2._id_11D1B = ( var_1.origin[0], var_1.origin[1], 0 );
    var_2._id_11D22 = getdvarfloat( "scr_br_cap_search_max_radius", 7500 );
    var_2._id_11D23 = 0;
    var_2._id_11D20 = getdvarfloat( "scr_br_cap_search_ideal_max_radius", 5000 );
    var_2._id_11D21 = getdvarfloat( "scr_br_cap_search_ideal_min_radius", 2500 );
    var_2.watch_for_players_activating_juggmaze_map = 7;
    var_2.mintime = getdvarfloat( "scr_br_cap_quest_capture_time", 30 );
    var_2._id_11D1D = 1;
    var_2._id_11A51 = var_1._id_11A51;

    if ( keypadsetup( var_0 ) )
    {
        if ( var_2._id_11D22 < level.watch_for_damage_on_turret )
            var_2._id_11D22 = level.watch_for_damage_on_turret;

        var_2._id_11D20 = level.watch_for_damage_on_turret;
        var_2._id_11D21 = level.watch_for_driver_death;
    }

    if ( istrue( var_1.stimmodelattached ) )
    {
        var_2._id_11D1F = "questPointsArrayWZTrain";
        var_2._id_12B82 = 1;
    }

    var_3 = getdvarint( "scr_br_questCapDistMin", -1 );
    var_4 = getdvarint( "scr_br_questCapDistMax", -1 );

    if ( var_3 >= 0 )
        var_2._id_11D21 = var_3;

    if ( var_4 >= 0 )
        var_2._id_11D20 = var_4;

    return var_2;
}

race_ui_add_critical_message()
{
    var_0 = min_pt( game["attackers"] );

    foreach ( var_2 in var_0 )
    {
        if ( isdefined( level.questinfo.quests[var_2].instances[game["attackers"]] ) )
            return 1;
    }

    var_4 = min_pt( game["defenders"] );

    foreach ( var_2 in var_4 )
    {
        if ( isdefined( level.questinfo.quests[var_2].instances[game["defenders"]] ) )
            return 1;
    }

    return 0;
}

activate_gas_trap_cloud_parent( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\mp\gametypes\br_quest_util.gsc::createquestinstance( var_0, var_1.team, "", var_3, var_1.squadindex );
    var_4.squadindex = var_1.squadindex;
    var_4 scripts\mp\gametypes\br_quest_util.gsc::registerteamonquest( var_1.team, var_1 );
    var_4 scripts\mp\gametypes\br_quest_util.gsc::zombiepingtime( var_1 );
    var_4.team = var_1.team;
    var_4 scripts\mp\gametypes\br_quest_util.gsc::watch_for_player_in_gulag( var_2, 4 );
    return var_4;
}

_id_12059( var_0, var_1 )
{
    foreach ( var_3 in var_1 )
    {
        var_3 scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshowtoteam( var_0, var_3.team );
        var_3 scripts\mp\gametypes\br_quest_util.gsc::_id_124A9( var_0, var_3, var_3.team );
    }

    var_5 = spawnstruct();
    var_5.excludedplayers = [];

    foreach ( var_3 in var_1 )
    {
        var_5.excludedplayers[0] = var_3;
        var_3 scripts\mp\gametypes\br_quest_util.gsc::displayplayersplash( var_3, "br_capshoot_quest_start_tablet_finder_noplunder", var_5 );
        var_3 scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_3.team, "br_capshoot_quest_start_team_noplunder", var_5 );
        var_3 scripts\mp\gametypes\br_quest_util.gsc::global_stealth_broken_func( var_3.team, var_3, 6, scripts\mp\gametypes\br_quest_util.gsc::getquestindex( var_0 ) );
        var_7 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_3.team, var_3.squadindex );
        level thread scripts\mp\gametypes\br_public.gsc::brleaderdialog( "mission_cap_accept", 1, var_7 );
    }
}

_id_12385( var_0 )
{
    if ( isdefined( self.delay_suspend_vehicle_convoy ) )
    {
        foreach ( var_2 in var_0 )
            self.delay_suspend_vehicle_convoy scripts\mp\gameobjects::squadallowuse( var_2.team, var_2.squadindex );
    }
}

delaydropbags()
{
    if ( !isdefined( self.delay_suspend_vehicle_convoy ) || !isdefined( self.delay_suspend_vehicle_convoy.objidnum ) )
        return;

    objective_showtoplayersinmask( self.delay_suspend_vehicle_convoy.objidnum );
    objective_removeallfrommask( self.delay_suspend_vehicle_convoy.objidnum );

    foreach ( var_1 in self.subscribedinstances )
    {
        foreach ( var_3 in scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_1.team, var_1.squadindex ) )
        {
            if ( !var_3 scripts\mp\gametypes\br_public.gsc::isplayeringulag() )
                objective_addclienttomask( self.delay_suspend_vehicle_convoy.objidnum, var_3 );
        }
    }
}

delay_then_run_wave_override( var_0 )
{
    if ( !isdefined( self.delay_suspend_vehicle_convoy ) || !isdefined( self.delay_suspend_vehicle_convoy.objidnum ) )
        return;

    objective_removeclientfrommask( self.delay_suspend_vehicle_convoy.objidnum, var_0 );
}

delay_vehicle_to_push_explode_sequence( var_0 )
{
    if ( !isdefined( self.delay_suspend_vehicle_convoy ) || !isdefined( self.delay_suspend_vehicle_convoy.objidnum ) )
        return;

    objective_addclienttomask( self.delay_suspend_vehicle_convoy.objidnum, var_0 );
}

delayed_depositing()
{
    self endon( "removed" );
    waittillframeend;
    delaydropbags();
}

getcargotruckspawns()
{
    foreach ( var_1 in self.delay_suspend_vehicle_convoy.visuals )
        var_1 delete();

    if ( isdefined( self.delay_suspend_vehicle_convoy.flagmodel ) )
        self.delay_suspend_vehicle_convoy.flagmodel delete();

    if ( isdefined( self.delay_suspend_vehicle_convoy.scriptable ) )
        self.delay_suspend_vehicle_convoy.scriptable delete();

    if ( isdefined( self.delay_suspend_vehicle_convoy.trigger ) )
    {
        self.delay_suspend_vehicle_convoy.trigger delete();
        self.delay_suspend_vehicle_convoy.trigger = undefined;
    }

    self.delay_suspend_vehicle_convoy thread gameobjectreleaseid_delayed();
    self.delay_suspend_vehicle_convoy notify( "deleted" );
}

gameobjectreleaseid_delayed()
{
    wait 0.1;
    scripts\mp\gameobjects::releaseid();
}

_id_11F54()
{
    if ( isdefined( level.checkpoint_add_carepackage_munitions ) )
        return;

    level.disableinitplayergameobjects = 0;
    level.checkpoint_add_carepackage_munitions = 120;
    level.iconneutral = "waypoint_captureneutral_br";
    level.iconcapture = "waypoint_capture_br";
    level.icondefend = "waypoint_defend_br";
    level.icondefending = "waypoint_defending_br";
    level.iconcontested = "waypoint_contested_br";
    level.icontaking = "waypoint_taking_br";
    level.iconlosing = "waypoint_losing_br";
    level.play_ai_taking_to_convoy_firsttime = "icon_waypoint_ot";
    addscriptedspawnpoints( "icon_waypoint_dom_br", "neutral", "MP_BR_INGAME/DOM_CAPTURE", 0 );
    addscriptedspawnpoints( "waypoint_taking_br", "friendly", "MP_INGAME_ONLY/OBJ_TAKING_CAPS", 1 );
    addscriptedspawnpoints( "waypoint_capture_br", "enemy", "MP_BR_INGAME/DOM_CAPTURE", 0 );
    addscriptedspawnpoints( "waypoint_defend_br", "friendly", "MP_INGAME_ONLY/OBJ_DEFEND_CAPS", 0 );
    addscriptedspawnpoints( "waypoint_defending_br", "friendly", "MP_INGAME_ONLY/OBJ_DEFENDING_CAPS", 0 );
    addscriptedspawnpoints( "waypoint_blocking_br", "friendly", "MP_INGAME_ONLY/OBJ_BLOCKING_CAPS", 0 );
    addscriptedspawnpoints( "waypoint_blocked_br", "friendly", "MP_INGAME_ONLY/OBJ_BLOCKED_CAPS", 0 );
    addscriptedspawnpoints( "waypoint_losing_br", "enemy", "MP_INGAME_ONLY/OBJ_LOSING_CAPS", 1 );
    addscriptedspawnpoints( "waypoint_captureneutral_br", "neutral", "MP_BR_INGAME/DOM_CAPTURE", 0 );
    addscriptedspawnpoints( "waypoint_contested_br", "contest", "MP_INGAME_ONLY/OBJ_CONTESTED_CAPS", 1 );
    addscriptedspawnpoints( "waypoint_dom_target_br", "neutral", "MP_INGAME_ONLY/OBJ_TARGET_CAPS", 0 );
    addscriptedspawnpoints( "icon_waypoint_target_br", "neutral", "MP_INGAME_ONLY/OBJ_TARGET_CAPS", 0 );
    addscriptedspawnpoints( "icon_waypoint_ot", "neutral", "MP_INGAME_ONLY/OBJ_OTFLAGLOC_CAPS", 0 );
}

addscriptedspawnpoints( var_0, var_1, var_2, var_3 )
{
    level.waypointcolors[var_0] = var_1;
    level.waypointbgtype[var_0] = 1;
    level.waypointstring[var_0] = var_2;
    level.waypointshader[var_0] = "ui_mp_br_mapmenu_icon_dom_objective";
    level.waypointpulses[var_0] = var_3;
}

delay_turn_off_tum_display( var_0, var_1, var_2, var_3 )
{
    if ( var_1 < 1.0 && !level.gameended )
        trial_ui_retry_disabled( var_1, var_0 );

    if ( var_1 > 0.05 && var_2 && !istrue( self.didstatusnotify ) )
        self.didstatusnotify = 1;
}

delay_thirdpersoncamera( var_0 )
{
    if ( !isdefined( self.start_pipe_room_menu ) || !self.start_pipe_room_menu )
    {
        self.start_pipe_room_menu = 1;

        if ( isdefined( self.traincar ) )
        {
            if ( isdefined( level._id_1303C ) && istrue( level._id_1303C.delay_start_player_grenade_fire_monitor ) )
            {
                var_1 = self.traincar.delay_start_escort_protect_hvi_objective + ( 200, 0, 0 );
                var_2 = self.traincar.origin + rotatevector( var_1, self.traincar.angles );
                level thread scripts\mp\gametypes\br_quest_util.gsc::_id_12BAA( var_2, "dom", 3 );
            }
        }
        else
            level thread scripts\mp\gametypes\br_quest_util.gsc::_id_12BAA( self.curorigin, "dom" );

        foreach ( var_4 in level.players )
        {
            if ( isdefined( var_4 ) && isalive( var_4 ) && ( var_4.team != var_0.team || var_4.squadindex != var_0.squadindex ) )
                var_4 thread scripts\mp\hud_message::showsplash( "br_capshoot_quest_alert" );
        }

        var_6 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_0.team, var_0.squadindex );

        foreach ( var_8 in var_6 )
            var_8 notify( "calloutmarkerping_warzoneKillQuestIcon" );
    }
}

delay_turn_off_red_lights_along_track( var_0 )
{
    foreach ( var_2 in self.locale.subscribedinstances )
    {
        var_3 = var_2.team;

        if ( var_3 == var_0.team && var_3 == self.locale.team )
        {
            var_4 = scripts\mp\gametypes\br_quest_util.gsc::mine_caves_cell_support_internal( var_0.team );
            var_5 = scripts\mp\gametypes\br_quest_util.gsc::getquestindex( var_2.questcategory );
            var_6 = scripts\mp\gametypes\br_quest_util.gsc::mine_caves_ambush( scripts\mp\gametypes\br_quest_util.gsc::mine_cave_turrets( var_2.questcategory ) );
            var_7 = spawnstruct();
            var_7.target_show_damage_damage_watch = scripts\mp\gametypes\br_quest_util.gsc::target_wavespawning_to_jammer5( var_5, var_4, var_6 );
            self.squadindex = var_2.squadindex;
            scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_3, "br_capshoot_quest_complete_noplunder", var_7 );
            scripts\mp\gametypes\br_quest_util.gsc::global_stealth_broken_func( var_3, var_0, 8, var_5 );
            var_8 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_0.team, var_0.squadindex );
            level thread scripts\mp\gametypes\br_public.gsc::brleaderdialog( "mission_cap_success", 1, var_8, 0, 1 );
            var_2._id_11B21 = self.flagmodel.origin;
            var_2._id_11B1E = self.flagmodel.angles;
            var_2.result = "success";

            if ( isdefined( self.assisttouchlist ) )
            {
                if ( isdefined( self.assisttouchlist[var_3] ) )
                {
                    var_9 = getarraykeys( self.assisttouchlist[var_3] );

                    foreach ( var_11 in var_9 )
                    {
                        var_12 = self.assisttouchlist[var_3][var_11].player;

                        if ( isdefined( var_12.owner ) )
                            var_12 = var_12.owner;

                        if ( !isplayer( var_12 ) )
                            continue;

                        var_12 scripts\cp\helicopter\chopper_boss::_id_11A49( "t9_ch_global_complete_recon_objective_for_operator_mission", 1 );
                        var_12 scripts\cp\helicopter\chopper_boss::_id_11A49( "t9_ch_global_complete_recon_objective_for_operator_mission_op2", 1 );
                        var_2 scripts\mp\gametypes\br_quest_util.gsc::zombiepingtime( var_12 );
                    }
                }
            }

            continue;
        }

        scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_3, "br_capshoot_quest_failure" );
        var_8 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_0.team, var_0.squadindex );
        level thread scripts\mp\gametypes\br_public.gsc::brleaderdialog( "mission_gen_fail", 1, var_8 );
        var_2.result = "fail";
    }

    self.locale thread scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
}

delay_turn_laser_trap_back_on( var_0, var_1, var_2 )
{
    scripts\mp\gametypes\obj_dom.gsc::dompoint_onuseend( var_0, var_1, var_2 );
}

trial_ui_retry_disabled( var_0, var_1 )
{
    if ( !isdefined( self.lastsfxplayedtime ) )
        self.lastsfxplayedtime = gettime();

    if ( self.lastsfxplayedtime + 995 < gettime() )
    {
        self.lastsfxplayedtime = gettime();
        var_2 = "";
        var_0 = int( floor( var_0 * 10 ) );
        var_2 = "mp_dom_capturing_tick_0" + var_0;
        self.visuals[0] playsoundtoteam( var_2, var_1 );
    }
}

delay_turn_on_headlights( var_0, var_1, var_2 )
{
    switch ( var_1 )
    {
        case "contested":
        case "idle":
        case "off":
            return 0;
        default:
            var_1 = "using";

            if ( isdefined( var_2 ) )
                var_1 = var_1 + var_2;

            self.scriptable setscriptablepartstate( var_0, var_1 );

            if ( var_0 == "pulse" )
                self.scriptable setscriptablepartstate( "flag", var_1 );

            return 1;
    }
}

delaydestroyhudelem( var_0 )
{
    var_1 = var_0.team;

    foreach ( var_3 in self.locale.subscribedinstances )
    {
        if ( isdefined( var_3 ) )
        {
            if ( var_3.team == var_1 )
                return 1;
        }
    }

    return 0;
}

delay_start_infiltrate_objective()
{
    while ( self._id_12550.delay_suspend_vehicle_convoy.numtouching[self.id] )
        waitframe();

    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_capshoot_quest_timer_expired" );
    var_0 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( self.team, self.squadindex );
    level thread scripts\mp\gametypes\br_public.gsc::brleaderdialog( "mission_gen_fail", 1, var_0 );
}

ml_p3_func( var_0 )
{
    var_1 = spawnstruct();
    var_1._id_11D1F = "questPointsArray";
    var_1._id_11D1B = ( var_0.origin[0], var_0.origin[1], 0 );
    var_1._id_11D22 = getdvarfloat( "scr_br_cap_search_max_radius", 7500 );
    var_1._id_11D23 = 0;
    var_1._id_11D20 = getdvarfloat( "scr_br_cap_search_ideal_max_radius", 5000 );
    var_1._id_11D21 = getdvarfloat( "scr_br_cap_search_ideal_min_radius", 2500 );
    var_1.watch_for_players_activating_juggmaze_map = 7;
    var_1.mintime = getdvarfloat( "scr_br_cap_quest_capture_time", 30 );
    var_1._id_11D1D = 1;
    var_1._id_11A51 = var_0._id_11A51;

    if ( keypadsetup( var_0._id_125DE ) )
    {
        if ( var_1._id_11D22 < level.watch_for_damage )
            var_1._id_11D22 = level.watch_for_damage;

        var_1._id_11D20 = level.watch_for_damage;
        var_1._id_11D21 = level.watch_for_damage_on_trap;
    }

    if ( istrue( var_0.stimmodelattached ) )
    {
        var_1._id_11D1F = "questPointsArrayWZTrain";
        var_1._id_12B82 = 1;
    }

    var_2 = getdvarint( "scr_br_questCapDistMin", -1 );
    var_3 = getdvarint( "scr_br_questCapDistMax", -1 );

    if ( var_2 >= 0 )
        var_1._id_11D21 = var_2;

    if ( var_3 >= 0 )
        var_1._id_11D20 = var_3;

    return var_1;
}

keypadsetup( var_0 )
{
    var_1 = 0;
    var_2 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "overrideQuestSearchParams", var_0 );

    if ( isdefined( var_2 ) )
        return var_2;

    var_3 = scripts\mp\utility\game::missions_clearinappropriaterewards();

    switch ( var_3 )
    {
        case "mini":
        case "risk":
        case "dmz":
            var_1 = 1;
            break;
    }

    return var_1;
}
