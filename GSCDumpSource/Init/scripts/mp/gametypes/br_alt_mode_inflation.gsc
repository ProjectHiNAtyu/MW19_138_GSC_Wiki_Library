// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    if ( !getdvarint( "scr_br_alt_mode_inflation", 0 ) || scripts\mp\utility\game::missions_clearinappropriaterewards() == "truckwar" )
        return;

    level.checkforlaststandfinish = spawnstruct();
    level.checkforlaststandfinish.disabled = 0;
    level.checkforlaststandfinish.cost = getdvarint( "scr_br_alt_mode_inflation_cost", 45 );
    level.checkforlaststandfinish.heatcounter = getdvarfloat( "scr_br_alt_mode_inflation_drop_percent", 1.0 );
    level.checkforlaststandfinish.healthpool = getdvarint( "scr_br_alt_mode_inflation_drop_max", -1 );
    level.checkforlaststandfinish._id_11A8C = getdvarfloat( "scr_br_alt_mode_inflation_respawn_delay", 10.0 );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "playerDropPlunderOnDeath", ::playerdropplunderondeath );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "circleTimer", ::circletimer );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "postPlunder", ::vfx_height );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "markPlayerAsEliminatedOnKilled", ::set_spotlight_target_loc );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "playerGulagAutoWinWait", ::unsetreduceregendelayonkill );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "triggerRespawnOverlay", ::_id_1292D );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "assignSpectatorToSpectatePlayer", ::assignspectatortospectateplayer );

    if ( !getdvarint( "scr_br_alt_mode_inflation_gulag", 0 ) )
        scripts\mp\gametypes\br_gametypes.gsc::give_fists( "gulag" );

    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "useTokenToReviveTeammate" );
    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "gulagWinnerRestoreLoadoutUseGulag" );
    thread playerregendelayspeed();
}

playerregendelayspeed()
{
    while ( !isdefined( level.onplayerspawncallbacks ) )
        waitframe();

    scripts\mp\utility\spawn_event_aggregator::registeronplayerspawncallback( ::onplayerspawned );
}

onplayerspawned()
{
    _id_12B20();
}

ui_show_dist()
{
    return istrue( level.br_prematchstarted ) && !istrue( self.checkpointstruct ) && !level.checkforlaststandfinish.disabled && self.plundercount >= level.checkforlaststandfinish.cost;
}

playerdropplunderondeath( var_0, var_1 )
{
    var_2 = self.plundercount;

    if ( istrue( self.respawningfromtoken ) )
    {
        var_2 = var_2 - level.checkforlaststandfinish.cost;

        if ( var_2 < 0 )
            var_2 = 0;
    }

    var_3 = int( var_2 * level.checkforlaststandfinish.heatcounter );
    var_2 = var_2 - var_3;
    scripts\mp\gametypes\br_plunder.gsc::playersetplundercount( var_2, minigun_manager() );

    if ( level.checkforlaststandfinish.healthpool >= 0 )
        var_3 = int( min( level.checkforlaststandfinish.healthpool, var_3 ) );

    scripts\mp\gametypes\br_plunder.gsc::heli_leaving_monitor( var_3, var_0 );
    return 1;
}

circletimer( var_0 )
{
    if ( !var_0 )
        scripts\mp\gametypes\br_gulag.gsc::_id_11F6B();

    var_1 = scripts\mp\gametypes\br_gulag.gsc::manned_turret_createhintobject();

    if ( !level.checkforlaststandfinish.disabled && var_0 >= var_1 )
    {
        level.checkforlaststandfinish.disabled = 1;

        foreach ( var_3 in level.players )
        {
            if ( !isdefined( var_3 ) || !isalive( var_3 ) )
                continue;

            var_3 _id_12B20();
            scripts\mp\gametypes\br_killstreaks.gsc::get_actual_grenade_name( var_3, "cash_deploy_closed", undefined, 2 );
        }
    }

    return 0;
}

vfx_height( var_0 )
{
    var_1 = 0;

    if ( isdefined( var_0 ) )
        var_1 = var_0._id_120B9;

    _id_12B20( var_1 );
}

_id_12B20( var_0 )
{
    if ( ui_show_dist() )
    {
        if ( !scripts\mp\gametypes\br_public.gsc::hasrespawntoken() )
        {
            scripts\mp\gametypes\br_pickups.gsc::addrespawntoken( 1 );

            if ( !istrue( var_0 ) )
                thread scripts\mp\hud_message::showsplash( "br_inflation_respawn_token_pickup" );
        }
    }
    else if ( scripts\mp\gametypes\br_public.gsc::hasrespawntoken() )
    {
        scripts\mp\gametypes\br_pickups.gsc::removerespawntoken();

        if ( !istrue( var_0 ) )
            thread scripts\mp\hud_message::showsplash( "br_inflation_respawn_token_lost" );
    }
}

_id_1205A( var_0 )
{
    waittillframeend;
    scripts\mp\utility\lower_message::setlowermessageomnvar( 9, int( gettime() + var_0 * 1000 ) );
    scripts\mp\gametypes\br_gulag.gsc::_id_11EE0( 1 );
    thread overtimebuiltintomatchtimer( var_0 );
}

overtimebuiltintomatchtimer( var_0 )
{
    self endon( "disconnect" );

    if ( isdefined( var_0 ) )
        wait( var_0 );

    scripts\mp\gametypes\br_gulag.gsc::_id_11EE0( 0 );
    scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
}

minigun_manager()
{
    var_0 = spawnstruct();
    var_0._id_120B9 = 1;
    return var_0;
}

set_spotlight_target_loc()
{
    return 0;
}

unsetreduceregendelayonkill( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
    {
        if ( level.checkforlaststandfinish._id_11A8C )
        {
            var_2 = level.checkforlaststandfinish._id_11A8C;
            thread _id_1205A( var_2 );
            wait( var_2 );
            return 1;
        }
    }

    return 0;
}

_id_1292D( var_0 )
{
    return 1;
}

assignspectatortospectateplayer( var_0, var_1 )
{
    var_0 notify( "assignSpectatorToSpectatePlayerWaitForTeam" );

    if ( istrue( level.cop_car_initomnvars ) )
        return 0;

    if ( !isdefined( var_1 ) || !isplayer( var_1 ) || !isalive( var_1 ) && !isdefined( var_1._id_12536 ) )
        return 0;

    if ( var_0.team == var_1.team )
        return 0;

    if ( !scripts\mp\utility\teams::getteamdata( var_0.team, "aliveCount" ) )
        return 0;

    thread br_ammo_update_ammotype_weapons( var_0 );
    return 1;
}

br_ammo_update_ammotype_weapons( var_0 )
{
    level endon( "brSpawnPlayersEnding" );
    var_0 endon( "assignSpectatorToSpectatePlayerWaitForTeam" );
    var_0 endon( "death_or_disconnect" );
    var_0 scripts\mp\gametypes\br_spectate.gsc::valuehud();
    var_0 setclientomnvar( "ui_show_spectateHud", var_0 getentitynumber() );
    wait 1.0;
    var_1 = scripts\mp\gametypes\br_spectate.gsc::lootcontentsadjustkillchain( var_0 );
    thread scripts\mp\gametypes\br_spectate.gsc::assignspectatortospectateplayer( var_0, var_1 );
}
