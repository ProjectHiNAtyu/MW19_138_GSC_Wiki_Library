// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    var_0 = scripts\mp\gametypes\br_quest_util.gsc::registerquestcategory( "blueprintextract_easterevent", 1 );

    if ( !var_0 )
        return;

    scripts\mp\gametypes\br_quest_util.gsc::_id_1195C( "blueprintextract_easterevent", ::initializerocketfuelreadings );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "blueprintextract_easterevent", ::initialize_registered_create_script_files );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestlocale( "blueprintextract_easterevent_locale" );
    scripts\mp\gametypes\br_quest_util.gsc::registercreatequestlocale( "blueprintextract_easterevent_locale", ::initevents );
    scripts\mp\gametypes\br_quest_util.gsc::registercheckiflocaleisavailable( "blueprintextract_easterevent_locale", ::initdroplocations );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "blueprintextract_easterevent_locale", ::inithelipropanims );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestcircletick( "blueprintextract_easterevent_locale", ::initendcameralocations );
    scripts\mp\gametypes\br_quest_util.gsc::zvelscale( "blueprintextract_easterevent_locale", ::initheadlessoperatorcustomization );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11950( "blueprintextract_easterevent_locale", ::initheliextractanims );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "blueprintextract_easterevent_locale" ).nextid = 0;
    scripts\mp\gametypes\br_quest_util.gsc::watch_for_player_going_belowmap_or_oob( "blueprintextract_easterevent", 1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11951( "blueprintextract_easterevent", ::initbunker );

    if ( !istrue( level.br_plunder_enabled ) )
    {
        scripts\mp\gametypes\br_plunder.gsc::playersetomnvarkeypad();
        scripts\mp\gametypes\br_plunder.gsc::playersetplunderomnvar();
        level._effect["vfx_extract_smoke"] = loadfx( "vfx/iw8_br/gameplay/vfx_br_adv_supply_drop_marker" );
        scripts\mp\gametypes\br_plunder.gsc::vehicle_occupancy_isenemytoplayer();
        scripts\mp\gametypes\br_plunder.gsc::playersetwasingulag();
    }

    if ( !scripts\mp\gametypes\br_plunder.gsc::quickdropremoveplunderfrominventory() )
        scripts\engine\scriptable::scriptable_addusedcallback( scripts\mp\gametypes\br_plunder.gsc::plundersiteused );

    var_1 = getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "risk";
    level.initial_allies = scripts\engine\utility::ter_op( var_1, "brloot_quest_extract_site_plunder", "brloot_quest_extract_site_br" );
    level.inithelirepository = scripts\engine\utility::ter_op( var_1, "brloot_quest_extract_site_model_plunder", "brloot_quest_extract_site_model_br" );

    if ( !isdefined( level.vehicle_travel_player_disconnect_monitor.data["extractHelipadPlunder"].wait_for_enemies_inarea ) )
    {
        level.vehicle_travel_player_disconnect_monitor.data["extractHelipadPlunder"].wait_for_enemies_inarea = level.vehicle_travel_player_disconnect_monitor.data["extractHelipadPlunder"]._id_12B6D;
        level.vehicle_travel_player_disconnect_monitor.data["extractHelipadPlunder"]._id_12B6D = ::initcallbacks;
    }

    if ( !isdefined( level.vehicle_travel_player_disconnect_monitor.data["extractHelipadBR"].wait_for_enemies_inarea ) )
    {
        level.vehicle_travel_player_disconnect_monitor.data["extractHelipadBR"].wait_for_enemies_inarea = level.vehicle_travel_player_disconnect_monitor.data["extractHelipadBR"]._id_12B6D;
        level.vehicle_travel_player_disconnect_monitor.data["extractHelipadBR"]._id_12B6D = ::initcallbacks;
    }

    game["dialog"]["mission_extract_accept"] = "bm_exfil_arrived";
    game["dialog"]["mission_extract_success"] = "contract_misc_success";
}

initcallbacks( var_0, var_1, var_2 )
{
    var_1.respawn_state_hidden = var_0.index;
    var_1 notify( "heliDeposit" );

    if ( var_2 > 0 && istrue( level.br_plunder_enabled ) && ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "risk" ) )
        [[ level.vehicle_travel_player_disconnect_monitor.data["extractHelipadPlunder"].wait_for_enemies_inarea ]]( var_0, var_1, var_2 );
}

initialize_registered_create_script_files()
{
    scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
    scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehidefromteam( self.team );
    initindividualgastrap( 0, undefined );

    if ( isdefined( self.determine_starting_breadcrumb ) )
        self.determine_starting_breadcrumb _id_12A9F();

    self._id_12550 thread initlethalmaxoffsetmap();
}

inithelipropanims()
{
    foreach ( var_1 in self.subscribedinstances )
        var_1 thread scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();

    scripts\mp\gametypes\br_quest_util.gsc::getcodecomputerdisplaycode();
    self.open_selected_doors thread _id_11A1A();
}

initializerocketfuelreadings()
{
    var_0 = minigun_attack_max_cooldown( self );
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::is_point_in_cylinder( "blueprintextract_easterevent", var_0 );

    if ( !isdefined( var_1 ) )
        return 0;

    self._id_11A51 = var_1;
    return 1;
}

initevents( var_0 )
{
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "blueprintextract_easterevent_locale" ).nextid++;
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::createlocaleinstance( "blueprintextract_easterevent_locale", "blueprintextract_easterevent", "ExtractPoint:" + scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "blueprintextract_easterevent_locale" ).nextid );

    if ( !isdefined( var_0 ) )
    {
        var_1.curorigin = ( 0, 0, 0 );
        var_1.enabled = 0;
        return var_1;
    }

    var_2 = "activeCurrent";

    if ( scripts\cp_mp\utility\game_utility::getmapname() == "mp_kstenod" || level.mapname == "mp_escape2_pm" )
        var_2 = "activeCurrentNight";

    var_1.playerlist = scripts\mp\utility\teams::getteamdata( self.team, "players" );
    var_1.open_cac_slot = spawn( "script_model", var_0.origin );
    var_1.open_cac_slot setmodel( level.inithelirepository );
    var_3 = var_1.playerlist[0];
    var_1.open_cac_slot setotherent( var_3 );
    var_1.open_cac_slot setscriptablepartstate( level.initial_allies, var_2 );
    var_1.open_cac_slot.issmokinggun = 1;
    var_1.open_selected_doors = var_1.open_cac_slot getlinkedscriptableinstance();
    var_1.open_selected_doors.allassassin_updatewait = "active";
    var_1.open_selected_doors.allassassin_teamcompare = "activeCurrent";
    var_1.open_selected_doors.give_deployable_crate = "hidden";
    var_1.open_selected_doors.getxmike109impactfunc = "hidden";
    var_1.open_selected_doors.watch_for_icbm_spawners = 0;
    var_1.open_selected_doors.isteamonlycrate = 1;
    var_1.script_model_spawn_and_use = var_0;
    var_1 scripts\mp\gametypes\br_quest_util.gsc::force_bleedout_all_downed_players( "ui_mp_br_mapmenu_icon_extraction_objective", "current", var_0.origin );
    var_1.lastcircletick = -1;
    var_1.curorigin = var_0.origin;
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "blueprintextract_easterevent_locale", var_1 );
    return var_1;
}

initextractionlocations( var_0 )
{
    var_1 = spawnstruct();
    var_1.origin = var_0;
    var_2 = scripts\mp\gametypes\br_extract_quest.gsc::minigun_attack_max_cooldown( var_1 );
    var_3 = scripts\mp\gametypes\br_quest_util.gsc::is_point_in_cylinder( "blueprintextract_easterevent", var_2 );
    return isdefined( var_3 );
}

_id_11A1A()
{
    if ( getdvar( "scr_br_gametype", "" ) != "dmz" && getdvar( "scr_br_gametype", "" ) != "risk" )
        self setscriptablepartstate( level.initial_allies, "hidden" );

    if ( isdefined( self.heli ) )
        self waittill( "heli_left" );

    self getscriptablelinkedentity() delete();
}

initdroplocations( var_0 )
{

}

initendcameralocations( var_0, var_1 )
{
    if ( !isdefined( self.open_cac_slot ) )
        return;

    var_2 = gettime();

    if ( self.lastcircletick == var_2 )
        return;

    self.lastcircletick = var_2;
    var_3 = distance2d( self.curorigin, var_0 );

    if ( var_3 > var_1 )
    {
        foreach ( var_5 in self.subscribedinstances )
        {
            scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_5.team, "br_blueprint_extract_quest_circle_failure_easterevent" );
            level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_obj_circle_fail", var_5.team, 1 );
            var_5.result = "circle";
        }

        scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
    }
}

initheadlessoperatorcustomization( var_0 )
{
    initcashtracking( var_0 );
}

initheliextractanims( var_0 )
{
    if ( var_0.team == self.subscribedinstances[0].team )
        initialize_water_trap( var_0 );
}

initleaderboardstat()
{
    objective_showtoplayersinmask( self.objectiveiconid );
    objective_removeallfrommask( self.objectiveiconid );

    foreach ( var_1 in self.subscribedinstances )
    {
        foreach ( var_3 in scripts\mp\utility\teams::getteamdata( var_1.team, "players" ) )
        {
            if ( !var_3 scripts\mp\gametypes\br_public.gsc::isplayeringulag() )
                objective_addclienttomask( self.objectiveiconid, var_3 );
        }
    }
}

initcashtracking( var_0 )
{
    objective_removeclientfrommask( self.objectiveiconid, var_0 );
}

initialize_water_trap( var_0 )
{
    objective_addclienttomask( self.objectiveiconid, var_0 );
}

initlethalmaxoffsetmap()
{
    self endon( "removed" );
    waittillframeend;
    initleaderboardstat();
}

initindividualgastrap( var_0, var_1 )
{
    var_2 = 0;
    var_3 = -1;

    if ( var_0 )
    {
        var_2 = var_1 getentitynumber();
        var_3 = self.initialwinningteam;
    }

    foreach ( var_5 in scripts\mp\utility\teams::getteamdata( self.team, "players" ) )
    {
        var_5 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivesetparameter( var_2 );
        var_5 scripts\mp\gametypes\br_quest_util.gsc::_id_12A39( var_3 );
        var_6 = isdefined( var_1 ) && var_5 == var_1;
        var_7 = var_0 && var_6;
        var_5 setclientomnvar( "ui_br_has_extract_bag", var_7 );
    }
}

takequestitem( var_0 )
{
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::looping_path( self.team );

    if ( isdefined( var_1 ) && var_1.size > 0 )
    {
        foreach ( var_3 in var_1 )
            var_3.playoverwatch_dialogue scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
    }

    var_5 = scripts\mp\gametypes\br_quest_util.gsc::createquestinstance( "blueprintextract_easterevent", self.team, var_0.index, var_0 );
    var_5 scripts\mp\gametypes\br_quest_util.gsc::registerteamonquest( self.team, self );
    var_5.team = self.team;
    var_5.tablet = var_0;
    var_5.initialwinningteam = var_0.initialwinningteam;
    var_6 = getdvarint( "scr_br_blueprintextract_easterevent_questTime", 240 );
    var_5 scripts\mp\gametypes\br_quest_util.gsc::watch_for_player_in_gulag( var_6, 4 );
    var_7 = minigun_attack_max_cooldown( var_0 );
    var_8 = var_5 scripts\mp\gametypes\br_quest_util.gsc::requestquestlocale( "blueprintextract_easterevent_locale", var_7, 1 );

    if ( !var_8.enabled )
    {
        var_5.result = "no_locale";
        var_5 scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
        return;
    }

    var_8 initleaderboardstat();
    scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshowtoteam( "blueprintextract_easterevent", self.team );
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "blueprintextract_easterevent", var_5 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_124A9( "blueprintextract_easterevent", self, self.team );

    if ( !level.br_plunder_enabled )
    {
        foreach ( var_10 in scripts\mp\utility\teams::getteamdata( self.team, "players" ) )
            var_10.plundercount = 0;
    }

    var_12 = spawnstruct();
    var_12.excludedplayers = [];
    var_12.excludedplayers[0] = self;
    var_12.vehicleoutline = scripts\mp\gametypes\br_quest_util.gsc::min_z( "blueprintextract_easterevent", scripts\mp\gametypes\br_quest_util.gsc::mine_caves_cell_support_internal( self.team ) );
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_blueprint_extract_quest_start_team_easterevent", var_12 );
    scripts\mp\gametypes\br_quest_util.gsc::displayplayersplash( self, "br_blueprint_extract_quest_start_tablet_finder_easterevent", var_12 );
    scripts\mp\gametypes\br_quest_util.gsc::global_stealth_broken_func( var_5.team, self, 6, scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "blueprintextract_easterevent" ) );
    level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_extract_accept", var_5.team, 1 );
    _id_11F9D( var_8, var_0.initialwinningteam );
    var_5.determine_starting_breadcrumb = self;

    foreach ( var_10 in level.players )
    {
        if ( var_10 != self )
            var_8.open_selected_doors disablescriptablepartplayeruse( level.initial_allies, var_10 );
    }

    var_5 initindividualgastrap( 1, self );
    var_5 thread _id_12F70( self );
    var_5 thread _id_12F2D( self );
}

_id_11F9D( var_0, var_1 )
{
    self.initialize_create_script = 1;
    self.initialize_create_script_file = var_0.open_selected_doors.index;
    self.initialize_flag_role = "brloot_blueprintextract_tablet";
    self.initialize_switches_pattern = var_1;
}

_id_12A9F()
{
    self.initialize_create_script = undefined;
    self.initialize_create_script_file = undefined;
    self.initialize_flag_role = undefined;
    self.initialize_switches_pattern = undefined;
}

initbunker11keypad( var_0 )
{
    if ( self hasweapon( var_0.weapon ) )
    {
        var_1 = getcompleteweaponname( "iw8_fists_mp" );
        var_2 = scripts\cp_mp\utility\inventory_utility::iscurrentweapon( var_0.weapon );
        scripts\cp_mp\utility\inventory_utility::_takeweapon( var_0.weapon );
        scripts\cp_mp\utility\inventory_utility::_giveweapon( var_1, undefined, undefined, 1 );

        if ( var_2 )
            scripts\cp_mp\utility\inventory_utility::_switchtoweaponimmediate( var_1 );
    }
}

initbrmechanics( var_0 )
{
    if ( !isdefined( self.initialize_laser_trap_entity ) )
        return 0;

    return self.initialize_laser_trap_entity == var_0;
}

_id_12F71( var_0 )
{
    self endon( "removed" );

    for (;;)
    {
        var_0 waittill( "weapon_change" );

        if ( isdefined( var_0 ) && !var_0 hasweapon( self.weapon ) )
        {
            var_1 = scripts\mp\gametypes\br_pickups.gsc::playersetattractiontime();
            var_2 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_1, var_0.origin, var_0.angles, var_0 );
            var_3 = scripts\mp\gametypes\br_pickups.gsc::spawnpickup( "brloot_blueprintextract_tablet", var_2 );
            var_3._id_11A51 = self._id_12550.script_model_spawn_and_use;
            level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "br_blueprint_extract_quest_failure", var_0.team, 1, 1 );
            scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_0.team, "br_blueprint_extract_quest_failure_easterevent" );
            var_0 _id_12A9F();
            self.result = "fail";
            thread scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
            return;
        }
    }
}

_id_12F70( var_0 )
{
    self endon( "removed" );
    var_1 = var_0.team;

    for (;;)
    {
        var_0 waittill( "death_or_disconnect" );
        level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "br_blueprint_extract_quest_failure", var_1, 1, 1 );
        scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_1, "br_blueprint_extract_quest_failure_easterevent" );

        if ( isdefined( var_0 ) )
            var_0 _id_12A9F();

        self.result = "fail";
        thread scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
        return;
    }
}

_id_12F2D( var_0 )
{
    self endon( "removed" );

    for (;;)
    {
        var_0 waittill( "heliDeposit" );

        if ( var_0.respawn_state_hidden == self._id_12550.open_selected_doors.index )
        {
            var_1 = "blueprint_unlock_" + self.initialwinningteam;
            var_2 = scripts\mp\gametypes\br_quest_util.gsc::mine_caves_runner( self.initialwinningteam );

            foreach ( var_4 in scripts\mp\utility\teams::getteamdata( self.team, "players" ) )
            {
                var_4 scripts\cp\helicopter\chopper_boss::support_box_use_logic( var_1 );

                if ( var_2 > 0 )
                    var_4 thread scripts\mp\hud_message::showsplash( "br_unlockable_weapon_splash", var_2 );
            }

            self._id_12550.open_selected_doors.watch_for_icbm_spawners = 1;
            glintfx( var_0 );
            var_6 = scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "blueprintextract_easterevent" );
            scripts\mp\gametypes\br_quest_util.gsc::global_stealth_broken_func( self.team, var_0, 8, var_6 );
            level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_extract_success", self.team, 1, 1 );
            self._id_11B21 = self._id_12550.open_cac_slot.origin;
            self._id_11B1E = self._id_12550.open_cac_slot.angles;
            self.result = "success";
            thread scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
            return;
        }
    }
}

glintfx( var_0 )
{
    level endon( "game_ended" );
    var_1 = self.team;
    var_2 = spawnstruct();
    var_3 = scripts\mp\gametypes\br_quest_util.gsc::mine_caves_cell_support_internal( var_0.team );
    var_4 = scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "blueprintextract_easterevent" );
    var_5 = scripts\mp\gametypes\br_quest_util.gsc::mine_caves_ambush( scripts\mp\gametypes\br_quest_util.gsc::mine_cave_turrets( "blueprintextract_easterevent" ) );
    var_6 = scripts\mp\gametypes\br_quest_util.gsc::mine_caves_runner( self.initialwinningteam );
    var_2.target_show_damage_damage_watch = scripts\mp\gametypes\br_quest_util.gsc::target_wavespawning_to_jammer5( var_4, var_3, var_5, var_6 );
    waitframe();
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_1, "br_blueprint_extract_quest_complete_easterevent", var_2 );
}

minigun_attack_max_cooldown( var_0 )
{
    var_1 = spawnstruct();
    var_1._id_11D1F = "getInactiveHelipads";
    var_1._id_11D1B = ( var_0.origin[0], var_0.origin[1], 0 );
    var_1._id_11D22 = 30000;
    var_1._id_11D23 = 0;
    var_1._id_11D20 = getdvarint( "scr_br_blueprintextract_idealMaxRange", 20000 );
    var_1._id_11D21 = getdvarint( "scr_br_blueprintextract_idealMinRange", 15000 );
    var_1._id_11D1D = 1;
    var_1._id_11A51 = var_0._id_11A51;
    return var_1;
}

initbunker()
{
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_blueprint_extract_quest_timer_expired_easterevent" );
    level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_gen_fail", self.team, 1 );
}
