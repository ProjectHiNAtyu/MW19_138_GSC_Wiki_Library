// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    var_0 = scripts\mp\gametypes\br_quest_util.gsc::registerquestcategory( "x2_bomb", 0 );

    if ( !var_0 )
        return;

    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "x2_bomb" ).should_do_vo_call = getdvarint( "scr_br_x2_bomb_missionTimeBase", 240 );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "x2_bomb", ::_id_13091 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_1194E( "x2_bomb", ::_id_1308F );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11950( "x2_bomb", ::_id_13092 );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestthink( "x2_bomb", ::_id_13094, 0.05 );
    scripts\mp\gametypes\br_quest_util.gsc::watch_for_player_going_belowmap_or_oob( "x2_bomb", 0 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11951( "x2_bomb", ::_id_1308E );
    level.cleanupswaploadoutflags._id_13095 = 0;
    flash_crate_use();
    level._id_13090 = "bomb";
    level._id_13093 = 0;
    scripts\mp\gametypes\br_quest_util.gsc::_id_11957( "x2_signal" );

    if ( !isdefined( level.cleanupswaploadoutflags.traintracesuccesses ) )
        level.cleanupswaploadoutflags.traintracesuccesses = [];
}

flash_crate_use()
{
    var_0 = [];
    var_0[0] = [];
    var_0[1] = [];
    var_0[2] = [];
    var_0[3] = [];
    var_0[4] = [];
    var_0[5] = [];
    var_0[6] = [];
    var_0[7] = [];

    if ( level.mapname == "mp_br_mechanics" )
    {
        var_0[0][var_0[0].size] = ( -483, -2260, 30 );
        var_0[0][var_0[0].size] = ( -483, -2310, 30 );
        var_0[0][var_0[0].size] = ( -483, -2360, 30 );
        var_0[0][var_0[0].size] = ( -483, -2410, 30 );
        var_0[0][var_0[0].size] = ( -483, -2460, 30 );
        var_0[0][var_0[0].size] = ( -483, -2510, 30 );
    }
    else
    {
        var_0[0][var_0[0].size] = ( 4853.5, -1000.75, -108.75 );
        var_0[0][var_0[0].size] = ( 4853.25, -1009.75, -124 );
        var_0[0][var_0[0].size] = ( 4858.25, -951.25, -126 );
        var_0[0][var_0[0].size] = ( 4857.75, -952.75, -105.75 );
        var_0[0][var_0[0].size] = ( 4855.75, -978.25, -121.75 );
        var_0[0][var_0[0].size] = ( 4860, -928.75, -111.5 );
        var_0[0][var_0[0].size] = ( 4861.75, -910, -121.75 );
        var_0[0][var_0[0].size] = ( 4858.75, -927.25, -82.25 );
        var_0[0][var_0[0].size] = ( 4856.5, -939.25, -66.25 );
        var_0[0][var_0[0].size] = ( 4855.25, -976.75, -84.5 );
        var_0[0][var_0[0].size] = ( 4852.25, -987.25, -66.25 );
        var_0[0][var_0[0].size] = ( 4852, -999.25, -82.25 );
        var_0[1][var_0[6].size] = ( -6806.46, -38417.2, 506.8 );
        var_0[1][var_0[6].size] = ( -6775.37, -38400, 508.96 );
        var_0[1][var_0[6].size] = ( -6750.84, -38388.2, 511.33 );
        var_0[1][var_0[6].size] = ( -6734.23, -38366.3, 512.53 );
        var_0[1][var_0[6].size] = ( -6800.38, -38383.6, 506.76 );
        var_0[1][var_0[6].size] = ( -6766.32, -38367.3, 509.96 );
        var_0[1][var_0[6].size] = ( -6734.25, -38561.8, 505 );
        var_0[1][var_0[6].size] = ( -6707.75, -38543.6, 507.5 );
        var_0[1][var_0[6].size] = ( -6684.5, -38529.6, 510 );
        var_0[1][var_0[6].size] = ( -6655.25, -38509.8, 513.75 );
        var_0[1][var_0[6].size] = ( -6688, -38560.6, 505 );
        var_0[1][var_0[6].size] = ( -6660.5, -38541.1, 510.5 );
    }

    foreach ( var_6, var_2 in var_0 )
    {
        scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "x2_bomb" ).getinfectedairdropposition[var_6] = [];

        foreach ( var_5, var_4 in var_2 )
            scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "x2_bomb" ).getinfectedairdropposition[var_6][var_5] = flashtheprops( getdvarvector( "scr_br_x2_bomb_set" + var_6 + "_" + var_5, var_4 ) );
    }
}

_id_13092( var_0 )
{
    if ( !disablespawningforplayer( var_0 ) )
        return;

    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshow( "x2_bomb" );
    scripts\mp\gametypes\br_quest_util.gsc::_id_12058( var_0 );
}

_id_1308E()
{
    level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_gen_fail", self.team, 1 );
}

_id_13091()
{
    if ( isdefined( self.fulton_repositoryusecallback ) )
    {
        foreach ( var_1 in self.playerlist )
        {
            self.fulton_repositoryusecallback.gameobject hidefromplayer( var_1 );
            self.fulton_repositoryusecallback.gameobject disableplayeruse( var_1 );
        }
    }

    getc130airdropheight();
    scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
}

_id_1308F( var_0 )
{
    if ( var_0.team == self.team )
    {
        if ( !scripts\mp\gametypes\br_quest_util.gsc::isteamvalid( var_0.team ) )
        {
            self.result = "fail";
            scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
        }
    }
}

disablespawningforplayer( var_0 )
{
    return scripts\mp\gametypes\br_gametype_x2.gsc::create_usb_anim_rig( var_0 );
}

monitor_player_near_truck( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = scripts\mp\gametypes\br_gametype_x2.gsc::create_vault_assault_loadout_selection( "x2_bomb", var_0, var_1, var_4 );
    var_6 = undefined;
    var_7 = undefined;
    var_8 = undefined;

    switch ( level._id_13090 )
    {
        case "signal":
            var_6 = "x2_signal";
            var_7 = "br_x2_signal_quest_start_team_notify";
            var_8 = "ui_mp_br_pinned_minimap_icon_x2_02";
            break;
        case "bomb":
        default:
            var_6 = "x2_bomb";
            var_7 = "br_x2_bomb_quest_start_team_notify";
            var_8 = "ui_mp_br_pinned_minimap_icon_x2_01";
            break;
    }

    var_5 scripts\mp\gametypes\br_quest_util.gsc::force_bleedout_all_downed_players( var_8, "current", ( 0, 0, 0 ) );
    var_5 _id_11E87();

    foreach ( var_2 in var_5.playerlist )
    {
        var_5 scripts\mp\gametypes\br_quest_util.gsc::_id_12058( var_2 );
        var_2.watch_for_level_weapons_free = var_5.fulton_repositoryusecallback.origin;
    }

    scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshowtoteam( var_6, self.team );
    var_5 scripts\mp\gametypes\br_quest_util.gsc::watch_for_player_in_gulag( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "x2_bomb" ).should_do_vo_call, 4 );
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "x2_bomb", var_5 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_124A9( "x2_bomb", self, self.team );
    var_11 = spawnstruct();
    var_11.vehicleoutline = scripts\mp\gametypes\br_quest_util.gsc::min_z( "x2_bomb", scripts\mp\gametypes\br_quest_util.gsc::mine_caves_cell_support_internal( self.team ) );
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, var_7, var_11 );
    return var_5;
}

bonus_target_score()
{
    return scripts\mp\gametypes\br_gametype_x2.gsc::cp_smuggler_sound_load( "x2_bomb", ::monitor_player_near_truck );
}

flashtheprops( var_0 )
{
    var_1 = spawnstruct();
    var_1.origin = scripts\mp\gametypes\br_public.gsc::helihint_deposit( var_0, 0, -200 ) + ( 0, 0, 20 );
    var_1.gameobject = spawn( "script_model", var_1.origin );
    var_1.gameobject.origin = var_0;
    var_1.gameobject.angles = ( 45, 0, 45 );
    var_1.gameobject hide();
    var_1.gameobject thread _id_1308D();
    return var_1;
}

_id_1308D()
{
    level endon( "game_ended" );
    self endon( "death" );

    for (;;)
    {
        self waittill( "trigger", var_0 );
        var_0 _id_12B6B( self );
        var_0 playlocalsound( "br_pickup_generic" );
    }
}

_id_12B6B( var_0 )
{
    var_1 = scripts\mp\gametypes\br_gametype_x2.gsc::create_ambient_vehicle( "x2_bomb", self );

    if ( level._id_13090 == "signal" )
    {
        thread force_var_to_array( var_0.origin );
        thread vehcolignorelist();
    }
    else
    {
        var_2 = spawn( "script_model", var_0.origin );
        var_2 setmodel( "us_military_tnt_bundle_01" );
        var_2.angles = ( 0, 180, 0 );
        var_2 disableplayeruseforallplayers();
        level.cleanupswaploadoutflags.traintracesuccesses[level.cleanupswaploadoutflags.traintracesuccesses.size] = var_2;
    }

    level._id_13081 = level._id_13081 + scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( self.team, self.squadindex ).size;
    level._id_13093++;
    scripts\mp\gametypes\br_gametype_x2.gsc::createvisualsinfo();
    var_1 weapon_xp_iw8_pi_golf21();
}

_id_11E87()
{
    self.fulton_interactions_disabled = level._id_1307D;
    self.fulton_repositoryusecallback = scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "x2_bomb" ).getinfectedairdropposition[self.fulton_interactions_disabled][level.cleanupswaploadoutflags._id_13095];

    if ( !isdefined( self.fulton_repositoryusecallback ) )
        return;

    level.cleanupswaploadoutflags._id_13095++;
    scripts\mp\gametypes\br_quest_util.gsc::spawn_ending_individual_guys_death( self.fulton_repositoryusecallback.origin + ( 0, 0, 38 ) );

    if ( !istrue( self.fulton_repositoryusecallback.gameobject.parachute_spawn ) )
    {
        self.fulton_repositoryusecallback.gameobject.parachute_spawn = 1;
        self.fulton_repositoryusecallback.gameobject disableplayeruseforallplayers();
        self.fulton_repositoryusecallback.gameobject scripts\mp\gameobjects::sethintobject( undefined, undefined, undefined, lootleadermarkcount(), undefined, "duration_none", undefined, 200, 90, 72, 90 );
        self.fulton_repositoryusecallback.gameobject setuseprioritymax();
    }

    foreach ( var_1 in self.playerlist )
        self.fulton_repositoryusecallback.gameobject enableplayeruse( var_1 );

    self.fulton_repositoryusecallback.gameobject show();
    _id_12AE6();
}

weapon_xp_iw8_pi_golf21()
{
    foreach ( var_1 in self.playerlist )
        var_1 scripts\cp\equipment\cp_incendiarylauncher::calloutmarkerping_removecallout( 7 );

    _id_1308C();
}

_id_13094()
{
    if ( isdefined( self.fulton_repositoryusecallback ) && isdefined( self.fulton_repositoryusecallback.gameobject ) )
        scripts\mp\gametypes\br_quest_util.gsc::spawn_ending_individual_guys_death( self.fulton_repositoryusecallback.gameobject.origin );

    if ( istrue( self.issnipersemi ) || scripts\mp\flags::gameflag( "x2_ambush" + ( self.fulton_interactions_disabled + 1 ) + "_starting" ) || scripts\mp\flags::gameflag( "x2_train_destroyed" ) || scripts\mp\flags::gameflag( "x2_train_one_cart_left" ) )
        inneurotoxintimestamp();
}

_id_1308C()
{
    var_0 = spawnstruct();
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::mine_caves_cell_support_internal( self.team );
    var_2 = scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "x2_bomb" );
    var_3 = scripts\mp\gametypes\br_quest_util.gsc::mine_caves_ambush( scripts\mp\gametypes\br_quest_util.gsc::mine_cave_turrets( "x2_bomb" ) );
    var_0.target_show_damage_damage_watch = scripts\mp\gametypes\br_quest_util.gsc::target_wavespawning_to_jammer5( var_2, var_1, var_3 );
    var_4 = undefined;

    switch ( level._id_13090 )
    {
        case "signal":
            var_4 = "br_x2_signal_quest_complete";
            break;
        case "bomb":
        default:
            var_4 = "br_x2_bomb_quest_complete";
            break;
    }

    if ( getdvarint( "scr_br_x2_contractKillcamFix", 1 ) )
    {
        var_5 = scripts\mp\gametypes\br_gametype_x2.gsc::crate_objectives( self.playerlist );
        scripts\mp\gametypes\br_quest_util.gsc::global_relic_landlocked_func( var_5, var_4, var_0 );

        foreach ( var_7 in self.playerlist )
        {
            level.skippointdisplayxp = 1;
            var_7 thread scripts\mp\utility\points::giveunifiedpoints( "br_x2_ambush" );
        }
    }
    else
        scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, var_4, var_0 );

    self._id_11B21 = self.playerlist[0].origin;
    self._id_11B1E = self.playerlist[0].angles;
    self.result = "success";
    self.spawntvfix = 1;
    scripts\mp\gametypes\br_gametype_x2.gsc::create_vehicle_omnvars_data( self );
    scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
}

inneurotoxintimestamp()
{
    scripts\mp\gametypes\br_gametype_x2.gsc::create_vehicle_omnvars_data( self );
    self.result = "fail";
    scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
}

_id_12AE6()
{
    foreach ( var_1 in self.playerlist )
    {
        var_2 = undefined;

        switch ( level._id_13090 )
        {
            case "signal":
                var_2 = "x2_signal";
                break;
            case "bomb":
            default:
                var_2 = "x2_bomb";
                break;
        }

        var_1 scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshow( var_2 );
        scripts\mp\gametypes\br_quest_util.gsc::_id_12058( var_1 );
    }
}

outline_grenade_box( var_0 )
{
    scripts\mp\gametypes\br_quest_util.gsc::overtime_music( var_0 );
    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
}

getc130airdropheight()
{
    foreach ( var_1 in self.playerlist )
    {
        if ( isdefined( var_1 ) )
            outline_grenade_box( var_1 );
    }

    scripts\mp\gametypes\br_quest_util.gsc::getcodecomputerdisplaycode();

    foreach ( var_1 in self.playerlist )
        var_1 scripts\cp\equipment\cp_incendiarylauncher::calloutmarkerping_removecallout( 7 );
}

lootleadermarkcount()
{
    var_0 = undefined;

    switch ( level._id_13090 )
    {
        case "signal":
            var_0 = &"BR_REVEAL_X2_EVENT/X2_MARK_AREA";
            break;
        case "bomb":
        default:
            var_0 = &"BR_REVEAL_X2_EVENT/X2_SET_TNT";
            break;
    }

    return var_0;
}

force_var_to_array( var_0 )
{
    wait 1.35;
    var_1 = spawn( "script_model", var_0 );
    var_1 setmodel( "x2_smoke_marker" );
    var_1.angles = ( 0, 0, 0 );
    var_1 playsound( "smoke_carepackage_expl_trans" );
    var_1 playloopsound( "smoke_carepackage_smoke_lp" );
    var_1 setscriptablepartstate( "smoke", "on" );
    var_1 forcenetfieldhighlod( 1 );
    level.cleanupswaploadoutflags.traintracesuccesses[level.cleanupswaploadoutflags.traintracesuccesses.size] = var_1;
}

go_investigate_loc( var_0 )
{
    var_0 setscriptablepartstate( "smoke", "dissipate" );
    var_0 playsound( "smoke_canister_tail_dissipate" );
    wait 1;
    var_0 stoploopsound();
    wait 4.5;
    var_0 delete();
}

vehcolignorelist()
{
    self endon( "death_or_disconnect" );
    scripts\mp\gametypes\br_public.gsc::updatelocationbesttimehud( "iw8_ges_plyr_plunder_smoke", 1.867 );
}

enable_super_when_leaving_turret()
{
    foreach ( var_2, var_1 in level.cleanupswaploadoutflags.traintracesuccesses )
    {
        if ( isdefined( var_1 ) )
        {
            switch ( level._id_13090 )
            {
                case "signal":
                    thread go_investigate_loc( var_1 );
                    break;
                case "bomb":
                default:
                    var_1 delete();
                    break;
            }
        }
    }

    level.cleanupswaploadoutflags.traintracesuccesses = [];
}

_id_1229E( var_0 )
{
    var_1 = scripts\mp\gametypes\br_public.gsc::helihint_deposit( var_0, 100, -200 );
    force_var_to_array( var_1 );
}
