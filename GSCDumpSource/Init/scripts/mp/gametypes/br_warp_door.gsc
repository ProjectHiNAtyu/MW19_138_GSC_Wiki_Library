// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    setdvarifuninitialized( "scr_br_warpdoor_maxnum", 100 );
    setdvarifuninitialized( "scr_br_warpDoorMaxUses", 4 );
    setdvarifuninitialized( "scr_br_warpDoorInactiveTime", 10 );
    setdvarifuninitialized( "scr_br_warpDoorMaxOpenTime", 30 );
    setdvarifuninitialized( "scr_br_warpDoorUseMapLocs", 1 );
    setdvarifuninitialized( "scr_br_warpDoorAllowTimeout", 0 );
    setdvarifuninitialized( "scr_br_warpDoorKillTrespassers", 1 );
    scripts\engine\scriptable::_id_11CDB( "warpdoor", ::_id_12EC1 );
    level._effect["warp_door_in"] = loadfx( "vfx/iw8_br/gameplay/reddoor/vfx_br_reddoor_warp_in" );
    level._effect["warp_door_out"] = loadfx( "vfx/iw8_br/gameplay/reddoor/vfx_br_reddoor_warp_out" );

    if ( getdvarint( "scr_br_warpDoorUseMapLocs", 1 ) )
        thread _id_1230A();

    thread school_guards_rpg_shoot_into_windows();
}

delay_safe_spawn_chopper_boss()
{
    if ( !isdefined( level.allfobtriggers ) )
    {
        level.allfobtriggers = [];
        return 1;
    }

    if ( level.allfobtriggers.size < getdvarint( "scr_br_warpdoor_maxnum", 100 ) )
        return 1;

    return 0;
}

_id_12309( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !delay_safe_spawn_chopper_boss() )
        return;

    var_6 = spawn( "script_model", var_0 );
    var_6 setmodel( "t9_vnm_door_bunker_metal_01_rig" );
    var_6.angles = var_1;
    var_6.usable = 1;
    var_6 br_armor_repair_end();

    if ( isdefined( var_2 ) )
        var_6.doorid = var_2;

    level.allfobtriggers[level.allfobtriggers.size] = var_6;

    if ( !istrue( level.br_circle_disabled ) )
        var_6 thread _id_12F1E();

    if ( istrue( var_3 ) )
    {

    }

    if ( istrue( var_4 ) )
    {

    }

    if ( istrue( var_5 ) )
    {

    }

    return var_6;
}

_id_11F98()
{
    level._id_12FF9 = [];
    level._id_12FF9[0] = [ 1.0, "downtown", "summit", "old_mine", "hills", "factory", "stadium", "farm", "salt_mine" ];
    level._id_12FF9[1] = [ 0.3, "downtown", "summit", "old_mine" ];
    level._id_12FF9[2] = [ 0.3, "hills", "factory", "stadium" ];
    level._id_12FF9[3] = [ 0.3, "farm", "salt_mine" ];
    level._id_12FF9[4] = [ 1.0, "downtown", "summit", "old_mine", "hills", "factory", "stadium", "farm", "salt_mine" ];
}

publiceventsenabled()
{
    var_0 = self;

    if ( !isdefined( var_0._id_1315B ) )
        var_0._id_1315B = "none";

    var_1 = getdvarint( "scr_br_warpDoorWeekID", 0 );
    var_2 = level._id_12FF9[var_1];
    var_3 = var_2[0];

    for ( var_4 = 1; var_4 < var_2.size; var_4++ )
    {
        var_5 = var_2[var_4];

        if ( var_5 == var_0._id_1315B )
        {
            if ( randomfloat( 1.0 ) > var_3 )
                return 0;

            return 1;
        }
    }

    return 0;
}

gethost()
{
    var_0 = self;
    level endon( "game_ended" );

    if ( istrue( var_0.dead ) )
        return;

    var_0.dead = 1;

    while ( istrue( var_0.project ) )
        waitframe();

    var_0 notify( "end_warp_queue" );
    var_0.entity.usable = 0;
    var_0.entity notify( "warpdoor_despawn" );
    level.allfobtriggers = scripts\engine\utility::array_remove( level.allfobtriggers, var_0 getscriptablelinkedentity() );
    var_0 setscriptablepartstate( "warpdoor", "dying" );

    while ( var_0 getscriptablepartstate( "warpdoor" ) != "dead" )
        waitframe();

    var_0 getscriptablelinkedentity() delete();
}

_id_1230A()
{
    level endon( "game_ended" );
    level waittill( "prematch_done" );
    wait 5;
    scripts\mp\gametypes\red_door_locations.gsc::playing_stealth_alert_music();
    _id_11F98();

    foreach ( var_1 in level.cleanupswaploadoutflags._id_12EC0 )
    {
        var_2 = _id_12309( var_1.origin, var_1.angles, var_1.id );

        if ( !var_2 publiceventsenabled() )
        {
            var_2 = var_2 getlinkedscriptableinstance();
            var_2 gethost();
        }
    }
}

br_armor_repair_end()
{
    var_0 = self;

    if ( !isdefined( level.calloutglobals.calloutzones ) )
        level.calloutglobals.calloutzones = getentarray( "location_volume", "targetname" );

    if ( !level.calloutglobals.calloutzones.size )
        return;

    var_1 = var_0 getscriptablelinkedentity();

    foreach ( var_3 in level.calloutglobals.calloutzones )
    {
        if ( var_1 istouching( var_3 ) )
        {
            var_0._id_1315B = var_3.script_noteworthy;
            return;
        }
    }

    var_0._id_1315B = "none";
}

school_guards_rpg_shoot_into_windows()
{
    level endon( "game_ended" );

    if ( !scripts\mp\flags::levelflag( "scriptables_ready" ) )
        scripts\mp\flags::levelflagwait( "scriptables_ready" );

    var_0 = "mp/warpdoor_controlroom_locations.csv";
    var_1 = tablelookupgetnumrows( var_0 );
    level.extractplunder = [];
    scripts\mp\gametypes\red_door_locations.gsc::initcontrolroombarspawns();

    for ( var_2 = 0; var_2 < var_1; var_2++ )
    {
        var_3 = spawnstruct();
        var_4 = var_2;
        var_3.id = int( tablelookupbyrow( var_0, var_4, 0 ) );
        var_3.f11onarmoryswitchon = [];
        var_3.f11onarmoryswitchon[0] = ( int( tablelookupbyrow( var_0, var_4, 1 ) ), int( tablelookupbyrow( var_0, var_4, 2 ) ), int( tablelookupbyrow( var_0, var_4, 3 ) ) );
        var_3.f11onarmoryswitchon[1] = ( int( tablelookupbyrow( var_0, var_4, 4 ) ), int( tablelookupbyrow( var_0, var_4, 5 ) ), int( tablelookupbyrow( var_0, var_4, 6 ) ) );
        var_3.f11onarmoryswitchon[2] = ( int( tablelookupbyrow( var_0, var_4, 7 ) ), int( tablelookupbyrow( var_0, var_4, 8 ) ), int( tablelookupbyrow( var_0, var_4, 9 ) ) );
        var_3.f11onarmoryswitchon[3] = ( int( tablelookupbyrow( var_0, var_4, 10 ) ), int( tablelookupbyrow( var_0, var_4, 11 ) ), int( tablelookupbyrow( var_0, var_4, 12 ) ) );
        var_3.doors = is_on( var_0, var_4 );
        var_3.doors enemy_monitor_reload();
        var_3.boxheight = int( tablelookupbyrow( var_0, var_4, 19 ) );
        var_3.boxradius = int( tablelookupbyrow( var_0, var_4, 20 ) );
        var_3.crates = findcontrolroomcrates( var_3 );
        disablecontractsforcrates( var_3.crates );
        pausecontrolroomhum( var_3.crates );
        level.extractplunder[var_2] = var_3;
    }

    if ( !istrue( level.br_circle_disabled ) )
        level thread skipinfil();
}

is_on( var_0, var_1 )
{
    var_2 = [];

    for ( var_3 = 13; var_3 <= 18; var_3 = var_3 + 3 )
    {
        var_4 = ( int( tablelookupbyrow( var_0, var_1, var_3 ) ), int( tablelookupbyrow( var_0, var_1, var_3 + 1 ) ), int( tablelookupbyrow( var_0, var_1, var_3 + 2 ) ) );

        if ( var_4 == ( 0, 0, 0 ) )
            continue;

        var_5 = getentitylessscriptablearrayinradius( undefined, undefined, var_4, 64, "door" );

        if ( !isdefined( var_5[0] ) || !var_5[0] scriptableisdoor() )
            continue;

        var_2[var_2.size] = var_5[0];
    }

    return var_2;
}

spawncontrolroomlockbars( var_0 )
{
    var_1 = undefined;

    foreach ( var_3 in level.cleanupswaploadoutflags.controlroombarspawns )
    {
        if ( distance2d( var_3.origin, var_0 ) <= 35 )
        {
            var_1 = easepower( "br_control_room_lock_bar", var_3.origin, var_3.angles );
            break;
        }
    }

    return var_1;
}

spawncontrolroomkilltrigger( var_0 )
{
    if ( !isdefined( var_0 ) )
        return undefined;

    if ( getdvarint( "scr_br_warpDoorKillTrespassers", 1 ) == 0 )
        return undefined;

    var_1 = var_0.origin + anglestoleft( var_0.angles ) * -45 + ( 0, 0, -40 );
    var_2 = spawn( "trigger_radius", var_1, 0, 30, 64 );
    var_2 thread monitorcontrolroomkilltrigger();
    return var_2;
}

stopcontrolroomkilltrigger()
{
    if ( getdvarint( "scr_br_warpDoorKillTrespassers", 1 ) == 0 )
        return;

    var_0 = self;

    for ( var_1 = 0; var_1 < var_0.size; var_1++ )
    {
        if ( isdefined( var_0[var_1].killbox ) )
            var_0[var_1].killbox delete();
    }
}

monitorcontrolroomkilltrigger()
{
    level endon( "game_ended" );

    for (;;)
    {
        self waittill( "trigger", var_0 );

        if ( isplayer( var_0 ) )
            var_0 dodamage( 10000, var_0.origin, self, self, "MOD_TRIGGER_HURT" );
    }
}

enemy_monitor_reload()
{
    var_0 = self;

    for ( var_1 = 0; var_1 < var_0.size; var_1++ )
    {
        if ( var_0[var_1] getscriptablepartstate( "lock" ) != "idle" )
            continue;

        var_0[var_1] setscriptablepartstate( "lock", "locked" );
        var_0[var_1] scriptabledoorfreeze( 1 );
        var_0[var_1].lockbar = spawncontrolroomlockbars( var_0[var_1].origin );
        var_0[var_1].killbox = spawncontrolroomkilltrigger( var_0[var_1].lockbar );
    }
}

syringe_finish_stand()
{
    var_0 = self;

    for ( var_1 = 0; var_1 < var_0.size; var_1++ )
    {
        if ( var_0[var_1] getscriptablepartstate( "lock" ) != "locked" )
            continue;

        var_0[var_1] setscriptablepartstate( "lock", "unlocking" );
        var_0[var_1] scriptabledoorfreeze( 0 );

        if ( isdefined( var_0[var_1].lockbar ) )
            var_0[var_1].lockbar freescriptable();
    }
}

findcontrolroomcrates( var_0 )
{
    var_1 = canceljoins( undefined, undefined, var_0.f11onarmoryswitchon[0], var_0.boxradius );
    var_1 = scripts\engine\utility::array_combine_unique( var_1, canceljoins( undefined, undefined, var_0.f11onarmoryswitchon[1], var_0.boxradius ) );
    var_1 = scripts\engine\utility::array_combine_unique( var_1, canceljoins( undefined, undefined, var_0.f11onarmoryswitchon[2], var_0.boxradius ) );
    var_1 = scripts\engine\utility::array_combine_unique( var_1, canceljoins( undefined, undefined, var_0.f11onarmoryswitchon[3], var_0.boxradius ) );

    for ( var_2 = 0; var_2 < var_1.size; var_2++ )
    {
        if ( !iscontrolroomcratetype( var_1[var_2].type ) )
        {
            var_1 = scripts\engine\utility::array_remove( var_1, var_1[var_2] );
            var_2--;
            continue;
        }

        if ( abs( var_1[var_2].origin[2] - var_0.boxheight ) > 3 )
        {
            var_1 = scripts\engine\utility::array_remove( var_1, var_1[var_2] );
            var_2--;
            continue;
        }
    }

    return var_1;
}

disablecontractsforcrates( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    foreach ( var_2 in var_0 )
        scripts\mp\gametypes\br_bunker_utility.gsc::disablecachesaroundorigin( var_2.origin, 500 );
}

pausecontrolroomhum( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    for ( var_1 = 0; var_1 < var_0.size; var_1++ )
    {
        if ( var_0[var_1] getscriptablepartstate( "body" ) != "closed" )
            continue;

        var_0[var_1] setscriptablepartstate( "body", "closed_noaudio" );
    }
}

playcontrolroomhum( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    for ( var_1 = 0; var_1 < var_0.size; var_1++ )
    {
        if ( var_0[var_1] getscriptablepartstate( "body" ) != "closed_noaudio" )
            continue;

        var_0[var_1] setscriptablepartstate( "body", "set_to_closed" );
    }
}

iscontrolroomcratetype( var_0 )
{
    if ( var_0 == "br_loot_cache" || var_0 == "br_loot_cache_reddoor" || var_0 == "br_loot_cache_lege" )
        return 1;

    return 0;
}

skipinfil()
{
    level endon( "game_ended" );
    level waittill( "prematch_done" );

    if ( !isdefined( level.extractplunder ) )
        return;

    for (;;)
    {
        wait 1.0;

        foreach ( var_1 in level.extractplunder )
        {
            if ( quickdropremoveselfrevivetokenfrominventory( var_1.f11onarmoryswitchon[0] ) )
                level.extractplunder = scripts\engine\utility::array_remove( level.extractplunder, var_1 );
        }

        if ( !isdefined( level.extractplunder ) || level.extractplunder.size == 0 )
        {
            foreach ( var_4 in level.allfobtriggers )
                var_4 thread enemy_molotov_launch();

            return;
        }
    }
}

_id_12EC1( var_0, var_1, var_2, var_3, var_4 )
{
    if ( var_1 == "warpdoor" && var_2 == "closed" && istrue( var_0.entity.usable ) )
        var_0 thread tabletreplacefrequency();
}

_id_12EBF( var_0, var_1 )
{
    if ( !istrue( var_1.teamcanrespawn.entity.usable ) )
        return;

    if ( var_0 scripts\cp_mp\vehicles\vehicle::isvehicle() || isdefined( var_0.vehicle ) )
    {
        if ( getdvarint( "scr_br_warpdoor_kill_vehicles", 0 ) == 0 )
            return;

        var_2 = var_0;

        if ( !var_0 scripts\cp_mp\vehicles\vehicle::isvehicle() )
            var_2 = var_0.vehicle;

        nuke_vault_suicidebomber( var_1.teamcanrespawn, var_2 );
        return;
    }

    if ( var_0 isinexecutionvictim() || var_0 isinexecutionattack() )
        return;

    var_3 = var_0.origin - var_1.teamcanrespawn.origin;

    if ( vectordot( var_3, anglestoleft( var_1.teamcanrespawn.angles ) ) < 0 )
        return;

    if ( !isdefined( var_1.teamcanrespawn._id_1273F ) )
        var_1.teamcanrespawn._id_1273F = 0;

    var_1.teamcanrespawn ammoids( var_0 );
    var_1.teamcanrespawn._id_1273F++;
    var_1.teamcanrespawn.extractmissionhelipadscriptable stopcontrolroomkilltrigger();
    var_4 = var_0 convertviewpostowarp( var_1.teamcanrespawn._id_12EBE[0] );
    var_0 thread _id_1249E( var_4, ( 0, 180, 0 ) );

    if ( var_1.teamcanrespawn._id_1273F >= 4 )
    {
        var_1.teamcanrespawn._id_1273F = 0;
        var_1.teamcanrespawn thread enemygunship_handlemissiledetection();
    }
}

_id_1249E( var_0, var_1 )
{
    var_2 = self;
    level endon( "game_ended" );
    var_2 endon( "death" );
    var_2 vo_three_remain();
    var_2 vehicle_occupancy_cp_takeriotshield();
    wait 0.15;
    var_2 vehicle_occupancy_cp_giveriotshield();
    var_2 setsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 0.5 );
    waitframe();
    var_2 setorigin( var_0 );
    var_2 setplayerangles( var_1 );
    var_2 thread vehicle_compass_cp_init();
    wait 4;
    var_2.weapon_xp_iw8_sn_alpha50 = 1;
}

is_riding_heli( var_0, var_1 )
{
    var_2 = self;
    level endon( "game_ended" );
    var_2 endon( "death" );

    while ( !istrue( var_2.weapon_xp_iw8_sn_alpha50 ) )
        waitframe();

    var_2.weapon_xp_iw8_sn_alpha50 = 0;
    var_3 = 7.5;
    var_2 scripts\mp\gametypes\br_public.gsc::vandalize_internal( var_0._id_12EBE[0], var_3 );
    var_2 waittill( "playerPrestreamComplete" );
    var_2 setorigin( var_2 doorisclosed( var_0._id_12EBE ) );

    if ( istrue( var_0.warpfreefall ) )
        var_2 thread scripts\cp_mp\parachute::startfreefall( 0, 0, undefined, ( 0, 0, 0 ), 0, 0 );

    waitframe();
    var_2 vehicle_occupancy_cp_handlesuicidefromvehicles();
    wait 0.25;
    var_2 clearsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 2 );
    var_2 _id_1251A();

    if ( isdefined( var_0.extractmissionhelipadscriptable ) )
        var_0.extractmissionhelipadscriptable syringe_finish_stand();

    playcontrolroomhum( var_0.crates );

    if ( isdefined( var_0.extractplayers ) )
    {
        var_2 thread scripts\mp\hud_message::showsplash( "br_red_door_control_room_splash", var_0.extractplayers );
        var_4 = getcontrolroomnamealias( var_0.extractplayers );
        scripts\mp\gametypes\br_analytics.gsc::branalytics_warpdoorused( var_2, var_0.entity.doorid, var_4 );
    }

    var_2 notify( "player_done_warping" );
}

vehicle_compass_cp_init()
{
    var_0 = self;
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_0 playerhide();
    var_0 freezecontrols( 1 );
    var_0 sethidenameplate( 1 );
    scripts\engine\utility::_id_12E41( "player_done_warping", "prematch_end", "warpqueue_done_warping", "death" );
    var_0 sethidenameplate( 0 );
    var_0 freezecontrols( 0 );
    var_0 playershow();
}

nuke_vault_suicidebomber( var_0, var_1 )
{
    var_0.entity.usable = 0;
    var_2 = scripts\cp_mp\vehicles\vehicle::_id_12C6D( var_1.vehiclename );

    if ( isdefined( var_2 ) )
        var_1 [[ var_2 ]]();

    wait 2;
    var_0 enemygunship_handlemissiledetection();
    var_0.entity.usable = 1;
}

door2()
{
    var_0 = 0;
    var_1 = spawnstruct();

    while ( !var_0 )
    {
        if ( level.extractplunder.size <= 0 )
            return spawnstruct();

        var_2 = randomint( level.extractplunder.size );
        var_1 = level.extractplunder[var_2];
        level.extractplunder = scripts\engine\utility::array_remove( level.extractplunder, var_1 );
        var_0 = 1;

        if ( !istrue( level.br_circle_disabled ) )
            var_0 = scripts\mp\gametypes\br_circle.gsc::ispointincurrentsafecircle( var_1.f11onarmoryswitchon[0] );
    }

    return var_1;
}

doorisclosed( var_0 )
{
    foreach ( var_2 in var_0 )
    {
        if ( capsuletracepassed( var_2, 16, 32 ) )
            return convertviewpostowarp( var_2 );
    }

    return convertviewpostowarp( var_0[0] );
}

convertviewpostowarp( var_0 )
{
    if ( isdefined( var_0 ) )
        return var_0 + ( 0, 0, -45 );

    return self.origin;
}

quickdropremoveselfrevivetokenfrominventory( var_0 )
{
    var_1 = distance2dsquared( scripts\mp\gametypes\br_circle.gsc::getdangercircleorigin(), var_0 );
    var_2 = scripts\mp\gametypes\br_circle.gsc::getdangercircleradius() * scripts\mp\gametypes\br_circle.gsc::getdangercircleradius();

    if ( var_2 == 0 )
        return 0;

    return var_1 > var_2;
}

_id_12EC3()
{
    var_0 = self;
    level endon( "game_ended" );
    var_0 endon( "death" );
    var_0 endon( "end_warp_queue" );

    if ( !isdefined( var_0._id_12EC2 ) )
        var_0._id_12EC2 = [];

    for (;;)
    {
        waitframe();

        if ( !isdefined( var_0._id_12EC2 ) || var_0._id_12EC2.size <= 0 )
        {
            var_0.project = 0;
            continue;
        }

        var_0.project = 1;
        var_1 = var_0._id_12EC2[0];

        if ( !isdefined( var_1 ) || !isalive( var_1 ) )
        {
            var_0._id_12EC2 = var_0 _id_11A30( var_1 );
            var_0.project = 0;
            var_1 notify( "warpqueue_done_warping" );
            continue;
        }

        var_1 thread is_riding_heli( var_0, ( 0, 180, 0 ) );
        var_1 scripts\engine\utility::_id_12E3F( "player_done_warping", "death" );
        var_0._id_12EC2 = var_0 _id_11A30( var_1 );
        var_0.project = 0;
        var_1 notify( "warpqueue_done_warping" );
    }
}

ammoids( var_0 )
{
    var_1 = self;

    if ( !isdefined( var_0 ) || !isplayer( var_0 ) )
        return;

    if ( !isdefined( var_1._id_12EC2 ) )
        var_1._id_12EC2 = [];

    if ( scripts\engine\utility::array_contains( var_1._id_12EC2, var_0 ) )
        return;

    var_1._id_12727 = gettime();
    var_1._id_12EC2[var_1._id_12EC2.size] = var_0;
}

_id_11A30( var_0 )
{
    var_1 = self;
    var_2 = scripts\engine\utility::array_remove( var_1._id_12EC2, var_0 );
    return var_2;
}

_id_1206D()
{
    var_0 = self;

    if ( !isdefined( var_0._id_12EC2 ) )
        return;

    level endon( "game_ended" );
    var_0 endon( "death" );
    wait 0.1;

    while ( istrue( var_0.project ) )
        waitframe();

    var_0 notify( "end_warp_queue" );
    var_0._id_12EC2 = undefined;
    var_0.warpfreefall = undefined;
}

tabletreplacefrequency()
{
    var_0 = self;
    level endon( "game_ended" );
    var_0 endon( "death" );
    var_0 endon( "warpdoor_close" );
    var_0.entity endon( "warpdoor_despawn" );
    var_0 setscriptablepartstate( "warpdoor", "opening" );
    var_0 notify( "warpdoor_open" );
    var_0 thread _id_127EF();
    var_1 = door2();

    if ( level.extractplunder.size <= 0 )
    {
        foreach ( var_3 in level.allfobtriggers )
        {
            var_4 = var_3 getscriptablepartstate( "warpdoor" );

            if ( var_4 != "opening" && var_4 != "open" )
                var_3 thread enemy_molotov_launch();
        }
    }

    wait 1;
    var_6 = var_0.origin + anglestoforward( var_0.angles ) * 26 + ( 0, 0, 16 );
    var_0._id_12EC4 = spawn( "trigger_radius", var_6, 0, 32, 32 );
    var_0._id_12EC4.teamcanrespawn = var_0;
    var_0.extractplayers = var_1.id;
    var_0._id_12EBE = var_1.f11onarmoryswitchon;
    var_0.extractmissionhelipadscriptable = var_1.doors;
    var_0.crates = var_1.crates;

    if ( !isdefined( var_0._id_12EBE ) )
    {
        var_0._id_12EBE = [];

        if ( level.mapname == "mp_br_mechanics" )
            var_0._id_12EBE[0] = ( 3307, -2480, 24 );
        else
        {
            var_7 = scripts\mp\gametypes\br_circle.gsc::getsafecircleorigin();
            var_8 = scripts\mp\gametypes\br_c130.gsc::lootleaderoneperteam();
            var_0._id_12EBE[0] = ( var_7[0], var_7[1], var_8 );
            var_0.warpfreefall = 1;
        }
    }

    scripts\mp\utility\trigger::makeenterexittrigger( var_0._id_12EC4, ::_id_12EBF, undefined );
    var_0 thread _id_12EC3();
}

_id_127EF()
{
    var_0 = self;
    level endon( "game_ended" );
    var_0 endon( "death" );
    var_0 endon( "warpdoor_close" );
    var_0.entity endon( "warpdoor_despawn" );
    var_0._id_1272B = gettime();
    var_0._id_12727 = undefined;

    for (;;)
    {
        if ( isdefined( var_0._id_12727 ) && ( gettime() - var_0._id_12727 ) / 1000 >= getdvarint( "scr_br_warpDoorInactiveTime", 10 ) )
        {
            var_0 thread enemygunship_handlemissiledetection( 1 );
            return;
        }

        if ( ( gettime() - var_0._id_1272B ) / 1000 >= getdvarint( "scr_br_warpDoorMaxOpenTime", 30 ) )
        {
            var_0 thread enemygunship_handlemissiledetection( 1 );
            return;
        }

        wait 1;
    }
}

enemygunship_handlemissiledetection( var_0 )
{
    var_1 = self;
    level endon( "game_ended" );
    var_1 endon( "death" );
    var_1 endon( "warpdoor_open" );

    if ( isdefined( var_1._id_12EC4 ) )
        var_1._id_12EC4 delete();

    var_1._id_1273F = 0;
    var_1 setscriptablepartstate( "warpdoor", "closing" );
    var_1 notify( "warpdoor_close" );
    var_1 thread _id_1206D();

    if ( isdefined( level.extractplunder ) && level.extractplunder.size <= 0 )
        var_1 thread enemy_molotov_launch();
}

_id_12F1F()
{
    var_0 = self;
    level endon( "game_ended" );
    var_0 endon( "death" );
    var_0 endon( "warpdoor_open" );
    var_0.entity endon( "warpdoor_despawn" );
    var_0 waittill( "end_warp_queue" );
    wait 5.0;
    var_0 thread gethost();
}

enemy_molotov_launch()
{
    var_0 = self;

    if ( !isdefined( var_0.entity ) )
        var_0 = var_0 getlinkedscriptableinstance();

    level endon( "game_ended" );
    var_0 endon( "death" );
    var_0.entity endon( "warpdoor_despawn" );
    var_0.entity.usable = 0;

    if ( var_0 getscriptablepartstate( "warpdoor" ) == "open" || var_0 getscriptablepartstate( "warpdoor" ) == "opening" )
        var_0 enemygunship_handlemissiledetection();

    while ( var_0 getscriptablepartstate( "warpdoor" ) != "closed" )
        waitframe();

    wait 1.0;
    var_0 thread gethost();
}

_id_12F1E()
{
    var_0 = self;
    level endon( "game_ended" );
    var_0 endon( "death" );

    while ( !quickdropremoveselfrevivetokenfrominventory( var_0.origin ) )
        wait 1.0;

    var_0 thread enemy_molotov_launch();
}

vo_three_remain()
{
    var_0 = self;
    var_0 preloadcinematicforplayer( "mp_donetsk_red_door_tunnel" );
    var_0 setclientomnvar( "ui_br_bink_overlay_state", 10 );
}

vehicle_occupancy_cp_giveriotshield()
{
    var_0 = self;
    var_0 playcinematicforplayer( "mp_donetsk_red_door_tunnel" );
}

_id_1251A()
{
    var_0 = self;
    var_0 setclientomnvar( "ui_br_bink_overlay_state", 0 );
    var_0 stopcinematicforplayer();
}

vehicle_occupancy_cp_takeriotshield()
{
    var_0 = self;
    playfx( level._effect["warp_door_out"], var_0.origin );
}

vehicle_occupancy_cp_handlesuicidefromvehicles()
{
    var_0 = self;
    playfx( level._effect["warp_door_in"], var_0.origin );
}

getcontrolroomnamealias( var_0 )
{
    var_1 = "";

    if ( var_0 < 10 )
        var_1 = "0";

    var_2 = "MP_DONETSK/CALLOUT_RED_DOOR_CONTROL_ROOM_" + var_1 + var_0;
    return var_2;
}
