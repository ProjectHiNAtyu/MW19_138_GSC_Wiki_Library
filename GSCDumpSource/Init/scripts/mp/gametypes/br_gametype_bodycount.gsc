// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_luidecision()
{

}

_keypadscriptableused()
{

}

_loadout_setcopyloadoutomvnaronspawn()
{

}

init()
{
    playersetattractiontype();
    level thread playersetispropgameextrainfo();
    level thread playersetattractionbesttime();
    level thread playersetiszombieextrainfo();
    level thread playerredeploy();
    level thread playerzombiedelayturnonfx();
    level thread player_fov_default_1();
    level._id_12050 = 1;
    level.initarmor = [];
}

playersetattractiontype()
{
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d = spawnstruct();
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_11A9B = getdvarfloat( "scr_bodycount_respawn_time_default", 5 );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_11A9A = getdvarfloat( "scr_bodycount_respawn_time_add_per_circle", 2 );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_1248E = getdvarint( "scr_bodycount_starting_respawn_token_count", 1 );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_1248B = getdvar( "scr_bodycount_starting_loadout_weapon_1", "iw8_fists_mp" );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_1248C = getdvar( "scr_bodycount_starting_loadout_weapon_2", "iw8_sm_t9handling" );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_1248A = getdvar( "scr_bodycount_starting_loadout_lethal", "frag_grenade_mp" );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.steam_fx_on = getdvarint( "scr_bodycount_on_dogtag_pickup_health_refill", 1 );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.steam_fx_off = getdvarint( "scr_bodycount_on_dogtag_pickup_armor_refill", 1 );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.steam_dmg_trigger_think = getdvarint( "scr_bodycount_on_dogtag_pickup_ammo_refill", 1 );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.steam_trigger = getdvarint( "scr_bodycount_on_dogtag_pickup_speed_increase", 1 );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.steam_point_think = getdvarfloat( "scr_bodycount_on_dogtag_pickup_overdrive_duration", 6 );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.init_preset_solutions = getdvarint( "scr_bodycount_exfil_extract_circle_index", 6 );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.init_post_bsp_entities = getdvarfloat( "scr_bodycount_exfil_delay_before_spawn", 90.0 );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.init_range_targets = getdvarfloat( "scr_bodycount_exfil_incoming_time", 20.0 );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.init_player_falling_anims = getdvarfloat( "scr_bodycount_exfil_chopper_fly_in_time", 15.0 );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.init_ranges = getdvarfloat( "scr_bodycount_exfil_intro_splash_delay", 3.0 );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.init_relic_fastbleedout = getdvarint( "scr_bodycount_exfil_radius", 250 );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.init_player_characters = getdvarint( "scr_bodycount_exfil_capture_time", 12.5 );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_12C77 = getdvarvector( "scr_bodycount_vehicle_impulse_vector", ( 0, 0, 0.5 ) );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_12C76 = getdvarfloat( "scr_bodycount_vehicle_impulse_magnitude", 150.0 );

    switch ( getdvarint( "scr_bodycount_circle_speed", 1 ) )
    {
        case 0:
            level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.dropfunc = [ 0, 120, 90, 75, 60, 45, 30, 0 ];
            level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.dropcratefrommanualheli_cp = [ 1, 150, 120, 120, 105, 105, 150, 10 ];
            break;
        case 2:
            level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.dropfunc = [ 0, 120, 90, 60, 45, 45, 30, 0 ];
            level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.dropcratefrommanualheli_cp = [ 1, 150, 120, 90, 90, 90, 150, 10 ];
            break;
        case 3:
            level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.dropfunc = [ 0, 30, 10, 10, 10, 10, 30, 0 ];
            level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.dropcratefrommanualheli_cp = [ 1, 20, 10, 10, 10, 10, 180, 10 ];
            break;
        case 1:
        default:
            level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.dropfunc = [ 0, 120, 90, 75, 60, 45, 45, 0 ];
            level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.dropcratefrommanualheli_cp = [ 1, 150, 135, 120, 105, 105, 150, 10 ];
            break;
    }

    setdvar( "scr_br_ending_enabled", 1 );
}

playersetispropgameextrainfo()
{
    _setdomflagiconinfo( "waypoint_captureneutral", "neutral", "MP_BR_INGAME/DOM_CAPTURE", 0 );
    _setdomflagiconinfo( "waypoint_capture", "enemy", "MP_BR_INGAME/DOM_CAPTURE", 0 );
    _setdomflagiconinfo( "waypoint_defend", "friendly", "MP_INGAME_ONLY/OBJ_DEFEND_CAPS", 0 );
    _setdomflagiconinfo( "waypoint_defending", "friendly", "MP_INGAME_ONLY/OBJ_DEFENDING_CAPS", 0 );
    _setdomflagiconinfo( "waypoint_contested", "contest", "MP_INGAME_ONLY/OBJ_CONTESTED_CAPS", 1 );
    _setdomflagiconinfo( "waypoint_taking", "friendly", "MP_INGAME_ONLY/OBJ_TAKING_CAPS", 1 );
    _setdomflagiconinfo( "waypoint_losing", "enemy", "MP_INGAME_ONLY/OBJ_LOSING_CAPS", 1 );
    level._effect["vfx_smk_signal_green"] = loadfx( "vfx/iw8_cp/prop/vfx_smk_signal_green" );
    scripts\mp\gametypes\br_dom_quest.gsc::_id_11F5F();
    level thread _id_12754();
}

_id_12754()
{
    level waittill( "br_dialog_initialized" );
    level.disableinitplayergameobjects = 0;
}

playersetattractionbesttime()
{
    level.hack_airport_combat_init = [];
    level.hack_airport_combat_init[1] = hack_console_activation_func( 1, ::hackclientomnvarclamp );
    level.hack_airport_combat_init[2] = hack_console_activation_func( 2, ::gwsiege_config );
    level.hack_airport_combat_init[3] = hack_console_activation_func( 3, ::gwinputtypesused );
    level.hack_airport_combat_init[4] = hack_console_activation_func( 4, ::guy_pushes_terminal );
    level.hack_airport_combat_init[5] = hack_console_activation_func( 5, ::guy_pushes_building );
    level.hack_airport_combat_init[6] = hack_console_activation_func( 6, ::gunship_watchintrodisown );
    level.hack_airport_combat_init[7] = hack_console_activation_func( 7, ::hack_addkilltriggers );
    level.hack_airport_combat_init[8] = hack_console_activation_func( 8, ::hack_index );
    level.hack_airport_combat_init[9] = hack_console_activation_func( 9, ::gunship_watchownerexitaction );
}

playerredeploy()
{
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "circleTimer", ::circletimer );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "playerWelcomeSplashes", ::vehicle_compass_deregisterinstance );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "createC130PathStruct", ::flickerlights );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "addToC130Infil", ::anim_offset );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "mapCenterFinalCircle", ::tank_deaths );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "getFinalCircleCenter", ::tank_deaths );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "playerGulagAutoWinWait", ::unsetreduceregendelayonkill );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "triggerRespawnOverlay", ::_id_1292D );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "assignSpectatorToSpectatePlayer", ::assignspectatortospectateplayer );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "markPlayerAsEliminatedOnKilled", ::set_spotlight_target_loc );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "playerNakedDropLoadout", ::updatecollectionui );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "dropOnPlayerDeath", ::droponplayerdeath );
    scripts\mp\utility\disconnect_event_aggregator::registerondisconnecteventcallback( ::onplayerdisconnect );
    level thread _id_12C29();
    scripts\engine\scriptable::scriptable_addusedcallback( ::calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias3d );
    scripts\engine\scriptable::_id_11CD8( ::calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias3d );
}

vehicle_compass_deregisterinstance( var_0 )
{
    self endon( "disconnect" );
    self waittill( "spawned_player" );
    wait 1;
    self waittill( "joining_Infil" );
    scripts\mp\hud_message::showsplash( "br_gametype_bodycount_welcome" );
    scripts\mp\gametypes\br_public.gsc::cloud_cover( "gametype", self, 0 );
    scripts\mp\gametypes\br_public.gsc::cloud_cover( "primary_objective", self, 0 );

    if ( istrue( self.progression_main ) )
        level scripts\mp\gametypes\br_public.gsc::cloud_cover( "deploy_squad_leader", self, 1, 0, 4.5 );
}

get_alive_bots()
{
    self waittill( "game_ended" );

    foreach ( var_1 in level.players )
    {
        if ( isdefined( var_1 ) )
            onplayerdisconnect( var_1 );
    }

    foreach ( var_4 in level._id_1238A )
    {
        if ( isdefined( level._id_12111 ) )
        {
            [[ level._id_12111._id_1237C ]]( var_4.total, var_4.below_player_eye_allowance, var_4.immediatecleanup );
            [[ level._id_12111._id_1237E ]]( var_4._id_11B18 );
        }
    }

    if ( istrue( level._id_13010 ) && isdefined( level._id_12111 ) )
        [[ level._id_12111._id_13010 ]]();
}

onplayerdisconnect( var_0 )
{
    var_1 = var_0 getentitynumber();

    if ( isdefined( level.vault_gate_cut[var_1] ) )
    {
        var_2 = level.vault_gate_cut[var_1];
        var_2.total = var_0 launch_smoke_mortar();
        var_2.below_player_eye_allowance = var_0 last_good_drop_pos();
        var_2.immediatecleanup = var_0 lb_impulse_dmg_threshold_mid();
        var_2._id_11B18 = var_0 latetoinfil();

        if ( !isdefined( var_0.place_weapon ) )
            var_2.tolerance = 1;
        else
            var_2.tolerance = var_0.place_weapon;

        if ( !isdefined( var_0.pity_timer_end_time ) )
            var_2.initarmsraceanims = 0;
        else
            var_2.initarmsraceanims = var_0.pity_timer_end_time;
    }
    else
    {
        var_2 = spawnstruct();
        var_2.total = var_0 launch_smoke_mortar();
        var_2.below_player_eye_allowance = var_0 last_good_drop_pos();
        var_2.immediatecleanup = var_0 lb_impulse_dmg_threshold_mid();
        var_2._id_11B18 = var_0 latetoinfil();

        if ( !isdefined( var_0.place_weapon ) )
            var_2.tolerance = 1;
        else
            var_2.tolerance = var_0.place_weapon;

        if ( !isdefined( var_0.pity_timer_end_time ) )
            var_2.initarmsraceanims = 0;
        else
            var_2.initarmsraceanims = var_0.pity_timer_end_time;
    }

    if ( isdefined( level._id_1238A[var_0.team] ) )
    {
        var_3 = level._id_1238A[var_0.team];
        var_3.total = var_3.total + var_2.total;
        var_3.below_player_eye_allowance = var_3.below_player_eye_allowance + var_2.below_player_eye_allowance;
        var_3.immediatecleanup = var_3.immediatecleanup + var_2.immediatecleanup;

        if ( var_2._id_11B18 > var_3._id_11B18 )
            var_3._id_11B18 = var_2._id_11B18;
    }
    else
    {
        var_3 = spawnstruct();
        var_3.total = var_2.total;
        var_3.below_player_eye_allowance = var_2.below_player_eye_allowance;
        var_3.immediatecleanup = var_2.immediatecleanup;
        var_3._id_11B18 = var_2._id_11B18;
    }

    level.vault_gate_cut[var_1] = var_2;
    level._id_1238A[var_0.team] = var_3;

    if ( isdefined( level._id_12111 ) )
    {
        [[ level._id_12111.unset_bullet_shields ]]( var_0, var_2.total, var_2.below_player_eye_allowance, var_2.immediatecleanup );
        [[ level._id_12111.usbs_pulled_out ]]( var_0, var_2._id_11B18 );
        [[ level._id_12111.update_focus_fire_objective ]]( var_0, var_2.tolerance );
        [[ level._id_12111.unset_relic_aggressive_melee_params ]]( var_0, var_2.initarmsraceanims );
    }
}

calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias3d( var_0, var_1, var_2, var_3, var_4 )
{
    switch ( var_0.type )
    {
        case "br_bodycount_dogtag":
            var_0.entity hacking_vo( var_3 );
            break;
        case "brloot_bodycount_dogtag":
            var_0 hacking_player_nearby( var_3 );
            break;
        case "brloot_soa_pow_dogtag":
            var_0 hacking_player_nearby( var_3 );
            break;
        case "brloot_bodycount_extra_life":
            var_3 play_onboard_plane_vo();
            break;
    }
}

playersetiszombieextrainfo()
{
    if ( getdvarint( "scr_brbodycount_playtest", 0 ) )
        scripts\mp\gametypes\br_gametypes.gsc::hostdamagepercentmedium( "allowLateJoiners" );

    level.checkpoint_carepkg_spawns_func = ::dropjuggernautcrate;
    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "gulag" );
    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "randomizeCircleCenter" );
    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "planeSnapToOOB" );
    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "useTokenToReviveTeammate" );
    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "gulagWinnerRestoreLoadoutUseGulag" );
    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "movingCircle" );
    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "drogBagLoadout" );
    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "match_start_VO" );
    scripts\mp\gametypes\br_gametypes.gsc::hostdamagepercentmedium( "planeUseCircleRadius" );
    scripts\mp\gametypes\br_gametypes.gsc::hostdamagepercentmedium( "circleEarlyStart" );
}

playerzombiedelayturnonfx()
{
    level thread scripts\mp\gametypes\obj_dogtag.gsc::init();
    waittillframeend;
    level thread vehomn_updaterotationomnvarsperframeforclient();
    scripts\mp\utility\spawn_event_aggregator::registeronplayerspawncallback( ::onplayerspawned );
}

vehomn_updaterotationomnvarsperframeforclient()
{
    level endon( "game_ended" );
    scripts\mp\flags::gameflagwait( "prematch_fade_done" );

    if ( !istrue( level.prepickupweapon ) )
    {
        scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "onPlayerKilled", ::onplayerkilled );
        scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "dangerCircleTick", ::dangercircletick );
        level thread scripts\mp\gametypes\br_heavy_weapon_drop.gsc::init();
    }

    player_give_intel_1_ks();
    level.vault_gate_cut = [];
    level._id_1238A = [];

    foreach ( var_1 in level.players )
    {
        var_1 _id_12AA7();
        var_2 = var_1 getentitynumber();
        level.vault_gate_cut[var_2] = spawnstruct();
        level.vault_gate_cut[var_2].total = var_1 launch_smoke_mortar();
        level.vault_gate_cut[var_2].below_player_eye_allowance = var_1 last_good_drop_pos();
        level.vault_gate_cut[var_2].immediatecleanup = var_1 lb_impulse_dmg_threshold_mid();
        level.vault_gate_cut[var_2]._id_11B18 = var_1 latetoinfil();
        level.vault_gate_cut[var_2].tolerance = 0;
        level.vault_gate_cut[var_2].initarmsraceanims = 0;

        if ( !isdefined( level._id_1238A[var_1.team] ) )
        {
            level._id_1238A[var_1.team] = spawnstruct();
            level._id_1238A[var_1.team].total = 0;
            level._id_1238A[var_1.team].below_player_eye_allowance = 0;
            level._id_1238A[var_1.team].immediatecleanup = 0;
            level._id_1238A[var_1.team]._id_11B18 = 0;
        }

        var_1 updatecollectionui();
    }

    level thread get_alive_bots();
}

player_fov_default_1()
{
    wait 1;
    game["dialog"]["gametype"] = "gametype_powergrab";
    game["dialog"]["primary_objective"] = "powergrab_mode_desc";
    game["dialog"]["respawn_crate"] = "event_respawn_crate";
    game["dialog"]["exfil_enemy_50"] = "powergrab_enemy_50";
    game["dialog"]["exfil_enemy_start"] = "powergrab_enemy_capture";
    game["dialog"]["exfil_enemy_win"] = "powergrab_enemy_success";
    game["dialog"]["exfil_ready"] = "powergrab_exfil_standby";
    game["dialog"]["exfil_friendly_50"] = "powergrab_friendly_50";
    game["dialog"]["exfil_friendly_start"] = "powergrab_friendly_capture";
    game["dialog"]["exfil_friendly_win"] = "powergrab_friendly_success";
    game["dialog"]["no_respawns"] = "powergrab_respawn_0";
    game["dialog"]["dogtag_reward"] = "powergrab_unlock";
    game["dialog"]["collect_own_tags"] = "powergrab_your_tag";
    game["dialog"]["exfil_contested"] = "powergrab_zone_contest";
}

_handlevehiclepurchase()
{

}

dangercircletick( var_0, var_1 )
{
    var_2 = var_1 * var_1;

    foreach ( var_4 in level.dogtags )
    {
        if ( distance2dsquared( var_4.origin, var_0 ) > var_2 )
            var_4 thread removetags();
    }

    foreach ( var_7 in level.initarmor )
    {
        if ( !isdefined( var_7 ) )
            continue;

        if ( distance2dsquared( var_7.origin, var_0 ) > var_2 )
            var_7 thread init_weapon_placements();
    }

    foreach ( var_7 in level.omvar_code )
    {
        if ( !isdefined( var_7 ) )
            continue;

        if ( distance2dsquared( var_7.origin, var_0 ) > var_2 )
            var_7 scripts\mp\gametypes\br_heavy_weapon_drop.gsc::omnvardata();
    }
}

set_spotlight_target_loc()
{
    return 0;
}

unsetreduceregendelayonkill( var_0, var_1 )
{
    self endon( "disconnect" );

    if ( !isdefined( var_0 ) )
    {
        if ( level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_11A9B )
        {
            self.brjugg_cleanupents = 1;
            var_2 = level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_11A9B;
            wait 3;

            while ( istrue( self.killcam ) )
                waitframe();

            thread _id_1205A( var_2 );
            thread scripts\mp\gametypes\br_spectate.gsc::spawnspectator( self, 0, 1 );
            wait( var_2 );
            self.brjugg_cleanupents = undefined;
            return 1;
        }
    }

    return 0;
}

_id_1292D( var_0 )
{
    return 1;
}

assignspectatortospectateplayer( var_0, var_1 )
{
    var_0 notify( "assignSpectatorToSpectatePlayerWaitForTeam" );

    if ( istrue( level.cop_car_initomnvars ) )
        return 0;

    if ( !isdefined( var_1 ) || !isplayer( var_1 ) || !isalive( var_1 ) && !isdefined( var_1._id_12536 ) )
        return 0;

    if ( var_0.team == var_1.team )
        return 0;

    if ( !scripts\mp\utility\teams::getteamdata( var_0.team, "aliveCount" ) )
        return 0;

    var_2 = scripts\mp\utility\teams::getfriendlyplayers( var_0.team, 1 );

    if ( var_2.size == 0 )
        return 0;

    thread br_ammo_update_ammotype_weapons( var_0 );
    return 1;
}

br_ammo_update_ammotype_weapons( var_0 )
{
    level endon( "brSpawnPlayersEnding" );
    var_0 endon( "assignSpectatorToSpectatePlayerWaitForTeam" );
    var_0 endon( "death_or_disconnect" );
    var_0 scripts\mp\gametypes\br_spectate.gsc::valuehud();
    var_0 setclientomnvar( "ui_show_spectateHud", var_0 getentitynumber() );
    wait 1.0;
    var_1 = scripts\mp\gametypes\br_spectate.gsc::lootcontentsadjustkillchain( var_0 );
    thread scripts\mp\gametypes\br_spectate.gsc::assignspectatortospectateplayer( var_0, var_1 );
}

onplayerspawned()
{
    thread _id_12B20();
}

onplayerkilled( var_0 )
{
    if ( self.pitcher_lights <= 0 )
        self.attacker thread scripts\mp\utility\points::giveunifiedpoints( "br_gametype_bodycount_final_kill" );

    thread get_player_aggro_score();
}

_id_12C29()
{
    while ( !isdefined( level.vehicles ) || !isdefined( level.vehicles.damagecallbacks ) )
        wait 0.1;

    scripts\mp\vehicles\damage::set_post_mod_damage_callback( "atv", ::_id_12CD6 );
    scripts\mp\vehicles\damage::set_post_mod_damage_callback( "cargo_truck", ::_id_12CD6 );
    scripts\mp\vehicles\damage::set_post_mod_damage_callback( "jeep", ::_id_12CD6 );
    scripts\mp\vehicles\damage::set_post_mod_damage_callback( "tac_rover", ::_id_12CD6 );
    scripts\mp\vehicles\damage::set_post_mod_damage_callback( "little_bird", ::_id_12CD6 );
}

_id_12CD6( var_0 )
{
    if ( isdefined( var_0.direction_vec ) && isdefined( var_0.meansofdeath ) && isexplosivedamagemod( var_0.meansofdeath ) )
    {
        var_1 = level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_12C77;
        var_2 = level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_12C76;
        self _meth_87BF( var_0.direction_vec + var_1, var_2 );
    }

    return 1;
}

updatecollectionui()
{
    if ( !isdefined( self._id_11C5A ) )
    {
        var_0 = getcompleteweaponname( level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_1248B );
        var_1 = scripts\mp\class::current_anim_ref( level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_1248C, "camo_01b", undefined, -1 );
        var_2 = getcompleteweaponname( level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_1248A );
        var_3 = scripts\mp\equipment::getequipmentreffromweapon( var_2 );
        self giveweapon( var_0 );
        self giveweapon( var_1 );
        self switchtoweaponimmediate( var_1 );
        self assignweaponprimaryslot( var_1 );
        scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();
        scripts\mp\gametypes\br_weapons.gsc::br_ammo_give_type( self, "brloot_ammo_919", var_1.clipsize * 2 );
        scripts\mp\gametypes\br_weapons.gsc::br_ammo_update_weapons( self );
        self notify( "ammo_update" );
        scripts\mp\equipment::giveequipment( var_3, "primary" );
        scripts\mp\weapons::fixupplayerweapons( self, var_1 );
    }
    else
        updateassassinationdataomnvar();

    scripts\mp\gametypes\br_armor.gsc::monitor_bush_trig( 150 );
}

_ispointinbadarea()
{

}

spawndogtags( var_0, var_1, var_2 )
{
    level endon( "game_ended" );

    if ( isagent( var_0 ) )
        return;

    if ( isagent( var_1 ) )
        var_1 = var_1.owner;

    var_3 = 14;
    var_4 = ( 0, 0, 0 );
    var_5 = var_0.angles;

    if ( var_0 scripts\mp\gameobjects::touchingarbitraryuptrigger() )
    {
        var_5 = self getworldupreferenceangles();
        var_4 = anglestoup( var_5 );

        if ( var_4[2] < 0 )
            var_3 = -14;
    }

    var_6 = var_0.origin + ( 0, 0, var_3 );
    var_7 = spawn( "script_model", var_6 );
    var_7 setmodel( "military_dogtags_br_bodycount" );
    var_7 setotherent( var_0 );
    var_7 hudoutlineenable( "outline_depth_white" );
    var_7.team = var_0.team;
    disable_outline_on_atv_use();
    var_8 = "" + var_7 getentitynumber();
    var_7.play_pullout_sequence = var_8;
    level.dogtags[var_8] = var_7;
    var_7 setasgametypeobjective();
    var_7.victim = var_0;
    var_7.victimteam = var_0.team;
    var_7.attacker = var_1;
    var_7.attackerteam = var_1.team;
    var_7.ownerteam = var_0.team;
    var_7.spawntime = gettime();
    var_7 thread _id_126FD( var_0, var_2 );
    var_7.offset3d = ( 0, 0, 16 );
    var_7.curorigin = var_7.origin;
    var_7 scripts\mp\gameobjects::requestid( 1, 1 );
    var_7.type = "useObject";
    var_7.numtouching["axis"] = 0;
    var_7.numtouching["allies"] = 0;

    if ( isdefined( level.dogtags[var_8].objidnum ) )
    {
        if ( level.dogtags[var_8].objidnum != -1 )
        {
            var_9 = level.dogtags[var_8].objidnum;
            scripts\mp\objidpoolmanager::update_objective_state( var_9, "current" );
            scripts\mp\objidpoolmanager::update_objective_onentity( var_9, level.dogtags[var_8] );
            scripts\mp\objidpoolmanager::update_objective_setzoffset( var_9, 22 );
            scripts\mp\objidpoolmanager::update_objective_setbackground( var_9, 1 );
            scripts\mp\objidpoolmanager::objective_set_play_intro( level.dogtags[var_8].objidnum, 0 );
            scripts\mp\objidpoolmanager::objective_set_play_outro( level.dogtags[var_8].objidnum, 0 );
            level.dogtags[var_8] scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_dogtags_friendly", "waypoint_dogtags" );
            level.dogtags[var_8] scripts\mp\gameobjects::setvisibleteam( "any" );
            getbnetigrbattlepassxpmultiplier( var_9, 8858, 9843 );
            getscriptcachecontents( var_9, 0.5, 1.0 );
        }
    }

    playsoundatpos( var_6, "mp_killconfirm_tags_drop" );
}

disable_outline_on_atv_use()
{
    if ( level.dogtags.size > 60 )
    {
        var_0 = undefined;

        foreach ( var_2 in level.dogtags )
        {
            if ( !isdefined( var_0 ) || var_2.spawntime < var_0.spawntime )
                var_0 = var_2;
        }

        var_0 thread removetags();
    }
}

_id_126FD( var_0, var_1 )
{
    self endon( "death" );
    var_2 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_1, self.origin, self.angles, var_0, undefined, undefined, undefined, 1 );
    var_3 = var_2.origin;
    var_4 = abs( self.origin[2] - var_3[2] );
    var_5 = getdvarint( "NPOQPMP", 800 );
    var_6 = sqrt( 2 * var_4 / var_5 ) + 0.5;
    var_7 = trajectorycalculateinitialvelocity( self.origin, var_3, ( 0, 0, -1 * var_5 ), var_6 );
    self movegravity( var_7, var_6 );
    wait( var_6 );
    self.origin = var_3;

    if ( isdefined( var_2.movetowithpause ) )
    {
        self linkto( var_2.movetowithpause );
        self.movetowithpause = var_2.movetowithpause;
    }
}

hacking_vo( var_0 )
{
    if ( isdefined( var_0.owner ) )
        var_0 = var_0.owner;

    if ( getdvarint( "seasonal_event_id_num", 0 ) == 6 )
        var_0 scripts\cp\helicopter\chopper_boss::_id_11A49( "t9_ch_global_collect_dog_tags_for_s3_5_event_wz", 1 );

    if ( var_0.pers["team"] == self.victimteam )
    {
        self playsound( "mp_killconfirm_tags_deny" );
        var_0 scripts\mp\rank::giverankxp( "tag_denied", 25 );
        var_0 scripts\mp\utility\stats::incpersstat( "denied", 1 );
        var_0 scripts\mp\persistence::statsetchild( "round", "denied", var_0.pers["denied"] );
        var_0 thread gunbutt();
        scripts\mp\gametypes\obj_dogtag.gsc::allyonuse( var_0 );

        if ( var_0 == self.victim )
            level thread scripts\mp\gametypes\br_public.gsc::cloud_cover( "collect_own_tags", var_0 );

        if ( isdefined( level.dogtagallyonusecb ) && !level.gameended )
            self thread [[ level.dogtagallyonusecb ]]( var_0 );

        var_0 play_nag_players_place_hvt();
    }
    else
    {
        self playsound( "mp_killconfirm_tags_pickup" );
        var_0 scripts\mp\utility\stats::incpersstat( "confirmed", 1 );
        var_0 scripts\mp\persistence::statsetchild( "round", "confirmed", var_0.pers["confirmed"] );
        scripts\mp\gametypes\obj_dogtag.gsc::enemyonuse( var_0 );

        if ( isdefined( level.dogtagenemyonusecb ) && !level.gameended )
            self thread [[ level.dogtagenemyonusecb ]]( var_0 );

        var_0 scripts\cp\helicopter\chopper_boss::stop_module_on_delay();
        var_0 gunship_watchgameend();
        var_0 play_nuclear_core_vo();
    }

    self.victim notify( "tag_removed" );
    thread removetags();
}

hacking_player_nearby( var_0 )
{
    if ( isdefined( var_0.owner ) )
        var_0 = var_0.owner;

    if ( getdvarint( "seasonal_event_id_num", 0 ) == 6 )
        var_0 scripts\cp\helicopter\chopper_boss::_id_11A49( "t9_ch_global_collect_dog_tags_for_s3_5_event_wz", 1 );

    var_1 = self.origin;
    playsoundatpos( var_1, "mp_killconfirm_tags_pickup" );
    var_0 scripts\mp\utility\stats::incpersstat( "confirmed", 1 );
    var_0 scripts\mp\persistence::statsetchild( "round", "confirmed", var_0.pers["confirmed"] );
    var_0 scripts\mp\gametypes\obj_dogtag.gsc::ontagpickupevent( "tag_collected" );
    var_0 scripts\cp\helicopter\chopper_boss::stop_module_on_delay();
    var_0 gunship_watchgameend();
}

removetags()
{
    playfx( level.conf_fx["vanish"], self.origin );
    self notify( "reset" );
    waitframe();

    if ( isdefined( self ) )
    {
        self notify( "death" );

        if ( isdefined( level.dogtags[self.play_pullout_sequence] ) )
        {
            if ( !isdefined( level.dogtags[self.play_pullout_sequence].skipminimapids ) )
            {
                level.dogtags[self.play_pullout_sequence] scripts\mp\gameobjects::releaseid();
                self notify( "deleted" );
            }

            level.dogtags[self.play_pullout_sequence] = undefined;
        }

        self delete();
    }
}

hack_console_activation_func( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2.planewaittillcandrop = var_0;
    var_2.juggernaut_pincer = var_1;
    return var_2;
}

gunship_watchgameend()
{
    thread gunbutt();
    play_nags_from_array();
    var_0 = launch_smoke_mortar();

    for ( var_1 = 1; var_1 <= level.hack_airport_combat_init.size; var_1++ )
    {
        if ( var_0 == level.hack_airport_combat_init[var_1].planewaittillcandrop )
        {
            self [[ level.hack_airport_combat_init[var_1].juggernaut_pincer ]]();
            self.pistolweapon = var_1;
            _id_12AA7();
        }
    }
}

gunbutt()
{
    if ( !isdefined( self.vehicle ) )
    {
        if ( level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.steam_trigger == 1 )
            thread tv_station_fastrope_two_infil_start_targetname_array();
    }

    scripts\mp\rank::giverankxp( "tag_collected", 25 );

    if ( level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.steam_dmg_trigger_think == 1 )
        thread gunship_getbombingpoint();

    if ( level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.steam_fx_on == 1 )
        self.health = self.maxhealth;

    if ( level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.steam_fx_off == 1 )
    {
        self.br_armorhealth = self.br_maxarmorhealth;
        self setclientomnvar( "ui_br_armor_damage", 1 );
        scripts\mp\equipment\armor_plate::checkifteamrewardsareenabled( self.br_armorhealth );
    }

    thread tv_station_fastrope_two_infil_start_targetname_array_index();
}

gunship_getbombingpoint()
{
    self endon( "death_or_disconnect" );
    thread scripts\mp\equipment::givescavengerammo();
    scripts\mp\weapons::scavengergiveammo( self );
    waitframe();
    scripts\mp\weapons::scavengergiveammo( self );
}

hackclientomnvarclamp( var_0 )
{
    if ( isdefined( var_0 ) )
    {
        var_0.label = &"BR_BODYCOUNT/NEXT_REWARD_UAV";
        return;
    }

    gwperifvfx_plumes( "uav" );
}

gwsiege_config( var_0 )
{
    if ( isdefined( var_0 ) )
    {
        var_0.label = &"BR_BODYCOUNT/NEXT_REWARD_LEGENDARY_WEAPON_DROP";
        return;
    }

    scripts\mp\gametypes\br_pickups.gsc::br_forcegivecustompickupitem( self, "brloot_offhand_advancedlootdrop", 1 );
    thread scripts\mp\hud_message::showsplash( "br_body_count_legendary_weapon_drop" );
}

guy_pushes_terminal( var_0 )
{
    if ( isdefined( var_0 ) )
    {
        var_0.label = &"BR_BODYCOUNT/NEXT_REWARD_CLUSTER_STRIKE";
        return;
    }

    gwperifvfx_plumes( "toma_strike" );
}

gunship_watchintrodisown( var_0 )
{
    if ( isdefined( var_0 ) )
    {
        var_0.label = &"BR_BODYCOUNT/NEXT_REWARD_ADVANCED_GAS_MASK";
        return;
    }

    thread scripts\mp\hud_message::showsplash( "br_body_count_rewarded_gas_mask" );
    scripts\mp\gametypes\br_pickups.gsc::br_forcegivecustompickupitem( self, "brloot_equip_gasmask_durable", 1 );
}

guy_pushes_building( var_0 )
{
    if ( isdefined( var_0 ) )
    {
        var_0.label = &"BR_BODYCOUNT/NEXT_REWARD_ARMOR_SATCHEL";
        return;
    }

    scripts\mp\gametypes\br_pickups.gsc::br_forcegivecustompickupitem( self, "brloot_plate_pouch", 1 );
}

hack_addkilltriggers( var_0 )
{
    if ( isdefined( var_0 ) )
    {
        var_0.label = &"BR_BODYCOUNT/NEXT_REWARD_PRECISION_AIRSTRIKE";
        return;
    }

    gwperifvfx_plumes( "precision_airstrike" );
}

gwinputtypesused( var_0 )
{
    if ( isdefined( var_0 ) )
    {
        var_0.label = &"BR_BODYCOUNT/NEXT_REWARD_EXTRA_LIFE";
        return;
    }

    thread scripts\mp\hud_message::showsplash( "br_body_count_rewarded_extra_life" );
    play_onboard_plane_vo();
}

hack_index( var_0 )
{
    if ( isdefined( var_0 ) )
    {
        var_0.label = &"BR_BODYCOUNT/NEXT_REWARD_SPECIALIST";
        return;
    }

    thread scripts\mp\hud_message::showsplash( "br_body_count_rewarded_specialist" );
    scripts\mp\perks\perks::analytics_lui_mission_end_dlog();
}

gunship_watchownerexitaction( var_0 )
{
    if ( isdefined( var_0 ) )
    {
        var_0.label = &"BR_BODYCOUNT/NEXT_REWARD_ADVANCED_UAV";
        return;
    }

    gwperifvfx_plumes( "directional_uav" );
    level thread scripts\mp\gametypes\br_public.gsc::cloud_cover( "dogtag_reward", self, undefined, undefined, 1 );
}

gwperifvfx_plumes( var_0 )
{
    var_1 = isdefined( self.streakdata.streaks[1] );
    scripts\mp\gametypes\br_pickups.gsc::isspecialistbonus( var_0, var_1, 1 );

    if ( !level.gameended )
        thread scripts\mp\hud_message::showkillstreaksplash( var_0 );
}

launch_smoke_mortar()
{
    if ( !isdefined( self.pit_locations ) )
        self.pit_locations = 0;

    return self.pit_locations;
}

last_good_drop_pos()
{
    if ( !isdefined( self.pingsystemactive ) )
        self.pingsystemactive = 0;

    return self.pingsystemactive;
}

lb_impulse_dmg_threshold_mid()
{
    if ( !isdefined( self.pitch_max_angles ) )
        self.pitch_max_angles = 0;

    return self.pitch_max_angles;
}

play_nags_from_array()
{
    self.pit_locations = launch_smoke_mortar();
    self.pit_locations++;
    _id_12AA7();
}

play_nag_players_place_hvt()
{
    self.pingsystemactive = last_good_drop_pos();
    self.pingsystemactive++;
    _id_12AA7();
}

play_nuclear_core_vo()
{
    self.pitch_max_angles = lb_impulse_dmg_threshold_mid();
    self.pitch_max_angles++;
    _id_12AA7();
}

_id_12AA7()
{
    var_0 = launch_smoke_mortar();
    var_1 = latetoinfil();
    var_2 = lb_mg_dmg_factor_tail_rotor();
    var_3 = 0;
    var_3 = var_3 + var_0 * 100;
    var_3 = var_3 + var_1 * 10;
    var_3 = var_3 + var_2;
    self setclientomnvar( "ui_br_bodycount_reward_data", var_3 );
}

latetoinfil()
{
    if ( !isdefined( self.pistolweapon ) )
        self.pistolweapon = 0;

    return self.pistolweapon;
}

_hidesafecircleui()
{

}

dropjuggernautcrate()
{
    _id_11D57();
    level thread animscripted_clear();

    if ( istrue( level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_12B9C ) )
        level.dropoff = ( 0, 0, 0 );

    level.br_level.br_circledelaytimes = level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.dropfunc;
    level.br_level.br_circleclosetimes = level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.dropcratefrommanualheli_cp;
    level.br_level.checkpoint_edit_loadout = [ 0, 0, 0, 0, 0, 0, 0, 0 ];
    level.br_level.checkpoint_edit_munitions = [ 0, 0, 0, 0, 0, 0, 0, 0 ];
    level.br_level.br_circleradii = [ 72500, 72500, 50000, 32500, 17500, 7500, 2000, 300, 0 ];
    level.br_level.br_circleminimapradii = [ 10500, 10500, 10500, 9000, 8000, 6500, 5500, 5500 ];
}

_id_11D57()
{
    var_0 = [ ( -17654, 20472, 0 ), ( 27262, 19562, 0 ), ( 30451, -8704, 0 ), ( -5201, 7260, 0 ), ( 46307, -11229, 0 ), ( 10312, -23257, 0 ), ( -19091, -33444, 0 ), ( 34541, 41465, 0 ), ( 29411, 2720, 0 ), ( -28903, 49517, 0 ), ( 18376, -14868, 0 ) ];
    var_1 = loggamescore( var_0 );
    level.dropoff = _id_11B69( var_0, var_1 );
    level.briotshieldinitialized = level.dropoff == ( 30451, -8704, 0 );
}

loggamescore( var_0 )
{
    var_1 = [];

    foreach ( var_3 in var_0 )
    {
        var_4 = 1.0;

        if ( var_3 == ( -17654, 20472, 0 ) )
            var_4 = getdvarint( "scr_br_bodycount_airport_weight", 1 );
        else if ( var_3 == ( 27262, 19562, 0 ) )
            var_4 = getdvarint( "scr_br_bodycount_array_weight", 1 );
        else if ( var_3 == ( 30451, -8704, 0 ) )
            var_4 = getdvarint( "scr_br_bodycount_downtown_weight", 1 );
        else if ( var_3 == ( -5201, 7260, 0 ) )
            var_4 = getdvarint( "scr_br_bodycount_factory_weight", 1 );
        else if ( var_3 == ( 46307, -11229, 0 ) )
            var_4 = getdvarint( "scr_br_bodycount_farmland_weight", 1 );
        else if ( var_3 == ( 10312, -23257, 0 ) )
            var_4 = getdvarint( "scr_br_bodycount_prom_east_weight", 1 );
        else if ( var_3 == ( -19091, -33444, 0 ) )
            var_4 = getdvarint( "scr_br_bodycount_prom_west_weight", 1 );
        else if ( var_3 == ( 34541, 41465, 0 ) )
            var_4 = getdvarint( "scr_br_bodycount_salt_mine_weight", 1 );
        else if ( var_3 == ( 29411, 2720, 0 ) )
            var_4 = getdvarint( "scr_br_bodycount_stadium_weight", 1 );
        else if ( var_3 == ( -28903, 49517, 0 ) )
            var_4 = getdvarint( "scr_br_bodycount_summit_weight", 1 );
        else if ( var_3 == ( 18376, -14868, 0 ) )
            var_4 = getdvarint( "scr_br_bodycount_tower_weight", 1 );

        var_1[var_1.size] = var_4;
    }

    return var_1;
}

_id_11B69( var_0, var_1 )
{
    var_2 = 0;

    foreach ( var_4 in var_1 )
        var_2 = var_2 + var_4;

    var_6 = randomintrange( 0, var_2 );

    foreach ( var_9, var_8 in var_0 )
    {
        if ( var_6 < var_1[var_9] )
            return var_8;

        var_6 = var_6 - var_1[var_9];
    }

    var_0 = scripts\engine\utility::array_randomize( var_0 );
    return var_0[0];
}

animscripted_clear()
{
    level endon( "game_ended" );
    level waittill( "calc_circle_centers" );
    level.br_level.checkpoint_create_carepackage[0] = level.br_level.checkpoint_create_carepackage[1];
    level.br_level.checkpoint_create_carepackage[7] = level.br_level.checkpoint_create_carepackage[8];
    level.br_level.checkpoint_create_carepackage[6] = level.br_level.checkpoint_create_carepackage[8];
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_12BAD = level.br_level.checkpoint_create_carepackage[6];
}

tank_deaths()
{
    var_0 = getdvarvector( "br_final_circle_override", level.dropoff );
    return var_0;
}

flickerlights()
{
    var_0 = ( level.br_level.checkpoint_create_carepackage[1][0], level.br_level.checkpoint_create_carepackage[1][1], 0 );
    var_1 = level.br_level.br_circleradii[1];
    var_2 = scripts\mp\gametypes\br_c130.gsc::createtestc130path( var_0, var_1 );
    return var_2;
}

anim_offset()
{
    thread relic_bang_and_boom_dropfunc();
}

relic_bang_and_boom_dropfunc()
{
    level endon( "game_ended" );
    self endon( "death" );
    var_0 = distance( self.teleport_text_updated.startpt, self.teleport_text_updated.hvt_delayed_cig );
    var_1 = var_0 / scripts\mp\gametypes\br_c130.gsc::getc130speed() - 5;
    wait( var_1 );

    foreach ( var_3 in level.players )
    {
        if ( isdefined( var_3 ) && isdefined( var_3.br_infil_type ) && var_3.br_infil_type == "c130" && !isdefined( var_3.jumptype ) )
        {
            var_3.jumptype = "outOfBounds";
            var_3 notify( "halo_kick_c130" );
        }
    }
}

circletimer( var_0 )
{
    if ( var_0 >= 2 )
        level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_11A9B = level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_11A9B + level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_11A9A;

    if ( var_0 < level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.init_preset_solutions )
    {
        init_weapon_spawns( var_0 );
        return 0;
    }

    if ( var_0 == level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.init_preset_solutions )
    {
        if ( !level.briotshieldinitialized )
            level._id_11AA6 = 7500;

        level thread scripts\mp\gametypes\br_quest_util.gsc::defenderflag();
        level thread scripts\mp\gametypes\br_quest_util.gsc::getvalidatedspawnorgangles();
        level thread init_relic_laststandmelee( level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.init_post_bsp_entities );

        foreach ( var_2 in level.players )
        {
            if ( isalive( var_2 ) || istrue( var_2.brjugg_cleanupents ) )
            {
                if ( getdvarint( "seasonal_event_id_num", 0 ) == 6 )
                    var_2 scripts\cp\helicopter\chopper_boss::_id_11A49( "t9_ch_global_reach_final_circle_for_s3_5_event_wz", 1 );
            }
        }

        return 0;
    }

    if ( var_0 == level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.init_preset_solutions + 1 )
    {
        level.br_circle.dangercircleui.origin = scripts\mp\gametypes\br_circle.gsc::getdangercircleorigin() + ( 0, 0, scripts\mp\gametypes\br_circle.gsc::getdangercircleradius() );
        scripts\mp\gametypes\br_circle.gsc::setstaticuicircles( 500, level.br_circle.safecircleui, level.br_circle.dangercircleui, 0 );
    }

    return 1;
}

player_give_intel_1_ks()
{
    var_0 = scripts\cp_mp\killstreaks\airdrop::getleveldata( "extra_life_crate" );
    var_0.capturestring = &"MP/GENERIC_LOOT_CRATE_CAPTURE";
    var_0.dummymodel = "military_carepackage_01_br_respawn";
    var_0.friendlymodel = undefined;
    var_0.enemymodel = undefined;
    var_0.mountmantlemodel = undefined;
    var_0.supportsownercapture = 0;
    var_0.headicon = undefined;
    var_0.minimapicon = undefined;
    var_0.usepriority = -1;
    var_0.usefov = 180;
    var_0.timeout = undefined;
    var_0.friendlyuseonly = 0;
    var_0.ownerusetime = 0.5;
    var_0.otherusetime = 0.5;
    var_0.activatecallback = ::initlocs_bunkertest;
    var_0.capturecallback = ::initlocs_codeprovidingphones;
    var_0.destroyoncapture = 1;
}

init_weapon_spawns( var_0 )
{
    if ( var_0 == 2 )
        level thread _id_121DA();
}

_id_121DA()
{
    wait( randomintrange( 10, 20 ) );

    foreach ( var_1 in level.players )
        var_1 scripts\mp\hud_message::showsplash( "br_body_count_respawn_crate_event" );

    level thread scripts\mp\gametypes\br_public.gsc::brleaderdialog( "respawn_crate" );
    var_3 = scripts\mp\gametypes\br_circle.gsc::getsafecircleorigin();
    var_4 = scripts\mp\gametypes\br_circle.gsc::getsafecircleradius();
    var_5 = randomfloat( 120 );
    var_6 = scripts\engine\utility::ter_op( scripts\engine\utility::cointoss(), 1, -1 );

    for ( var_7 = 0; var_7 < 3; var_7++ )
    {
        var_8 = var_3 + anglestoforward( ( 0, var_5 + var_6 * var_7 * 120, 0 ) ) * ( var_4 * 0.65 );
        var_9 = scripts\mp\gametypes\br_circle.gsc::mine_caves_vo( var_8, var_4 * 0.35, 0.25, 0.75, 1 );

        while ( !scripts\mp\gametypes\br_circle.gsc::rear_spotlight_model( var_9 ) )
        {
            var_9 = scripts\mp\gametypes\br_circle.gsc::mine_caves_vo( var_3, var_4, 0.1, 0.9, 1 );
            waitframe();
        }

        var_9 = var_9 + ( 0, 0, 2000 );
        var_10 = scripts\cp_mp\killstreaks\airdrop::dropcrate( undefined, undefined, "extra_life_crate", var_9, ( 0, randomint( 360 ), 0 ) );
        level.initarmor[level.initarmor.size] = var_10;
        var_10 thread init_weapon_variant_spawns();
        var_10 thread init_wind_tunnels();
        wait( randomintrange( 3, 10 ) );
    }
}

initlocs_bunkertest( var_0 )
{
    if ( istrue( var_0 ) )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "airdrop", "registerCrateForCleanup" ) )
            [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "airdrop", "registerCrateForCleanup" ) ]]( self );
    }
}

initlocs_codeprovidingphones( var_0 )
{
    level.initarmor = scripts\engine\utility::array_remove( level.initarmor, self );
    self notify( "captured" );
    var_1 = easepower( "brloot_bodycount_extra_life", self.origin + ( 0, 0, 16 ) );
    scripts\mp\gametypes\br_pickups.gsc::_id_11959( var_1 );

    if ( isdefined( self.objectiveiconid ) )
        objective_delete( self.objectiveiconid );

    playfx( level.conf_fx["vanish"], self.helis_assault3_fob_check_size.origin );
    self.helis_assault3_fob_check_size delete();
}

init_weapon_variant_spawns()
{
    var_0 = scripts\engine\utility::drop_to_ground( self.origin, 50, -3000, ( 0, 0, 1 ) );
    self.helis_assault3_fob_check_size = spawn( "script_model", var_0 + ( 0, 0, 3 ) );
    self.helis_assault3_fob_check_size setmodel( "scr_smoke_grenade" );
    wait 1.0;
    self.helis_assault3_fob_check_size playloopsound( "mp_flare_burn_lp" );
    self.helis_assault3_fob_check_size setscriptablepartstate( "smoke", "on" );
}

init_wind_tunnels()
{
    self setscriptablepartstate( "objective", "respawn" );
}

init_weapon_placements()
{
    self.helis_assault3_fob_check_size delete();
    playfx( level.conf_fx["vanish"], self.origin );
    level.initarmor = scripts\engine\utility::array_remove( level.initarmor, self );
    scripts\cp_mp\killstreaks\airdrop::getchallengegamemode();
}

_keypadscriptableused_bunkeralt()
{

}

init_relic_laststandmelee( var_0, var_1 )
{
    level endon( "game_ended" );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.handle_no_ammo_mun = spawnstruct();
    var_2 = level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_12BAD;

    if ( isdefined( var_1 ) )
        var_2 = var_1;

    var_3 = level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.init_relic_fastbleedout;
    var_4 = getgroundposition( var_2, 1 );

    if ( isdefined( var_0 ) )
    {
        var_5 = var_0 - level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.init_range_targets;

        if ( var_5 > 0 )
            wait( var_5 );
        else
            wait 30;
    }

    scripts\mp\gametypes\br_publicevents.gsc::_id_1205D( "br_body_count_exfil_incoming" );
    level thread init_relic_martyrdom( var_4 );
    var_6 = damagestatedata( 700 );

    if ( var_6 < level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.init_player_falling_anims )
        var_6 = level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.init_player_falling_anims;

    var_5 = level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.init_range_targets - var_6;
    wait( var_5 );
    var_7 = is_killstreak_valid_for_swat();
    var_8 = undefined;

    if ( isdefined( var_7 ) )
    {
        var_8 = var_7 thread validchallengetimer( var_2, undefined, 5000, 700, 0, 0 );
        var_8 thread initial_angles();
    }

    var_5 = level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.init_player_falling_anims - level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.init_ranges;
    wait( var_5 );
    scripts\mp\gametypes\br_publicevents.gsc::_id_1205D( "br_body_count_exfil_online" );

    foreach ( var_10 in level.players )
        var_10 scripts\mp\utility\lower_message::setlowermessageomnvar( 72, undefined, 10 );

    level thread scripts\mp\gametypes\br_public.gsc::brleaderdialog( "exfil_ready" );
    wait( level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.init_ranges );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.handle_no_ammo_mun.trigger = spawn( "trigger_radius", var_4, 0, int( var_3 ), int( level.checkpoint_fx_set ) );
    var_12 = scripts\mp\gametypes\obj_dom.gsc::setupobjective( level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.handle_no_ammo_mun.trigger, "neutral" );
    var_12.onuse = ::init_relic_dogtags;
    var_12.onbeginuse = ::init_reach_pipe_room;
    var_12.onuseupdate = ::init_relic_doomslayer;
    var_12.onenduse = ::init_relic_aggressive_melee;
    var_12.oncontested = ::init_reach_wind_room;
    var_12.onuncontested = ::init_relic_bang_and_boom;
    var_12.onunoccupied = ::init_relic_damage_from_above;
    var_12.onpinnedstate = ::init_relic_ammo_drain;
    var_12.onunpinnedstate = ::init_relic_dfa;
    var_12._id_124D9 = ::init_relic_amped;
    var_12.stompprogressreward = ::init_relic_nuketimer;
    var_12.defcon_models_cleanup = 1;
    var_12.id = "domFlag";
    var_12.pinobj = 0;
    var_12.lockupdatingicons = 1;
    var_12 scripts\mp\gameobjects::setcapturebehavior( "persistent" );
    var_13 = level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.init_player_characters;
    var_12 scripts\mp\gameobjects::setusetime( var_13 );
    var_12 init_relic_oneclip();
    playencryptedcinematicforall( var_12.objidnum, 1 );
    level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.handle_no_ammo_mun.init_player_achievements = var_12;
    level.objectivescaler = 1;

    foreach ( var_10 in level.players )
    {
        var_10 setclientomnvar( "ui_securing", 17 );
        var_10 setclientomnvar( "ui_securing_progress", 0 );
    }
}

init_relic_gun_game( var_0 )
{
    foreach ( var_2 in level.players )
    {
        if ( isdefined( var_2 ) && isdefined( var_2.team ) )
        {
            if ( var_2.team == var_0 )
            {
                var_2 setclientomnvar( "ui_securing", 18 );
                continue;
            }

            var_2 setclientomnvar( "ui_securing", 19 );
        }
    }
}

init_relic_hideobjicons( var_0 )
{
    if ( var_0 == "contested" )
        self setclientomnvar( "ui_securing", 20 );
    else if ( var_0 == "friendly" )
        self setclientomnvar( "ui_securing", 18 );
    else
        self setclientomnvar( "ui_securing", 19 );
}

init_relic_punchbullets( var_0 )
{
    foreach ( var_2 in level.players )
    {
        if ( isdefined( var_2 ) )
            var_2 setclientomnvar( "ui_securing_progress", var_0 );
    }
}

init_reach_exhaust_waste( var_0 )
{
    self notify( "exfil_newOwnerFeedback" );
    self endon( "exfil_newOwnerFeedback" );

    if ( isplayer( var_0 ) )
        var_1 = var_0.team;
    else
        var_1 = var_0;

    foreach ( var_3 in level.players )
    {
        if ( isdefined( var_3 ) && isdefined( var_1 ) )
        {
            if ( var_3.team == var_1 )
            {
                var_3 thread init_relic_hideobjicons( "friendly" );
                var_3 thread scripts\mp\hud_message::showsplash( "br_body_count_friendly_team_exfil" );
                continue;
            }

            var_3 thread init_relic_hideobjicons( "enemy" );
            var_3 thread scripts\mp\hud_message::showsplash( "br_body_count_enemy_team_exfil" );
        }
    }

    trial_updatehitmarker( var_1, "exfil_friendly_start", "exfil_enemy_start" );
}

init_relic_dogtags( var_0 )
{
    var_1 = var_0.team;
    self.capturetime = gettime();
    self.delete_after_objective_a = 1;

    if ( self.touchlist[var_1].size == 0 && isdefined( self.oldtouchlist ) )
        self.touchlist = self.oldtouchlist;

    trial_updatehitmarker( var_1, "exfil_friendly_win", "exfil_enemy_win" );
    init_relic_punchbullets( 1 );
    thread init_range( var_1 );
}

init_reach_pipe_room( var_0 )
{
    if ( !isdefined( self.start_pipe_room_menu ) || !self.start_pipe_room_menu )
    {
        self.start_pipe_room_menu = 1;
        thread init_reach_exhaust_waste( var_0 );
        var_1 = scripts\mp\utility\teams::getfriendlyplayers( var_0.team, 0 );

        foreach ( var_3 in var_1 )
            var_3 notify( "calloutmarkerping_warzoneKillQuestIcon" );
    }
}

init_relic_doomslayer( var_0, var_1, var_2, var_3 )
{
    if ( var_1 < 1.0 && !level.gameended && !istrue( self.delete_after_objective_a ) )
    {
        init_relic_punchbullets( var_1 );
        trial_ui_retry_disabled( var_1, var_0 );
    }

    if ( var_1 > 0.05 && var_2 && !istrue( self.didstatusnotify ) )
        self.didstatusnotify = 1;

    if ( self.defcon_models_cleanup && var_1 > 0.5 )
    {
        self.defcon_models_cleanup = 0;
        trial_updatehitmarker( var_0, "exfil_friendly_50", "exfil_enemy_50" );
    }
}

init_relic_aggressive_melee( var_0, var_1, var_2 )
{
    scripts\mp\gametypes\obj_dom.gsc::dompoint_onuseend( var_0, var_1, var_2 );
}

init_reach_wind_room()
{
    scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_contested" );
    scripts\mp\objidpoolmanager::objective_set_progress_team( self.objidnum, undefined );
    level thread scripts\mp\gametypes\br_public.gsc::brleaderdialog( "exfil_contested" );
    var_0 = scripts\mp\gameobjects::getownerteam();

    foreach ( var_2 in level.players )
    {
        if ( isdefined( var_2 ) && isdefined( var_0 ) )
            var_2 thread init_relic_hideobjicons( "contested" );
    }
}

init_relic_bang_and_boom( var_0 )
{
    var_1 = scripts\mp\gameobjects::getownerteam();
    var_2 = undefined;
    var_3 = init_pushable_minecart();

    if ( var_3 <= 1 )
    {
        foreach ( var_5 in level.teamnamelist )
        {
            var_6 = self.teamprogress[var_5];

            if ( var_6 > 0 )
            {
                var_2 = var_5;
                break;
            }
        }

        if ( isdefined( var_2 ) )
        {
            scripts\mp\objidpoolmanager::objective_set_progress_team( self.objidnum, var_2 );
            init_relic_gun_game( var_2 );
        }
        else if ( var_1 != "neutral" )
            scripts\mp\objidpoolmanager::objective_set_progress_team( self.objidnum, var_1 );
        else if ( var_0 != "none" )
            scripts\mp\objidpoolmanager::objective_set_progress_team( self.objidnum, var_0 );

        scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_defend", "waypoint_capture" );

        if ( var_0 == "none" || var_1 == "neutral" )
            self.didstatusnotify = 0;
    }
}

init_relic_damage_from_above()
{
    var_0 = scripts\mp\gameobjects::getownerteam();

    if ( var_0 == "neutral" )
        scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_captureneutral" );
    else
        scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_defend", "waypoint_capture" );

    self.didstatusnotify = 0;
}

init_relic_ammo_drain( var_0 )
{
    if ( self.ownerteam != "neutral" && self.numtouching[self.ownerteam] && !self.stalemate )
        scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_defending", "waypoint_capture" );
}

init_relic_dfa( var_0 )
{
    if ( self.ownerteam != "neutral" && !self.numtouching[self.ownerteam] && !self.stalemate )
        scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_defend", "waypoint_capture" );
}

init_relic_amped( var_0 )
{
    var_1 = scripts\mp\utility\teams::getenemyteams( var_0 );
    var_2 = undefined;

    foreach ( var_4 in var_1 )
    {
        var_5 = self.teamprogress[var_4];

        if ( var_5 > 0 )
            var_2 = var_5 / self.usetime;
    }

    if ( isdefined( var_2 ) )
    {
        init_relic_punchbullets( var_2 );

        if ( var_2 <= 0.008 )
            thread init_reach_exhaust_waste( self.claimteam );

        if ( !self.defcon_models_cleanup && var_2 < 0.4 )
            self.defcon_models_cleanup = 1;
    }
}

init_relic_nuketimer( var_0 )
{
    var_0 thread scripts\mp\utility\points::giveunifiedpoints( "obj_prog_defend" );
    scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_defending", "waypoint_capture" );

    if ( isdefined( self.lastprogressteam ) )
    {
        thread init_reach_exhaust_waste( var_0 );
        self.lastprogressteam = undefined;
    }
}

trial_ui_retry_disabled( var_0, var_1 )
{
    if ( !isdefined( self.lastsfxplayedtime ) )
        self.lastsfxplayedtime = gettime();

    if ( self.lastsfxplayedtime + 995 < gettime() )
    {
        self.lastsfxplayedtime = gettime();
        var_2 = "";
        var_0 = int( floor( var_0 * 10 ) );
        var_2 = "mp_dom_capturing_tick_0" + var_0;
        self.visuals[0] playsoundtoteam( var_2, var_1 );
    }
}

init_range( var_0 )
{
    waitframe();

    if ( istrue( level._id_12924 ) )
        return;

    level._id_12924 = 1;
    level._id_13010 = 1;
    level thread scripts\mp\gamelogic::endgame( var_0, game["end_reason"]["objective_completed"] );
    var_1 = [];

    if ( isdefined( var_0 ) && var_0 != "tie" )
        var_1 = scripts\mp\utility\teams::getteamdata( var_0, "players" );

    thread scripts\mp\music_and_dialog::vehicle_occupancy_giveriotshield( var_1 );
}

init_relic_martyrdom( var_0 )
{
    var_1 = spawn( "script_model", var_0 - ( 0, 0, 3 ) );
    var_1 setmodel( "tag_origin" );
    wait 1.0;
    playfxontag( scripts\engine\utility::getfx( "vfx_smk_signal_green" ), var_1, "tag_origin" );
}

init_pushable_minecart()
{
    var_0 = 0;

    foreach ( var_3, var_2 in self.numtouching )
    {
        if ( var_2 > 0 && ( !isstring( var_3 ) || var_3 != "none" ) )
            var_0++;
    }

    return var_0;
}

init_relic_oneclip()
{
    scripts\mp\objidpoolmanager::update_objective_setneutrallabel( self.objidnum, "BR_BODYCOUNT/EXFIL" );
}

_maphint_keypadscriptableused()
{

}

tv_station_fastrope_two_infil_start_targetname_array()
{
    if ( !isdefined( self.operatorcustomization ) || !isdefined( self.operatorcustomization.suit ) )
        return;

    if ( self.operatorcustomization.suit == "actionhero_mp" )
    {
        thread try_to_do_first_entry_room_logic();
        return;
    }

    self.tacinsert_brrespawnsplash = self.operatorcustomization.suit;
    self.operatorcustomization.suit = "actionhero_mp";
    scripts\mp\utility\player::_setsuit( "actionhero_mp" );
    thread try_to_do_first_entry_room_logic();
}

try_to_do_first_entry_room_logic()
{
    self notify( "custom_suit_start" );
    self endon( "custom_suit_start" );
    scripts\engine\utility::_id_12E53( level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.steam_point_think, "death" );
    self.operatorcustomization.suit = self.tacinsert_brrespawnsplash;
    scripts\mp\utility\player::_setsuit( self.tacinsert_brrespawnsplash );
    self.tacinsert_brrespawnsplash = undefined;
}

tv_station_fastrope_two_infil_start_targetname_array_index()
{
    self notify( "player_set_infinate_super_sprint" );
    self endon( "player_set_infinate_super_sprint" );
    self endon( "death_or_disconnect" );
    self refreshsprinttime();
    var_0 = 0;
    thread gunship_origin_override();
    self.movespeedscaler = 1.2;
    scripts\mp\weapons::updatemovespeedscale();
    self lerpfovbypreset( "zombiedefault" );

    if ( !scripts\mp\gametypes\br_public.gsc::obj_room_fire_08() )
    {
        scripts\mp\utility\perk::giveperk( "specialty_sprintmelee" );
        scripts\mp\utility\perk::giveperk( "specialty_sprintads" );
        scripts\mp\utility\perk::giveperk( "specialty_marathon" );
    }

    while ( var_0 < level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.steam_point_think )
    {
        if ( self issupersprinting() )
            self refreshsprinttime();

        wait 0.1;
        var_0 = var_0 + 0.1;
    }

    if ( !scripts\mp\gametypes\br_public.gsc::obj_room_fire_08() )
    {
        scripts\mp\utility\perk::removeperk( "specialty_sprintmelee" );
        scripts\mp\utility\perk::removeperk( "specialty_sprintads" );
        scripts\mp\utility\perk::removeperk( "specialty_marathon" );
    }

    self.movespeedscaler = 1;
    scripts\mp\weapons::updatemovespeedscale();
    self lerpfovbypreset( "default_2seconds" );
}

gunship_origin_override()
{
    self notify( "reset_timer" );
    waitframe();
    self setclientomnvar( "ui_privateevent_timer_type", 3 );
    var_0 = level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.steam_point_think;
    var_1 = gettime() + var_0 * 1000;
    self setclientomnvar( "ui_privateevent_timer", var_1 );
    scripts\engine\utility::_id_12E54( level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d.steam_point_think, "reset_timer", "death" );
    self setclientomnvar( "ui_privateevent_timer_type", 0 );
}

_id_12B20()
{
    if ( lb_mg_dmg_factor_tail_rotor() )
    {
        if ( !scripts\mp\gametypes\br_public.gsc::hasrespawntoken() )
            scripts\mp\gametypes\br_pickups.gsc::addrespawntoken( 1 );
    }
    else if ( scripts\mp\gametypes\br_public.gsc::hasrespawntoken() )
        scripts\mp\gametypes\br_pickups.gsc::removerespawntoken();
}

_id_1205A( var_0 )
{
    waittillframeend;
    scripts\mp\utility\lower_message::setlowermessageomnvar( 9, int( gettime() + var_0 * 1000 ) );
    scripts\mp\gametypes\br_gulag.gsc::_id_11EE0( 1 );
    thread overtimebuiltintomatchtimer( var_0 );
}

overtimebuiltintomatchtimer( var_0 )
{
    self endon( "disconnect" );

    if ( isdefined( var_0 ) )
        wait( var_0 );

    scripts\mp\gametypes\br_gulag.gsc::_id_11EE0( 0 );
    scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
}

lb_mg_dmg_factor_tail_rotor()
{
    if ( !isdefined( self.pitcher_lights ) )
        self.pitcher_lights = level.calloutmarkerpingvo_getfulloperatorvoaliasfromsimplealias2d._id_1248E;

    return self.pitcher_lights;
}

play_onboard_plane_vo()
{
    self.pitcher_lights = lb_mg_dmg_factor_tail_rotor();
    self.pitcher_lights++;

    if ( !isdefined( self.place_weapon ) )
        self.place_weapon = self.pitcher_lights;
    else if ( self.pitcher_lights > self.place_weapon )
        self.place_weapon = self.pitcher_lights;

    _id_12B20();
    _id_12AA7();
}

get_player_aggro_score()
{
    self.pitcher_lights = lb_mg_dmg_factor_tail_rotor();
    self.pitcher_lights--;

    if ( !isdefined( self.pity_timer_end_time ) )
        self.pity_timer_end_time = 1;
    else
        self.pity_timer_end_time++;

    if ( self.pitcher_lights < 0 )
        self.pitcher_lights = 0;
}

little_bird_mg_cp_waitandspawn( var_0, var_1 )
{
    var_2 = ( randomfloat( 1 ) - 0.5, randomfloat( 1 ) - 0.5, 0 );

    if ( !istrue( var_1 ) )
        var_2[2] = randomfloat( 1 ) - 0.5;

    var_3 = var_0 * vectornormalize( var_2 );
    return var_3;
}

_setdomflagiconinfo( var_0, var_1, var_2, var_3 )
{
    level.waypointcolors[var_0] = var_1;
    level.waypointbgtype[var_0] = 1;
    level.waypointstring[var_0] = var_2;
    level.waypointshader[var_0] = "ui_mp_br_mapmenu_icon_gulag_overtime_objective";
    level.waypointpulses[var_0] = var_3;
}

updateassassinationthreatlevel()
{
    var_0 = spawnstruct();
    var_0.wait_for_player_in_gas = [];
    var_0.bloadinghvt = [];
    var_0.blockachievementstimestamp = [];
    var_0.blockade_get_bomb_icon_on_cell_phone = [];
    var_0.offhands = [];
    var_0.init_client = [];
    var_0.obj_ow_atvs_spawned = self.obj_ow_atvs_spawned;
    var_0.bot_gametype_allied_attackers_for_team = scripts\mp\equipment::getequipmentslotammo( "health" );
    var_1 = [];
    var_2 = self getweaponslistprimaries();

    foreach ( var_4 in var_2 )
    {
        if ( !scripts\mp\utility\weapon::putinlaststand( var_4 ) && !issubstr( var_4.basename, "iw8_fists_mp" ) && !scripts\mp\utility\weapon::propwatchcleanuponroundend( var_4.basename ) )
            var_1[var_1.size] = var_4;
    }

    foreach ( var_7 in var_1 )
    {
        var_8 = createheadicon( var_7 );

        if ( var_7.basename == "iw8_lm_dblmg_mp" || var_7.basename == "iw8_la_mike32_mp" )
        {
            var_0.bloadinghvt[var_8] = self getweaponammoclip( var_7 );
            var_0.blockade_get_bomb_icon_on_cell_phone[var_8] = self getweaponammostock( var_7 );
        }
        else
        {
            var_0.bloadinghvt[var_8] = weaponclipsize( var_7 );
            var_0.blockade_get_bomb_icon_on_cell_phone[var_8] = int( max( self getweaponammostock( var_7 ), weaponclipsize( var_7 ) ) );
        }

        if ( scripts\mp\utility\weapon::printcodechosen( var_7 ) )
            var_0.blockachievementstimestamp[var_8] = weaponclipsize( var_7 );

        if ( getsubstr( var_8, 0, 4 ) == "alt_" )
            continue;

        var_0.wait_for_player_in_gas[var_0.wait_for_player_in_gas.size] = var_7;
    }

    var_10 = self getweaponslistoffhands();

    foreach ( var_12 in var_10 )
    {
        if ( var_12.basename == "bandage_br" )
            continue;

        var_13 = self getweaponammoclip( var_12 );

        if ( var_13 <= 0 )
            continue;

        var_0.offhands[var_0.offhands.size] = var_12;
        var_14 = createheadicon( var_12 );
        var_0.bloadinghvt[var_14] = var_13;
    }

    foreach ( var_18, var_17 in self.equipment )
        var_0.init_client[var_17] = var_18;

    var_0.super = undefined;

    if ( isdefined( self.super ) && !self.super.usepercent )
        var_0.super = self.equipment["super"];

    if ( isdefined( self.streakdata.streaks[1] ) )
        var_0.relics_monitor_on_player = self.streakdata.streaks[1].streakname;

    if ( scripts\cp_mp\gasmask::hasgasmask( self ) )
    {
        var_0.gasmaskhealth = self.gasmaskhealth;
        var_0.kingslayerdeaths = self.kingslayerdeaths;
        var_0.kioskreviveplayer = self.kioskreviveplayer;
    }

    self._id_11C5A = var_0;
}

updateassassinationdataomnvar()
{
    self takeallweapons( 0, 1 );
    scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();
    self.equipment["primary"] = undefined;
    self.equipment["secondary"] = undefined;
    self.equipment["health"] = undefined;
    self.equipment["super"] = undefined;
    var_0 = 0;

    foreach ( var_2 in self._id_11C5A.wait_for_player_in_gas )
    {
        var_3 = createheadicon( var_2 );

        if ( var_3 == "iw8_lm_dblmg_mp" )
            scripts\mp\gametypes\br_weapons.gsc::br_forcegiveweapon( "brloot_weapon_lm_dblmg_lege", self );
        else
            scripts\cp_mp\utility\inventory_utility::_giveweapon( var_2 );

        if ( !var_0 )
        {
            self assignweaponprimaryslot( var_3 );
            scripts\cp_mp\utility\inventory_utility::_switchtoweapon( var_2 );
            var_0 = 1;
        }

        scripts\mp\weapons::fixupplayerweapons( self, var_3 );
    }

    var_5 = getcompleteweaponname( "iw8_fists_mp" );

    if ( self._id_11C5A.wait_for_player_in_gas.size < 2 )
        self giveweapon( var_5 );

    foreach ( var_7 in self._id_11C5A.offhands )
    {
        var_8 = scripts\mp\equipment::getequipmentreffromweapon( var_7 );

        if ( !isdefined( var_8 ) )
            continue;

        var_9 = self._id_11C5A.init_client[var_8];

        if ( !isdefined( var_9 ) )
            continue;

        scripts\mp\equipment::giveequipment( var_8, var_9 );
    }

    foreach ( var_3, var_12 in self._id_11C5A.blockade_get_bomb_icon_on_cell_phone )
    {
        self setweaponammostock( var_3, var_12 );
        var_2 = getcompleteweaponname( getweaponbasename( var_3 ) );
        var_13 = scripts\mp\gametypes\br_weapons.gsc::br_ammo_type_for_weapon( var_2 );

        if ( isdefined( var_13 ) )
        {
            self.br_ammo[var_13] = var_12;
            scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_hud_update_ammotype( var_13 );
        }
    }

    foreach ( var_3, var_12 in self._id_11C5A.bloadinghvt )
        self setweaponammoclip( var_3, var_12 );

    foreach ( var_3, var_12 in self._id_11C5A.blockachievementstimestamp )
        self setweaponammoclip( var_3, var_12, "left" );

    waitframe();

    if ( isdefined( self._id_11C5A.super ) )
    {
        var_16 = level.br_pickups.br_superreference[level.br_pickups.br_equipnametoscriptable[self._id_11C5A.super]];
        scripts\mp\gametypes\br_pickups.gsc::forcegivesuper( var_16, 0 );
    }

    if ( isdefined( self._id_11C5A.relics_monitor_on_player ) )
        scripts\mp\gametypes\br_pickups.gsc::isspecialistbonus( self._id_11C5A.relics_monitor_on_player );

    self.obj_ow_atvs_spawned = self._id_11C5A.obj_ow_atvs_spawned;
    self setclientomnvar( "ui_br_has_plate_pouch", istrue( self.obj_ow_atvs_spawned ) );

    if ( isdefined( self._id_11C5A.bot_gametype_allied_attackers_for_team ) && self._id_11C5A.bot_gametype_allied_attackers_for_team > 0 )
    {
        scripts\mp\equipment::giveequipment( "equip_armorplate", "health" );
        scripts\mp\equipment::setequipmentslotammo( "health", self._id_11C5A.bot_gametype_allied_attackers_for_team );
    }

    if ( isdefined( self._id_11C5A.kioskreviveplayer ) )
        scripts\cp_mp\gasmask::init( self._id_11C5A.gasmaskhealth, self._id_11C5A.kioskreviveplayer );

    thread scripts\cp_mp\gestures::_id_12974();
    self._id_11C5A = undefined;
    thread _id_12AD1();
    thread _id_11ABC();
}

_id_12AD1()
{
    self endon( "death" );
    wait 1;
    _id_12AA7();
    self.pitcher_lights = lb_mg_dmg_factor_tail_rotor();

    if ( self.pitcher_lights == 0 )
        level thread scripts\mp\gametypes\br_public.gsc::cloud_cover( "no_respawns", self );
}

_id_11ABC()
{
    var_0 = launch_smoke_mortar();

    if ( var_0 >= 8 )
        scripts\mp\perks\perks::analytics_lui_mission_end_dlog();
}

droponplayerdeath( var_0 )
{
    updateassassinationthreatlevel();
    var_1 = scripts\mp\gametypes\br_pickups.gsc::playersetattractiontime();
    scripts\mp\gametypes\br_pickups.gsc::heli_check_player_below_starts( var_1 );
    scripts\mp\gametypes\br_pickups.gsc::heli_gunner_logic( var_1 );
    scripts\mp\gametypes\br_pickups.gsc::heli_delayedpadstateupdate( var_1 );
    scripts\mp\gametypes\br_pickups.gsc::heli_extraction( var_1 );
    scripts\mp\gametypes\br_pickups.gsc::empty_vo_func();
    playerdropplunderondeath( var_1, var_0 );

    if ( isdefined( var_0 ) )
        level thread spawndogtags( self, var_0, var_1 );

    return 1;
}

playerdropplunderondeath( var_0, var_1 )
{
    var_2 = 0.2;
    var_3 = 0.3;

    if ( isdefined( self.plundercount ) && self.plundercount > 0 )
        var_4 = self.plundercount;
    else
        var_4 = 0;

    var_5 = int( var_4 * var_2 + 0.5 );
    var_6 = int( var_4 * var_3 );
    scripts\mp\gametypes\br_plunder.gsc::playersetplundercount( var_5 );

    if ( var_6 <= 0 )
        return;

    scripts\mp\gametypes\br_plunder.gsc::heli_leaving_monitor( var_6, var_0 );
}

trial_updatehitmarker( var_0, var_1, var_2 )
{
    foreach ( var_4 in level.teamnamelist )
    {
        if ( var_4 == var_0 )
        {
            level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( var_1, var_4 );
            continue;
        }

        level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( var_2, var_4 );
    }
}

validchallengetimer( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = var_0;
    var_7 = var_6 + ( 0, 0, 2500 );
    var_8 = is_module_active( var_7, var_1 );
    var_9 = ( 0, var_8, 0 );
    var_10 = undefined;
    var_11 = undefined;

    if ( isdefined( var_2 ) )
    {
        var_10 = var_7 + -1 * anglestoforward( var_9 ) * var_2;
        var_11 = var_7 + anglestoforward( var_9 ) * var_2;
    }
    else
    {
        var_10 = var_7 + -1 * anglestoforward( var_9 ) * 5000;
        var_11 = var_7 + anglestoforward( var_9 ) * 5000;
    }

    var_12 = spawnheli( self, var_10, var_7, var_11, var_3, var_4, var_5 );
    return var_12;
}

is_killstreak_valid_for_swat()
{
    var_0 = getarraykeys( level.teamdata );

    foreach ( var_2 in var_0 )
    {
        if ( level.teamdata[var_2]["alivePlayers"].size > 0 )
            return level.teamdata[var_2]["alivePlayers"][0];
    }

    return undefined;
}

is_module_active( var_0, var_1 )
{
    if ( isdefined( var_1 ) && isdefined( var_1.isgroundwarcoremode ) )
        return var_1.isgroundwarcoremode;

    var_2 = 10;
    var_3 = scripts\engine\trace::create_world_contents();

    for ( var_4 = 0; var_4 < 360; var_4 = var_4 + var_2 )
    {
        var_5 = ( 0, var_4, 0 );
        var_6 = var_0 + -1 * anglestoforward( var_5 ) * 5000;
        var_7 = var_0 + anglestoforward( var_5 ) * 5000;
        var_8 = scripts\engine\trace::sphere_trace( var_0, var_7, 100, undefined, var_3, 1 );

        if ( var_8["fraction"] == 1 )
        {
            if ( isdefined( var_1 ) )
                var_1.isgroundwarcoremode = var_4;

            return var_4;
        }

        if ( var_4 % 3 == 0 )
            waitframe();
    }

    var_4 = randomfloat( 360 );

    if ( isdefined( var_1 ) )
        var_1.isgroundwarcoremode = var_4;

    return var_4;
}

initial_angles()
{
    self endon( "death" );
    self endon( "leaving" );
    self setvehgoalpos( self.pathgoal, 1 );
    self settargetyaw( self.mortars_set_player_targeted );
    var_0 = _id_127BF( self.pathgoal, self.hoverheight );
    var_1 = self.pathgoal[2] - var_0;
    self.isloadinggulag = damagestatedata( var_1 );
    opennukecrate( 1, self.isloadinggulag );
    self waittill( "goal" );
    thread heliwatchgameendleave();
    thread onriskplayerkilled();
    helidescend( self.endpoint, var_0 );
    open_any_random_airlock_door();
    helicleanupextract();
    thread onweapondroppickedup();
}

spawnheli( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = vectortoangles( var_2 - var_1 );
    var_8 = 99;
    var_9 = scripts\cp_mp\vehicles\vehicle_tracking::_spawnhelicopter( var_0, var_1, var_7, "veh_apache_plunder_mp", "veh8_mil_air_mindia8_plunder_x" );

    if ( !isdefined( var_9 ) )
        return;

    var_10 = var_2 * ( 1, 1, 0 );
    var_9.speed = 50;
    var_9.accel = 99999;
    var_9.health = 1000;
    var_9.maxhealth = var_9.health;
    var_9.team = var_0.team;
    var_9.owner = var_0;
    var_9.defendloc = var_2;
    var_9.lifeid = 0;
    var_9.flaresreservecount = var_8;
    var_9.pathgoal = var_2;
    var_9.teleport_entities_inside_subway_car = var_3;
    var_9.endpoint = var_10;
    var_9.mortars_set_player_targeted = var_7[1];
    var_9.canuse = var_6;
    var_9.hoverheight = var_4;
    var_9.vehiclename = "magma_plunder_chopper";

    if ( istrue( var_5 ) )
        var_9 setcandamage( 1 );
    else
        var_9 setcandamage( 0 );

    var_9 setmaxpitchroll( 10, 25 );
    var_9 vehicle_setspeed( var_9.speed, var_9.accel );
    var_9 sethoverparams( 50, 100, 50 );
    var_9 setturningability( 0.05 );
    var_9 setyawspeed( 45, 25, 25, 0.5 );
    var_9 setotherent( var_0 );
    var_9 thread scripts\mp\killstreaks\flares::flares_handleincomingstinger( undefined, undefined );
    return var_9;
}

damagestatedata( var_0 )
{
    var_1 = damagestateref( 5000, 100, 125 );
    var_2 = damagestateref( var_0, 25.0, 31.25 );
    var_3 = var_1 + var_2;
    return var_3;
}

_id_127BF( var_0, var_1 )
{
    var_2 = undefined;

    if ( isdefined( var_1 ) )
        var_2 = var_1;
    else
        var_2 = 256;

    var_3 = tracegroundpoint( var_0, 100, [ self ] );
    var_4 = var_3[2];
    var_5 = var_4 + var_2;
    return var_5;
}

opennukecrate( var_0, var_1 )
{
    var_2 = gettime() + int( var_1 * 1000 );
    var_3 = level.teamdata[self.team]["alivePlayers"];

    foreach ( var_5 in var_3 )
    {
        var_5 scripts\mp\trials\trial_target_utility::_id_11E8D( "ui_br_plunder_extract_state", var_0 );
        var_5 scripts\mp\trials\trial_target_utility::_id_11E8D( "ui_br_plunder_extract_end_time", var_2 );
    }
}

heliwatchgameendleave()
{
    self endon( "death" );
    self endon( "leaving" );
    level waittill( "game_ended" );
    thread onweapondroppickedup();
}

onriskplayerkilled()
{
    self endon( "death" );

    if ( !isdefined( self.vfxent ) )
        return;

    self.vfxent endon( "death" );
    wait 5;
    self.vfxent setscriptablepartstate( "smoke", "dissipate" );
    self.vfxent playsound( "smoke_canister_tail_dissipate" );
    wait 1;
    self.vfxent stoploopsound();
    wait 4.5;
    self.vfxent delete();
}

helidescend( var_0, var_1 )
{
    self endon( "death" );
    var_2 = var_0[0];
    var_3 = var_0[1];
    var_4 = ( var_2, var_3, var_1 );
    self setvehgoalpos( var_4, 1 );
    self settargetyaw( self.mortars_set_player_targeted );
    self vehicle_setspeed( 25.0, 31.25 );
    thread onquesttablethide();
    thread onriotshieldstow_force();
    self waittill( "goal" );
    self sethoverparams( 1, 1 );
    wait 1;
    self sethoverparams( 25, 20, 10 );
}

open_any_random_airlock_door()
{
    self endon( "game_ended" );
    thread onplayereliminated_func();
    opennukecrate( 2, 300 );
    wait 300;
    self.isdepot = 0;
    heliusecleanup();
}

heliusecleanup()
{
    if ( isdefined( self.usable ) )
    {
        level.br_depots = scripts\engine\utility::array_remove( level.br_depots, self.usable );
        self.usable = undefined;
    }
}

onplayereliminated_func( var_0 )
{
    scripts\engine\utility::waittill_either( "leaving", "death" );
    heliusecleanup();
}

helicleanupextract( var_0 )
{
    if ( isdefined( self.vfxent ) )
    {
        self.vfxent stoploopsound();
        self.vfxent delete();
    }

    if ( istrue( var_0 ) && isdefined( self.site ) )
        self.site setscriptablepartstate( self.site.type, self.site.allassassin_updatewait );
}

onweapondroppickedup()
{
    self endon( "death" );
    self notify( "leaving" );
    self.leaving = 1;
    self setvehgoalpos( self.pathgoal, 1 );
    self settargetyaw( self.mortars_set_player_targeted );
    opennukecrate( 3, self.isloadinggulag );
    self waittill( "goal" );
    self vehicle_setspeed( self.speed, self.accel );
    self setvehgoalpos( self.teleport_entities_inside_subway_car, 1 );
    self settargetyaw( self.mortars_set_player_targeted );
    self waittill( "goal" );
    self stoploopsound();
    opennukecrate( 0, 0 );
    self notify( "heli_gone" );
    onprematchfadedone2();
}

tracegroundpoint( var_0, var_1, var_2 )
{
    var_3 = -99999;
    var_4 = ( var_0[0], var_0[1], var_3 );
    var_5 = scripts\engine\trace::create_world_contents();
    var_6 = undefined;

    if ( isdefined( var_1 ) )
        var_6 = scripts\engine\trace::sphere_trace( var_0, var_4, var_1, var_2, var_5 );
    else
        var_6 = scripts\engine\trace::ray_trace( var_0, var_4, var_2, var_5 );

    return var_6["position"];
}

damagestateref( var_0, var_1, var_2 )
{
    var_3 = var_0 * 0.0000157828;
    var_4 = 0.5 * var_2;
    var_5 = var_1;
    var_6 = -1 * var_3;
    var_7 = ( -1 * var_5 + sqrt( var_5 * var_5 - 4 * var_4 * var_6 ) ) / ( 2 * var_4 );
    var_7 = var_7 * 3600;
    var_7 = var_7 + 1.5;
    return var_7;
}

onquesttablethide()
{
    self endon( "leaving" );
    self endon( "death" );

    for (;;)
    {
        self waittill( "touch", var_0 );

        if ( isdefined( var_0 ) && var_0 infiltransistioning() )
            var_0 dodamage( var_0.health, self.origin, var_0, var_0, "MOD_CRUSH" );
    }
}

onriotshieldstow_force()
{
    self endon( "leaving" );
    self endon( "death" );
    var_0 = 70;
    var_1 = -80;
    var_2 = 150;
    var_3 = 25;
    var_4 = -100;

    for (;;)
    {
        var_5 = getentarrayinradius( "script_vehicle", "classname", self.origin, getdvarfloat( "test_radius", 400 ) );

        if ( var_5.size <= 1 )
        {
            wait 0.5;
            continue;
        }

        var_6 = scripts\engine\trace::create_vehicle_contents();
        var_7 = anglestoforward( self.angles );
        var_8 = self.origin + var_7 * getdvarfloat( "test_f", var_2 ) + ( 0, 0, getdvarfloat( "test_d", var_1 ) );
        var_9 = scripts\engine\trace::sphere_trace( var_8, var_8 + ( 0, 0, 1 ), var_0, self, var_6 );
        var_10 = var_9["entity"];

        if ( isdefined( var_10 ) && var_10 infiltransistioning() )
        {
            var_10 dodamage( var_10.health, self.origin, var_10, var_10, "MOD_CRUSH" );
            waitframe();
            continue;
        }

        var_8 = self.origin + var_7 * getdvarfloat( "test_m", var_3 ) + ( 0, 0, getdvarfloat( "test_d", var_1 ) );
        var_9 = scripts\engine\trace::sphere_trace( var_8, var_8 + ( 0, 0, 1 ), var_0, self, var_6 );
        var_10 = var_9["entity"];

        if ( isdefined( var_10 ) && var_10 infiltransistioning() )
        {
            var_10 dodamage( var_10.health, self.origin, var_10, var_10, "MOD_CRUSH" );
            waitframe();
            continue;
        }

        var_8 = self.origin + var_7 * getdvarfloat( "test_b", var_4 ) + ( 0, 0, getdvarfloat( "test_d", var_1 ) );
        var_9 = scripts\engine\trace::sphere_trace( var_8, var_8 + ( 0, 0, 1 ), var_0, self, var_6 );
        var_10 = var_9["entity"];

        if ( isdefined( var_10 ) && var_10 infiltransistioning() )
        {
            var_10 dodamage( var_10.health, self.origin, var_10, var_10, "MOD_CRUSH" );
            waitframe();
            continue;
        }

        waitframe();
    }
}

onprematchfadedone2()
{
    scripts\cp_mp\vehicles\vehicle_tracking::_deletevehicle( self );
}

infiltransistioning()
{
    return isalive( self ) && ( scripts\common\vehicle::isvehicle() || isdefined( self.classname ) && self.classname == "script_vehicle" );
}

_initsalesdiscount()
{

}
