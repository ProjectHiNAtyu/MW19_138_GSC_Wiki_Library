// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    if ( !getdvarint( "scr_br_alt_mode_escape", 0 ) )
        return;

    addthrowingknifecharge();
    level.init_cp_execution = spawnstruct();
    level.init_cp_execution._id_12E20 = getdvarfloat( "scr_br_escape_incoming_time", 240.9 );
    level.init_cp_execution._id_12E2A = getdvarfloat( "scr_br_escape_respawn_time", -1 );
    level.init_cp_execution.watchtrashcanplayerexit = getdvarfloat( "scr_br_escape_radio_safe_time", 10 ) + level.init_cp_execution._id_12E20;
    level.init_cp_execution._id_1271B = getdvarfloat( "scr_br_escape_time_added_when_dropped", 20 );
    level.init_cp_execution.watchspawnwallplayerexit = getdvarfloat( "scr_br_escape_radio_idle_time", 45 );
    level.init_cp_execution.propnumflashes = getdvarint( "scr_br_alt_mode_escape_radio_reset_enable", 0 );
    level.init_cp_execution.proprotate = getdvarint( "scr_br_alt_mode_escape_extended_version", 1 );
    level.init_cp_execution.watchspawninput = getdvarint( "scr_br_alt_mode_escape_radio_delete_loot_radius", 128 );
    level.init_cp_execution.init_structs_mp_br_mechanics = getdvarint( "scr_br_alt_mode_escape_radio_xp_pickup", 900 );
    level.init_cp_execution.init_structs_mp_don3 = getdvarint( "scr_br_alt_mode_escape_radio_xp_win", 15000 );
    level.init_cp_execution.watchsnowballpickup = getdvarint( "scr_br_alt_mode_escape_radio_circle_peek", 1 );
    level.init_cp_execution.play_intro_hacking_vo = getdvarint( "scr_br_alt_mode_escape_radio_incoming_respawn_time", 30 );
    level.init_cp_execution.intro_ride = getdvarint( "scr_br_alt_mode_escape_radio_fast_respawn_time", 10 );
    level.init_cp_execution.watchspecialgrenadethrow = getdvarint( "scr_br_alt_mode_escape_radio_max_time_in_gas", 15 );
    level.init_cp_execution.intro_moveplayercliphack = getdvarint( "scr_br_alt_mode_escape_radio_fast_respawn_index", 5 );
    level.init_cp_execution.init_ent_flag = [];
    level.init_cp_execution.init_equipment = [];
    level.init_cp_execution.init_drop_locations = [];
    level.init_cp_execution.init_createfx = [];
    level.init_cp_execution.trackriotshield_grenadepullbackforc4 = 0;
    level.init_cp_execution.watchthrowingkifefireswipe = -1;
    game["dialog"]["exit_strategy_chopper_inbound"] = "exit_strategy_chopper_inbound";
    game["dialog"]["escape_chopper_comms_online"] = "cp1_escape_chopper_comms_online";
    game["dialog"]["exit_strategy_teammate_pickup"] = "exit_strategy_teammate_pickup";
    game["dialog"]["escape_radio_picked_up_enemy"] = "escape_radio_picked_up_enemy";
    game["dialog"]["exit_strategy_less_than_4_min"] = "exit_strategy_less_than_4_min";
    game["dialog"]["exit_strategy_less_than_3_min"] = "exit_strategy_less_than_3_min";
    game["dialog"]["exit_strategy_less_than_2_min"] = "exit_strategy_less_than_2_min";
    game["dialog"]["exit_strategy_less_than_60_sec"] = "exit_strategy_less_than_60_sec";
    game["dialog"]["exit_strategy_less_than_45_sec"] = "exit_strategy_less_than_45_sec";
    game["dialog"]["exit_strategy_less_than_20_sec"] = "exit_strategy_less_than_20_sec";
    game["dialog"]["exit_strategy_less_than_10_sec"] = "exit_strategy_less_than_10_sec";
    game["dialog"]["exit_strategy_less_than_5_sec"] = "exit_strategy_less_than_5_sec";
    game["dialog"]["escape_radio_incoming"] = "escape_radio_incoming";
    game["dialog"]["escape_radio_spawned"] = "escape_radio_spawned";
    game["dialog"]["exit_strategy_radio_down"] = "exit_strategy_radio_down";
    game["dialog"]["exit_strategy_radio_strength"] = "exit_strategy_radio_strength";
    game["dialog"]["exit_strategy_radio_fixing"] = "exit_strategy_radio_fixing";
    game["dialog"]["gametype_exit_strategy"] = "gametype_exit_strategy";
    game["dialog"]["gametype_exfiltration"] = "gametype_exfiltration";
    game["dialog"]["exit_strategy_carrier_down"] = "exit_strategy_carrier_down";
    game["dialog"]["exit_strategy_carrier_hit"] = "exit_strategy_carrier_hit";
    game["dialog"]["exit_strategy_radio_carrier"] = "exit_strategy_radio_carrier";
    game["dialog"]["exit_strategy_survive"] = "exit_strategy_survive";
    game["dialog"]["exit_strategy_update_heading"] = "exit_strategy_update_heading";
    level.init_cp_execution._id_12795 = getdvarint( "scr_br_alt_mode_escape_win_timer", 300.9 );
    level.init_cp_execution._id_1301B = level.init_cp_execution._id_12795;
    scripts\mp\utility\disconnect_event_aggregator::registerondisconnecteventcallback( ::subway_black_screen );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "vehicle_spawn", "gameModeSupportsRespawn", ::vehicle_spawn_mp_gamemodesupportsrespawn );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "endGame", ::init_create_script_for_level );

    if ( getdvarint( "scr_br_alt_mode_escape_skip_initial_circle", 0 ) )
    {
        scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "createC130PathStruct", ::flickerlights );
        scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "addToC130Infil", ::anim_offset );
    }

    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitsheli( "dropBagDelay", 180 );
    level.cleanupswaploadoutflags._id_11AA3 = 1;
    level.cleanupswaploadoutflags.custom_death_active = 1;
    level.cleanupswaploadoutflags._id_12B85 = 1;
    scripts\mp\gametypes\br_gametype_rebirth.gsc::control_station();
    var_0 = 30;

    if ( getdvarint( "scr_br_rebirthDelayOverride", 0 ) == 0 )
        setdvar( "scr_br_rebirthDelayOverride", var_0 );

    level.nosuspensemusic = 1;
    level.spawninfluencepoints = 1;
    level.stunshoulddetonate = ::_id_11EE6;
    level.keypad_playerinteractwithkeypadloop["mayConsiderPlayerDead"] = scripts\mp\gametypes\br_gametype_rebirth.gsc::completedmounttut;
    level.keypad_playerinteractwithkeypadloop["triggerRespawnOverlay"] = scripts\mp\gametypes\br_gametype_rebirth.gsc::controls_unlink_safe;
    level.keypad_playerinteractwithkeypadloop["playerNakedDropLoadout"] = scripts\mp\gametypes\br_gametype_rebirth.gsc::confirm_good_pickup_location;
    level.keypad_playeridlewatch["mayConsiderPlayerDead"] = scripts\mp\gametypes\br.gsc::codephonescodeenteredringingfrenzy;
    level.keypad_playeridlewatch["triggerRespawnOverlay"] = scripts\mp\gametypes\br_gulag.gsc::_id_1292E;
    level.keypad_playeridlewatch["playerNakedDropLoadout"] = scripts\mp\gametypes\br.gsc::spawn_remote_tank_thermite;
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "mayConsiderPlayerDead", ::_start_spawn_modules );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "triggerRespawnOverlay", ::_stop_spawn_modules );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "playerNakedDropLoadout", ::_startragdollwithvehiclefeature );
    thread activecurrstate();
    thread ai_anim_relative();
    thread addtenkillcharge();
    level._id_12050 = 1;
}

quickdropgetscriptableforcount( var_0 )
{
    if ( !isdefined( level.init_cp_execution.radio ) || !isdefined( level.init_cp_execution.radio.ownerteam ) )
        return 0;

    return var_0.team == level.init_cp_execution.radio.ownerteam;
}

activate_destructible_cinderblock( var_0 )
{
    foreach ( var_2 in scripts\mp\utility\teams::getteamdata( var_0.team, "players" ) )
    {
        var_3 = !isalive( var_2 );

        if ( var_2 != var_0 && var_3 )
        {
            var_2 notify( "force_stop_respawn" );
            var_2 scripts\mp\gametypes\br_gametype_rebirth.gsc::connected_search_node();
        }
    }
}

_start_spawn_modules( var_0 )
{
    var_1 = "mayConsiderPlayerDead";

    if ( quickdropgetscriptableforcount( var_0 ) && isdefined( level.keypad_playerinteractwithkeypadloop[var_1] ) )
    {
        if ( level.init_cp_execution.radio.owner == var_0 )
        {
            activate_destructible_cinderblock( var_0 );
            return [[ level.keypad_playeridlewatch[var_1] ]]( var_0 );
        }
        else
            return [[ level.keypad_playerinteractwithkeypadloop[var_1] ]]( var_0 );
    }
    else if ( isdefined( level.keypad_playeridlewatch[var_1] ) )
        return [[ level.keypad_playeridlewatch[var_1] ]]( var_0 );

    return undefined;
}

_stop_spawn_modules()
{
    return tank_die_from_explosives( "triggerRespawnOverlay" );
}

_startragdollwithvehiclefeature()
{
    return tank_die_from_explosives( "playerNakedDropLoadout" );
}

tank_die_from_explosives( var_0 )
{
    var_1 = self;

    if ( quickdropgetscriptableforcount( var_1 ) && level.init_cp_execution.radio.owner != var_1 && isdefined( level.keypad_playerinteractwithkeypadloop[var_0] ) )
        return [[ level.keypad_playerinteractwithkeypadloop[var_0] ]]();
    else if ( isdefined( level.keypad_playeridlewatch[var_0] ) )
        return [[ level.keypad_playeridlewatch[var_0] ]]();
}

activecurrstate()
{
    if ( level.init_cp_execution.watchthrowingkifefireswipe == -1 )
    {
        level waittill( "prematch_fade_done" );
        waitframe();

        if ( !istrue( level.br_circle_disabled ) )
        {
            while ( !isdefined( level.br_circle ) || !isdefined( level.br_circle.safecircleent ) )
                waitframe();
        }

        level.init_cp_execution.watchthrowingkifefireswipe = 0;
    }

    var_0 = init_death_animations();
    level.init_cp_execution.radio = activatemusictrigger( var_0 + ( 0, 0, 10 ) );
    level thread init_escape_maze( level.init_cp_execution.radio );
    activate_timed_laser_traps();
    scripts\mp\flags::gameflagwait( "br_ready_to_jump" );
    activatedtime( 1 );
    level thread init_cp_vehicle( level.init_cp_execution.radio );
}

addthrowingknifecharge()
{
    if ( !getdvarint( "scr_br_alt_mode_escape_skip_initial_circle", 0 ) )
        return;

    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "randomizeCircleCenter" );
    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "planeSnapToOOB" );
    scripts\mp\gametypes\br_gametypes.gsc::hostdamagepercentmedium( "planeUseCircleRadius" );
    scripts\mp\gametypes\br_gametypes.gsc::hostdamagepercentmedium( "circleEarlyStart" );
}

flickerlights()
{
    var_0 = ( level.br_level.checkpoint_create_carepackage[1][0], level.br_level.checkpoint_create_carepackage[1][1], 0 );
    var_1 = level.br_level.br_circleradii[1];
    var_2 = scripts\mp\gametypes\br_c130.gsc::createtestc130path( var_0, var_1 );
    return var_2;
}

anim_offset()
{
    thread relic_bang_and_boom_dropfunc();
}

relic_bang_and_boom_dropfunc()
{
    level endon( "game_ended" );
    self endon( "death" );
    var_0 = distance( self.teleport_text_updated.startpt, self.teleport_text_updated.hvt_delayed_cig );
    var_1 = var_0 / scripts\mp\gametypes\br_c130.gsc::getc130speed() - 5;
    wait( var_1 );

    foreach ( var_3 in level.players )
    {
        if ( isdefined( var_3 ) && isdefined( var_3.br_infil_type ) && var_3.br_infil_type == "c130" && !isdefined( var_3.jumptype ) )
        {
            var_3.jumptype = "outOfBounds";
            var_3 notify( "halo_kick_c130" );
        }
    }
}

addtenkillcharge()
{
    if ( !getdvarint( "scr_br_alt_mode_escape_skip_initial_circle", 0 ) )
        return;

    waittillframeend;
    level.br_level.br_circledelaytimes[1] = level.br_level.br_circledelaytimes[0];
    level.br_level.br_circledelaytimes[0] = 1;
    level.br_level.br_circleclosetimes[0] = 1;
    level.br_level.checkpoint_edit_loadout[0] = 1;
}

init_escape_silo( var_0 )
{
    level endon( "game_ended" );
    scripts\mp\gametypes\br_public.gsc::brleaderdialog( "gametype_exfiltration", 0, var_0 );
    wait 1.5;
    scripts\mp\gametypes\br_public.gsc::brleaderdialog( "gametype_exit_strategy", 0, var_0 );
}

init_escape_maze( var_0 )
{
    level endon( "radio_debug_spawned" );

    if ( scripts\cp_mp\utility\game_utility::radialairstrike() )
    {
        var_1 = [ 1000, 3000, 5000, 7000, 13000 ];
        var_2 = [ 0, 30, 90, 120, 180 ];
    }
    else
    {
        var_1 = [ 3000, 7000, 10000, 13000, 17500 ];
        var_2 = [ 0, 45, 90, 135, 180 ];
    }

    level.init_cp_execution.watchremoveminigunrestrictions = gettime() + level.init_cp_execution._id_12E20 * 1000;
    var_3 = level.init_cp_execution._id_12E20;
    var_4 = undefined;
    var_5 = -1;

    if ( level.init_cp_execution._id_12E20 > var_2[4] )
        var_5 = 4;
    else if ( level.init_cp_execution._id_12E20 > var_2[3] )
        var_5 = 3;
    else if ( level.init_cp_execution._id_12E20 > var_2[2] )
        var_5 = 2;
    else if ( level.init_cp_execution._id_12E20 > var_2[1] )
        var_5 = 1;
    else if ( level.init_cp_execution._id_12E20 > var_2[0] )
        var_5 = 0;

    if ( var_5 < 0 )
        wait 3;

    while ( var_5 >= 0 )
    {
        var_3 = var_3 - var_2[var_5];
        var_0 activate_server_for_interact( var_1[var_5] );
        scripts\mp\flags::gameflagwait( "br_ready_to_jump" );

        if ( var_5 == 0 )
        {
            activate_upload_station( var_2[1] );
            var_4 = scripts\engine\utility::play_loopsound_in_space( "iw8_nuke_alarm_lp", var_0.origin );
        }

        var_6 = activate_scout_drone( var_3 );

        if ( !isdefined( var_6 ) )
            var_5 = 0;

        var_0 activate_seq_button();
        var_3 = var_2[var_5];
        var_5--;
    }

    var_0 activate_seq_button();

    if ( isdefined( var_4 ) )
        var_4 delete();

    level.init_cp_execution.watchthrowingkifefireswipe = 1;
    level notify( "radio_landed" );
}

init_cp_vehicle( var_0 )
{
    level endon( "game_ended" );
    level endon( "radio_debug_spawned" );

    foreach ( var_2 in level.players )
    {
        if ( !var_2 scripts\mp\gametypes\br_public.gsc::questtypes() )
            var_2 scripts\mp\hud_message::showsplash( "br_escape_radio_incoming" );
    }

    var_4 = 1;
    var_5 = 255;
    var_6 = level.init_cp_execution._id_12E20;
    var_7 = level.init_cp_execution._id_12E20;
    activate_trophy_protection( var_4, var_5, var_6, 0 );
    activate_upload_station( var_7 );
    level waittill( "radio_landed" );

    foreach ( var_2 in level.players )
    {
        if ( !var_2 scripts\mp\gametypes\br_public.gsc::questtypes() )
            var_2 scripts\mp\hud_message::showsplash( "br_escape_radio_on_ground" );
    }

    init_first_button( "escape_radio_spawned", 0.75, 1 );
    activate_timed_laser_traps();
    var_0 activeclosingpool( "on_ground" );
    var_0 activategastrap();
    var_4 = 2;
    var_5 = 255;
    var_6 = level.init_cp_execution._id_12795;
    var_7 = level.init_cp_execution._id_1301B;
    activate_trophy_protection( var_4, var_5, var_6 );
    activate_upload_station( var_7 );
    level activate_subway_track_trigger_hurt_internal( var_0.origin );
}

activate_scout_drone( var_0 )
{
    return level.init_cp_execution scripts\engine\utility::waittill_notify_or_timeout_return( "force_incoming", var_0 );
}

init_defend_global_spawn_function()
{
    if ( !isdefined( level.br_level ) || !isdefined( level.br_level.br_circledelaytimes ) )
        return 0;

    var_0 = level.br_level.cheesewedge;

    if ( !isdefined( var_0 ) )
        var_0 = 0;

    var_1 = 0;

    if ( level.init_cp_execution.proprotate )
        var_1 = getdvarint( "scr_br_escape_start_circles_remaining", 6 );
    else
        var_1 = getdvarint( "scr_br_escape_start_circles_remaining", 3 );

    var_2 = level.br_level.br_circledelaytimes.size - 1 - var_1 - var_0;
    return var_2;
}

lowpopstart( var_0 )
{
    var_1 = 0.0;

    for ( var_2 = 0; var_2 < level.br_level.br_circledelaytimes.size && var_2 < var_0; var_2++ )
        var_1 = var_1 + ( level.br_level.br_circledelaytimes[var_2] + level.br_level.br_circleclosetimes[var_2] );

    return var_1;
}

init_death_animations()
{
    var_0 = scripts\mp\gametypes\br_circle.gsc::getsafecircleorigin();
    var_1 = scripts\mp\gametypes\br_circle.gsc::getsafecircleradius();
    var_2 = select_bridge_two_spawners( var_0, var_1 );
    var_3 = scripts\mp\gametypes\br_quest_util.gsc::is_point_in_cylinder( "escape", var_2 );
    var_4 = undefined;
    var_5 = "none";

    if ( isdefined( var_3 ) )
    {
        var_4 = var_3.origin;
        var_5 = "chest";
    }
    else
    {
        var_6 = 0.0;
        var_7 = 1.0;
        var_8 = 1;
        var_9 = 1;
        var_10 = 1;
        var_11 = level.init_cp_execution.watchtrashcanplayerexit;
        var_4 = scripts\mp\gametypes\br_circle.gsc::mine_caves_vo( var_0, var_1, var_6, var_7, var_8, var_9, var_10, var_11 );

        if ( var_4 == var_0 )
        {
            var_12 = scripts\engine\trace::create_contents( 0, 1, 1, 1, 0, 0, 1 );
            var_4 = scripts\engine\utility::drop_to_ground( ( var_4[0], var_4[1], 4000 ), undefined, undefined, undefined, var_12 );
        }

        var_5 = "random";
    }

    logstring( "Escape Mode: Circle o:" + var_0 + " r:" + var_1 + " Radio o:" + var_4 + " t:" + var_5 );
    return var_4;
}

init_fan_blades( var_0 )
{
    var_1 = self.playoverwatch_dialogue;
    level endon( "game_ended" );
    level endon( "force_end" );
    level notify( "radio_state_change" );
    var_1 endon( "death" );
    var_2 = 0;

    foreach ( var_4 in level.players )
    {
        if ( var_4.team == var_0.team )
        {
            if ( var_4 == var_0 )
            {
                level thread scripts\mp\gametypes\br_quest_util.gsc::_id_12BAA( var_0.origin, "revive" );
                var_4 thread activate_track_timer( "escape_chopper_comms_online", 4 );
                var_4 scripts\mp\hud_message::showsplash( "br_escape_radio_picked_up_self" );
                var_4 thread activate_trap_from_interaction( "exit_strategy_survive", 0.75, 0 );
            }
            else
            {
                if ( !var_4 scripts\mp\gametypes\br_public.gsc::questtypes() )
                    var_4 thread activate_track_timer( "escape_chopper_comms_online", 4 );

                var_4 scripts\mp\hud_message::showsplash( "br_escape_radio_picked_up_ally" );
                var_4 thread activate_trap_from_interaction( "exit_strategy_teammate_pickup", 0.75, 0 );
                var_5 = scripts\mp\gametypes\br_vip_quest.gsc::_id_12D6C( var_4, var_0, "exfil_respawn" );

                if ( var_5 && !var_2 )
                {
                    var_2 = 1;
                    var_0 thread scripts\mp\hud_message::showsplash( "br_squadmate_revived" );
                }
            }

            continue;
        }

        if ( !var_4 scripts\mp\gametypes\br_public.gsc::questtypes() )
        {
            var_4 thread activate_track_timer( "escape_chopper_comms_online", 4 );
            var_4 scripts\mp\hud_message::showsplash( "br_escape_radio_picked_up_enemy" );
            var_4 thread activate_trap_from_interaction( "escape_radio_picked_up_enemy", 0.75, 0 );
        }
    }

    var_1 activeairstrikes();
    var_1 activeclosingpool( "picked_up", var_0 );
    var_1 activate_target_group();
    var_1.owner = var_0;
    var_1.target_located = var_1.ownerteam;
    var_1.ownerteam = var_1.owner.team;
    var_0 thread scripts\mp\rank::scoreeventpopup( "br_escape_radio_looted" );

    if ( level.init_cp_execution.init_structs_mp_br_mechanics > 0 )
        setteamscore( var_1.ownerteam, getteamscore( var_1.ownerteam ) + level.init_cp_execution.init_structs_mp_br_mechanics );

    level.init_cp_execution.trackriotshield_grenadepullbackforc4 = gettime();
    activate_timed_laser_traps();
    var_7 = 3;
    var_8 = var_0 getentitynumber();
    var_9 = level.init_cp_execution._id_12795;
    var_10 = level.init_cp_execution._id_1301B;
    activate_trophy_protection( var_7, var_8, var_9, 0 );
    activate_upload_station( var_10 );
    var_1.owner thread init_fake_magic_grenades();
    var_1.owner thread activatemeleeblood( var_0 );
    var_1 notify( "escape_radio_picked_up" );
    var_0 active_relic_bang_and_boom( var_1 );
}

activate_track_timer( var_0, var_1 )
{
    var_2 = self;
    var_2 endon( "disconnect" );
    level endon( "game_ended" );
    level endon( "cancel_escapeRadioPlayChopperDialog" );

    if ( isdefined( var_1 ) )
        wait( var_1 );

    var_3 = "dx_bra_" + game["dialog"][var_0];
    var_3 = tolower( var_3 );
    var_4 = lookupsoundlength( var_3, 1 ) / 1000;
    var_2 queuedialogforplayer( var_3, var_0, var_4 );
}

activate_trap_from_interaction( var_0, var_1, var_2 )
{
    var_3 = self;
    var_3 endon( "disconnect" );
    level endon( "game_ended" );
    level endon( "radio_state_change" );

    if ( isdefined( var_1 ) )
        wait( var_1 );

    scripts\mp\gametypes\br_public.gsc::cloud_cover( var_0, var_3, var_2 );
}

init_first_button( var_0, var_1, var_2 )
{
    thread activate_trap_object( var_0, var_1, var_2 );
}

activate_trap_object( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    level endon( "radio_state_change" );

    if ( isdefined( var_1 ) )
        wait( var_1 );

    foreach ( var_4 in level.players )
        var_4 activate_trap_from_interaction( var_0, undefined, var_2 );
}

active_relic_bang_and_boom( var_0 )
{
    var_1 = self;
    var_1 endon( "escape_radio_win_timer_wait" );
    level endon( "game_ended" );

    if ( isdefined( level.init_cp_execution.radio.waittime ) )
        activeadvanceduavcount( level.init_cp_execution.radio.waittime );
    else
        activeadvanceduavcount( level.init_cp_execution._id_1301B );
}

heli_rpg_enemy_think( var_0 )
{
    var_1 = self;
    level.init_cp_execution notify( "escape_radio_dropped" );
    level notify( "cancel_escapeRadioPlayChopperDialog" );
    level notify( "radio_state_change" );
    var_1 notify( "escape_radio_win_timer_wait" );
    var_1 endon( "escape_radio_win_timer_wait" );
    level endon( "game_ended" );
    thread init_cs_oob_triggers();
    var_2 = activate_target();

    if ( var_2 <= 60 )
        level.init_cp_execution.radio.waittime = min( 60, var_2 + level.init_cp_execution._id_1271B );
    else
        level.init_cp_execution.radio.waittime = min( level.init_cp_execution._id_12795, var_2 + level.init_cp_execution._id_1271B );

    level.init_cp_execution._id_1301B = level.init_cp_execution.radio.waittime;
    level.init_cp_execution.radio activeairstrikes();
    activate_timed_laser_trap();
    active_cs_files( var_1 );
    var_3 = 2;
    var_4 = 255;
    var_5 = level.init_cp_execution._id_12795;
    var_6 = level.init_cp_execution.radio.waittime;
    activate_trophy_protection( var_3, var_4, var_5, 0 );
    activate_upload_station( var_6 );
    level.init_cp_execution.radio freescriptable();
    level.init_cp_execution.radio = undefined;
    var_7 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_0, var_1.origin, var_1.angles, self, 0, 0, 10, 1 );
    level.init_cp_execution.radio = scripts\mp\gametypes\br_pickups.gsc::spawnpickup( "brloot_escape_radio", var_7, 0, 1 );
    level.init_cp_execution.radio.keepinmap = 1;
    level.init_cp_execution.radio.hidden = 0;
    level.init_cp_execution.radio thread activate_subway_track_trigger_hurt_internal( level.init_cp_execution.radio.origin );

    foreach ( var_1 in level.players )
    {
        if ( !var_1 scripts\mp\gametypes\br_public.gsc::questtypes() )
            var_1 scripts\mp\hud_message::showsplash( "br_escape_radio_on_ground" );
    }

    init_first_button( "exit_strategy_radio_down", 0.75, 1 );
    level.init_cp_execution.radio activeclosingpool( "on_ground" );
}

init_cs_oob_triggers()
{
    if ( level.init_cp_execution.propnumflashes != 1 )
        return;
    else
    {
        level endon( "radio_state_change" );
        level endon( "game_ended" );
        wait( level.init_cp_execution.watchspawnwallplayerexit * 0.75 );
        init_first_button( "exit_strategy_radio_strength", 0.0, 1 );
        wait( level.init_cp_execution.watchspawnwallplayerexit * 0.25 );
        level.init_cp_execution.radio thread activate_stealth_settings( 0 );
    }
}

active_cs_files( var_0 )
{
    foreach ( var_0 in scripts\mp\utility\teams::getteamdata( var_0.team, "players" ) )
    {
        var_0 notify( "force_stop_respawn" );
        var_0 scripts\mp\gametypes\br_gametype_rebirth.gsc::computer_animation_off();
        var_0 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "respawnInSeconds", 0 );
    }
}

activate_subway_track_trigger_hurt( var_0 )
{
    if ( level.init_cp_execution.watchspawninput <= 0 )
        return;

    var_1 = canceljoins( undefined, undefined, var_0, level.init_cp_execution.watchspawninput );

    if ( isdefined( var_1 ) )
    {
        foreach ( var_3 in var_1 )
        {
            if ( var_3.type == "br_loot_cache" || var_3.type == "br_loot_cache_lege" || var_3.type == "brloot_escape_radio" || var_3.type == "br_cargotrain" || var_3.type == "br_cargotrain_engine" )
                continue;

            if ( var_3 getscriptableisreserved() && !isdefined( var_3.combo_duration_calculate ) )
                continue;

            scripts\mp\gametypes\br_pickups.gsc::select_patrol_one_spawners( var_3 );
        }
    }
}

activate_subway_track_trigger_hurt_internal( var_0 )
{
    var_1 = self;
    level endon( "game_ended" );
    var_1 endon( "escape_radio_picked_up" );

    if ( level.init_cp_execution.watchspawninput <= 0 )
        return;

    for (;;)
    {
        activate_subway_track_trigger_hurt( var_0 );
        wait 2;
    }
}

activeadvanceduavcount( var_0 )
{
    var_1 = self;
    var_1 endon( "escape_radio_win_timer_wait" );
    var_1 endon( "disconnect" );
    var_1 thread activate_station( var_0 );
    var_1 thread active_drones( var_0 );
    activate_upload_station_for_interact( level.init_cp_execution._id_12795 );
    activate_upload_station( var_0 );
    wait( var_0 );
    activate_timed_laser_traps();
    activate_switch_cooldown( var_1.team );
}

activate_target()
{
    return level.init_cp_execution._id_1301B - ( gettime() - level.init_cp_execution.trackriotshield_grenadepullbackforc4 ) / 1000;
}

activate_station( var_0 )
{
    var_1 = self;
    level endon( "game_ended" );
    level endon( "force_end" );
    level.init_cp_execution endon( "escape_radio_dropped" );
    var_1 endon( "escape_radio_win_timer_wait" );
    var_1 endon( "disconnect" );
    var_2 = 10;
    var_3 = max( 0, var_0 - var_2 );
    wait( var_3 );

    while ( var_2 > 1 )
    {
        var_4 = scripts\mp\gamelogic::maderecentkill( var_2 );

        foreach ( var_6 in level.players )
            var_6 playlocalsound( var_4 );

        var_2 = var_2 - 1;
        wait 1;
    }
}

active_drones( var_0 )
{
    var_1 = self;
    level endon( "game_ended" );
    level endon( "force_end" );
    level.init_cp_execution endon( "escape_radio_dropped" );
    var_1 endon( "escape_radio_win_timer_wait" );
    var_1 endon( "disconnect" );
    var_2 = [];

    if ( var_0 >= 240 )
        var_2 = [ 240, 180, 120, 60, 45, 20, 10, 5 ];
    else if ( var_0 >= 180 )
        var_2 = [ 180, 120, 60, 45, 20, 10, 5 ];
    else if ( var_0 >= 120 )
        var_2 = [ 120, 60, 45, 20, 10, 5 ];
    else if ( var_0 >= 60 )
        var_2 = [ 60, 45, 20, 10, 5 ];
    else if ( var_0 >= 45 )
        var_2 = [ 45, 20, 10, 5 ];
    else if ( var_0 >= 20 )
        var_2 = [ 20, 10, 5 ];
    else if ( var_0 >= 10 )
        var_2 = [ 10, 5 ];
    else if ( var_0 >= 5 )
        var_2 = [ 5 ];

    for ( var_3 = 0; var_3 < var_2.size; var_3++ )
    {
        var_4 = var_0 - var_2[var_3];
        var_0 = var_0 - var_4;
        wait( var_4 );

        if ( var_2[var_3] <= 60 )
        {
            scripts\mp\gametypes\br_public.gsc::brleaderdialog( "exit_strategy_less_than_" + var_2[var_3] + "_sec" );
            continue;
        }

        scripts\mp\gametypes\br_public.gsc::brleaderdialog( "exit_strategy_less_than_" + var_2[var_3] / 60 + "_min" );
    }
}

activatemusictrigger( var_0 )
{
    var_1 = easepower( "brloot_escape_radio", var_0 );
    var_1.keepinmap = 1;
    var_2 = 1;
    var_3 = 255;
    var_4 = level.init_cp_execution._id_12E20;
    var_5 = level.init_cp_execution._id_12E20;
    activate_trophy_protection( var_2, var_3, var_4, 0 );
    activate_upload_station( var_5 );
    var_1 activate_target_group();
    level.init_cp_execution.radio = var_1;
    return var_1;
}

active_healthpacks()
{
    self notify( "_escapeRadioUpdateIconPosition" );
    self endon( "_escapeRadioUpdateIconPosition" );
    self endon( "escape_radio_icon_hide" );
    self endon( "death" );

    for (;;)
    {
        scripts\mp\objidpoolmanager::update_objective_position( self.icon, self.origin + ( 0, 0, 50 ) );
        waitframe();
    }
}

activeclosingpool( var_0, var_1 )
{
    var_2 = self;

    if ( var_0 == "picked_up" )
        var_2 addspecialistbonuspickup( var_1, "ui_mp_br_mapmenu_icon_escape_objective_friendly", "ui_mp_br_mapmenu_icon_escape_objective_enemy" );
    else if ( var_0 == "on_ground" )
    {
        var_3 = scripts\mp\objidpoolmanager::requestobjectiveid( 1 );

        if ( var_3 != -1 )
        {
            scripts\mp\objidpoolmanager::objective_add_objective( var_3, "current", var_2.origin + ( 0, 0, 50 ), "ui_mp_br_mapmenu_icon_escape_objective" );
            scripts\mp\objidpoolmanager::update_objective_setbackground( var_3, 1 );

            foreach ( var_5 in level.players )
            {
                if ( !var_5 scripts\mp\gametypes\br_public.gsc::questtypes() )
                    objective_addclienttomask( var_3, var_5 );
            }

            objective_showtoplayersinmask( var_3 );
            var_2.icon = var_3;
            var_2 thread active_healthpacks();
        }
        else
        {

        }
    }
}

activeairstrikes()
{
    var_0 = self;
    var_0 notify( "escape_radio_icon_hide" );

    if ( isdefined( var_0.icon ) )
    {
        scripts\mp\objidpoolmanager::returnobjectiveid( var_0.icon );
        var_0.icon = undefined;
    }

    if ( isdefined( var_0.jailtimeouthud ) )
    {
        scripts\mp\objidpoolmanager::returnobjectiveid( var_0.jailtimeouthud );
        var_0.jailtimeouthud = undefined;
    }

    if ( isdefined( var_0.increase_wave_ai_spawned_counter ) )
    {
        scripts\mp\objidpoolmanager::returnobjectiveid( var_0.increase_wave_ai_spawned_counter );
        var_0.increase_wave_ai_spawned_counter = undefined;
    }
}

activate_server_for_interact( var_0 )
{
    var_1 = self;
    var_2 = scripts\mp\gametypes\br_circle.gsc::getrandompointincircle( var_1.origin, var_0, 0.0, 0.4, 0, 0 );
    var_1 scripts\mp\gametypes\br_quest_util.gsc::force_ai_to_drop_thermites( 4, 8, 4, var_2 );
    var_1 scripts\mp\gametypes\br_quest_util.gsc::_id_11EBE( var_0 );

    foreach ( var_4 in level.players )
        var_1 scripts\mp\gametypes\br_quest_util.gsc::_id_12056( var_4 );
}

activate_seq_button()
{
    var_0 = self;

    foreach ( var_2 in level.players )
        var_0 scripts\mp\gametypes\br_quest_util.gsc::overrideviewkickscaledmr( var_2 );
}

activatemeleeblood( var_0 )
{
    if ( level.init_cp_execution.watchsnowballpickup != 1 )
        return;

    level endon( "game_ended" );
    level.init_cp_execution notify( "escape_circle_peek" );
    level.init_cp_execution endon( "escape_circle_peek" );

    if ( !isdefined( level._id_1269E ) || !isdefined( level._id_1269E[var_0.team] ) || level._id_1269E[var_0.team] == 0 )
        scripts\mp\gametypes\br_quest_util.gsc::watch_for_near_objective_point( var_0.team );

    for (;;)
    {
        level waittill( "br_circle_set", var_1 );
        var_2 = level.br_circle.circleindex + 1;

        if ( var_1 >= var_2 )
        {
            if ( level._id_1269E[var_0.team] + var_2 <= var_1 + 1 )
            {
                level._id_1269E[var_0.team] = undefined;
                scripts\mp\gametypes\br_quest_util.gsc::watch_for_near_objective_point( var_0.team );
            }
        }
    }
}

activate_timed_laser_trap()
{
    level.init_cp_execution notify( "escape_circle_peek" );
}

activate_target_group()
{
    var_0 = self;
    var_0.hidden = 1;
    var_0 setscriptablepartstate( "brloot_escape_radio", "hidden" );
}

activategastrap()
{
    var_0 = self;
    var_0.hidden = 0;
    var_0 setscriptablepartstate( "brloot_escape_radio", "visible" );
}

init_create_script_for_level( var_0 )
{
    level thread activate_timed_laser_traps();
    activate_switch_cooldown( var_0 );
}

activate_switch_cooldown( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = level.init_cp_execution.radio.ownerteam;

    var_1 = getarraykeys( level.teamdata );
    var_2 = [];

    foreach ( var_4 in var_1 )
    {
        if ( var_4 == var_0 )
            setteamscore( var_4, getteamscore( var_4 ) + level.init_cp_execution.init_structs_mp_don3 );

        if ( level.teamdata[var_4]["aliveCount"] > 0 )
            var_2[var_2.size] = var_4;
    }

    var_6 = scripts\mp\utility\script::quicksort( var_2, ::addtoc130infil );

    for ( var_7 = 0; var_7 < var_6.size; var_7++ )
    {
        var_4 = var_6[var_7];
        var_8 = var_7 + 1;
        thread scripts\mp\gametypes\br.gsc::supplydropprice( var_4, var_8, 0, 1 );
    }

    foreach ( var_4, var_10 in level.teamdata )
    {
        if ( var_4 == var_0 )
            continue;

        var_11 = scripts\mp\utility\teams::getteamdata( var_4, "alivePlayers" );

        if ( var_11.size > 0 )
        {
            foreach ( var_13 in var_11 )
            {
                var_13 freezecontrols( 1 );
                var_13 playerhide();
            }
        }
    }

    thread scripts\mp\gamelogic::endgame( var_0, game["end_reason"]["enemies_eliminated"] );
}

addtoc130infil( var_0, var_1 )
{
    var_2 = getteamscore( var_0 );
    var_3 = getteamscore( var_1 );
    return var_2 >= var_3;
}

select_bridge_two_spawners( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2._id_11D1F = "getUnusedLootCacheArray";
    var_2._id_11D1B = var_0;
    var_2._id_11D22 = var_1;
    var_2._id_11D23 = 0;
    var_2._id_11D1D = 1;
    var_2.mintime = level.init_cp_execution.watchtrashcanplayerexit;
    return var_2;
}

addspecialistbonuspickup( var_0, var_1, var_2 )
{
    var_3 = self;
    var_4 = scripts\mp\objidpoolmanager::requestobjectiveid( 1 );

    if ( var_4 != -1 )
    {
        scripts\mp\objidpoolmanager::objective_add_objective( var_4, "current", var_3.origin, var_1 );
        scripts\mp\objidpoolmanager::update_objective_setbackground( var_4, 1 );
        var_5 = getdvarfloat( "scr_br_escape_friendly_icon_ping_rate", 0.0 );
        var_3 thread ai_array( var_0, var_4, var_5 );
        objective_removeallfrommask( var_4 );
        var_6 = scripts\mp\utility\teams::getteamdata( var_0.team, "players" );

        foreach ( var_8 in var_6 )
        {
            if ( !var_8 scripts\mp\gametypes\br_public.gsc::questtypes() )
                objective_addclienttomask( var_4, var_8 );
        }

        objective_showtoplayersinmask( var_4 );
        var_3.jailtimeouthud = var_4;
    }

    var_10 = scripts\mp\objidpoolmanager::requestobjectiveid( 1 );

    if ( var_10 != -1 )
    {
        scripts\mp\objidpoolmanager::objective_add_objective( var_10, "current", var_3.origin, var_2 );
        scripts\mp\objidpoolmanager::update_objective_setbackground( var_10, 1 );
        var_5 = getdvarfloat( "scr_br_escape_enemy_icon_ping_rate", 0.0 );
        var_3 thread ai_array( var_0, var_10, var_5 );
        objective_removeallfrommask( var_10 );

        foreach ( var_8 in level.players )
        {
            if ( var_8 scripts\mp\gametypes\br_public.gsc::questtypes() || var_8.team == var_0.team )
                objective_addclienttomask( var_10, var_8 );
        }

        objective_hidefromplayersinmask( var_10 );
        var_3.increase_wave_ai_spawned_counter = var_10;
    }
}

ai_array( var_0, var_1, var_2 )
{
    var_3 = self;
    level.init_cp_execution endon( "escape_radio_dropped" );

    if ( var_2 <= 0.0 )
    {
        scripts\mp\objidpoolmanager::update_objective_setzoffset( var_1, 50 );
        scripts\mp\objidpoolmanager::update_objective_onentity( var_1, var_0 );
    }
    else
    {
        for (;;)
        {
            if ( isdefined( var_0 ) )
            {
                scripts\mp\objidpoolmanager::update_objective_position( var_1, var_0.origin + ( 0, 0, 50 ) );

                if ( var_0 scripts\cp_mp\utility\player_utility::isinvehicle() )
                {
                    wait 0.1;
                    continue;
                }

                wait( var_2 );
            }
        }
    }
}

dangercircletick( var_0, var_1, var_2 )
{
    if ( !isdefined( level.init_cp_execution ) )
        return;

    if ( !isdefined( level.init_cp_execution.radio ) )
        level.init_cp_execution.killstreak_cooldown_start = undefined;
    else if ( istrue( level.init_cp_execution.radio.hidden ) )
        level.init_cp_execution.killstreak_cooldown_start = undefined;
    else
    {
        var_3 = var_1 * var_1;
        var_4 = var_2 * var_2;
        var_5 = distance2dsquared( level.init_cp_execution.radio.origin, var_0 );

        if ( var_5 > var_3 )
        {
            level.init_cp_execution.radio thread activate_stealth_settings( 1 );
            level.init_cp_execution.killstreak_cooldown_start = undefined;
            return;
        }

        if ( var_5 > var_4 )
        {
            if ( !isdefined( level.init_cp_execution.killstreak_cooldown_start ) )
                level.init_cp_execution.killstreak_cooldown_start = 1;
            else
                level.init_cp_execution.killstreak_cooldown_start = level.init_cp_execution.killstreak_cooldown_start + 1;

            if ( level.init_cp_execution.killstreak_cooldown_start == 5 )
                init_first_button( "exit_strategy_radio_strength", 0.0, 1 );

            if ( level.init_cp_execution.killstreak_cooldown_start >= level.init_cp_execution.watchspecialgrenadethrow )
            {
                level.init_cp_execution.radio thread activate_stealth_settings( 1 );
                level.init_cp_execution.killstreak_cooldown_start = undefined;
                return;
            }

            return;
        }

        level.init_cp_execution.killstreak_cooldown_start = undefined;
    }
}

activate_stealth_settings( var_0 )
{
    var_1 = self;
    level endon( "game_ended" );
    var_1 endon( "escape_radio_picked_up" );
    level notify( "radio_state_change" );

    foreach ( var_3 in level.players )
    {
        if ( !var_3 scripts\mp\gametypes\br_public.gsc::questtypes() )
        {
            if ( var_0 )
            {
                var_3 scripts\mp\hud_message::showsplash( "br_escape_radio_lost_in_gas" );
                continue;
            }

            var_3 scripts\mp\hud_message::showsplash( "br_escape_radio_expired" );
        }
    }

    init_first_button( "exit_strategy_radio_fixing", 0.75, 1 );
    activate_timed_laser_traps();
    activatedtime( 0 );
    var_1 activeairstrikes();
    var_1 freescriptable();
    level.init_cp_execution.radio = undefined;
    wait 5;

    if ( level.init_cp_execution._id_12E2A != -1 )
        level.init_cp_execution._id_12E29 = level.init_cp_execution._id_12E2A;
    else if ( level.br_circle.circleindex < level.init_cp_execution.intro_moveplayercliphack )
        level.init_cp_execution._id_12E29 = level.init_cp_execution.play_intro_hacking_vo;
    else
        level.init_cp_execution._id_12E29 = level.init_cp_execution.intro_ride;

    level.init_cp_execution._id_12E20 = level.init_cp_execution._id_12E29;
    level thread activecurrstate();
}

init_exfil()
{
    var_0 = self;

    if ( !isdefined( level.init_cp_execution ) || !isdefined( level.init_cp_execution.radio ) )
        return;

    if ( isdefined( level.init_cp_execution.radio.icon ) )
    {
        objective_removeclientfrommask( level.init_cp_execution.radio.icon, var_0 );
        objective_showtoplayersinmask( level.init_cp_execution.radio.icon );
        return;
    }

    if ( isdefined( level.init_cp_execution.radio.ownerteam ) )
    {
        if ( var_0.team == level.init_cp_execution.radio.ownerteam && isdefined( level.init_cp_execution.radio.jailtimeouthud ) )
        {
            objective_removeclientfrommask( level.init_cp_execution.radio.jailtimeouthud, var_0 );
            objective_showtoplayersinmask( level.init_cp_execution.radio.jailtimeouthud );
        }

        if ( var_0.team != level.init_cp_execution.radio.ownerteam && isdefined( level.init_cp_execution.radio.increase_wave_ai_spawned_counter ) )
        {
            objective_addclienttomask( level.init_cp_execution.radio.increase_wave_ai_spawned_counter, var_0 );
            objective_hidefromplayersinmask( level.init_cp_execution.radio.increase_wave_ai_spawned_counter );
        }
    }
}

init_exit_doors()
{
    var_0 = self;

    if ( !isdefined( level.init_cp_execution ) || !isdefined( level.init_cp_execution.radio ) )
        return;

    if ( isdefined( level.init_cp_execution.radio.icon ) )
    {
        objective_addclienttomask( level.init_cp_execution.radio.icon, var_0 );
        objective_showtoplayersinmask( level.init_cp_execution.radio.icon );
        return;
    }

    if ( isdefined( level.init_cp_execution.radio.ownerteam ) )
    {
        if ( var_0.team == level.init_cp_execution.radio.ownerteam && isdefined( level.init_cp_execution.radio.jailtimeouthud ) )
        {
            objective_addclienttomask( level.init_cp_execution.radio.jailtimeouthud, var_0 );
            objective_showtoplayersinmask( level.init_cp_execution.radio.jailtimeouthud );
        }

        if ( var_0.team != level.init_cp_execution.radio.ownerteam && isdefined( level.init_cp_execution.radio.increase_wave_ai_spawned_counter ) )
        {
            objective_removeclientfrommask( level.init_cp_execution.radio.increase_wave_ai_spawned_counter, var_0 );
            objective_hidefromplayersinmask( level.init_cp_execution.radio.increase_wave_ai_spawned_counter );
        }
    }
}

subway_black_screen( var_0 )
{
    var_0.giveachievementwildfire = var_0.origin;

    if ( isdefined( level.init_cp_execution ) && isdefined( level.init_cp_execution.radio ) && isdefined( level.init_cp_execution.radio.owner ) && level.init_cp_execution.radio.owner == var_0 )
    {
        var_1 = scripts\mp\gametypes\br_pickups.gsc::playersetattractiontime();
        var_0 heli_rpg_enemy_think( var_1 );
    }
}

activate_upload_station( var_0 )
{
    var_1 = gettime() + var_0 * 1000;
    setomnvar( "ui_br_exfil_radio_end_time", int( var_1 ) );
}

activatedtime( var_0 )
{
    activate_trophy_protection( var_0 );
}

activate_vehicle_spawner( var_0 )
{
    activate_trophy_protection( undefined, var_0 );
}

activate_upload_station_for_interact( var_0 )
{
    activate_trophy_protection( undefined, undefined, var_0 );
}

activate_trophy_protection( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( level.init_rpg_spawns ) )
    {
        level.init_rpg_spawns = spawnstruct();
        level.init_rpg_spawns.watchweapondeathordisconnect = 0;
        level.init_rpg_spawns.watchvehicleingas = 0;
        level.init_rpg_spawns.watchspraygesturedosprayevent = 255;
        level.init_rpg_spawns.setexfiltimer = 0;
    }

    if ( isdefined( var_3 ) )
        level.init_rpg_spawns.watchweapondeathordisconnect = var_3;

    if ( isdefined( var_0 ) )
        level.init_rpg_spawns.watchvehicleingas = var_0;

    if ( isdefined( var_1 ) )
        level.init_rpg_spawns.watchspraygesturedosprayevent = var_1;

    if ( isdefined( var_2 ) )
        level.init_rpg_spawns.setexfiltimer = var_2;

    var_4 = ( int( level.init_rpg_spawns.watchweapondeathordisconnect ) & 1 ) << 22;
    var_4 = var_4 + ( ( int( level.init_rpg_spawns.watchvehicleingas ) & 7 ) << 19 );
    var_4 = var_4 + ( ( int( level.init_rpg_spawns.watchspraygesturedosprayevent ) & 255 ) << 11 );
    var_4 = var_4 + ( int( level.init_rpg_spawns.setexfiltimer ) & 2047 );
    setomnvar( "ui_br_exfil_radio_state", var_4 );
}

activate_timed_laser_traps()
{
    activatedtime( 0 );
}

activatefunc( var_0 )
{
    activate_trophy_protection( undefined, undefined, undefined, var_0 );
}

init_fake_magic_grenades()
{
    var_0 = self;
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    level.init_cp_execution endon( "escape_radio_dropped" );
    var_1 = 0;
    var_2 = 0;
    var_3 = 0;

    for (;;)
    {
        var_4 = istrue( var_0.protect_jammer ) || scripts\mp\utility\player::proxtrigger( var_0 );

        if ( var_4 && !var_1 )
        {
            var_1 = 1;
            var_2 = gettime();

            if ( getdvarint( "scr_br_alt_mode_escape_reset_timer_when_invalid_state", 0 ) )
                var_5 = level.init_cp_execution._id_1301B;
            else
            {
                var_0 notify( "escape_radio_win_timer_wait" );
                level.init_cp_execution._id_12741 = gettime() - level.init_cp_execution.trackriotshield_grenadepullbackforc4 - var_3;
                level.init_cp_execution.radio.waittime = level.init_cp_execution._id_1301B - level.init_cp_execution._id_12741 / 1000;
                var_5 = level.init_cp_execution.radio.waittime;
            }

            activatefunc( 1 );
        }
        else if ( !var_4 && var_1 )
        {
            var_3 = var_3 + ( gettime() - var_2 );
            var_1 = 0;
            var_0 thread active_relic_bang_and_boom( level.init_cp_execution.radio );
            level.init_cp_execution._id_12741 = undefined;
            activatefunc( 0 );
        }

        waitframe();
    }
}

vehicle_spawn_mp_gamemodesupportsrespawn()
{
    return 1;
}

activate_minigun()
{
    if ( !isdefined( level.init_rpg_spawns ) || !isdefined( level.init_rpg_spawns.watchvehicleingas ) )
        return -1;

    var_0 = level.init_rpg_spawns.watchvehicleingas;

    if ( var_0 == 1 && isdefined( level.init_cp_execution.watchremoveminigunrestrictions ) )
    {
        var_1 = max( 0, level.init_cp_execution.watchremoveminigunrestrictions - gettime() );
        var_2 = var_1 / 1000;
        return var_2;
    }
    else if ( var_0 == 3 )
    {
        var_3 = gettime() - level.init_cp_execution.trackriotshield_grenadepullbackforc4;
        var_2 = level.init_cp_execution._id_1301B - var_3 / 1000;
        return var_2;
    }
    else if ( var_0 == 2 )
        return level.init_cp_execution._id_1301B;
    else
        return -1;
}

ai_anim_relative()
{
    level endon( "game_ended" );
    level endon( "force_end" );
    level.friendly_exit = undefined;
    level.friendly_hvi_vehicle_extra_riders = -1;
    var_0 = 0;
    var_1 = level.init_cp_execution._id_12795;

    for (;;)
    {
        var_2 = 1;

        if ( !isdefined( level.init_cp_execution ) )
            var_2 = 0;
        else if ( !isdefined( level.init_rpg_spawns ) || !isdefined( level.init_rpg_spawns.watchvehicleingas ) )
            var_2 = 0;

        if ( var_2 )
        {
            var_3 = activate_minigun();
            var_4 = level.init_rpg_spawns.watchvehicleingas;

            if ( var_3 == -1 || var_4 == 0 )
            {

            }
            else if ( var_4 == 1 && !var_0 )
            {
                if ( getdvarint( "scr_br_override_remaining_time", 0 ) != 0 )
                    var_3 = getdvarint( "scr_br_override_remaining_time", 0 );

                if ( var_3 < 80 )
                    addspecialistbonus( "br_escape_tenpercent" );
            }
            else if ( var_4 == 3 || var_4 == 2 || var_0 )
            {
                if ( var_4 == 1 )
                    var_3 = var_1;

                var_0 = 1;
                var_5 = min( var_1, var_3 );
                var_1 = var_5;

                if ( getdvarint( "scr_br_override_remaining_time", 0 ) != 0 )
                    var_5 = getdvarint( "scr_br_override_remaining_time", 0 );

                if ( var_5 <= 60 )
                    addspecialistbonus( "br_escape_ninetypercent" );
                else if ( var_5 < 125 )
                    addspecialistbonus( "br_escape_eightypercent" );
                else if ( var_5 < 185 )
                    addspecialistbonus( "br_escape_seventypercent" );
                else if ( var_5 < 250 )
                    addspecialistbonus( "br_escape_fiftypercent" );
                else
                    addspecialistbonus( "br_escape_thirtypercent" );
            }
        }

        wait 1;
    }
}

addspecialistbonus( var_0 )
{
    if ( isdefined( level.friendly_exit ) && level.friendly_exit == var_0 )
        return;

    var_1 = game["music"][var_0].size;
    var_2 = randomint( var_1 );
    setmusicstate( "" );
    level.friendly_exit = var_0;
    level.friendly_hvi_vehicle_extra_riders = var_2;

    foreach ( var_4 in level.players )
    {
        if ( !var_4 scripts\mp\gametypes\br_public.gsc::questtypes() )
            var_4 _id_11EE6();
    }
}

_id_11EE6()
{
    var_0 = self;

    if ( isdefined( level.friendly_exit ) )
        var_0 setplayermusicstate( game["music"][level.friendly_exit][level.friendly_hvi_vehicle_extra_riders] );
}
