// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    scripts\engine\scriptable::_id_11CDB( "body", ::_id_11C7D );
    var_0 = scripts\mp\gametypes\br_quest_util.gsc::registerquestcategory( "scavenger_adler", 1 );
    scripts\mp\gametypes\br_quest_util.gsc::zone_stompeenemyprogressupdate( "scavenger_adler", "brloot_scavenger_tablet_adler" );

    if ( !var_0 )
        return;

    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger_adler" )._id_11D1C = getdvarint( "scr_br_adler_searchCircleSize", 1000 );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger_adler" ).should_do_vo_call = getdvarint( "scr_br_adler_missionTimeBase", 300 );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger_adler" ).should_drop_grenade_pickup = getdvarint( "scr_br_adler_missionTimeBonus", 60 );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger_adler" )._id_11A86 = getdvarint( "scr_br_adler_resetTimerOnPickup", 1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_1195C( "scavenger_adler", ::_id_12378 );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "scavenger_adler", ::_id_12372 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_1194E( "scavenger_adler", ::_id_1236E );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestlocale( "scavenger_locale_adler" );
    scripts\mp\gametypes\br_quest_util.gsc::registercreatequestlocale( "scavenger_locale_adler", ::_id_12362 );
    scripts\mp\gametypes\br_quest_util.gsc::zoneislocked( "scavenger_locale_adler", ::_id_12368 );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "scavenger_locale_adler", ::_id_12370 );
    scripts\mp\gametypes\br_quest_util.gsc::registercheckiflocaleisavailable( "scavenger_locale_adler", ::_id_1235E );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestcircletick( "scavenger_locale_adler", ::_id_12360 );
    scripts\mp\gametypes\br_quest_util.gsc::zvelscale( "scavenger_locale_adler", ::_id_12365 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11950( "scavenger_locale_adler", ::_id_12375 );
    scripts\mp\gametypes\br_quest_util.gsc::watch_for_player_going_belowmap_or_oob( "scavenger_adler", 1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11951( "scavenger_adler", ::_id_1236B );
    var_1 = [];
    var_1[0] = scripts\mp\gametypes\br_quest_util.gsc::filtercondition_isdead;
    scripts\mp\gametypes\br_quest_util.gsc::registerplayerfilter( "scavenger_adler", var_1 );
}

_id_12372()
{
    scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
}

_id_1236E( var_0 )
{
    if ( var_0.team == self.team )
    {
        var_1 = scripts\mp\utility\teams::getteamdata( self.team, "players" );
        scripts\mp\gametypes\br_quest_util.gsc::getquestinstancedata( "scavenger_locale_adler", self.team ).playerlist = var_1;

        if ( isdefined( self._id_12550 ) && isdefined( self._id_12550.damagedisabledfeedback ) && var_1.size )
            self._id_12550.damagedisabledfeedback setotherent( var_1[0] );

        if ( !scripts\mp\gametypes\br_quest_util.gsc::isteamvalid( var_0.team ) )
        {
            self.result = "fail";
            scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
        }
    }
}

_id_12365( var_0 )
{
    if ( !disablespawningforplayerfunc( var_0 ) )
        return;

    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
    scripts\mp\gametypes\br_quest_util.gsc::overtime_music( var_0 );
}

_id_12375( var_0 )
{
    if ( !disablespawningforplayerfunc( var_0 ) )
        return;

    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshow( "scavenger_adler" );
    scripts\mp\gametypes\br_quest_util.gsc::_id_12058( var_0 );
}

disablespawningforplayerfunc( var_0 )
{
    if ( var_0.team == self.subscribedinstances[0].team )
        return 1;
    else
        return 0;
}

_id_12362( var_0 )
{
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::createlocaleinstance( "scavenger_locale_adler", "scavenger_adler", self.team );

    if ( !isdefined( var_0 ) )
    {
        var_1.curorigin = ( 0, 0, 0 );
        var_1.enabled = 0;
        return var_1;
    }

    var_1 scripts\mp\gametypes\br_quest_util.gsc::force_bleedout_all_downed_players( "ui_mp_br_mapmenu_icon_h4a_objective", "current" );
    var_1.playerlist = scripts\mp\utility\teams::getteamdata( self.team, "players" );
    var_1.tr_respawn = 0;
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "scavenger_locale_adler", var_1 );
    var_1 _id_11F78( var_0 );
    return var_1;
}

_id_12368( var_0 )
{
    self.tr_respawn++;
    var_1 = _id_11F78( var_0 );

    if ( var_1 )
    {
        self.subscribedinstances[0].gameisending = var_0.origin;
        scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.subscribedinstances[0].team, "br_scavenger_adler_quest_next_location" );
        level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_obj_next_nptarget", self.subscribedinstances[0].team, 1 );

        if ( istrue( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger_adler" )._id_11A86 ) )
            self.subscribedinstances[0] scripts\mp\gametypes\br_quest_util.gsc::watch_for_player_in_gulag( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger_adler" ).should_do_vo_call, 1 );
        else
            self.subscribedinstances[0] scripts\mp\gametypes\br_quest_util.gsc::watch_for_player_entered_trap_room( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger_adler" ).should_drop_grenade_pickup );
    }
}

_id_11F78( var_0 )
{
    if ( !isdefined( var_0 ) )
    {
        var_1 = self.subscribedinstances[0];

        foreach ( var_3 in scripts\mp\utility\teams::getteamdata( var_1.team, "players" ) )
            var_3 scripts\mp\utility\lower_message::_id_11EBD( "br_assassination_notargets", undefined, 5 );

        var_1.result = "no_locale";
        var_1 scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
        return 0;
    }

    getlootspawnpointcount( var_0.index );
    _id_122F9( var_0.origin, var_0.angles, self );
    self.curorigin = var_0.origin + ( 0, 0, 50 );
    scripts\mp\gametypes\br_quest_util.gsc::spawn_ending_individual_guys_death( self.curorigin );
    _id_12B24();
    return 1;
}

_id_12370()
{
    getcombatrecordsupermisc();
    self.playerlist = undefined;
    self.subscribedinstances = undefined;

    if ( isdefined( self.damagedisabledfeedback ) )
    {
        if ( self.damagedisabledfeedback getscriptablepartstate( "body" ) == "scavenger_closed" )
            self.damagedisabledfeedback delete();
    }
}

_id_12360( var_0, var_1 )
{
    if ( !isdefined( self.lastcircletick ) )
        self.lastcircletick = -1;

    var_2 = gettime();

    if ( self.lastcircletick == var_2 )
        return;

    self.lastcircletick = var_2;
    var_3 = distance2d( self.curorigin, var_0 );

    if ( var_3 > var_1 )
    {
        foreach ( var_5 in self.subscribedinstances )
            var_5 failscavengerquest();
    }
}

_id_1235E()
{
    return 0;
}

takequestitem( var_0 )
{
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::createquestinstance( "scavenger_adler", self.team, var_0.index, var_0 );
    var_1 scripts\mp\gametypes\br_quest_util.gsc::registerteamonquest( self.team, self );
    var_1 scripts\mp\gametypes\br_quest_util.gsc::zombiepingtime( self );
    var_1.team = self.team;
    var_1.startlocation = self.origin;
    var_1.gameisending = self.origin;
    var_1._id_11A51 = var_0._id_11A51;
    var_2 = select_bridge_two_spawners( var_1.startlocation, var_1._id_11A51[0] );
    var_3 = var_1 scripts\mp\gametypes\br_quest_util.gsc::requestquestlocale( "scavenger_locale_adler", var_2, 1 );

    if ( !var_3.enabled )
    {
        scripts\mp\utility\lower_message::_id_11EBD( "br_assassination_notargets", undefined, 5 );
        var_1.result = "no_locale";
        var_1 scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
        var_4 = spawnstruct();
        var_4.origin = var_0.origin;
        var_4.angles = var_0.angles;
        var_4.itemsdropped = 0;

        if ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "risk" )
        {
            var_5 = "mp/loot_set_cache_contents_dmz.csv";
            var_4 scripts\mp\gametypes\br_lootcache.gsc::chooseandspawnitems( 0, 1, "health", var_5 );
            var_4 scripts\mp\gametypes\br_lootcache.gsc::chooseandspawnitems( 0, 2, "ammo", var_5 );
            var_4 scripts\mp\gametypes\br_lootcache.gsc::chooseandspawnitems( 1, 1, "plunder", var_5 );
        }
        else
        {
            var_4 scripts\mp\gametypes\br_lootcache.gsc::chooseandspawnitems( 0, 1, "health" );
            var_4 scripts\mp\gametypes\br_lootcache.gsc::chooseandspawnitems( 0, 2, "ammo" );
            var_4 scripts\mp\gametypes\br_lootcache.gsc::chooseandspawnitems( 1, 1, "plunder" );
        }

        return;
    }

    scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshowtoteam( "scavenger_adler", self.team );
    var_1.totalscavengeditems = 0;
    var_1 scripts\mp\gametypes\br_quest_util.gsc::watch_for_player_in_gulag( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "scavenger_adler" ).should_do_vo_call, 4 );
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "scavenger_adler", var_1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_124A9( "scavenger_adler", self, self.team );
    var_6 = spawnstruct();
    var_6.excludedplayers = [];
    var_6.excludedplayers[0] = self;
    var_6.vehicleoutline = scripts\mp\gametypes\br_quest_util.gsc::min_z( "scavenger_adler", scripts\mp\gametypes\br_quest_util.gsc::mine_caves_cell_support_internal( self.team ) );
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_scavenger_adler_quest_start_team", var_6 );
    scripts\mp\gametypes\br_quest_util.gsc::displayplayersplash( self, "br_scavenger_adler_quest_start_tablet_finder", var_6 );

    if ( !scripts\mp\gametypes\br_public.gsc::rear_minigun_model() )
        scripts\mp\gametypes\br_quest_util.gsc::monitor_waypoint_objective_on_front_truck( self.team, "br_mission_pickup_tablet" );

    scripts\mp\gametypes\br_quest_util.gsc::global_stealth_broken_func( var_1.team, self, 6, scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "scavenger_adler" ) );
    level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_gen_accept", var_1.team, 1 );
    var_7 = distance2d( var_1.startlocation, ( 52289, -19660, 248 ) );
    var_8 = distance2d( var_1.startlocation, ( -7091, 5857, 661 ) );
    var_9 = distance2d( var_1.startlocation, ( -22956, 50865, 3629 ) );
    var_10 = var_7;
    var_1.any_alive_player_in_kill_zone_or_under_bridge_zone = "farms";

    if ( var_8 < var_10 )
    {
        var_10 = var_8;
        var_1.any_alive_player_in_kill_zone_or_under_bridge_zone = "factory";
    }

    if ( var_9 < var_10 )
    {
        var_10 = var_9;
        var_1.any_alive_player_in_kill_zone_or_under_bridge_zone = "summit";
    }
}

select_bridge_two_spawners( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2._id_11D1F = "getUnusedLootCacheArray";
    var_2._id_11D1B = var_0;
    var_2._id_11D22 = 15000;
    var_2._id_11D23 = 0;
    var_2._id_11D20 = 6500;
    var_2._id_11D21 = 2000;
    var_2._id_11D1D = 1;
    var_2._id_11A51 = var_1;
    var_2.mintime = 45;

    if ( kickafkplayer() )
    {
        if ( var_2._id_11D22 < level.watch_for_driver_spawned )
            var_2._id_11D22 = level.watch_for_driver_spawned;

        var_2._id_11D20 = level.watch_for_driver_spawned;
        var_2._id_11D21 = level.watch_for_flash_detonation;
    }

    var_3 = getdvarint( "scr_br_questScavDistMin", -1 );
    var_4 = getdvarint( "scr_br_questScavDistMax", -1 );

    if ( var_3 >= 0 )
        var_2._id_11D21 = var_3;

    if ( var_4 >= 0 )
        var_2._id_11D20 = var_4;

    return var_2;
}

kickafkplayer()
{
    var_0 = 0;
    var_1 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "overrideQuestSearchParams", "scavenger_adler" );

    if ( isdefined( var_1 ) )
        return var_1;

    var_2 = scripts\mp\utility\game::missions_clearinappropriaterewards();

    switch ( var_2 )
    {
        case "mini":
        case "risk":
        case "dmz":
            var_0 = 1;
            break;
    }

    return var_0;
}

exit_open( var_0 )
{
    var_1 = spawnstruct();
    var_2 = scripts\mp\gametypes\br_quest_util.gsc::mine_caves_cell_support_internal( self.team );
    var_3 = scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "scavenger_adler" );
    var_4 = scripts\mp\gametypes\br_quest_util.gsc::mine_caves_ambush( scripts\mp\gametypes\br_quest_util.gsc::mine_cave_turrets( "scavenger_adler" ) );
    var_1.target_show_damage_damage_watch = scripts\mp\gametypes\br_quest_util.gsc::target_wavespawning_to_jammer5( var_3, var_2, var_4 );

    if ( !scripts\mp\gametypes\br_public.gsc::rear_minigun_model() )
    {
        scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_scavenger_adler_quest_complete", var_1 );
        level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_misc_success", self.team, 1, 1 );
    }

    var_5 = "";

    switch ( self.any_alive_player_in_kill_zone_or_under_bridge_zone )
    {
        case "farms":
            var_5 = "t9_ch_global_complete_intel_contract_at_farms_for_s3_event_wz";
            break;
        case "factory":
            var_5 = "t9_ch_global_complete_intel_contract_at_factory_for_s3_event_wz";
            break;
        case "summit":
            var_5 = "t9_ch_global_complete_intel_contract_at_summit_for_s3_event_wz";
            break;
    }

    foreach ( var_7 in scripts\mp\utility\teams::getteamdata( self.team, "players" ) )
        var_7 scripts\cp\helicopter\chopper_boss::_id_11A49( var_5, 1 );

    self._id_11B21 = var_0.origin;
    self._id_11B1E = var_0.angles;
    self.result = "success";
    scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
}

failscavengerquest()
{
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_scavenger_adler_quest_circle_failure" );
    level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_obj_circle_fail", self.team, 1 );
    self.result = "fail";
    scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
}

_id_12B24()
{
    foreach ( var_1 in self.playerlist )
        var_1 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivesetparameter( self.tr_respawn );

    var_3 = scripts\mp\gametypes\br_quest_util.gsc::sortvalidplayersinarray( self.playerlist );

    foreach ( var_1 in var_3["valid"] )
    {
        var_1 scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshow( "scavenger_adler" );
        scripts\mp\gametypes\br_quest_util.gsc::_id_12058( var_1 );
    }

    foreach ( var_1 in var_3["invalid"] )
    {
        var_1 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
        scripts\mp\gametypes\br_quest_util.gsc::overtime_music( var_1 );
    }
}

overwatch_player( var_0 )
{
    scripts\mp\gametypes\br_quest_util.gsc::overtime_music( var_0 );
    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
}

getcombatrecordsupermisc()
{
    foreach ( var_1 in self.playerlist )
        overwatch_player( var_1 );

    scripts\mp\gametypes\br_quest_util.gsc::getcodecomputerdisplaycode();
}

_id_1236B()
{
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_scavenger_adler_quest_timer_expired" );
    level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_gen_fail", self.team, 1 );
}

_id_122F9( var_0, var_1, var_2 )
{
    var_3 = spawn( "script_model", var_0 );
    var_4 = var_2.playerlist[0];
    var_3.angles = var_1;
    var_3 setotherent( var_4 );
    var_3 setmodel( "military_loot_crate_01_br_scavenger_01_adler" );
    var_5 = "military_loot_crate_01_br_scavenger_01_adler";
    var_3 setscriptablepartstate( "body", "scavenger_adler_closed" );
    var_3.questlocale = var_2;
    var_2.damagedisabledfeedback = var_3;

    foreach ( var_7 in level.players )
    {
        if ( var_7 != var_4 && ( var_4.team == "none" || var_7.team != var_4.team ) )
            var_3 disablescriptableplayeruse( var_7 );
    }
}

_id_11C7D( var_0, var_1, var_2, var_3, var_4 )
{
    if ( istrue( var_3 scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "playerSkipLootPickup", var_0 ) ) )
        return;

    if ( var_2 == "scavenger_adler_closed" && isdefined( var_0.entity ) )
    {
        var_5 = var_0.entity.questlocale.subscribedinstances[0];

        if ( var_3.team != var_5.team )
        {
            var_3 iprintlnbold( "Chest Requires a Scavenger Mission" );
            return;
        }

        var_0 setscriptablepartstate( "body", "scavenger_adler_opening" );
        var_6 = getdvarint( "scr_br_scavenger_cacheDeleteDelay", 30 );
        var_0.entity scripts\engine\utility::delaycallwatchself( var_6, ::delete );
        var_5 scripts\mp\gametypes\br_quest_util.gsc::zombiepingtime( var_3 );

        switch ( var_0.entity.questlocale.tr_respawn )
        {
            case 0:
                scripts\mp\gametypes\br_quest_util.gsc::monitor_player_opens_box_backup( "scavenger_1", var_3.team, var_0.origin, var_0.angles, var_5._id_11B23 );
                break;
            case 1:
                scripts\mp\gametypes\br_quest_util.gsc::monitor_player_opens_box_backup( "scavenger_2", var_3.team, var_0.origin, var_0.angles, var_5._id_11B23 );
                break;
            case 3:
                break;
        }

        if ( var_0.entity.questlocale.tr_respawn == 2 )
        {
            var_5._id_11B21 = var_0.origin;
            var_5._id_11B1E = var_0.angles;
            scripts\mp\gametypes\br_quest_util.gsc::global_stealth_broken_func( var_5.team, var_3, 8, scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "scavenger_adler" ) );
            var_5 exit_open( var_0.entity );
        }
        else
        {
            scripts\mp\gametypes\br_quest_util.gsc::global_stealth_broken_func( var_5.team, var_3, 7, scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "scavenger_adler" ) );
            var_7 = select_bridge_two_spawners( var_0.origin, var_5._id_11A51[var_0.entity.questlocale.tr_respawn + 1] );
            var_0.entity.questlocale scripts\mp\gametypes\br_quest_util.gsc::spawn_ending_individual_guys( "scavenger_locale_adler", var_7 );
        }

        level notify( "lootcache_opened_kill_callout" + var_0.origin );
        var_8 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getFriendlyPlayers" ) ]]( var_3.team, 0 );

        foreach ( var_10 in var_8 )
            var_10 notify( "calloutmarkerping_warzoneKillQuestIcon" );
    }
}

_id_12378()
{
    self._id_11A51 = [];
    var_0 = self.origin;

    for ( var_1 = 0; var_1 < 3; var_1++ )
    {
        var_2 = select_bridge_two_spawners( var_0 );
        var_3 = scripts\mp\gametypes\br_quest_util.gsc::is_point_in_cylinder( "scavenger_adler", var_2 );

        if ( !isdefined( var_3 ) )
            return 0;

        getlootspawnpointcount( var_3.index );
        var_0 = var_3.origin;
        self._id_11A51[var_1] = var_3;
    }

    return 1;
}
