// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    var_0 = scripts\mp\gametypes\br_quest_util.gsc::registerquestcategory( "assassination", 1 );

    if ( !var_0 )
        return;

    scripts\mp\gametypes\br_quest_util.gsc::_id_11957( "assassination_all" );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11957( "assassination_all_timed" );
    level.br_leaderbystreak = getdvarint( "scr_br_leader_by_streak", 0 ) != 0;
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "assassination" ).watch_for_heli_getting_killed_directly = getdvarint( "scr_br_AQ_questTimeBase", 180 );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "assassination" ).watch_for_helis_killed = getdvarint( "scr_br_AQ_questTimeBonus", 60 );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "assassination" )._id_11A85 = getdvarint( "scr_br_AQ_resetTimerOnKill", 1 );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestthink( "assassination", ::aq_questthink_circleposition, 10 );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestthink( "assassination", ::aq_questthink_objectivevisibility, 0.2 );
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "assassination", ::aq_removequestinstance );
    scripts\mp\gametypes\br_quest_util.gsc::registeronplayerkilled( "assassination", ::aq_playerdied );
    scripts\mp\gametypes\br_quest_util.gsc::_id_1194E( "assassination", ::bonuskillstreakcharge );
    var_1 = level.questinfo.defaultfilter;
    var_1 = scripts\engine\utility::array_add( var_1, ::filtercondition_hasbeentracked );
    var_1 = scripts\engine\utility::array_add( var_1, scripts\mp\gametypes\br_quest_util.gsc::filtercondition_isdowned );

    if ( getdvarint( "scr_br_alt_mode_zxp", 0 ) )
        var_1 = scripts\engine\utility::array_add( var_1, scripts\mp\gametypes\br_quest_util.gsc::is_cs_scriptable );

    scripts\mp\gametypes\br_quest_util.gsc::registerplayerfilter( "assassination", var_1, 0 );
    scripts\mp\gametypes\br_quest_util.gsc::watch_for_player_going_belowmap_or_oob( "assassination", 1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11952( "assassination", ::bonuskillscharge );
    scripts\mp\gametypes\br_quest_util.gsc::_id_11951( "assassination", ::bonusdeathplunderot );
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "assassination" ).alltrackedplayers = [];
    beacon();
    game["dialog"]["mission_ass_accept"] = "mission_mission_ass_single_accept";
    game["dialog"]["mission_ass_hunted"] = "mission_mission_ass_hunted";
    game["dialog"]["mission_ass_success"] = "mission_mission_ass_single_success";
    game["dialog"]["mission_ass_hunted_success"] = "mission_mission_ass_hunted_success";
    game["dialog"]["mission_ass_hunted_timed_out"] = "mission_mission_ass_hunted_timed_out";
    game["dialog"]["mission_ass_fail"] = "mission_mission_ass_fail";
}

filtercondition_hasbeentracked( var_0 )
{
    if ( isdefined( var_0.hasbeentracked ) && var_0.hasbeentracked )
        return 0;

    return 1;
}

aq_questthink_circleposition()
{
    if ( self.modifier == "_all_timed" )
        return;

    if ( !isdefined( self.targetplayer ) )
        return;

    determinetrackingcircleposition( self.targetplayer );
    getnearestbombsiteteam();
    _id_12AE4( self.targetteam );
}

aq_questthink_objectivevisibility()
{
    determineobjectivevisibility();
}

aq_removequestinstance()
{
    scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.hunterteam );
    removeallaqui();
}

takequestitem( var_0 )
{
    scripts\mp\gametypes\br_quest_util.gsc::monitor_waypoint_objective_on_front_truck( self.team, "br_mission_pickup_tablet" );
    var_1 = self.team;
    var_2 = determinetargetteam( self );
    var_3 = monitor_player_near_truck( var_1, var_2, var_0.index, self, "", var_0 );

    if ( !isdefined( var_3 ) )
    {
        scripts\mp\utility\lower_message::_id_11EBD( "br_assassination_notargets", undefined, 5 );
        return;
    }

    var_3 monitor_special_spawns( self );
}

monitor_special_spawns( var_0 )
{
    var_1 = spawnstruct();
    var_1.excludedplayers = [];
    var_1.excludedplayers[0] = self.targetplayer;

    if ( isdefined( var_0 ) )
        var_1.excludedplayers[1] = var_0;

    var_1.stringvar = self.targetplayer.name;
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.targetteam, "br_assassination_quest_start_target_team", var_1 );
    scripts\mp\gametypes\br_quest_util.gsc::displayplayersplash( self.targetplayer, "br_assassination_quest_start_target_player" );

    if ( !scripts\mp\gametypes\br_public.gsc::prophasclonesleft() )
        level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_ass_hunted", self.targetteam, 1 );

    var_1.vehicleoutline = scripts\mp\gametypes\br_quest_util.gsc::minarmordropondeath( scripts\mp\gametypes\br_quest_util.gsc::mine_caves_cell_support_internal( self.hunterteam ) );
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.hunterteam, "br_assassination_quest_start_hunter_team", var_1 );

    if ( !scripts\mp\gametypes\br_public.gsc::prophasclonesleft() )
        level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_ass_accept", self.hunterteam, 1 );

    if ( isdefined( var_0 ) )
    {
        scripts\mp\gametypes\br_quest_util.gsc::displayplayersplash( var_0, "br_assassination_quest_start_tablet_finder", var_1 );
        scripts\mp\gametypes\br_quest_util.gsc::global_stealth_broken_func( self.hunterteam, var_0, 6, scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "assassination" ) );
    }
}

monitor_player_near_truck( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = scripts\mp\gametypes\br_quest_util.gsc::createquestinstance( "assassination", var_0, var_2, var_5, var_3.squadindex );
    var_7.modifier = var_4;

    if ( !isdefined( var_7.modifier ) )
        var_7.modifier = "";

    var_7 scripts\mp\gametypes\br_quest_util.gsc::registerteamonquest( var_0, var_3 );
    var_7.hunterteam = var_0;
    var_7.targetteam = var_1;
    var_7._id_12669 = 0;
    var_7.picked_up_weapon = 0;
    var_7._id_1266D = 0;

    if ( isdefined( var_1 ) )
        var_7._id_1266D = var_7 scripts\mp\gametypes\br_quest_util.gsc::getvalidplayersinteam( var_1 ).size;

    if ( !isdefined( var_7.targetteam ) )
    {
        defenderflag_starts( var_7 );
        return undefined;
    }

    if ( var_7.modifier != "_all" )
        var_7 scripts\mp\gametypes\br_quest_util.gsc::watch_for_player_in_gulag( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "assassination" ).watch_for_heli_getting_killed_directly, 4 );

    var_7 scripts\mp\gametypes\br_quest_util.gsc::force_ai_to_drop_thermites( 4, 3 );

    if ( isdefined( var_6 ) )
        var_7.targetplayer = var_6;
    else
        var_7 getnewtargetplayer( var_3 );

    if ( !isdefined( var_7.targetplayer ) )
    {
        defenderflag_starts( var_7 );
        return undefined;
    }

    if ( var_7.modifier == "_all_timed" )
        level.teamdata[var_0]["hasFailed"] = 0;

    var_7 determinetrackingcircleposition( var_7.targetplayer );
    var_7 getnearestbombsiteteam();
    var_7 _id_12AE4( var_7.targetteam );
    var_7 determineobjectivevisibility();
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "assassination", var_7 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_124A9( "assassination", var_3, var_0 );
    return var_7;
}

defenderflag_starts( var_0 )
{
    if ( isdefined( var_0.mapcircle ) )
        var_0 scripts\mp\gametypes\br_quest_util.gsc::getclosestplayerforreward();

    var_0.result = "no_locale";
    var_0 scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( var_0.hunterteam );
}

determinetargetteam( var_0 )
{
    var_1 = var_0.team;
    var_2 = undefined;
    var_3 = level.players;
    var_4 = scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "assassination" ).alltrackedplayers;
    var_5 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_1, self.squadindex );
    var_6 = scripts\engine\utility::array_combine_unique( var_4, var_5 );
    var_7 = 0;
    var_8 = level.questinfo.quests["assassination"].filters[0];
    var_9 = 5000;
    var_10 = 30000;

    if ( keypadscriptableused_altbunker() )
    {
        var_9 = level.watch_for_convoy_escape;
        var_10 = level.watch_for_attack;
    }

    while ( !isdefined( var_2 ) )
    {
        var_7 = var_7 + 5000;
        var_11 = scripts\engine\utility::get_array_of_closest( var_0.origin, var_3, var_6, undefined, var_9 + var_7, var_9 );
        var_11 = scripts\mp\gametypes\br_quest_util.gsc::getvalidplayersinarray( var_11, var_8 );

        if ( !isdefined( var_11 ) || var_11.size == 0 )
        {
            if ( var_7 > var_10 )
            {
                var_11 = scripts\engine\utility::get_array_of_closest( var_0.origin, var_3, var_6, undefined, undefined, undefined );
                var_11 = scripts\mp\gametypes\br_quest_util.gsc::getvalidplayersinarray( var_11, var_8 );

                if ( !isdefined( var_11 ) || var_11.size == 0 )
                    return undefined;
            }
            else
                continue;
        }

        var_12 = [];

        foreach ( var_14 in var_11 )
            var_12[var_14.team] = scripts\mp\gametypes\br_quest_util.gsc::getvalidplayersinteam( var_14.team, var_8 ).size;

        var_16 = scripts\mp\gametypes\br_quest_util.gsc::getteamcenter( var_1, var_8 );
        var_17 = scripts\mp\gametypes\br_quest_util.gsc::getvalidplayersinteam( var_1, var_8 ).size;

        foreach ( var_25, var_19 in var_12 )
        {
            if ( !isdefined( var_2 ) )
            {
                var_2 = var_25;
                continue;
            }

            if ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "risk" )
            {
                var_20 = scripts\mp\gametypes\br_gametype_dmz.gsc::mlghitlocrequiresclamp( var_2 );
                var_21 = scripts\mp\gametypes\br_gametype_dmz.gsc::mlghitlocrequiresclamp( var_25 );

                if ( var_21 > 100000 )
                {
                    if ( var_21 > var_20 )
                    {
                        var_2 = var_25;
                        continue;
                    }
                }
            }

            var_22 = abs( var_17 - var_19 );

            if ( var_22 < abs( var_17 - var_12[var_2] ) )
            {
                var_2 = var_25;
                continue;
            }
            else if ( var_22 > abs( var_17 - var_12[var_2] ) )
                continue;

            if ( var_19 > var_12[var_2] )
            {
                var_2 = var_25;
                continue;
            }
            else if ( var_19 < var_12[var_2] )
                continue;

            var_23 = scripts\mp\gametypes\br_quest_util.gsc::getteamcenter( var_25, var_8 );
            var_24 = scripts\mp\gametypes\br_quest_util.gsc::getteamcenter( var_2, var_8 );

            if ( distance2d( var_16, var_23 ) < distance2d( var_16, var_24 ) )
            {
                var_2 = var_25;
                continue;
            }
        }
    }

    if ( isdefined( var_2 ) )
        scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "assassination" ).alltrackedplayers = scripts\engine\utility::array_combine( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "assassination" ).alltrackedplayers, scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_2, self.squadindex ) );

    return var_2;
}

determinetargetplayer( var_0, var_1 )
{
    var_2 = undefined;
    var_3 = undefined;
    var_4 = undefined;
    var_5 = scripts\mp\gametypes\br_quest_util.gsc::getteamcenter( self.hunterteam );

    foreach ( var_7 in scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_0, self.squadindex ) )
    {
        if ( !scripts\mp\gametypes\br_quest_util.gsc::isplayervalid( var_7, make_usb_model_usable( self.modifier ) ) )
            continue;

        if ( scripts\mp\gametypes\br_public.gsc::prophasclonesleft() )
        {
            if ( scripts\engine\utility::is_equal( var_7.script_noteworthy, "assassination_target" ) )
            {
                var_4 = var_7;
                break;
            }
        }

        if ( !isdefined( var_4 ) )
            var_4 = var_7;

        if ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "risk" )
        {
            var_8 = var_7.plundercount;

            if ( isdefined( var_8 ) )
            {
                var_9 = distance2dsquared( var_1.origin, var_7.origin );

                if ( !isdefined( var_3 ) || var_9 <= var_3 )
                {
                    if ( !isdefined( var_2 ) || var_8 >= var_2 )
                    {
                        var_2 = var_8;
                        var_3 = var_9;
                        var_4 = var_7;
                    }
                }
            }

            continue;
        }

        if ( distance2d( var_5, var_7.origin ) < distance2d( var_5, var_4.origin ) )
            var_4 = var_7;
    }

    var_4.hasbeentracked = 0;
    self.targetplayer = var_4;
}

determinetrackingcircleposition( var_0 )
{
    var_1 = ( var_0.origin[0], var_0.origin[1], lowpopcheck() );

    if ( !scripts\mp\gametypes\br_public.gsc::prophasclonesleft() )
        var_1 = var_1 + scripts\engine\math::random_vector_2d() * randomfloatrange( lowpopallowtweaks(), lower_target_when_close() );

    scripts\mp\gametypes\br_quest_util.gsc::spawn_elevators( var_1 );
}

getnearestbombsiteteam()
{
    if ( scripts\mp\gametypes\br_public.gsc::prophasclonesleft() )
    {
        scripts\mp\gametypes\br_quest_util.gsc::_id_11EBE( level.select_players_not_in_killzone_only );
        self._id_126F5 = 2;
    }
    else
    {
        if ( getdvarint( "scr_br_alt_mode_zxp", 0 ) )
            var_0 = scripts\mp\gametypes\br_quest_util.gsc::getvalidplayersinteam( self.hunterteam, level.questinfo.defaultfilter );
        else
            var_0 = scripts\mp\gametypes\br_quest_util.gsc::getvalidplayersinteam( self.hunterteam );

        if ( var_0.size == 0 )
        {
            scripts\mp\gametypes\br_quest_util.gsc::_id_11EBE( 3500 );
            self._id_126F5 = 0;
        }
        else
        {
            var_1 = undefined;

            foreach ( var_3 in var_0 )
            {
                var_4 = distance2d( var_3.origin, self.targetplayer.origin );

                if ( !isdefined( var_1 ) || var_4 < var_1 )
                    var_1 = var_4;
            }

            if ( var_1 > 5000 )
            {
                scripts\mp\gametypes\br_quest_util.gsc::_id_11EBE( 3500 );
                self._id_126F5 = 0;
                return;
            }

            if ( var_1 > 2500 )
            {
                scripts\mp\gametypes\br_quest_util.gsc::_id_11EBE( 2000 );
                self._id_126F5 = 1;
                return;
            }

            scripts\mp\gametypes\br_quest_util.gsc::_id_11EBE( 1500 );
            self._id_126F5 = 2;
        }
    }
}

determineobjectivevisibility()
{
    foreach ( var_1 in scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( self.hunterteam, self.squadindex ) )
    {
        var_2 = var_1 scripts\mp\gametypes\br_public.gsc::isplayeringulag();
        var_3 = isdefined( var_1.aq_hudenabled ) && var_1.aq_hudenabled;

        if ( var_2 && var_3 )
            var_1 hideassassinationhud( self );

        if ( !var_2 && !var_3 )
            var_1 showassassinationhud( self );
    }

    var_5 = self.squadindex;

    if ( isdefined( self.targetplayer.squadindex ) )
        var_5 = self.targetplayer.squadindex;

    foreach ( var_1 in scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( self.targetteam, var_5 ) )
    {
        var_2 = var_1 scripts\mp\gametypes\br_public.gsc::isplayeringulag();
        var_3 = isdefined( var_1.bonustimeapplied ) && var_1.bonustimeapplied;

        if ( var_2 && var_3 )
            var_1 outline_ents();

        if ( !var_2 && !var_3 )
            var_1 _id_12039( self.targetplayer, self._id_126F5 );
    }
}

bonuskillscharge()
{
    foreach ( var_1 in scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( self.targetteam, self.squadindex ) )
        var_1 setclientomnvar( "ui_br_assassination_target_timer", self.should_enter_combat_after_checking_gas_grenade );

    if ( self.modifier == "_all_timed" )
        thread bot_shotguns();
}

bonusdeathplunderot()
{
    if ( self.modifier == "_all_timed" )
    {
        scripts\mp\utility\teams::setteamdata( self.targetteam, "hasFailed", 1 );
        bearwatch( self.hunterteam );
        scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
    }
    else
    {
        scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.hunterteam, "br_assassination_timer_expire_hunters_lose" );
        var_0 = scripts\mp\gametypes\br_quest_util.gsc::mine_caves_cell_support_internal( self.targetteam );
        var_1 = scripts\mp\gametypes\br_quest_util.gsc::min_z( "assassination", var_0 );
        self._id_11B20 = "_averted";
        var_2 = spawnstruct();
        var_3 = scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "assassination" );
        var_4 = scripts\mp\gametypes\br_quest_util.gsc::mine_caves_ambush( scripts\mp\gametypes\br_quest_util.gsc::mine_cave_turrets( "assassination", self._id_11B20, self.modifier ) );
        var_2.target_show_damage_damage_watch = scripts\mp\gametypes\br_quest_util.gsc::target_wavespawning_to_jammer5( var_3, var_0, var_4 );
        scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.targetteam, "br_assassination_timer_expire_targets_win", var_2 );
        level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_ass_fail", self.hunterteam, 1 );
        level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_ass_hunted_timed_out", self.targetteam, 1 );

        if ( getdvar( "scr_br_gametype", "" ) != "dmz" && getdvar( "scr_br_gametype", "" ) != "risk" )
            scripts\mp\gametypes\br_quest_util.gsc::monitor_player_plundercount( self.targetteam, self.targetplayer.origin, self.targetplayer.angles, self._id_11B23 );
    }
}

aq_playerdied( var_0, var_1 )
{
    if ( var_1 scripts\mp\gametypes\br_public.gsc::isplayeringulag() || var_0 scripts\mp\gametypes\br_public.gsc::isplayeringulag() )
        return;

    thread bonusobjectivescorecharge( var_1, var_0 );
}

bonuskillstreakcharge( var_0 )
{
    thread bonusobjectivescorecharge( var_0 );
}

bonusobjectivescorecharge( var_0, var_1 )
{
    if ( self.modifier == "_all_timed" && scripts\mp\utility\teams::getteamdata( self.hunterteam, "hasFailed" ) )
        return;

    if ( scripts\mp\gametypes\br_public.gsc::prophasclonesleft() )
    {
        if ( !isbot( var_0 ) )
            return;
    }

    if ( var_0.team == self.targetteam )
    {
        if ( var_0 == self.targetplayer )
        {
            var_2 = var_0.attackers;
            wait 0.75;
            var_3 = spawnstruct();
            var_4 = scripts\mp\gametypes\br_quest_util.gsc::mine_caves_cell_support_internal( self.hunterteam );
            var_5 = scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "assassination" );

            if ( isdefined( var_1 ) && isdefined( var_1.team ) && var_1.team == self.hunterteam )
            {
                var_6 = "br_assassination_complete_hunters_win";
                self._id_11B20 = "_target_killed";
                scripts\mp\gametypes\br_quest_util.gsc::global_stealth_broken_func( self.hunterteam, var_1, 8, scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "assassination" ) );

                foreach ( var_8 in scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( self.hunterteam, self.squadindex ) )
                    var_8 scripts\cp\helicopter\chopper_boss::_id_11A49( "t9_ch_global_complete_wz_bounty_contracts_for_operator_mission", 1 );
            }
            else
            {
                var_6 = "br_assassination_complete_target_vanished";
                self._id_11B20 = "_target_vanished";
            }

            var_10 = scripts\mp\gametypes\br_quest_util.gsc::mine_caves_ambush( scripts\mp\gametypes\br_quest_util.gsc::mine_cave_turrets( "assassination", self._id_11B20, self.modifier ) );
            var_3.target_show_damage_damage_watch = scripts\mp\gametypes\br_quest_util.gsc::target_wavespawning_to_jammer5( var_5, var_4, var_10 );
            scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.hunterteam, var_6, var_3 );

            if ( !scripts\mp\gametypes\br_public.gsc::prophasclonesleft() )
                level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_ass_success", self.hunterteam, 1 );

            self._id_11B21 = var_0.origin;
            self._id_11B1E = var_0.angles;

            if ( isdefined( var_2 ) )
            {
                foreach ( var_12 in var_2 )
                {
                    if ( isdefined( var_12.team ) && var_12.team == self.hunterteam )
                        scripts\mp\gametypes\br_quest_util.gsc::zombiepingtime( var_12 );
                }
            }

            scripts\mp\gametypes\br_alt_mode_bblitz.gsc::brsingleuse( var_1 );
            self.result = "success";
            scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
        }

        if ( self.modifier == "_all_timed" )
        {
            if ( !isdefined( level.gulag ) || isdefined( level.gulag ) && !istrue( level.gulag.shutdown ) )
            {
                foreach ( var_8 in scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( self.hunterteam, self.squadindex ) )
                {
                    if ( istrue( var_8.inlaststand ) )
                        var_8 scripts\mp\laststand::is_same_combat_action( "use_hold_revive_success", var_8 );

                    if ( !isalive( var_8 ) )
                    {
                        var_8 scripts\mp\gametypes\br_pickups.gsc::addrespawntoken( 1 );
                        var_8 thread scripts\mp\gametypes\br_gulag.gsc::playergulagautowin();
                    }
                }
            }
        }
    }
    else if ( var_0.team == self.hunterteam )
    {
        if ( !scripts\mp\gametypes\br_quest_util.gsc::isteamvalid( self.hunterteam, make_usb_model_usable( self.modifier ) ) )
        {
            if ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "risk" )
            {
                self.result = "fail";
                scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
            }
            else
            {
                self._id_11B20 = "_averted";
                var_16 = scripts\mp\gametypes\br_quest_util.gsc::monitor_player_plundercount( self.targetteam, var_0.origin, var_0.angles, self._id_11B23 );
                var_3 = spawnstruct();
                var_3.vehicleoutline = scripts\mp\gametypes\br.gsc::get_int_or_0( var_16["plunder"] );
                scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.targetteam, "br_assassination_complete_targets_win", var_3 );
                self.result = "fail";
                scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
            }
        }
    }
}

getnewtargetplayer( var_0 )
{
    determinetargetplayer( self.targetteam, var_0 );
    determinetrackingcircleposition( self.targetplayer );
    getnearestbombsiteteam();
    updateassassinationhud();
}

removeallaqui()
{
    foreach ( var_1 in scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( self.hunterteam, self.squadindex ) )
        var_1 hideassassinationhud( self );

    foreach ( var_1 in scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( self.targetteam, self.squadindex ) )
        var_1 outline_ents();

    scripts\mp\gametypes\br_quest_util.gsc::getclosestplayerforreward();
}

getplayerkills()
{
    if ( level.br_leaderbystreak )
        return self.killsthislife.size;
    else
        return self.kills;
}

make_usb_model_usable( var_0 )
{
    switch ( var_0 )
    {
        case "_all_timed":
        case "_all":
            return level.questinfo.defaultfilter;
        default:
            return 0;
    }
}

showassassinationhud( var_0 )
{
    self.aq_hudenabled = 1;
    scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshow( "assassination" + var_0.modifier );
    var_0 scripts\mp\gametypes\br_quest_util.gsc::_id_12056( self );
}

hideassassinationhud( var_0 )
{
    self.aq_hudenabled = 0;
    scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
    var_0 scripts\mp\gametypes\br_quest_util.gsc::overrideviewkickscaledmr( self );
}

_id_12AE3( var_0, var_1 )
{
    if ( isdefined( self.bonustimeapplied ) && self.bonustimeapplied )
        var_2 = var_0 getentitynumber();
    else
        var_2 = -1;

    var_2 = var_0 getentitynumber();
    var_2 = var_2 + 1;
    var_3 = var_1 << 8 | var_2;
    self setclientomnvar( "ui_br_assassination_target", var_3 );
}

_id_12AE4( var_0 )
{
    foreach ( var_2 in scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( self.targetteam, self.squadindex ) )
        var_2 _id_12AE3( self.targetplayer, self._id_126F5 );
}

_id_12039( var_0, var_1 )
{
    self.bonustimeapplied = 1;
    _id_12AE3( var_0, var_1 );
}

outline_ents()
{
    self.bonustimeapplied = 0;
    self setclientomnvar( "ui_br_assassination_target", 0 );
}

updateassassinationhud()
{
    foreach ( var_1 in scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( self.hunterteam, self.squadindex ) )
    {
        var_1 showassassinationhud( self );
        var_1 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivesetparameter( self.targetplayer getentitynumber() );
    }

    foreach ( var_1 in scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( self.targetteam, self.squadindex ) )
        var_1 _id_12039( self.targetplayer, self._id_126F5 );
}

bot_shotguns()
{
    self notify( "assassinationTimeWarning" );
    self endon( "assassinationTimeWarning" );
    self endon( "removed" );
    var_0 = [ 300, 240, 180, 120, 90, 60, 30, 10 ];

    foreach ( var_2 in var_0 )
    {
        var_3 = ( self.should_enter_combat_after_checking_gas_grenade - gettime() ) / 1000;
        var_4 = var_3 - var_2;

        if ( var_4 < 0 )
            continue;

        wait( var_4 );
        var_5 = int( var_2 / 60 );
        var_6 = scripts\mp\gametypes\br_quest_util.gsc::getvalidplayersinarray( scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( self.hunterteam, self.squadindex ), make_usb_model_usable( self.modifier ) );

        foreach ( var_8 in var_6 )
        {
            var_9 = gettime() + var_2 * 1000;
            var_10 = 5;

            if ( var_2 <= 20 )
                var_10 = var_2;

            var_8 scripts\mp\utility\lower_message::_id_11EBD( "br_assassin_mission_time_warning", var_9, var_10 );

            if ( var_5 >= 2 )
            {
                var_8 iprintlnbold( &"MP_BR_INGAME/MISSION_ASSASSIN_2_TIME_WARNING_MIN", var_5 );
                continue;
            }

            var_8 iprintlnbold( &"MP_BR_INGAME/MISSION_ASSASSIN_2_TIME_WARNING_SEC", var_2 );
        }
    }
}

beacon()
{
    level thread bdroppingshield();
}

bdroppingshield()
{
    scripts\mp\flags::gameflagwait( "prematch_done" );
    var_0 = getdvarint( "scr_br_all_assassin_version", 0 );

    if ( !var_0 )
        return;

    var_1 = getdvarint( "scr_br_all_assassin_wait_time", 120 );
    give_respawn_flare();
    wait( var_1 );
    bdiedonce( var_0 );
}

bdiedonce( var_0 )
{
    var_1 = spawnstruct();
    var_1._id_12686 = [];
    var_1.respawn_players_into_plane = [];
    var_1._id_11AC0 = int( getdvarfloat( "scr_br_all_assassin_rest_time", 10 ) * 1000 );

    if ( var_0 == 1 )
        var_1.modifier = "_all";
    else if ( var_0 == 2 )
        var_1.modifier = "_all_timed";
    else
    {

    }

    if ( var_1.modifier == "_all_timed" )
        var_1 beardone();
    else
        var_1 beaker_end_time();

    var_1 thread battletracksowner();
    var_1 thread being_kicked_from_inactivity();
}

bbeingelectrocuted()
{
    var_0 = ( 0, 0, 0 );
    var_1 = bearsred();
    var_2 = [];

    foreach ( var_4 in var_1 )
    {
        var_5 = undefined;
        var_6 = scripts\mp\utility\teams::getteamdata( var_4, "players" );

        foreach ( var_8 in var_6 )
        {
            if ( var_8 scripts\mp\gametypes\br_public.gsc::isplayeringulag() )
                continue;

            if ( var_8 scripts\mp\gametypes\br_public.gsc::questrewarduav() )
            {
                var_5 = var_8;
                break;
            }

            if ( !isdefined( var_5 ) )
                var_5 = var_8;
        }

        if ( !isdefined( var_5 ) )
            continue;

        var_10 = spawnstruct();
        var_10.team = var_4;
        var_10.pos = var_5.origin;
        var_0 = var_0 + var_10.pos;
        var_2[var_2.size] = var_10;
    }

    if ( var_2.size < 2 )
        return var_2;

    var_0 = var_0 / var_2.size;

    foreach ( var_10 in var_2 )
    {
        var_13 = var_10.pos - var_0;
        var_10._id_12176 = vectortoangles( var_13 )[1];
    }

    var_2 = scripts\mp\utility\script::quicksort( var_2, ::bearsetup );
    return var_2;
}

beaker_end_time()
{
    var_0 = bbeingelectrocuted();
    var_1 = getdvarint( "scr_br_all_assassin_group_size", 150 );
    var_2 = var_0.size;

    if ( isdefined( var_1 ) )
        var_1 = int( min( var_1, var_2 ) );
    else
        var_1 = var_2;

    var_3 = int( var_2 / var_1 );
    var_4 = var_2 % var_1;
    var_5 = [];

    for ( var_6 = 0; var_6 < var_3; var_6++ )
        var_5[var_6] = var_1;

    for ( var_6 = 0; var_6 < var_4; var_6++ )
        var_5[var_6 % var_3]++;

    var_7 = 0;

    for ( var_6 = 0; var_6 < var_5.size; var_6++ )
    {
        var_1 = var_5[var_6];

        for ( var_8 = 0; var_8 < var_1; var_8++ )
        {
            var_9 = var_0[var_7 + var_8].team;
            var_10 = _id_13038( var_8 - 1, var_1 );
            var_11 = _id_13038( var_8 + 1, var_1 );
            var_12 = var_0[var_7 + var_10].team;
            var_13 = var_0[var_7 + var_11].team;
            var_14 = spawnstruct();
            var_14._id_1265F = var_12;
            var_14._id_12660 = var_13;
            self._id_12686[var_9] = var_14;
        }

        var_7 = var_7 + var_1;
    }
}

beardone()
{
    var_0 = getdvarfloat( "scr_br_all_assassin_max_dist", 10000 );
    var_1 = bbeingelectrocuted();

    for ( var_2 = 0; var_2 < var_1.size; var_2++ )
    {
        var_3 = var_1[var_2].team;

        if ( isdefined( self._id_12686[var_3] ) )
            continue;

        for ( var_4 = 0; var_4 < var_1.size - 1; var_4++ )
        {
            if ( var_4 % 2 )
                var_5 = int( -0.5 * var_4 - 0.5 );
            else
                var_5 = int( 0.5 * var_4 + 1 );

            var_6 = _id_13038( var_2 + var_5, var_1.size );
            var_7 = var_1[var_6].team;

            if ( isdefined( self._id_12686[var_7] ) )
                continue;

            var_8 = var_1[var_6].pos;
            var_9 = var_1[var_2].pos;

            if ( distance( var_8, var_9 ) > var_0 )
                continue;

            var_10 = spawnstruct();
            var_10._id_1265F = var_7;
            var_10._id_12660 = var_7;
            self._id_12686[var_3] = var_10;
            var_11 = spawnstruct();
            var_11._id_1265F = var_3;
            var_11._id_12660 = var_3;
            self._id_12686[var_7] = var_11;
            break;
        }
    }
}

bearsred()
{
    var_0 = gettime();
    var_1 = [];

    foreach ( var_5, var_3 in level.teamdata )
    {
        if ( isdefined( self._id_12686[var_5] ) )
            continue;

        var_4 = self.respawn_players_into_plane[var_5];

        if ( isdefined( var_4 ) && var_0 < var_4 + self._id_11AC0 )
            continue;

        if ( !scripts\mp\gametypes\br_quest_util.gsc::isteamvalid( var_5, make_usb_model_usable( self.modifier ) ) )
            continue;

        var_1[var_1.size] = var_5;
    }

    return var_1;
}

bears( var_0 )
{
    var_0 waittill( "removed" );
    self.respawn_players_into_plane[var_0.hunterteam] = gettime();
    self notify( "update" );
}

being_kicked_from_inactivity()
{
    var_0 = getdvarint( "scr_br_all_assassin_update_delay", 10 );

    for (;;)
    {
        scripts\engine\utility::waittill_notify_or_timeout( "update", var_0 );

        if ( self.modifier == "_all_timed" )
        {
            begin_vo();
            continue;
        }

        begin_spectate();
    }
}

begin_vo()
{
    var_0 = [];

    foreach ( var_3, var_2 in self._id_12686 )
    {
        if ( !isdefined( level.questinfo.quests["assassination"].instances[var_3] ) )
            var_0[var_0.size] = var_3;
    }

    foreach ( var_3 in var_0 )
        self._id_12686[var_3] = undefined;

    beardone();
    battletracksowner();
}

begin_spectate()
{
    var_0 = [];

    foreach ( var_3, var_2 in self._id_12686 )
    {
        if ( !isdefined( level.questinfo.quests["assassination"].instances[var_3] ) )
        {
            if ( var_2._id_12660 == var_2._id_1265F )
                var_0[var_0.size] = var_3;
        }
    }

    foreach ( var_3 in var_0 )
        self._id_12686[var_3] = undefined;

    var_6 = bearsred();
    var_7 = var_6.size;
    var_0 = [];

    foreach ( var_3, var_2 in self._id_12686 )
    {
        if ( !scripts\mp\gametypes\br_quest_util.gsc::isteamvalid( var_3, make_usb_model_usable( self.modifier ) ) )
        {
            if ( var_7 > 0 )
            {
                var_7--;
                var_9 = var_6[var_7];
                self._id_12686[var_9] = spawnstruct();
                self._id_12686[var_9]._id_12660 = var_2._id_12660;
                self._id_12686[var_9]._id_1265F = var_2._id_1265F;
                self._id_12686[var_2._id_1265F]._id_12660 = var_9;
                self._id_12686[var_2._id_12660]._id_1265F = var_9;
            }
            else
            {
                self._id_12686[var_2._id_1265F]._id_12660 = var_2._id_12660;
                self._id_12686[var_2._id_12660]._id_1265F = var_2._id_1265F;
            }

            var_0[var_0.size] = var_3;
        }
    }

    foreach ( var_3 in var_0 )
        self._id_12686[var_3] = undefined;

    if ( var_7 >= 2 )
    {
        for ( var_12 = 0; var_12 < var_7; var_12++ )
        {
            var_3 = var_6[var_12];
            var_13 = _id_13038( var_12 - 1, var_7 );
            var_14 = _id_13038( var_12 + 1, var_7 );
            var_15 = var_6[var_13];
            var_16 = var_6[var_14];
            var_17 = spawnstruct();
            var_17._id_1265F = var_15;
            var_17._id_12660 = var_16;
            self._id_12686[var_3] = var_17;
        }
    }

    if ( self._id_12686.size < 2 )
        return;

    battletracksowner();
}

battletracksowner()
{
    foreach ( var_6, var_1 in self._id_12686 )
    {
        if ( isdefined( level.questinfo.quests["assassination"].instances[var_6] ) )
            continue;

        var_2 = var_6;
        var_3 = var_1._id_12660;
        var_4 = "all_" + var_2 + "_" + var_3;
        var_5 = monitor_player_near_truck( var_2, var_3, var_4, undefined, self.modifier );

        if ( isdefined( var_5 ) )
        {
            var_5 monitor_special_spawns();

            if ( self.modifier == "_all_timed" )
                var_5 thread being_hacked();

            thread bears( var_5 );
        }
    }
}

being_hacked()
{
    self endon( "removed" );
    var_0 = getdvarfloat( "scr_br_all_assassin_circle_start_update", 10 );
    var_1 = getdvarfloat( "scr_br_all_assassin_circle_end_update", 1.0 );

    for (;;)
    {
        aq_questthink_circleposition();
        determinetrackingcircleposition( self.targetplayer );
        var_2 = mine_caves_retreat();
        var_3 = var_0 - var_1;
        wait( var_3 * var_2 + var_1 );
    }
}

bearsetup( var_0, var_1 )
{
    return var_0._id_12176 <= var_1._id_12176;
}

bearwatch( var_0 )
{
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::getvalidplayersinarray( scripts\mp\utility\teams::getteamdata( var_0, "players" ) );

    foreach ( var_3 in var_1 )
    {
        if ( isalive( var_3 ) )
            var_3 kill( var_3.origin, var_3 );
    }

    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_0, "br_assassination_timer_expire_hunters_lose" );
    level thread scripts\mp\gametypes\br_public.gsc::cloudanimfx( "mission_ass_fail", var_0, 1 );
}

_id_13038( var_0, var_1 )
{
    return ( var_0 % var_1 + var_1 ) % var_1;
}

give_respawn_flare()
{
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "assassination" ).give_reward_based_on_task = 1;
}

give_operator_based_on_task()
{
    scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "assassination" ).give_periodic_jugg_pulses = 1;
}

display_fx_names_after_plane_spawns()
{
    return isdefined( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "assassination" ).give_reward_based_on_task ) && scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "assassination" ).give_reward_based_on_task;
}

display_dont_have_weapon_message()
{
    return isdefined( scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "assassination" ).give_periodic_jugg_pulses ) && scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "assassination" ).give_periodic_jugg_pulses;
}

mine_caves_retreat()
{
    var_0 = scripts\mp\gametypes\br_quest_util.gsc::getquestdata( "assassination" ).watch_for_heli_getting_killed_directly;
    var_1 = ( self.should_enter_combat_after_checking_gas_grenade - gettime() ) / 1000;
    var_2 = clamp( var_1 / var_0, 0.0, 1.0 );
    return var_2;
}

lowpopcheck()
{
    if ( self.modifier == "_all_timed" )
    {
        var_0 = getdvarfloat( "scr_br_all_assassin_circle_start_size", 3000.0 );
        var_1 = getdvarfloat( "scr_br_all_assassin_circle_end_size", 200.0 );
        var_2 = mine_caves_retreat();
        var_3 = var_0 - var_1;
        return var_3 * var_2 + var_1;
    }
    else
        return 2000;
}

lowpopallowtweaks()
{
    if ( self.modifier == "_all_timed" )
        return 0;
    else
        return 100;
}

lower_target_when_close()
{
    if ( self.modifier == "_all_timed" )
    {
        var_0 = lowpopcheck();
        return var_0 * 0.5;
    }
    else
        return 900;
}

keypadscriptableused_altbunker()
{
    var_0 = 0;
    var_1 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "overrideQuestSearchParams", "assassination" );

    if ( isdefined( var_1 ) )
        return var_1;

    var_2 = scripts\mp\utility\game::missions_clearinappropriaterewards();

    switch ( var_2 )
    {
        case "mini":
        case "risk":
        case "dmz":
            var_0 = 1;
            break;
    }

    return var_0;
}
