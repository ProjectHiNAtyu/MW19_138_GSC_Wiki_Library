// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "circle" );
    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "gulag" );
    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "oneLife" );
    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "waitLoadoutDone" );
    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "drogBagLoadout" );
    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "playerCountLandmarks" );
    scripts\mp\gametypes\br_gametypes.gsc::hostdamagepercentmedium( "tabletReplace" );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "spawnHandled", ::_id_122C5 );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "playerKilledSpawn", ::playerrespawn );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "playerWelcomeSplashes", ::vehicle_compass_deregisterinstance );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "infilSequence", ::half_size );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "skipInfilSequence", ::_id_120B2 );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "modifyPlayerDamage", ::modifyplayerdamage );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "playerHandleRedeploy", ::unuseweapon );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "playerDropPlunderOnDeath", ::playerdropplunderondeath );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "spawnInitialVehicles", ::spawninitialvehicles );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "onPlayerConnect", ::onplayerconnect );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "skipPrimaryWeaponDrop", ::_id_120B7 );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "skipLootPickupAnim", ::_id_120B4 );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "onPlayerKilled", ::onplayerkilled );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "activateKillstreakOnPurchase", ::all_obit_models );

    if ( istrue( game["switchedsides"] ) )
    {
        scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "onConnectSpawnPoint", ::stop_players_inside_death_or_disconnect_monitor );
        level._id_120B6 = 1;
    }

    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitsheli( "allowedEntities", [ "br", "br_payload" ] );
    level.cleanupswaploadoutflags.timetonextcheckpoint = getdvar( "scr_br_payload_path", "downtown2" );
    level.cleanupswaploadoutflags.do_heli_takeoff_vo = getdvarint( "scr_br_payload_checkpoint_time", 240 );
    level.cleanupswaploadoutflags.maxtime = getdvarint( "scr_br_payload_max_time", 300 );
    level.cleanupswaploadoutflags.dmztut_luicallback = getdvarint( "scr_br_payload_checkpoint_remain", 60 );
    level.cleanupswaploadoutflags._id_12D08 = getdvarfloat( "scr_br_payload_vehicle_mph", 6 );
    level.cleanupswaploadoutflags._id_12D09 = getdvarfloat( "scr_br_payload_vehicle_mph_slow", 1 );
    level.cleanupswaploadoutflags._id_12D06 = getdvarfloat( "scr_br_payload_vehicle_auto_mph", 12 );
    level.cleanupswaploadoutflags._id_12D07 = getdvarfloat( "scr_br_payload_vehicle_mph_fast", 8 );
    level.cleanupswaploadoutflags._id_12CF9 = getdvarfloat( "scr_br_payload_vehicle_back_mph", 2 );
    level.cleanupswaploadoutflags._id_12CFA = getdvarfloat( "scr_br_payload_vehicle_back_mph_slow", 1 );
    level.cleanupswaploadoutflags._id_122A4 = getdvarfloat( "scr_br_payload_spawn_dist_defend", 7500 );
    level.cleanupswaploadoutflags._id_122A3 = getdvarfloat( "scr_br_payload_spawn_dist_attack", 5500 );
    level.cleanupswaploadoutflags._id_122C8 = getdvarfloat( "scr_br_payload_spawn_height_defend", 1500 );
    level.cleanupswaploadoutflags._id_122C7 = getdvarfloat( "scr_br_payload_spawn_height_attack", 1000 );
    level.cleanupswaploadoutflags._id_122F0 = getdvarfloat( "scr_br_payload_spawn_radius_defend", 500 );
    level.cleanupswaploadoutflags._id_122EF = getdvarfloat( "scr_br_payload_spawn_radius_attack", 500 );
    level.cleanupswaploadoutflags.setarenaomnvarplayertype = getdvarint( "scr_br_payload_max_damage_collision", 25 );
    level.cleanupswaploadoutflags.timer_active = getdvarint( "scr_br_payload_econ", 1 );
    level.cleanupswaploadoutflags.watchminigunweapon = getdvarint( "scr_br_payload_radial_spawn", 1 );
    level.cleanupswaploadoutflags.movingplatform_playerunlink = getdvarint( "scr_br_payload_ground_spawn", 1 );
    level.cleanupswaploadoutflags.movingplatform_playerlink = getdvarint( "scr_br_payload_ground_spawn_max", 20 );
    level.cleanupswaploadoutflags._id_12388 = getdvarint( "scr_br_payload_squad_spawn", 0 );
    level.cleanupswaploadoutflags._id_1227B = getdvarint( "scr_br_payload_attacker_air", 0 );
    level.cleanupswaploadoutflags._id_1227C = getdvarint( "scr_br_payload_attacker_air_max", 0 );
    level.cleanupswaploadoutflags._id_1227E = getdvarint( "scr_br_payload_spawn_protect_air_time", 5 );
    level.get_players_in_mortar_range = getdvarint( "scr_br_payload_tacmap_zoom", 12000 );
    level.cleanupswaploadoutflags.breakgasmaskbr = getdvarint( "scr_br_payload_auto_kiosks", 1 );
    level.cleanupswaploadoutflags.do_hack_sequence = getdvarint( "scr_br_payload_checkpoint_models", 1 );
    level.cleanupswaploadoutflags.dmztut_endgamewithreward = getdvarint( "scr_br_payload_bunker_price", 5000 );
    level.cleanupswaploadoutflags.do_laser_panel_anim_sequence = getdvarint( "scr_br_payload_tower_price", 5000 );
    level.cleanupswaploadoutflags.headicon_range = getdvarint( "scr_br_payload_vehicles", 0 );
    level.cleanupswaploadoutflags._id_12306 = getdvarfloat( "scr_br_payload_spawn_vehicle_time", 10 );
    level.cleanupswaploadoutflags._id_12D9B = getdvarfloat( "scr_br_payload_vo_help", 20000 );
    level.cleanupswaploadoutflags._id_12DA7 = getdvarfloat( "scr_br_payload_vo_same", 20000 );
    level.cleanupswaploadoutflags._id_12D99 = getdvarfloat( "scr_br_payload_vo_help", 5000 );
    level.cleanupswaploadoutflags._id_12DA1 = getdvarfloat( "scr_br_payload_vo_next", 10000 );
    level.cleanupswaploadoutflags.binoculars_onstatelospendingenter = getdvarint( "scr_br_payload_all_paths", 1 );
    level.cleanupswaploadoutflags.convoy = getdvarint( "scr_br_payload_convoy", 1 );
    level.cleanupswaploadoutflags.extrascore4 = getdvarint( "scr_br_payload_convoy_dist", 750 );
    level.cleanupswaploadoutflags.extratimeincreasecount = level.cleanupswaploadoutflags.extrascore4 * level.cleanupswaploadoutflags.extrascore4;
    level.cleanupswaploadoutflags.getvehicleplayertrail = getdvarint( "scr_br_payload_disable_ascenders", 1 );
    var_0 = getdvarfloat( "scr_br_payload_vo_near_check", 1500 );
    level.cleanupswaploadoutflags._id_12DA0 = var_0 * var_0;
    var_1 = getdvarfloat( "scr_br_payload_vo_obs", 700 );
    level.cleanupswaploadoutflags._id_12DA2 = var_1 * var_1;
    level.cleanupswaploadoutflags.binoculars_processlosqueuehigh = getdvarint( "scr_br_payload_alt_checkpoints", 1 );
    level.cleanupswaploadoutflags.binoculars_setcurrentstate = getdvarint( "scr_br_payload_time_per_checkpoint", 120 );
    level.cleanupswaploadoutflags._id_1231B = getdvarint( "scr_br_spawn_zones", 1 );
    level.cleanupswaploadoutflags._id_12319 = getdvarint( "scr_br_spawn_zone_radius", 1700 );
    level.cleanupswaploadoutflags._id_12317 = getdvarint( "scr_br_spawn_zones_hide", 1 );
    level.cleanupswaploadoutflags._id_12318 = getdvarfloat( "scr_br_spawn_zones_outline_dur", 3 );
    level.cleanupswaploadoutflags.spawnzonewarningenabled = getdvarint( "scr_br_spawn_zone_warning", 0 );
    level.cleanupswaploadoutflags.play_hud_reminder_vo = getdvarint( "scr_br_in_bounds_trigger", 1 );
    level.cleanupswaploadoutflags._id_1294B = getdvarint( "scr_br_truck_armor_box", 1 );
    level.cleanupswaploadoutflags.isteamplacementsbmmmode = getdvarint( "scr_br_payload_force_tiebreaker", 0 );
    level.cleanupswaploadoutflags._id_11AA8 = getdvarint( "scr_br_payload_respawn_overview", 1 );
    level.cleanupswaploadoutflags._id_11AA9 = getdvarint( "scr_br_payload_respawn_overview_alt", 1 );
    level.cleanupswaploadoutflags._id_12A1A = getdvarint( "scr_br_payload_two_matches", 1 );
    level.vehiclecanopendoor = 11;
    level._id_127E1 = 1;
    level.isskydivestatedisabled = 1;
    level.checkforlaststandwipe = spawnstruct();
    level.checkforlaststandwipe.disabled = 0;
    level.checkforlaststandwipe.healthpool = getdvarint( "scr_br_alt_mode_payload_drop_max", -1 );
    level.checkforlaststandwipe.heatcounter = getdvarfloat( "scr_br_alt_mode_payload_drop_percent", 0.33 );

    if ( level.cleanupswaploadoutflags.breakgasmaskbr )
        scripts\mp\gametypes\br_gametypes.gsc::give_fists( "placedKiosks" );

    if ( level.mapname == "mp_br_mechanics" && level.cleanupswaploadoutflags.timetonextcheckpoint != "all" )
        level.cleanupswaploadoutflags.timetonextcheckpoint = "standard";

    level.claymore_crate_update_hint_logic_alt = 4;
    level.checkforammoquickdrop = 1;
    level.cleanupswaploadoutflags.paths = [];
    level.keycardlocs = [ "apc_russian", "atv", "big_bird", "cargo_truck", "cop_car", "hoopty", "hoopty_truck", "jeep", "large_transport", "light_tank", "little_bird", "little_bird_mg", "medium_transport", "pickup_truck", "tac_rover", "technical", "van", "loot_chopper" ];
    thread playerzombiedelayturnonfx();
}

playerzombiedelayturnonfx()
{
    waittillframeend;

    if ( !isdefined( game["switchedsides"] ) )
        game["switchedsides"] = 0;

    if ( game["switchedsides"] )
    {
        var_0 = game["attackers"];
        var_1 = game["defenders"];
        game["attackers"] = var_1;
        game["defenders"] = var_0;
    }

    scripts\mp\utility\dvars::setoverridewatchdvar( "roundlimit", 2 );
    level.roundlimit = scripts\mp\utility\dvars::getwatcheddvar( "roundlimit" );
    scripts\mp\utility\game::registerroundswitchdvar( scripts\mp\utility\game::getgametype(), 1, 0, 1 );
    scripts\mp\utility\dvars::setoverridewatchdvar( "roundswitch", 1 );
    level.roundswitch = scripts\mp\utility\dvars::getwatcheddvar( "roundswitch" );
    level.wait_for_player_gulag_respawn = ::comparescore;
    level.shouldmodelognotify = ::codenumber;
    level.checkpoint_get_item = ::combined_counters_groups;
    level._id_11B9C = ::convoy_anim_sequence;
    level.ontimelimit = ::ontimelimit;
    level.shouldrecorddamagestats = ::updatedroprelics;
    level.shouldreflect = ::updatedroprelicsfunc;
    level._id_12728 = ::timelimitclock;
    level.suncascademult1 = ::suncascademult1;
    level.shouldblockdamage = ::shouldblockdamage;

    if ( level.cleanupswaploadoutflags.timer_active )
        level.shouldplayerovertimedialog = ::timevotrigger;

    scripts\mp\flags::gameflaginit( "infil_complete", 0 );
    level.clean_up_rocket = 1;
    level.roundenddelay = 5;
    level.branalytics_playercount = 1;
    level._id_120BB = 1;
    level._id_120A9 = 1;
    level.music_timer_10seconds = getdvarfloat( "scr_br_payload_gunner_dmg_reduction", 0.4 );
    level.toggle_safehouse_settings = "cargo_truck_mg";
    level.toggle_trap = "mkilo_physics_mg_payload";
    level.cleanupswaploadoutflags._id_12D25 = 250;
    level.cleanupswaploadoutflags._id_12D24 = 200;
    level.cleanupswaploadoutflags._id_12D0D = ( 0, 0, 200 );
    level.cleanupswaploadoutflags.tire_repair_start_enter_foley_sfx = getdvarint( "scr_br_payload_quests", 1 );
    level.cleanupswaploadoutflags.toggle_ai_settings = getdvarint( "scr_br_payload_reset_quest_tracking", 0 );
    level.cleanupswaploadoutflags.tmtyl_vip_interactions = getdvarint( "scr_br_payload_quests_num_squads", 1 );
    level.cleanupswaploadoutflags.tmtyl_vipobjectives = getdvarint( "scr_br_payload_quests_tablets", 1 );
    level.cleanupswaploadoutflags.tmtylsquadafterspawnfunc = getdvarint( "scr_br_payload_versus_tablets", 1 );
    level.cleanupswaploadoutflags.tire_repair_start_exit_foley_sfx = getdvarint( "scr_br_payload_quests_give_att", 1 );
    level.cleanupswaploadoutflags.tmtyl_bomber_squadafterspawnfunc = getdvarint( "scr_br_payload_quests_give_def", 0 );
    level.cleanupswaploadoutflags.toggle_in_use = getdvarint( "scr_br_payload_speed_reward_time", 45 );
    level.cleanupswaploadoutflags.toggleusbstickinhand = getdvarint( "scr_br_payload_xp_checkpoint", 2000 );
    scripts\mp\rank::tank_eastturret( "kill", 100 );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "vehicle_spawn", "gameModeSupportsRespawn", ::vehicle_spawn_mp_gamemodesupportsrespawn );
    level.vehicle.spawn._id_11AA1 = getdvarint( "scr_br_payload_vehicle_respawn", 30 );
    scripts\cp_mp\vehicles\vehicle_damage::_id_12C55( level.toggle_safehouse_settings, ::_id_12D1A );
    var_2 = scripts\cp_mp\vehicles\vehicle::vehicle_getleveldataforvehicle( "cargo_truck_mg" );
    var_2._id_129DB = "tur_gun_payload_truck_mp";
    scripts\cp_mp\vehicles\vehicle_interact::_id_12C7B( level.toggle_safehouse_settings, "single", [ "gunner" ] );
    var_3 = "driver";
    var_4 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforseat( level.toggle_safehouse_settings, var_3 );
    var_4.seatswitcharray = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_generateseatswitcharray( var_3, [ var_3 ] );
    var_3 = "gunner";
    var_4 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforseat( level.toggle_safehouse_settings, var_3 );
    var_4.exitids = [ "back", "back_left", "back_right", "front", "side_right" ];
    var_4.seatswitcharray = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_generateseatswitcharray( var_3, [ var_3 ] );
    var_4._id_129D5 = getcompleteweaponname( "tur_gun_payload_truck_mp" );
    scripts\cp_mp\vehicles\vehicle_interact::_id_12C85( "upgrade", ::_id_12C6B, ::_id_12C8C, ::_id_12C6B, ::_id_12C6B );
    scripts\cp_mp\vehicles\vehicle_interact::_id_12C85( "copyofupgrade", ::_id_12C6B, ::_id_12C8C, ::_id_12C6B, ::_id_12C6B );
    scripts\cp_mp\vehicles\vehicle_interact::_id_12C7B( level.toggle_safehouse_settings, "upgrade", [ "tag_screen_left", 0, ::_id_12C6A ] );
    scripts\cp_mp\vehicles\vehicle_interact::_id_12C7B( level.toggle_safehouse_settings, "copyofupgrade", [ "tag_screen_right", 0, ::_id_12C6A ] );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "airdrop", "specialCase_canUseCrate", ::combined_alias );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "killstreak", "createCustomStreakData", ::fly_over_start );
    level.endac130infilanimsinternal = undefined;
    playerupdatehudstate();
    playerwelcomesplashes();
    playerstreamhintdroptoground();
    playerswithoutdismemberment();
    playersetkeypadstateindex();
    playerzombiepowers();
    playerswapteam();
    playing_bomb_counter_beep();
    players_camera_fly_to_start_pos();
    playersetattractionlocationindex();
    playerstreamhintlocation();
    playerzombiesetuphud();
    level thread playerzombierespawn();
    playerzombiegetrespawnbyteam();
    level.teamdata[game["attackers"]]["respawnDelay"] = getdvarint( "scr_br_payload_spawn_delay_attack", 0 );
    level.teamdata[game["defenders"]]["respawnDelay"] = getdvarint( "scr_br_payload_spawn_delay_defend", 15 );
    thread _id_12F8F( game["attackers"] );
    thread _id_12F8F( game["defenders"] );
    thread timeoutplunderextractionsites();

    if ( istrue( level.cleanupswaploadoutflags.tire_repair_start_enter_foley_sfx ) )
    {
        scripts\mp\gametypes\br_capshoot_quest.gsc::init();
        thread tire_repair_start_air_stop_sfx();
    }

    thread timeoutvfxname();
    thread tire_repair_start_air_start_sfx();
    thread timeout_consec_kills();
    level.get_connected_nodes_targetname_array = 0;
    level.get_comp_dist_for_info_loop = 0;
}

_id_12C8C( var_0, var_1, var_2, var_3 )
{
    var_1.disabled = 1;
}

tire_repair_start_air_start_sfx()
{
    level endon( "game_ended" );
    scripts\mp\flags::gameflagwait( "prematch_fade_done" );
    thread _id_11F91( game["attackers"] );
    thread _id_11F91( game["defenders"] );
    scripts\mp\flags::gameflagwait( "infil_complete" );

    if ( level.cleanupswaploadoutflags.binoculars_processlosqueuehigh && !isdefined( level.cleanupswaploadoutflags.do_convoy_moving_vo ) && !level.cleanupswaploadoutflags._id_12A1A )
    {
        level.cleanupswaploadoutflags.do_convoy_moving_vo = [];
        level.cleanupswaploadoutflags.do_convoy_moving_vo[game["attackers"]] = fnlookforvehicles( &"BR_PAYLOAD/NUM_CHECKPOINTS", 0, "RIGHT", "CENTER", 0, -160, undefined, game["attackers"] );
        level.cleanupswaploadoutflags.do_convoy_moving_vo[game["defenders"]] = fnlookforvehicles( &"BR_PAYLOAD/NUM_CHECKPOINTS_ENEMY", 0, "RIGHT", "CENTER", 0, -160, undefined, game["defenders"] );

        if ( game["switchedsides"] )
        {
            var_0 = losqueuehighindex();
            level.cleanupswaploadoutflags.do_custom_evade_start = fnlookforvehicles( &"BR_PAYLOAD/NUM_CHECKPOINTS_OF", var_0, "LEFT", "CENTER", 4, -160 );
        }
        else
        {
            var_1 = 0;

            foreach ( var_3 in level.cleanupswaploadoutflags.paths )
                var_1 = var_1 + var_3.do_ascender_entrance.size;

            level.cleanupswaploadoutflags.do_custom_evade_start = fnlookforvehicles( &"BR_PAYLOAD/NUM_CHECKPOINTS_OF", var_1, "LEFT", "CENTER", 4, -160 );
        }
    }
}

_id_11F91( var_0 )
{
    var_1 = scripts\mp\utility\teams::getteamdata( var_0, "players" );

    foreach ( var_3 in var_1 )
        scripts\mp\utility\outline::outlineenableforteam( var_3, var_0, "outline_depth_payload", "level_script" );
}

shouldblockdamage()
{
    setomnvar( "ui_current_round", 1 );
    setomnvarforallclients( "post_game_state", 2 );
    wait 10;

    foreach ( var_1 in level.players )
    {
        var_1 setclientomnvar( "ui_br_extended_load_screen", 1 );
        var_1 setsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 2 );
    }
}

onplayerconnect( var_0 )
{
    var_0 waittill( "spawned_player" );

    if ( var_0.team == game["attackers"] )
        var_0 _id_11ECD( 0 );
    else
        var_0 _id_11ECD( 1 );

    thread _id_11F91( game["attackers"] );
    thread _id_11F91( game["defenders"] );
    var_0.enemy_sentry_debug = [];
}

onplayerspawned()
{
    level endon( "prematch_done" );

    for (;;)
    {
        is_moving_platform_train( self );
        self waittill( "spawned_player" );
    }
}

onplayerkilled( var_0 )
{
    var_1 = var_0.victim;
    var_2 = var_0.attacker;

    if ( isdefined( var_2.vehicle ) && isdefined( var_2.vehicle.occupants ) && isdefined( var_2.vehicle.occupants["gunner"] ) )
    {
        if ( var_2 == var_2.vehicle.occupants["gunner"] )
        {
            var_2 thread scripts\mp\rank::giverankxp( "br_payload_kill_as_gunner", 50 );
            var_2 thread scripts\mp\rank::scoreeventpopup( "br_payload_kill_as_gunner" );
            var_2 thread scripts\mp\gametypes\br_analytics.gsc::chopperexfil_sitting_wind( 50, "br_payload_kill_as_gunner" );
        }
    }

    if ( isdefined( var_1.vehicle ) && isdefined( var_1.vehicle.occupants ) && isdefined( var_1.vehicle.occupants["gunner"] ) )
    {
        if ( var_1 == var_1.vehicle.occupants["gunner"] )
        {
            var_2 thread scripts\mp\rank::giverankxp( "br_payload_killed_gunner", 100 );
            var_2 thread scripts\mp\rank::scoreeventpopup( "br_payload_killed_gunner" );
            var_2 thread scripts\mp\gametypes\br_analytics.gsc::chopperexfil_sitting_wind( 100, "br_payload_killed_gunner" );
        }
    }
}

all_obit_models( var_0 )
{
    switch ( var_0 )
    {
        case "juggernaut":
            return 1;
        default:
            return undefined;
    }
}

playerzombierespawn()
{
    level endon( "game_ended" );
    scripts\mp\flags::gameflagwait( "infil_complete" );

    foreach ( var_1 in level.players )
        var_1.obj_room_fire_04 = 0;

    for (;;)
    {
        foreach ( var_4 in level.cleanupswaploadoutflags.paths )
        {
            if ( istrue( var_4.exfil_spawnfunc ) )
                continue;

            if ( !isdefined( var_4.init_gasmask ) )
                continue;

            foreach ( var_6 in var_4.init_gasmask.touchlist )
            {
                foreach ( var_8 in var_6 )
                {
                    foreach ( var_1 in scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_8.player.team, var_8.player.squadindex ) )
                    {
                        if ( !isdefined( var_1.toggle_player_pos_memory ) )
                            var_1.toggle_player_pos_memory = 0;

                        var_1.toggle_player_pos_memory = var_1.toggle_player_pos_memory + 5;

                        if ( var_1.toggle_player_pos_memory >= 20 )
                        {
                            if ( !var_1.obj_room_fire_04 )
                                var_1 thread scripts\mp\rank::scoreeventpopup( "br_payload_squad_on_payload" );

                            var_1.obj_room_fire_04 = 1;
                            var_10 = 10 * var_1.toggle_player_pos_memory;
                            var_1 thread scripts\mp\rank::giverankxp( "br_payload_squad_on_payload", var_10 );
                            var_1 thread scripts\mp\gametypes\br_analytics.gsc::chopperexfil_sitting_wind( var_10, "br_payload_squad_on_payload" );
                            var_1 thread scripts\mp\gametypes\br.gsc::monitoraveragevelocities( min( 40, var_1.toggle_player_pos_memory ) * 1000 );
                            var_1.toggle_player_pos_memory = 0;
                        }
                    }
                }
            }
        }

        foreach ( var_1 in level.players )
            var_1.obj_room_fire_04 = 0;

        wait 5;
    }
}

_id_12C6A( var_0, var_1 )
{

}

_id_12C6B( var_0, var_1, var_2, var_3 )
{

}

vehicle_spawn_mp_gamemodesupportsrespawn()
{
    return 1;
}

vehicle_compass_deregisterinstance( var_0 )
{
    self endon( "disconnect" );
    self waittill( "spawned_player" );
    wait 1;

    if ( !istrue( game["liveLobbyCompleted"] ) && !istrue( game["switchedsides"] ) )
        scripts\mp\hud_message::showsplash( "br_prematch_welcome" );
}

_id_122C5( var_0 )
{
    if ( istrue( game["switchedsides"] ) && isdefined( self.playerstartjailsetcontrols ) )
        return 1;

    return istrue( var_0.br_infilstarted ) && scripts\mp\flags::gameflag( "prematch_done" );
}

half_size()
{
    if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "oneLife" ) )
    {
        level.disablespawning = 1;
        setdynamicdvar( "scr_" + scripts\mp\utility\game::getgametype() + "_numLives", 1 );
    }

    if ( !istrue( game["switchedsides"] ) )
        scripts\mp\deathicons::_id_11A16();
    else
        _id_12E8E();

    _id_12291();

    for ( var_0 = 0; var_0 < level.players.size; var_0++ )
    {
        var_1 = level.players[var_0];

        if ( !isdefined( var_1 ) )
            continue;

        var_1.cameraent = level.cleanupswaploadoutflags.debugtype[var_0];

        if ( !isalive( var_1 ) && !istrue( game["switchedsides"] ) )
            var_1 scripts\mp\playerlogic::spawnplayer( 0 );

        if ( istrue( var_1.checkpointstruct ) )
            scripts\mp\gametypes\br.gsc::_id_12A58( var_1 );

        var_1 setclientomnvar( "ui_br_infil_started", 1 );
        var_1 setclientomnvar( "ui_br_infiled", 1 );
        var_1.br_infilstarted = 1;
        var_1 scripts\mp\gametypes\br_gulag.gsc::gulagfadetoblack();
        var_1 thread unset_relic_explodedmg();
    }

    wait 2.0;
    level.cleanupswaploadoutflags._id_12532 = 0;

    foreach ( var_1 in level.players )
    {
        if ( !isdefined( var_1 ) )
            continue;

        var_1 thread unset_relic_dogtags();
        var_1 thread update_objective_setmlgbackground();
    }

    scripts\mp\flags::gameflagset( "prematch_fade_done" );
    _id_12E8F( 10 );

    foreach ( var_1 in level.players )
    {
        if ( isdefined( var_1 ) )
            var_1 thread unset_relic_doomslayer();
    }

    wait 6.66667;
    waitframe();

    foreach ( var_1 in level.players )
        var_1 unset_relic_doubletap();

    getc130knownsafeheight();
    scripts\mp\flags::gameflagset( "infil_complete" );
}

_id_12E8E()
{
    var_0 = gettime() + 10000;

    while ( gettime() < var_0 && getactiveclientcount() != level.players.size )
        waitframe();
}

_id_120B2()
{
    scripts\mp\flags::gameflagset( "infil_complete" );
}

_id_12291()
{
    var_0 = 8;
    level.cleanupswaploadoutflags.debugtype = [];

    for ( var_1 = 0; var_1 < level.players.size; var_1++ )
    {
        var_2 = spawn( "script_model", ( 0, 0, 0 ) );
        var_2 setmodel( "generic_prop_x3" );
        level.cleanupswaploadoutflags.debugtype[level.cleanupswaploadoutflags.debugtype.size] = var_2;

        if ( ( var_1 + 1 ) % var_0 == 0 )
            waitframe();
    }
}

getc130knownsafeheight()
{
    foreach ( var_1 in level.cleanupswaploadoutflags.debugtype )
        var_1 delete();

    level.cleanupswaploadoutflags.debugtype = undefined;
}

unset_relic_explodedmg()
{
    var_0 = minshotstostage2acc( self.team, self.squadindex );
    var_1 = level.cleanupswaploadoutflags.paths[var_0];

    if ( !isdefined( self._id_122EA ) )
    {
        useweaponpickups( var_1 );
        self._id_122EA = unset_relic_squadlink( var_1 );
    }

    self.cameraent.origin = self._id_122EA.origin;
    self.cameraent.angles = unset_relic_rocket_kill_ammo( var_1, self.cameraent.origin );
    var_2 = unset_relic_shieldsonly();
    self.cameraent scriptmodelplayanim( var_2, "spawn_camera_anim" );
    self.cameraent scriptmodelpauseanim( 1 );
    scripts\mp\gametypes\br_gulag.gsc::updatex1stashhud( self._id_122EA );
}

unset_relic_rocket_kill_ammo( var_0, var_1 )
{
    if ( self.team == game["attackers"] )
        var_2 = var_0.nodes[var_0.nodes.size - 1].origin - var_1;
    else
        var_2 = var_0.nodes[0].origin - var_1;

    var_3 = vectortoangles( var_2 );
    return ( 0, var_3[1], 0 );
}

unset_relic_shieldsonly()
{
    if ( self.team == game["attackers"] )
        return "iw8_br_payload_intro_camera_swoop_attackers";
    else
        return "iw8_br_payload_intro_camera_swoop_defenders";
}

minshotstostage2acc( var_0, var_1 )
{
    if ( isdefined( level.squaddata[var_0][var_1].playerstarttimetracking ) )
        return level.squaddata[var_0][var_1].playerstarttimetracking;

    if ( !isdefined( level.teamdata[var_0]["nextSpawnIndex"] ) )
    {
        var_2 = make_pilot_invincible( var_0 );

        if ( isdefined( level.teamdata[var_2]["nextSpawnIndex"] ) )
            level.teamdata[var_0]["nextSpawnIndex"] = level.teamdata[var_2]["nextSpawnIndex"];
        else
            level.teamdata[var_0]["nextSpawnIndex"] = randomint( level.cleanupswaploadoutflags.paths.size );
    }

    level.squaddata[var_0][var_1].playerstarttimetracking = level.teamdata[var_0]["nextSpawnIndex"];
    level.teamdata[var_0]["nextSpawnIndex"]++;

    if ( level.teamdata[var_0]["nextSpawnIndex"] >= level.cleanupswaploadoutflags.paths.size )
        level.teamdata[var_0]["nextSpawnIndex"] = 0;

    return level.squaddata[var_0][var_1].playerstarttimetracking;
}

unset_relic_doomslayer()
{
    self endon( "disconnect" );
    var_0 = 4;
    var_1 = 1.5;
    scripts\mp\gametypes\br_gulag.gsc::gulagfadefromblack();
    self clearsoundsubmix( "mp_br_lobby_fade", 1.5 );
    self clearsoundsubmix( "deaths_door_mp", 1 );
    self clearpredictedstreampos();
    self setclientomnvar( "ui_br_transition_type", 0 );
    self setclientomnvar( "ui_br_extended_load_screen", 0 );

    foreach ( var_3 in level.players )
        var_3 clearsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 1 );

    self cameralinkto( self.cameraent, "j_prop_1", 1, 1 );
    self.cameraent scriptmodelpauseanim( 0 );
    thread _id_11B9F();
    wait 0.5;
    scripts\mp\gametypes\br_public.gsc::cloud_cover( "payload_welcome", self );

    if ( self.team == game["defenders"] )
    {
        scripts\mp\hud_message::showsplash( "br_payload_welcome_defenders" );
        scripts\mp\gametypes\br_public.gsc::cloud_cover( "defend_intro1", self );
    }
    else
    {
        scripts\mp\hud_message::showsplash( "br_payload_welcome_attackers" );
        scripts\mp\gametypes\br_public.gsc::cloud_cover( "attack_intro1", self );
    }

    wait( var_0 );
    var_5 = angleclamp180( angleclamp180( self.angles[1] ) - angleclamp180( self.cameraent.angles[1] ) );
    self.cameraent rotateyaw( var_5, var_1, 0.1, 0.1 );
}

_id_11B9F()
{
    setmusicstate( "br_payload_round_start" );
}

unset_relic_dogtags()
{
    self endon( "disconnect" );
    scripts\mp\gametypes\br_public.gsc::usb_right();
    self.forcespawnorigin = self._id_122EA.origin;
    self.forcespawnangles = self._id_122EA.angles;
    self._id_11AA7 = 1;
    self.plotarmor = 1;
    scripts\mp\playerlogic::spawnplayer( 0 );

    if ( istrue( self.checkpointstruct ) )
        scripts\mp\gametypes\br.gsc::_id_12A58( self );

    waitframe();
    self._id_122EA = undefined;
    self.plotarmor = undefined;
    self._id_11AA7 = undefined;
    self.playerstartjailsetcontrols = undefined;
    self freezecontrols( 1 );
    self playerhide();
    scripts\mp\gametypes\br_public.gsc::vehicle_collision_updateinstanceend();
    level.cleanupswaploadoutflags._id_12532++;
}

unset_relic_doubletap()
{
    self cameraunlink();
    self freezecontrols( 0 );
    self playershow();

    if ( self.team == game["attackers"] && level.cleanupswaploadoutflags._id_1227C > -1 )
        thread unreachable_function();

    unset_relic_dfa();
}

_id_12E8F( var_0 )
{
    var_1 = gettime() + var_0 * 1000;

    while ( gettime() < var_1 || level.cleanupswaploadoutflags._id_12532 < level.players.size )
        waitframe();
}

_id_12305( var_0 )
{
    _id_11F57();

    foreach ( var_2 in level.cleanupswaploadoutflags.paths )
    {
        _id_122DC( var_2, game["attackers"], var_0 );

        if ( level.cleanupswaploadoutflags.convoy )
            _id_122DD( var_2, game["attackers"], var_0 );
    }

    fluctuatevalues( game["attackers"] );
    fluctuatevalues( game["defenders"] );
    thread _id_127DF();
}

_id_122DC( var_0, var_1, var_2 )
{
    var_3 = ( 0, 0, 0 );
    var_4 = var_0;
    var_5 = undefined;
    var_6 = 0;

    if ( level.cleanupswaploadoutflags.convoy )
        var_6 = 1;

    if ( isdefined( var_0.nodes ) && isdefined( var_0.nodes[var_6] ) && isdefined( var_0.nodes[var_6 + 1] ) )
    {
        var_4 = var_0.nodes[var_6];
        var_5 = var_0.nodes[var_6 + 1];
        var_3 = vectortoangles( var_5.origin - var_4.origin );
    }
    else if ( isdefined( var_0.target ) )
    {
        if ( level.cleanupswaploadoutflags.convoy )
            var_4 = scripts\engine\utility::getstruct( var_0.target, "targetname" );
        else
            var_4 = var_0;

        if ( isdefined( var_4 ) && isdefined( var_4.target ) )
        {
            var_5 = scripts\engine\utility::getstruct( var_4.target, "targetname" );
            var_3 = vectortoangles( var_5.origin - var_4.origin );
        }
    }

    var_7 = spawnstruct();
    var_7.origin = var_4.origin;
    var_7.angles = var_3;
    var_7.spawntype = "GAME_MODE";
    var_7.spawnmethod = "place_at_position_unsafe";
    var_7.team = var_1;
    var_7.isgroundwarsiege = ::_id_12D05;
    var_7.vehicletype = level.toggle_trap;
    var_7.modelname = "veh8_mil_lnd_mkilo23_payload";
    var_7.turretmodel = "veh8_mil_lnd_mkilo23_turret_payload";
    var_8 = spawnstruct();
    var_9 = scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( level.toggle_safehouse_settings, var_7, var_8 );
    var_9 forcenetfieldhighlod( 1 );
    var_9 _meth_87C0( 1 );

    foreach ( var_11 in var_9.turrets )
        var_11 setscriptablepartstate( "barrel", "show" );

    if ( istrue( var_2 ) && level.cleanupswaploadoutflags._id_1294B )
        _id_12283( var_9 );

    if ( isdefined( var_5 ) )
    {
        var_0.vehicle = var_9;
        var_9.path = var_0;
    }

    var_9 _id_12D1E( var_0 );

    if ( isdefined( var_5 ) )
        var_9 thread _id_12CFB( var_0 );

    return var_9;
}

_id_12283( var_0 )
{
    var_1 = ( -158, -43, 67 );
    var_2 = ( 0, 0, 0 );
    var_3 = 80;
    var_4 = "ui_mp_br_loot_icon_health_armor_box";
    var_5 = &"EQUIPMENT_HINTS/ARMOR_BOX_USE";
    var_6 = "equip_armorBox";
    var_7 = spawn( "script_model", var_0.origin );
    var_7 setmodel( "offhand_wm_supportbox_armor_br" );
    var_7 linkto( var_0, "tag_origin", var_1, var_2 );
    var_7 setscriptablepartstate( "beacon", "active", 0 );
    var_7 setscriptablepartstate( "anims", "openIdle", 0 );
    var_7._id_12A47 = 1;
    var_7.team = game["attackers"];
    var_7 scripts\mp\equipment\support_box::supportbox_addheadicon( var_4 );
    var_7 thread scripts\mp\equipment\support_box::supportbox_makeusable( var_6, var_5 );
    var_7 setuserange( var_3 );
    var_7 setusefov( 90 );
    var_7 notsolid();
    setheadiconsnaptoedges( var_7.occupied_rpg_trig, var_3 );
    setheadiconsnaptoedges( var_7.oceanrock, var_3 );
}

_id_12CFE()
{
    level endon( "game_ended" );
    self notify( "vehicleCleanupLoot" );
    self endon( "vehicleCleanupLoot" );
    self endon( "pathComplete" );
    self endon( "death" );

    for (;;)
    {
        var_0 = canceljoins( undefined, undefined, self.origin, level.cleanupswaploadoutflags._id_12D25 );

        foreach ( var_2 in var_0 )
        {
            if ( issubstr( var_2.type, "_weapon_" ) )
                var_2 scripts\mp\gametypes\br_pickups.gsc::getcoremapdropzones();
        }

        waitframe();
    }
}

_id_120B7( var_0 )
{
    var_1 = self;

    foreach ( var_3 in level.cleanupswaploadoutflags.paths )
    {
        if ( isdefined( var_3.vehicle ) && selfrevivebuttonpresscleanup( var_3.vehicle, var_1.origin ) )
            return 1;

        foreach ( var_5 in var_3.started_breach_process )
        {
            if ( isdefined( var_5 ) && select_woods_two_spawners( var_5, var_1.origin ) )
                return 1;
        }
    }

    return 0;
}

selfrevivebuttonpresscleanup( var_0, var_1 )
{
    var_2 = level.cleanupswaploadoutflags._id_12D25 * level.cleanupswaploadoutflags._id_12D25;
    var_3 = distance2dsquared( var_1, var_0.origin );
    return var_3 < var_2;
}

select_woods_two_spawners( var_0, var_1 )
{
    var_2 = 10000;
    var_3 = distance2dsquared( self.origin, var_0.origin );
    return var_3 < var_2;
}

_id_120B4( var_0 )
{
    foreach ( var_2 in level.cleanupswaploadoutflags.paths )
    {
        if ( isdefined( var_2.vehicle ) && selfrevivebuttonpresscleanup( var_2.vehicle, var_0.origin ) )
            return 1;

        foreach ( var_4 in var_2.started_breach_process )
        {
            if ( select_woods_two_spawners( var_4, var_0.origin ) )
                return 1;
        }
    }

    return 0;
}

_id_122DD( var_0, var_1, var_2 )
{
    var_3 = ( 0, 0, 0 );
    var_4 = undefined;

    if ( isdefined( var_0.nodes ) && isdefined( var_0.nodes[1] ) )
    {
        var_4 = var_0.nodes[1];
        var_3 = vectortoangles( var_4.origin - var_0.origin );
    }

    var_5 = spawnstruct();
    var_5.origin = var_0.origin;
    var_5.angles = var_3;
    var_5.spawntype = "GAME_MODE";
    var_5.spawnmethod = "place_at_position_unsafe";
    var_5.team = var_1;
    var_5.isgroundwarsiege = ::_id_12D05;
    var_5.vehicletype = level.toggle_trap;
    var_5.modelname = "veh8_mil_lnd_mkilo23_payload";
    var_5.turretmodel = "veh8_mil_lnd_mkilo23_turret_payload";
    var_6 = spawnstruct();
    var_7 = scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( level.toggle_safehouse_settings, var_5, var_6 );
    var_7 _meth_87C0( 1 );

    foreach ( var_9 in var_7.turrets )
        var_9 setscriptablepartstate( "barrel", "show" );

    if ( istrue( var_2 ) )
    {
        var_7 _id_1294A( var_0.train_attach_useable_ammorestocklocation, 0 );

        if ( level.cleanupswaploadoutflags._id_1294B )
            _id_12283( var_7 );
    }

    if ( isdefined( var_4 ) )
    {
        var_0.extraweapons = var_7;
        var_7.path = var_0;
    }

    if ( level.toggle_safehouse_settings == "cargo_truck_mg" )
    {
        var_7 setscriptablepartstate( "upgrade", "vehicle_unusable" );
        var_7 setscriptablepartstate( "copyofupgrade", "vehicle_unusable" );
    }

    var_7.propchange = 1;

    if ( isdefined( var_4 ) )
        var_7 thread _id_12CFF( var_0 );

    return var_7;
}

_id_12D05( var_0, var_1 )
{

}

_id_12D1A( var_0 )
{
    return !isdefined( self.path );
}

_id_12D1E( var_0 )
{
    if ( !isdefined( var_0.trigger ) )
        var_0.trigger = spawn( "trigger_radius", self.origin, 0, level.cleanupswaploadoutflags._id_12D25, level.cleanupswaploadoutflags._id_12D24 );

    if ( !istrue( var_0.trigger.safefromnuke ) )
    {
        var_0.trigger enablelinkto();
        var_0.trigger.safefromnuke = 1;
    }

    var_0.trigger linkto( self, "tag_origin", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    var_0.trigger.binoculars_hidetargetmarker = 1;

    if ( !isdefined( var_0.init_gasmask ) )
        var_0.init_gasmask = scripts\mp\gameobjects::createuseobject( self.team, var_0.trigger, [], level.cleanupswaploadoutflags._id_12D0D );

    var_0.init_gasmask.nousebar = 1;
    var_0.init_gasmask scripts\mp\gameobjects::allowuse( "any" );
    var_0.init_gasmask scripts\mp\gameobjects::setvisibleteam( "any" );
    var_0.init_gasmask scripts\mp\gameobjects::pinobjiconontriggertouch();
    var_0.init_gasmask.iconname = self.path.iconname;
    var_0.init_gasmask scripts\mp\gameobjects::setownerteam( self.team );
    var_0.init_gasmask scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_escort_neutral", "waypoint_halt_neutral" );
    _func_428( var_0.init_gasmask.objidnum, 1 );
    scripts\mp\objidpoolmanager::update_objective_onentity( var_0.init_gasmask.objidnum, self );
    scripts\mp\objidpoolmanager::update_objective_setzoffset( var_0.init_gasmask.objidnum, var_0.init_gasmask.offset3d[2] );
    scripts\mp\objidpoolmanager::objective_set_play_intro( var_0.init_gasmask.objidnum, 0 );

    if ( level.toggle_safehouse_settings == "cargo_truck_mg" )
    {
        self setscriptablepartstate( "upgrade", "vehicle_unusable" );
        self setscriptablepartstate( "copyofupgrade", "vehicle_unusable" );
    }

    self.init_gasmask = var_0.init_gasmask;
}

make_pilot_invincible( var_0 )
{
    if ( var_0 == "axis" )
        return "allies";
    else
        return "axis";
}

_id_12D13()
{
    level endon( "game_ended" );
    self notify( "vehicleMoveUpdate" );
    self endon( "vehicleMoveUpdate" );
    self endon( "pathComplete" );
    self endon( "death" );
    level endon( "sudden_death_started" );
    waittillframeend;
    var_0 = getdvarint( "scr_br_payload_vehicle_pay_time_tick", 6000 );
    var_1 = getdvarint( "scr_br_payload_vehicle_pay_scale", 3 );
    var_2 = getdvarint( "scr_br_payload_vehicle_defender_pay_scale", 5 );
    var_3 = gettime() + var_0;
    var_4 = self.path;
    var_5 = var_4.extraweapons;
    _id_12D0C( var_5 );

    for (;;)
    {
        var_6 = _id_12D0A( self.team );
        var_7 = _id_12D0A( make_pilot_invincible( self.team ) );
        _id_12D29( var_6, var_7 );
        _id_12D28();

        if ( var_3 < gettime() )
        {
            var_3 = gettime() + var_0;
            toggle_wind( var_6, var_7, var_1, var_2 );
        }

        var_8 = undefined;

        if ( istrue( level.cleanupswaploadoutflags.toggle_fx_trap ) )
            var_9 = level.cleanupswaploadoutflags._id_12D07;
        else
            var_9 = level.cleanupswaploadoutflags._id_12D08;

        var_10 = var_9;
        var_11 = level.cleanupswaploadoutflags._id_12CF9;

        if ( isdefined( var_5 ) )
        {
            var_12 = distance2dsquared( self.origin, var_5.origin );

            if ( var_12 < level.cleanupswaploadoutflags.extratimeincreasecount )
            {
                var_10 = level.cleanupswaploadoutflags._id_12D09;
                var_11 = level.cleanupswaploadoutflags._id_12CFA;
            }
        }

        if ( !var_6 && var_7 && !self.br_circlecenters )
        {
            self vehicle_setspeed( var_11 );
            self.veh_transmission = "reverse";

            if ( isdefined( var_5 ) )
            {
                if ( !istrue( var_5.br_circleradiizero ) )
                {
                    var_5 vehicle_setspeed( level.cleanupswaploadoutflags._id_12CF9 );
                    var_5.veh_transmission = "reverse";
                }
                else
                    var_5 vehicle_setspeed( 0 );
            }

            self.processscrapassist = undefined;
            self.br_contractxpearned = undefined;
            var_8 = "reverse";
        }
        else if ( isdefined( self.processscrapassist ) )
        {
            var_8 = "blocked";
            self vehicle_setspeed( 0 );

            if ( isdefined( var_5 ) )
                var_5 vehicle_setspeed( 0 );
        }
        else if ( var_6 && !var_7 )
        {
            self vehicle_setspeed( var_9 );
            self.veh_transmission = "forward";
            self.br_circlecenters = 0;

            if ( isdefined( self.br_contractxpearned ) )
            {
                self.br_contractxpearned startdeliveries();
                self.br_contractxpearned = undefined;
            }

            if ( isdefined( var_5 ) )
            {
                var_5 vehicle_setspeed( var_10 );
                var_5.veh_transmission = "forward";
                var_5.br_circleradiizero = 0;
            }

            var_8 = "forward";
        }
        else
        {
            if ( var_6 && var_7 )
                var_8 = "contested";

            self vehicle_setspeed( 0 );

            if ( isdefined( var_5 ) )
                var_5 vehicle_setspeed( 0 );
        }

        [var_8, var_14] = _id_12D14( var_8 );
        var_15 = var_6 > 0;
        startarmsracedef3obj( self.path, var_15, var_8, var_14 );
        waitframe();
    }
}

_id_12D0C( var_0 )
{
    self vehicle_setspeed( level.cleanupswaploadoutflags._id_12D08 );

    if ( isdefined( var_0 ) )
        var_0 vehicle_setspeed( level.cleanupswaploadoutflags._id_12D08 );

    wait 0.5;
}

_id_12D14( var_0 )
{
    var_1 = loschecktime( self.path );

    if ( var_1 < 0 || !isdefined( var_0 ) || var_0 != "forward" )
        return [ var_0, undefined ];

    var_2 = self.path;
    var_3 = var_2.do_ascender_entrance[var_1].spawnpointangles;
    var_4 = var_2.nodes[var_3].origin;
    var_5 = distance2dsquared( self.origin, var_4 );

    if ( var_5 < level.cleanupswaploadoutflags._id_12DA0 )
    {
        var_6 = var_1 + 1;

        if ( var_2.do_ascender_entrance.size > 3 )
        {
            if ( var_6 == var_2.do_ascender_entrance.size )
                var_6 = 3;
            else if ( var_6 > 2 )
                var_6 = 2;
        }
        else if ( var_2.do_ascender_entrance.size < 3 )
        {
            if ( var_6 == var_2.do_ascender_entrance.size )
                var_6 = 3;
        }

        return [ "near", var_1 + 1 ];
    }

    return [ var_0, undefined ];
}

_id_12D02()
{
    level endon( "game_ended" );
    self notify( "vehicleDamageVehicles" );
    self endon( "vehicleDamageVehicles" );
    self endon( "death" );
    level endon( "sudden_death_started" );
    self vehphys_enablecollisioncallback( 1 );

    for (;;)
    {
        self waittill( "collision", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 );

        if ( !isdefined( var_7 ) )
            continue;

        if ( var_7 infilvideocompletecallback() )
        {
            var_7 _id_12D04( self );
            continue;
        }

        if ( isdefined( var_7.equipmentref ) && var_7.equipmentref == "equip_tac_cover" )
            var_7 scripts\mp\equipment\tactical_cover::tac_cover_destroy( undefined, 1 );
    }
}

infilvideocompletecallback()
{
    return isalive( self ) && ( scripts\common\vehicle::isvehicle() || isdefined( self.classname ) && self.classname == "script_vehicle" );
}

_id_12D04( var_0 )
{
    self.toggle_switch_model = 1;
    self dodamage( self.health, var_0.origin, var_0, var_0 );

    if ( isdefined( self ) )
        self.toggle_switch_model = undefined;
}

_id_12D29( var_0, var_1 )
{
    if ( !var_0 && var_1 )
    {
        self.init_gasmask scripts\mp\gameobjects::setownerteam( make_pilot_invincible( self.team ) );
        self.init_gasmask scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_halting", "waypoint_escort" );
        teleport_to_debug_start_pos( self.path, game["attackers"], "red" );
        teleport_to_debug_start_pos( self.path, game["defenders"], "blue" );
        var_2 = scripts\engine\utility::ter_op( !game["switchedsides"], "halt0", "halt1" );
        self setscriptablepartstate( "radiusEffect", var_2, 0 );
        _func_428( self.init_gasmask.objidnum, 0 );
        self.status = "back";
        _id_11ED3( self.path.script_index, 2 );
    }
    else if ( isdefined( self.processscrapassist ) )
    {
        self.init_gasmask scripts\mp\gameobjects::setownerteam( "neutral" );
        self.init_gasmask scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_blocked" );
        teleport_to_debug_start_pos( self.path, game["attackers"], "yellow" );
        teleport_to_debug_start_pos( self.path, game["defenders"], "yellow" );
        self setscriptablepartstate( "radiusEffect", "contest", 0 );
        _func_428( self.init_gasmask.objidnum, 0 );
        self.status = "blocked";
        _id_11ED3( self.path.script_index, 0 );
    }
    else if ( var_0 && !var_1 )
    {
        self.init_gasmask scripts\mp\gameobjects::setownerteam( self.team );
        self.init_gasmask scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_escorting", "waypoint_halt" );
        teleport_to_debug_start_pos( self.path, game["attackers"], "blue" );
        teleport_to_debug_start_pos( self.path, game["defenders"], "red" );
        var_2 = scripts\engine\utility::ter_op( !game["switchedsides"], "escort0", "escort1" );
        self setscriptablepartstate( "radiusEffect", var_2, 0 );
        _func_428( self.init_gasmask.objidnum, 0 );
        self.status = "forward";
        _id_11ED3( self.path.script_index, 1 );
    }
    else if ( var_0 && var_1 )
    {
        self.init_gasmask scripts\mp\gameobjects::setownerteam( "neutral" );
        self.init_gasmask scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_contested" );
        teleport_to_debug_start_pos( self.path, game["attackers"], "yellow" );
        teleport_to_debug_start_pos( self.path, game["defenders"], "yellow" );
        self setscriptablepartstate( "radiusEffect", "contest", 0 );
        _func_428( self.init_gasmask.objidnum, 0 );
        self.status = "contested";
        _id_11ED3( self.path.script_index, 3 );
    }
    else
    {
        self.init_gasmask scripts\mp\gameobjects::setownerteam( self.team );
        self.init_gasmask scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_escort_neutral", "waypoint_halt_neutral" );
        teleport_to_debug_start_pos( self.path, game["attackers"], "white" );
        teleport_to_debug_start_pos( self.path, game["defenders"], "white" );
        self setscriptablepartstate( "radiusEffect", "idle", 0 );
        _func_428( self.init_gasmask.objidnum, 1 );
        self.status = "idle";
        _id_11ED3( self.path.script_index, 4 );
    }

    _id_12D28();
}

_id_12D28()
{
    var_0 = self.path;
    var_1 = var_0._id_12344[var_0._id_12343].ai_push_forward_watcher[var_0.friendly_hvi_vehicle_extra_riders_getin_scene];
    var_2 = var_0._id_12344[var_0._id_12343].points[var_0.friendly_hvi_vehicle_extra_riders_getin_scene];
    var_3 = var_0._id_12344[var_0._id_12343].points[var_0.friendly_hvi_vehicle_extra_riders_getin_scene + 1];
    var_4 = pointonsegmentnearesttopoint( var_2, var_3, self.origin );
    var_5 = distance( var_4, var_2 );
    var_1 = var_1 + var_5;
    var_6 = var_1 / var_0._id_1278C;

    if ( var_0.do_ads_hint >= 0 )
    {
        var_7 = 0;

        if ( var_0.do_ads_hint > 0 )
            var_7 = var_0.do_ascender_entrance[var_0.do_ads_hint - 1].goal_ar;

        var_8 = var_0.do_ascender_entrance[var_0.do_ads_hint].goal_ar - var_7;
        var_1 = var_1 - var_7;
        var_9 = var_1 / var_8;
    }
    else
        var_9 = 0;

    _id_11ED2( var_0.script_index, var_6 );

    if ( isdefined( level.teamdata[game["attackers"]]["checkpoint"].brking_initpostmain[var_0.script_index] ) )
        level.teamdata[game["attackers"]]["checkpoint"].brking_initpostmain[var_0.script_index].brking_createc130pathstruct scripts\mp\hud_util::updatebar( var_6, 0 );

    if ( isdefined( level.teamdata[game["defenders"]]["checkpoint"].brking_initpostmain[var_0.script_index] ) )
        level.teamdata[game["defenders"]]["checkpoint"].brking_initpostmain[var_0.script_index].brking_createc130pathstruct scripts\mp\hud_util::updatebar( var_6, 0 );

    objective_setprogress( self.init_gasmask.objidnum, var_9 );
}

data_pickup_logic_new( var_0, var_1 )
{
    var_2 = 0.0000157828;
    var_3 = 3600;
    var_4 = 10;
    var_5 = distance( var_0, var_1 );
    var_6 = var_5 * var_2;
    var_7 = max( var_6 / level.cleanupswaploadoutflags._id_12D08 * var_3, var_4 );
    return var_7;
}

dangernotifyresetforplayer( var_0, var_1 )
{
    var_0._id_12344 = [];
    var_0.do_ascender_entrance = [];
    var_0.started_breach_process = [];
    var_0.friendly_hvi_vehicle_extra_riders_getin_scene = 0;
    var_0._id_12343 = 0;

    if ( level.cleanupswaploadoutflags.breakgasmaskbr )
        var_0.remove_from_bomb_detonator_waiting_for_pick_up_array = [];

    if ( level.cleanupswaploadoutflags.convoy )
    {
        var_0.extratimeincreasecountcap = spawnstruct();
        var_0.extratimeincreasecountcap.points = [];
        var_0.extratimeincreasecountcap.times = [];
    }

    var_2 = var_0.nodes;

    if ( !isdefined( var_2 ) || istrue( var_1 ) )
    {
        if ( isdefined( var_0.target ) )
        {
            var_3 = var_0;
            var_2 = [ var_0 ];

            for (;;)
            {
                var_3 = scripts\engine\utility::getstruct( var_3.target, "targetname" );
                var_2[var_2.size] = var_3;

                if ( !isdefined( var_3.target ) )
                    break;
            }

            var_0.nodes = var_2;
        }
        else
        {

        }
    }
    else
    {

    }

    var_9 = int( var_2.size / 31 );
    var_10 = var_2.size - var_9 * 31;

    if ( var_10 != 0 )
        var_9++;

    var_11 = var_10 > 0 && var_10 < 4;
    var_12 = var_9 - 2;
    var_13 = var_9 - 1;
    var_14 = undefined;

    if ( level.cleanupswaploadoutflags.breakgasmaskbr )
        var_0.remove_from_bomb_detonator_waiting_for_pick_up_array[0] = 0;

    var_15 = 0;
    var_16 = 0;
    var_17 = 0;
    var_18 = 0;
    var_19 = 0;
    var_20 = 0;

    for ( var_21 = 0; var_21 < var_9; var_21++ )
    {
        var_0._id_12344[var_21] = spawnstruct();
        var_0._id_12344[var_21].points = [];
        var_0._id_12344[var_21].times = [];
        var_0._id_12344[var_21].propability = [];
        var_0._id_12344[var_21].quarry_wave_spawn_scoring = [];
        var_0._id_12344[var_21].ai_push_forward_watcher = [];
        var_22 = 31;

        if ( var_21 == var_12 && var_11 )
            var_22 = 27 + var_10;
        else if ( var_21 == var_13 && var_10 > 0 )
        {
            if ( var_10 >= 4 )
                var_22 = var_10;
            else
                var_22 = 4;
        }

        var_23 = 0;

        if ( var_21 > 0 )
        {
            var_0._id_12344[var_21].points[var_23] = var_2[var_16].origin;
            var_0._id_12344[var_21].times[var_23] = data_pickup_logic_new( var_2[var_16].origin, var_2[var_16].origin );
            var_0._id_12344[var_21].ai_push_forward_watcher[var_23] = var_19;
            var_23++;
            var_22++;
            var_2[var_16]._id_12343 = var_21;
        }
        else
            var_2[var_21]._id_12343 = var_21;

        for ( var_24 = var_23; var_24 < var_22; var_24++ )
        {
            var_25 = var_24;

            if ( level.cleanupswaploadoutflags.convoy && var_21 == 0 )
            {
                var_0.extratimeincreasecountcap.points[var_25] = var_2[var_15].origin;
                var_0.extratimeincreasecountcap.times[var_25] = data_pickup_logic_new( var_2[var_16].origin, var_2[var_15].origin );
                var_25 = var_25 - 1;

                if ( var_25 == 0 )
                    var_16 = 1;
            }

            if ( !level.cleanupswaploadoutflags.convoy || var_21 > 0 || var_25 >= 0 )
            {
                var_0._id_12344[var_21].points[var_25] = var_2[var_15].origin;
                var_0._id_12344[var_21].times[var_25] = data_pickup_logic_new( var_2[var_16].origin, var_2[var_15].origin );
                var_26 = distance( var_2[var_16].origin, var_2[var_15].origin );
                var_19 = var_19 + var_26;
                var_0._id_12344[var_21].ai_push_forward_watcher[var_25] = var_19;

                if ( isdefined( var_2[var_15].checkpoint ) )
                {
                    var_0._id_12344[var_21].propability[var_25] = var_17;
                    var_0.do_ascender_entrance[var_17] = spawnstruct();
                    var_0.do_ascender_entrance[var_17].goal_ar = var_19;
                    var_0.do_ascender_entrance[var_17].spawnpointangles = var_15;
                    var_2[var_15].checkpoint = var_0.do_ascender_entrance[var_17];

                    if ( level.cleanupswaploadoutflags.breakgasmaskbr )
                    {
                        var_27 = var_15 - var_20;
                        var_28 = int( var_27 * 0.33 ) + var_20;
                        var_0.remove_from_bomb_detonator_waiting_for_pick_up_array[var_0.remove_from_bomb_detonator_waiting_for_pick_up_array.size] = var_28;
                        var_29 = int( var_27 * 0.66 ) + var_20;
                        var_0.remove_from_bomb_detonator_waiting_for_pick_up_array[var_0.remove_from_bomb_detonator_waiting_for_pick_up_array.size] = var_29;
                        var_0.remove_from_bomb_detonator_waiting_for_pick_up_array[var_0.remove_from_bomb_detonator_waiting_for_pick_up_array.size] = var_15;
                        var_20 = var_15;
                    }

                    var_17++;
                }

                if ( isdefined( var_2[var_15].obstacle ) )
                {
                    var_0._id_12344[var_21].quarry_wave_spawn_scoring[var_25] = var_18;

                    if ( !isent( var_2[var_15].obstacle ) )
                        var_2[var_15].obstacle = focus_fire_is_activated( var_2[var_15].obstacle.origin, var_2[var_15].obstacle.angles );

                    var_0.started_breach_process[var_18] = var_2[var_15].obstacle;
                    var_0.started_breach_process[var_18].path = var_0;
                    var_0.started_breach_process[var_18].dist = var_19;
                    var_0.started_breach_process[var_18].index = var_18;
                    var_0.started_breach_process[var_18].do_ads_hint = var_17;
                    var_18++;
                }

                var_16 = var_15;
            }

            var_15++;
        }
    }

    var_30 = var_15 - 1;

    if ( level.cleanupswaploadoutflags.breakgasmaskbr )
    {
        var_27 = var_15 - var_20;
        var_28 = int( var_27 * 0.33 ) + var_20;
        var_0.remove_from_bomb_detonator_waiting_for_pick_up_array[var_0.remove_from_bomb_detonator_waiting_for_pick_up_array.size] = var_28;
        var_29 = int( var_27 * 0.66 ) + var_20;
        var_0.remove_from_bomb_detonator_waiting_for_pick_up_array[var_0.remove_from_bomb_detonator_waiting_for_pick_up_array.size] = var_29;
        var_0.remove_from_bomb_detonator_waiting_for_pick_up_array[var_0.remove_from_bomb_detonator_waiting_for_pick_up_array.size] = var_30;
    }

    var_0.do_ascender_entrance[var_17] = spawnstruct();
    var_0.do_ascender_entrance[var_17].goal_ar = var_19;
    var_0.do_ascender_entrance[var_17].spawnpointangles = var_30;
    var_0._id_1278C = var_19;
}

_id_12CFB( var_0, var_1 )
{
    self notify( "vehicleBeginPath" );
    self endon( "vehicleBeginPath" );
    self endon( "death" );
    level endon( "sudden_death_started" );
    var_2 = 1;
    self.br_circlecenters = 1;
    self.processscrapassist = undefined;
    self.do_ads_hint = 0;

    if ( !isdefined( var_1 ) )
        var_1 = 0;

    var_0.friendly_hvi_vehicle_extra_riders_getin_scene = 0;
    var_0._id_12343 = var_1;

    foreach ( var_4 in var_0.started_breach_process )
        var_4 startdisabled( 0 );

    thread _id_12D13();
    thread _id_12D02();
    thread _id_12CFE();
    var_6 = 1;

    while ( var_0._id_12343 < var_0._id_12344.size )
    {
        self startpathnodes( var_0._id_12344[var_0._id_12343].points, var_0._id_12344[var_0._id_12343].times, 0, 0.5, 0.5, 0, 0, var_2, 1, !var_6, 1, 1 );
        var_2 = 0;
        var_6 = _id_12D2A( var_0, var_6 );

        if ( istrue( level.gameended ) )
            break;
    }

    self vehicle_setspeed( 0 );

    if ( isdefined( var_0.extraweapons ) )
        var_0.extraweapons vehicle_setspeed( 0 );

    self notify( "pathComplete" );
    var_0.exfil_spawnfunc = 1;
    var_0 notify( "pathComplete" );

    if ( level.cleanupswaploadoutflags._id_1227B )
        var_0._id_12295.exfil_spawnfunc = 1;

    give_primary_attachments_only( var_0 );

    if ( !istrue( level.gameended ) && _id_11FFE( var_0 ) )
    {
        if ( level.cleanupswaploadoutflags.binoculars_processlosqueuehigh )
        {
            binoculars_removeheadicon( var_0 );
            var_0.do_ads_hint++;
            play_player_falling_anims();

            if ( isdefined( level.cleanupswaploadoutflags.do_convoy_moving_vo ) )
            {
                var_7 = losqueuehigh();

                foreach ( var_9 in level.cleanupswaploadoutflags.do_convoy_moving_vo )
                    var_9 setvalue( var_7 );
            }

            var_0 notify( "checkPointUpdate" );
        }
        else
            x1fin_think( var_0 );

        do_complete_escape_zoom_out();
    }
    else if ( !istrue( level.gameended ) && level.cleanupswaploadoutflags.binoculars_onstatelospendingenter )
    {
        scripts\mp\gametypes\br.gsc::_id_1269B( "br_payload_all_to_end", undefined, game["attackers"] );
        scripts\mp\gametypes\br.gsc::_id_1269B( "br_payload_all_to_end_enemy", undefined, game["defenders"] );
        scripts\mp\objidpoolmanager::objective_playermask_hidefromall( self.init_gasmask.objidnum );
        teleport_to_debug_start_pos( var_0, game["attackers"], "white" );
        teleport_to_debug_start_pos( var_0, game["defenders"], "white" );
        var_11 = loschecktime( var_0 );
        thread startarmsracedef3obj( var_0, 1, "checkpoint", var_11 + 1 );

        if ( level.cleanupswaploadoutflags.binoculars_processlosqueuehigh )
        {
            binoculars_removeheadicon( var_0 );
            var_0.do_ads_hint++;
            play_player_falling_anims();
            binoculars_runadslogic( var_0 );
            _id_11F87( var_0, var_0.do_ads_hint );
            var_0 notify( "checkPointUpdate" );

            if ( isdefined( level.cleanupswaploadoutflags.do_convoy_moving_vo ) )
            {
                var_7 = losqueuehigh();

                foreach ( var_9 in level.cleanupswaploadoutflags.do_convoy_moving_vo )
                    var_9 setvalue( var_7 );
            }
        }
    }
}

_id_12CFF( var_0, var_1 )
{
    self notify( "vehicleBeginPath" );
    self endon( "vehicleBeginPath" );
    var_0 endon( "pathComplete" );
    self endon( "death" );
    level endon( "sudden_death_started" );
    var_2 = 1;

    if ( !isdefined( var_1 ) )
        var_1 = 0;

    self.friendly_hvi_vehicle_extra_riders_getin_scene = 0;
    self._id_12343 = var_1;
    thread _id_12D02();
    var_3 = 1;

    while ( self._id_12343 < var_0._id_12344.size )
    {
        if ( self._id_12343 == 0 )
        {
            var_4 = var_0.extratimeincreasecountcap.points;
            var_5 = var_0.extratimeincreasecountcap.times;
        }
        else
        {
            var_4 = var_0._id_12344[self._id_12343].points;
            var_5 = var_0._id_12344[self._id_12343].times;
        }

        self startpathnodes( var_4, var_5, 0, 0.5, 0.5, 0, 0, var_2, 1, !var_3, 1, 1 );
        var_2 = 0;
        var_3 = _id_12D00( var_0, var_4 );

        if ( istrue( level.gameended ) )
            break;
    }

    self vehicle_setspeed( 0 );
}

_id_12D00( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "death" );
    level endon( "sudden_death_started" );
    var_2 = var_1.size - 1;

    for (;;)
    {
        self waittill( "trigger", var_3 );
        var_4 = self._id_12343 == 0 && var_3 == 0;
        self.friendly_hvi_vehicle_extra_riders_getin_scene = var_3;

        if ( var_4 )
        {
            self.br_circleradiizero = 1;
            continue;
        }

        if ( var_3 <= 0 )
        {
            self._id_12343--;
            self.friendly_hvi_vehicle_extra_riders_getin_scene = var_1.size - 2;
            return 0;
        }
        else if ( var_3 >= var_2 )
        {
            self._id_12343++;
            self.friendly_hvi_vehicle_extra_riders_getin_scene = 0;
            return 1;
        }
    }
}

_id_11FFE( var_0 )
{
    if ( level.cleanupswaploadoutflags.binoculars_onstatelospendingenter )
    {
        foreach ( var_0 in level.cleanupswaploadoutflags.paths )
        {
            if ( !istrue( var_0.exfil_spawnfunc ) )
                return 0;
        }
    }

    return 1;
}

_id_12D2A( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "death" );
    level endon( "sudden_death_started" );
    var_2 = var_0._id_12344[var_0._id_12343];
    var_3 = var_2.points.size - 1;

    if ( var_1 )
        var_4 = 0;
    else
        var_4 = var_3;

    var_5 = var_1;

    for (;;)
    {
        self waittill( "trigger", var_6 );
        var_7 = var_0._id_12343 == 0 && var_6 == 0;

        if ( !var_7 && var_6 == var_0.friendly_hvi_vehicle_extra_riders_getin_scene )
            var_5 = !var_5;
        else
            var_5 = var_7 || var_6 > var_0.friendly_hvi_vehicle_extra_riders_getin_scene;

        var_0.friendly_hvi_vehicle_extra_riders_getin_scene = var_6;

        if ( isdefined( var_2.quarry_wave_spawn_scoring[var_6] ) )
        {
            var_8 = var_2.quarry_wave_spawn_scoring[var_6];
            var_9 = var_0.started_breach_process[var_8];

            if ( istrue( var_9.extractcallback ) && var_5 )
                self.processscrapassist = var_9;
            else if ( !istrue( var_9.extractcallback ) && var_5 )
                var_9 startdeliveries();
            else if ( !istrue( var_9.extractcallback ) && !var_5 )
                var_9 startdisabled( 1 );
        }

        if ( var_7 || isdefined( var_2.propability[var_6] ) )
        {
            self.br_circlecenters = 1;

            if ( var_6 > var_4 && isdefined( var_2.propability[var_6] ) )
            {
                level thread scripts\mp\gametypes\br_quest_util.gsc::_id_12BAA( self.origin, "dom" );

                if ( level.cleanupswaploadoutflags.binoculars_processlosqueuehigh )
                    binoculars_registertargetstate( var_2.propability[var_6], var_0 );
                else
                    spawndistancemax( var_2.propability[var_6], self, var_0 );

                self.do_ads_hint = var_2.propability[var_6] + 1;
            }
        }
        else if ( var_6 <= 0 )
        {
            var_0._id_12343--;
            var_0.friendly_hvi_vehicle_extra_riders_getin_scene = var_0._id_12344[var_0._id_12343].points.size - 2;
            return 0;
        }
        else if ( var_6 >= var_3 )
        {
            var_0._id_12343++;
            var_0.friendly_hvi_vehicle_extra_riders_getin_scene = 0;
            return 1;
        }

        var_4 = var_6;
    }
}

_id_12D0A( var_0 )
{
    if ( !isdefined( self.init_gasmask ) )
        return 0;

    return self.init_gasmask.numtouching[var_0];
}

update_timer_for_bomb_case_detonator_holder( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    foreach ( var_2 in level.cleanupswaploadoutflags.paths )
    {
        if ( var_0 istouching( var_2.trigger ) )
            return 1;
    }

    return 0;
}

_id_127DF()
{
    level endon( "game_ended" );
    level notify( "trackPlayersPerPath" );
    level endon( "trackPlayersPerPath" );
    level endon( "sudden_death_started" );

    foreach ( var_1 in level.cleanupswaploadoutflags.paths )
        var_1.numplayers = [];

    var_3 = game["attackers"];

    for (;;)
    {
        foreach ( var_1 in level.cleanupswaploadoutflags.paths )
            var_1.numplayers[var_3] = 0;

        foreach ( var_7 in level.players )
        {
            if ( !isdefined( var_7 ) || !isalive( var_7 ) || var_7.team != var_3 )
                continue;

            var_8 = var_7 unset_relic_noluck();
            var_9 = var_7 unset_relic_noregen();

            if ( isdefined( var_8 ) && var_9 > gettime() )
            {
                var_8.numplayers[var_3]++;
                continue;
            }

            var_10 = var_7 unset_relic_damage_from_above();

            if ( isdefined( var_10 ) )
            {
                var_10.numplayers[var_3]++;
                var_7 useweaponpickups( var_10 );
                var_7 usefailnoplundermsg();
            }
        }

        var_3 = make_pilot_invincible( var_3 );
        waitframe();
    }
}

unset_relic_damage_from_above()
{
    var_0 = undefined;
    var_1 = undefined;

    if ( !isdefined( self.enemy_sentry_debug ) || self.enemy_sentry_debug.size == 0 )
        return;

    foreach ( var_3 in level.cleanupswaploadoutflags.paths )
    {
        var_4 = self.enemy_sentry_debug[var_3.label];
        var_5 = var_3.nodes[var_4];
        var_6 = distance2dsquared( var_5.origin, self.origin );
        var_7 = var_4;
        var_8 = var_6;
        var_9 = var_6;

        for ( var_10 = var_4 + 1; var_10 < var_3.nodes.size; var_10++ )
        {
            var_11 = var_3.nodes[var_10];
            var_12 = distance2dsquared( var_11.origin, self.origin );

            if ( var_12 < var_8 )
            {
                var_7 = var_10;
                var_8 = var_12;
            }

            if ( var_12 > var_9 )
                break;

            var_9 = var_12;
        }

        for ( var_10 = var_4 - 1; var_10 >= 0; var_10-- )
        {
            var_11 = var_3.nodes[var_10];
            var_12 = distance2dsquared( var_11.origin, self.origin );

            if ( var_12 < var_8 )
            {
                var_7 = var_10;
                var_8 = var_12;
            }

            if ( var_12 > var_9 )
                break;

            var_9 = var_12;
        }

        self.enemy_sentry_debug[var_3.label] = var_7;

        if ( !isdefined( var_0 ) || var_8 < var_1 )
        {
            var_0 = var_3;
            var_1 = var_8;
        }
    }

    return var_0;
}

usefailnoplundermsg()
{
    var_0 = 3500;

    if ( getdvarint( "scr_br_payload_oob_far", 0 ) == 0 )
        return;

    if ( !scripts\mp\flags::gameflag( "infil_complete" ) )
        return;

    var_1 = unset_relic_noluck();
    var_2 = self.enemy_sentry_debug[var_1.label];
    var_3 = var_1.nodes[var_2];
    var_4 = undefined;
    var_5 = undefined;
    var_6 = undefined;

    if ( var_2 + 1 >= var_1.nodes.size )
    {
        var_6 = var_2 - 1;
        var_4 = pointonsegmentnearesttopoint( var_1.nodes[var_2].origin, var_1.nodes[var_6].origin, self.origin );
    }
    else if ( var_2 - 1 < 0 )
    {
        var_6 = var_2 + 1;
        var_4 = pointonsegmentnearesttopoint( var_1.nodes[var_2].origin, var_1.nodes[var_6].origin, self.origin );
    }
    else
    {
        var_7 = pointonsegmentnearesttopoint( var_1.nodes[var_2].origin, var_1.nodes[var_2 + 1].origin, self.origin );
        var_8 = pointonsegmentnearesttopoint( var_1.nodes[var_2].origin, var_1.nodes[var_2 - 1].origin, self.origin );
        var_9 = distance2dsquared( self.origin, var_7 );
        var_10 = distance2dsquared( self.origin, var_8 );

        if ( var_10 < var_9 )
        {
            var_4 = var_8;
            var_5 = var_10;
            var_6 = var_2 - 1;
        }
        else
        {
            var_4 = var_7;
            var_5 = var_9;
            var_6 = var_2 + 1;
        }
    }

    if ( !isdefined( var_5 ) )
        var_5 = distance2dsquared( self.origin, var_4 );

    var_11 = getdvarint( "scr_br_payload_max_dist_away", var_0 );
    var_12 = var_11 * var_11;
    var_13 = 0;

    if ( var_5 > var_12 )
        var_13 = 1;

    if ( var_13 && !isdefined( self.timesincelastdeath ) )
    {
        var_14 = make_pilot_invincible( self.team );
        self.timesincelastdeath = scripts\mp\utility\outline::outlineenableforteam( self, var_14, "outline_nodepth_red", "level_script" );
    }
    else if ( !var_13 && isdefined( self.timesincelastdeath ) )
    {
        scripts\mp\utility\outline::outlinedisable( self.timesincelastdeath, self );
        self.timesincelastdeath = undefined;
    }
}

unset_relic_bang_and_boom()
{
    self endon( "endOOBFar" );
    self endon( "disconnect" );
    level endon( "sudden_death_started" );
    self waittill( "death" );
    self.timesincelastdeath = undefined;
}

playersetkeypadstateindex()
{
    if ( !istrue( level.cleanupswaploadoutflags.movingplatform_playerunlink ) )
        return;

    if ( level.mapname == "mp_br_mechanics" )
        scripts\mp\gametypes\br_payload_spawns_mp_br_mechanics.gsc::initspawns();
    else if ( level.mapname == "mp_don4" )
        scripts\mp\gametypes\br_payload_spawns_mp_don4.gsc::initspawns();

    if ( level.cleanupswaploadoutflags._id_122F6[game["attackers"]].size == 0 || level.cleanupswaploadoutflags._id_122F6[game["defenders"]].size == 0 )
        level.cleanupswaploadoutflags.movingplatform_playerunlink = 0;

    if ( level.cleanupswaploadoutflags.movingplatform_playerunlink )
    {
        is_object_allowed_in_gametype( game["attackers"] );
        is_object_allowed_in_gametype( game["defenders"] );
    }
}

is_object_allowed_in_gametype( var_0 )
{
    var_1 = level.cleanupswaploadoutflags._id_122F6[var_0];

    foreach ( var_3 in var_1 )
        is_moving_platform_train( var_3 );

    if ( isdefined( level.cleanupswaploadoutflags._id_124A6 ) )
    {
        var_1 = level.cleanupswaploadoutflags._id_124A6[var_0];

        foreach ( var_3 in var_1 )
            is_moving_platform_train( var_3 );
    }
}

is_moving_platform_train( var_0 )
{
    var_0.enemy_sentry_debug = [];

    foreach ( var_2 in level.cleanupswaploadoutflags.paths )
    {
        var_3 = undefined;
        var_4 = undefined;
        var_5 = undefined;

        for ( var_6 = 0; var_6 < var_2.nodes.size; var_6++ )
        {
            var_7 = var_2.nodes[var_6];
            var_8 = distance2dsquared( var_7.origin, var_0.origin );

            if ( !isdefined( var_3 ) || var_8 < var_4 )
            {
                var_3 = var_6;
                var_4 = var_8;
            }

            if ( !isdefined( var_5 ) )
            {
                var_5 = var_8;
                continue;
            }

            if ( var_8 > var_5 )
                break;
        }

        var_0.enemy_sentry_debug[var_2.label] = var_3;
    }
}

_id_12F8F( var_0 )
{
    level endon( "game_ended" );
    level endon( "sudden_death_started" );
    scripts\mp\flags::gameflagwait( "infil_complete" );
    level.teamdata[var_0]["nextRespawn"] = 0;

    if ( level.teamdata[var_0]["respawnDelay"] == 0 )
        return;

    for (;;)
    {
        level.teamdata[var_0]["nextRespawn"] = gettime() + level.teamdata[var_0]["respawnDelay"] * 1000;
        wait( level.teamdata[var_0]["respawnDelay"] );
    }
}

modifybrvehicledamage( var_0, var_1 )
{
    if ( level.teamdata[var_0]["respawnDelay"] == 0 )
        return 0;

    if ( !isdefined( var_1 ) )
        var_1 = level.teamdata[var_0]["nextRespawn"];

    var_2 = max( var_1 - gettime(), 0 );
    var_3 = int( var_2 / 1000 );
    return var_3;
}

codenumber( var_0 )
{
    return 1;
}

playerrespawn( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    level endon( "sudden_death_started" );

    if ( !scripts\mp\flags::gameflag( "prematch_done" ) || !istrue( self.br_infilstarted ) )
        return 0;

    thread validatefunc( var_0 );
    return 1;
}

validatefunc( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    level endon( "sudden_death_started" );

    if ( !istrue( level.checkforarenaloadoutoverride ) )
        self.class = scripts\mp\gametypes\br.gsc::trackriotshield_tryreset();

    var_1 = level.teamdata[self.team]["nextRespawn"];
    var_2 = scripts\mp\utility\teams::getteamdata( self.team, "teamCount" );

    if ( var_2 > 1 )
        thread scripts\mp\gametypes\br_spectate.gsc::spawnspectator( var_0, undefined, 1 );

    endgame_luidecisionreceived();
    self.waitingtospawn = 1;
    comparescore( 0, var_1 );
    self.waitingtospawn = 0;
    thread scripts\mp\playerlogic::spawnplayer( undefined, 0 );
    self freezecontrols( 1 );

    if ( !istrue( level.skipprematchdropspawn ) )
        thread unreachable_function();

    while ( !isalive( self ) )
        waitframe();

    waitframe();
    unset_relic_dfa();
    scripts\mp\utility\outline::outlineenableforteam( self, self.team, "outline_depth_payload", "level_script" );
    var_3 = !self isplayerheadless();
    var_4 = gettime();

    if ( var_3 )
    {
        while ( isalive( self ) && isdefined( self.weaponlist ) && !self hasloadedviewweapons( self.weaponlist ) )
        {
            if ( var_4 + 3000 < gettime() )
                break;

            waitframe();
        }
    }

    self notify( "brWaitAndSpawnClientComplete" );
    self.waitingtospawn = 0;
    self freezecontrols( 0 );
    scripts\mp\gametypes\br.gsc::_id_12A58( self );
}

unset_relic_dfa()
{
    if ( getdvarint( "scr_br_payload_last_stand", 0 ) != 0 )
        scripts\mp\gametypes\br.gsc::monitor_game_end_on_front_truck_death( self );

    scripts\mp\gametypes\br_armor.gsc::monitor_truck( 1 );
    var_0 = getdvarint( "scr_br_payload_start_ammo", 1 );

    if ( var_0 == -2 )
    {
        foreach ( var_2 in [ self.primaryweapon, self.secondaryweapon ] )
        {
            if ( isdefined( var_2 ) )
            {
                var_3 = weaponclipsize( var_2 );
                self setweaponammoclip( var_2, var_3 );
                self givemaxammo( var_2 );
            }
        }

        scripts\mp\gametypes\br_weapons.gsc::br_ammo_update_weapons( self );
    }
    else if ( var_0 == -1 )
        scripts\mp\gametypes\br_weapons.gsc::checkforsubgametypeoverrides();
    else if ( var_0 > 0 )
    {
        foreach ( var_6 in [ self.primaryweapon, self.secondaryweapon ] )
        {
            if ( isdefined( var_6 ) )
            {
                var_3 = weaponclipsize( var_6 );
                self setweaponammoclip( var_6, var_3 );
                var_2 = asmdevgetallstates( var_6 );
                var_7 = scripts\mp\gametypes\br_weapons.gsc::br_ammo_type_for_weapon( var_2 );

                if ( isdefined( var_7 ) )
                    scripts\mp\gametypes\br_weapons.gsc::br_ammo_give_type( self, var_7, var_3 * var_0 );
            }
        }

        scripts\mp\gametypes\br_weapons.gsc::br_ammo_update_weapons( self );
    }

    thread scripts\mp\gametypes\br.gsc::checkpoint_fx_play();
    thread valve_steam_off();
    thread valve_steam_on();
}

_id_122FF( var_0 )
{
    self endon( "disconnect" );
    self notify( "reset_timer" );
    waitframe();
    self setclientomnvar( "ui_privateevent_timer_type", 3 );
    var_1 = var_0;
    var_2 = gettime() + var_1 * 1000;
    self setclientomnvar( "ui_privateevent_timer", var_2 );
    scripts\engine\utility::_id_12E54( var_0, "reset_timer", "death" );
    self setclientomnvar( "ui_privateevent_timer_type", 0 );
}

valve_steam_off()
{
    self endon( "disconnect" );

    if ( !isdefined( self.respawncircleinterppct ) )
        return;

    if ( getdvarint( "scr_br_payload_spawn_speed", 1 ) == 0 )
        return;

    if ( isbot( self ) )
        return;

    if ( self.team == game["defenders"] )
        return;

    var_0 = self.respawncircleinterppct;
    self.respawncircleinterppct = undefined;

    if ( isplayer( var_0 ) || istrue( var_0.audio_player_start_mud_loop ) )
        return;

    var_1 = var_0;

    if ( delay_push_player_clear_door_way( var_1 ) )
    {
        while ( isalive( self ) && !self isonground() )
            waitframe();
    }

    if ( !isalive( self ) )
        return;

    var_2 = 0;
    var_3 = getdvarint( "scr_br_payload_spawn_speed_time", 0 );

    if ( var_3 == 0 )
    {
        var_4 = getdvarint( "scr_br_payload_spawn_speed_boost", 290 );
        var_5 = var_1.vehicle;
        var_6 = distance( self.origin, var_5.origin );
        var_3 = var_6 / var_4;
    }

    var_7 = getdvarfloat( "scr_br_payload_speed_mult", 0.4 );
    thread _id_122FF( var_3 );
    var_8 = self.fastcrouchspeedmod;
    self.fastcrouchspeedmod = var_7;
    scripts\mp\weapons::updatemovespeedscale();
    self lerpfovbypreset( "zombiedefault" );

    if ( !scripts\mp\gametypes\br_public.gsc::obj_room_fire_08() )
    {
        scripts\mp\utility\perk::giveperk( "specialty_sprintmelee" );
        scripts\mp\utility\perk::giveperk( "specialty_sprintads" );
        scripts\mp\utility\perk::giveperk( "specialty_marathon" );
    }

    while ( isalive( self ) && var_2 < var_3 && !scripts\mp\flags::gameflag( "sudden_death_started" ) )
    {
        if ( self issupersprinting() )
            self refreshsprinttime();

        wait 0.1;
        var_2 = var_2 + 0.1;
    }

    if ( !scripts\mp\gametypes\br_public.gsc::obj_room_fire_08() )
    {
        _id_11C24( "specialty_sprintmelee" );
        _id_11C24( "specialty_sprintads" );
        _id_11C24( "specialty_marathon" );
    }

    self.fastcrouchspeedmod = var_8;
    scripts\mp\weapons::updatemovespeedscale();
    self lerpfovbypreset( "default_2seconds" );
}

_id_11C24( var_0 )
{
    if ( scripts\mp\utility\perk::_hasperk( var_0 ) )
        scripts\mp\utility\perk::removeperk( var_0 );
}

va_cluster_spawnpoint_valid()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    var_0 = self.teleport_room_doors;

    if ( isbot( self ) )
    {
        if ( !isdefined( var_0 ) )
        {
            var_0 = mercymatchending_nuke( "A" );
            useweaponpickups( var_0 );
        }

        return var_0;
    }

    if ( getdvarint( "debug_gsc_spawn_choice_enabled", 0 ) == 1 )
    {
        var_1 = scripts\mp\hud_util::createicon( "progress_bar_fill", 400, 35 );
        var_1.sort = 0;
        var_1.color = make_all_oscilloscopes_usable( "lightblue" );
        var_1.archived = 0;
        var_1.alpha = 0.5;
        var_2 = [];
        var_3 = mercymatchending_nuke( "A" );
        var_4 = undefined;
        var_5 = undefined;

        if ( isdefined( var_3 ) )
        {
            var_4 = scripts\mp\hud_util::createfontstring( "default", 2.0 );
            var_4.archived = 0;
            var_4.label = &"BR_PAYLOAD/SPAWN_A";
            var_4.path = var_3;
            var_4 thread piccadilly_spawnpatchtriggers( self, var_3 );

            if ( isdefined( var_0 ) && !isplayer( var_0 ) && var_3 == var_0 )
                var_1.dohudplunderroll = var_4;

            var_2[var_2.size] = var_4;

            if ( level.cleanupswaploadoutflags._id_1227B && self.team == game["attackers"] )
            {
                var_5 = scripts\mp\hud_util::createfontstring( "default", 2.0 );
                var_5.archived = 0;
                var_5.label = &"BR_PAYLOAD/SPAWN_B_AIR";
                var_5.path = var_3._id_12295;

                if ( isdefined( var_0 ) && !isplayer( var_0 ) && var_3._id_12295 == var_0 )
                    var_1.dohudplunderroll = var_5;

                var_2[var_2.size] = var_5;
            }
        }

        var_6 = mercymatchending_nuke( "B" );
        var_7 = undefined;
        var_8 = undefined;

        if ( isdefined( var_6 ) )
        {
            var_7 = scripts\mp\hud_util::createfontstring( "default", 2.0 );
            var_7.archived = 0;
            var_7.label = &"BR_PAYLOAD/SPAWN_B";
            var_7.path = var_6;
            var_7 thread piccadilly_spawnpatchtriggers( self, var_6 );

            if ( isdefined( var_0 ) && !isplayer( var_0 ) && var_6 == var_0 )
                var_1.dohudplunderroll = var_7;

            var_2[var_2.size] = var_7;

            if ( level.cleanupswaploadoutflags._id_1227B && self.team == game["attackers"] )
            {
                var_8 = scripts\mp\hud_util::createfontstring( "default", 2.0 );
                var_8.archived = 0;
                var_8.label = &"BR_PAYLOAD/SPAWN_B_AIR";
                var_8.path = var_6._id_12295;

                if ( isdefined( var_0 ) && !isplayer( var_0 ) && var_6._id_12295 == var_0 )
                    var_1.dohudplunderroll = var_8;

                var_2[var_2.size] = var_8;
            }
        }

        var_9 = [];

        if ( level.cleanupswaploadoutflags._id_12388 )
        {
            var_10 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( self.team, self.squadindex );

            foreach ( var_12 in var_10 )
            {
                if ( var_12 == self )
                    continue;

                var_13 = scripts\mp\hud_util::createfontstring( "default", 1.5 );
                var_13.archived = 0;
                var_13 setplayernamestring( var_12 );
                var_13.player = var_12;
                var_13.vo_stealth_broken = scripts\mp\hud_util::createfontstring( "default", 1.5 );
                var_13.vo_stealth_broken.archived = 0;
                var_9[var_9.size] = var_13;
            }
        }

        if ( !isdefined( var_1.dohudplunderroll ) )
            var_1.dohudplunderroll = var_2[0];

        var_15 = undefined;
        scripts\mp\utility\player::_freezecontrols( 0, 1, "payload_choice" );
        var_16 = 250;
        var_17 = 300;
        var_18 = undefined;
        var_19 = undefined;
        var_20 = undefined;

        while ( !isdefined( var_15 ) && !scripts\mp\flags::gameflag( "sudden_death_started" ) )
        {
            var_21 = _id_12173( var_2, var_9 );
            var_22 = self getnormalizedmovement();
            var_23 = var_22[0] > 0;
            var_24 = var_22[0] < 0;

            if ( isdefined( var_19 ) )
            {
                if ( gettime() >= var_19 || !var_23 && !var_24 )
                    var_19 = undefined;
            }
            else if ( var_23 )
                var_20 = -1;
            else if ( var_24 )
                var_20 = 1;

            for ( var_25 = 0; var_25 < var_21.size; var_25++ )
            {
                var_26 = var_21[var_25];

                if ( var_1.dohudplunderroll == var_26 )
                {
                    if ( !isdefined( var_26.path ) && !isdefined( var_26.player ) )
                    {
                        var_1.dohudplunderroll = var_2[0];
                        var_27 = undefined;
                        var_28 = undefined;
                        var_18 = undefined;
                        var_20 = undefined;
                    }
                    else if ( isdefined( var_20 ) )
                    {
                        var_29 = var_25 + var_20;

                        if ( var_29 < 0 )
                            var_29 = var_21.size - 1;
                        else if ( var_29 >= var_21.size )
                            var_29 = 0;

                        var_30 = var_21[var_29];
                        var_1.dohudplunderroll = var_30;
                        var_1 scripts\mp\hud_util::setpoint( "CENTER", "CENTER", 0, var_30.yoffset );
                        var_20 = undefined;
                        var_27 = undefined;
                        var_28 = undefined;
                        var_19 = gettime() + var_17;
                    }
                    else
                        var_1 scripts\mp\hud_util::setpoint( "CENTER", "CENTER", 0, var_26.yoffset );

                    break;
                }
            }

            _id_12AFD( var_2, var_9, var_1 );
            _id_125CC( var_1.dohudplunderroll.path.label );
            var_20 = undefined;

            if ( self usebuttonpressed() )
            {
                if ( isdefined( var_18 ) && gettime() >= var_18 )
                {
                    var_31 = var_1.dohudplunderroll;

                    if ( isdefined( var_31.path ) && !istrue( var_31.path.exfil_spawnfunc ) )
                        var_15 = var_31.path;
                    else if ( isdefined( var_31.player ) && isalive( var_31.player ) && !issquadmateindanger( var_31.player ) )
                        var_15 = var_31.player;
                }
                else if ( !isdefined( var_18 ) )
                    var_18 = gettime() + var_16;
            }
            else
                var_18 = undefined;

            waitframe();
        }

        self notify( "spawnChoice" );
        var_1 destroy();

        foreach ( var_33 in var_2 )
            var_33 destroy();

        foreach ( var_33 in var_9 )
        {
            var_33.vo_stealth_broken destroy();
            var_33 destroy();
        }

        return var_15;
    }
    else
    {
        if ( istrue( level.cleanupswaploadoutflags._id_11AA8 ) )
            thread startspectatorview();

        var_15 = undefined;

        while ( !isdefined( var_15 ) && !scripts\mp\flags::gameflag( "sudden_death_started" ) )
        {
            self waittill( "luinotifyserver", var_37, var_38 );

            if ( var_37 == "spawn_choice_path" )
            {
                if ( 0 == var_38 )
                    var_0 = mercymatchending_nuke( "A" );
                else
                    var_0 = mercymatchending_nuke( "B" );

                var_15 = var_0;
            }
            else if ( var_37 == "spawn_hover_path" )
            {
                if ( 0 == var_38 )
                    var_0 = mercymatchending_nuke( "A" );
                else
                    var_0 = mercymatchending_nuke( "B" );

                thread ispointnearcurrentsafecircle( var_0 );
            }
            else if ( var_37 == "spawn_choice_player" )
                var_15 = scripts\mp\playerlogic::getplayerfromclientnum( var_38 );

            if ( isdefined( var_15 ) )
            {
                self notify( "spawnChoice" );
                return var_15;
            }
        }
    }
}

ispointnearcurrentsafecircle( var_0 )
{
    self notify( "followTrackCamThink" );
    self endon( "followTrackCamThink" );
    self endon( "spawnChoice" );

    if ( !isdefined( var_0 ) )
        return;

    if ( !isdefined( self.ispointnearsoloascenderline ) )
        self.ispointnearsoloascenderline = gettime() + 250;
    else
    {
        var_1 = max( 0, self.ispointnearsoloascenderline - gettime() );

        if ( var_1 )
            wait( var_1 );

        self.ispointnearsoloascenderline = undefined;
    }

    _id_125CC( var_0.label );
}

_id_12173( var_0, var_1 )
{
    var_2 = -60;
    var_3 = 30;
    var_4 = var_2;
    var_5 = [];

    foreach ( var_7 in var_0 )
    {
        var_7 scripts\mp\hud_util::setpoint( "CENTER", "CENTER", 0, var_4 );
        var_5[var_5.size] = var_7;
        var_4 = var_4 + var_3;

        foreach ( var_9 in var_1 )
        {
            if ( !isdefined( var_9.player ) )
                continue;

            var_10 = var_9.player unset_relic_noluck();

            if ( var_10 == var_7.path )
            {
                var_9 scripts\mp\hud_util::setpoint( "LEFT", "CENTER", 0, var_4 );
                var_9.vo_stealth_broken scripts\mp\hud_util::setpoint( "RIGHT", "CENTER", 0, var_4 );
                var_5[var_5.size] = var_9;
                var_4 = var_4 + var_3;
            }
        }
    }

    return var_5;
}

_id_12AFD( var_0, var_1, var_2 )
{
    var_3 = -60;
    var_4 = 30;
    var_5 = 0;

    foreach ( var_7 in var_1 )
    {
        if ( !isdefined( var_7.player ) )
        {
            var_7.alpha = 0;
            var_7.vo_stealth_broken.alpha = 0;
            continue;
        }

        if ( !isalive( var_7.player ) )
        {
            var_7.color = ( 1, 0, 0 );
            var_7.vo_stealth_broken.color = ( 1, 0, 0 );
            var_7.vo_stealth_broken.label = &"BR_PAYLOAD/SPAWN_DEAD";
            continue;
        }

        if ( issquadmateindanger( var_7.player ) )
        {
            var_7.color = ( 1, 0, 0 );
            var_7.vo_stealth_broken.color = ( 1, 0, 0 );
            var_7.vo_stealth_broken.label = &"BR_PAYLOAD/SPAWN_COMBAT";
            continue;
        }

        var_7.color = ( 0, 1, 1 );
        var_7.vo_stealth_broken.color = ( 1, 1, 1 );

        if ( var_2.dohudplunderroll == var_7 )
        {
            var_7.vo_stealth_broken.label = &"BR_PAYLOAD/SPAWN_VALID_HOLD";
            var_5 = 1;
            continue;
        }

        var_7.vo_stealth_broken.label = &"BR_PAYLOAD/SPAWN_VALID";
    }

    foreach ( var_10 in var_0 )
    {
        var_11 = !istrue( var_10.path.exfil_spawnfunc );

        if ( !var_11 )
            var_10.color = ( 1, 0, 0 );

        if ( istrue( var_10.path.audio_player_start_mud_loop ) && var_10.path.path.label == "A" )
        {
            if ( var_2.dohudplunderroll == var_10 && var_11 )
                var_10.label = &"BR_PAYLOAD/SPAWN_A_AIR_HOLD";
            else
                var_10.label = &"BR_PAYLOAD/SPAWN_A_AIR";

            continue;
        }

        if ( istrue( var_10.path.audio_player_start_mud_loop ) && var_10.path.path.label == "B" )
        {
            if ( var_2.dohudplunderroll == var_10 && var_11 )
                var_10.label = &"BR_PAYLOAD/SPAWN_B_AIR_HOLD";
            else
                var_10.label = &"BR_PAYLOAD/SPAWN_B_AIR";

            continue;
        }

        if ( var_10.path.label == "A" )
        {
            if ( var_2.dohudplunderroll == var_10 && var_11 )
                var_10.label = &"BR_PAYLOAD/SPAWN_A_HOLD";
            else
                var_10.label = &"BR_PAYLOAD/SPAWN_A";

            continue;
        }

        if ( var_10.path.label == "B" )
        {
            if ( var_2.dohudplunderroll == var_10 && var_11 )
            {
                var_10.label = &"BR_PAYLOAD/SPAWN_B_HOLD";
                continue;
            }

            var_10.label = &"BR_PAYLOAD/SPAWN_B";
        }
    }
}

issquadmateindanger( var_0 )
{
    var_1 = 5000;
    var_2 = 3000;
    var_3 = 450;
    var_4 = 200;
    var_5 = gettime();

    if ( isdefined( var_0 ) && ( isdefined( var_0.lastdamagetime ) && var_0.lastdamagetime + var_1 > var_5 ) || isdefined( var_0.lasttimedamaged ) && var_0.lasttimedamaged + var_1 > var_5 )
        return 1;

    if ( var_0 isonladder() )
        return 1;

    var_0 scripts\mp\battlechatter_mp::validaterecentattackers();

    if ( isdefined( var_0.recentattackers ) && var_0.recentattackers.size > 0 )
        return 1;

    if ( isdefined( var_0.revivent_watchfordeath_safety ) && var_0.revivent_watchfordeath_safety + var_2 > var_5 )
        return 1;

    if ( isdefined( var_0.revivent_watchfordeath_safety ) && isdefined( var_0.revive_wounded_out_handlerr ) && var_0.revivent_watchfordeath_safety > var_0.revive_wounded_out_handlerr || isdefined( var_0.revivent_watchfordeath_safety ) && !isdefined( var_0.revive_wounded_out_handlerr ) )
        return 1;

    var_6 = var_0 getclosestenemy( var_3, var_4, 1 );

    if ( isdefined( var_6 ) )
        return 1;

    if ( isdefined( var_0.vehicle ) )
        return 1;

    if ( var_0 scripts\mp\outofbounds::istouchingoobtrigger() )
        return 1;

    var_7 = var_0 unset_relic_noluck();
    var_8 = var_7.vehicle;

    if ( var_0 istouching( var_7.trigger ) && var_8.status == "contested" )
        return 1;

    if ( !var_0 isonground() )
    {
        var_9 = scripts\mp\gametypes\br_public.gsc::helihint_gotopad( var_0.origin, 0, -200 );

        if ( var_9["fraction"] == 1 )
            return 1;
    }

    return 0;
}

mercymatchending_nuke( var_0 )
{
    foreach ( var_2 in level.cleanupswaploadoutflags.paths )
    {
        if ( var_2.label == var_0 )
            return var_2;
    }

    return undefined;
}

unuseweapon()
{
    if ( scripts\mp\flags::gameflag( "sudden_death_started" ) )
        return;

    var_0 = "ui_br_open_purchase_killstreak";
    var_1 = 0;
    var_2 = "ui_br_purchase_killstreak_response";
    var_3 = 1;
    self setclientomnvar( var_2, var_3 );
    self setclientomnvar( var_0, var_1 );
    scripts\cp_mp\utility\player_utility::_freezecontrols( 1, undefined, "kiosk" );
    var_4 = va_cluster_spawnpoint_valid();

    if ( isplayer( var_4 ) )
        var_5 = var_4 unset_relic_noluck();
    else if ( istrue( var_4.audio_player_start_mud_loop ) )
        var_5 = var_4.path;
    else
        var_5 = var_4;

    self.respawncircleinterppct = var_4;
    useweaponpickups( var_5 );

    if ( isdefined( self ) && !scripts\mp\flags::gameflag( "sudden_death_started" ) )
    {
        var_6 = unset_relic_squadlink( var_4 );
        self notify( "_watchToAutoCloseMenu_end" );
        usb( var_6 );
        scripts\cp_mp\utility\player_utility::_freezecontrols( 0, 1, "kiosk" );
        return 1;
    }
    else
        return 0;
}

usb( var_0 )
{
    var_1 = self;
    level endon( "game_ended" );
    var_1 endon( "disconnect" );
    level endon( "sudden_death_started" );
    var_2 = var_1 scripts\mp\gametypes\br_gulag.gsc::updatex1stashhud( var_0 );
    var_3 = 1.0;
    var_1 scripts\mp\gametypes\br_gulag.gsc::gulagfadetoblack();
    wait( var_3 );
    var_1 scripts\mp\gametypes\br_gulag.gsc::vcloseangles( var_0.origin, var_0.angles );
    scripts\cp_mp\utility\player_utility::_freezecontrols( 1, undefined, "redeploy" );
    var_1 playerhide();
    waitframe();
    var_1 scripts\mp\gametypes\br_public.gsc::vehicle_collision_updateinstanceend();
    var_1 scripts\mp\gametypes\br_public.gsc::unload_vehicles_on_weapons_free_thread();
    scripts\cp_mp\utility\player_utility::_freezecontrols( 0, 1, "redeploy" );
    var_1 playershow();
    var_1 setclientomnvar( "ui_br_transition_type", 0 );
    var_1 setclientomnvar( "ui_show_spectateHud", -1 );
    wait 0.5;
    var_1 scripts\mp\gametypes\br_gulag.gsc::gulagfadefromblack();
}

piccadilly_spawnpatchtriggers( var_0, var_1 )
{
    level endon( "game_ended" );
    var_0 endon( "spawnChoice" );
    var_0 endon( "disconnect" );
    level endon( "sudden_death_started" );

    if ( !isdefined( var_1 ) )
        return;

    var_2 = -1;

    for (;;)
    {
        if ( var_2 != var_1.numplayers[var_0.team] )
        {
            self setvalue( var_1.numplayers[var_0.team] );
            var_2 = var_1.numplayers[var_0.team];
            _id_11ECF( var_1.script_index, var_1.numplayers[var_0.team] );
        }

        waitframe();
    }
}

unreachable_function()
{
    self endon( "disconnect" );
    self endon( "payload_remove_spawn_protection_flying" );

    while ( self.sessionstate != "playing" )
        waitframe();

    thread scripts\cp_mp\parachute::startfreefall( 0, 1, undefined, undefined, 1, 0 );
    self skydive_deployparachute();

    if ( scripts\mp\flags::gameflag( "prematch_done" ) && level.cleanupswaploadoutflags._id_1227E )
    {
        self.toggle_apc_objective = 1;
        thread validtousecosmetic();
        var_0 = gettime() + level.cleanupswaploadoutflags._id_1227E * 1000;

        while ( !self isonground() && gettime() < var_0 )
            waitframe();

        self.toggle_apc_objective = undefined;
        self notify( "payload_remove_spawn_protection_flying" );
    }
}

validtousecosmetic()
{
    self endon( "death_or_disconnect" );
    self endon( "payload_remove_spawn_protection_flying" );
    scripts\engine\utility::_id_12E3F( "weapon_fired", "sudden_death_started" );
    self.toggle_apc_objective = undefined;
    self notify( "payload_remove_spawn_protection_flying" );
}

comparescore( var_0, var_1 )
{
    var_2 = 4.0;
    var_3 = 3.0;
    var_4 = var_2 + var_3;

    if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
    {
        scripts\mp\gametypes\br.gsc::comparescore( var_0 );
        return;
    }

    if ( self isplayerheadless() )
    {
        self setclientomnvar( "ui_br_extended_load_screen", 0 );
        return;
    }

    foreach ( var_6 in level.players )
        var_6 clearsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 1 );

    thread scripts\mp\gametypes\br.gsc::comparescriptindexobscuredspawns();

    if ( !isdefined( self.playerstartjailsetcontrols ) )
    {
        var_8 = modifybrvehicledamage( self.team, var_1 );
        var_9 = var_8 > 0;
        var_10 = undefined;
        var_11 = max( var_8 - var_4, 0 );

        if ( var_9 )
        {
            var_10 = var_8 * 1000;
            var_12 = scripts\mp\utility\teams::getteamdata( self.team, "teamCount" );

            if ( var_12 == 1 )
            {
                self setclientomnvar( "ui_show_spectateHud", self getentitynumber() );
                scripts\mp\gametypes\br_spectate.gsc::unload_vehicles_on_weapons_free();
                scripts\mp\gametypes\br.gsc::spawnintermission( self.origin + ( 0, 0, 100 ), self.angles );
                scripts\mp\spectating::setdisabled();
                scripts\mp\utility\lower_message::setlowermessageomnvar( 9, int( gettime() + var_10 ) );
            }

            scripts\mp\utility\lower_message::setlowermessageomnvar( 9, int( gettime() + var_10 ) );
            wait( var_11 );
        }

        var_13 = gettime();
        var_14 = va_cluster_spawnpoint_valid();

        if ( isplayer( var_14 ) )
        {
            var_15 = var_14 unset_relic_noluck();
            var_14 thread scripts\mp\rank::giverankxp( "br_payload_squadmate_redeploy", 20 );
            var_14 thread scripts\mp\rank::scoreeventpopup( "br_payload_squadmate_redeploy" );
        }
        else if ( istrue( var_14.audio_player_start_mud_loop ) )
            var_15 = var_14.path;
        else
            var_15 = var_14;

        self.respawncircleinterppct = var_14;
        useweaponpickups( var_15 );
        var_16 = ( gettime() - var_13 ) / 1000.0;
        self.wait_display_pavelow_boss_health_bar = unset_relic_squadlink( var_14 );

        if ( isdefined( self.wait_display_pavelow_boss_health_bar ) )
            self.wait_display_pavelow_boss_health_bar.index = -1;

        var_17 = scripts\mp\gametypes\br_public.gsc::vandalize_attack_nodes( self.wait_display_pavelow_boss_health_bar.origin, self.wait_display_pavelow_boss_health_bar.height );
        var_18 = getdvarint( "scr_br_drop_prespawn_timeout_ms", 9000 );
        scripts\mp\gametypes\br_public.gsc::vandalize_internal( var_17, var_18, 1, 0, var_10 );

        if ( var_9 )
        {
            var_19 = 1.0;
            var_20 = 0.25;
            var_21 = var_19 - var_20;
            thread scripts\mp\gametypes\br_gulag.gsc::fadeoutin( var_19 );
            wait( var_21 );
            scripts\mp\gametypes\br_spectate.gsc::unload_vehicles_on_weapons_free();
            scripts\mp\gametypes\br.gsc::spawnintermission( var_17, self.wait_display_pavelow_boss_health_bar.angles );
            scripts\mp\spectating::setdisabled();
            scripts\mp\gametypes\br.gsc::convoy_left_gulag_monitor( var_17[0], var_17[1], level.get_players_in_mortar_range );
            self setclientomnvar( "ui_br_transition_type", 2 );
            wait( var_20 );
            var_22 = max( var_8 - var_11 - var_16 - var_19, 0 );
            wait( var_22 );
            scripts\mp\gametypes\br_public.gsc::unload_vehicles_on_weapons_free_thread();
            self setclientomnvar( "ui_show_spectateHud", -1 );
        }
        else
        {
            var_23 = 0.5;
            scripts\mp\gametypes\br.gsc::convoy_left_gulag_monitor( var_17[0], var_17[1], level.get_players_in_mortar_range );
            self setclientomnvar( "ui_br_transition_type", 4 );
            wait( var_23 );
            scripts\mp\gametypes\br.gsc::spawnintermission( var_17, self.wait_display_pavelow_boss_health_bar.angles );
            scripts\mp\spectating::setdisabled();
            scripts\mp\gametypes\br_public.gsc::vehicle_collision_updateinstanceend();
        }
    }
    else
    {
        self.playerstartjailsetcontrols = undefined;
        scripts\mp\gametypes\br_public.gsc::vehicle_collision_updateinstanceend();
    }

    scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
    self freezecontrols( 0 );
}

stop_players_inside_death_or_disconnect_monitor()
{
    var_0 = minshotstostage2acc( self.team, self.squadindex );
    var_1 = level.cleanupswaploadoutflags.paths[var_0];
    useweaponpickups( var_1 );
    self._id_122EA = unset_relic_squadlink( var_1 );
}

delay_push_player_clear_door_way( var_0 )
{
    if ( level.cleanupswaploadoutflags._id_1227C < 0 )
        return 0;

    if ( !isdefined( var_0.do_ads_hint ) )
        return 1;

    return var_0.do_ads_hint <= level.cleanupswaploadoutflags._id_1227C;
}

unset_relic_squadlink( var_0 )
{
    var_1 = var_0;

    if ( isplayer( var_0 ) )
        var_1 = var_0 unset_relic_noluck();
    else if ( istrue( var_0.audio_player_start_mud_loop ) )
        var_1 = var_0.path;

    var_2 = self.team == game["attackers"] && delay_push_player_clear_door_way( var_1 ) || istrue( var_0.audio_player_start_mud_loop );

    if ( level.cleanupswaploadoutflags.movingplatform_playerunlink && !var_2 )
    {
        if ( isplayer( var_0 ) )
        {
            unlocked_armory( var_0 );
            [var_4, var_5] = var_0 unset_relic_landlocked( var_0.origin, var_0.angles );
        }
        else
            var_4 = unset_relic_healthpacks( var_1 );

        if ( isdefined( var_4 ) )
            return var_4;
    }

    var_6 = var_1._id_12344[var_1._id_12343].points[var_1.friendly_hvi_vehicle_extra_riders_getin_scene];

    if ( var_2 )
        [var_8, var_9] = unset_relic_team_proximity( var_1 );
    else if ( level.cleanupswaploadoutflags.watchminigunweapon )
        [var_8, var_9] = unset_relic_oneclip( var_1 );
    else
    {
        var_11 = var_1._id_12344[var_1._id_12343].points[var_1.friendly_hvi_vehicle_extra_riders_getin_scene + 1];
        var_12 = vectornormalize( var_11 - var_6 );

        if ( self.team == game["defenders"] )
        {
            var_13 = level.cleanupswaploadoutflags._id_122A4;
            var_9 = level.cleanupswaploadoutflags._id_122C8;
            var_14 = level.cleanupswaploadoutflags._id_122F0;
        }
        else
        {
            var_13 = level.cleanupswaploadoutflags._id_122A3;
            var_9 = level.cleanupswaploadoutflags._id_122C7;
            var_14 = level.cleanupswaploadoutflags._id_122EF;
            var_12 = var_12 * -1;
        }

        var_15 = var_6 + var_12 * var_13;
        var_16 = ( 0, randomintrange( 0, 360 ), 0 );
        var_17 = randomfloat( var_14 );
        var_18 = anglestoforward( var_16 ) * -1;
        var_19 = var_18 * var_17;
        var_8 = var_15 + var_19;
    }

    if ( !scripts\mp\gametypes\br_circle.gsc::rear_spotlight_model( var_8, 0 ) )
    {
        var_8 = scripts\mp\gametypes\br_c130.gsc::_id_120ED( var_6, var_8 );
        var_20 = vectornormalize( var_6 - var_8 );
        var_8 = var_8 + var_20 * 100;
    }

    var_8 = scripts\mp\gametypes\br_public.gsc::helihint_deposit( var_8 );
    var_16 = vectortoangles( var_6 - var_8 );
    var_4 = spawnstruct();
    var_4.origin = var_8 + ( 0, 0, var_9 );
    var_4.angles = var_16;
    var_4.height = var_9;
    return var_4;
}

unset_relic_team_proximity( var_0 )
{
    var_1 = unset_relic_healthpacks( var_0 );
    var_2 = var_1.origin;
    var_3 = max( randomfloatrange( -200, 0 ), 100 );
    var_4 = level.cleanupswaploadoutflags._id_122C7 + var_3;
    return [ ( var_2[0], var_2[1], 0 ), var_4 ];
}

unset_relic_oneclip( var_0 )
{
    var_1 = 20;
    var_2 = 1;
    var_3 = getdvarfloat( "scr_br_payload_spawn_degrees", var_1 );
    var_4 = getdvarfloat( "scr_br_payload_spawn_degrees", var_2 );
    var_5 = var_0._id_12344[var_0._id_12343].points[var_0.friendly_hvi_vehicle_extra_riders_getin_scene];

    if ( !isdefined( var_0._id_1227D ) || var_0._id_1227D != var_0.friendly_hvi_vehicle_extra_riders_getin_scene )
    {
        var_6 = var_0._id_12344[var_0._id_12343].points[var_0.friendly_hvi_vehicle_extra_riders_getin_scene + 1];
        var_7 = vectornormalize( var_6 - var_5 );
        var_0._id_1227D = var_0.friendly_hvi_vehicle_extra_riders_getin_scene;
        var_0._id_1230F = vectortoyaw( var_7 );
        var_0._id_1230E = vectortoyaw( -1 * var_7 );
        var_0._id_12311 = -1 * var_3;
        var_0._id_12310 = -1 * var_3;
    }

    if ( self.team == game["defenders"] )
    {
        var_8 = level.cleanupswaploadoutflags._id_122A4;
        var_9 = level.cleanupswaploadoutflags._id_122C8;
        var_10 = level.cleanupswaploadoutflags._id_122F0;
        var_11 = var_0._id_1230F + var_0._id_12311;
        var_0._id_12311 = var_0._id_12311 + var_4;

        if ( var_0._id_12311 > var_3 )
            var_0._id_12311 = -1 * var_3;
    }
    else
    {
        var_8 = level.cleanupswaploadoutflags._id_122A3;
        var_9 = level.cleanupswaploadoutflags._id_122C7;
        var_10 = level.cleanupswaploadoutflags._id_122EF;
        var_11 = var_0._id_1230E + var_0._id_12310;
        var_0._id_12310 = var_0._id_12310 + var_4;

        if ( var_0._id_12310 > var_3 )
            var_0._id_12310 = -1 * var_3;
    }

    var_12 = var_5[0] + var_8 * cos( var_11 );
    var_13 = var_5[1] + var_8 * sin( var_11 );
    return [ ( var_12, var_13, 0 ), var_9 ];
}

unset_relic_healthpacks( var_0 )
{
    var_1 = self.team;
    var_2 = isdefined( level.cleanupswaploadoutflags._id_124A6 ) && isdefined( self.cameraent );

    if ( isdefined( var_0.vehicle ) )
        var_3 = var_0.vehicle.do_ads_hint;
    else
        var_3 = 0;

    var_4 = var_0.freeze_bomb_vest_timer;

    if ( !isdefined( var_0._id_122F6[var_1] ) || var_3 != var_0._id_12293[var_1] || !var_2 && istrue( var_0._id_124A5 ) )
    {
        if ( var_2 )
        {
            var_0._id_122F6[var_1] = scripts\engine\utility::array_randomize( manifest_music_started( var_1, var_4 ) );
            var_0._id_124A5 = 1;
        }
        else
        {
            var_0._id_122F6[var_1] = scripts\engine\utility::array_randomize( mangagedeathsdoor( var_1, var_4, var_3 ) );
            var_0._id_124A5 = 0;
        }

        if ( var_0._id_122F6[var_1].size == 0 )
        {
            iprintlnbold( "Spawns not setup for this path" );
            return;
        }

        var_0._id_122CB[var_1] = randomint( var_0._id_122F6[var_1].size );
        var_0.spawncount[var_1] = 0;
        var_0.spawntime[var_1] = gettime();
        var_0._id_12293[var_1] = var_3;
    }

    if ( var_0._id_122F6[var_1].size == 0 )
        iprintlnbold( "Spawns not setup for this path" );
    else
    {
        var_5 = var_0._id_122CB[var_1];
        var_6 = var_0._id_122F6[var_1][var_5];
        var_7 = level.cleanupswaploadoutflags.movingplatform_playerlink;

        if ( isdefined( var_6.radius ) && var_6.radius < 200 )
            var_7 = var_7 / 2;

        if ( var_0.spawntime[var_1] + 1000 < gettime() || var_0.spawncount[var_1] >= var_7 )
        {
            var_0.spawncount[var_1] = 0;
            var_0._id_122CB[var_1]++;

            if ( var_0._id_122CB[var_1] >= var_0._id_122F6[var_1].size )
                var_0._id_122CB[var_1] = 0;

            var_5 = var_0._id_122CB[var_1];
            var_6 = var_0._id_122F6[var_1][var_5];
        }

        if ( !isdefined( var_6.angles ) )
            var_6.angles = ( 0, 0, 0 );

        unlocked_armory( var_6 );
        [var_9, var_10] = unset_relic_landlocked( var_6.origin, var_6.angles, var_0.spawncount[var_1] );
        var_0.spawntime[var_1] = gettime();
        var_0.spawncount[var_1] = var_10 + 1;
    }
}

unset_relic_landlocked( var_0, var_1, var_2, var_3 )
{
    var_4 = 32;
    var_5 = 8;
    var_6 = 80;
    var_7 = 20;
    var_8 = 5;
    var_9 = -200;

    if ( !isdefined( var_2 ) )
        var_2 = 0;

    var_10 = scripts\engine\trace::create_contents( 1, 1, 1, 1, 0, 1, 1 );
    var_11 = isscriptabledefined() && getdvarint( "scr_br_payload_spawn_navmesh", 0 );
    var_12 = 0;
    var_13 = 0;
    var_14 = var_2;

    for (;;)
    {
        var_15 = manageworldspawnedprojectiles( var_0, var_1[1], var_14 );

        if ( var_11 && !ispointonnavmesh( var_15 ) )
            var_15 = getclosestpointonnavmesh( var_15 );

        var_16 = var_15 + ( 0, 0, var_7 );
        var_17 = var_15 + ( 0, 0, var_9 );
        var_18 = scripts\engine\trace::player_trace( var_16, var_17, var_1, self, var_10 );
        var_12++;

        if ( var_18["fraction"] == 0 )
        {
            if ( !istrue( var_3 ) && var_12 >= var_5 )
            {
                var_12 = 0;
                waitframe();
            }

            var_16 = var_15 + ( 0, 0, var_6 );
            var_17 = var_15 + ( 0, 0, var_9 );
            var_18 = scripts\engine\trace::player_trace( var_16, var_17, var_1, self, var_10 );
            var_12++;
        }

        if ( var_18["fraction"] == 0 )
        {
            if ( !istrue( var_3 ) && var_12 >= var_5 )
            {
                var_12 = 0;
                waitframe();
            }

            var_16 = var_15 + ( 0, 0, var_8 );
            var_17 = var_15 + ( 0, 0, var_9 );
            var_18 = scripts\engine\trace::player_trace( var_16, var_17, var_1, self, var_10 );
            var_12++;
        }

        if ( var_18["fraction"] > 0 && var_18["fraction"] != 1 )
        {
            if ( !istrue( var_3 ) && var_12 >= var_5 )
            {
                var_12 = 0;
                waitframe();
            }

            var_19 = var_0 + ( 0, 0, 60 );
            var_20 = var_18["position"] + ( 0, 0, 60 );
            var_21 = scripts\engine\trace::ray_trace( var_19, var_20, self, var_10 );
            var_12++;

            if ( var_21["fraction"] != 1 )
            {
                if ( !istrue( var_3 ) && var_12 >= var_5 )
                {
                    var_12 = 0;
                    waitframe();
                }

                var_19 = var_0 + ( 0, 0, 25 );
                var_20 = var_18["position"] + ( 0, 0, 60 );
                var_21 = scripts\engine\trace::ray_trace( var_19, var_20, self, var_10 );
                var_12++;
            }

            if ( var_21["fraction"] == 1 )
            {
                var_22 = spawnstruct();
                var_22.origin = var_18["position"];
                var_22.angles = var_1;
                var_22.height = 0;
                return [ var_22, var_14 ];
            }
        }

        var_14++;
        var_13++;

        if ( var_13 >= var_4 )
        {
            var_15 = var_0;

            if ( var_11 && !ispointonnavmesh( var_15 ) )
                var_15 = getclosestpointonnavmesh( var_15 );

            var_22 = spawnstruct();
            var_22.origin = var_15;
            var_22.angles = var_1;
            var_22.height = 0;
            return [ var_22, var_2 ];
        }

        if ( !istrue( var_3 ) && var_12 >= var_5 )
        {
            var_12 = 0;
            waitframe();
        }
    }
}

unlocked_armory( var_0 )
{
    foreach ( var_2 in level.cleanupswaploadoutflags.paths )
        self.enemy_sentry_debug[var_2.label] = var_0.enemy_sentry_debug[var_2.label];
}

manifest_music_started( var_0, var_1 )
{
    var_2 = level.cleanupswaploadoutflags._id_124A6[var_0];
    var_3 = [];

    foreach ( var_5 in var_2 )
    {
        if ( var_5.script_group == var_1 )
            var_3[var_3.size] = var_5;
    }

    return var_3;
}

mangagedeathsdoor( var_0, var_1, var_2 )
{
    var_3 = level.cleanupswaploadoutflags._id_122F6[var_0];
    var_4 = [];

    foreach ( var_6 in var_3 )
    {
        if ( var_6.script_group == var_1 && var_6.script_index == var_2 )
            var_4[var_4.size] = var_6;
    }

    return var_4;
}

manageworldspawnedprojectiles( var_0, var_1, var_2 )
{
    var_3 = 10;
    var_4 = 100.0;
    var_5 = 100.0;
    var_6 = 90;
    var_7 = 10.0;
    var_8 = 360.0 / var_3;
    var_9 = int( var_2 / var_3 );
    var_10 = var_2 - var_9 * var_3;
    var_11 = var_1 + var_6 + ( var_10 * var_8 + var_9 * var_7 );
    var_12 = var_4 + var_9 * var_5;
    var_13 = ( 0.0, var_11, 0.0 );
    var_14 = anglestoforward( var_13 );
    var_15 = var_0 + var_14 * var_12;
    return var_15;
}

mercymatchending_time( var_0 )
{
    foreach ( var_2 in level.cleanupswaploadoutflags.paths )
    {
        if ( var_2.script_index == var_0 )
            return var_2;
    }
}

mediumstatehealthratio( var_0 )
{
    foreach ( var_2 in level.cleanupswaploadoutflags.paths )
    {
        if ( var_2.freeze_bomb_vest_timer == var_0 )
            return var_2;
    }
}

get_last_stand_id( var_0, var_1 )
{
    level notify( "debugSpawnOrigin" );
    level endon( "debugSpawnOrigin" );

    for (;;)
        waitframe();
}

useweaponpickups( var_0 )
{
    var_1 = 500;

    if ( isdefined( self.teleport_room_doors ) && self.teleport_room_doors == var_0 )
        return;

    var_2 = self.teleport_room_doors;
    self.teleport_room_doors = var_0;
    self.teleport_reference_juggmaze = gettime() + var_1;
    _id_11ECC( var_0.label != "A" );
}

unset_relic_noluck()
{
    return self.teleport_room_doors;
}

unset_relic_noregen()
{
    return self.teleport_reference_juggmaze;
}

modifyplayerdamage( var_0 )
{
    var_1 = var_0.damage;

    if ( istrue( self.toggle_custom_death_anim_settings ) || istrue( self.toggle_apc_objective ) )
    {
        var_1 = 0;

        if ( isdefined( var_0.attacker ) && isplayer( var_0.attacker ) )
            var_0.attacker scripts\mp\damagefeedback::updatedamagefeedback( "hitspawnprotect" );
    }

    if ( self.team == game["attackers"] )
    {
        var_2 = isdefined( var_0.attacker ) && var_0.attacker infilvideocompletecallback() && istrue( var_0.attacker.toggle_switch_model );

        if ( var_2 )
            var_1 = int( min( var_1, level.cleanupswaploadoutflags.setarenaomnvarplayertype ) );
    }

    if ( isdefined( var_0.attacker ) && var_0.attacker infilvideocompletecallback() && isdefined( var_0.attacker.path ) )
        var_1 = 0;

    if ( getdvarint( "scr_br_payload_mod_gunner_dmg", 1 ) && isdefined( var_0.victim.munitions_override_waittill ) )
    {
        if ( isplayer( var_0.attacker ) && scripts\engine\utility::isbulletdamage( var_0.meansofdeath ) && var_1 < 100 )
        {
            var_3 = scripts\mp\utility\damage::isheadshot( var_0.shitloc, var_0.meansofdeath, var_0.attacker );
            var_4 = weaponclass( var_0.objweapon ) == "spread";

            if ( !var_3 || !var_4 )
                var_1 = var_1 * level.music_timer_10seconds;
        }
    }

    return var_1;
}

timevotrigger( var_0, var_1 )
{
    if ( scripts\mp\flags::gameflag( "prematch_done" ) )
    {
        var_2 = var_0.attacker;

        if ( !isdefined( var_2 ) || !isplayer( var_2 ) )
        {
            if ( isdefined( var_0.attacker ) && isdefined( var_0.attacker.owner ) && isplayer( var_0.attacker.owner ) )
                var_2 = var_0.attacker.owner;
            else if ( isdefined( var_0.inflictor ) && isplayer( var_0.inflictor ) )
                var_2 = var_0.inflictor;
            else if ( isdefined( var_0.inflictor ) && isdefined( var_0.inflictor.owner ) && isplayer( var_0.inflictor.owner ) )
                var_2 = var_0.inflictor.owner;
            else
                var_2 = undefined;
        }

        if ( isdefined( var_2 ) && var_2 != self )
        {
            var_3 = 0;

            if ( var_2.team == game["attackers"] )
                var_3 = getdvarint( "scr_br_payload_attacker_kill_pay_scale", 5 );
            else
                var_3 = getdvarint( "scr_br_payload_defender_kill_pay_scale", 3 );

            if ( update_timer_for_bomb_case_detonator_holder( var_2 ) )
                var_3 = var_3 + 4;

            timeramount( var_2, var_3, "payload_kill" );
        }
    }

    return scripts\mp\gametypes\br.gsc::comparekillcounts( var_0, var_1 );
}

playerdropplunderondeath( var_0, var_1 )
{
    if ( self.team == game["attackers"] )
    {
        if ( getdvarint( "scr_br_payload_attacker_plunderdrop", 1 ) == 0 )
            return 1;

        var_2 = getdvarint( "scr_br_payload_attacker_saveshare", 7.0 );
        var_3 = getdvarint( "scr_br_payload_attacker_taxshare", 1.0 );
        var_4 = getdvarint( "scr_br_payload_attacker_dropshare", 2.0 );
    }
    else
    {
        if ( getdvarint( "scr_br_payload_defender_plunderdrop", 1 ) == 0 )
            return 1;

        var_2 = getdvarint( "scr_br_payload_defender_saveshare", 7.0 );
        var_3 = getdvarint( "scr_br_payload_defender_taxshare", 1.0 );
        var_4 = getdvarint( "scr_br_payload_defender_dropshare", 2.0 );
    }

    var_5 = var_2 + var_3 + var_4;
    var_6 = var_2 / var_5;
    var_7 = var_3 / var_5;
    var_8 = var_4 / var_5;

    if ( isdefined( self.plundercount ) && self.plundercount > 0 )
        var_9 = self.plundercount;
    else
        var_9 = 0;

    var_10 = int( min( var_9, max( 2, int( var_9 * var_6 ) ) ) + 0.5 );
    var_11 = int( max( 1, int( var_9 * var_8 ) ) );
    self.plundercountondeath = var_10;
    var_12 = spawnstruct();
    var_12._id_120B9 = 1;
    scripts\mp\gametypes\br_plunder.gsc::playersetplundercount( var_10, var_12 );

    if ( var_11 <= 0 )
        return 1;

    scripts\mp\gametypes\br_plunder.gsc::heli_leaving_monitor( var_11, var_0 );
    return 1;
}

toggle_wind( var_0, var_1, var_2, var_3 )
{
    if ( !level.cleanupswaploadoutflags.timer_active )
        return;

    if ( var_0 )
    {
        var_4 = self.init_gasmask.touchlist[self.team];
        timeremaining( var_4, var_2, "vehicle_tick_att" );
    }

    if ( var_1 || isdefined( self.processscrapassist ) )
    {
        var_4 = self.init_gasmask.touchlist[game["defenders"]];
        timeremaining( var_4, var_3, "vehicle_tick_def" );
    }
}

timeremaining( var_0, var_1, var_2 )
{
    var_3 = getdvarfloat( "scr_br_plunder_while_spectating", 0.4 );
    var_4 = 0;

    foreach ( var_6 in var_0 )
    {
        if ( isbot( var_6.player ) && scripts\mp\gametypes\br_public.gsc::rear_minigun_model() )
            continue;

        var_7 = var_1;

        if ( !scripts\mp\utility\player::isreallyalive( var_6.player ) )
            var_7 = int( max( var_1 * var_3, 1 ) );

        if ( !isdefined( var_6.player.plundercount ) )
            var_6.player.plundercount = 0;

        var_6.player scripts\mp\gametypes\br_plunder.gsc::updateprestreamrespawn( var_7 );
        level.br_plunder.vehicle_occupancy_friendlystatuschangedcallback = level.br_plunder.vehicle_occupancy_friendlystatuschangedcallback + var_7;
        var_6.player scripts\mp\gametypes\br_analytics.gsc::_id_127D1( var_6.player, var_2, var_7 );
    }
}

timeramount( var_0, var_1, var_2 )
{
    var_3 = getdvarfloat( "scr_br_plunder_while_spectating", 0.5 );
    var_4 = 0;

    if ( isbot( var_0 ) && scripts\mp\gametypes\br_public.gsc::rear_minigun_model() )
        return;

    var_5 = var_1;

    if ( !scripts\mp\utility\player::isreallyalive( var_0 ) )
        var_5 = int( var_1 * var_3 );

    if ( !isdefined( var_0.plundercount ) )
        var_0.plundercount = 0;

    var_0 scripts\mp\gametypes\br_plunder.gsc::updateprestreamrespawn( var_5 );
    level.br_plunder.vehicle_occupancy_friendlystatuschangedcallback = level.br_plunder.vehicle_occupancy_friendlystatuschangedcallback + var_5;
    var_0 scripts\mp\gametypes\br_analytics.gsc::_id_127D1( var_0, var_2, var_5 );
}

playerzombiepowers()
{
    if ( !level.cleanupswaploadoutflags._id_1231B )
        return;

    foreach ( var_1 in level.cleanupswaploadoutflags.paths )
    {
        [var_3, var_4] = start_countdown_till_sequence_is_cleared( var_1 );
        var_1._id_1231A = [];
        var_1._id_1231A[game["attackers"]] = [];
        var_1._id_1231A[game["defenders"]] = [];

        for ( var_5 = 0; var_5 < var_3; var_5++ )
        {
            var_6 = forcearmordropondeath( var_1 );
            var_1._id_1231A[game["attackers"]][var_5] = var_6;
        }

        for ( var_5 = 0; var_5 < var_4; var_5++ )
        {
            var_6 = forcearmordropondeath( var_1 );
            var_1._id_1231A[game["defenders"]][var_5] = var_6;
        }
    }

    if ( istrue( level.cleanupswaploadoutflags.spawnzonewarningenabled ) )
    {
        level.cleanupswaploadoutflags.spawnwarningfxranges = [ 2000, 2500, 2800, 3000, 3500 ];
        level._effect["payload_oob_2000"] = loadfx( "vfx/iw8_br/gameplay/payload/vfx_br_payload_oob_circle_2000" );
        level._effect["payload_oob_2500"] = loadfx( "vfx/iw8_br/gameplay/payload/vfx_br_payload_oob_circle_2500" );
        level._effect["payload_oob_2800"] = loadfx( "vfx/iw8_br/gameplay/payload/vfx_br_payload_oob_circle_2800" );
        level._effect["payload_oob_3000"] = loadfx( "vfx/iw8_br/gameplay/payload/vfx_br_payload_oob_circle_3000" );
        level._effect["payload_oob_3500"] = loadfx( "vfx/iw8_br/gameplay/payload/vfx_br_payload_oob_circle_3500" );
    }
}

forcearmordropondeath( var_0 )
{
    var_1 = getmaxobjectivecount( 0, 0, level.cleanupswaploadoutflags._id_12319 );
    var_1 setmapcirclecolorindex( 0 );
    var_1 hide();
    var_1.enabled = 0;
    var_1.path = var_0;
    return var_1;
}

start_countdown_till_sequence_is_cleared( var_0 )
{
    var_1 = [];
    var_1[game["attackers"]] = [];
    var_1[game["defenders"]] = [];

    foreach ( var_3 in level.cleanupswaploadoutflags._id_1231A )
    {
        if ( var_3.script_group != var_0.freeze_bomb_vest_timer )
            continue;

        var_4 = scripts\engine\utility::ter_op( var_3.team == "allies", game["attackers"], game["defenders"] );

        if ( !isdefined( var_1[var_4][var_3.script_index] ) )
        {
            var_1[var_4][var_3.script_index] = 1;
            continue;
        }

        var_1[var_4][var_3.script_index]++;
    }

    var_6 = 0;

    foreach ( var_8 in var_1[game["defenders"]] )
    {
        if ( var_8 > var_6 )
            var_6 = var_8;
    }

    var_10 = 0;

    foreach ( var_8 in var_1[game["attackers"]] )
    {
        if ( var_8 > var_10 )
            var_10 = var_8;
    }

    return [ var_6, var_10 ];
}

forced_aitype_armored( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = spawn( "trigger_radius", var_0, 0, var_1, 2000 );
    var_5.targetname = "OutOfBounds";
    var_5.radius = var_1;
    var_5.script_team = var_2;
    var_5._id_12315 = var_3;

    if ( !istrue( var_4 ) )
        thread scripts\mp\outofbounds::watchoobtrigger( var_5 );

    return var_5;
}

_id_11F8A( var_0, var_1 )
{
    if ( !level.cleanupswaploadoutflags._id_1231B )
        return;

    _id_11F8B( var_0, var_1, game["attackers"] );
    _id_11F8B( var_0, var_1, game["defenders"] );
    level.outofboundstriggers = getentarray( "OutOfBounds", "targetname" );
}

_id_11F8B( var_0, var_1, var_2 )
{
    var_3 = make_pilot_invincible( var_2 );
    var_4 = mangagedeathsdoor( var_2, var_0.freeze_bomb_vest_timer, var_1 );
    var_5 = minigun_sweep_to_loc( var_4, var_0, var_1, var_2 );
    [var_7, var_8] = marksenabled( var_4 );

    for ( var_9 = 0; var_9 < var_0._id_1231A[var_2].size; var_9++ )
    {
        var_10 = var_0._id_1231A[var_2][var_9];

        if ( isdefined( var_10.trigger ) )
            getclocksoundaliasfortimeleft( var_10.trigger );

        if ( var_9 < var_5.size )
        {
            var_11 = var_5[var_9];
            var_10.origin = ( var_11.origin[0], var_11.origin[1], var_11.radius );
            var_12 = ( var_11.origin[0], var_11.origin[1], var_7 + -1000 );
            var_10.trigger = forced_aitype_armored( var_12, var_11.radius, var_3, var_10 );

            if ( istrue( level.cleanupswaploadoutflags.spawnzonewarningenabled ) )
            {
                var_10.warningtrigger = forced_aitype_armored( var_12, int( var_11.radius * 1.2 ), var_3, var_10, 1 );
                scripts\mp\utility\trigger::makeenterexittrigger( var_10.warningtrigger, ::spawnzonewarningenter, ::spawnzonewarningexit );
                var_13 = getspawnwarningfxname( var_11.radius );
                var_14 = scripts\mp\gametypes\br_public.gsc::helihint_deposit( var_11.origin );
                var_10.warningfx = spawnfx( scripts\engine\utility::getfx( var_13 ), var_14, ( 1, 0, 0 ), ( 0, 0, 1 ) );

                if ( isdefined( var_10.warningfx ) )
                    var_10.warningfx hide();
            }

            if ( !var_10.enabled )
            {
                if ( !level.cleanupswaploadoutflags._id_12317 )
                    var_10 showtoteam( var_3 );

                var_10.enabled = 1;
            }

            var_10.enabled = 1;
            continue;
        }

        var_10 hide();
        var_10.enabled = 0;
    }
}

getclocksoundaliasfortimeleft( var_0 )
{
    foreach ( var_2 in var_0.entstouching )
    {
        if ( isdefined( var_2.oob ) && var_2.oob > 0 )
            scripts\mp\outofbounds::disableoob( var_2 );

        var_2.oobtriggers = scripts\engine\utility::array_remove( var_2.oobtriggers, var_0 );

        if ( var_2.oobtriggers.size == 0 )
            var_2.oobtriggers = undefined;
    }

    var_0 notify( "clearOOB" );
    var_0 delete();
}

give_primary_attachments_only( var_0 )
{
    if ( !level.cleanupswaploadoutflags._id_1231B )
        return;

    foreach ( var_2 in var_0._id_1231A[game["attackers"]] )
    {
        if ( isdefined( var_2.trigger ) )
            getclocksoundaliasfortimeleft( var_2.trigger );

        if ( isdefined( var_2.warningtrigger ) )
            var_2.warningtrigger delete();

        if ( isdefined( var_2.warningfx ) )
            var_2.warningfx delete();

        var_2.enabled = 0;
        var_2 hide();
    }

    foreach ( var_2 in var_0._id_1231A[game["defenders"]] )
    {
        if ( isdefined( var_2.trigger ) )
            getclocksoundaliasfortimeleft( var_2.trigger );

        if ( isdefined( var_2.warningtrigger ) )
            var_2.warningtrigger delete();

        if ( isdefined( var_2.warningfx ) )
            var_2.warningfx delete();

        var_2.enabled = 0;
        var_2 hide();
    }
}

minigun_sweep_to_loc_safe( var_0, var_1, var_2 )
{
    if ( !isdefined( var_1 ) )
        var_1 = 0;

    var_3 = [];

    if ( isdefined( level.cleanupswaploadoutflags._id_1231A ) && level.cleanupswaploadoutflags._id_1231A.size > 0 )
    {
        foreach ( var_5 in level.cleanupswaploadoutflags._id_1231A )
        {
            if ( var_5.script_group != var_0.freeze_bomb_vest_timer )
                continue;

            if ( var_5.script_index != var_1 )
                continue;

            var_6 = scripts\engine\utility::ter_op( var_5.team == "allies", game["attackers"], game["defenders"] );

            if ( var_6 != var_2 )
                continue;

            var_3[var_3.size] = var_5;
        }
    }

    return var_3;
}

minigun_sweep_to_loc( var_0, var_1, var_2, var_3 )
{
    var_4 = minigun_sweep_to_loc_safe( var_1, var_2, var_3 );

    if ( var_4.size == 0 )
    {
        [var_6, var_7] = marksenabled( var_0 );
        var_8 = ( var_7[0], var_7[1], var_6 );
        var_4[0] = spawnstruct();
        var_4[0].origin = var_8;
        var_4[0].radius = level.cleanupswaploadoutflags._id_12319;
    }

    return var_4;
}

marksenabled( var_0 )
{
    var_1 = ( 0, 0, 0 );
    var_2 = undefined;

    foreach ( var_4 in var_0 )
    {
        var_1 = var_1 + var_4.origin;

        if ( !isdefined( var_2 ) || var_4.origin[2] < var_2 )
            var_2 = var_4.origin[2];
    }

    var_6 = var_1 / var_0.size;
    return [ var_2, var_6 ];
}

showtoteam( var_0 )
{
    self hide();
    var_1 = scripts\mp\utility\teams::getteamdata( var_0, "players" );

    foreach ( var_3 in var_1 )
        self showtoplayer( var_3 );
}

valve_steam_on()
{
    self endon( "death_or_disconnect" );
    self endon( "payload_remove_spawn_protection" );
    self.toggle_custom_death_anim_settings = 1;
    thread vampirepoints();
    var_0 = unset_relic_steelballs();

    while ( isdefined( var_0 ) && isdefined( var_0.trigger ) && self istouching( var_0.trigger ) )
        waitframe();

    self.toggle_custom_death_anim_settings = undefined;
    self notify( "payload_remove_spawn_protection" );
}

unset_relic_steelballs()
{
    var_0 = unset_relic_noluck();
    var_1 = var_0._id_1231A[self.team];

    if ( isdefined( var_1 ) && var_1.size > 0 )
    {
        foreach ( var_3 in var_1 )
        {
            if ( !istrue( var_3.enabled ) )
                continue;

            if ( self istouching( var_3.trigger ) )
                return var_3;
        }
    }
}

vampirepoints()
{
    self endon( "death_or_disconnect" );
    self endon( "payload_remove_spawn_protection" );
    scripts\engine\utility::_id_12E3F( "weapon_fired", "sudden_death_started" );
    self.toggle_custom_death_anim_settings = undefined;
    self notify( "payload_remove_spawn_protection" );
}

getspawnwarningfxname( var_0 )
{
    var_1 = level.cleanupswaploadoutflags.spawnwarningfxranges;

    if ( !isdefined( var_1 ) || var_1.size == 0 )
        return;

    var_2 = var_1[0];

    for ( var_3 = 1; var_3 < var_1.size; var_3++ )
    {
        if ( var_2 > var_0 )
            break;

        var_2 = var_1[var_3];
    }

    var_4 = "payload_oob_" + var_2;
    return var_4;
}

spawnzonewarningenter( var_0, var_1 )
{
    if ( !isplayer( var_0 ) || var_0.team == var_1.script_team )
        return;

    var_2 = var_1._id_12315;

    if ( !isdefined( var_2 ) || !isdefined( var_2.warningfx ) )
        return;

    var_2.warningfx showtoplayer( var_0 );
    triggerfx( var_2.warningfx );
}

spawnzonewarningexit( var_0, var_1 )
{
    if ( !isplayer( var_0 ) || var_0.team == var_1.script_team )
        return;

    var_2 = var_1._id_12315;

    if ( !isdefined( var_2 ) || !isdefined( var_2.warningfx ) )
        return;

    var_2.warningfx hidefromplayer( var_0 );
}

_id_11F09( var_0, var_1 )
{
    level endon( "game_ended" );
    level endon( "stopColor" );
    setomnvar( "ui_br_circle_state", 5 );

    if ( var_0 <= 0 || istrue( var_1 ) )
        return;

    var_2 = max( var_0 - level.cleanupswaploadoutflags.dmztut_luicallback, 0 );
    wait( var_2 );
    setomnvar( "ui_br_circle_state", 6 );
}

_id_11F08( var_0, var_1 )
{
    thread _id_11F09( var_0, var_1 );

    if ( var_0 <= 0 )
    {
        setomnvar( "ui_hardpoint_timer", gettime() );
        return;
    }

    var_2 = scripts\mp\utility\game::gettimepassed();
    setomnvar( "ui_hardpoint_timer", gettime() + int( var_0 * 1000 ) );
    var_3 = int( var_2 / 1000 );
    var_4 = var_3 + var_0;
    scripts\mp\utility\dvars::setoverridewatchdvar( "timelimit", var_4 );
    setdvar( "scr_br_timelimit", var_4 );
}

ontimelimit()
{
    if ( istrue( level.gameended ) )
        return;

    if ( resetbreakertostate() )
        return;

    if ( istrue( level.toggle_player_settings ) )
        return;

    level.toggle_player_settings = 1;

    if ( level.cleanupswaploadoutflags.binoculars_processlosqueuehigh )
        binoculars_removeheadicon();
    else
        x1fin_think();

    var_0 = game["attackers"];
    var_1 = game["defenders"];
    var_2 = "time_limit_reached";

    if ( game["switchedsides"] || level.cleanupswaploadoutflags._id_12A1A )
    {
        var_3 = losqueuehigh();
        var_4 = losqueuehighindex();

        if ( var_3 == var_4 && !level.cleanupswaploadoutflags._id_12A1A )
            var_1 = "tie";
        else
            thread _id_12DA3( "stopped" );

        if ( var_1 == "tie" || istrue( level.cleanupswaploadoutflags.isteamplacementsbmmmode ) )
        {
            var_0 = _id_11C04( var_0 );
            var_1 = make_pilot_invincible( var_0 );
            var_2 = "enemies_eliminated";
        }

        timeoutradialunfill( 1, var_1 );
        thread scripts\mp\gametypes\br.gsc::supplydropprice( var_0, 2, undefined, 1, 1 );
    }

    thread scripts\mp\gametypes\br.gsc::brendgame( var_1, game["end_reason"][var_2] );
}

_id_11F57()
{
    level.cleanupswaploadoutflags.fulton_refundsuper = 0;
    level.cleanupswaploadoutflags.resetchemicalvalvevalues = 0;

    if ( level.cleanupswaploadoutflags.binoculars_processlosqueuehigh )
    {
        _id_11E94( 0 );

        foreach ( var_1 in level.cleanupswaploadoutflags.paths )
        {
            var_1.do_ads_hint = -1;
            binoculars_registertargetstate( var_1.do_ads_hint, var_1 );
        }
    }
    else
    {
        level.cleanupswaploadoutflags.do_ads_hint = -1;
        spawndistancemax( level.cleanupswaploadoutflags.do_ads_hint );
    }
}

spawndistancemax( var_0, var_1, var_2 )
{
    if ( !do_kidnapping_anims() )
        return;

    if ( level.cleanupswaploadoutflags.do_ads_hint >= 0 )
        level notify( "checkPointUpdate" );

    if ( var_0 != level.cleanupswaploadoutflags.do_ads_hint )
        return;

    if ( level.cleanupswaploadoutflags.do_ads_hint >= 0 )
        x1fin_think( var_2 );

    var_3 = level.cleanupswaploadoutflags.do_ads_hint;
    level.cleanupswaploadoutflags.do_ads_hint++;
    level.cleanupswaploadoutflags.fulton_refundsuper = gettime();

    if ( level.cleanupswaploadoutflags.do_ads_hint > 0 )
    {
        _id_11ECE( self.path.script_index, level.cleanupswaploadoutflags.do_ads_hint );
        var_4 = "br_payload_checkpoint";
        var_5 = "br_payload_checkpoint_enemy";
        scripts\mp\gametypes\br.gsc::_id_1269B( var_4, undefined, game["attackers"] );
        scripts\mp\gametypes\br.gsc::_id_1269B( var_5, undefined, game["defenders"] );

        if ( isdefined( var_1 ) && isdefined( var_1.path ) )
            startarmsracedef3obj( var_1.path, 1, "checkpoint", level.cleanupswaploadoutflags.do_ads_hint );

        thread _id_122AA( game["attackers"] );
        thread _id_122AA( game["defenders"] );
    }

    thread _id_11F56( level.cleanupswaploadoutflags.do_ads_hint );
    thread _id_11F8A( var_2, level.cleanupswaploadoutflags.do_ads_hint );
    thread _id_11F7F( var_2, level.cleanupswaploadoutflags.do_ads_hint );
    thread wait_at_station( level.cleanupswaploadoutflags.do_ads_hint );
    thread _id_11F87( var_2, level.cleanupswaploadoutflags.do_ads_hint );
}

_id_11F56( var_0 )
{
    level notify( "setupCheckpoint" );
    level endon( "setupCheckpoint" );

    if ( game["switchedsides"] )
    {
        var_1 = losqueuelowindex( game["defenders"], level.cleanupswaploadoutflags.do_ads_hint );

        if ( !isdefined( var_1 ) )
        {
            do_complete_escape_zoom_out();
            return;
        }

        var_1 = var_1 + level.cleanupswaploadoutflags.resetchemicalvalvevalues;
        var_2 = int( var_1 / 1000 );
        scripts\mp\flags::gameflagwait( "infil_complete" );
        _id_11F08( var_2 );
        return;
    }
    else
    {
        scripts\mp\flags::gameflagwait( "infil_complete" );
        _id_11F08( level.cleanupswaploadoutflags.do_heli_takeoff_vo );
        _id_11E95( level.cleanupswaploadoutflags.do_heli_takeoff_vo, var_0 );
    }
}

loschecktime( var_0 )
{
    if ( level.cleanupswaploadoutflags.binoculars_processlosqueuehigh )
        return var_0.do_ads_hint;
    else
        return level.cleanupswaploadoutflags.do_ads_hint;
}

binoculars_registertargetstate( var_0, var_1 )
{
    if ( !do_kidnapping_anims() )
        return;

    if ( var_1.do_ads_hint >= 0 )
        level notify( "checkPointUpdate" );

    if ( var_1.do_ads_hint >= 0 )
    {
        binoculars_removeheadicon( var_1 );
        play_player_falling_anims();
    }

    var_2 = var_1.do_ads_hint;
    var_1.do_ads_hint++;
    level.cleanupswaploadoutflags.fulton_refundsuper = gettime();

    if ( isdefined( level.cleanupswaploadoutflags.do_convoy_moving_vo ) )
    {
        var_3 = losqueuehigh();

        foreach ( var_5 in level.cleanupswaploadoutflags.do_convoy_moving_vo )
            var_5 setvalue( var_3 );
    }

    if ( var_1.do_ads_hint > 0 )
    {
        _id_11ECE( var_1.script_index, var_1.do_ads_hint );
        var_7 = "br_payload_checkpoint";
        var_8 = "br_payload_checkpoint_enemy";
        scripts\mp\gametypes\br.gsc::_id_1269B( var_7, undefined, game["attackers"] );
        scripts\mp\gametypes\br.gsc::_id_1269B( var_8, undefined, game["defenders"] );

        foreach ( var_10 in level.teamdata[game["attackers"]]["players"] )
        {
            var_10 thread scripts\mp\rank::giverankxp( "br_payload_reached_checkpoint", level.cleanupswaploadoutflags.toggleusbstickinhand );
            var_10 thread scripts\mp\rank::scoreeventpopup( "br_payload_reached_checkpoint" );
        }

        startarmsracedef3obj( var_1, 1, "checkpoint", var_1.do_ads_hint );
        thread _id_122AA( game["attackers"] );
        thread _id_122AA( game["defenders"] );
    }

    var_1 notify( "checkPointUpdate" );
    level thread dmzwincost( var_1 );
    thread binoculars_runadslogic( var_1 );
    thread _id_11F8A( var_1, var_1.do_ads_hint );
    thread _id_11F7F( var_1, var_1.do_ads_hint );
    thread wait_at_station( var_1.do_ads_hint, var_1 );
    thread _id_11F87( var_1, var_1.do_ads_hint );
}

losqueuehigh()
{
    var_0 = 0;

    foreach ( var_2 in level.cleanupswaploadoutflags.paths )
    {
        var_3 = 0;

        if ( isdefined( var_2.do_ads_hint ) )
            var_3 = var_2.do_ads_hint;

        var_0 = var_0 + var_3;
    }

    return var_0;
}

binoculars_runadslogic( var_0 )
{
    level notify( "setupCheckpoint" );
    level endon( "setupCheckpoint" );

    if ( var_0.do_ads_hint == 0 )
        var_1 = level.cleanupswaploadoutflags.do_heli_takeoff_vo;
    else
    {
        var_1 = int( level.cleanupswaploadoutflags.resetchemicalvalvevalues / 1000 ) + level.cleanupswaploadoutflags.binoculars_setcurrentstate;

        if ( level.cleanupswaploadoutflags.maxtime > 0 )
            var_1 = int( min( var_1, level.cleanupswaploadoutflags.maxtime ) );
    }

    if ( game["switchedsides"] )
    {
        var_2 = losqueuehigh();
        var_3 = losqueuehighindex();

        if ( var_2 > var_3 )
            do_complete_escape_zoom_out();
    }

    scripts\mp\flags::gameflagwait( "infil_complete" );
    _id_11F08( var_1 );
    _id_11E95( var_1 );
}

binoculars_removeheadicon( var_0 )
{
    if ( !do_kidnapping_anims() )
        return;

    var_1 = gettime() - level.cleanupswaploadoutflags.fulton_refundsuper;

    if ( isdefined( var_0 ) )
        level.cleanupswaploadoutflags.resetcircuitbreakers = var_0;

    var_2 = losqueuelow();

    if ( var_1 > var_2 )
        var_1 = var_2;

    level.cleanupswaploadoutflags.resetchemicalvalvevalues = var_2 - var_1;
}

_id_11E96( var_0, var_1, var_2 )
{
    var_3 = "time_split_" + var_1;
    game[var_0 + "_payload"][var_3] = var_2;
}

losqueuelowindex( var_0, var_1 )
{
    var_2 = "time_split_" + var_1;
    var_3 = game[var_0 + "_payload"][var_2];
    return var_3;
}

_id_11E95( var_0, var_1 )
{
    if ( level.cleanupswaploadoutflags.binoculars_processlosqueuehigh )
        var_2 = "time_limit_objective";
    else
        var_2 = "time_limit_objective_" + var_1;

    game[var_2] = int( var_0 * 1000 );
}

losqueuelow( var_0 )
{
    if ( level.cleanupswaploadoutflags.binoculars_processlosqueuehigh )
        var_1 = "time_limit_objective";
    else
        var_1 = "time_limit_objective_" + var_0;

    return game[var_1];
}

_id_11E94( var_0 )
{
    if ( !game["switchedsides"] )
        game["num_checkpoints_objective"] = var_0;
}

play_player_falling_anims()
{
    if ( !game["switchedsides"] )
        game["num_checkpoints_objective"] = game["num_checkpoints_objective"] + 1;
}

losqueuehighindex()
{
    return game["num_checkpoints_objective"];
}

do_kidnapping_anims()
{
    var_0 = 1;
    return var_0;
}

x1fin_think( var_0 )
{
    if ( !do_kidnapping_anims() )
        return;

    var_1 = gettime() - level.cleanupswaploadoutflags.fulton_refundsuper;

    if ( isdefined( var_0 ) )
        level.cleanupswaploadoutflags.resetcircuitbreakers = var_0;

    if ( game["switchedsides"] )
    {
        var_2 = losqueuelowindex( game["defenders"], level.cleanupswaploadoutflags.do_ads_hint );
        var_2 = var_2 + level.cleanupswaploadoutflags.resetchemicalvalvevalues;
        level.cleanupswaploadoutflags.resetchemicalvalvevalues = var_2 - var_1;

        if ( var_1 > var_2 )
        {
            var_1 = var_2;
            level.cleanupswaploadoutflags.resetchemicalvalvevalues = 0;
        }
    }
    else
    {
        var_3 = losqueuelow( level.cleanupswaploadoutflags.do_ads_hint );

        if ( var_1 > var_3 )
            var_1 = var_3;
    }

    _id_11E96( game["attackers"], level.cleanupswaploadoutflags.do_ads_hint, var_1 );
}

do_complete_escape_zoom_out()
{
    if ( istrue( level.gameended ) )
        return;

    level.ontimelimit = scripts\engine\utility::void;
    setomnvar( "ui_hardpoint_timer", 0 );
    var_0 = game["defenders"];
    var_1 = game["attackers"];
    var_2 = "objective_completed";

    if ( game["switchedsides"] || level.cleanupswaploadoutflags._id_12A1A )
    {
        if ( istrue( level.cleanupswaploadoutflags.isteamplacementsbmmmode ) )
        {
            var_0 = _id_11C04();
            var_1 = make_pilot_invincible( var_0 );
            var_2 = "enemies_eliminated";
        }

        thread _id_12DA3( "finished" );
        timeoutradialunfill( 0, var_1 );
        thread scripts\mp\gametypes\br.gsc::supplydropprice( var_0, 2, undefined, 1, 1 );
    }

    thread scripts\mp\gametypes\br.gsc::brendgame( var_1, game["end_reason"][var_2] );
}

combined_counters_groups( var_0 )
{
    if ( !game["switchedsides"] && !level.cleanupswaploadoutflags._id_12A1A )
        force_maze_ai_state( var_0 );
    else
    {
        if ( !level.cleanupswaploadoutflags._id_12A1A )
            thread fly_to_loc( var_0 );

        level thread scripts\mp\gametypes\br.gsc::handleendgamesplash( var_0 );
        level thread scripts\mp\gametypes\br.gsc::nuclear_core_carrier_escaped( var_0 );

        if ( istrue( level._id_12050 ) )
            level thread scripts\mp\gametypes\br.gsc::npcbodies( var_0 );

        if ( isdefined( level.checkpoint_next_fx_play ) )
            wait( level.checkpoint_next_fx_play );

        level thread scripts\mp\gametypes\br.gsc::nuclear_core_carrier_escaped( var_0 );

        if ( istrue( level._id_12050 ) )
            level thread scripts\mp\gametypes\br.gsc::npcbodies( var_0 );
    }
}

convoy_anim_sequence( var_0, var_1 )
{
    foreach ( var_3 in level.players )
        var_3 thread scripts\mp\utility\game::setuipostgamefade( 0.0 );

    if ( !var_1 )
        wait( var_0 );
    else
    {
        wait( var_0 / 2 );
        level notify( "give_match_bonus" );
        wait( var_0 / 2 );
    }

    level notify( "round_end_finished" );
}

timeoutradialunfill( var_0, var_1 )
{
    setomnvarforallclients( "post_game_state", 9 );
    var_2 = undefined;

    if ( isdefined( level.cleanupswaploadoutflags.resetcircuitbreakers ) && isdefined( level.cleanupswaploadoutflags.resetcircuitbreakers.vehicle ) && ( !var_0 || !level.cleanupswaploadoutflags.binoculars_processlosqueuehigh || var_1 == "tie" ) )
        var_2 = level.cleanupswaploadoutflags.resetcircuitbreakers.vehicle;
    else
    {
        var_3 = undefined;

        foreach ( var_5 in level.cleanupswaploadoutflags.paths )
        {
            if ( istrue( var_5.exfil_spawnfunc ) || !isdefined( var_5.vehicle ) )
                continue;

            if ( !isdefined( var_3 ) || var_5.do_ads_hint > var_3.do_ads_hint )
            {
                var_3 = var_5;
                var_6 = var_5.do_ads_hint;
            }
        }

        var_2 = var_3.vehicle;
    }

    var_8 = easepower( "vfx_br_payload_finish", var_2.origin, ( 0, var_2.angles[1], 0 ) );
    var_8 setscriptablepartstate( "checkpoint", "finish" );

    if ( var_1 == "tie" )
    {
        var_9 = "mp_payload_loss_cam";
        var_10 = "mp_payload_loss_cam";
    }
    else if ( var_1 == game["attackers"] )
    {
        var_9 = "mp_payload_victory_cam";
        var_10 = "mp_payload_loss_cam";
    }
    else
    {
        var_9 = "mp_payload_loss_cam";
        var_10 = "mp_payload_victory_cam";
    }

    var_11 = var_2.origin;
    var_12 = var_2.angles;
    var_13 = spawn( "script_model", var_11 );
    var_13.angles = var_12;
    var_13 setmodel( "generic_prop_x3" );
    var_13 forcenetfieldhighlod( 1 );
    var_14 = spawn( "script_model", var_11 );
    var_14.angles = var_12;
    var_14 setmodel( "generic_prop_x3" );
    var_14 forcenetfieldhighlod( 1 );
    var_13 scriptmodelplayanim( var_9, "payload_complete" );
    var_14 scriptmodelplayanim( var_10, "payload_complete" );
    var_15 = scripts\mp\utility\teams::getteamdata( game["attackers"], "players" );

    foreach ( var_17 in var_15 )
        var_17 cameralinkto( var_13, "j_prop_1", 1, 1 );

    var_19 = scripts\mp\utility\teams::getteamdata( game["defenders"], "players" );

    foreach ( var_17 in var_19 )
        var_17 cameralinkto( var_14, "j_prop_1", 1, 1 );
}

playerwelcomesplashes()
{
    var_0 = scripts\engine\utility::getstructarray( "payloadPath", "targetname" );

    foreach ( var_2 in var_0 )
    {
        if ( !isdefined( level.cleanupswaploadoutflags.paths ) )
            level.cleanupswaploadoutflags.paths = [];

        var_3 = level.cleanupswaploadoutflags.paths.size;
        level.cleanupswaploadoutflags.paths[var_3] = var_2;
    }

    for ( var_5 = 0; var_5 < level.cleanupswaploadoutflags.paths.size; var_5++ )
    {
        var_2 = level.cleanupswaploadoutflags.paths[var_5];
        var_6 = "E";
        var_7 = "_e";
        var_8 = &"BR_PAYLOAD/PATH_E";

        switch ( var_2.script_index )
        {
            case 0:
                var_6 = "A";
                var_7 = "_a";
                var_8 = &"BR_PAYLOAD/PATH_A";
                break;
            case 1:
                var_6 = "B";
                var_7 = "_b";
                var_8 = &"BR_PAYLOAD/PATH_B";
                break;
            case 2:
                var_6 = "C";
                var_7 = "_c";
                var_8 = &"BR_PAYLOAD/PATH_C";
                break;
            case 3:
                var_6 = "D";
                var_7 = "_d";
                var_8 = &"BR_PAYLOAD/PATH_D";
                break;
            default:
                break;
        }

        var_2.label = var_6;
        var_2.iconname = var_7;
        var_2.teleport_players_on_entering_trigger = var_8;
        var_2._id_122F6 = [];
        var_2._id_122CB = [];
        var_2.spawncount = [];
        var_2._id_12293 = [];
        var_2.spawntime = [];
        var_2.numplayers = [];
        var_2.numplayers[game["attackers"]] = 0;
        var_2.numplayers[game["defenders"]] = 0;
        var_2._id_12DA9 = "none";
        var_2._id_12DA8 = 0;
        var_2._id_12D9A = 0;
        var_2._id_12D9C = 0;
        var_2.objidnum = [];
        var_2._id_11ACA = [];
        var_2.start_drones_event = [];
        var_2._id_125DB = [];
        var_2.pieces = [];

        if ( level.cleanupswaploadoutflags._id_1227B )
        {
            var_2._id_12316 = 0;
            var_2._id_12295 = spawnstruct();
            var_2._id_12295.audio_player_start_mud_loop = 1;
            var_2._id_12295.path = var_2;
        }

        if ( level.cleanupswaploadoutflags._id_1227C > -1 )
            var_2._id_12316 = 0;

        if ( level.cleanupswaploadoutflags.do_hack_sequence )
            var_2.do_hack_sequence = [];

        dangernotifyresetforplayer( var_2 );
    }
}

playerstreamhintlocation()
{
    if ( !level.cleanupswaploadoutflags.play_hud_reminder_vo )
        return;

    thread playerstreamhintlocationinternal();
}

playerstreamhintlocationinternal()
{
    var_0 = getentarray( "payload_oob", "targetname" );

    if ( var_0.size == 0 )
        return;

    scripts\mp\flags::gameflagwait( "infil_complete" );

    foreach ( var_2 in level.cleanupswaploadoutflags.paths )
    {
        foreach ( var_4 in var_0 )
        {
            if ( var_2.freeze_bomb_vest_timer == var_4.script_group )
            {
                var_4.index = 0;
                toggleconnectpaths( var_4 );
                return;
            }
        }
    }
}

toggleconnectpaths( var_0 )
{
    var_0.entstouching = [];
    thread togglelightbutton( var_0 );
    thread togglecpplayerbc( var_0 );
}

togglecpplayerbc( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "IBTrigger" );

    for (;;)
    {
        var_0 waittill( "trigger", var_1 );

        if ( isdefined( var_1.plant_bomb_cleanup_on_death ) && var_1.plant_bomb_cleanup_on_death > 0 )
            continue;

        times_in_b( var_0, var_1 );
    }
}

togglelightbutton( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "IBTrigger" );

    for (;;)
    {
        var_1 = var_0.entstouching;

        foreach ( var_4, var_3 in var_1 )
        {
            if ( !isdefined( var_3 ) )
                var_0.entstouching[var_4] = undefined;

            if ( isdefined( var_3 ) && !var_0 istouching( var_3 ) )
                times_in_c( var_0, var_3 );
        }

        waitframe();
    }
}

times_in_b( var_0, var_1 )
{
    var_2 = var_1 getentitynumber();

    if ( isdefined( var_1._id_11AC3 ) )
        var_1._id_11AC3 = undefined;

    if ( isdefined( var_0._id_1268C ) && isdefined( var_1.owner ) && var_0._id_1268C != var_1.owner.team )
        return;

    if ( isdefined( var_0._id_1268C ) && !isdefined( var_1.owner ) && var_0._id_1268C != var_1.team )
        return;

    if ( !isdefined( var_1.plant_enemy_claymore ) )
    {
        var_1.plant_enemy_claymore = [];

        for ( var_3 = 0; var_3 < level.cleanupswaploadoutflags.paths.size; var_3++ )
            var_1.plant_enemy_claymore[var_3] = 0;
    }

    var_1.plant_enemy_claymore[var_0.index] = 1;
    var_0.entstouching[var_2] = var_1;

    if ( !isdefined( var_1.oobtriggers ) )
        var_1.oobtriggers = [];

    var_4 = [ var_0 ];

    foreach ( var_6 in var_1.oobtriggers )
        var_4[var_4.size] = var_6;

    var_1.oobtriggers = var_4;

    if ( isdefined( var_1.plant_bomb_cleanup_on_death ) )
        var_1.plant_bomb_cleanup_on_death++;
    else
        var_1.plant_bomb_cleanup_on_death = 1;

    if ( isdefined( var_1.oob ) && var_1.oob > 0 )
        scripts\mp\outofbounds::disableoob( var_1 );
}

times_in_c( var_0, var_1 )
{
    var_2 = var_1 getentitynumber();

    if ( isdefined( var_0._id_1268C ) && isdefined( var_1.owner ) && var_0._id_1268C != var_1.owner.team )
        return;

    if ( isdefined( var_0._id_1268C ) && !isdefined( var_1.owner ) && var_0._id_1268C != var_1.team )
        return;

    if ( isdefined( var_1.plant_bomb_cleanup_on_death ) && var_1.plant_bomb_cleanup_on_death > 0 && var_1.plant_enemy_claymore[var_0.index] )
    {
        var_1.plant_enemy_claymore[var_0.index] = 0;
        var_1.plant_bomb_cleanup_on_death--;

        foreach ( var_4 in var_1.plant_enemy_claymore )
        {
            if ( istrue( var_4 ) )
                return;
        }

        scripts\mp\outofbounds::enableoob( var_1 );
    }

    if ( isdefined( var_1.oobtriggers ) )
    {
        var_1.oobtriggers = scripts\engine\utility::array_remove( var_1.oobtriggers, var_0 );

        if ( var_1.oobtriggers.size == 0 )
            var_1.oobtriggers = undefined;
    }
}

updatedroprelics( var_0, var_1, var_2 )
{
    scripts\mp\outofbounds::playerentercallback( var_0, var_1, var_2 );
    self notify( "playerDelayDisableOOBOutline" );

    if ( !isdefined( self.timestartwaitingtoshoot ) )
    {
        var_3 = make_pilot_invincible( self.team );
        self.timestartwaitingtoshoot = scripts\mp\utility\outline::outlineenableforteam( self, var_3, "outline_nodepth_red", "level_script" );
    }

    if ( level.cleanupswaploadoutflags._id_12317 )
    {
        if ( isdefined( self.times_shot ) )
        {
            self.times_shot hidefromplayer( self );
            self.times_shot = undefined;
        }

        foreach ( var_5 in self.oobtriggers )
        {
            if ( isdefined( var_5._id_12315 ) )
            {
                var_5._id_12315 showtoplayer( self );
                self.times_shot = var_5._id_12315;
            }
        }
    }

    thread updateexpiredlootleader();
}

updatedroprelicsfunc( var_0, var_1, var_2 )
{
    scripts\mp\outofbounds::playerexitcallback( var_0, var_1, var_2 );

    if ( isdefined( self._id_11AC8 ) )
        self._id_11AC8.alpha = 0;

    if ( isdefined( self.timestartwaitingtoshoot ) )
        thread unmarkplayeraseliminated();
}

unmarkplayeraseliminated()
{
    self endon( "disconnect" );
    self notify( "playerDelayDisableOOBOutline" );
    self endon( "playerDelayDisableOOBOutline" );
    wait( level.cleanupswaploadoutflags._id_12318 );
    scripts\mp\utility\outline::outlinedisable( self.timestartwaitingtoshoot, self );
    self.timestartwaitingtoshoot = undefined;

    if ( isdefined( self.times_shot ) )
    {
        self.times_shot hidefromplayer( self );
        self.times_shot = undefined;
    }
}

endgame_luidecisionreceived()
{
    var_0 = self;
    var_0.plant_enemy_claymore = undefined;
    var_0.plant_bomb_cleanup_on_death = undefined;
}

playerupdatehudstate()
{
    scripts\mp\gametypes\br_payload_path_mp_br_mechanics_0.gsc::playerwatchspectate( 0, "all", 0 );
    scripts\mp\gametypes\br_payload_path_mp_br_mechanics_1.gsc::playerwatchspectate( 1, "all", 1 );
    scripts\mp\gametypes\br_payload_path_mp_br_mechanics_2.gsc::playerwatchspectate( 2, "all", 2 );
    scripts\mp\gametypes\br_payload_path_mp_br_mechanics_3.gsc::playerwatchspectate( 3, "all", 3 );
    scripts\mp\gametypes\br_payload_path_mp_br_mechanics_0.gsc::playerwatchspectate( 0, "standard", 0 );
    scripts\mp\gametypes\br_payload_path_mp_br_mechanics_1.gsc::playerwatchspectate( 1, "standard", 1 );
    scripts\mp\gametypes\br_payload_path_mp_don4_0.gsc::playerwatchspectate( 0, "downtown", 0 );
    scripts\mp\gametypes\br_payload_path_mp_don4_1.gsc::playerwatchspectate( 1, "downtown", 1 );
    scripts\mp\gametypes\br_payload_path_mp_don4_2.gsc::playerwatchspectate( 2, "downtown", 2 );
    scripts\mp\gametypes\br_payload_path_mp_don4_3.gsc::playerwatchspectate( 0, "trainstation", 3 );
    scripts\mp\gametypes\br_payload_path_mp_don4_4.gsc::playerwatchspectate( 1, "trainstation", 4 );
    scripts\mp\gametypes\br_payload_path_mp_don4_5.gsc::playerwatchspectate( 2, "trainstation", 5 );
    scripts\mp\gametypes\br_payload_path_mp_don4_6.gsc::playerwatchspectate( 0, "promenade", 6 );
    scripts\mp\gametypes\br_payload_path_mp_don4_7.gsc::playerwatchspectate( 1, "promenade", 7 );
    scripts\mp\gametypes\br_payload_path_mp_don4_8.gsc::playerwatchspectate( 2, "promenade", 8 );
    scripts\mp\gametypes\br_payload_path_mp_don4_9.gsc::playerwatchspectate( 0, "eastriver", 9 );
    scripts\mp\gametypes\br_payload_path_mp_don4_10.gsc::playerwatchspectate( 1, "eastriver", 10 );
    scripts\mp\gametypes\br_payload_path_mp_don4_11.gsc::playerwatchspectate( 2, "eastriver", 11 );
    scripts\mp\gametypes\br_payload_path_mp_don4_0.gsc::playerwatchspectate( 0, "downtown2", 0 );
    scripts\mp\gametypes\br_payload_path_mp_don4_1.gsc::playerwatchspectate( 1, "downtown2", 1 );
    scripts\mp\gametypes\br_payload_path_mp_don4_1.gsc::playerwatchspectate( 0, "downtown3", 1 );
    scripts\mp\gametypes\br_payload_path_mp_don4_2.gsc::playerwatchspectate( 1, "downtown3", 2 );
    scripts\mp\gametypes\br_payload_path_mp_don4_3.gsc::playerwatchspectate( 0, "trainstation2", 3 );
    scripts\mp\gametypes\br_payload_path_mp_don4_4.gsc::playerwatchspectate( 1, "trainstation2", 4 );
    scripts\mp\gametypes\br_payload_path_mp_don4_12.gsc::playerwatchspectate( 0, "port", 12 );
    scripts\mp\gametypes\br_payload_path_mp_don4_13.gsc::playerwatchspectate( 1, "port", 13 );
}

_id_11ED1( var_0, var_1 )
{
    if ( var_1 > 31 || var_0 >= 2 )
        return;

    var_2 = 5;
    var_3 = var_0 * 5;
    var_4 = int( pow( 2, var_2 ) ) - 1;
    var_5 = ( var_1 & var_4 ) << var_3;
    var_6 = ~( var_4 << var_3 );
    var_7 = getomnvar( "ui_br_paths" );
    var_8 = var_7 & var_6;
    var_9 = var_8 + var_5;
    setomnvar( "ui_br_paths", var_9 );
}

ally_charge_dialogue( var_0, var_1, var_2 )
{
    var_3 = spawnstruct();
    var_3.targetname = var_0;
    var_3.target = var_1;
    var_3.script_index = var_2;

    if ( isdefined( var_3.targetname ) )
    {
        if ( !isdefined( level.struct_class_names["targetname"][var_3.targetname] ) )
            level.struct_class_names["targetname"][var_3.targetname] = [];

        var_4 = level.struct_class_names["targetname"][var_3.targetname].size;
        level.struct_class_names["targetname"][var_3.targetname][var_4] = var_3;
    }

    if ( isdefined( var_3.target ) )
    {
        if ( !isdefined( level.struct_class_names["target"][var_3.target] ) )
            level.struct_class_names["target"][var_3.target] = [];

        var_4 = level.struct_class_names["target"][var_3.target].size;
        level.struct_class_names["target"][var_3.target][var_4] = var_3;
    }

    if ( isdefined( var_3.script_noteworthy ) )
    {
        if ( !isdefined( level.struct_class_names["script_noteworthy"][var_3.script_noteworthy] ) )
            level.struct_class_names["script_noteworthy"][var_3.script_noteworthy] = [];

        var_4 = level.struct_class_names["script_noteworthy"][var_3.script_noteworthy].size;
        level.struct_class_names["script_noteworthy"][var_3.script_noteworthy][var_4] = var_3;
    }

    return var_3;
}

_id_12541( var_0, var_1 )
{
    self.origin = var_0;
}

fnlookforvehicles( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = 2.0;

    if ( isdefined( var_7 ) )
        var_9 = newteamhudelem( var_7 );
    else
        var_9 = newhudelem();

    var_9.elemtype = "font";
    var_9.font = "default";
    var_9.fontscale = var_8;
    var_9.basefontscale = var_8;
    var_9.x = 0;
    var_9.y = 0;
    var_9.width = 0;
    var_9.height = int( level.fontheight * var_8 );
    var_9.xoffset = 0;
    var_9.yoffset = 0;
    var_9.children = [];
    var_9 scripts\mp\hud_util::setparent( level.uiparent );
    var_9.hidden = 0;
    var_9.archived = 0;
    var_9.alpha = 1;
    var_9 scripts\mp\hud_util::setpoint( var_2, var_3, var_4, var_5 );

    if ( isdefined( var_0 ) )
        var_9.label = var_0;

    if ( isdefined( var_1 ) )
        var_9 setvalue( var_1 );

    if ( isdefined( var_6 ) )
        var_9.color = var_6;

    return var_9;
}

force_maze_ai_state( var_0 )
{
    var_1 = -150;
    var_2 = 25;
    var_3 = 3;
    enable_leaderboard();

    if ( !level.cleanupswaploadoutflags.binoculars_processlosqueuehigh )
    {
        var_4 = var_1;

        for ( var_5 = 0; var_5 <= level.cleanupswaploadoutflags.do_ads_hint; var_5++ )
        {
            var_6 = fnlookforvehicles( &"BR_PAYLOAD/CHECKPOINT", var_5 + 1, "RIGHT", "CENTER", var_3 * -1, var_4 );
            var_7 = losqueuelowindex( game["attackers"], var_5 );
            var_7 = max( var_7 / 1000.0, 0.001 );
            var_8 = scripts\mp\hud_util::createservertimer( "default", 2.0 );
            var_8 scripts\mp\hud_util::setpoint( "LEFT", "CENTER", var_3, var_4 );
            var_8 settenthstimerstatic( var_7 );
            var_4 = var_4 + var_2;
        }
    }
    else
        fnchildscorefunc( var_0 );
}

fnchildscorefunc( var_0 )
{
    if ( isdefined( level.cleanupswaploadoutflags.do_convoy_moving_vo ) )
    {
        foreach ( var_2 in level.cleanupswaploadoutflags.do_convoy_moving_vo )
            var_2 destroy();
    }

    if ( isdefined( level.cleanupswaploadoutflags.do_custom_evade_start ) )
        level.cleanupswaploadoutflags.do_custom_evade_start destroy();

    var_4 = losqueuehighindex();
    var_5 = fnlookforvehicles( &"BR_PAYLOAD/END_ATTACKERS", var_4, "CENTER", "CENTER", -100, -75 );
    var_6 = var_4 + 1;
    var_7 = &"BR_PAYLOAD/END_DEFENDERS_WIN";

    if ( var_0 == "tie" )
        var_7 = &"BR_PAYLOAD/END_DEFENDERS_TIE";

    var_8 = fnlookforvehicles( var_7, var_6, "CENTER", "CENTER", 100, -75 );
}

fly_to_loc( var_0, var_1 )
{
    if ( isdefined( level.cleanupswaploadoutflags.do_convoy_moving_vo ) )
    {
        foreach ( var_3 in level.cleanupswaploadoutflags.do_convoy_moving_vo )
            var_3 destroy();
    }

    if ( isdefined( level.cleanupswaploadoutflags.do_custom_evade_start ) )
        level.cleanupswaploadoutflags.do_custom_evade_start destroy();

    if ( istrue( level.toggle_player_settings ) || isdefined( var_1 ) && var_1 == "time" )
        var_5 = &"BR_PAYLOAD/END_REASON_TIMELIMIT";
    else
        var_5 = &"BR_PAYLOAD/END_REASON_CHECKPOINTS";
}

playerstreamhintdroptoground()
{
    var_0 = 0;
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escort_neutral_a", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORT", "icon_waypoint_dom_a", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escort_neutral_b", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORT", "icon_waypoint_dom_b", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escort_neutral_c", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORT", "icon_waypoint_dom_c", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escort_neutral_d", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORT", "icon_waypoint_dom_d", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escort_neutral_e", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORT", "icon_waypoint_dom_e", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escort_a", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORT", "icon_waypoint_dom_a", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escort_b", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORT", "icon_waypoint_dom_b", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escort_c", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORT", "icon_waypoint_dom_c", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escort_d", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORT", "icon_waypoint_dom_d", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escort_e", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORT", "icon_waypoint_dom_e", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escorting_a", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORTING", "icon_waypoint_dom_a", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escorting_b", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORTING", "icon_waypoint_dom_b", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escorting_c", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORTING", "icon_waypoint_dom_c", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escorting_d", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORTING", "icon_waypoint_dom_d", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_escorting_e", var_0, "friendly", "BR_PAYLOAD/OBJ_ESCORTING", "icon_waypoint_dom_e", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halt_neutral_a", var_0, "enemy", "BR_PAYLOAD/OBJ_HALT", "icon_waypoint_dom_a", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halt_neutral_b", var_0, "enemy", "BR_PAYLOAD/OBJ_HALT", "icon_waypoint_dom_b", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halt_neutral_c", var_0, "enemy", "BR_PAYLOAD/OBJ_HALT", "icon_waypoint_dom_c", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halt_neutral_d", var_0, "enemy", "BR_PAYLOAD/OBJ_HALT", "icon_waypoint_dom_d", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halt_neutral_e", var_0, "enemy", "BR_PAYLOAD/OBJ_HALT", "icon_waypoint_dom_e", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halt_a", var_0, "enemy", "BR_PAYLOAD/OBJ_HALT", "icon_waypoint_dom_a", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halt_b", var_0, "enemy", "BR_PAYLOAD/OBJ_HALT", "icon_waypoint_dom_b", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halt_c", var_0, "enemy", "BR_PAYLOAD/OBJ_HALT", "icon_waypoint_dom_c", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halt_d", var_0, "enemy", "BR_PAYLOAD/OBJ_HALT", "icon_waypoint_dom_d", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halt_e", var_0, "enemy", "BR_PAYLOAD/OBJ_HALT", "icon_waypoint_dom_e", 0 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halting_a", var_0, "enemy", "BR_PAYLOAD/OBJ_HALTING", "icon_waypoint_dom_a", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halting_b", var_0, "enemy", "BR_PAYLOAD/OBJ_HALTING", "icon_waypoint_dom_b", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halting_c", var_0, "enemy", "BR_PAYLOAD/OBJ_HALTING", "icon_waypoint_dom_c", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halting_d", var_0, "enemy", "BR_PAYLOAD/OBJ_HALTING", "icon_waypoint_dom_d", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_halting_e", var_0, "enemy", "BR_PAYLOAD/OBJ_HALTING", "icon_waypoint_dom_e", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_contested_a", var_0, "contest", "BR_PAYLOAD/OBJ_CONTESTED", "icon_waypoint_dom_a", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_contested_b", var_0, "contest", "BR_PAYLOAD/OBJ_CONTESTED", "icon_waypoint_dom_b", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_contested_c", var_0, "contest", "BR_PAYLOAD/OBJ_CONTESTED", "icon_waypoint_dom_c", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_contested_d", var_0, "contest", "BR_PAYLOAD/OBJ_CONTESTED", "icon_waypoint_dom_d", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_contested_e", var_0, "contest", "BR_PAYLOAD/OBJ_CONTESTED", "icon_waypoint_dom_e", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_blocked_a", var_0, "contest", "BR_PAYLOAD/OBJ_BLOCKED", "icon_waypoint_dom_a", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_blocked_b", var_0, "contest", "BR_PAYLOAD/OBJ_BLOCKED", "icon_waypoint_dom_b", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_blocked_c", var_0, "contest", "BR_PAYLOAD/OBJ_BLOCKED", "icon_waypoint_dom_c", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_blocked_d", var_0, "contest", "BR_PAYLOAD/OBJ_BLOCKED", "icon_waypoint_dom_d", 1 );
    scripts\mp\gamelogic::setwaypointiconinfo( "waypoint_blocked_e", var_0, "contest", "BR_PAYLOAD/OBJ_BLOCKED", "icon_waypoint_dom_e", 1 );
}

fluctuatevalues( var_0 )
{
    var_1 = 0;
    var_2 = 150;
    var_3 = 15;
    level.teamdata[var_0]["checkpoint"] = spawnstruct();
    level.teamdata[var_0]["checkpoint"].brking_initpostmain = [];
    var_7 = var_2;
    var_8 = scripts\engine\utility::ter_op( level.cleanupswaploadoutflags.paths.size <= var_1, level.cleanupswaploadoutflags.paths.size, var_1 );

    for ( var_9 = 0; var_9 < var_8; var_9++ )
    {
        var_10 = level.cleanupswaploadoutflags.paths[var_9];
        level.teamdata[var_0]["checkpoint"].brking_initpostmain[var_10.script_index] = flood_spawn_till_flag( var_0, var_7, var_10 );
        var_7 = var_7 + var_3;
    }
}

teleport_to_debug_start_pos( var_0, var_1, var_2 )
{
    var_3 = make_all_oscilloscopes_usable( var_2 );
    var_4 = level.teamdata[var_1]["checkpoint"].brking_initpostmain[var_0.script_index];

    if ( isdefined( var_4 ) )
        var_4.brking_createc130pathstruct.bar.color = var_3;
}

make_all_oscilloscopes_usable( var_0 )
{
    switch ( var_0 )
    {
        case "red":
            return ( 1, 0, 0 );
        case "blue":
            return ( 0, 0.75, 1 );
        case "yellow":
            return ( 1, 1, 0 );
        case "green":
            return ( 0, 1, 0 );
        case "orange":
            return ( 1, 0.5, 0 );
        case "lightblue":
            return ( 0.25, 0.5, 1 );
        case "white":
        default:
            return ( 1, 1, 1 );
    }
}

flood_spawn_till_flag( var_0, var_1, var_2 )
{
    var_3 = 14;
    var_4 = 14;
    var_5 = 14;
    var_6 = 140;
    var_7 = var_3 + var_4;
    var_8 = newteamhudelem( var_0 );
    var_8.fontscale = 1.2;
    var_8.x = var_3;
    var_8.y = var_1;
    var_8.alignx = "left";
    var_8.aligny = "top";
    var_8.horzalign = "left_adjustable";
    var_8.vertalign = "top_adjustable";
    var_8.alpha = 0.5;
    var_8.glowalpha = 0;
    var_8.hidewheninmenu = 1;
    var_8.archived = 0;
    var_8.label = var_2.teleport_players_on_entering_trigger;
    var_9 = forced_kill_off( var_0, ( 1, 1, 1 ), var_6, var_5 );
    var_9.x = var_7;
    var_9.y = var_1;
    var_9.alignx = "left";
    var_9.aligny = "top";
    var_9.horzalign = "left_adjustable";
    var_9.vertalign = "top_adjustable";
    var_9.alpha = 0.5;
    var_9 _id_11FB2();
    var_9.archived = 1;
    var_9.hidewheninmenu = 1;
    var_9.bar.archived = 1;
    var_9.bar.hidewheninmenu = 1;
    var_9.bar.alpha = 0.5;
    var_8.brking_createc130pathstruct = var_9;
    var_8.ticks = [];
    var_8.has_termal = [];

    for ( var_10 = 0; var_10 < var_2.do_ascender_entrance.size - 1; var_10++ )
        var_8.ticks[var_10] = floor_gas( var_0, var_7, var_1, var_5, var_6, var_2, var_10 );

    for ( var_10 = 0; var_10 < var_2.started_breach_process.size; var_10++ )
        var_8.has_termal[var_10] = focus_fire_outline_enabled( var_0, var_7, var_1, var_5, var_6, var_2, var_10 );

    return var_8;
}

getcash( var_0 )
{
    foreach ( var_2 in var_0.ticks )
        var_2 destroy();

    var_0.ticks = undefined;

    foreach ( var_5 in var_0.has_termal )
        var_5 destroy();

    var_0.has_termal = undefined;
    var_0.brking_createc130pathstruct.bar destroy();
    var_0.brking_createc130pathstruct.bar = undefined;
    var_0.brking_createc130pathstruct destroy();
    var_0.brking_createc130pathstruct = undefined;
    var_0 destroy();
}

_id_11FB2( var_0, var_1, var_2, var_3 )
{
    self.bar.horzalign = self.horzalign;
    self.bar.vertalign = self.vertalign;
    self.bar.alignx = "left";
    self.bar.aligny = self.aligny;
    self.bar.y = self.y;
    self.bar.x = self.x;
    scripts\mp\hud_util::updatebar( self.bar.frac );
}

forced_kill_off( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = newteamhudelem( var_0 );
    var_5.x = 0;
    var_5.y = 0;
    var_5.frac = 0;
    var_5.color = var_1;
    var_5.sort = -2;
    var_5.shader = "progress_bar_fill";
    var_5 setshader( "progress_bar_fill", var_2, var_3 );
    var_5.hidden = 0;

    if ( isdefined( var_4 ) )
        var_5.flashfrac = var_4;

    var_6 = newteamhudelem( var_0 );
    var_6.elemtype = "bar";
    var_6.width = var_2;
    var_6.height = var_3;
    var_6.xoffset = 0;
    var_6.yoffset = 0;
    var_6.bar = var_5;
    var_6.children = [];
    var_6.sort = -3;
    var_6.color = ( 0, 0, 0 );
    var_6.alpha = 0.5;
    var_6 scripts\mp\hud_util::setparent( level.uiparent );
    var_6 setshader( "progress_bar_bg", var_2, var_3 );
    var_6.hidden = 0;
    return var_6;
}

floor_gas( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = 1;
    var_8 = var_5.do_ascender_entrance[var_6].goal_ar / var_5._id_1278C;
    var_9 = var_1 + var_8 * var_4;
    var_10 = newteamhudelem( var_0 );
    var_10.shader = "progress_bar_fill";
    var_10 setshader( "progress_bar_fill", var_7, var_3 );
    var_10.x = var_9;
    var_10.y = var_2;
    var_10.alignx = "left";
    var_10.aligny = "top";
    var_10.horzalign = "left_adjustable";
    var_10.vertalign = "top_adjustable";
    var_10.alpha = 0.5;
    var_10.glowalpha = 0;
    var_10.hidewheninmenu = 1;
    var_10.archived = 1;
    var_10.color = ( 1, 1, 1 );
    return var_10;
}

focus_fire_outline_enabled( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = 3;
    var_8 = 4;
    var_9 = var_5.started_breach_process[var_6].dist / var_5._id_1278C;
    var_10 = var_1 + var_9 * var_4 - var_7 / 2.0;
    var_11 = var_2 + var_3 / 2.0 - var_8 / 2.0;
    var_12 = newteamhudelem( var_0 );
    var_12.shader = "progress_bar_fill";
    var_12 setshader( "progress_bar_fill", var_7, var_8 );
    var_12.x = var_10;
    var_12.y = var_11;
    var_12.alignx = "left";
    var_12.aligny = "top";
    var_12.horzalign = "left_adjustable";
    var_12.vertalign = "top_adjustable";
    var_12.alpha = 1.0;
    var_12.glowalpha = 0;
    var_12.hidewheninmenu = 1;
    var_12.archived = 0;
    var_12.color = make_javelin_ammo_refill_interact( var_0, 0 );
    return var_12;
}

enable_leaderboard()
{
    foreach ( var_1 in level.teamnamelist )
    {
        if ( isdefined( level.teamdata[var_1]["checkpoint"] ) )
        {
            foreach ( var_3 in level.teamdata[var_1]["checkpoint"].brking_initpostmain )
                getcash( var_3 );
        }
    }
}

force_thermites( var_0, var_1 )
{
    var_2 = newhudelem();
    var_2.elemtype = "font";
    var_2.font = var_0;
    var_2.fontscale = var_1;
    var_2.basefontscale = var_1;
    var_2.x = 0;
    var_2.y = 0;
    var_2.width = 0;
    var_2.height = int( level.fontheight * var_1 );
    var_2.xoffset = 0;
    var_2.yoffset = 0;
    var_2.children = [];
    var_2 scripts\mp\hud_util::setparent( level.uiparent );
    var_2.hidden = 0;
    var_2.archived = 0;
    return var_2;
}

force_teleport_player_into_plane( var_0, var_1, var_2 )
{
    var_3 = newhudelem();
    var_3.x = 0;
    var_3.y = 0;
    var_3.frac = 0;
    var_3.color = var_0;
    var_3.sort = -2;
    var_3.shader = "progress_bar_fill";
    var_3 setshader( "progress_bar_fill", var_1, var_2 );
    var_3.hidden = 0;
    var_3.archived = 0;
    var_4 = newhudelem();
    var_4.elemtype = "bar";
    var_4.width = var_1;
    var_4.height = var_2;
    var_4.xoffset = 0;
    var_4.yoffset = 0;
    var_4.bar = var_3;
    var_4.children = [];
    var_4.sort = -3;
    var_4.color = ( 0, 0, 0 );
    var_4.alpha = 0.5;
    var_4 scripts\mp\hud_util::setparent( level.uiparent );
    var_4 setshader( "progress_bar_bg", var_1 + 4, var_2 + 4 );
    var_4.hidden = 0;
    var_4.archived = 0;
    return var_4;
}

focus_fire_is_activated( var_0, var_1 )
{
    var_0 = scripts\mp\gametypes\br_public.gsc::helihint_deposit( var_0, 100, -100 );
    var_2 = ( 0, var_1[1], 0 );
    var_3 = anglestoforward( var_2 );
    var_4 = var_0 + var_3 * 110;
    var_5 = scripts\mp\gametypes\br_public.gsc::helihint_gotopad( var_4, 100, -100 );
    var_4 = var_5["position"];
    var_6 = vectortopitch( var_5["normal"] ) + 90;
    var_7 = ( var_6, var_1[1], 0 );
    var_8 = var_0 + var_3 * -30;
    var_5 = scripts\mp\gametypes\br_public.gsc::helihint_gotopad( var_8, 100, -100 );
    var_8 = var_5["position"];
    var_6 = vectortopitch( var_5["normal"] ) + 90;
    var_9 = ( var_6, var_1[1], 0 );
    var_10 = spawn( "script_model", var_4 );
    var_10.angles = var_7;
    var_10 setmodel( "uk_tool_box_small_01" );
    var_10 notsolid();
    var_10 hide();
    var_10.startfightvo = var_4;
    var_10.startexfilchoppers = var_7;
    var_10.startbmoexfilprocess = var_8;
    var_10.startbluntwatchvfx = var_9;
    var_11 = var_1[1] - 90;
    var_10.scriptable = easepower( "payload_obstacle", var_0, ( 0, var_11, -1 * var_6 ) );
    var_10.objidnum = scripts\mp\objidpoolmanager::requestobjectiveid( 99 );

    if ( var_10.objidnum != -1 )
    {
        scripts\mp\objidpoolmanager::objective_add_objective( var_10.objidnum, "active", var_0 );
        scripts\mp\objidpoolmanager::objective_playermask_hidefromall( var_10.objidnum );
        scripts\mp\objidpoolmanager::update_objective_setbackground( var_10.objidnum, 1 );
        scripts\mp\objidpoolmanager::objective_set_play_intro( var_10.objidnum, 0 );
        scripts\mp\objidpoolmanager::objective_set_play_outro( var_10.objidnum, 0 );
        scripts\mp\objidpoolmanager::update_objective_icon( var_10.objidnum, "ui_mp_br_mapmenu_icon_obstacle" );
        scripts\mp\objidpoolmanager::update_objective_ownerteam( var_10.objidnum, game["attackers"] );
        _func_421( var_10.objidnum, 1 );
    }

    var_10.extractcallback = 0;
    var_10 startdeliveries();
    return var_10;
}

_id_11F7F( var_0, var_1 )
{
    foreach ( var_3 in var_0.started_breach_process )
    {
        if ( var_1 == 0 )
        {
            var_3 show();
            var_3.scriptable setscriptablepartstate( "obstacle", "destroyed" );
        }

        if ( var_3.do_ads_hint == var_1 )
        {
            scripts\mp\objidpoolmanager::objective_playermask_showtoall( var_3.objidnum );
            continue;
        }

        scripts\mp\objidpoolmanager::objective_playermask_hidefromall( var_3.objidnum );
    }
}

_id_12F57()
{
    var_0 = 5.0;
    level endon( "game_ended" );
    self endon( "death" );
    self endon( "makeObstacleUnusable" );
    self notify( "watchObstacleUse" );
    self endon( "watchObstacleUse" );
    wait 3;
    self hudoutlineenable( "outline_depth_cyan" );
    var_1 = self;
    var_1 setcursorhint( "HINT_NOICON" );
    var_1 sethintonobstruction( "show" );
    var_1 setusepriority( -1 );
    var_1 setuseholdduration( "duration_none" );
    var_1 setuserange( 100 );
    var_1 sethintstring( &"BR_PAYLOAD/OBSTACLE_BUILD" );
    var_1.userate = 1;
    var_1.curprogress = 0;
    var_1.usetime = var_0;
    var_1.inuse = 0;
    var_1.playerusing = undefined;
    var_1 startenemyhelis();

    for (;;)
    {
        var_1 waittill( "trigger", var_2 );

        if ( istrue( var_2.isjuggernaut ) )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "showErrorMessage" ) )
                var_2 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "showErrorMessage" ) ]]( "KILLSTREAKS/JUGG_CANNOT_BE_USED" );

            continue;
        }

        if ( delay_show_backpack( var_2 ) )
        {
            _id_124AF( var_2 );
            var_1.playerusing = var_2;
            var_3 = _id_12F58( var_2 );

            if ( istrue( var_3 ) )
                startchallengetimer( var_2 );
        }
    }
}

_id_12F58( var_0 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "joined_team" );
    var_0 endon( "joined_spectators" );
    var_1 = self;
    var_1.id = "destroy";
    var_1.userate = scripts\engine\utility::ter_op( isdefined( var_0.objectivescaler ), var_0.objectivescaler, 1 );

    if ( !istrue( self.extractcallback ) )
    {
        var_1.id = "build";
        self.scriptable setscriptablepartstate( "obstacle", "building" );
    }

    var_2 = gettime();

    while ( isdefined( var_0 ) && var_0 scripts\cp_mp\utility\player_utility::_isalive() && defuse_spawners( var_0 ) && var_0 usebuttonpressed() && istrue( var_0.progression_speed ) )
    {
        var_1.curprogress = var_1.curprogress + level.framedurationseconds * var_1.userate;

        if ( var_1.curprogress >= var_1.usetime )
        {
            if ( isdefined( var_0 ) )
                _id_12518( var_0 );

            var_1.playerusing = undefined;
            var_1.curprogress = 0.0;
            return 1;
        }

        var_0 scripts\mp\gameobjects::updateuiprogress( var_1, 1 );
        waitframe();
    }

    if ( self.extractcallback )
        self show();

    var_1.playerusing = undefined;

    if ( isdefined( var_0 ) )
        _id_12518( var_0 );

    if ( !istrue( self.extractcallback ) )
    {
        var_3 = ( gettime() - var_2 ) / 1000;
        startcheck( 0, var_3 );
    }

    var_1.curprogress = 0.0;
    return 0;
}

startdisabled( var_0 )
{
    self.isusable = 1;
    self makeusable();
    startenemyhelis();

    if ( var_0 )
        scripts\mp\objidpoolmanager::objective_playermask_showtoall( self.objidnum );

    thread _id_12F57();
}

startdeliveries()
{
    self notify( "makeObstacleUnusable" );
    self.isusable = 0;

    if ( isdefined( self.playerusing ) )
        _id_12518( self.playerusing );

    self.playerusing = undefined;
    self hudoutlinedisable();

    if ( isdefined( self.playerusing ) )
        _id_12518( self.playerusing );

    self makeunusable();
    startenemyhelis();
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( self.objidnum );
}

_id_124AF( var_0 )
{
    var_1 = self;

    if ( istrue( var_0.isjuggernaut ) )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "airdrop", "allowActionSet" ) )
            var_0 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "airdrop", "allowActionSet" ) ]]( "juggCrateUse", 0 );
    }
    else
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "airdrop", "allowActionSet" ) )
            var_0 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "airdrop", "allowActionSet" ) ]]( "crateUse", 0 );

        var_0.progression_speed = 1;

        if ( self.extractcallback )
        {
            self hide();
            var_0 thread untrack_enemy( "briefcase_bomb_mp", self );
        }
        else
            var_0 thread unsetweaponcarry( "buildable_tool_mp", self );
    }

    var_0 scripts\mp\gameobjects::updateuiprogress( var_1, 0 );
}

_id_12518( var_0 )
{
    var_1 = self;

    if ( istrue( var_0.isjuggernaut ) )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "airdrop", "allowActionSet" ) )
            var_0 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "airdrop", "allowActionSet" ) ]]( "juggCrateUse", 1 );
    }
    else if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "airdrop", "allowActionSet" ) )
        var_0 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "airdrop", "allowActionSet" ) ]]( "crateUse", 1 );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "airdrop", "updateUIProgress" ) )
        var_0 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "airdrop", "updateUIProgress" ) ]]( var_1, 0 );

    var_0.progression_speed = undefined;
    var_0 notify( "obstacle_use_end" );
}

delay_show_backpack( var_0 )
{
    if ( !var_0 scripts\common\utility::is_crate_use_allowed() )
        return 0;

    if ( !var_0 scripts\cp_mp\utility\player_utility::_isalive() )
        return 0;

    if ( var_0 isonladder() )
        return 0;

    if ( isdefined( self.playerscaptured ) && isdefined( self.playerscaptured[var_0 getentitynumber()] ) )
        return 0;

    if ( istrue( self.issquadonlycrate ) )
    {
        if ( isdefined( self.playersused ) && scripts\engine\utility::array_contains( self.playersused, var_0 ) )
            return 0;

        if ( var_0.squadindex != self.squadindex || var_0.team != self.team )
            return 0;
    }

    if ( istrue( self.reaper_waitformissilereloadfinish ) )
    {
        if ( isdefined( self.playersused ) && scripts\engine\utility::array_contains( self.playersused, var_0 ) )
            return 0;

        if ( var_0.team != self.team )
            return 0;
    }

    if ( isbot( var_0 ) )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "airdrop", "botIsKillstreakSupported" ) )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "getGameType" ) )
            {
                if ( [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getGameType" ) ]]() != "grnd" && ![[ scripts\cp_mp\utility\script_utility::getsharedfunc( "airdrop", "botIsKillstreakSupported" ) ]]( self.cratetype ) )
                    return 0;
            }
        }

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "airdrop", "isKillstreakBlockedForBots" ) )
        {
            if ( [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "airdrop", "isKillstreakBlockedForBots" ) ]]( self.cratetype ) )
                return 0;
        }
    }

    if ( !self.isusable )
        return 0;

    if ( var_0 isskydiving() )
        return 0;

    if ( istrue( var_0.inlaststand ) )
        return 0;

    if ( isdefined( self.playerusing ) && self.playerusing != var_0 )
        return 0;

    return 1;
}

defuse_spawners( var_0 )
{
    if ( !scripts\common\utility::is_crate_use_allowed() )
        return 0;

    if ( !var_0 scripts\cp_mp\utility\player_utility::_isalive() )
        return 0;

    if ( var_0 meleebuttonpressed() )
        return 0;

    if ( var_0 isinexecutionvictim() )
        return 0;

    if ( istrue( var_0.inlaststand ) )
        return 0;

    if ( distancesquared( var_0.origin, self.origin ) >= 10000 )
        return 0;

    if ( !self.isusable )
        return 0;

    return 1;
}

startchallengetimer( var_0 )
{
    if ( istrue( self.extractcallback ) )
    {
        self.extractcallback = 0;
        self sethintstring( &"BR_PAYLOAD/OBSTACLE_BUILD" );
        startcheck( 1 );
        self setmodel( "uk_tool_box_small_01" );
        self.origin = self.startfightvo;
        self.angles = self.startexfilchoppers;
        self dontinterpolate();
        self show();
        var_1 = 0;

        if ( isdefined( self.path.vehicle.processscrapassist ) && self.path.vehicle.processscrapassist == self )
        {
            self.path.vehicle.processscrapassist = undefined;
            self.path.vehicle.br_contractxpearned = self;
            var_1 = 1;
        }
        else
        {
            var_2 = distance2dsquared( self.path.vehicle.origin, self.origin );

            if ( var_2 < level.cleanupswaploadoutflags._id_12DA2 )
                var_1 = 1;
        }

        if ( var_1 )
            startarmsracedef3obj( self.path, 0, "obstacleRemoved" );

        foreach ( var_4 in level.players )
        {
            if ( !isalive( var_4 ) )
                continue;

            var_4 thread scripts\mp\hud_message::showsplash( "br_payload_obstacle_removed", undefined, var_0 );
        }

        if ( isdefined( var_0 ) )
        {
            foreach ( var_4 in level.teamdata[var_0.team]["players"] )
            {
                var_4 thread scripts\mp\rank::giverankxp( "br_payload_obstacle_destroyed", 150 );
                var_4 thread scripts\mp\rank::scoreeventpopup( "br_payload_obstacle_destroyed" );
                var_4 thread scripts\mp\gametypes\br_analytics.gsc::chopperexfil_sitting_wind( 150, "br_payload_obstacle_destroyed" );
            }
        }

        scripts\mp\objidpoolmanager::update_objective_ownerteam( self.objidnum, game["attackers"] );
    }
    else
    {
        self.extractcallback = 1;
        self.origin = self.startbmoexfilprocess;
        self.angles = self.startbluntwatchvfx;
        self dontinterpolate();
        self sethintstring( &"BR_PAYLOAD/OBSTACLE_REMOVE" );
        self setmodel( "offhand_wm_briefcase_bomb" );
        self.scriptable setscriptablepartstate( "obstacle", "constructed" );

        if ( isdefined( self.path.vehicle.br_contractxpearned ) && self.path.vehicle.br_contractxpearned == self )
        {
            self.path.vehicle.processscrapassist = self;
            self.path.vehicle.br_contractxpearned = undefined;
        }

        if ( isdefined( var_0 ) )
        {
            foreach ( var_4 in level.teamdata[var_0.team]["players"] )
            {
                var_4 thread scripts\mp\rank::giverankxp( "br_payload_obstacle_built", 500 );
                var_4 thread scripts\mp\rank::scoreeventpopup( "br_payload_obstacle_built" );
                var_4 thread scripts\mp\gametypes\br_analytics.gsc::chopperexfil_sitting_wind( 500, "br_payload_obstacle_built" );
            }
        }

        scripts\mp\objidpoolmanager::update_objective_ownerteam( self.objidnum, game["defenders"] );
    }

    _id_11ED0( self.path.script_index, self.index, self.extractcallback );

    if ( isdefined( var_0 ) )
    {
        var_10 = getdvarint( "scr_br_payload_obstacle_pay_scale", 30 );
        timeramount( var_0, var_10, "obstacle" );
    }

    startenemyhelis();
    startfontscale( game["attackers"] );
    startfontscale( game["defenders"] );
}

startcheck( var_0, var_1 )
{
    var_2 = 2;
    self makeunusable();

    if ( var_0 )
    {
        playsoundatpos( self.origin + ( 0, 0, 50 ), "payload_buildable_bomb_timer" );
        wait 2;
        self hide();
    }

    var_3 = "destroying";
    var_4 = var_2;

    if ( isdefined( var_1 ) )
        var_3 = "building_failed1";

    self.scriptable setscriptablepartstate( "obstacle", "destroying" );
    wait( var_4 );
    self makeusable();
    startenemyhelis();
}

make_javelin_ammo_refill_interact( var_0, var_1 )
{
    if ( istrue( var_1 ) )
    {
        if ( var_0 == game["attackers"] )
            return make_all_oscilloscopes_usable( "red" );
        else
            return make_all_oscilloscopes_usable( "blue" );
    }
    else if ( var_0 == game["attackers"] )
        return make_all_oscilloscopes_usable( "blue" );
    else
        return make_all_oscilloscopes_usable( "red" );
}

startfontscale( var_0 )
{
    var_1 = level.teamdata[var_0]["checkpoint"].brking_initpostmain[self.path.script_index];

    if ( isdefined( var_1 ) )
    {
        var_2 = var_1.has_termal[self.index];
        var_2.color = make_javelin_ammo_refill_interact( var_0, self.extractcallback );
    }
}

startenemyhelis()
{
    var_0 = scripts\mp\utility\teams::getteamdata( game["attackers"], "players" );
    var_1 = scripts\mp\utility\teams::getteamdata( game["defenders"], "players" );

    if ( istrue( self.extractcallback ) )
    {
        foreach ( var_3 in var_0 )
            self enableplayeruse( var_3 );

        foreach ( var_3 in var_1 )
            self disableplayeruse( var_3 );
    }
    else
    {
        foreach ( var_3 in var_1 )
            self enableplayeruse( var_3 );

        foreach ( var_3 in var_0 )
            self disableplayeruse( var_3 );
    }
}

startarmsracedef3obj( var_0, var_1, var_2, var_3 )
{
    thread _id_12DA3( var_2, var_3, var_0 );

    if ( istrue( var_1 ) )
        tank_westturret( var_0.label );
}

playerswithoutdismemberment()
{
    level.cleanupswaploadoutflags.overtime = [];
    target_dmg_monitor();
}

tank_westturret( var_0 )
{
    target_dmg_monitor();

    if ( tank_x2_capacity() )
        level.cleanupswaploadoutflags.overtime[var_0] = level.cleanupswaploadoutflags.target_check_grenade + target_active_fob_watcher();
    else
        level.cleanupswaploadoutflags.overtime[var_0] = gettime();

    level.cleanupswaploadoutflags.overtime[var_0] = level.cleanupswaploadoutflags.overtime[var_0] + maxtokensdropondeath() * 1000;
}

tank_x2_capacity()
{
    var_0 = tanks_help_reminder();
    return var_0 >= target_active_fob_watcher();
}

tanks_help_reminder()
{
    if ( isdefined( level.cleanupswaploadoutflags.target_check_grenade ) )
        return gettime() - level.cleanupswaploadoutflags.target_check_grenade;

    return 0;
}

tanks_killed()
{
    return 180.0;
}

target_active_fob_watcher()
{
    return int( tanks_killed() * 1000 );
}

target_dmg_monitor()
{
    var_0 = tanks_help_reminder();
    var_1 = var_0 / 1000;
    var_2 = [ 5.0, 4.0, 3.0, 2.0, 1.0 ];

    if ( var_1 < 60.0 || tank_x2_capacity() )
        var_3 = var_2[0];
    else if ( var_1 < 70.0 )
        var_3 = var_2[1];
    else if ( var_1 < 80.0 )
        var_3 = var_2[2];
    else if ( var_1 < 90.0 )
        var_3 = var_2[3];
    else
        var_3 = var_2[4];

    level.cleanupswaploadoutflags.tankrespawntime = var_3;
}

maxtokensdropondeath()
{
    return level.cleanupswaploadoutflags.tankrespawntime;
}

maxxpcap()
{
    var_0 = gettime();

    foreach ( var_3, var_2 in level.cleanupswaploadoutflags.overtime )
    {
        if ( var_2 > var_0 )
            var_0 = var_2;
    }

    return int( var_0 );
}

maxweaponxpcap()
{
    var_0 = maxxpcap();
    var_0 = ( var_0 - gettime() ) / 1000;

    if ( var_0 <= 0 )
        var_0 = 0;

    return var_0;
}

maxvehicledamagedivisor()
{
    var_0 = maxxpcap();
    var_0 = var_0 - gettime();

    if ( var_0 <= 0 )
        var_0 = 0;

    return var_0;
}

resetbreakertostate()
{
    var_0 = maxweaponxpcap();

    if ( var_0 <= 0 )
        return 0;

    tank_westturret( "minOvertime" );
    level.timelimitoverride = 1;
    level.cleanupswaploadoutflags.target_check_grenade = gettime();
    level notify( "start_overtime" );
    thread _id_12DA3( "overtime" );
    level thread resetchallengetimer();

    while ( scripts\mp\gamelogic::gettimeremaining() <= 0 && maxweaponxpcap() > 0 )
        waitframe();

    level notify( "stop_overtime" );
    level.timelimitoverride = 0;
    level.cleanupswaploadoutflags.target_check_grenade = undefined;
    target_dmg_monitor();
    return scripts\mp\gamelogic::gettimeremaining() > 0;
}

resetchallengetimer()
{
    var_0 = force_teleport_player_into_plane( ( 1, 1, 1 ), 150, 15 );
    var_0 scripts\mp\hud_util::setpoint( "", undefined, 0, 120 );
    var_1 = force_thermites( "default", 1.0 );
    var_1.label = &"BR_PAYLOAD/LAST_CHANCE";
    var_1 scripts\mp\hud_util::setpoint( "", undefined, 0, 120 );
    var_1.color = ( 1, 1, 1 );
    resetchallengetimers( var_0 );
    var_0 scripts\mp\hud_util::destroyelem();
    var_1 scripts\mp\hud_util::destroyelem();
}

resetchallengetimers( var_0 )
{
    level endon( "stop_overtime" );

    for (;;)
    {
        waittillframeend;
        var_1 = maxweaponxpcap();
        var_2 = maxxpcap();
        var_3 = clamp( var_1 / maxtokensdropondeath(), 0.0, 1.0 );
        _id_12AE5( var_0, var_3 );
        waitframe();
    }
}

_id_12AE5( var_0, var_1 )
{
    var_2 = 1;

    if ( var_1 > 0.5 )
        var_2 = 1 - 2 * ( var_1 - 0.5 );

    var_3 = 1;

    if ( var_1 < 0.5 )
        var_3 = var_1 / 0.5;

    var_4 = 0;
    var_0 scripts\mp\hud_util::updatebar( var_1 );
    var_0.bar.color = ( var_2, var_3, var_4 );
}

tank_x2()
{
    return scripts\mp\gamelogic::gettimeremaining() <= 0 && maxweaponxpcap() > 0;
}

tank_west()
{
    var_0 = "scr_overtime_debug";
    setdvar( var_0, 0 );

    for (;;)
    {
        while ( !getdvarint( var_0, 0 ) )
            wait 0.5;

        var_1 = scripts\mp\hud_util::createservertimer( "hudbig", 1.0 );
        var_1 scripts\mp\hud_util::setpoint( "LEFTBOTTOM", undefined, 15, -80 );
        var_1.color = ( 1, 0, 0 );
        var_1.archived = 0;
        var_1.label = &"Overtime Seconds: ";
        var_2 = scripts\mp\hud_util::createservertimer( "hudbig", 1.0 );
        var_2 scripts\mp\hud_util::setpoint( "LEFTBOTTOM", undefined, 15, -60 );
        var_2.color = ( 1, 0, 0 );
        var_2.archived = 0;
        var_2.label = &"Overtime Seconds Max: ";
        var_3 = scripts\mp\hud_util::createservertimer( "hudbig", 1.0 );
        var_3 scripts\mp\hud_util::setpoint( "LEFTBOTTOM", undefined, 15, -40 );
        var_3.color = ( 1, 0, 0 );
        var_3.archived = 0;
        var_3.label = &"Total Overtime: ";
        var_4 = scripts\mp\hud_util::createservertimer( "hudbig", 1.0 );
        var_4 scripts\mp\hud_util::setpoint( "LEFTBOTTOM", undefined, 15, -20 );
        var_4.color = ( 1, 0, 0 );
        var_4.archived = 0;
        var_4.label = &"Total Overtime Max: ";

        while ( getdvarint( var_0, 0 ) )
        {
            waitframe();
            waittillframeend;
            var_1 setvalue( maxweaponxpcap() );
            var_2 setvalue( maxtokensdropondeath() );
            var_3 setvalue( tanks_help_reminder() / 1000 );
            var_4 setvalue( tanks_killed() );
        }

        level notify( "stop_overtime" );
        var_1 destroy();
        var_2 destroy();
        var_3 destroy();
        var_4 destroy();
    }
}

playerswapteam()
{
    if ( !level.cleanupswaploadoutflags.breakgasmaskbr )
        return;

    var_0 = [];

    if ( isdefined( level.cleanupswaploadoutflags.remove_launcher_xmags ) && level.cleanupswaploadoutflags.remove_launcher_xmags.size > 0 )
    {
        foreach ( var_2 in level.cleanupswaploadoutflags.remove_launcher_xmags )
        {
            var_3 = var_2.script_group;

            if ( !isdefined( var_3 ) )
                continue;

            var_4 = mediumstatehealthratio( var_3 );

            if ( isdefined( var_4 ) )
            {
                var_5 = var_2.angles;

                if ( !isdefined( var_5 ) )
                    var_5 = ( 0, 0, 0 );

                var_6 = easepower( "br_plunder_box", var_2.origin, var_5 );

                if ( isdefined( var_6 ) )
                {
                    var_6.path = var_4;
                    var_0[var_0.size] = var_6;
                }
            }
        }
    }

    if ( var_0.size == 0 )
    {
        foreach ( var_4 in level.cleanupswaploadoutflags.paths )
        {
            foreach ( var_10 in var_4.remove_from_bomb_detonator_waiting_for_pick_up_array )
            {
                var_11 = var_4.nodes[var_10].origin;
                var_12 = mercywintriggered( var_4, var_10 );
                var_6 = fob_think( var_11, var_12, var_4.script_index );

                if ( isdefined( var_6 ) )
                {
                    var_6.path = var_4;
                    var_0[var_0.size] = var_6;
                }
            }
        }
    }

    scripts\mp\gametypes\br_armory_kiosk.gsc::_id_11EF9( var_0 );
}

fob_think( var_0, var_1, var_2 )
{
    var_3 = 300;
    var_4 = 600;
    var_5 = 50;
    var_6 = 100;
    var_7 = vectortoangles( var_1 );
    var_8 = anglestoright( var_7 );
    var_9 = -1 * var_8;

    for ( var_10 = var_3; var_10 <= var_4; var_10 = var_10 + var_5 )
    {
        var_11 = var_0 + var_10 * var_8;
        var_12 = scripts\mp\gametypes\br_public.gsc::helihint_deposit( var_11 );
        var_13 = abs( var_0[2] - var_12[2] );

        if ( var_13 < var_6 )
        {
            var_14 = vectortoangles( var_9 );
            var_15 = easepower( "br_plunder_box", var_12, var_14 );
            return var_15;
        }

        var_16 = var_0 + var_10 * var_9;
        var_17 = scripts\mp\gametypes\br_public.gsc::helihint_deposit( var_16 );
        var_13 = abs( var_0[2] - var_17[2] );

        if ( var_13 < var_6 )
        {
            var_14 = vectortoangles( var_8 );
            var_15 = easepower( "br_plunder_box", var_17, var_14 );
            return var_15;
        }
    }
}

get_length_from_table( var_0, var_1, var_2, var_3 )
{
    get_invalid_seats_from_module_struct( var_0, var_1, var_2, ( 0, 1, 0 ), var_3 );
}

get_hover_attack_direction( var_0, var_1, var_2, var_3 )
{
    get_invalid_seats_from_module_struct( var_0, var_1, var_2, ( 1, 1, 0 ), var_3 );
}

get_invalid_seats_from_module_struct( var_0, var_1, var_2, var_3, var_4 )
{
    for (;;)
    {
        if ( getdvarint( "debugPathPoint", 0 ) != var_2 )
        {
            waitframe();
            continue;
        }

        if ( isdefined( var_1 ) )
        {

        }

        if ( isdefined( var_4 ) )
        {

        }

        waitframe();
    }
}

playerwind()
{
    var_0 = scripts\cp_mp\killstreaks\airdrop::getleveldata( "payload_c130_loot" );
    var_0.capturestring = &"MP/GENERIC_LOOT_CRATE_CAPTURE";
    var_0.dummymodel = "military_carepackage_01_br";
    var_0.friendlymodel = undefined;
    var_0.enemymodel = undefined;
    var_0.mountmantlemodel = undefined;
    var_0.supportsownercapture = 0;
    var_0.headicon = undefined;
    var_0.usepriority = -1;
    var_0.usefov = 180;
    var_0.friendlyuseonly = 1;
    var_0.ownerusetime = 2.0;
    var_0.otherusetime = 2.0;
    var_0.activatecallback = scripts\cp_mp\killstreaks\airdrop::claymore_crate_use;
    var_0.capturecallback = ::claymore_forceclampangles;
    var_0.destroycallback = scripts\cp_mp\killstreaks\airdrop::claymore_load_spawning;
    var_0.final_wave = scripts\cp_mp\killstreaks\airdrop::claymore_stunned;
    var_0.destroyoncapture = 0;
}

claymore_forceclampangles( var_0 )
{
    if ( isdefined( self._id_120E7 ) )
    {
        self._id_120E7 setscriptablepartstate( "smoke_signal", "off", 0 );
        self._id_120E7 delete();
    }

    var_0 thread scripts\mp\utility\points::giveunifiedpoints( "br_c130_box_open" );
    var_0._id_11AC7 = 1;
}

combined_alias()
{
    return !istrue( self._id_11AC7 );
}

fly_over_start( var_0, var_1 )
{
    if ( var_1 == "juggernaut" )
        var_0._id_120AA = 1;

    return var_0;
}

playing_bomb_counter_beep()
{
    game["dialog"]["payload_welcome"] = "gametype_payload";
    game["dialog"]["halftime"] = "gametype_payload_halftime";
    game["dialog"]["timesup_120"] = "payload_2_min";
    game["dialog"]["timesup_60"] = "payload_60_sec";
    game["dialog"]["timesup_45"] = "payload_45_sec";
    game["dialog"]["timesup_20"] = "payload_20_sec";
    game["dialog"]["timesup_10"] = "payload_10_sec";
    game["dialog"]["payload_oob"] = "payload_out";
    game["dialog"]["attack_intro1"] = "gametype_desc_payload_attack";
    game["dialog"]["attack_intro2"] = "gametype_desc_payload_attack2";
    game["dialog"]["attack_securing_a"] = "payload_attack_alpha_move";
    game["dialog"]["attack_securing_b"] = "payload_attack_bravo_move";
    game["dialog"]["attack_losing_a"] = "payload_attack_a_back";
    game["dialog"]["attack_losing_b"] = "payload_attack_b_back";
    game["dialog"]["attack_contested_a"] = "payload_attack_a_contest";
    game["dialog"]["attack_contested_b"] = "payload_attack_b_contest";
    game["dialog"]["attack_blocked_a"] = "payload_attack_a_blocked";
    game["dialog"]["attack_blocked_b"] = "payload_attack_b_blocked";
    game["dialog"]["attack_obstacle_a"] = "payload_obs_a";
    game["dialog"]["attack_obstacle_b"] = "payload_obs_b";
    game["dialog"]["attack_secured_a"] = "payload_attack_a_success";
    game["dialog"]["attack_secured_b"] = "payload_attack_b_success";
    game["dialog"]["attack_overtime"] = "payload_attack_overtime";
    game["dialog"]["attack_near1_a"] = "payload_attack_a_near1";
    game["dialog"]["attack_near1_b"] = "payload_attack_b_near1";
    game["dialog"]["attack_near2_a"] = "payload_attack_a_near2";
    game["dialog"]["attack_near2_b"] = "payload_attack_b_near2";
    game["dialog"]["attack_near3_a"] = "payload_attack_a_near3";
    game["dialog"]["attack_near3_b"] = "payload_attack_b_near3";
    game["dialog"]["attack_finished"] = "payload_attack_win";
    game["dialog"]["attack_stopped"] = "payload_attack_lose";
    game["dialog"]["defend_intro1"] = "gametype_desc_payload_defend";
    game["dialog"]["defend_intro2"] = "gametype_desc_payload_defend2";
    game["dialog"]["defend_losing_a"] = "payload_defend_a_move";
    game["dialog"]["defend_losing_b"] = "payload_defend_b_move";
    game["dialog"]["defend_securing_a"] = "payload_defend_a_retreat";
    game["dialog"]["defend_securing_b"] = "payload_defend_b_retreat";
    game["dialog"]["defend_contested_a"] = "payload_defend_a_contest";
    game["dialog"]["defend_contested_b"] = "payload_defend_b_contest";
    game["dialog"]["defend_obstacle_a"] = "payload_defend_a_destroy";
    game["dialog"]["defend_obstacle_b"] = "payload_defend_b_destroy";
    game["dialog"]["defend_lost1_a"] = "payload_defend_cross_fail1";
    game["dialog"]["defend_lost1_b"] = "payload_defend_cross_fail1";
    game["dialog"]["defend_lost2_a"] = "payload_defend_cross_fail2";
    game["dialog"]["defend_lost2_b"] = "payload_defend_cross_fail2";
    game["dialog"]["defend_lost3_a"] = "payload_defend_cross_a_fail3";
    game["dialog"]["defend_lost3_b"] = "payload_defend_cross_b_fail3";
    game["dialog"]["defend_overtime"] = "payload_defend_overtime";
    game["dialog"]["defend_near1_a"] = "payload_defend_a_near1";
    game["dialog"]["defend_near1_b"] = "payload_defend_b_near1";
    game["dialog"]["defend_near2_a"] = "payload_defend_a_near2";
    game["dialog"]["defend_near2_b"] = "payload_defend_b_near2";
    game["dialog"]["defend_near3_a"] = "payload_defend_a_near3";
    game["dialog"]["defend_near3_b"] = "payload_defend_b_near3";
    game["dialog"]["defend_stopped"] = "payload_defend_win";
    game["dialog"]["defend_finished"] = "payload_defend_lose";
    game["dialog"]["round_success"] = undefined;
    game["dialog"]["round_failure"] = undefined;
    game["dialog"]["round_draw"] = undefined;
}

_id_12DA3( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0 ) )
    {
        var_2._id_12DA9 = "none";
        var_2._id_12DA8 = gettime() + level.cleanupswaploadoutflags._id_12DA7;
        var_2._id_12D9C = gettime() + level.cleanupswaploadoutflags._id_12D9B;
        return;
    }

    var_3 = _id_12025( var_0 );
    var_4 = isdefined( var_2 ) && var_2._id_12DA9 == var_0;

    if ( !var_3 && var_4 && isdefined( var_2 ) && var_2._id_12DA8 > gettime() && var_2._id_12D9C > gettime() )
    {
        var_2._id_12D9A = gettime() + level.cleanupswaploadoutflags._id_12D99;
        return;
    }

    if ( !var_3 && !var_4 && isdefined( var_2 ) && var_2._id_12D9A > gettime() )
    {
        var_2._id_12D9C = gettime() + level.cleanupswaploadoutflags._id_12D9B;
        var_2._id_12DA8 = gettime() + level.cleanupswaploadoutflags._id_12DA1;
        return;
    }

    var_5 = var_4 && isdefined( var_2 ) && var_2._id_12D9C <= gettime();
    var_6 = undefined;
    var_7 = undefined;
    var_8 = var_3;
    var_9 = var_3;
    var_10 = undefined;

    switch ( var_0 )
    {
        case "forward":
            var_6 = "attack_securing" + var_2.iconname;
            var_7 = "defend_losing" + var_2.iconname;

            if ( var_5 )
                var_9 = 1;

            break;
        case "reverse":
            var_6 = "attack_losing" + var_2.iconname;
            var_7 = "defend_securing" + var_2.iconname;

            if ( var_5 )
                var_8 = 1;

            break;
        case "contested":
            var_6 = "attack_contested" + var_2.iconname;
            var_7 = "defend_contested" + var_2.iconname;

            if ( var_5 )
                var_8 = 1;

            break;
        case "blocked":
            var_6 = "attack_blocked" + var_2.iconname;
            break;
        case "obstacleRemoved":
            var_6 = "attack_obstacle" + var_2.iconname;
            var_7 = "defend_obstacle" + var_2.iconname;
            break;
        case "checkpoint":
            var_6 = "attack_secured" + var_2.iconname;
            var_7 = "defend_lost" + var_1 + var_2.iconname;
            var_10 = 2;
            break;
        case "overtime":
            var_6 = "attack_overtime";
            var_7 = "defend_overtime";
            break;
        case "near":
            var_6 = "attack_near" + var_1 + var_2.iconname;
            var_7 = "defend_near" + var_1 + var_2.iconname;

            if ( var_5 )
                var_9 = 1;

            break;
        case "finished":
            var_6 = "attack_finished";
            var_7 = "defend_finished";
            break;
        case "stopped":
            var_6 = "attack_stopped";
            var_7 = "defend_stopped";
            break;
        default:
            return;
    }

    if ( var_8 )
        scripts\mp\gametypes\br_public.gsc::cloudanimfx( var_6, game["attackers"], 1, var_10, undefined, 1 );
    else if ( isdefined( var_6 ) )
        rodwatcher( var_6, game["attackers"], var_2, var_10 );

    if ( var_9 )
        scripts\mp\gametypes\br_public.gsc::cloudanimfx( var_7, game["defenders"], 1, var_10, undefined, 1 );
    else if ( isdefined( var_7 ) )
        rodwatcher( var_7, game["defenders"], var_2, var_10 );

    if ( isdefined( var_2 ) )
    {
        var_2._id_12DA9 = var_0;
        var_2._id_12D9A = gettime() + level.cleanupswaploadoutflags._id_12D99;
        var_2._id_12DA8 = gettime() + level.cleanupswaploadoutflags._id_12DA7;

        if ( !var_4 || var_5 )
            var_2._id_12D9C = gettime() + level.cleanupswaploadoutflags._id_12D9B;
    }
}

_id_12025( var_0 )
{
    switch ( var_0 )
    {
        case "obstacleRemoved":
        case "finished":
        case "checkpoint":
        case "stopped":
        case "overtime":
            return 1;
        default:
            break;
    }

    return 0;
}

rodwatcher( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( game["dialog"][var_0] ) )
        return;

    var_4 = scripts\mp\utility\teams::getteamdata( var_1, "players" );

    for ( var_5 = 0; var_5 < var_4.size; var_5++ )
    {
        var_6 = var_4[var_5];
        var_7 = var_6 unset_relic_noluck();

        if ( isdefined( var_7 ) && var_2 != var_7 )
            continue;

        scripts\mp\gametypes\br_public.gsc::cloud_cover( var_0, var_6, 1, 1, var_3 );
    }
}

updateexpiredlootleader()
{
    self endon( "disconnect" );

    if ( istrue( self._id_12D98 ) )
        return;

    self._id_12D98 = 1;
    scripts\mp\gametypes\br_public.gsc::cloud_cover( "payload_oob", self );
    wait 5;
    self._id_12D98 = undefined;
}

timelimitclock()
{
    level endon( "cancel_announcer_dialog" );
    var_0 = 0;
    var_1 = 0;
    var_2 = 0;
    var_3 = 0;
    var_4 = 0;
    var_5 = scripts\engine\utility::ter_op( scripts\mp\utility\game::isanymlgmatch(), 5, 2 );

    while ( game["state"] == "playing" )
    {
        if ( !level.timerstopped && scripts\mp\utility\game::gettimelimit() && !istrue( level.bombsplanted ) )
        {
            var_6 = scripts\mp\gamelogic::gettimeremaining() / 1000;
            var_7 = int( var_6 + 0.5 );
            var_8 = 0;

            if ( var_5 == 2 && var_7 % 2 == 1 )
                var_8 = 1;

            if ( !var_0 && ( var_8 == 1 && var_7 == 121 || var_8 == 0 && var_7 == 120 ) )
            {
                scripts\mp\gametypes\br_public.gsc::brleaderdialog( "timesup_120", 0, undefined, 1 );
                level notify( "match_ending_soon", "time" );
                var_0 = 1;
            }
            else if ( !var_1 && ( var_8 == 1 && var_7 == 61 || var_8 == 0 && var_7 == 60 ) )
            {
                scripts\mp\gametypes\br_public.gsc::brleaderdialog( "timesup_60", 0, undefined, 1 );
                level notify( "match_ending_soon", "time" );
                var_1 = 1;
            }
            else if ( !var_2 && ( var_8 == 0 && var_7 == 46 || var_8 == 1 && var_7 == 45 ) )
            {
                scripts\mp\gametypes\br_public.gsc::brleaderdialog( "timesup_45", 0, undefined, 1 );
                level notify( "match_ending_soon", "time" );
                var_2 = 1;
            }
            else if ( !var_3 && ( var_8 == 1 && var_7 == 21 || var_8 == 0 && var_7 == 20 ) )
            {
                scripts\mp\gametypes\br_public.gsc::brleaderdialog( "timesup_20", 0, undefined, 1 );
                level notify( "match_ending_soon", "time" );
                var_3 = 1;
            }
            else if ( !var_4 && ( var_8 == 1 && var_7 == 11 || var_8 == 0 && var_7 == 10 ) )
            {
                scripts\mp\gametypes\br_public.gsc::brleaderdialog( "timesup_10", 0, undefined, 1 );
                level notify( "match_ending_soon", "time" );
                var_4 = 1;
            }

            if ( var_7 <= 10 || var_7 <= 30 && var_7 % var_5 == var_8 )
            {
                level notify( "match_ending_very_soon" );
                var_9 = 1;

                if ( var_7 == 0 )
                    break;

                if ( isdefined( level.overridetimelimitclock ) && level.overridetimelimitclock < var_7 )
                    var_9 = 0;

                if ( var_9 )
                {
                    var_10 = scripts\mp\gamelogic::maderecentkill( var_6 );
                    playsoundatpos( ( 0, 0, 0 ), var_10 );
                }
            }

            if ( var_6 - floor( var_6 ) >= 0.05 )
            {
                wait( var_6 - floor( var_6 ) );
                continue;
            }
        }

        wait 1.0;
    }
}

suncascademult1( var_0 )
{
    if ( var_0 == "halftime" )
        scripts\mp\gametypes\br_public.gsc::brleaderdialog( "halftime", 0, undefined, 1 );
}

players_camera_fly_to_start_pos()
{
    if ( !level.cleanupswaploadoutflags.do_hack_sequence )
        return;

    setomnvar( "requires_scriptmover_ladder_checks", 1 );
    _id_11F58( level.cleanupswaploadoutflags.do_exfil_vo, "buildable_checkpoint", "buildable_checkpoint_clipbrush", "checkpoint_01_anim", "iw8_br_payload_raise_bunker", &"BR_PAYLOAD/PURCHASE_BUNKER", level.cleanupswaploadoutflags.dmztut_endgamewithreward, "ui_mp_br_mapmenu_icon_bunker" );
    _id_11F58( level.cleanupswaploadoutflags._id_127AD, "buildable_guardtower", "buildable_guardtower_clipbrush", "guardtower_01_anim", "iw8_br_payload_raise_tower", &"BR_PAYLOAD/PURCHASE_TOWER", level.cleanupswaploadoutflags.do_laser_panel_anim_sequence, "ui_mp_br_mapmenu_icon_tower" );
    playerwind();
}

_id_11F58( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    if ( !isdefined( var_0 ) )
        var_0 = scripts\engine\utility::getstructarray( var_1, "targetname" );

    foreach ( var_9 in var_0 )
    {
        if ( !isdefined( var_9.angles ) )
            var_9.angles = ( 0, 0, 0 );

        var_9.shouldlink = var_3;
        var_9.equipmentuse = var_2;
        var_9._id_12548 = var_1;
        var_9.wave_ai_killed = var_4;
        var_9.waittoshow = 0;
        var_10 = spawn( "script_model", var_9.origin );
        var_10.angles = var_9.angles;
        var_10 setmodel( "tag_origin" );
        var_10 hide();
        var_10._id_12B86 = var_5;
        var_10.price = var_6;
        var_10.loc = var_9;
        var_9.do_ghost_skit = var_10;
        var_10.scriptable = easepower( "military_hq_crate_02_payload", var_9.origin, var_9.angles );
        var_10.scriptable setscriptablepartstate( "main", "idle" );
        var_9.objidnum = scripts\mp\objidpoolmanager::requestobjectiveid( 99 );

        if ( var_9.objidnum != -1 )
        {
            scripts\mp\objidpoolmanager::objective_add_objective( var_9.objidnum, "active", var_9.origin );
            scripts\mp\objidpoolmanager::objective_playermask_hidefromall( var_9.objidnum );
            scripts\mp\objidpoolmanager::update_objective_setbackground( var_9.objidnum, 1 );
            scripts\mp\objidpoolmanager::objective_set_play_intro( var_9.objidnum, 0 );
            scripts\mp\objidpoolmanager::objective_set_play_outro( var_9.objidnum, 0 );
            scripts\mp\objidpoolmanager::update_objective_icon( var_9.objidnum, var_7 );
            scripts\mp\objidpoolmanager::update_objective_ownerteam( var_9.objidnum, game["defenders"] );
            _func_421( var_9.objidnum, 1 );
        }

        var_11 = 0;

        if ( isdefined( var_9.script_group ) )
            var_11 = var_9.script_group;
        else
            var_9.script_group = var_11;

        var_12 = mediumstatehealthratio( var_11 );

        if ( isdefined( var_12 ) )
        {
            var_13 = var_12.do_hack_sequence.size;

            if ( isdefined( var_9.script_index ) )
                var_13 = var_9.script_index;
            else
                var_9.script_index = var_13;

            if ( !isdefined( var_12.do_hack_sequence[var_13] ) )
                var_12.do_hack_sequence[var_13] = [];

            var_14 = var_12.do_hack_sequence[var_13].size;
            var_12.do_hack_sequence[var_13][var_14] = var_9;
        }
    }
}

wait_at_station( var_0, var_1 )
{
    if ( !level.cleanupswaploadoutflags.do_hack_sequence )
        return;

    var_2 = var_0 - 1;

    if ( isdefined( var_1 ) )
    {
        if ( var_0 > 0 && isdefined( var_1.do_hack_sequence[var_2] ) )
        {
            foreach ( var_4 in var_1.do_hack_sequence[var_2] )
            {
                if ( !istrue( var_4.waittoshow ) )
                {
                    var_4.do_ghost_skit _id_12544();
                    var_4.do_ghost_skit hide();
                }
            }
        }

        if ( isdefined( var_1.do_hack_sequence[var_0] ) )
        {
            foreach ( var_4 in var_1.do_hack_sequence[var_0] )
            {
                var_4.do_ghost_skit show();
                var_4.do_ghost_skit _id_12545();
            }
        }
    }
    else
    {
        foreach ( var_1 in level.cleanupswaploadoutflags.paths )
        {
            if ( var_0 > 0 && isdefined( var_1.do_hack_sequence[var_2] ) )
            {
                foreach ( var_4 in var_1.do_hack_sequence[var_2] )
                {
                    if ( !istrue( var_4.waittoshow ) )
                    {
                        var_4.do_ghost_skit _id_12544();
                        var_4.do_ghost_skit hide();
                    }
                }
            }

            if ( isdefined( var_1.do_hack_sequence[var_0] ) )
            {
                foreach ( var_4 in var_1.do_hack_sequence[var_0] )
                {
                    var_4.do_ghost_skit show();
                    var_4.do_ghost_skit _id_12545();
                }
            }
        }
    }
}

_id_12549()
{
    var_0 = 5.0;
    level endon( "game_ended" );
    self endon( "death" );
    self endon( "makeStructureUnusable" );
    self notify( "structureWatchUse" );
    self endon( "structureWatchUse" );
    wait 3;
    var_1 = scripts\mp\utility\teams::getteamdata( game["defenders"], "players" );

    if ( var_1.size > 0 )
        self hudoutlineenableforclients( var_1, "outline_depth_cyan" );

    var_2 = self;
    var_2 setcursorhint( "HINT_NOICON" );
    var_2 sethintonobstruction( "show" );
    var_2 setusepriority( -1 );
    var_2 setuseholdduration( "duration_none" );
    var_2 sethintstring( var_2._id_12B86 );
    var_2 sethintstringparams( var_2.price );
    var_2.userate = 1;
    var_2.curprogress = 0;
    var_2.usetime = var_0;
    var_2.inuse = 0;
    var_2.playerusing = undefined;
    var_2 _id_12547();

    for (;;)
    {
        var_2 waittill( "trigger", var_3 );

        if ( istrue( var_3.isjuggernaut ) )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "showErrorMessage" ) )
                var_3 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "showErrorMessage" ) ]]( "KILLSTREAKS/JUGG_CANNOT_BE_USED" );

            continue;
        }

        if ( var_2 _id_12542( var_3 ) )
        {
            var_4 = int( var_2.price / 100 );
            _id_12294( var_2.loc, var_3 );
            var_3 scripts\mp\gametypes\br_plunder.gsc::playersetplundercount( var_3.plundercount - var_4 );
            return;
        }
    }
}

_id_12542( var_0 )
{
    if ( !var_0 scripts\common\utility::is_crate_use_allowed() )
        return 0;

    if ( !var_0 scripts\cp_mp\utility\player_utility::_isalive() )
        return 0;

    if ( var_0 isonladder() )
        return 0;

    if ( isdefined( self.playerscaptured ) && isdefined( self.playerscaptured[var_0 getentitynumber()] ) )
        return 0;

    if ( istrue( self.issquadonlycrate ) )
    {
        if ( isdefined( self.playersused ) && scripts\engine\utility::array_contains( self.playersused, var_0 ) )
            return 0;

        if ( var_0.squadindex != self.squadindex || var_0.team != self.team )
            return 0;
    }

    if ( istrue( self.reaper_waitformissilereloadfinish ) )
    {
        if ( isdefined( self.playersused ) && scripts\engine\utility::array_contains( self.playersused, var_0 ) )
            return 0;

        if ( var_0.team != self.team )
            return 0;
    }

    if ( isbot( var_0 ) )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "airdrop", "botIsKillstreakSupported" ) )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "getGameType" ) )
            {
                if ( [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getGameType" ) ]]() != "grnd" && ![[ scripts\cp_mp\utility\script_utility::getsharedfunc( "airdrop", "botIsKillstreakSupported" ) ]]( self.cratetype ) )
                    return 0;
            }
        }

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "airdrop", "isKillstreakBlockedForBots" ) )
        {
            if ( [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "airdrop", "isKillstreakBlockedForBots" ) ]]( self.cratetype ) )
                return 0;
        }
    }

    if ( !self.isusable )
        return 0;

    if ( var_0 isskydiving() )
        return 0;

    if ( istrue( var_0.inlaststand ) )
        return 0;

    if ( isdefined( self.playerusing ) && self.playerusing != var_0 )
        return 0;

    var_1 = int( self.price / 100 );

    if ( var_0.plundercount < var_1 )
        return 0;

    return 1;
}

_id_12545()
{
    self.isusable = 1;
    self makeusable();
    _id_12547();
    scripts\mp\objidpoolmanager::update_objective_ownerteam( self.loc.objidnum, game["defenders"] );
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( self.loc.objidnum );
    scripts\mp\objidpoolmanager::objective_teammask_addtomask( self.loc.objidnum, game["defenders"] );
    thread _id_12549();
}

_id_12544()
{
    self notify( "makeStructureUnusable" );
    self.isusable = 0;
    self hudoutlinedisable();
    self makeunusable();
    _id_12547();
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( self.loc.objidnum );
}

_id_12547()
{
    var_0 = scripts\mp\utility\teams::getteamdata( game["attackers"], "players" );
    var_1 = scripts\mp\utility\teams::getteamdata( game["defenders"], "players" );

    foreach ( var_3 in var_1 )
        self enableplayeruse( var_3 );

    foreach ( var_3 in var_0 )
        self disableplayeruse( var_3 );
}

_id_12294( var_0, var_1 )
{
    var_0.waittoshow = 1;
    var_2 = var_0.do_ghost_skit;
    var_2 makeunusable();
    var_0.do_ghost_skit = var_2;
    var_2 _id_12546( var_1, var_0.shouldlink, var_0.wave_ai_killed );
    var_3 = getent( var_0.equipmentuse, "targetname" );

    if ( isdefined( var_3 ) )
    {
        var_4 = spawn( "script_model", var_0.origin );
        var_4.angles = var_0.angles;
        var_4 clonebrushmodeltoscriptmodel( var_3 );
        var_2.collision = var_4;
        var_5 = getentarrayinradius( "player", "classname", var_0.origin, 500 );

        foreach ( var_1 in var_5 )
        {
            if ( !isalive( var_1 ) )
                continue;

            if ( var_1 istouching( var_4 ) )
                var_1 setorigin( var_0.origin );
        }
    }

    if ( var_0._id_12548 == "buildable_checkpoint" )
        var_2 thread current_volume_num();
    else if ( var_0._id_12548 == "buildable_guardtower" )
        var_2 _id_127AC( var_1 );

    return var_2;
}

_id_12546( var_0, var_1, var_2 )
{
    var_3 = 1.53;
    self.scriptable setscriptablepartstate( "main", "activated" );
    var_4 = anglestoforward( self.angles );
    var_5 = self.origin + var_4 * 50;
    barkov_crawl_scene_nostab( var_5, var_0 );
    var_6 = spawn( "script_model", self.origin );
    var_6.angles = self.angles;
    var_6 setmodel( "generic_prop_x3" );
    var_6 scriptmodelplayanim( var_2, "structure_reveal" );
    var_6 scriptmodelpauseanim( 1 );
    self.scriptable setscriptablepartstate( "main", "hidden" );
    self setmodel( var_1 );
    self linkto( var_6, "j_prop_1", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    self dontinterpolate();
    var_6 scriptmodelpauseanim( 0 );
    wait( var_3 );
    waitframe();
    var_6 delete();
}

barkov_crawl_scene_nostab( var_0, var_1 )
{
    var_2 = scripts\cp_mp\killstreaks\airdrop::heli_convertforplayerfunc( var_0 + ( 0, 0, 3000 ), var_0, ( 0, 0, 0 ), "payload_c130_loot", "inactive", undefined, 1 );
    var_2.nevertimeout = 1;
    var_2 setotherent( var_1 );
    var_2 waittill( "collision", var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 );
    waitframe();
    var_2 scripts\cp_mp\killstreaks\airdrop::makecrateunusable();
    var_2 delete();
}

modespawnclient( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0.do_hack_sequence[var_1] ) )
        return;

    foreach ( var_4 in var_0.do_hack_sequence[var_1] )
    {
        if ( var_4._id_12548 == var_2 && !istrue( var_4.waittoshow ) )
            return var_4;
    }
}

cs_flags_init( var_0, var_1 )
{
    return curr_airlock_pos( var_0, var_1, "buildable_checkpoint" );
}

current_ally_volume( var_0, var_1 )
{
    return curr_airlock_pos( var_0, var_1, "buildable_guardtower" );
}

curr_airlock_pos( var_0, var_1, var_2 )
{
    var_3 = 25;
    var_4 = 26;
    var_5 = var_1.path;
    var_6 = level.cleanupswaploadoutflags.do_ads_hint;

    if ( var_6 == 0 && var_0.team == game["attackers"] )
    {
        var_0 scripts\mp\gametypes\br_armory_kiosk.gsc::activate_emp_drone_func( var_3 );
        return 0;
    }

    if ( var_0.team == game["attackers"] )
        var_6--;

    if ( isdefined( var_5.do_hack_sequence[var_6] ) )
    {
        var_7 = modespawnclient( var_5, var_6, var_2 );

        if ( isdefined( var_7 ) )
        {
            _id_12294( var_7, var_0 );
            return 1;
        }
    }

    var_0 scripts\mp\gametypes\br_armory_kiosk.gsc::activate_emp_drone_func( var_4 );
    return 0;
}

_id_12543( var_0 )
{
    var_1 = scripts\mp\utility\teams::getteamdata( var_0.team, "players" );
    self hudoutlineenableforclients( var_1, "outline_nodepth_cyan" );
    var_2 = getdvarint( "scr_br_payload_highlight_time", 10 );
    wait( var_2 );
    self hudoutlinedisable();
}

current_volume_num()
{
    level endon( "game_ended" );
    level endon( "sudden_death_started" );
    var_0 = ( 0, -30, 0 );
    var_1 = ( 0, -90, 0 );
    var_2 = rotatevector( var_0, self.angles );
    var_3 = self.origin + var_2;
    var_4 = spawnturret( "misc_turret", var_3, "manual_turret_payload_mp", 0 );
    var_4.angles = ( 0, self.angles[1], 0 ) + var_1;
    var_4 setmodel( "weapon_wm_mg_mobile_turret" );
    var_4 setscriptablepartstate( "hide_reticle", 1, 0 );
    var_4 sethintstring( &"BR_PAYLOAD/TURRET_MG" );
    var_4 makeusable();
    var_4 setdefaultdroppitch( 0 );
    var_4 setturretmodechangewait( 1 );
    var_4.maxhealth = 999999;
    var_4.health = var_4.maxhealth;

    for (;;)
    {
        var_4 waittill( "trigger", var_5 );
        var_4.owner = var_5;
        var_5 giveweapon( "manual_turret_payload_mp", -1, 0, -1, 1 );
        var_6 = var_5 scripts\cp_mp\utility\inventory_utility::domonitoredweaponswitch( "manual_turret_payload_mp", 1 );

        if ( istrue( var_6 ) )
        {
            var_4 setotherent( var_5 );
            var_4 setentityowner( var_5 );
            var_5 controlturreton( var_4 );
            var_4 waittill( "turretownerchange" );
            var_4.owner = undefined;
            var_4 setotherent( undefined );
            var_4 setentityowner( undefined );
        }

        if ( isdefined( var_5 ) )
        {
            var_5 controlturretoff( var_4 );

            if ( var_5 hasweapon( "manual_turret_payload_mp" ) )
                var_5 takeweapon( "manual_turret_payload_mp" );

            var_5 scripts\mp\utility\inventory::switchtolastweapon();
        }
    }
}

_id_127AC( var_0 )
{
    var_1 = 4;

    if ( !isdefined( level.cleanupswaploadoutflags.watchinexecution ) )
        level.cleanupswaploadoutflags.watchinexecution = [];

    if ( level.cleanupswaploadoutflags.watchinexecution.size >= var_1 )
    {
        var_2 = undefined;
        var_3 = undefined;

        foreach ( var_6, var_5 in level.cleanupswaploadoutflags.watchinexecution )
        {
            if ( !isdefined( var_3 ) || var_5.watchleadchange < var_3 )
            {
                var_2 = var_6;
                var_3 = var_5.watchleadchange;
            }
        }

        level.cleanupswaploadoutflags.watchinexecution[var_2] clearportableradar();
        level.cleanupswaploadoutflags.watchinexecution[var_2] = undefined;
    }

    self.watchleadchange = gettime();
    self makeportableradar( var_0 );
    level.cleanupswaploadoutflags.watchinexecution[self getentitynumber()] = self;
}

timeoutvfxname()
{
    level endon( "game_ended" );
    wait 1;

    if ( !level.cleanupswaploadoutflags.getvehicleplayertrail )
        return;

    var_0 = getentitylessscriptablearrayinradius( "scriptable_scriptable_auto_ascender", "classname" );
    var_1 = getentitylessscriptablearrayinradius( "scriptable_scriptable_auto_ascender_solo", "classname" );
    var_2 = getentitylessscriptablearrayinradius( "scriptable_scriptable_auto_ascender_soa_tower", "classname" );

    if ( var_0.size )
    {
        foreach ( var_4 in var_0 )
        {
            if ( var_4 getscriptablehaspart( "ascender" ) )
                var_4 setscriptablepartstate( "ascender", "noprompt" );
        }
    }

    if ( var_1.size )
    {
        foreach ( var_4 in var_1 )
        {
            if ( var_4 getscriptablehaspart( "ascender_solo" ) )
                var_4 setscriptablepartstate( "ascender_solo", "noprompt" );
        }
    }

    if ( var_2.size )
    {
        foreach ( var_4 in var_2 )
        {
            if ( var_4 getscriptablehaspart( "ascender" ) )
                var_4 setscriptablepartstate( "ascender", "noprompt" );
        }
    }
}

playersetattractionlocationindex()
{
    if ( !level.cleanupswaploadoutflags.headicon_range )
        return;

    var_0 = [ "jeep", "tac_rover" ];
    var_1 = 0;

    if ( !isdefined( level.cleanupswaploadoutflags.vehiclespawns ) )
        level.cleanupswaploadoutflags.vehiclespawns = scripts\engine\utility::getstructarray( "payload_vehicle_spawns", "script_noteworthy" );

    foreach ( var_3 in level.cleanupswaploadoutflags.vehiclespawns )
    {
        var_3._id_12D1B = var_3.script_parameters;

        if ( !isdefined( var_3._id_12D1B ) )
        {
            var_3._id_12D1B = var_0[var_1];
            var_1++;

            if ( var_1 >= var_0.size )
                var_1 = 0;
        }

        if ( !isdefined( var_3.angles ) )
            var_3.angles = ( 0, 0, 0 );

        var_4 = var_3.script_index;
        var_5 = var_3.script_group;
        var_6 = mediumstatehealthratio( var_5 );

        if ( isdefined( var_6 ) )
        {
            var_7 = var_6.do_ascender_entrance[var_4];

            if ( !isdefined( var_7.vehiclespawns ) )
                var_7.vehiclespawns = [];

            var_8 = game["attackers"];

            if ( var_3.targetname == "defender" )
                var_8 = game["defenders"];

            if ( !isdefined( var_7.vehiclespawns[var_8] ) )
                var_7.vehiclespawns[var_8] = [];

            var_9 = var_7.vehiclespawns[var_8].size;
            var_7.vehiclespawns[var_8][var_9] = var_3;
        }
    }
}

spawninitialvehicles()
{
    if ( !scripts\mp\flags::gameflag( "prematch_done" ) && !istrue( game["switchedsides"] ) )
        scripts\mp\gametypes\br_vehicles.gsc::spawninitialvehicles();
    else
    {
        _id_12305( 1 );
        thread _id_122AA( game["attackers"] );
        thread _id_122AA( game["defenders"] );
    }
}

_id_122AA( var_0 )
{
    level endon( "game_ended" );
    level notify( "spawnDrivableVehiclesTimer_" + var_0 );
    level endon( "spawnDrivableVehiclesTimer_" + var_0 );
    var_1 = 2;
    var_2 = 1;

    foreach ( var_4 in level.cleanupswaploadoutflags.paths )
        var_4.start_drones_event[var_0] = 0;

    for (;;)
    {
        foreach ( var_4 in level.cleanupswaploadoutflags.paths )
        {
            var_7 = loschecktime( var_4 );

            if ( var_7 < 0 )
                var_7 = 0;

            var_8 = var_4.do_ascender_entrance[var_7];

            if ( isdefined( var_8 ) && isdefined( var_8.vehiclespawns ) )
            {
                var_9 = var_8.vehiclespawns[var_0];

                foreach ( var_11 in var_9 )
                {
                    if ( var_4.start_drones_event[var_0] >= var_1 )
                        break;

                    if ( istrue( var_11.inuse ) )
                        continue;

                    var_12 = scripts\mp\gametypes\br_vehicles.gsc::tryspawnavehicle( var_11._id_12D1B, var_11, "alwaysSpawn" );

                    if ( isdefined( var_12 ) )
                    {
                        scripts\cp_mp\vehicles\vehicle_spawn::_id_12CEA( var_12 );
                        var_12 thread _id_12D12( var_4, var_11, var_0 );

                        if ( !var_2 )
                            break;
                    }
                }
            }
        }

        var_2 = 0;
        wait( level.cleanupswaploadoutflags._id_12306 );
    }
}

_id_12D12( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    var_0.start_drones_event[var_2]++;
    var_1.inuse = 1;
    self waittill( "death" );
    var_0.start_drones_event[var_2]--;
    var_1.inuse = undefined;
}

timeoutplunderextractionsites()
{
    level endon( "game_ended" );
    level endon( "sudden_death_started" );

    if ( !level.cleanupswaploadoutflags.binoculars_processlosqueuehigh )
    {
        scripts\mp\flags::gameflagwait( "infil_complete" );
        dmztutendgame( 0 );
        level waittill( "checkPointUpdate" );
        dmztutendgame( 1 );
        level waittill( "checkPointUpdate" );
        dmztutendgame( 2 );
    }
}

dmztutendgame( var_0 )
{
    var_1 = 75;
    var_2 = 125;
    var_3 = 5;
    var_4 = 5;

    foreach ( var_6 in level.cleanupswaploadoutflags.paths )
    {
        var_7 = var_6.do_ascender_entrance[var_0].spawnpointangles;
        var_8 = var_6.nodes[var_7].origin;
        var_9 = var_6.nodes[var_7].angles;
        var_10 = mercywintriggered( var_6, var_7 );
        var_11 = vectortoangles( var_10 );
        var_12 = anglestoright( var_11 );
        var_13 = -1 * var_12;

        for ( var_14 = var_1; var_14 <= var_2; var_14 = var_14 + var_3 )
        {
            var_15 = var_8 + var_14 * var_12;
            var_16 = scripts\mp\gametypes\br_public.gsc::helihint_deposit( var_15 );
            var_17 = abs( var_8[2] - var_16[2] );

            if ( var_17 < var_4 )
            {
                var_18 = var_8 + var_14 * var_13;
                var_19 = scripts\mp\gametypes\br_public.gsc::helihint_deposit( var_18 );
                var_20 = abs( var_8[2] - var_19[2] );

                if ( var_20 < var_4 )
                {
                    var_21 = var_16 + ( 0, 300, 0 ) * var_12;
                    var_22 = var_19 + ( 0, 300, 0 ) * var_13;
                    thread floor1lights( var_21 );
                    thread floor1lights( var_22 );
                    break;
                }
            }
        }
    }
}

mercywintriggered( var_0, var_1 )
{
    var_2 = var_0.nodes[var_1].origin;

    if ( var_1 + 1 < var_0.nodes.size )
    {
        var_3 = var_0.nodes[var_1 + 1].origin;
        var_4 = var_3 - var_2;
    }
    else
    {
        var_5 = var_0.nodes[var_1 - 1].origin;
        var_4 = var_2 - var_5;
    }

    return var_4;
}

floor1lights( var_0 )
{
    var_1 = easepower( "vfx_br_payload_checkpoint", var_0, ( 0, 0, 0 ) );
    var_1 setscriptablepartstate( "checkpoint", "checkpoint" );
    level scripts\engine\utility::_id_12E3F( "checkPointUpdate", "sudden_death_started" );
    var_1 freescriptable();
}

dmzwincost( var_0 )
{
    var_1 = 75;
    var_2 = 125;
    var_3 = 5;
    var_4 = 20;
    var_5 = 184;
    var_6 = var_0.do_ascender_entrance[var_0.do_ads_hint].spawnpointangles;
    var_7 = var_0.nodes[var_6].origin;
    var_8 = var_0.nodes[var_6].angles;
    var_9 = vectornormalize( mercywintriggered( var_0, var_6 ) );
    var_10 = vectortoangles( var_9 );
    var_11 = anglestoright( var_10 );
    var_12 = -1 * var_11;

    for ( var_13 = var_1; var_13 <= var_2; var_13 = var_13 + var_3 )
    {
        var_14 = var_7 + var_5 * var_9 + var_13 * var_11;
        var_15 = scripts\mp\gametypes\br_public.gsc::helihint_deposit( var_14 );
        var_16 = abs( var_7[2] - var_15[2] );

        if ( var_16 < var_4 )
        {
            var_17 = var_7 + var_5 * var_9 + var_13 * var_12;
            var_18 = scripts\mp\gametypes\br_public.gsc::helihint_deposit( var_17 );
            var_19 = abs( var_7[2] - var_18[2] );

            if ( var_19 < var_4 )
            {
                var_20 = var_15 + ( 0, 300, 0 ) * var_11;
                var_21 = var_18 + ( 0, 300, 0 ) * var_12;
                thread floor2lights( var_0, var_20, var_10 );
                thread floor2lights( var_0, var_21, var_10 );
                break;
            }
        }
    }
}

floor2lights( var_0, var_1, var_2 )
{
    var_3 = easepower( "vfx_br_payload_checkpoint", var_1, ( 0, var_2[1], 0 ) );
    var_3 setscriptablepartstate( "checkpoint", "checkpoint" );
    _id_12E28( var_0 );
    var_3 setscriptablepartstate( "checkpoint", "checkpoint_clear" );
    wait 5;
    var_3 freescriptable();
}

_id_12E28( var_0 )
{
    var_0 endon( "checkPointUpdate" );
    level waittill( "sudden_death_started" );
}

untrack_enemy( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self giveweapon( var_0 );
    self setweaponammostock( var_0, 0 );
    self setweaponammoclip( var_0, 0 );
    scripts\mp\supers::allowsuperweaponstow();
    var_2 = scripts\cp_mp\utility\inventory_utility::domonitoredweaponswitch( var_0, 0, 1 );

    if ( !istrue( var_2 ) )
    {
        scripts\mp\supers::unstowsuperweapon();

        if ( scripts\cp_mp\utility\inventory_utility::isswitchingtoweaponwithmonitoring( var_0 ) )
            scripts\cp_mp\utility\inventory_utility::abortmonitoredweaponswitch( var_0 );
        else
            self takeweapon( var_0 );
    }

    var_1 notify( "build_tool_ready" );

    while ( istrue( self.progression_speed ) )
        waitframe();

    var_1 show();
    scripts\cp_mp\utility\inventory_utility::getridofweapon( var_0 );
    var_1 notify( "build_complete" );
}

unsetweaponcarry( var_0, var_1 )
{
    var_2 = self;
    level endon( "game_ended" );
    var_2 endon( "death_or_disconnect" );

    if ( var_2 isgestureplaying( "iw8_ges_payload_build_barrier" ) )
        return;

    var_2 enableoffhandweapons();
    var_2 giveandfireoffhand( var_0 );
    waitframe();

    if ( !var_2 hasweapon( var_0 ) )
    {
        var_2 giveandfireoffhand( var_0 );
        waitframe();
    }

    var_1 notify( "build_tool_ready" );

    while ( istrue( var_2.progression_speed ) )
        waitframe();

    self takeweapon( var_0 );
    var_1 notify( "build_complete" );
}

tire_repair_start_air_stop_sfx()
{
    level endon( "game_ended" );
    level endon( "sudden_death_started" );
    scripts\mp\flags::gameflagwait( "prematch_done" );
    level._id_1269C = [];
    level._id_1269C[game["attackers"]] = [];
    level._id_1269C[game["defenders"]] = [];
    level._id_12693 = [];
    level._id_12693[game["attackers"]] = undefined;
    level._id_12693[game["defenders"]] = undefined;

    for (;;)
    {
        level waittill( "checkPointUpdate" );
        var_0 = int( max( losqueuehigh() - 1, 0 ) );
        wait 3;
        var_1 = level.cleanupswaploadoutflags.tmtyl_vipobjectives;

        if ( !istrue( var_1 ) && scripts\mp\gametypes\br_capshoot_quest.gsc::race_ui_add_critical_message() )
            continue;

        var_2 = undefined;
        var_3 = undefined;

        if ( istrue( level.cleanupswaploadoutflags.tire_repair_start_exit_foley_sfx ) || istrue( level.cleanupswaploadoutflags.tmtylsquadafterspawnfunc ) )
        {
            var_4 = scripts\mp\gametypes\br_capshoot_quest.gsc::lootchopper_getzonebyindex();
            var_2 = var_4[var_0 % var_4.size];
        }

        if ( istrue( level.cleanupswaploadoutflags.tmtyl_bomber_squadafterspawnfunc ) || istrue( level.cleanupswaploadoutflags.tmtylsquadafterspawnfunc ) )
        {
            var_5 = scripts\mp\gametypes\br_capshoot_quest.gsc::make_focus_fire_objective();
            var_3 = var_5[var_0 % var_5.size];
        }

        var_6 = level.cleanupswaploadoutflags.tmtyl_vip_interactions;

        if ( istrue( var_1 ) )
        {
            if ( istrue( level.cleanupswaploadoutflags.tire_repair_start_exit_foley_sfx ) )
                thread flip_time( var_6, game["attackers"], var_2, game["defenders"], var_3 );

            if ( istrue( level.cleanupswaploadoutflags.tmtyl_bomber_squadafterspawnfunc ) )
                thread flip_time( var_6, game["defenders"], var_3, game["attackers"], var_2 );

            continue;
        }

        thread force_call_lz( var_6, var_2, var_3 );
    }
}

flip_time( var_0, var_1, var_2, var_3, var_4 )
{
    level endon( "sudden_death_started" );
    level notify( "create_quest_tablets" );
    level endon( "create_quest_tablets" );

    for ( var_5 = 0; var_5 < var_0; var_5++ )
        flip_target( var_1, var_2, var_3, var_4 );
}

flip_target( var_0, var_1, var_2, var_3 )
{
    var_4 = -600;
    var_5 = -300;
    var_6 = 15;
    var_7 = [];

    foreach ( var_9 in level.cleanupswaploadoutflags.paths )
    {
        if ( !istrue( var_9.exfil_spawnfunc ) )
            var_7[var_7.size] = var_9;
    }

    if ( var_7.size == 0 )
        return;

    var_11 = randomint( var_7.size );
    var_9 = var_7[var_11];
    var_12 = undefined;

    if ( isdefined( var_9.extraweapons ) )
        var_12 = var_9.extraweapons;
    else
        var_12 = var_9.vehicle;

    if ( isdefined( var_12 ) )
    {
        var_13 = randomfloatrange( -1 * var_6, var_6 );
        var_14 = ( 0, var_12.angles[1] + var_13, 0 );
        var_15 = anglestoforward( var_14 );
        var_16 = randomfloatrange( var_4, var_5 );
        var_17 = var_12.origin + var_15 * var_16;
        var_18 = _id_12292( var_17, var_0, var_1, var_2, var_3 );
        var_18.path = var_9;
    }
}

_id_12292( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = 20;
    var_6 = scripts\mp\gametypes\br_public.gsc::helihint_deposit( var_0 );
    var_6 = var_6 + ( 0, 0, var_5 );
    var_7 = scripts\mp\gametypes\br_quest_util.gsc::_id_1225E( var_2, var_6 );

    if ( isdefined( var_7 ) )
    {
        var_7.team = var_1;

        if ( rear_minigun_turret_info() )
            var_7.transient_world_autolod_enabled = ::is_minimap_forcedisabled;

        if ( istrue( level.cleanupswaploadoutflags.tmtylsquadafterspawnfunc ) )
        {
            var_7.tacmapexplanation = ::lootcontentsadjust_accesscardsred;
            var_7.otherteam = var_3;
            var_7.tacmapvo = var_4;
        }

        scripts\mp\gametypes\br_pickups.gsc::_id_11959( var_7 );
    }

    return var_7;
}

is_minimap_forcedisabled( var_0, var_1 )
{
    var_2 = undefined;
    var_3 = var_1.path;

    if ( rear_minigun_turret_info() && isdefined( var_3 ) )
    {
        level.cleanupswaploadoutflags.watch_for_player_enter_trigger = var_3;
        var_4 = scripts\engine\utility::array_sort_with_func( level.cleanupswaploadoutflags.watch_for_player_enter_puddle_trigger, ::addtodismembermentlist );
        level.cleanupswaploadoutflags.watch_for_player_enter_trigger = undefined;
        var_5 = var_4[0];

        if ( isdefined( var_5 ) )
        {
            var_2 = spawnstruct();
            var_2.origin = var_5.origin;
            var_2.angles = var_5.angles;
            var_2.spawnflags = 16;
            level.cleanupswaploadoutflags.watch_for_player_enter_puddle_trigger = scripts\engine\utility::array_remove( level.cleanupswaploadoutflags.watch_for_player_enter_puddle_trigger, var_5 );
        }
    }

    return var_2;
}

force_call_lz( var_0, var_1, var_2 )
{
    var_3 = level.squaddata[game["attackers"]].size;
    var_4 = level.squaddata[game["defenders"]].size;

    if ( istrue( level.cleanupswaploadoutflags.toggle_ai_settings ) )
    {
        level._id_1269C = [];
        level._id_1269C[game["attackers"]] = [];
        level._id_1269C[game["defenders"]] = [];
    }

    var_5 = [];
    var_6 = [];

    for ( var_7 = 0; var_7 < var_0 && var_7 < var_3 && var_7 < var_4; var_7++ )
    {
        var_8 = modeupdateloadoutclass( game["attackers"] );

        if ( !isdefined( var_8 ) )
            continue;

        var_5[var_5.size] = var_8;
        var_9 = modeupdateloadoutclass( game["defenders"] );

        if ( !isdefined( var_9 ) )
            continue;

        var_6[var_6.size] = var_9;
    }

    if ( var_5.size > 0 || var_6.size > 0 )
        scripts\mp\gametypes\br_capshoot_quest.gsc::bonus_targets( var_1, var_5, var_2, var_6 );
}

lootcontentsadjust_accesscardsred( var_0 )
{
    var_1 = var_0.otherteam;
    var_2 = var_0.path;

    if ( !isdefined( var_1 ) || !isdefined( var_2 ) || !isdefined( var_2.vehicle ) )
        return undefined;

    var_3 = undefined;
    var_4 = undefined;

    foreach ( var_6 in level.squaddata[var_1] )
    {
        var_7 = 0;
        var_8 = var_6.players.size;

        if ( var_8 > 0 )
        {
            foreach ( var_10 in var_6.players )
                var_7 = var_7 + distancesquared( var_10.origin, var_2.vehicle.origin );

            var_7 = var_7 / var_8;

            if ( !istrue( var_4 ) || var_7 > var_4 )
            {
                var_3 = var_6;
                var_4 = var_7;
            }
        }
    }

    if ( isdefined( var_3 ) && var_3.players.size > 0 )
        return var_3.players[0];

    return undefined;
}

modeupdateloadoutclass( var_0 )
{
    var_1 = level.squaddata[var_0].size;

    if ( !istrue( var_1 ) )
        return;

    if ( !isdefined( level._id_12693[var_0] ) )
        level._id_12693[var_0] = randomintrange( 0, var_1 );

    var_2 = level._id_12693[var_0];
    var_3 = undefined;
    var_4 = undefined;

    for ( var_5 = 0; var_5 < var_1; var_5++ )
    {
        var_3 = ( var_2 + var_5 ) % var_1;

        if ( scripts\engine\utility::array_contains( level._id_1269C[var_0], var_3 ) )
            continue;

        var_6 = level.squaddata[var_0][var_3];

        if ( isdefined( var_6 ) )
        {
            var_4 = var_6.players[0];

            for ( var_5 = 0; !isdefined( var_4 ) && var_5 < var_6.players.size; var_5++ )
                var_4 = var_6.players[var_5];

            if ( isdefined( var_4 ) )
                break;
        }
    }

    if ( isdefined( var_4 ) && isdefined( var_3 ) )
    {
        var_7 = level._id_1269C[var_0].size;
        level._id_1269C[var_0][var_7] = var_3;
        level._id_12693[var_0] = ( level._id_12693[var_0] + 1 ) % var_1;
    }

    return var_4;
}

toggle_ambient_vehicles_on_module( var_0, var_1 )
{
    var_2 = self;
    var_3 = scripts\mp\gametypes\br_quest_util.gsc::_id_1225E( "assassination", self.origin, 1 );
    scripts\mp\gametypes\br_quest_util.gsc::monitor_waypoint_objective_on_front_truck( self.team, "br_mission_pickup_tablet" );
    var_4 = self.team;
    var_5 = scripts\mp\gametypes\br_assassination_quest.gsc::monitor_player_near_truck( var_4, var_0, var_3.index, self, "", var_3, var_1 );

    if ( !isdefined( var_5 ) )
        scripts\mp\utility\lower_message::_id_11EBD( "br_assassination_notargets", undefined, 5 );
    else
        var_5.targetplayer = var_1;
}

_id_12F5D( var_0, var_1 )
{
    thread _id_12F0E( var_0, var_1 );
    thread _id_12F0E( var_1, var_0 );
}

hvt_key_picked_up( var_0, var_1 )
{
    level endon( "game_ended" );
    level waittill( "checkPointUpdate" );

    if ( isdefined( var_0 ) )
    {
        var_0 notify( "questEnded" );
        var_0 scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
    }

    if ( isdefined( var_1 ) )
    {
        var_1 notify( "questEnded" );
        var_1 scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
    }
}

_id_12F0E( var_0, var_1 )
{
    level endon( "game_ended" );

    if ( !isdefined( var_0 ) )
        return;

    var_0 waittill( "removed" );

    if ( isdefined( var_1 ) )
    {
        var_1 notify( "questEnded" );
        var_1 scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();

        if ( var_1.category == "assassination" )
        {
            foreach ( var_3 in scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_1.targetteam, var_1.targetplayer.squadindex ) )
                var_3 scripts\mp\gametypes\br_assassination_quest.gsc::outline_ents();
        }
    }

    if ( isdefined( var_0 ) )
    {
        if ( var_0.category == "assassination" )
        {
            foreach ( var_3 in scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_0.targetteam, var_0.targetplayer.squadindex ) )
                var_3 scripts\mp\gametypes\br_assassination_quest.gsc::outline_ents();
        }
    }
}

toggle_fx_trap()
{
    var_0 = level.cleanupswaploadoutflags.toggle_in_use;

    if ( isdefined( level.cleanupswaploadoutflags.toggle_plane_combat_global_settings ) )
        var_0 = var_0 + level.cleanupswaploadoutflags.toggle_plane_combat_global_settings;

    thread toggle_farah_lights( var_0 );
}

toggle_farah_lights( var_0 )
{
    if ( !isdefined( var_0 ) || var_0 <= 0 )
        return;

    level notify( "speed_boost_timer" );
    level endon( "speed_boost_timer" );
    level.cleanupswaploadoutflags.toggle_fx_trap = 1;
    level.cleanupswaploadoutflags.toggle_plane_combat_global_settings = var_0;
    var_1 = scripts\mp\hud_util::createservertimer( "default", 1.0 );
    var_1 scripts\mp\hud_util::setpoint( "CENTER", "CENTER", -180, -190 );
    var_1.color = ( 1, 1, 0 );
    var_1.label = &"BR_PAYLOAD/SPEED_BOOST_REWARD";
    var_1 settenthstimer( level.cleanupswaploadoutflags.toggle_plane_combat_global_settings );
    var_1 thread enabledminimapdisable();

    while ( level.cleanupswaploadoutflags.toggle_plane_combat_global_settings >= 0 )
    {
        level.cleanupswaploadoutflags.toggle_plane_combat_global_settings--;
        wait 1;
    }

    level.cleanupswaploadoutflags.toggle_plane_combat_global_settings = undefined;
    level.cleanupswaploadoutflags.toggle_fx_trap = 0;
    level notify( "speed_boost_timer" );
}

enabledminimapdisable()
{
    var_0 = self;
    level waittill( "speed_boost_timer" );
    var_0 destroy();
}

times_in_a( var_0 )
{
    foreach ( var_2 in level.cleanupswaploadoutflags.paths )
    {
        foreach ( var_4 in var_2.started_breach_process )
        {
            if ( istrue( var_4.extractcallback ) )
            {
                var_4 startchallengetimer( var_0 );
                return;
            }
        }
    }
}

rear_minigun_turret_info()
{
    return isdefined( level.cleanupswaploadoutflags.watch_for_player_enter_puddle_trigger ) && level.cleanupswaploadoutflags.watch_for_player_enter_puddle_trigger.size > 0;
}

addtolittlebirdmglist( var_0, var_1 )
{
    var_2 = level.cleanupswaploadoutflags.watch_for_player_enter_trigger;
    var_3 = loschecktime( var_2 );
    var_4 = var_2.do_ascender_entrance[var_3].spawnpointangles;
    var_5 = var_2.nodes[var_4].origin;
    return distancesquared( var_0.origin, var_5 ) < distancesquared( var_1.origin, var_5 );
}

addtodismembermentlist( var_0, var_1 )
{
    var_2 = level.cleanupswaploadoutflags.watch_for_player_enter_trigger;
    var_3 = var_2.vehicle.origin;
    return distancesquared( var_0.origin, var_3 ) < distancesquared( var_1.origin, var_3 );
}

playerzombiesetuphud()
{
    scripts\mp\gametypes\br_sudden_death.gsc::init();
}

_id_11C04( var_0 )
{
    setomnvar( "ui_current_round", 2 );
    var_1 = undefined;

    foreach ( var_3 in level.cleanupswaploadoutflags.paths )
    {
        if ( !isdefined( var_1 ) || var_3.do_ads_hint >= var_1.do_ads_hint )
            var_1 = var_3;
    }

    if ( isdefined( var_1 ) )
    {
        var_5 = spawnstruct();
        var_5.dropoff_point_spawner = var_1.vehicle.origin;
        var_5._id_122E0 = var_1;
        var_5._id_122E9 = ::unset_relic_healthpacks;
        var_5.enable_lbravo_player_infil = ::getcircleclosetime;
        var_6 = scripts\mp\gametypes\br_sudden_death.gsc::start( var_5 );
        return var_6;
    }

    return var_0;
}

getcircleclosetime( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    foreach ( var_2 in level.cleanupswaploadoutflags.paths )
    {
        give_primary_attachments_only( var_2 );
        var_3 = [ var_2.vehicle, var_2.extraweapons ];

        foreach ( var_5 in var_3 )
        {
            if ( isdefined( var_5 ) )
            {
                scripts\cp_mp\vehicles\vehicle_interact::vehicle_interact_deregisterinstance( var_5 );
                var_6 = var_5 getlinkedchildren();

                foreach ( var_8 in var_6 )
                {
                    if ( isdefined( var_8 ) )
                        var_8 delete();
                }
            }
        }

        if ( isdefined( var_2.extraweapons ) )
        {
            var_2.extraweapons delete();
            var_2.extraweapons = undefined;
        }

        foreach ( var_12 in var_2.started_breach_process )
        {
            if ( isdefined( var_12 ) )
            {
                if ( isdefined( var_12.scriptable ) )
                    var_12.scriptable freescriptable();

                var_12 delete();
            }
        }

        var_2.started_breach_process = undefined;

        foreach ( var_15 in var_2.do_hack_sequence )
        {
            foreach ( var_17 in var_15 )
            {
                if ( isdefined( var_17 ) )
                {
                    if ( isdefined( var_17.do_ghost_skit ) )
                        var_17.do_ghost_skit delete();

                    if ( isdefined( var_17.collision ) )
                        var_17.collision delete();
                }
            }
        }

        var_2.do_hack_sequence = undefined;
    }

    scripts\mp\gametypes\br_armory_kiosk.gsc::gettruegroundposition();

    foreach ( var_2 in level.cleanupswaploadoutflags.paths )
    {
        if ( var_2 != var_0 && isdefined( var_2.vehicle ) )
        {
            var_2.vehicle delete();
            var_2.vehicle = undefined;
        }
    }
}

_id_11ECC( var_0 )
{
    _id_11EAA( "current_player_path_assignment", var_0 );
}

_id_11ECD( var_0 )
{
    _id_11EAA( "current_player_team_assignment", var_0 );
}

_id_11ECF( var_0, var_1 )
{
    var_2 = scripts\engine\utility::ter_op( var_0 == 1, "number_of_teammates_on_path_b", "number_of_teammates_on_path_a" );
    _id_11EAB( var_2, var_1 );
}

_id_11ED3( var_0, var_1 )
{
    var_2 = scripts\engine\utility::ter_op( var_0 == 1, "path_b_state", "path_a_state" );
    _id_11EAB( var_2, var_1 );
}

_id_11ECE( var_0, var_1 )
{
    var_2 = scripts\engine\utility::ter_op( var_0 == 1, "path_b_checkpoints_complete", "path_a_checkpoints_complete" );
    _id_11EAB( var_2, var_1 );
}

set_distances_for_groups( var_0 )
{
    var_1 = 0;

    if ( var_0 >= 0.999 )
        var_1 = 10000;
    else if ( var_0 > 0.0 )
        var_1 = int( var_0 * 10000 );

    return var_1;
}

_id_11ED2( var_0, var_1 )
{
    var_2 = scripts\engine\utility::ter_op( var_0 == 1, "path_b_percent_complete", "path_a_percent_complete" );
    var_3 = set_distances_for_groups( var_1 );
    _id_11EAB( var_2, var_3 );
}

_id_11ED0( var_0, var_1, var_2 )
{
    var_3 = scripts\engine\utility::ter_op( var_0 == 1, "path_b_obstacle_state", "path_a_obstacle_state" );
    var_4 = scripts\engine\utility::ter_op( var_2 == 1, 1, 0 );
    _id_11EAB( var_3, var_4, var_1 );
}

_id_11EAB( var_0, var_1, var_2 )
{
    [var_4, var_5, var_6, var_1] = managedropbags( var_0, var_1 );

    if ( isdefined( var_2 ) )
        var_4 = var_4 + var_2;

    if ( var_6 == "" )
        return;

    updateghostridekills( var_6, var_1, var_4, var_5 );
}

_id_11EAA( var_0, var_1 )
{
    [var_3, var_4, var_5, var_1] = managedropbags( var_0, var_1 );

    if ( var_5 == "" )
        return;

    updatefobspawnsindanger( var_5, var_1, var_3, var_4 );
}

managedropbags( var_0, var_1 )
{
    var_2 = 0;
    var_3 = 0;
    var_4 = "";

    switch ( var_0 )
    {
        case "current_player_path_assignment":
            [var_2, var_3] = [ 0, 1 ];
            var_4 = "ui_br_payload_data_client";
            break;
        case "current_player_team_assignment":
            [var_2, var_3] = [ 1, 1 ];
            var_4 = "ui_br_payload_data_client";
            break;
        case "number_of_teammates_on_path_a":
            [var_2, var_3] = [ 0, 6 ];
            var_4 = "ui_br_payload_data";
            break;
        case "number_of_teammates_on_path_b":
            [var_2, var_3] = [ 6, 6 ];
            var_4 = "ui_br_payload_data";
            break;
        case "path_a_state":
            [var_2, var_3] = [ 12, 3 ];
            var_4 = "ui_br_payload_data";
            break;
        case "path_b_state":
            [var_2, var_3] = [ 15, 3 ];
            var_4 = "ui_br_payload_data";
            break;
        case "path_a_checkpoints_complete":
            [var_2, var_3] = [ 18, 2 ];
            var_4 = "ui_br_payload_data";
            break;
        case "path_b_checkpoints_complete":
            [var_2, var_3] = [ 20, 2 ];
            var_4 = "ui_br_payload_data";
            break;
        case "path_a_obstacle_state":
            [var_2, var_3] = [ 0, 1 ];
            var_4 = "ui_br_payload_data_2";
            break;
        case "path_b_obstacle_state":
            [var_2, var_3] = [ 10, 1 ];
            var_4 = "ui_br_payload_data_2";
            break;
        case "path_a_percent_complete":
            [var_2, var_3] = [ 0, 16 ];
            var_4 = "ui_br_payload_percents";
            break;
        case "path_b_percent_complete":
            [var_2, var_3] = [ 16, 16 ];
            var_4 = "ui_br_payload_percents";
            break;
        default:
            break;
    }

    return [ var_2, var_3, var_4, var_1 ];
}

updatefobspawnsindanger( var_0, var_1, var_2, var_3 )
{
    var_4 = int( pow( 2, var_3 ) ) - 1;
    var_5 = ( var_1 & var_4 ) << var_2;
    var_6 = ~( var_4 << var_2 );
    var_7 = self getclientomnvar( var_0 );
    var_8 = var_7 & var_6;
    var_9 = var_8 + var_5;

    if ( var_9 != var_7 )
        self setclientomnvar( var_0, var_9 );
}

updateghostridekills( var_0, var_1, var_2, var_3 )
{
    var_4 = int( pow( 2, var_3 ) ) - 1;
    var_5 = ( var_1 & var_4 ) << var_2;
    var_6 = ~( var_4 << var_2 );
    var_7 = getomnvar( var_0 );
    var_8 = var_7 & var_6;
    var_9 = var_8 + var_5;

    if ( var_9 != var_7 )
        setomnvar( var_0, var_9 );
}

timeout_consec_kills()
{
    level endon( "game_ended" );
    scripts\mp\flags::gameflagwait( "prematch_fade_done" );
    wait 6.0;
    thread timeoflastexecute();
    scripts\mp\flags::gameflagwait( "infil_complete" );
    wait( randomintrange( 20, 25 ) );
    thread timeoflastexecute();
}

#using_animtree("script_model");

timeoflastexecute()
{
    level endon( "game_ended" );
    var_0 = [];
    var_1 = undefined;
    var_2 = level.cleanupswaploadoutflags.timetonextcheckpoint;
    var_3 = [];
    var_4 = 1.2;

    switch ( var_2 )
    {
        case "port":
            var_0[var_0.size] = ( 38775, -23332, 197 );
            var_0[var_0.size] = ( 33582, -25827, -278 );
            var_1 = 255;
            break;
        case "trainstation2":
            var_0[var_0.size] = ( -9592, -17688, -360 );
            var_0[var_0.size] = ( -7456, -20160, 592 );
            var_1 = 15;
            break;
        case "downtown2":
            var_0[var_0.size] = ( 24012, -22726, 371 );
            var_0[var_0.size] = ( 21811, -18619, 784 );
            var_1 = 60;
            break;
        case "standard":
            var_0[var_0.size] = ( 0, 0, 0 );
            var_1 = 0;
            break;
        default:
            break;
    }

    var_5 = spawnstruct();
    var_5.streakname = "precision_airstrike";
    var_5.owner = is_lower();
    var_5.score = 0;
    var_5.shots_fired = 0;
    var_5.hits = 0;
    var_5.damage = 0;
    var_5.kills = 0;
    var_5.num_nags = 0;
    var_5.binoculars_setexpirationtimer = 0;
    var_6 = undefined;
    var_7 = %mp_alfa10_flyin;
    var_8 = undefined;
    var_9 = 24000;
    var_10 = 6500;
    var_11 = 1000;
    var_12 = 1500;
    var_13 = 215;
    var_14 = ( 0, var_1, 0 );
    var_15 = undefined;
    var_16 = is_lower();

    if ( isdefined( var_16 ) && istrue( var_0.size > 1 ) )
    {
        for ( var_17 = 0; var_17 < var_0.size; var_17++ )
        {
            var_18 = scripts\cp_mp\killstreaks\airstrike::getflightpath( var_0[var_17], var_14, var_9, 1, var_11, var_10, var_12, var_5.streakname, var_15 );
            wait( var_4 );
            var_11 = var_11 + randomintrange( 200, 300 );
            level thread scripts\cp_mp\killstreaks\airstrike::doplanestrike( var_0[var_17], var_18["startPoint"], var_18["endPoint"], var_11, var_6, var_5, var_7, var_5.owner, var_8 );
        }

        level thread init_track_settings( var_2, var_4 );
    }
}

init_track_settings( var_0, var_1 )
{
    level endon( "game_ended" );
    wait 5;

    switch ( var_0 )
    {
        case "port":
            scripts\engine\utility::exploder( "pl_intro_exp_docks" );
            wait( var_1 - 1 );
            scripts\engine\utility::exploder( "pl_intro_exp_docks2" );
            break;
        case "trainstation2":
            wait 0.5;
            scripts\engine\utility::exploder( "pl_intro_exp_trnstn" );
            wait( var_1 - 0.7 );
            scripts\engine\utility::exploder( "pl_intro_exp_trnstn2" );
            break;
        case "downtown2":
            wait( var_1 - 1 );
            scripts\engine\utility::exploder( "pl_intro_exp_dwtn" );
            scripts\engine\utility::exploder( "pl_intro_exp_dwtn2" );
            break;
        case "standard":
            scripts\engine\utility::exploder( "pl_intro_exp_1" );
            break;
        default:
            break;
    }
}

is_lower()
{
    var_0 = undefined;

    foreach ( var_2 in level.players )
    {
        if ( isalive( var_2 ) && var_2.team == game["attackers"] )
        {
            var_0 = var_2;
            break;
        }
    }

    return var_0;
}

startspectatorview()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "spawned_player" );
    self notify( "forcePlayerSpectateTarget" );

    if ( isbot( self ) )
        return;

    thread unmark_on_death();
    scripts\mp\utility\player::updatesessionstate( "spectator" );
    scripts\mp\spectating::setdisabled();

    if ( isdefined( self.lastdeathangles ) )
        self setplayerangles( self.lastdeathangles );

    waitframe();
    var_0 = mid_bosses( level.cleanupswaploadoutflags.timetonextcheckpoint );

    if ( !isdefined( var_0 ) )
        return;

    var_1 = var_0.origin;
    var_2 = var_0.angles;
    self cameralinkto( var_0, "tag_origin", 1 );
    self visionsetthermalforplayer( "ac130_color" );
    self thermalvisionon();
    self playlocalsound( "mp_cmd_camera_zoom_out" );
    self setclienttriggeraudiozonepartialwithfade( "spawn_cam", 0.5, "mix" );
}

_id_12AF7( var_0, var_1, var_2 )
{
    var_3 = self.origin;
    var_4 = self.angles;
    var_5 = 0;

    if ( var_1[0] != var_3[0] )
    {
        self moveto( var_1, 0.1 );
        var_5 = 1;
    }

    if ( var_2[0] != var_4[0] )
    {
        self.angles = var_2;
        var_5 = 1;
    }

    if ( istrue( var_5 ) )
    {
        var_6 = anglestoforward( var_2 ) * 300;
        var_6 = var_6 * ( 1, 1, 0 );
        var_0 earthquakeforplayer( 0.03, 15.0, var_1 + var_6, 1000 );
    }
}

_id_125CC( var_0 )
{
    if ( isdefined( self.is_enemy_of_type ) && isdefined( self.teleport_room_doors ) && !isbot( self ) )
    {
        [var_2, var_3] = unset_relic_noks( var_0 );
        self.is_enemy_of_type _id_12AF7( self, var_2, var_3 );
    }
}

unset_relic_noks( var_0 )
{
    if ( !isdefined( var_0 ) )
    {
        var_1 = ( self.teleport_room_doors.vehicle.origin[0], self.teleport_room_doors.vehicle.origin[1], 6000 );
        var_2 = self.teleport_room_doors.vehicle.angles;
    }

    var_3 = var_0;
    var_4 = 0;

    if ( var_3 != "A" )
        var_4 = 1;

    var_5 = level.cleanupswaploadoutflags.paths[var_4].vehicle;

    if ( istrue( level.cleanupswaploadoutflags._id_11AA9 ) )
    {
        var_6 = 88;
        var_7 = var_5.angles[1];
        var_8 = anglestoforward( ( 0, var_7, 0 ) );
        var_9 = 500;
        var_10 = 5000;
    }
    else
    {
        var_6 = 45;
        var_7 = var_5.angles[1];
        var_8 = -1 * anglestoforward( ( 0, var_7, 0 ) );
        var_9 = 2500;
        var_10 = 2500;
    }

    var_1 = ( var_5.origin[0] + var_8[0] * var_9, var_5.origin[1] + var_8[1] * var_9, var_10 );
    var_2 = ( var_6, var_7, 0 );
    return [ var_1, var_2 ];
}

mid_bosses( var_0 )
{
    if ( isdefined( self.is_enemy_of_type ) )
        return self.is_enemy_of_type;

    var_1 = unset_relic_noluck();
    [var_3, var_4] = unset_relic_noks( var_1.label );
    var_5 = spawn( "script_model", var_3 );
    var_5.angles = var_4;
    var_5 setmodel( "tag_origin" );
    var_5 hide();
    var_5 showtoplayer( self );
    self.is_enemy_of_type = var_5;
    return self.is_enemy_of_type;
}

update_objective_setmlgbackground()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self waittill( "playerPrestreamComplete" );
    wait 2;
    thread scripts\mp\spawncamera::startoperatorsound();
    waitframe();

    if ( isdefined( self.tac_cover_adjust_damage ) )
    {
        self.tac_cover_adjust_damage.origin = self.origin + ( 0, 0, 80 );
        self.tac_cover_adjust_damage linkto( self );
    }

    scripts\mp\flags::gameflagwait( "infil_complete" );

    if ( isdefined( self.tac_cover_adjust_damage ) )
    {
        self clearsoundsubmix( "iw8_mp_spawn_camera" );
        self.tac_cover_adjust_damage unlink();
        self.tac_cover_adjust_damage stoploopsound( self.tac_cover_blocked_by_turret );
        self.tac_cover_adjust_damage delete();
        self.tac_cover_adjust_damage = undefined;
        self.tac_cover_blocked_by_turret = undefined;
    }
}

unmark_on_death()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    thread scripts\mp\spawncamera::startoperatorsound();
    waitframe();

    if ( isdefined( self.tac_cover_adjust_damage ) )
    {
        self.tac_cover_adjust_damage.origin = self.origin + ( 0, 0, 80 );
        self.tac_cover_adjust_damage linkto( self );
    }
}

playerzombiegetrespawnbyteam()
{
    if ( !isdefined( level.cleanupswaploadoutflags._id_11C56 ) )
    {
        var_0 = [];

        foreach ( var_2 in level.cleanupswaploadoutflags.paths )
        {
            var_0[var_0.size] = _id_122F8( "ee_machinery_satellite_solarpanel_04_dmg_payload", var_2.freeze_bomb_vest_timer, 0 );
            var_0[var_0.size] = _id_122F8( "ee_machinery_satellite_solarpanel_04_dmg_payload", var_2.freeze_bomb_vest_timer, 1 );
            var_0[var_0.size] = _id_122F8( "ee_machinery_satellite_panel_01_payload", var_2.freeze_bomb_vest_timer, 2 );
        }

        level.cleanupswaploadoutflags._id_11C56 = var_0;
    }

    var_4 = getent( "payload_satellite_clipbrush", "script_noteworthy" );

    foreach ( var_2 in level.cleanupswaploadoutflags.paths )
    {
        foreach ( var_7 in level.cleanupswaploadoutflags._id_11C56 )
        {
            if ( var_7.script_group == var_2.freeze_bomb_vest_timer )
            {
                var_8 = var_7;

                if ( !isent( var_8 ) )
                    var_8 = _id_122F8( var_7.model, var_7.script_group, var_7.script_index + 1 );

                var_8 notsolid();
                var_2.pieces[var_2.pieces.size] = var_8;
            }
        }

        var_2.train_attach_useable_ammorestocklocation = _id_122F8( "ee_machinery_satellite_thruster_module_nopanel_dmg_payload" );
        var_2.train_attach_useable_ammorestocklocation notsolid();

        if ( isdefined( var_4 ) )
        {
            var_10 = spawn( "script_model", var_2.train_attach_useable_ammorestocklocation.origin );
            var_10.angles = var_2.train_attach_useable_ammorestocklocation.angles;
            var_10 clonebrushmodeltoscriptmodel( var_4 );
            var_10 linkto( var_2.train_attach_useable_ammorestocklocation, "tag_origin", ( 0, 0, 0 ), ( 0, 0, 0 ) );
            var_2.train_attach_useable_ammorestocklocation.collision = var_10;
        }
    }
}

_id_122F8( var_0, var_1, var_2 )
{
    var_3 = spawn( "script_model", ( 0, 0, 0 ) );
    var_3 setmodel( var_0 );
    var_3.script_group = var_1;
    var_3.script_index = var_2;
    var_3 hide();
    return var_3;
}

minigamelosersettings( var_0, var_1 )
{
    foreach ( var_3 in var_0.pieces )
    {
        if ( var_3.script_index == var_1 )
            return var_3;
    }
}

_id_11F87( var_0, var_1 )
{
    if ( var_1 > 0 )
    {
        var_2 = minigamelosersettings( var_0, var_1 );
        var_0.extraweapons _id_1294A( var_2, var_1 );
    }
}

_id_1294A( var_0, var_1 )
{
    var_2 = ( 0, 0, 0 );
    var_3 = ( 0, 0, 0 );

    switch ( var_1 )
    {
        case 0:
            var_3 = ( -41.3, -9.2, 106.1 );
            break;
        case 1:
            var_3 = ( -23.7, 40.8, 127.1 );
            var_2 = ( 0, 2, -80 );
            break;
        case 2:
            var_3 = ( -70.7, 40.8, 127.1 );
            var_2 = ( 0, 2, -80 );
            break;
        case 3:
            var_3 = ( -108.7, 0.8, 100.1 );
            var_2 = ( 0, 92, -80 );
            break;
        default:
            break;
    }

    var_0 show();
    var_0 linkto( self, "tag_origin", var_3, var_2 );
}
