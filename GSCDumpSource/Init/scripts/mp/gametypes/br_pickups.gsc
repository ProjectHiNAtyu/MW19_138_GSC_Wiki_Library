// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

chopper_boss_fight_spawn_watcher()
{
    level.br_pickups = spawnstruct();
    level.forcegivesuper = ::forcegivesuper;
    level.showuseresultsfeedback = ::showuseresultsfeedback;
    level._id_11A33 = ::_id_11A33;
    level.kioskfiresaledoneforplayer = ::kiosk_spent_total;
    level.kiosk_num_purchases = ::kingslayerkills;
    initarrays();
    playerzombieisingas();
}

initarrays()
{
    level.brloottablename = getdvar( "RKMMNSQKO", "mp/loot/br/default/loot_item_defs.csv" );

    if ( !isdefined( level.br_pickups ) )
        level.br_pickups = spawnstruct();

    level.br_pickups.flightyaw = [];
    level.br_pickups.helidrivabledeathall = [];
    _id_11953( "brloot_equip_gasmask", ::killstreakweaponfiredcontinue );
    _id_11953( "brloot_equip_gasmask_durable", ::killstreakweaponfiredcontinue );
    level.br_pickups.br_equipname = [];
    level.br_pickups.stackable = [];
    level.br_pickups.maxcounts = [];
    level.br_pickups.counts = [];
    level.br_pickups.br_itemtype = [];
    level.br_pickups.br_itemrow = [];
    level.br_pickups.checkrequiredteamstreamcount = [];
    level.br_pickups.br_equipnametoscriptable = [];
    level.br_pickups.br_weapontoscriptable = [];
    level.br_pickups.br_pickupsfx = [];
    level.br_pickups.br_killstreakreference = [];
    level.br_pickups.br_killstreaktoscriptable = [];
    level.br_pickups.br_superreference = [];
    level.br_pickups.checkpoint_release_spawnpoint = [];
    level.br_pickups._id_12A41 = [];
    level.br_pickups.br_allguns = [];
    level.br_pickups.br_lootguns = [];
    level.br_pickups.br_crateguns = [];
    level.br_pickups.br_crateitems = [];
    level.br_pickups.br_gulagpickups = [];
    level.br_lootiteminfo = [];
    level.br_weaponsprimary = [];
    level.br_weaponssecondary = [];
    level.br_throwables = [];
    level.br_usables = [];
    var_0 = [];
    var_1 = 0;
    var_2 = "+";

    if ( scripts\mp\utility\game::getgametype() == "br" )
    {
        var_3 = tablelookupgetnumrows( level.brloottablename );

        for ( var_4 = 0; var_4 < var_3; var_4++ )
        {
            var_5 = tablelookupbyrow( level.brloottablename, var_4, 0 );

            if ( !isdefined( var_5 ) )
                continue;

            if ( var_5 == "item" )
            {
                var_6 = tablelookupbyrow( level.brloottablename, var_4, 2 );

                if ( !isdefined( var_6 ) )
                    continue;

                if ( var_6 == "weapon" )
                {
                    var_7 = tablelookupbyrow( level.brloottablename, var_4, 1 );
                    var_8 = tablelookupbyrow( level.brloottablename, var_4, 3 );
                    var_9 = tablelookupbyrow( level.brloottablename, var_4, 5 );
                    var_10 = tablelookupbyrow( level.brloottablename, var_4, 15 );

                    if ( isdefined( var_9 ) && var_9.size > 0 )
                    {
                        var_11 = int( var_9 );
                        var_12 = tablelookup( "loot/weapon_ids.csv", 0, var_11, 1 );

                        if ( var_12 == "" )
                        {
                            scripts\mp\utility\script::getdropbagspawntypeenum( "lootID not found in weapon_ids.csv - lootID: " + var_9 + " in row " + var_4 + " from table " + level.brloottablename );
                            continue;
                        }

                        var_13 = tablelookup( "loot/weapon_ids.csv", 0, var_11, 6 );
                        var_14 = scripts\mp\utility\weapon::getweaponvarianttablename( var_12 );
                        var_15 = int( tablelookup( var_14, 1, var_13, 0 ) );
                        var_16 = tablelookupbyrow( level.brloottablename, var_4, 10 );
                        var_17 = [];
                        var_18 = [];

                        if ( isdefined( var_16 ) && var_16.size )
                            var_17 = strtok( var_16, var_2 );

                        if ( isdefined( var_17 ) )
                        {
                            foreach ( var_20 in var_17 )
                            {
                                var_21 = strtok( var_20, "|" );

                                if ( var_21.size > 1 )
                                {
                                    var_18[var_21[0]] = int( var_21[1] );
                                    continue;
                                }

                                var_18[var_21[0]] = 0;
                            }
                        }

                        var_23 = var_12;
                        var_24 = undefined;

                        if ( getdvarint( "scr_br_alt_mode_gg", 0 ) )
                            var_24 = "camo_11a";

                        var_25 = undefined;

                        if ( !isdefined( var_18 ) )
                            var_25 = scripts\mp\class::current_anim_ref( var_12, var_24, undefined, var_15 );
                        else
                            var_25 = scripts\mp\class::buildweapon_attachmentidmap( var_12, var_18, var_24, undefined, var_15 );

                        var_26 = createheadicon( var_25 );
                    }
                    else
                    {
                        var_23 = tablelookupbyrow( level.brloottablename, var_4, 8 );
                        var_16 = tablelookupbyrow( level.brloottablename, var_4, 10 );
                        var_17 = [];

                        if ( isdefined( var_16 ) && var_16.size )
                            var_17 = strtok( var_16, var_2 );

                        if ( getdvarint( "scr_br_alt_mode_gg", 0 ) )
                            var_25 = scripts\mp\class::buildweapon( var_23, var_17, "camo_11a", "none", -1 );
                        else
                            var_25 = scripts\mp\class::buildweapon( var_23, var_17, "none", "none", -1 );

                        var_26 = createheadicon( var_25 );
                    }

                    level.br_pickups.br_itemtype[var_7] = var_6;
                    level.br_pickups.br_pickupsfx[var_7] = var_10;
                    level.br_pickups.checkrequiredteamstreamcount[var_7] = int( var_8 );
                    level.br_pickups.br_lootguns[level.br_pickups.br_lootguns.size] = var_7;
                    level.br_lootiteminfo[var_7] = spawnstruct();
                    level.br_lootiteminfo[var_7].baseweapon = var_23;
                    level.br_lootiteminfo[var_7].jugg_get_priority_player = var_26;
                    level.br_lootiteminfo[var_7].jugg_getminigunweapon = var_25;

                    if ( int( var_8 ) != 5 )
                        level.br_pickups.br_weapontoscriptable[var_26] = var_7;
                }
                else
                {
                    var_7 = tablelookupbyrow( level.brloottablename, var_4, 1 );
                    level.br_pickups.br_itemrow[var_7] = int( var_4 );
                    var_38 = tablelookupbyrow( level.brloottablename, var_4, 8 );

                    if ( isdefined( var_38 ) && var_38.size > 0 )
                    {
                        var_38 = tolower( var_38 );
                        level.br_pickups.br_equipname[var_7] = var_38;
                        level.br_pickups.br_equipnametoscriptable[var_38] = var_7;
                    }

                    level.br_pickups.checkpoint_release_spawnpoint[var_7] = int( tablelookupbyrow( level.brloottablename, var_4, 24 ) );
                    var_39 = tablelookupbyrow( level.brloottablename, var_4, 16 );

                    if ( var_39 != "" )
                    {
                        switch ( var_39 )
                        {
                            case "1":
                                if ( isdefined( var_38 ) && var_38.size > 0 )
                                    level.equipment.table[var_38].defaultslot = "primary";

                                level.br_throwables[level.br_throwables.size] = var_7;
                                break;
                            case "2":
                                if ( isdefined( var_38 ) && var_38.size > 0 )
                                    level.equipment.table[var_38].defaultslot = "secondary";

                                level.br_usables[level.br_usables.size] = var_7;
                                break;
                            case "3":
                                if ( isdefined( var_38 ) && var_38.size > 0 )
                                    level.equipment.table[var_38].defaultslot = "health";

                                break;
                            case "4":
                                if ( isdefined( var_38 ) && var_38.size > 0 )
                                    level.equipment.table[var_38].defaultslot = "super";

                                break;
                            default:
                                break;
                        }
                    }

                    if ( var_6 == "killstreak" || var_6 == "killstreak_nodrop" )
                    {
                        var_40 = tablelookupbyrow( level.brloottablename, var_4, 19 );
                        level.br_pickups.br_killstreakreference[var_7] = var_40;
                        level.br_pickups.br_killstreaktoscriptable[var_40] = var_7;
                    }
                    else if ( var_6 == "super" )
                    {
                        var_41 = tablelookupbyrow( level.brloottablename, var_4, 19 );
                        level.br_pickups.br_superreference[var_7] = var_41;
                    }

                    var_42 = int( tablelookupbyrow( level.brloottablename, var_4, 4 ) );
                    var_43 = int( tablelookupbyrow( level.brloottablename, var_4, 18 ) );

                    if ( var_6 == "ammo" )
                        level.br_ammo_max[var_7] = var_43;

                    level.br_pickups.maxcounts[var_7] = var_43;
                    level.br_pickups.stackable[var_7] = var_43 > 1;
                    level.br_pickups.counts[var_7] = var_42;
                    var_6 = tolower( var_6 );
                    level.br_pickups.br_itemtype[var_7] = var_6;
                    level.br_pickups.br_pickupsfx[var_7] = tablelookupbyrow( level.brloottablename, var_4, 15 );
                    var_44 = tablelookupbyrow( level.brloottablename, var_4, 3 );
                    level.br_pickups.checkrequiredteamstreamcount[var_7] = int( var_44 );
                }

                continue;
            }

            if ( var_5 == "crate" )
            {
                var_7 = tablelookupbyrow( level.brloottablename, var_4, 1 );
                var_45 = int( tablelookupbyrow( level.brloottablename, var_4, 2 ) );

                if ( var_45 > 0 )
                {
                    if ( isdefined( level.br_lootiteminfo[var_7] ) && isdefined( level.br_lootiteminfo[var_7].baseweapon ) )
                    {
                        for ( var_46 = 0; var_46 < var_45; var_46++ )
                        {
                            level.br_pickups.br_crateguns[level.br_pickups.br_crateguns.size] = var_7;
                            level.br_pickups.br_allguns[level.br_pickups.br_allguns.size] = var_7;
                        }
                    }
                    else
                    {
                        for ( var_46 = 0; var_46 < var_45; var_46++ )
                            level.br_pickups.br_crateitems[level.br_pickups.br_crateitems.size] = var_7;
                    }
                }

                continue;
            }

            if ( var_5 == "gulag" )
            {
                var_7 = tablelookupbyrow( level.brloottablename, var_4, 1 );
                var_47 = tablelookupbyrow( level.brloottablename, var_4, 2 );

                if ( !isdefined( level.br_pickups.br_gulagpickups[var_47] ) )
                    level.br_pickups.br_gulagpickups[var_47] = [];

                var_48 = level.br_pickups.br_gulagpickups[var_47].size;
                level.br_pickups.br_gulagpickups[var_47][var_48] = var_7;
            }
        }

        tank_die_from_turret_damage( "brloot_equip_gasmask", getdvarint( "scr_br_gasMask_health", 108 ) );
        tank_die_from_turret_damage( "brloot_equip_gasmask_durable", getdvarint( "scr_br_gasMask_health_durable", 216 ) );
    }

    setdvarifuninitialized( "scr_br_disableLootDropTrail", 0 );
    level.br_pickups.br_pickupdenyammonoroom = "MP/BR_AMMO_DENY_NO_ROOM";
    level.br_pickups.br_pickupdenyequipnoroom = "MP/BR_EQUIP_DENY_NO_ROOM";
    level.br_pickups.br_pickupdenyalreadyhaveweapon = "MP/BR_WEAPON_DENY_ALREADY_HAVE";
    level.br_pickups.br_pickupdenyarmornotbetter = "MP/BR_ARMOR_DENY_NOT_BETTER";
    level.br_pickups.br_pickupdenyalreadyhaveks = "MP/BR_KILLSTREAK_DENY_ALREADY_HAVE";
    level.br_pickups.br_pickupdenyalreadyhavetoken = "MP_BR_INGAME/ALREADY_HAVE_RESPAWN_TOKEN";
    level.br_pickups.choosejuggernautcratemodel = "MP_BR_INGAME/ALREADY_HAVE_SELF_REVIVE_ITEM";
    level.br_pickups.choosepubliceventtype = "MP/BR_ARMOR_DENY_ARMOR_FULL";
    level.br_pickups.choosefinalkillcam = "MP_BR_INGAME/ALREADY_HAVE_PLATE_POUCH_ITEM";
    level.br_pickups.chopper_boss_damage_monitor = "MP/BR_PICKUP_DENY_PARACHUTING";
    level.br_pickups.choosegulagloadouttable = "MP_BR_INGAME/TABLET_PICKUP_FAILURE";
    level.br_pickups.chopper_boss_destroyed_func = "MP_BR_INGAME/PLUNDER_HELD_LIMIT_REACHED";
    level.br_pickups.chopper_boss_combat_actions = "KILLSTREAKS/JUGG_CANNOT_BE_USED";
    level.br_pickups.chopper_boss_combat = "KILLSTREAKS/JUGG_TEAM_MAX_REACHED";
    level.br_pickups.choosebestpropforkillcam = "MP_BR_INGAME/ALREADY_HAVE_SPECIALIST_BONUS_ITEM";
    level.br_pickups.choosecrouchorstandtac = "MP_BR_INGAME/CIRCLE_PEEK_LIMIT";
    level.br_pickups.choosedropbagmodel = "MP_BR_INGAME/CONTACT_ONLY_ITEM";
    level.br_pickups.chopper_boss_explosion = "MP_BR_INGAME/TABLET_WRONG_TEAM_FAILURE";
    level.br_pickups.chopper_boss_drone_target_array = "MP_BR_INGAME/ARMOR_INSERT_IN_PROGRESS";
    level.br_pickups.br_dropoffsets = [ ( 24, 24, 6 ), ( -24, -24, 6 ), ( 24, -24, 6 ), ( -24, 24, 6 ), ( 48, 0, 6 ), ( -48, 0, 6 ), ( 0, -48, 6 ), ( 0, 48, 6 ), ( 72, 0, 6 ), ( -72, 0, 6 ), ( 0, -72, 6 ), ( 0, 72, 6 ), ( 72, -72, 6 ), ( -72, 72, 6 ), ( -72, -72, 6 ), ( 72, 72, 6 ) ];
    level.br_pickups._id_11AB5 = getdvarint( "scr_br_respawn_token", 1 );
    level.br_pickups._id_11AB3 = getdvarint( "scr_br_respawn_token_gulag", 0 );
    level.br_pickups.heligotoplunderrepository = getdvarint( "scr_br_drop_specialist_pickup", 0 );
    scripts\engine\scriptable::scriptable_addusedcallback( ::lootused );
    scripts\engine\scriptable::_id_11CD8( ::lootused );
}

tank_die_from_turret_damage( var_0, var_1 )
{
    if ( isdefined( level.br_pickups.counts[var_0] ) && isdefined( var_1 ) )
        level.br_pickups.counts[var_0] = var_1;
}

maphint_computerscriptableused( var_0, var_1, var_2, var_3 )
{
    var_4 = spawnstruct();
    var_4.origin = var_0;

    if ( isdefined( var_1 ) )
        var_4.angles = var_1;
    else
        var_4.angles = ( 0, 0, 0 );

    if ( isdefined( var_2 ) )
        var_4.testing = var_2;
    else
        var_4.testing = 0;

    var_4.movetowithpause = var_3;
    return var_4;
}

getitemdroporiginandangles( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = 1;
    var_9 = 1;
    var_10 = getdvarint( "br_loot_trace_debug", 0 );
    var_11 = 14;
    var_12 = 50.0;
    var_13 = 40.0;
    var_14 = -5.0;
    var_15 = 5.0;
    var_16 = 10.0;
    var_17 = 360.0 / var_11;
    var_18 = -5.0;
    var_19 = 5.0;
    var_20 = 40.0;
    var_21 = 20.0;
    var_22 = 60.0;
    var_23 = -6.0;
    var_24 = 16.0;
    var_25 = -18.0;
    var_26 = 0;
    var_27 = 0;
    var_28 = undefined;
    var_29 = var_24;

    if ( !isdefined( var_2 ) )
        var_2 = ( 0, 0, 0 );

    if ( isdefined( var_6 ) )
        var_29 = var_6;

    var_30 = int( var_0.heli_lookat_monitor / var_11 );
    var_31 = var_0.heli_lookat_monitor - var_30 * var_11;
    var_32 = var_2[1] + ( var_31 * var_17 + var_30 * var_16 ) + randomfloatrange( var_18, var_19 );
    var_33 = var_12 + var_30 * var_13 + randomfloatrange( var_14, var_15 );

    if ( isdefined( var_4 ) )
        var_32 = var_2[1] + var_4;

    if ( isdefined( var_5 ) )
        var_33 = var_5;

    var_34 = ( 0.0, var_32, 0.0 );
    var_35 = anglestoforward( var_34 );
    var_36 = var_1 + var_35 * var_33;

    if ( var_9 )
    {
        var_37 = tablesort( var_36, 500, 500 );

        if ( isdefined( var_3 ) )
            var_37[var_37.size] = var_3;

        var_38 = var_1 + ( 0.0, 0.0, var_21 );
        var_39 = var_36 + ( 0.0, 0.0, var_21 );
        var_40 = scripts\engine\trace::create_contents( 0, 1, 1, 1, 1, 1, 1, 0, 1 );
        var_41 = scripts\engine\trace::ray_trace( var_38, var_39, var_37, var_40 );

        if ( var_41["fraction"] < 1.0 )
        {
            var_36 = var_41["position"];
            var_36 = var_36 + var_35 * var_25;
        }
        else
            var_36 = var_39;

        var_38 = var_36;
        var_39 = var_36 + ( 0.0, 0.0, var_22 );
        var_41 = scripts\engine\trace::ray_trace( var_38, var_39, var_37, var_40 );

        if ( var_41["fraction"] < 1.0 )
            var_36 = var_41["position"] + ( 0.0, 0.0, var_23 );
        else
            var_36 = var_39;

        var_41 = undefined;

        if ( istrue( var_7 ) )
            var_41 = scripts\mp\gametypes\br_public.gsc::helihint_gotopad( var_36, 0.0, undefined, undefined, var_37 );
        else
        {
            var_38 = var_36;
            var_42 = -1 * getdvarfloat( "bg_maxLootDropHeight", 2000.0 );
            var_39 = var_36 + ( 0.0, 0.0, var_42 );
            var_41 = scripts\engine\trace::ray_trace( var_38, var_39, var_37, var_40 );
        }

        if ( var_41["fraction"] < 1.0 )
        {
            var_36 = var_41["position"] + ( 0.0, 0.0, var_29 );
            var_28 = var_41["entity"];
        }
        else
        {
            var_36 = ( 0, 0, 0 );
            var_26 = 1;
        }
    }
    else
        var_36 = var_36 + ( 0, 0, var_29 );

    if ( var_8 && !var_26 )
        var_27 = getscriptablereservedremaining( var_1 + ( 0, 0, var_20 ), var_36 );

    var_0.heli_lookat_monitor++;
    return maphint_computerscriptableused( var_36, var_34, var_27, var_28 );
}

manage_fakebody_hides( var_0 )
{
    if ( isdefined( var_0 ) && isdefined( level.br_lootiteminfo[var_0] ) && isdefined( level.br_lootiteminfo[var_0].jugg_getminigunweapon ) )
        return level.br_lootiteminfo[var_0].jugg_getminigunweapon;

    return undefined;
}

makepickup( var_0 )
{
    if ( isdefined( var_0 ) && isdefined( var_0.scriptablename ) )
        return manage_fakebody_hides( var_0.scriptablename );

    return undefined;
}

getgulagpickupsforclass( var_0 )
{
    var_1 = [ "none" ];

    if ( isdefined( var_0 ) && isdefined( level.br_pickups.br_gulagpickups[var_0] ) )
        var_1 = level.br_pickups.br_gulagpickups[var_0];

    return var_1;
}

see_air_killstreak_dist( var_0 )
{
    return var_0.count >> 0 & 2047;
}

see_killstreak_dist( var_0 )
{
    return var_0.count >> 11 & 2047;
}

see_equipment_dist( var_0 )
{
    return var_0.count >> 22 & 31;
}

select_back_two_spawners( var_0, var_1, var_2, var_3 )
{
    var_4 = 0;
    var_4 = var_4 + ( ( var_1 & 2047 ) << 0 );

    if ( isdefined( var_2 ) )
        var_4 = var_4 + ( ( var_2 & 2047 ) << 11 );

    if ( isdefined( var_3 ) )
        var_4 = var_4 + ( ( var_3 & 31 ) << 22 );

    var_0.count = var_4;
}

semtex_stuckplayer( var_0 )
{
    if ( var_0.type == "br_plunder_box" )
        return 1;

    if ( istrue( scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "lootUsedIgnore", var_0 ) ) )
        return 1;

    if ( istrue( var_0.semtex_stuckplayer ) )
        return 1;

    return 0;
}

lootused( var_0, var_1, var_2, var_3, var_4 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( istrue( var_3 scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "playerSkipLootPickup", var_0 ) ) || istrue( level.play_travel_vo ) )
        return;

    if ( var_0 getscriptableisloot() && !semtex_stuckplayer( var_0 ) )
    {
        var_5 = spawnstruct();
        var_5.scriptablename = var_0.type;
        var_5.origin = var_0.origin;
        var_5.count = see_air_killstreak_dist( var_0 );
        var_5.failcollectionquest = see_killstreak_dist( var_0 );
        var_5.fadeoverlay = see_equipment_dist( var_0 );
        var_5.playoverwatch_dialogue = var_0;
        var_5.customweaponname = var_0.customweaponname;
        var_5.maxcount = level.br_pickups.maxcounts[var_5.scriptablename];
        var_5.stackable = level.br_pickups.stackable[var_5.scriptablename];

        if ( !var_5.count && isdefined( level.br_pickups.counts[var_5.scriptablename] ) )
            var_5.count = level.br_pickups.counts[var_5.scriptablename];

        var_5.isweaponfromcrate = var_0.isweaponfromcrate;
        var_5.processcashpilevalueoverrides = var_4;
        var_6 = var_3 cantakepickup( var_5 );

        if ( var_6 == 1 )
        {
            var_7 = var_3 onusecompleted( var_5, undefined, var_4 );

            if ( isdefined( var_0 ) && var_7 )
                select_back_two_spawners( var_0, var_5.count, var_5.failcollectionquest, var_5.fadeoverlay );

            if ( !isdefined( var_0 ) || var_7 )
                return;

            select_patrol_one_spawners( var_0 );
        }
        else
        {
            var_8 = 1;
            var_9 = level.br_pickups.checkpoint_release_spawnpoint[var_5.scriptablename];

            if ( var_4 && istrue( var_9 ) && var_2 == "visible" )
                var_8 = 0;

            if ( var_6 == 17 || var_6 == 21 )
                var_8 = 0;

            if ( var_8 )
            {
                if ( var_6 == 3 )
                    var_3 playlocalsound( "weap_ammo_full" );
                else
                    var_3 playlocalsound( "br_pickup_deny" );

                var_3 showuseresultsfeedback( var_6 );
            }
        }
    }
}

select_patrol_one_spawners( var_0, var_1 )
{
    if ( var_0 getscriptableislinked() )
        return;

    if ( !isdefined( var_1 ) )
        var_1 = var_0.type;

    if ( race_ui_checkpoint( var_0.type ) )
    {
        if ( scripts\mp\flags::gameflag( "prematch_done" ) )
            level notify( "tablethide_kill_callout_" + var_0.origin );

        scripts\mp\gametypes\br_quest_util.gsc::suicide_on_end_remote( var_0 );
    }

    if ( var_0 getscriptableisreserved() && !istrue( var_0.keepinmap ) )
    {
        gethelinextgroupafterwait( var_0 );
        var_0 freescriptable();
    }
    else
        var_0 setscriptablepartstate( var_1, "hidden" );
}

br_forcegivecustompickupitem( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( istrue( var_5 ) )
    {
        var_0 heli_counter( var_1, var_3, var_4, var_5 );
        return 1;
    }

    var_6 = spawnstruct();
    var_6.scriptablename = var_1;
    var_6.origin = var_0.origin;
    var_6.count = 0;
    var_6.maxcount = level.br_pickups.maxcounts[var_6.scriptablename];
    var_6.stackable = level.br_pickups.stackable[var_6.scriptablename];

    if ( isdefined( var_3 ) )
        var_6.count = var_3;

    if ( !var_6.count && isdefined( level.br_pickups.counts[var_6.scriptablename] ) )
        var_6.count = level.br_pickups.counts[var_6.scriptablename];

    var_7 = var_0 cantakepickup( var_6 );

    if ( var_7 == 1 )
    {
        var_0 onusecompleted( var_6, var_2, undefined, var_4 );
        return 1;
    }

    return 0;
}

resetplayerinventorywithdelay( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "death" );
    self endon( "disconnect" );
    wait( var_0 );
    resetplayerinventory( var_1 );
}

resetplayerinventory( var_0 )
{
    var_1 = scripts\mp\utility\game::missions_clearinappropriaterewards() == "kingslayer";
    self.br_inventory_slots = [];

    if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "armor" ) )
        scripts\mp\gametypes\br_armor.gsc::cleanup_target_stats_thermal();

    cleanupafterweaponswitch();

    if ( isdefined( self.streakdata ) && !var_1 )
        scripts\mp\killstreaks\killstreaks::clearkillstreaks();

    if ( !level.allowsupers )
        _id_11A84();

    if ( !istrue( var_0 ) )
    {
        scripts\mp\gametypes\br_weapons.gsc::stripweaponsfromplayer();
        scripts\mp\equipment::takeequipment( "primary" );
        scripts\mp\equipment::takeequipment( "secondary" );
        scripts\mp\weapons::_id_11EBA( getcompleteweaponname( "iw8_fists_mp" ) );
    }

    if ( scripts\mp\gametypes\br_public.gsc::obj_room_fire_06() )
        _id_11A33();
}

_id_11A84()
{
    scripts\mp\supers::clearsuper();
    self setclientomnvar( "ui_perk_package_state", 0 );
    self setclientomnvar( "ui_super_progress", 0 );
}

resetdefaultweaponammo( var_0 )
{
    var_1 = self getweaponslistall();

    for ( var_2 = 0; var_2 < var_1.size; var_2++ )
    {
        var_3 = var_1[var_2];
        var_4 = 0;

        if ( var_3.inventorytype == "primary" )
        {
            if ( isdefined( var_0 ) )
            {
                var_5 = var_3.clipsize;
                var_4 = var_5 * ( var_0 - 1 );
            }
            else if ( level.magcount > 0 )
            {
                var_5 = var_3.clipsize;
                var_4 = var_5 * ( level.magcount - 1 );
            }
            else
                var_5 = 0;

            self setweaponammoclip( var_3, var_5 );
        }
    }
}

initplayer( var_0 )
{
    scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();
    resetplayerinventory( var_0 );
}

spawndebugpickupfromdevgui( var_0 )
{
    foreach ( var_2 in level.players )
    {
        if ( !isbot( var_2 ) && isalive( var_2 ) )
        {
            var_3 = var_2.origin + anglestoforward( var_2.angles ) * 100 + ( 0, 0, 12 );
            var_4 = 0;

            if ( isdefined( level.br_pickups.counts[var_0] ) )
                var_4 = level.br_pickups.counts[var_0];

            var_5 = maphint_computerscriptableused( var_3 );
            var_6 = spawnpickup( var_0, var_5, var_4 );

            if ( isdefined( var_6 ) )
            {
                var_7 = scripts\engine\trace::create_contents( 0, 1, 0, 0, 0, 1, 1, 0, 0 );
                var_8 = [ var_6 ];
                var_9 = var_6.origin + ( 0, 0, 50 );
                var_10 = var_9 + ( 0, 0, -200 );
                var_11 = scripts\engine\trace::ray_trace( var_9, var_10, var_8, var_7 );

                if ( isdefined( var_11["entity"] ) && isdefined( var_11["entity"].targetname ) && var_11["entity"].targetname == "train_wz" )
                {
                    var_12 = var_11["entity"];
                    var_13 = rotatevectorinverted( var_6.origin - var_12.origin, var_12.angles );
                    var_14 = combineangles( invertangles( var_12.angles ), var_6.angles );
                    var_6 scriptablesetparententity( var_12, var_13, var_14 );
                }
            }
        }
    }
}

isweaponpickup( var_0 )
{
    return isdefined( level.br_pickups.br_itemtype[var_0] ) && level.br_pickups.br_itemtype[var_0] == "weapon";
}

isweaponpickupitem( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( isdefined( var_0.weapon ) )
        return istrue( var_0.weapon.iscustomweapon );
    else if ( isdefined( var_0.scriptablename ) )
        return isweaponpickup( var_0.scriptablename );

    return 0;
}

takearmorpickup( var_0 )
{
    var_1 = level.br_pickups.br_equipname[var_0.scriptablename];
    var_2 = scripts\mp\gametypes\br_armor.gsc::isarmorbetterthanequipped( var_1 );

    if ( var_2 )
        tryequiparmor( var_0 );
}

takeequipmentpickup( var_0, var_1 )
{
    var_2 = level.br_pickups.br_equipname[var_0.scriptablename];
    var_3 = level.equipment.table[var_2].defaultslot;
    var_4 = 0;

    if ( pickupissameasequipmentslot( var_2, var_3 ) )
    {
        if ( equipmentslothasroom( var_2, var_3 ) )
        {
            if ( var_3 != "health" )
                scripts\mp\damagefeedback::hudicontype( "br_ammo" );

            var_5 = scripts\mp\equipment::getequipmentslotammo( var_3 );
            var_6 = scripts\mp\equipment::getequipmentmaxammo( var_2 );

            if ( var_5 + var_0.count > var_6 )
            {
                var_7 = var_6 - var_5;
                scripts\mp\equipment::setequipmentammo( var_2, var_6 );
                var_0.count = var_0.count - var_7;
                var_4 = 1;
            }
            else
                scripts\mp\equipment::incrementequipmentslotammo( var_3, var_0.count );
        }
        else if ( !getdvarint( "scr_br_no_inventory", 1 ) )
            trypickupitem( var_0.scriptablename, var_0.count );
    }
    else if ( !isdefined( self.equipment[var_3] ) || scripts\mp\equipment::getequipmentslotammo( var_3 ) == 0 )
    {
        scripts\mp\equipment::giveequipment( var_2, var_3 );
        scripts\mp\equipment::setequipmentammo( var_2, var_0.count );
    }
    else if ( !getdvarint( "scr_br_no_inventory", 1 ) )
    {
        var_8 = 1;

        if ( isdefined( var_0.count ) )
            var_8 = var_0.count;

        trypickupitem( var_0.scriptablename, var_8 );
    }
    else
    {
        var_9 = playersetattractiontime();
        dropequipmentinslot( var_9, var_3, var_1 );
        scripts\mp\equipment::giveequipment( var_2, var_3 );
        scripts\mp\equipment::setequipmentammo( var_2, var_0.count );
    }

    return var_4;
}

dropequipmentinslot( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\mp\equipment::getequipmentslotammo( var_1 );

    if ( isdefined( var_3 ) )
        var_4 = var_3;

    var_5 = scripts\engine\utility::array_find( level.br_pickups.br_equipname, self.equipment[var_1] );

    if ( isdefined( var_5 ) )
    {
        var_6 = undefined;

        if ( istrue( var_2 ) )
            var_6 = scripts\mp\gametypes\br_armory_kiosk.gsc::mark_location();

        var_7 = getitemdroporiginandangles( var_0, self.origin, self.angles, self, var_6 );
        var_8 = 0;
        var_9 = spawnpickup( var_5, var_7, var_4, 1 );

        if ( isdefined( var_9 ) )
            var_9 helicopter_firendly_dmg_text_display( self, var_5 );
    }
}

helicopter_firendly_dmg_text_display( var_0, var_1 )
{
    var_2 = self;

    if ( var_1 == "brloot_offhand_geigercounter" )
    {
        var_2.owner = var_0;
        var_0.helidrivable = var_2;
    }
}

pickupissameasequipmentslot( var_0, var_1 )
{
    if ( isdefined( self.equipment[var_1] ) && self.equipment[var_1] == var_0 )
        return 1;

    return 0;
}

equipmentslothasroom( var_0, var_1 )
{
    if ( scripts\mp\equipment::getequipmentslotammo( var_1 ) < scripts\mp\equipment::getequipmentmaxammo( var_0 ) )
        return 1;

    return 0;
}

takerespawntokenpickup( var_0 )
{
    if ( !_id_11AB4() && !scripts\mp\gametypes\br_public.gsc::hasrespawntoken() )
    {
        addrespawntoken();
        return 1;
    }

    return 0;
}

addrespawntoken( var_0 )
{
    var_1 = self;
    var_1.hasrespawntoken = 1;
    var_1 scripts\mp\gametypes\br_public.gsc::_id_11EAD( 1 );

    if ( !istrue( var_0 ) )
        var_1 thread scripts\mp\hud_message::showsplash( "br_respawn_token_pickup" );
}

removerespawntoken()
{
    var_0 = self;
    var_0.hasrespawntoken = 0;
    var_0 scripts\mp\gametypes\br_public.gsc::_id_11EAD( 0 );
}

_id_12625( var_0 )
{
    if ( !scripts\mp\gametypes\br_public.gsc::obj_room_fire_06() )
    {
        ampeddelta();
        return 1;
    }

    return 0;
}

ampeddelta( var_0 )
{
    var_1 = self;
    var_1.obj_room_fire_06 = 1;
    var_1 scripts\mp\gametypes\br_public.gsc::_id_11EAE( 1 );

    if ( !istrue( var_0 ) )
        var_1 thread scripts\mp\hud_message::showsplash( "br_self_revive_token_pickup" );

    var_2 = level.maxteamsize == 1;

    if ( var_2 && !var_1 scripts\mp\utility\perk::_hasperk( "specialty_pistoldeath" ) )
        var_1 scripts\mp\utility\perk::giveperk( "specialty_pistoldeath" );
}

_id_11A33()
{
    var_0 = self;
    var_0.obj_room_fire_06 = 0;
    var_0 scripts\mp\gametypes\br_public.gsc::_id_11EAE( 0 );
    var_1 = level.maxteamsize == 1;

    if ( var_1 && var_0 scripts\mp\utility\perk::_hasperk( "specialty_pistoldeath" ) )
        var_0 scripts\mp\utility\perk::removeperk( "specialty_pistoldeath" );
}

_id_11AB4()
{
    return getdvarint( "scr_br_all_assassin_version", 0 ) || !istrue( level.br_pickups._id_11AB5 ) || istrue( level.br_pickups._id_11AB3 ) && isdefined( level.gulag ) && istrue( level.gulag.shutdown );
}

ammobox_tryuse( var_0 )
{
    var_1 = self;
    self playsoundtoplayer( "br_legendary_loot_pickup", self );
    var_1.obj_ow_atvs_spawned = 1;
    var_1 setclientomnvar( "ui_br_has_plate_pouch", 1 );

    if ( !istrue( var_0 ) )
        var_1 thread scripts\mp\hud_message::showsplash( "br_plate_pouch_pickup" );
}

_id_11A2D()
{
    var_0 = self;
    var_0 setclientomnvar( "ui_br_has_plate_pouch", 0 );
    var_0.obj_ow_atvs_spawned = 0;
}

is_cover_node()
{
    var_0 = self;
    var_1 = spawnstruct();
    var_1.scriptablename = "brloot_armor_plate";
    var_1.init_chopper_boss = level.br_pickups.br_equipname[var_1.scriptablename];
    var_1.origin = self.origin;
    var_1.maxcount = scripts\mp\equipment::getequipmentmaxammo( var_1.init_chopper_boss );
    var_1.count = var_1.maxcount;
    var_1.stackable = level.br_pickups.stackable[var_1.scriptablename];
    var_0 takeequipmentpickup( var_1 );
}

_id_1261E( var_0 )
{
    if ( scripts\mp\gametypes\br_public.gsc::obj_a_behavior() )
    {
        var_1 = playersetattractiontime();
        var_2 = undefined;
        var_3 = getitemdroporiginandangles( var_1, self.origin, self.angles, self, var_2 );
        spawnpickup( self.ai_hold_wake_behavior, var_3, 1, 1 );
    }

    ammo_cache_used( var_0.scriptablename );
}

ammo_cache_used( var_0 )
{
    var_1 = self;
    var_1.ai_hold_wake_behavior = var_0;
    var_2 = int( tablelookup( "mp/braccess_card.csv", 1, var_0, 0 ) );
    var_1 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "bunkerKeycardType", var_2 );
    var_1 scripts\mp\gametypes\br_alt_mode_zai.gsc::stompeenemyprogressupdate( var_0 );
}

_id_11A15()
{
    var_0 = self;

    if ( !getdvarint( "scr_br_bunkersNoKeycardRequired", 0 ) )
    {

    }

    var_0 scripts\mp\gametypes\br_alt_mode_zai.gsc::suicideandskydive( var_0.ai_hold_wake_behavior );
    var_0.ai_hold_wake_behavior = undefined;
    var_0 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "bunkerKeycardType", 0 );
}

_id_12620( var_0 )
{
    var_1 = var_0.scriptablename;

    if ( var_1 == "brloot_x1_map_fragment" )
        return;
}

takequestitem( var_0 )
{
    var_1 = var_0.scriptablename;

    if ( var_1 == "brloot_x2_stash_bomb" )
        var_0 scripts\mp\gametypes\br_x2_stash_quest.gsc::_id_13096( self );
}

anchoredwidgetid( var_0 )
{
    var_1 = self;
    self playsoundtoplayer( "br_legendary_loot_pickup", self );
    var_1.obj_cleanup = 1;
    var_1 scripts\mp\perks\perks::analytics_lui_mission_end_dlog();

    if ( !istrue( var_0 ) )
        var_1 thread scripts\mp\hud_message::showsplash( "specialist_perk_bonus" );
}

_id_11A3A()
{
    var_0 = self;
    var_0.obj_cleanup = 0;
    var_0 scripts\mp\perks\perks::_id_11A39();
}

isspecialistbonus( var_0, var_1, var_2, var_3 )
{
    self notify( "cancel_all_killstreak_deployments" );

    if ( istrue( var_3 ) )
    {
        var_4 = playersetattractiontime();
        heli_fire_at_players( var_4, var_2, var_3, var_0 );
        return;
    }

    if ( istrue( var_1 ) )
    {
        var_4 = playersetattractiontime();
        heli_fire_at_players( var_4, var_2 );
    }
    else
        scripts\mp\killstreaks\killstreaks::clearkillstreaks();

    scripts\mp\killstreaks\killstreaks::awardkillstreak( var_0, "other", undefined, undefined, undefined, 1 );
}

takekillstreakpickup( var_0, var_1 )
{
    if ( isdefined( var_0 ) && isdefined( var_0.playoverwatch_dialogue ) && isdefined( var_0.playoverwatch_dialogue.pistolslide ) )
        self.place_traversal_badplace = var_0.playoverwatch_dialogue.pistolslide;

    move_player_from_under_heli_and_kill( var_0.scriptablename, var_1 );
}

move_player_from_under_heli_and_kill( var_0, var_1 )
{
    var_2 = level.br_pickups.br_killstreakreference[var_0];

    if ( propspectateendwatch( var_2 ) )
        issidecriticaldamage( var_2 );
    else
        isspecialistbonus( var_2, 1, var_1 );
}

obj_a_roof_jugg()
{
    if ( isdefined( self.streakdata ) && isdefined( self.streakdata.streaks ) && self.streakdata.streaks.size > 0 )
        return isdefined( self.streakdata.streaks[1] );

    return 0;
}

haskillstreak( var_0 )
{
    return obj_a_roof_jugg() && self.streakdata.streaks[1].streakname == var_0;
}

objective_set_hot()
{
    return haskillstreak( "explosive_bow" );
}

propspectateendwatch( var_0 )
{
    var_1 = 0;

    switch ( var_0 )
    {
        case "circle_peek":
            var_1 = 1;
            break;
    }

    return var_1;
}

issidecriticaldamage( var_0 )
{
    var_1 = scripts\mp\killstreaks\killstreaks::getkillstreaksetupinfo( var_0 );

    if ( isdefined( var_1 ) && isdefined( var_1.getrandomweaponfromgroup ) )
        self [[ var_1.getrandomweaponfromgroup ]]();
}

forceusekillstreak( var_0 )
{
    if ( obj_a_roof_jugg() )
        scripts\mp\killstreaks\killstreaks::removekillstreak( 1 );

    scripts\mp\killstreaks\killstreaks::awardkillstreak( var_0, "other", undefined, undefined, undefined, 1 );
    var_1 = scripts\mp\killstreaks\killstreaks::getkillstreakinslot( 1 );
    var_2 = scripts\mp\killstreaks\killstreaks::triggerkillstreak( var_1, 1 );

    if ( !var_2 )
        scripts\mp\killstreaks\killstreaks::removekillstreak( 1 );

    return var_2;
}

_givebrsuper( var_0, var_1, var_2 )
{
    if ( level.allowsupers )
    {
        scripts\mp\perks\perkpackage::topteam( var_1 );
        var_2 = scripts\mp\supers::getcurrentsuperpoints() >= scripts\mp\supers::getsuperpointsneeded();
    }
    else
    {
        scripts\mp\perks\perkpackage::perkpackage_giveimmediate( var_1 );
        self setclientomnvar( "ui_perk_package_state", 3 );
        self setclientomnvar( "ui_perk_package_super1", scripts\mp\supers::getsuperid( var_1 ) );
        self setclientomnvar( "ui_super_progress", 1 );
    }

    if ( isdefined( var_0 ) )
    {
        scripts\mp\equipment::giveequipment( var_0, "super" );
        scripts\mp\equipment::setequipmentammo( var_0, var_2 );
    }
}

takesuperpickup( var_0, var_1 )
{
    var_2 = level.br_pickups.br_equipname[var_0.scriptablename];
    var_3 = level.br_pickups.br_superreference[var_0.scriptablename];

    if ( isdefined( self.equipment["super"] ) && ( scripts\mp\equipment::getequipmentslotammo( "super" ) > 0 || his_respawn() ) )
    {
        var_4 = playersetattractiontime();
        dropequipmentinslot( var_4, "super", var_1 );
    }

    _givebrsuper( var_2, var_3, var_0.count );

    if ( level.allowsupers )
        scripts\mp\supers::givesuperpoints( scripts\mp\supers::getsuperpointsneeded() );
}

his_respawn()
{
    if ( istrue( self.propminigamesetting ) )
    {
        if ( isdefined( self.super ) && !self.super.usepercent )
            return 1;
    }

    return 0;
}

forcegivesuper( var_0, var_1, var_2, var_3 )
{
    var_4 = undefined;

    foreach ( var_7, var_6 in level.br_pickups.br_superreference )
    {
        if ( var_6 == var_0 )
        {
            var_4 = var_7;
            break;
        }
    }

    var_8 = undefined;

    if ( isdefined( var_4 ) )
    {
        var_8 = level.br_pickups.br_equipname[var_4];

        if ( istrue( var_3 ) )
        {
            var_9 = playersetattractiontime();
            heli_delayedpadstateupdate( var_9, var_2, var_3, var_8 );
            return;
        }

        if ( istrue( var_1 ) )
        {
            if ( isdefined( self.equipment["super"] ) && scripts\mp\equipment::getequipmentslotammo( "super" ) > 0 )
            {
                var_9 = playersetattractiontime();
                dropequipmentinslot( var_9, "super", var_2 );
            }
        }
    }

    _givebrsuper( var_8, var_0, 1 );
}

takegasmask( var_0, var_1 )
{
    if ( scripts\cp_mp\gasmask::hasgasmask( self ) )
    {
        var_2 = undefined;

        if ( istrue( var_1 ) )
            var_2 = scripts\mp\gametypes\br_armory_kiosk.gsc::mark_location();

        var_3 = playersetattractiontime();
        var_4 = getitemdroporiginandangles( var_3, self.origin, self.angles, self, var_2 );
        spawnpickup( self.kioskreviveplayer, var_4, int( self.gasmaskhealth ), 1 );
    }

    scripts\cp_mp\gasmask::init( var_0.count, var_0.scriptablename );
}

kiosk_spent_total( var_0 )
{
    if ( !isdefined( self.kioskfixupproneplayers ) )
        self.kioskfixupproneplayers = [];

    if ( isdefined( self.kioskfixupproneplayers[var_0] ) )
        return;

    self.kioskfixupproneplayers[var_0] = 1;
    thread actorloopanim();
}

kingslayerkills( var_0 )
{
    if ( !isdefined( self.kioskfixupproneplayers ) )
        self.kioskfixupproneplayers = [];

    if ( !isdefined( self.kioskfixupproneplayers[var_0] ) )
        return;

    self.kioskfixupproneplayers[var_0] = undefined;
    thread actorloopanim();
}

actorloopanim()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );

    if ( istrue( self.gasmaskswapinprogress ) )
    {
        scripts\engine\utility::waittill_notify_or_timeout( "gas_mask_swap_complete", 2.0 );
        waitframe();
    }

    self notify( "gasMaskUpdateOnOff" );
    self endon( "gasMaskUpdateOnOff" );
    waittillframeend;

    if ( istrue( self.gasmaskequipped ) && ( !isdefined( self.kioskfixupproneplayers ) || !self.kioskfixupproneplayers.size ) )
        thread _id_11A1D();
    else if ( !istrue( self.gasmaskequipped ) && isdefined( self.kioskfixupproneplayers ) && self.kioskfixupproneplayers.size )
        thread init_bot_game_cyber();
}

delay_end_alarm_sound()
{
    var_0 = self;
    var_1 = var_0 scripts\cp_mp\utility\player_utility::isinvehicle( 1 );
    var_2 = var_0 isinfreefall();
    var_3 = var_0 isparachuting();
    var_4 = var_0 isbasejumpavailable();
    return !( var_1 || var_2 || var_3 || var_4 );
}

init_bot_game_cyber()
{
    self endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self playsoundtoplayer( "br_gas_mask_on_plr", self );
    self.gasmaskswapinprogress = 1;
    thread get_track_star_times( 0.2 );
    var_0 = self getgestureanimlength( "ges_magma_gas_mask_on" );

    if ( delay_end_alarm_sound() )
        thread vehicle_damage_onexitstateheavy( "iw8_ges_plyr_gasmask_on", var_0 );

    self setclientomnvar( "ui_gas_mask", 2 );
    wait( var_0 );
    self.gasmaskswapinprogress = 0;
    self notify( "gas_mask_swap_complete" );
    self.gasmaskequipped = 1;
    scripts\cp_mp\killstreaks\white_phosphorus::enableloopingcoughaudiosupression();

    if ( isdefined( self.operatorcustomization.gender ) && self.operatorcustomization.gender == "female" )
        self _meth_87A8( "gasmask_female" );
    else
        self _meth_87A8( "gasmask_male" );

    if ( isdefined( self.gasmaskhealth ) && self.gasmaskhealth <= 0 )
        cleanupafterweaponswitch();
}

vehicle_damage_onexitstateheavy( var_0, var_1 )
{
    self endon( "game_ended" );
    self endon( "death_or_disconnect" );
    var_2 = getcompleteweaponname( var_0 );
    self giveandfireoffhand( var_2 );

    while ( delay_end_alarm_sound() && var_1 > 0 )
    {
        if ( var_1 > 1 )
        {
            var_3 = 1;
            var_1 = var_1 - 1;
        }
        else
        {
            var_3 = var_1;
            var_1 = 0;
        }

        wait( var_3 );
    }

    if ( self hasweapon( var_2 ) )
        self takeweapon( var_2 );
}

_id_11A1D()
{
    self endon( "game_ended" );
    self endon( "death_or_disconnect" );

    if ( !istrue( self.gasmaskequipped ) )
        return;

    self playsoundtoplayer( "br_gas_mask_off_plr", self );
    var_0 = self getgestureanimlength( "ges_magma_gas_mask_off" );
    thread get_track_start_struct( 1.3 );

    if ( delay_end_alarm_sound() )
        thread vehicle_damage_onexitstateheavy( "iw8_ges_plyr_gasmask_off", var_0 );

    self.gasmaskswapinprogress = 1;
    self setclientomnvar( "ui_gas_mask", 1 );
    wait( var_0 );
    self.gasmaskswapinprogress = 0;
    self setclientomnvar( "ui_gas_mask", 0 );
    self notify( "gas_mask_swap_complete" );
    scripts\cp_mp\killstreaks\white_phosphorus::disableloopingcoughaudiosupression();

    if ( isdefined( self.operatorcustomization.gender ) && self.operatorcustomization.gender == "female" )
        self _meth_87A8( "female" );
    else
        self _meth_87A8( "" );

    if ( !isdefined( self.gasmaskhealth ) || self.gasmaskhealth <= 0 )
        empty_function();
}

cleanupafterweaponswitch()
{
    if ( !istrue( self.gasmaskequipped ) )
        return;

    self playsoundtoplayer( "br_gas_mask_crack_plr", self );
    thread get_track_timer_struct( 0.6 );

    if ( isdefined( self.operatorcustomization.gender ) && self.operatorcustomization.gender == "female" )
        self _meth_87A8( "female" );
    else
        self _meth_87A8( "" );

    self playsoundtoplayer( "br_gas_mask_depleted_plr", self );
    empty_function();
    var_0 = self getgestureanimlength( "ges_magma_gas_mask_break" );
    thread scripts\mp\gametypes\br_public.gsc::updatelocationbesttimehud( "iw8_ges_plyr_gasmask_break", var_0 );
    self.gasmaskswapinprogress = 1;
    self setclientomnvar( "ui_gas_mask", 3 );
    wait( var_0 );
    self.gasmaskswapinprogress = 0;
    self notify( "gas_mask_swap_complete" );
}

get_track_star_times( var_0 )
{
    self endon( "game_ended" );
    self endon( "death_or_disconnect" );

    if ( isdefined( var_0 ) && var_0 > 0.0 )
        wait( var_0 );

    self attach( "hat_child_hadir_gas_mask_wm_br", "j_head" );
}

get_track_start_struct( var_0 )
{
    self endon( "game_ended" );
    self endon( "death_or_disconnect" );

    if ( isdefined( var_0 ) && var_0 > 0.0 )
        wait( var_0 );

    if ( self.gasmaskequipped )
    {
        self detach( "hat_child_hadir_gas_mask_wm_br", "j_head" );
        self.gasmaskequipped = 0;
    }
}

get_track_timer_struct( var_0 )
{
    self endon( "game_ended" );
    self endon( "death_or_disconnect" );

    if ( isdefined( var_0 ) && var_0 > 0.1 )
        wait( var_0 - 0.1 );

    playfxontag( scripts\engine\utility::getfx( "vfx_gas_mask_break" ), self, "tag_weapon_left" );
    wait 0.1;

    if ( self.gasmaskequipped )
    {
        self detach( "hat_child_hadir_gas_mask_wm_br", "j_head" );
        self.gasmaskequipped = 0;
    }
}

canholdammobox( var_0 )
{
    if ( !isdefined( self.br_ammo[var_0] ) )
        return 1;

    return !scripts\mp\gametypes\br_weapons.gsc::br_ammo_type_player_full( self, var_0 );
}

isvest( var_0 )
{
    return isdefined( level.br_pickups.br_itemtype[var_0] ) && level.br_pickups.br_itemtype[var_0] == "armor" && issubstr( var_0, "vest" );
}

isgasmask( var_0 )
{
    return isdefined( level.br_pickups.br_itemtype[var_0] ) && level.br_pickups.br_itemtype[var_0] == "gear" && issubstr( var_0, "gasmask" );
}

randomoffsetmortar( var_0 )
{
    return isdefined( level.br_pickups.br_itemtype[var_0] ) && level.br_pickups.br_itemtype[var_0] == "specialist" && issubstr( var_0, "specialist_bonus" );
}

isplunder( var_0 )
{
    return isdefined( level.br_pickups.br_itemtype[var_0] ) && level.br_pickups.br_itemtype[var_0] == "plunder";
}

race_ui_checkpoint( var_0 )
{
    return isdefined( level.br_pickups.br_itemtype[var_0] ) && level.br_pickups.br_itemtype[var_0] == "tablet";
}

prophasflashesleft( var_0 )
{
    return isdefined( level.br_pickups.br_itemtype[var_0] ) && level.br_pickups.br_itemtype[var_0] == "questitem_dogtag";
}

race_timer_update( var_0 )
{
    return isdefined( level.br_pickups.br_itemtype[var_0] ) && level.br_pickups.br_itemtype[var_0] == "questitem_misc";
}

isperkpointpickup( var_0 )
{
    return isdefined( level.br_pickups.br_itemtype[var_0] ) && level.br_pickups.br_itemtype[var_0] == "perkpoint";
}

istokenpickup( var_0 )
{
    return isdefined( level.br_pickups.br_itemtype[var_0] ) && level.br_pickups.br_itemtype[var_0] == "token";
}

raid_mindia_unload_func( var_0 )
{
    return isdefined( level.br_pickups.br_itemtype[var_0] ) && level.br_pickups.br_itemtype[var_0] == "revive";
}

iskillstreak( var_0 )
{
    return isdefined( level.br_pickups.br_itemtype[var_0] ) && ( level.br_pickups.br_itemtype[var_0] == "killstreak" || level.br_pickups.br_itemtype[var_0] == "killstreak_nodrop" );
}

issuperpickup( var_0 )
{
    return !quarry_mortar_guys_internal( var_0 ) && ( isdefined( level.br_pickups.br_itemtype[var_0] ) && level.br_pickups.br_itemtype[var_0] == "super" );
}

isplunderextract( var_0 )
{
    return var_0 == "brloot_plunder_extract";
}

questrewardgroupexist( var_0 )
{
    return var_0 == "brloot_plate_pouch";
}

print_punchcard( var_0 )
{
    return issubstr( var_0, "access_card" );
}

quarry_mortar_guys_internal( var_0 )
{
    return var_0 == "br_loot_cache" || race_ui_checkpoint( var_0 );
}

quarry_train_model( var_0 )
{
    return isdefined( level.br_pickups.br_itemtype[var_0] ) && level.br_pickups.br_itemtype[var_0] == "objective";
}

cantakepickup( var_0 )
{
    if ( self isskydiving() )
        return 9;

    var_1 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "canTakePickupLoot", var_0 );

    if ( isdefined( var_1 ) )
        return var_1;

    if ( scripts\mp\gametypes\br_public.gsc::isammo( var_0.scriptablename ) )
    {
        if ( istrue( self.isjuggernaut ) && !scripts\mp\juggernaut::regenhealthaddfunc() )
            return 16;

        if ( !canholdammobox( var_0.scriptablename ) )
            return 3;
        else
            return 1;
    }

    if ( isweaponpickupitem( var_0 ) )
    {
        if ( istrue( self.isjuggernaut ) && !scripts\mp\juggernaut::regenhealthaddfunc() )
            return 16;

        if ( istrue( self.playlandingbreath ) )
            return 13;

        if ( scripts\cp_mp\utility\player_utility::isinvehicle() )
            return 17;

        if ( _applysalesdiscount::bush_trig() )
            return 21;

        return 1;
    }

    if ( scripts\mp\gametypes\br_public.gsc::isequipment( var_0.scriptablename ) )
    {
        if ( istrue( self.isjuggernaut ) )
            return 16;

        if ( var_0.scriptablename == "brloot_offhand_geigercounter" )
        {
            if ( self != var_0.playoverwatch_dialogue.owner )
                return 20;
            else
                self.helidrivable = undefined;
        }

        var_2 = level.br_pickups.br_equipname[var_0.scriptablename];
        var_3 = level.equipment.table[var_2].defaultslot;
        var_4 = istrue( var_0.processcashpilevalueoverrides );
        var_5 = 1;

        if ( isdefined( var_0.count ) )
            var_5 = var_0.count;

        if ( var_4 && ( var_3 == "primary" || var_3 == "secondary" ) )
        {
            if ( isdefined( self.equipment[var_3] ) && pickupissameasequipmentslot( var_2, var_3 ) && equipmentslothasroom( var_2, var_3 ) )
                return 1;

            return 12;
        }

        if ( !isdefined( self.equipment[var_3] ) || scripts\mp\equipment::getequipmentslotammo( var_3 ) == 0 )
            return 1;

        if ( pickupissameasequipmentslot( var_2, var_3 ) )
        {
            if ( equipmentslothasroom( var_2, var_3 ) )
                return 1;
            else if ( getdvarint( "scr_br_no_inventory", 1 ) )
                return 4;
        }

        if ( getdvarint( "scr_br_no_inventory", 1 ) )
            return 1;

        if ( !canslotitem( var_0.scriptablename, var_5 ) )
            return 4;
        else
            return 1;
    }

    if ( isplunder( var_0.scriptablename ) )
    {
        if ( isdefined( level.br_plunder ) && isdefined( level.br_plunder.vehicle_spawn_stopwatchingabandoned ) && self.plundercount >= level.br_plunder.vehicle_spawn_stopwatchingabandoned )
            return 11;

        return 1;
    }

    if ( isgasmask( var_0.scriptablename ) )
    {
        if ( istrue( self.isjuggernaut ) )
            return 16;

        return 1;
    }

    if ( race_ui_checkpoint( var_0.scriptablename ) )
    {
        if ( var_0.scriptablename == "brloot_blueprintextract_tablet" || var_0.scriptablename == "brloot_blueprintextract_tablet_easterevent" )
            return 1;
        else if ( scripts\engine\utility::array_contains( level.questinfo.teamsonquests, self.team ) )
            return 10;
        else
            return 1;
    }

    if ( isperkpointpickup( var_0.scriptablename ) )
    {
        if ( istrue( self.isjuggernaut ) )
            return 16;

        return 1;
    }

    if ( istokenpickup( var_0.scriptablename ) )
    {
        if ( istrue( self.isjuggernaut ) )
            return 16;

        if ( var_0.scriptablename == "brloot_respawn_token" )
        {
            if ( scripts\mp\gametypes\br_public.gsc::hasrespawntoken() )
                return 8;
            else
                return 1;
        }

        return 1;
    }

    if ( raid_mindia_unload_func( var_0.scriptablename ) )
    {
        if ( istrue( self.isjuggernaut ) )
            return 16;

        if ( var_0.scriptablename == "brloot_self_revive" )
        {
            if ( scripts\mp\gametypes\br_public.gsc::obj_room_fire_06() )
                return 14;
            else
                return 1;
        }

        return 1;
    }

    if ( iskillstreak( var_0.scriptablename ) )
    {
        var_6 = level.br_pickups.br_killstreakreference[var_0.scriptablename];

        if ( var_0.scriptablename == "brloot_specialist_bonus" && scripts\mp\gametypes\br_public.gsc::obj_room_fire_08() )
            return 18;

        if ( istrue( self.isjuggernaut ) )
            return 16;

        if ( propspectateendwatch( var_6 ) )
        {
            if ( var_6 == "circle_peek" )
            {
                if ( !isdefined( level._id_1269E[self.team] ) )
                    level._id_1269E[self.team] = 0;

                var_7 = level._id_1269E[self.team] + level.br_circle.circleindex + 1;

                if ( var_7 >= level.dropoff_sound_playerwm_handler.size )
                    return 19;
            }

            return 1;
        }

        if ( scripts\mp\utility\weapon::iskillstreakweapon( self getcurrentweapon() ) )
            return 7;

        if ( isdefined( self.streakdata ) && isdefined( self.streakdata.streaks ) && self.streakdata.streaks.size > 0 && self.streakdata.streaks[1].streakname == level.br_pickups.br_killstreakreference[var_0.scriptablename] )
            return 7;
        else
            return 1;
    }

    if ( issuperpickup( var_0.scriptablename ) )
    {
        if ( istrue( self.isjuggernaut ) )
            return 16;

        if ( scripts\mp\supers::issuperinuse() )
            return 4;

        return 1;
    }

    if ( scripts\mp\gametypes\br_public.gsc::isarmor( var_0.scriptablename ) )
    {
        if ( istrue( self.isjuggernaut ) )
            return 16;

        if ( scripts\mp\gametypes\br_armor.gsc::isarmorbetterthanequipped( level.br_pickups.br_equipname[var_0.scriptablename] ) )
            return 1;
        else
            return 6;
    }

    if ( questrewardgroupexist( var_0.scriptablename ) )
    {
        if ( istrue( self.isjuggernaut ) )
            return 16;

        if ( scripts\mp\gametypes\br_public.gsc::obj_ow_atvs_spawned() )
            return 15;
        else
            return 1;
    }

    if ( print_punchcard( var_0.scriptablename ) )
        return 1;

    if ( race_timer_update( var_0.scriptablename ) )
    {
        if ( isdefined( var_0.playoverwatch_dialogue.team ) && self.team == var_0.playoverwatch_dialogue.team )
            return 1;
        else
            return 4;
    }

    if ( randomoffsetmortar( var_0.scriptablename ) )
    {
        if ( istrue( self.isjuggernaut ) )
            return 16;

        if ( scripts\mp\gametypes\br_public.gsc::obj_room_fire_08() )
            return 18;

        return 1;
    }

    if ( var_0.scriptablename == "brloot_ammo_grenade" )
    {
        if ( istrue( self.isjuggernaut ) )
            return 16;

        var_8 = scripts\mp\equipment::getequipmentslotammo( "primary" );
        var_9 = scripts\mp\equipment::getequipmentslotammo( "secondary" );

        if ( isdefined( var_8 ) && var_8 < 2 || isdefined( var_9 ) && var_9 < 2 )
            return 1;
        else
            return 3;
    }

    if ( var_0.scriptablename == "Pillage_Cache" )
        return 1;

    if ( quarry_train_model( var_0.scriptablename ) )
        return 1;

    return 2;
}

proplocationindex( var_0 )
{
    if ( scripts\mp\weapons::isfistweapon( var_0 ) || scripts\mp\utility\weapon::propwatchcleanuponroundend( var_0 ) || scripts\mp\utility\weapon::putinlaststand( var_0 ) )
        return 0;

    return 1;
}

propcircles( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    switch ( var_0 )
    {
        case "brloot_tactical_device":
        case "brloot_x1_stash_cypher":
        case "brloot_x2_stash_bomb":
        case "brloot_offhand_geigercounter":
            return 1;
        default:
            return 0;
    }
}

spawnpickup( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    if ( !isdefined( var_1 ) )
        return;

    if ( var_1.origin == ( 0, 0, 0 ) )
        return;

    var_8 = 0;
    var_9 = undefined;

    if ( isdefined( level.br_pickups.br_weapontoscriptable[var_0] ) )
        var_9 = level.br_pickups.br_weapontoscriptable[var_0];
    else if ( scripts\mp\gametypes\br_weapons.gsc::rear_spotlight( var_4 ) )
    {
        var_10 = getsubstr( var_4.basename, 4, 6 );

        if ( var_10 != "me" && var_10 != "pi" && var_10 != "sh" && var_10 != "sm" && var_10 != "ar" && var_10 != "lm" && var_10 != "dm" && var_10 != "sn" && var_10 != "la" && var_10 != "kn" )
            return;

        var_8 = 1;
        var_9 = "brloot_weapon_generic_" + var_10;
    }
    else if ( proplocationindex( var_0 ) )
        var_9 = var_0;

    if ( !isdefined( var_9 ) )
        return;

    if ( var_9 == "brloot_weapon_me_riotshield_epic" || scripts\mp\gametypes\br_weapons.gsc::rear_spotlight( var_4 ) && scripts\mp\riotshield::isriotshield( var_4 ) )
        var_1.angles = ( var_1.angles[0] - 90, var_1.angles[1], var_1.angles[2] );

    ending_player_disconnect_thread();

    if ( var_8 )
    {
        var_11 = getnodecount( var_9, var_1.origin, var_1.angles, var_1.testing, var_4 );

        if ( isdefined( var_11 ) )
            var_11.customweaponname = createheadicon( var_4 );
    }
    else
        var_11 = easepower( var_9, var_1.origin, var_1.angles, var_1.testing );

    if ( !isdefined( var_11 ) )
        return;

    if ( isdefined( var_1.movetowithpause ) )
    {
        var_12 = rotatevectorinverted( var_1.origin - var_1.movetowithpause.origin, var_1.movetowithpause.angles );
        var_13 = combineangles( invertangles( var_1.movetowithpause.angles ), var_1.angles );
        var_11 scriptablesetparententity( var_1.movetowithpause, var_12, var_13 );
        var_11.movetowithpause = var_1.movetowithpause;
    }

    _id_11959( var_11 );

    if ( isdefined( var_2 ) )
        select_back_two_spawners( var_11, var_2, var_6, var_7 );
    else
        select_back_two_spawners( var_11, 0 );

    if ( !isdefined( var_5 ) )
        var_5 = 1;

    if ( !istrue( level.br_pickups.checkpoint_release_spawnpoint[var_9] ) )
        var_5 = 1;

    if ( propcircles( var_0 ) )
        var_11.forcegivekillstreak = 1;

    if ( !getdvarint( "scr_br_disableLootDropTrail" ) )
    {
        if ( istrue( var_3 ) )
        {
            if ( var_5 )
                var_11 setscriptablepartstate( var_9, "dropped" );
            else
                var_11 setscriptablepartstate( var_9, "droppedNoAuto" );
        }
    }

    var_14 = level.br_pickups.flightyaw[var_9];

    if ( isdefined( var_14 ) )
        var_11 [[ var_14 ]]();

    return var_11;
}

_id_11953( var_0, var_1 )
{
    level.br_pickups.flightyaw[var_0] = var_1;
}

showuseresultsfeedback( var_0 )
{
    switch ( var_0 )
    {
        case 5:
            scripts\mp\hud_message::showerrormessage( level.br_pickups.br_pickupdenyalreadyhaveweapon );
            return;
        case 3:
            scripts\mp\hud_message::showerrormessage( level.br_pickups.br_pickupdenyammonoroom );
            return;
        case 4:
            scripts\mp\hud_message::showerrormessage( level.br_pickups.br_pickupdenyequipnoroom );
            return;
        case 6:
            scripts\mp\hud_message::showerrormessage( level.br_pickups.br_pickupdenyarmornotbetter );
            return;
        case 7:
            scripts\mp\hud_message::showerrormessage( level.br_pickups.br_pickupdenyalreadyhaveks );
            return;
        case 8:
            scripts\mp\hud_message::showerrormessage( level.br_pickups.br_pickupdenyalreadyhavetoken );
            return;
        case 14:
            scripts\mp\hud_message::showerrormessage( level.br_pickups.choosejuggernautcratemodel );
            return;
        case 9:
            scripts\mp\hud_message::showerrormessage( level.br_pickups.chopper_boss_damage_monitor );
            return;
        case 10:
            scripts\mp\hud_message::showerrormessage( level.br_pickups.choosegulagloadouttable );
            return;
        case 11:
            scripts\mp\hud_message::showerrormessage( level.br_pickups.chopper_boss_destroyed_func );
            return;
        case 13:
            scripts\mp\hud_message::showerrormessage( level.br_pickups.chopper_boss_drone_target_array );
            return;
        case 15:
            scripts\mp\hud_message::showerrormessage( level.br_pickups.choosefinalkillcam );
            return;
        case 16:
            scripts\mp\hud_message::showerrormessage( level.br_pickups.chopper_boss_combat_actions );
            return;
        case 23:
            scripts\mp\hud_message::showerrormessage( level.br_pickups.chopper_boss_combat );
            return;
        case 18:
            scripts\mp\hud_message::showerrormessage( level.br_pickups.choosebestpropforkillcam );
            return;
        case 19:
            scripts\mp\hud_message::showerrormessage( level.br_pickups.choosecrouchorstandtac );
            return;
        case 20:
            scripts\mp\hud_message::showerrormessage( level.br_pickups.choosedropbagmodel );
            return;
        case 22:
            scripts\mp\hud_message::showerrormessage( level.br_pickups.chopper_boss_explosion );
            return;
        case 2:
            break;
    }
}

_removecashstateforplayer( var_0, var_1 )
{
    var_0 notify( "reset_cash_wait" );
    var_0 endon( "reset_cash_wait" );
    wait( var_1 );
    var_0.br_cash_count = undefined;
    var_0.br_cash_time = undefined;
}

getcashsoundaliasforplayer( var_0, var_1 )
{
    var_2 = "br_pickup_cash";
    var_3 = 5000.0;
    var_4 = var_3 / 1000.0;
    var_5 = gettime();

    if ( isplayer( var_0 ) )
    {
        if ( !isdefined( var_0.br_cash_count ) )
            var_0.br_cash_count = 0;

        if ( !isdefined( var_0.br_cash_time ) )
            var_0.br_cash_time = var_5;

        var_6 = var_5 - var_0.br_cash_time;
        var_0.br_cash_time = var_5;

        if ( var_6 < var_3 )
            var_0.br_cash_count = var_0.br_cash_count + 1;

        var_0 thread _removecashstateforplayer( var_0, var_4 );

        switch ( var_1 )
        {
            case "brloot_plunder_cash_common_1":
            case "brloot_plunder_cash_uncommon_2":
            case "brloot_plunder_cash_uncommon_1":
            default:
                switch ( var_0.br_cash_count )
                {
                    case 1:
                    case 0:
                        var_2 = "br_pickup_cash_01";
                        break;
                    case 2:
                        var_2 = "br_pickup_cash_02";
                        break;
                    case 3:
                        var_2 = "br_pickup_cash_03";
                        break;
                    case 4:
                        var_2 = "br_pickup_cash_04";
                        break;
                    case 5:
                    default:
                        var_2 = "br_pickup_cash_05";
                        break;
                }

                break;
            case "brloot_plunder_cash_rare_1":
            case "brloot_plunder_cash_uncommon_3":
                switch ( var_0.br_cash_count )
                {
                    case 1:
                    case 0:
                        var_2 = "br_pickup_cash_med_01";
                        break;
                    case 2:
                        var_2 = "br_pickup_cash_med_02";
                        break;
                    case 3:
                        var_2 = "br_pickup_cash_med_03";
                        break;
                    case 4:
                        var_2 = "br_pickup_cash_med_04";
                        break;
                    case 5:
                    default:
                        var_2 = "br_pickup_cash_med_05";
                        break;
                }

                break;
            case "brloot_plunder_cash_epic_2":
            case "brloot_plunder_cash_epic_1":
            case "brloot_plunder_cash_rare_2":
                switch ( var_0.br_cash_count )
                {
                    case 1:
                    case 0:
                        var_2 = "br_pickup_cash_lrg_01";
                        break;
                    case 2:
                        var_2 = "br_pickup_cash_lrg_02";
                        break;
                    case 3:
                        var_2 = "br_pickup_cash_lrg_03";
                        break;
                    case 4:
                        var_2 = "br_pickup_cash_lrg_04";
                        break;
                    case 5:
                    default:
                        var_2 = "br_pickup_cash_lrg_05";
                        break;
                }

                break;
            case "brloot_plunder_cash_legendary_1":
                switch ( var_0.br_cash_count )
                {
                    case 1:
                    case 0:
                        var_2 = "br_pickup_cash_vlrg_01";
                        break;
                    case 2:
                        var_2 = "br_pickup_cash_vlrg_02";
                        break;
                    case 3:
                        var_2 = "br_pickup_cash_vlrg_03";
                        break;
                    case 4:
                        var_2 = "br_pickup_cash_vlrg_04";
                        break;
                    case 5:
                    default:
                        var_2 = "br_pickup_cash_vlrg_05";
                        break;
                }

                break;
        }
    }

    return var_2;
}

onusecompleted( var_0, var_1, var_2, var_3 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    var_4 = 0;

    if ( !isdefined( var_0.count ) )
        var_0.count = 0;

    if ( !istrue( var_1 ) )
    {
        var_5 = "br_pickup_generic";
        var_6 = undefined;

        if ( isdefined( var_0.scriptablename ) )
        {
            if ( isplunder( var_0.scriptablename ) )
                var_5 = getcashsoundaliasforplayer( self, var_0.scriptablename );
            else if ( isdefined( level.br_pickups.br_pickupsfx[var_0.scriptablename] ) && level.br_pickups.br_pickupsfx[var_0.scriptablename].size > 0 )
                var_5 = level.br_pickups.br_pickupsfx[var_0.scriptablename];
            else if ( isweaponpickupitem( var_0 ) )
                var_5 = "br_pickup_weap";
            else
                var_5 = "br_pickup_ammo";

            if ( isplunder( var_0.scriptablename ) )
                var_6 = "br_plunder";
            else if ( scripts\mp\gametypes\br_public.gsc::isammo( var_0.scriptablename ) )
                var_6 = "br_ammo";
            else if ( scripts\mp\gametypes\br_public.gsc::isarmorplate( var_0.scriptablename ) )
                var_6 = "br_armor";
        }

        self playsoundtoplayer( var_5, self );
        var_7 = var_5 + "_3d";

        if ( soundexists( var_7 ) )
            self playsoundtoteam( var_7, self.team, self, self );

        if ( isdefined( var_6 ) )
            scripts\mp\damagefeedback::hudicontype( var_6 );

        if ( !istrue( var_2 ) )
            thread playerplaypickupanim( var_0 );
    }

    level notify( "pickedupweapon_kill_callout_" + var_0.scriptablename + var_0.origin );

    if ( isplunder( var_0.scriptablename ) )
        self notify( "self_pickedupitem_plunder" );
    else if ( isweaponpickupitem( var_0 ) )
        self notify( "self_pickedupitem_weapon" );
    else
        self notify( "self_pickedupitem_" + var_0.scriptablename );

    if ( istrue( scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "onUseCompleted", var_0 ) ) )
    {

    }
    else if ( isweaponpickupitem( var_0 ) )
    {
        scripts\mp\javelin::redbuttonused();
        canceloffhandads();
        scripts\mp\gametypes\br_weapons.gsc::takeweaponpickup( var_0 );
        scripts\cp\helicopter\chopper_boss::sub_civtarget( "weapon" );
        var_8 = isdefined( var_0.scriptablename ) && var_0.scriptablename == "brloot_weapon_lm_dblmg_lege";

        if ( var_8 )
            set_force_aitype_rpg();
    }
    else if ( scripts\mp\gametypes\br_public.gsc::isammo( var_0.scriptablename ) )
        var_4 = scripts\mp\gametypes\br_weapons.gsc::takeammopickup( var_0 );
    else if ( scripts\mp\gametypes\br_public.gsc::isequipment( var_0.scriptablename ) )
        var_4 = takeequipmentpickup( var_0, var_3 );
    else if ( scripts\mp\gametypes\br_public.gsc::isarmor( var_0.scriptablename ) )
        takearmorpickup( var_0 );
    else if ( var_0.scriptablename == "Pillage_Cache" && isdefined( level.givetagsfromcache ) )
        self [[ level.givetagsfromcache ]]();
    else if ( isplunder( var_0.scriptablename ) )
    {
        scripts\mp\gametypes\br_plunder.gsc::takeplunderpickup( var_0 );
        scripts\cp\helicopter\chopper_boss::sub_civtarget( "plunder" );
    }
    else if ( istokenpickup( var_0.scriptablename ) )
        takerespawntokenpickup( var_0 );
    else if ( raid_mindia_unload_func( var_0.scriptablename ) )
        _id_12625( var_0 );
    else if ( iskillstreak( var_0.scriptablename ) )
    {
        if ( var_0.scriptablename == "brloot_specialist_bonus" )
            anchoredwidgetid();
        else
        {
            takekillstreakpickup( var_0, var_3 );

            if ( isdefined( var_0.playoverwatch_dialogue ) && isdefined( var_0.playoverwatch_dialogue.selfrevivebuttonpressed ) && issubstr( var_0.playoverwatch_dialogue.selfrevivebuttonpressed, "cache" ) || istrue( var_3 ) )
                scripts\cp\helicopter\chopper_boss::sub_civtarget( "killstreak" );
        }
    }
    else if ( issuperpickup( var_0.scriptablename ) )
        takesuperpickup( var_0, var_3 );
    else if ( isgasmask( var_0.scriptablename ) )
        takegasmask( var_0, var_3 );
    else if ( race_ui_checkpoint( var_0.scriptablename ) )
        scripts\mp\gametypes\br_quest_util.gsc::_id_12624( var_0.playoverwatch_dialogue );
    else if ( questrewardgroupexist( var_0.scriptablename ) )
    {
        ammobox_tryuse();
        is_cover_node();
    }
    else if ( var_0.scriptablename == "brloot_ammo_grenade" )
        takegenericgrenadepickup( var_0 );
    else if ( print_punchcard( var_0.scriptablename ) )
        _id_1261E( var_0 );
    else if ( prophasflashesleft( var_0.scriptablename ) )
        _id_12620( var_0 );
    else if ( race_timer_update( var_0.scriptablename ) )
        takequestitem( var_0 );
    else if ( randomoffsetmortar( var_0.scriptablename ) )
        anchoredwidgetid();
    else if ( quarry_train_model( var_0.scriptablename ) )
    {
        if ( var_0.scriptablename == "brloot_escape_radio" )
        {
            if ( scripts\mp\gametypes\br_gametypes.gsc::progress_obj( "onPickupExfilRadio" ) && isdefined( var_0.playoverwatch_dialogue ) )
                var_0.playoverwatch_dialogue thread scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "onPickupExfilRadio", self );
            else
                var_0 thread scripts\mp\gametypes\br_alt_mode_escape.gsc::init_fan_blades( self );
        }
        else if ( var_0.scriptablename == "brloot_tactical_device" )
            thread scripts\mp\gametypes\br_gametype_reveal_2.gsc::_id_1260E( self );
    }
    else
    {
        var_9 = 1;

        if ( isdefined( var_0.count ) )
            var_9 = var_0.count;

        trypickupitem( var_0.scriptablename, var_9 );
    }

    var_9 = 1;

    if ( isdefined( var_0.count ) )
        var_9 = var_0.count;

    if ( isdefined( var_0.playoverwatch_dialogue ) && isdefined( var_0.playoverwatch_dialogue._id_12A42 ) )
        waitandspawnprops( var_0.playoverwatch_dialogue._id_12A42, self );

    scripts\mp\gametypes\br_analytics.gsc::branalytics_lootpickup( self, var_0.scriptablename, var_9 );
    return var_4;
}

playerplaypickupanim( var_0 )
{
    self notify( "playerPlayPickupAnim" );
    self endon( "playerPlayPickupAnim" );
    self endon( "death" );
    self endon( "disconnect" );

    if ( isweaponpickupitem( var_0 ) || !scripts\mp\gametypes\br_public.gsc::uihidden() )
        return;

    if ( istrue( scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "skipLootPickupAnim", var_0 ) ) )
        return;

    var_1 = getcompleteweaponname( "iw8_ges_plyr_loot_pickup" );

    if ( self hasweapon( var_1 ) )
    {
        if ( self isgestureplaying( "iw8_ges_pickup_br" ) )
            self stopgestureviewmodel( "iw8_ges_pickup_br", 0, 1 );

        self takeweapon( var_1 );
        waitframe();
    }

    scripts\mp\gametypes\br_public.gsc::updatelocationbesttimehud( "iw8_ges_plyr_loot_pickup", 1.17 );
}

playersetattractiontime()
{
    var_0 = spawnstruct();
    var_0.heli_lookat_monitor = 0;
    return var_0;
}

droponplayerdeath( var_0 )
{
    if ( istrue( scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "dropOnPlayerDeath", var_0 ) ) )
        return;

    if ( istrue( level.usegulag ) && ( scripts\mp\gametypes\br_public.gsc::isplayeringulag() || scripts\mp\gametypes\br_public.gsc::_id_12ECC() ) )
        return;

    var_1 = playersetattractiontime();
    scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "addDropOnPlayerDeath", var_1, var_0 );

    if ( scripts\mp\utility\killstreak::isjuggernaut() )
        scripts\mp\gametypes\br_jugg_common.gsc::droponplayerdeath( var_1 );

    var_2 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "skipPrimaryWeaponDrop" );
    heli_check_player_below_starts( var_1 );

    if ( !istrue( level._id_120BE ) && !istrue( var_2 ) )
        heli_gunner_logic( var_1 );

    if ( !istrue( level._id_120A9 ) )
        heli_delayedpadstateupdate( var_1 );

    heli_extraction( var_1 );
    scripts\mp\gametypes\br_plunder.gsc::playerdropplunderondeath( var_1, var_0 );
    heli_deposit_instruct( var_1 );

    if ( scripts\mp\utility\game::missions_clearinappropriaterewards() != "kingslayer" )
        heli_fire_at_players( var_1 );

    if ( !istrue( level._id_120BB ) )
        heli_intro( var_1 );

    heli_group_nextspawntime( var_1 );
    heli_goto_pos( var_1 );
    heli_bosses( var_1 );
    heliextractwait( var_1 );
    heli_rpg_enemy_think( var_1 );
    helihint_activate();
    var_0 = self.lastkilledby;

    if ( isdefined( var_0 ) )
        heli_convert( var_1, var_0 );
}

heli_check_player_below_starts( var_0 )
{
    foreach ( var_2 in level.br_ammo_types )
    {
        if ( self.br_ammo[var_2] > 0 && isdefined( level.br_pickups.br_itemrow[var_2] ) )
        {
            var_3 = var_2;
            var_4 = getitemdroporiginandangles( var_0, self.origin, self.angles, self );
            spawnpickup( var_3, var_4, self.br_ammo[var_2], 1 );
        }
    }
}

heli_gunner_logic( var_0 )
{
    foreach ( var_2 in self.equippedweapons )
    {
        if ( _id_11FFA( var_2, self ) )
            heli_isleaving( var_2, var_0 );
    }
}

heli_isleaving( var_0, var_1 )
{
    var_2 = undefined;
    var_3 = 1;
    var_4 = 0;
    var_5 = 0;

    if ( isdefined( var_0 ) )
    {
        if ( issameweapon( var_0 ) )
        {
            var_2 = var_0;
            var_3 = self getweaponammoclip( var_2 );
            var_4 = self getweaponammoclip( var_2, "left" );

            if ( var_2.hasalternate )
            {
                var_6 = var_2 getaltweapon();

                if ( !scripts\mp\gametypes\br_weapons.gsc::checkformatchend( var_2, var_6 ) )
                    var_5 = self getweaponammoclip( var_6 );
            }
        }
        else if ( isstring( var_0 ) )
        {
            var_2 = manage_health_stage_allows( var_0 );

            if ( isdefined( var_2 ) )
                var_3 = var_2.clipsize;
            else if ( isdefined( level.br_ammo_clipsize[var_0] ) )
                var_3 = level.br_ammo_clipsize[var_0];
        }
    }

    if ( !isdefined( var_2 ) )
        return;

    var_7 = getitemdroporiginandangles( var_1, self.origin, self.angles, self );
    var_8 = scripts\mp\gametypes\br_weapons.gsc::weaponspawn( var_2, self, var_7, 0, 1 );

    if ( isdefined( var_8 ) )
        select_back_two_spawners( var_8, var_3, var_4, var_5 );

    return var_8;
}

manage_health_stage_allows( var_0 )
{
    var_1 = undefined;

    if ( !isdefined( level.br_lootiteminfo ) && !isdefined( level.br_lootiteminfo[var_0] ) )
        return;

    return level.br_lootiteminfo[var_0].jugg_getminigunweapon;
}

_id_11FFA( var_0, var_1 )
{
    var_2 = scripts\mp\utility\weapon::getweaponrootname( var_0.basename );

    if ( var_2 == "iw8_fists" || var_2 == "iw8_knifestab" || var_2 == "iw8_gunless" )
        return 0;

    if ( var_2 == "ks_use_crate_mp" )
        return 0;

    if ( !issameweapon( var_0 ) )
        return 0;

    if ( var_0.inventorytype != "primary" )
        return 0;

    if ( var_1 scripts\mp\gametypes\br_extract_quest.gsc::initbrmechanics( var_0 ) )
        return 0;

    return 1;
}

heli_delayedpadstateupdate( var_0, var_1, var_2, var_3 )
{
    var_4 = istrue( var_2 ) && isdefined( var_3 );

    if ( var_4 )
    {
        var_5 = scripts\engine\utility::array_find( level.br_pickups.br_equipname, var_3 );

        if ( isdefined( var_5 ) )
        {
            var_6 = undefined;

            if ( istrue( var_1 ) )
                var_6 = scripts\mp\gametypes\br_armory_kiosk.gsc::mark_location();

            var_7 = getitemdroporiginandangles( var_0, self.origin, self.angles, self, var_6 );
            spawnpickup( var_5, var_7, 1, 1 );
        }

        return;
    }

    if ( isdefined( self.equipment["primary"] ) )
    {
        var_8 = scripts\mp\equipment::getequipmentslotammo( "primary" );

        if ( var_8 > 0 )
        {
            var_9 = scripts\engine\utility::array_find( level.br_pickups.br_equipname, self.equipment["primary"] );

            if ( isdefined( var_9 ) )
            {
                var_7 = getitemdroporiginandangles( var_0, self.origin, self.angles, self );
                spawnpickup( var_9, var_7, var_8, 1 );
            }
        }
    }

    if ( isdefined( self.equipment["secondary"] ) )
    {
        var_8 = scripts\mp\equipment::getequipmentslotammo( "secondary" );

        if ( var_8 > 0 )
        {
            var_9 = scripts\engine\utility::array_find( level.br_pickups.br_equipname, self.equipment["secondary"] );

            if ( isdefined( var_9 ) )
            {
                var_7 = getitemdroporiginandangles( var_0, self.origin, self.angles, self );
                var_10 = spawnpickup( var_9, var_7, var_8, 1 );

                if ( isdefined( var_10 ) )
                    var_10 helicopter_firendly_dmg_text_display( self, var_9 );
            }
        }
    }
}

heli_intro( var_0, var_1, var_2, var_3 )
{
    var_4 = istrue( var_2 ) && isdefined( var_3 );

    if ( var_4 )
    {
        var_5 = scripts\engine\utility::array_find( level.br_pickups.br_equipname, var_3 );

        if ( isdefined( var_5 ) )
        {
            var_6 = undefined;

            if ( istrue( var_1 ) )
                var_6 = scripts\mp\gametypes\br_armory_kiosk.gsc::mark_location();

            [var_8, var_9, var_10] = getitemdroporiginandangles( var_0, self.origin, self.angles, self, var_6 );
            spawnpickup( var_5, var_8, var_9, 1, 1, var_10 );
        }

        return;
    }

    if ( isdefined( self.equipment["super"] ) )
    {
        var_11 = int( max( scripts\mp\equipment::getequipmentslotammo( "super" ), scripts\mp\gametypes\br.gsc::mix() ) );

        if ( var_11 > 0 )
        {
            var_3 = scripts\mp\supers::getcurrentsuperref();

            if ( isdefined( var_3 ) && var_3 == "super_fulton" )
            {
                if ( !istrue( level.binoculars_hascoldblooded ) )
                    return;
            }

            dropequipmentinslot( var_0, "super", var_1, var_11 );
        }
    }
}

heli_goto_pos( var_0 )
{
    if ( isdefined( self.initialize_flag_role ) && isdefined( self.initialize_switches_pattern ) )
    {
        var_1 = getitemdroporiginandangles( var_0, self.origin, self.angles, self );
        var_2 = spawnpickup( self.initialize_flag_role, var_1, 1, 1 );

        if ( isdefined( var_2 ) )
            var_2 scripts\mp\gametypes\br_blueprint_extract_spawn.gsc::calloutmarkerping_squadleaderbeaconkillforplayer( self.initialize_switches_pattern );
    }
}

heli_extraction( var_0 )
{
    var_1 = 0;
    var_2 = undefined;

    if ( isdefined( self.equipment["health"] ) )
    {
        var_2 = level.br_pickups.br_equipnametoscriptable[self.equipment["health"]];
        var_1 = scripts\mp\equipment::getequipmentslotammo( "health" );
    }
    else if ( istrue( level.issameteamagent ) )
    {
        var_2 = level.br_pickups.br_equipnametoscriptable["equip_armorplate"];
        var_1 = level.issameteamagent;
    }

    if ( istrue( level.setupbobbingboatmultiple ) && var_1 < level.setupbobbingboatmultiple )
    {
        var_1 = level.setupbobbingboatmultiple;

        if ( !isdefined( var_2 ) )
            var_2 = level.br_pickups.br_equipnametoscriptable["equip_armorplate"];
    }

    if ( var_1 > 0 && isdefined( var_2 ) )
    {
        if ( var_1 > level.br_pickups.maxcounts[var_2] )
        {
            var_1 = var_1 - level.br_pickups.maxcounts[var_2];
            var_3 = getitemdroporiginandangles( var_0, self.origin, self.angles, self );
            spawnpickup( var_2, var_3, level.br_pickups.maxcounts[var_2], 1 );
        }

        var_3 = getitemdroporiginandangles( var_0, self.origin, self.angles, self );
        spawnpickup( var_2, var_3, var_1, 1 );
    }
}

heli_deposit_instruct( var_0 )
{
    if ( scripts\cp_mp\gasmask::hasgasmask( self ) )
    {
        var_1 = getitemdroporiginandangles( var_0, self.origin, self.angles, self );
        var_2 = spawnpickup( self.kioskreviveplayer, var_1, int( self.gasmaskhealth ), 1 );

        if ( isdefined( var_2 ) )
            var_2.kingslayerdeaths = self.kingslayerdeaths;

        empty_vo_func();
    }
}

heli_fire_at_players( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE6( "dropBRKillstreak", var_0, var_1, var_2, var_3 );

    if ( istrue( var_4 ) )
        return;

    var_5 = istrue( var_2 ) && isdefined( var_3 );

    if ( var_5 )
    {
        var_6 = undefined;

        if ( istrue( var_1 ) )
            var_6 = scripts\mp\gametypes\br_armory_kiosk.gsc::mark_location();

        var_7 = getitemdroporiginandangles( var_0, self.origin, self.angles, self, var_6 );
        spawnpickup( level.br_pickups.br_killstreaktoscriptable[var_3], var_7 );
        return;
    }

    if ( obj_a_roof_jugg() )
    {
        var_6 = undefined;

        if ( istrue( var_1 ) )
            var_6 = scripts\mp\gametypes\br_armory_kiosk.gsc::mark_location();

        var_7 = getitemdroporiginandangles( var_0, self.origin, self.angles, self, var_6 );
        var_8 = spawnpickup( level.br_pickups.br_killstreaktoscriptable[self.streakdata.streaks[1].streakname], var_7 );

        if ( objective_set_hot() && isdefined( self.place_traversal_badplace ) )
        {
            var_8.pistolslide = self.place_traversal_badplace;
            self.place_traversal_badplace = undefined;
        }

        scripts\mp\killstreaks\killstreaks::removekillstreak( 1 );
    }
}

heli_convert( var_0, var_1 )
{
    if ( var_1 scripts\mp\utility\perk::_hasperk( "specialty_br_ammoscavenger" ) )
    {
        var_2 = scripts\mp\gametypes\br_weapons.gsc::br_ammo_type_for_weapon( var_1.currentweapon );
        var_3 = getitemdroporiginandangles( var_0, self.origin, self.angles, self );
        var_3.scavengerammo = 1;
        spawnpickup( var_2, var_3, var_1.currentweapon.startammo, 1 );
    }

    if ( var_1 scripts\mp\utility\perk::_hasperk( "specialty_br_armorscavenger" ) )
    {
        var_3 = getitemdroporiginandangles( var_0, self.origin, self.angles, self );
        spawnpickup( "Armor_Plate", var_3, 1, 1 );
    }

    if ( var_1 scripts\mp\utility\perk::_hasperk( "specialty_br_medicscavenger" ) )
    {
        var_3 = getitemdroporiginandangles( var_0, self.origin, self.angles, self );
        spawnpickup( "First_Aid", var_3, 1, 1 );
    }

    if ( var_1 scripts\mp\utility\perk::_hasperk( "specialty_br_plunderscavenger" ) )
        scripts\mp\gametypes\br_plunder.gsc::dropplunderbyrarity( 50, var_0 );
}

heli_group_nextspawntime( var_0 )
{
    if ( scripts\mp\gametypes\br_public.gsc::obj_ow_atvs_spawned() )
    {
        var_1 = getitemdroporiginandangles( var_0, self.origin, self.angles, self );
        spawnpickup( "brloot_plate_pouch", var_1 );
        _id_11A2D();
    }
}

heli_bosses( var_0 )
{
    if ( scripts\mp\gametypes\br_public.gsc::obj_a_behavior() )
    {
        var_1 = getitemdroporiginandangles( var_0, self.origin, self.angles, self );
        spawnpickup( self.ai_hold_wake_behavior, var_1 );
        _id_11A15();
    }
}

heli_hover_between_points( var_0 )
{
    if ( scripts\mp\gametypes\br_public.gsc::obj_room_fire_06() )
    {
        var_1 = getitemdroporiginandangles( var_0, self.origin, self.angles, self );
        spawnpickup( "brloot_self_revive", var_1 );
        _id_11A33();
    }
}

heli_counter( var_0, var_1, var_2, var_3 )
{
    var_4 = istrue( var_3 ) && isdefined( var_0 );

    if ( var_4 )
    {
        var_5 = undefined;

        if ( istrue( var_2 ) )
            var_5 = scripts\mp\gametypes\br_armory_kiosk.gsc::mark_location();

        var_6 = playersetattractiontime();
        var_7 = getitemdroporiginandangles( var_6, self.origin, self.angles, self, var_5 );
        spawnpickup( var_0, var_7, var_1 );
    }
}

heliextractwait( var_0 )
{
    if ( scripts\mp\gametypes\br_public.gsc::obj_room_fire_08() )
    {
        if ( level.br_pickups.heligotoplunderrepository )
        {
            var_1 = getitemdroporiginandangles( var_0, self.origin, self.angles, self );
            spawnpickup( "brloot_specialist_bonus", var_1 );
        }

        _id_11A3A();
    }
}

heli_rpg_enemy_think( var_0 )
{
    if ( isdefined( level.init_cp_execution ) && isdefined( level.init_cp_execution.radio ) && isdefined( level.init_cp_execution.radio.owner ) && level.init_cp_execution.radio.owner == self )
        thread scripts\mp\gametypes\br_alt_mode_escape.gsc::heli_rpg_enemy_think( var_0 );
    else
        thread scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "onDropExfilRadio", var_0 );
}

helihint_activate()
{
    if ( isdefined( level._id_11ADD ) && isdefined( level._id_11ADD._id_12607 ) && isdefined( level._id_11ADD._id_12607.owner ) && level._id_11ADD._id_12607.owner == self )
        thread scripts\mp\gametypes\br_gametype_reveal_2.gsc::helihint_activate();
}

ispickupstackable( var_0 )
{
    return istrue( level.br_pickups.stackable[var_0] );
}

isitemslotopen()
{
    for ( var_0 = 0; var_0 < 8; var_0++ )
    {
        if ( !isdefined( self.br_inventory_slots[var_0] ) )
            return 1;
    }

    return 0;
}

isitemfull( var_0, var_1 )
{
    return var_1 + var_0.count > var_0.maxcount;
}

canstackpickup( var_0, var_1 )
{
    foreach ( var_3 in self.br_inventory_slots )
    {
        if ( isdefined( var_3.scriptablename ) && var_3.scriptablename == var_0 )
        {
            if ( !isitemfull( var_3, var_1 ) )
                return 1;
        }
    }

    return 0;
}

canslotitem( var_0, var_1 )
{
    if ( ispickupstackable( var_0 ) )
    {
        if ( canstackpickup( var_0, var_1 ) )
            return 1;
    }

    return isitemslotopen();
}

getfirstopenslot()
{
    for ( var_0 = 0; var_0 < 8; var_0++ )
    {
        if ( !isdefined( self.br_inventory_slots[var_0] ) )
            return var_0;
    }

    return -1;
}

pickupitemintoinventory( var_0 )
{
    if ( ispickupstackable( var_0.scriptablename ) )
    {
        if ( canstackpickup( var_0.scriptablename, var_0.count ) )
        {
            foreach ( var_3, var_2 in self.br_inventory_slots )
            {
                if ( isdefined( var_2.scriptablename ) && var_2.scriptablename == var_0.scriptablename )
                {
                    if ( !isitemfull( var_2, var_0.count ) )
                    {
                        var_2.count = var_2.count + var_0.count;
                        var_2.count = int( min( var_2.count, var_0.maxcount ) );
                        return;
                    }
                }
            }
        }
    }

    var_4 = getfirstopenslot();

    if ( var_4 == -1 )
        return;

    self.br_inventory_slots[var_4] = var_0;
}

dropitemfrominventory( var_0 )
{
    if ( isdefined( self.br_inventory_slots[var_0] ) )
    {
        var_1 = self.br_inventory_slots[var_0];
        var_2 = maphint_computerscriptableused( self.origin + level.br_pickups.br_dropoffsets[0], self.angles );
        var_3 = spawnpickup( var_1.scriptablename, var_2, var_1.count );

        if ( isdefined( var_1.armorhealth ) )
            var_3.armorhealth = var_1.armorhealth;
        else if ( isdefined( var_1.helmethealth ) )
            var_3.helmethealth = var_1.helmethealth;
        else if ( isdefined( var_1.gasmaskhealth ) )
            var_3.gasmaskhealth = var_1.gasmaskhealth;

        scripts\mp\gametypes\br_analytics.gsc::branalytics_lootdrop( self, var_1.scriptablename );
        scripts\mp\gametypes\br_public.gsc::removeitemfrominventory( var_0 );
    }
}

useitemfrominventory( var_0 )
{
    if ( isdefined( self.br_inventory_slots[var_0] ) )
        tryuseitemfrominventory( self.br_inventory_slots[var_0], var_0 );
    else
    {

    }
}

vehicle_collision_ignorefuturemultievent( var_0 )
{
    self endon( "disconnect" );
    self notify( "try_use_heal_slot" );

    if ( scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "armor" ) )
        return;

    if ( !isalive( self ) || scripts\mp\utility\player::isusingremote() || istrue( self.isdeploying ) || self.br_armorhealth >= self.br_maxarmorhealth )
        return;

    var_1 = self.equipment["health"];
    var_2 = scripts\mp\equipment::getequipmentslotammo( "health" );
    var_3 = self.br_maxarmorhealth;
    var_4 = 1;

    if ( isdefined( var_3 ) && var_0 )
        var_4 = var_3;

    if ( istrue( self.playlandingbreath ) )
    {
        if ( isdefined( self.bot_gametype_allied_defenders_for_team ) && delay_explosion_fx() )
            self.bot_gametype_allied_defenders_for_team = self.bot_gametype_allied_defenders_for_team + var_4;
    }
    else
    {
        self.bot_gametype_allied_defenders_for_team = var_4;

        if ( isdefined( var_1 ) && isdefined( var_2 ) && var_2 > 0 )
            thread scripts\mp\equipment\bandage::usequickslothealitem( var_1, var_2 );
    }
}

delay_explosion_fx()
{
    return !scripts\engine\utility::is_player_gamepad_enabled();
}

takegenericgrenadepickup( var_0 )
{
    var_1 = scripts\mp\equipment::getequipmentslotammo( "primary" );

    if ( isdefined( var_1 ) && var_1 < 2 )
        scripts\mp\equipment::incrementequipmentslotammo( "primary" );

    var_1 = scripts\mp\equipment::getequipmentslotammo( "secondary" );

    if ( isdefined( var_1 ) && var_1 < 2 )
        scripts\mp\equipment::incrementequipmentslotammo( "secondary" );
}

trypickupitemfroment( var_0 )
{
    if ( canslotitem( var_0.scriptablename, var_0.count ) )
        pickupitemintoinventory( var_0 );
    else
    {
        self iprintlnbold( "No room in inventory" );
        self playlocalsound( "br_pickup_deny" );
    }
}

trypickupitem( var_0, var_1 )
{
    if ( !isdefined( var_0 ) || !isdefined( level.br_pickups.maxcounts[var_0] ) || !isdefined( level.br_pickups.stackable[var_0] ) )
        return;

    var_2 = spawnstruct();
    var_2.scriptablename = var_0;
    var_2.count = var_1;
    var_2.maxcount = level.br_pickups.maxcounts[var_0];
    var_2.stackable = level.br_pickups.stackable[var_0];
    var_2.itemtype = level.br_pickups.br_itemtype[var_0];

    if ( canslotitem( var_2.scriptablename, var_2.count ) )
        pickupitemintoinventory( var_2 );
    else
    {
        self iprintlnbold( "No room in inventory" );
        self playlocalsound( "br_pickup_deny" );
    }
}

tryequipmentfrominventory( var_0, var_1 )
{
    var_2 = level.br_pickups.br_equipname[var_0.scriptablename];
    var_3 = level.equipment.table[var_2].defaultslot;

    if ( isdefined( self.equipment[var_3] ) && self.equipment[var_3] == var_2 )
    {
        if ( equipmentslothasroom( var_2, var_3 ) )
        {
            scripts\mp\equipment::incrementequipmentslotammo( var_3, level.br_pickups.counts[var_0.scriptablename] );
            self.br_inventory_slots[var_1] = undefined;
        }
    }
    else if ( !isdefined( self.equipment[var_3] ) || scripts\mp\equipment::getequipmentslotammo( var_3 ) == 0 )
    {
        scripts\mp\equipment::giveequipment( var_2, var_3 );
        scripts\mp\equipment::setequipmentslotammo( var_3, var_0.count );
        self.br_inventory_slots[var_1] = undefined;
    }
    else
    {
        var_4 = self.equipment[var_3];
        var_5 = scripts\mp\equipment::getequipmentslotammo( var_3 );
        scripts\mp\equipment::giveequipment( var_2, var_3 );
        scripts\mp\equipment::setequipmentslotammo( var_3, var_0.count );
        self.br_inventory_slots[var_1] = undefined;
        var_6 = level.br_pickups.br_equipnametoscriptable[var_4];
        trypickupitem( var_6, var_5 );
    }
}

droparmor( var_0, var_1 )
{
    var_2 = maphint_computerscriptableused( self.origin + level.br_pickups.br_dropoffsets[0], self.angles );
    var_3 = spawnpickup( var_0, var_2 );
    var_3.count = 1;
    var_3.helmethealth = 0;
    var_3.armorhealth = 0;
    var_3.gasmaskhealth = 0;

    if ( issubstr( var_0, "helmet" ) )
    {
        var_3.helmethealth = var_1;

        if ( var_0 == "brloot_armor_helmet_3" )
            scripts\mp\utility\perk::removeperk( "specialty_stun_resistance" );
    }

    scripts\mp\gametypes\br_analytics.gsc::branalytics_lootdrop( self, var_0 );
}

trydroparmorfornewarmor( var_0 )
{
    if ( scripts\mp\gametypes\br_public.gsc::ishelmet( var_0 ) )
    {
        if ( isdefined( self.br_helmetlevel ) )
        {
            var_1 = scripts\mp\gametypes\br_armor.gsc::helmetitemtypeforlevel( self.br_helmetlevel );

            if ( isdefined( var_1 ) )
                droparmor( var_1, self.br_helmethealth );
        }
    }
}

tryequiparmor( var_0, var_1 )
{
    if ( isdefined( var_1 ) )
        self.br_inventory_slots[var_1] = undefined;

    trydroparmorfornewarmor( var_0.scriptablename );

    if ( var_0.scriptablename == "brloot_armor_helmet_1" )
        scripts\mp\gametypes\br_armor.gsc::takehelmet( var_0, 1 );
    else if ( var_0.scriptablename == "brloot_armor_helmet_2" )
        scripts\mp\gametypes\br_armor.gsc::takehelmet( var_0, 2 );
    else if ( var_0.scriptablename == "brloot_armor_helmet_3" )
        scripts\mp\gametypes\br_armor.gsc::takehelmet( var_0, 3 );
}

tryuseitemfrominventory( var_0, var_1 )
{
    if ( scripts\mp\gametypes\br_public.gsc::isequipment( var_0.scriptablename ) )
        tryequipmentfrominventory( var_0, var_1 );
}

initpickupusability()
{
    scripts\common\interactive::interactive_addusedcallback( ::brpickupsusecallback, "br_pickups" );
}

brpickupsusecallback( var_0, var_1 )
{
    var_2 = var_1 cantakepickup( var_0 );
    var_1 showuseresultsfeedback( var_2 );

    if ( var_2 != 1 )
        return;

    var_1 onusecompleted( var_0 );
    gethelinextgroupafterwait( var_0 );

    if ( var_0 isscriptable() )
        var_0 freescriptable();
    else
        var_0 delete();
}

nuke_core_time_warning_nag( var_0, var_1 )
{
    if ( isdefined( self.equipment[var_1] ) && scripts\mp\equipment::getequipmentslotammo( var_1 ) > 0 )
    {
        var_2 = playersetattractiontime();
        dropequipmentinslot( var_2, var_1 );
    }

    scripts\mp\equipment::giveequipment( var_0, var_1 );
    scripts\mp\equipment::setequipmentammo( var_0, 1 );
}

_id_12594( var_0 )
{
    if ( scripts\mp\utility\game::getgametype() == "br" && !level.allowsupers )
        var_0 scripts\mp\equipment::takeequipment( "super" );
}

empty_vo_func()
{
    if ( istrue( self.gasmaskequipped ) )
    {
        self detach( "hat_child_hadir_gas_mask_wm_br", "j_head" );
        self.gasmaskequipped = 0;
    }

    self.gasmaskswapinprogress = 0;
    empty_function();
}

empty_function()
{
    self.kingslayerdeaths = undefined;
    self.gasmaskhealth = undefined;
    self.kioskfixupproneplayers = undefined;
    self setclientomnvar( "ui_gas_mask", 0 );
    self setclientomnvar( "ui_head_equip_class", 0 );
    self setclientomnvar( "ui_gasmask_damage", 0 );
}

mine_caves_turret_clip_remove_on_death( var_0 )
{
    var_1 = "brloot_armor_plate";
    var_2 = level.br_pickups.br_equipname[var_1];
    var_3 = level.equipment.table[var_2].defaultslot;

    if ( isdefined( self.equipment[var_3] ) )
    {
        var_4 = scripts\mp\equipment::getequipmentslotammo( var_3 );

        if ( var_4 > 0 )
        {
            if ( istrue( var_0 ) )
                return var_4;
            else
                return 1;
        }
    }

    return 0;
}

mine_caves_turret_2_support( var_0, var_1 )
{
    var_2 = self.br_ammo[var_0];
    var_3 = level.br_ammo_clipsize[var_0];

    if ( !isdefined( var_2 ) || !isdefined( var_3 ) )
        return 0;

    if ( istrue( var_1 ) )
        return int( var_2 );

    return int( min( var_3, var_2 ) );
}

mine_caves_turret_damage_feedback( var_0 )
{
    var_1 = 5;

    if ( istrue( var_0 ) )
        return int( self.plundercount );

    return int( min( self.plundercount, var_1 ) );
}

mine_caves_turret_2_support_internal( var_0 )
{
    switch ( var_0 )
    {
        case 3:
            return "brloot_ammo_762";
        case 5:
            return "brloot_ammo_919";
        case 7:
            return "brloot_ammo_50cal";
        case 4:
            return "brloot_ammo_12g";
        case 6:
            return "brloot_ammo_rocket";
        default:
    }
}

mine_caves_turret_op( var_0 )
{
    var_1 = self.lastdroppableweaponobj;
    var_2 = createheadicon( var_1 );
    return var_2;
}

mine_caves_turret_config( var_0, var_1 )
{
    var_2 = 1;
    var_3 = 0;
    var_4 = 0;
    var_5 = 0;
    var_6 = undefined;

    switch ( var_0 )
    {
        case 2:
            var_3 = mine_caves_turret_clip_remove_on_death( var_1 );
            var_2 = var_3 > 0;
            break;
        case 7:
        case 6:
        case 5:
        case 4:
        case 3:
            var_7 = mine_caves_turret_2_support_internal( var_0 );
            var_3 = mine_caves_turret_2_support( var_7, var_1 );
            var_2 = var_3 > 0;
            break;
        case 0:
            if ( istrue( self.iszombie ) )
            {
                var_2 = 0;
                break;
            }

            var_3 = mine_caves_turret_damage_feedback( var_1 );
            var_2 = var_3 > 0;
            break;
        case 1:
            var_3 = scripts\engine\utility::ter_op( istrue( self.hasrespawntoken ), 1, 0 );
            var_2 = var_3 > 0;
            break;
        case 8:
            var_3 = scripts\engine\utility::ter_op( istrue( self.obj_room_fire_06 ), 1, 0 );
            var_2 = var_3 > 0;
            break;
        case 9:
            var_8 = self.lastdroppableweaponobj;

            if ( !isdefined( var_8 ) || nullweapon( var_8 ) || !self hasweapon( var_8 ) || var_8 == getcompleteweaponname( "iw8_fists_mp" ) || self isskydiving() || istrue( self.usingascender ) )
                var_2 = 0;
            else
            {
                var_3 = self getweaponammoclip( var_8 );
                var_4 = self getweaponammoclip( var_8, "left" );

                if ( var_8.hasalternate )
                {
                    var_9 = var_8 getaltweapon();

                    if ( !scripts\mp\gametypes\br_weapons.gsc::checkformatchend( var_8, var_9 ) )
                        var_5 = self getweaponammoclip( var_9 );
                }

                var_6 = var_8;
            }

            break;
        default:
            var_2 = 0;
            break;
    }

    return [ var_2, var_3, var_4, var_5, var_6 ];
}

watchalleyplayerexit( var_0, var_1 )
{
    var_2 = "brloot_armor_plate";
    var_3 = level.br_pickups.br_equipname[var_2];
    var_4 = level.equipment.table[var_3].defaultslot;
    scripts\mp\equipment::decrementequipmentslotammo( var_4, var_1 );

    if ( istrue( self.playlandingbreath ) )
    {
        var_5 = scripts\mp\equipment::getcurrentequipment( var_4 );
        var_6 = scripts\mp\equipment::getequipmentammo( var_5 );

        if ( var_6 < 1 )
            self notify( "br_try_armor_cancel" );
    }
}

watchallcrateusabilityfast( var_0, var_1 )
{
    var_2 = mine_caves_turret_2_support_internal( var_0 );
    scripts\mp\gametypes\br_weapons.gsc::br_ammo_take_type( self, var_2, var_1 );
}

watchbombuseinternal( var_0, var_1 )
{
    scripts\mp\gametypes\br_plunder.gsc::updateondamagepredamagemodrelics( var_1 );
}

watchboxplayerexit( var_0, var_1 )
{
    removerespawntoken();
}

watchbrc130aidropcrateanimend( var_0, var_1 )
{
    _id_11A33();
}

watchbrc130airdropchuteanimend( var_0, var_1 )
{
    var_2 = self.lastdroppableweaponobj;
    var_3 = getcompleteweaponname( "iw8_fists_mp" );
    var_4 = var_3;
    var_5 = self getweaponslistprimaries();

    foreach ( var_7 in var_5 )
    {
        if ( var_7.inventorytype != "primary" )
            continue;

        if ( var_7 != var_3 && var_7 != var_2 && !scripts\mp\utility\weapon::putinlaststand( var_7 ) )
        {
            var_4 = var_7;
            break;
        }
    }

    if ( !scripts\mp\riotshield::isriotshield( var_2 ) )
    {
        var_9 = self getweaponammostock( var_2 );
        var_10 = scripts\mp\gametypes\br_weapons.gsc::br_ammo_type_for_weapon( var_2 );

        if ( isdefined( var_10 ) )
            self.br_ammo[var_10] = var_9;
    }

    if ( scripts\mp\utility\weapon::qm_intro_dialogue( var_2 ) )
        self notify( "dropped_minigun" );

    scripts\cp_mp\utility\inventory_utility::_takeweapon( var_2 );
    scripts\mp\gametypes\br_public.gsc::usb_tape_animation_test();

    if ( !self hasweapon( var_3 ) )
        self giveweapon( var_3 );

    scripts\mp\gametypes\br_weapons.gsc::br_ammo_update_weapons( self );
    self switchtoweaponimmediate( var_4 );
    scripts\mp\javelin::redbuttonused();
    canceloffhandads();
}

watchbombuse( var_0, var_1 )
{
    switch ( var_0 )
    {
        case 2:
            watchalleyplayerexit( var_0, var_1 );
            break;
        case 7:
        case 6:
        case 5:
        case 4:
        case 3:
            watchallcrateusabilityfast( var_0, var_1 );
            break;
        case 0:
            watchbombuseinternal( var_0, var_1 );
            break;
        case 1:
            watchboxplayerexit( var_0, var_1 );
            break;
        case 8:
            watchbrc130aidropcrateanimend( var_0, var_1 );
            break;
        case 9:
            watchbrc130airdropchuteanimend( var_0, var_1 );
            break;
        default:
            return;
    }
}

watch_minigun_ammo_depleted( var_0, var_1 )
{
    switch ( var_0 )
    {
        case 2:
            return "brloot_armor_plate";
        case 7:
        case 6:
        case 5:
        case 4:
        case 3:
            return mine_caves_turret_2_support_internal( var_0 );
        case 0:
            for ( var_2 = level.br_plunder.warp_player_debug.size - 1; var_2 >= 0; var_2-- )
            {
                if ( var_1 > level.br_plunder.warp_player_debug[var_2] )
                    return level.br_plunder.names[var_2];
            }

            return level.br_plunder.names[0];
        case 8:
            return "brloot_self_revive";
        case 1:
            return "brloot_respawn_token";
        case 9:
            return mine_caves_turret_op( var_0 );
        default:
    }
}

watch_for_usb_notetrack()
{
    var_0 = 120;
    self notify( "quickDropCleanupCache" );
    self endon( "quickDropCleanupCache" );
    wait( var_0 );
    self.watch_for_second_input = undefined;
}

watch_for_players_ledgespawners( var_0, var_1, var_2, var_3, var_4 )
{
    if ( !isdefined( self.watch_for_second_input ) )
        self.watch_for_second_input = [];

    var_5 = spawnstruct();
    var_5.recondronetracecontents = var_0;
    var_5.slot = var_1;
    var_5.ent = var_2;
    var_5.helidestroyvehiclestouchnotify = var_3;
    var_5.heli_can_shoot = var_4;
    var_5.updatefobindanger = self.origin;
    var_5.vehicle_compass_infect_shouldbevisibletoplayer = self.angles[1];
    self.watch_for_second_input[self.watch_for_second_input.size] = var_5;
    thread watch_for_usb_notetrack();
}

watch_for_total_counts_below_num( var_0 )
{
    var_1 = 60.0;
    var_2 = squared( var_1 );
    var_3 = 45.0;
    var_4 = distancesquared( self.origin, var_0.updatefobindanger );

    if ( var_4 > var_2 )
        return 0;

    var_5 = abs( self.angles[1] - var_0.vehicle_compass_infect_shouldbevisibletoplayer );

    if ( var_5 > var_3 )
        return 0;

    return 1;
}

watch_for_usb_notetrack_switchoff( var_0 )
{
    if ( !isdefined( self.watch_for_second_input ) )
        return;

    foreach ( var_2 in self.watch_for_second_input )
    {
        if ( isdefined( var_2.ent ) && var_2.recondronetracecontents == var_0 )
        {
            if ( !watch_for_total_counts_below_num( var_2 ) )
                continue;

            return var_2;
        }
    }
}

watch_for_super_ammo_depleted()
{
    if ( !isdefined( self.watch_for_second_input ) )
        return 0;

    var_0 = [];

    foreach ( var_2 in self.watch_for_second_input )
    {
        if ( isdefined( var_2.ent ) )
        {
            if ( !watch_for_total_counts_below_num( var_2 ) )
                continue;

            var_0[var_2.slot] = 1;
        }
    }

    var_4 = undefined;
    var_5 = 0;
    var_6 = 0;
    var_7 = [ 0, 13, 1 ];

    for (;;)
    {
        var_4 = var_6 * 14 + var_7[var_5];

        if ( !istrue( var_0[var_4] ) )
            break;

        var_5++;

        if ( var_5 >= var_7.size )
        {
            var_5 = 0;
            var_6++;
        }
    }

    return var_4;
}

watchaddminigunrestrictions( var_0, var_1, var_2 )
{
    var_3 = undefined;

    switch ( var_0 )
    {
        case 2:
            var_3 = "br_inventory_drop_armor";
            break;
        case 7:
        case 6:
        case 5:
        case 4:
        case 3:
            var_3 = "br_inventory_drop_ammo";
            break;
        case 0:
            if ( var_2 == "brloot_plunder_cash_uncommon_1" )
                var_3 = "br_inventory_drop_plunder_sm";
            else if ( var_2 == "brloot_plunder_cash_uncommon_2" )
                var_3 = "br_inventory_drop_plunder_sm";
            else if ( var_2 == "brloot_plunder_cash_uncommon_3" )
                var_3 = "br_inventory_drop_plunder_sm";
            else if ( var_2 == "brloot_plunder_cash_rare_1" )
                var_3 = "br_inventory_drop_plunder_med";
            else if ( var_2 == "brloot_plunder_cash_rare_2" )
                var_3 = "br_inventory_drop_plunder_med";
            else if ( var_2 == "brloot_plunder_cash_epic_1" )
                var_3 = "br_inventory_drop_plunder_lrg";
            else if ( var_2 == "brloot_plunder_cash_epic_2" )
                var_3 = "br_inventory_drop_plunder_lrg";
            else if ( var_2 == "brloot_plunder_cash_legendary_1" )
                var_3 = "br_inventory_drop_plunder_extra_lrg";
            else
                var_3 = "br_inventory_drop_plunder";

            break;
        case 1:
            break;
        case 8:
            var_3 = "br_inventory_drop_self_revive";
            break;
        case 9:
            var_3 = "br_inventory_drop_weap";
            break;
        default:
    }

    if ( isdefined( var_3 ) )
        playsoundatpos( var_1, var_3 );
}

watch_for_players_regrouping_to_plane( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = watch_for_usb_notetrack_switchoff( var_0 );

    if ( isdefined( var_5 ) )
    {
        var_6 = var_5.ent;
        var_7 = var_5.helidestroyvehiclestouchnotify;
        var_8 = var_5.heli_can_shoot;
        var_9 = see_air_killstreak_dist( var_6 );
        var_10 = see_killstreak_dist( var_6 );
        var_11 = see_equipment_dist( var_6 );

        if ( !ispickupstackable( var_5.ent.type ) && !issubstr( var_5.ent.type, "_cash" ) )
            return 0;

        var_12 = undefined;

        if ( isdefined( var_6.movetowithpause ) )
            var_12 = var_6.movetowithpause;

        var_13 = var_9 + var_1;
        var_14 = var_10 + var_2;
        var_15 = var_11 + var_3;
        var_16 = watch_minigun_ammo_depleted( var_0, var_13 );
        var_17 = getscriptablereservedremaining( var_7 + ( 0, 0, 12 ), var_7 );
        var_18 = maphint_computerscriptableused( var_7, var_8, var_17, var_12 );
        var_19 = spawnpickup( var_16, var_18, var_13, 1, var_4, 0, var_14, var_15 );
        scripts\mp\gametypes\br_analytics.gsc::branalytics_lootdrop( self, var_16, undefined, var_1 );

        if ( isdefined( var_4 ) )
            level.supportbox_watch_flight scripts\mp\trials\trial_sniper::deactivate_target( var_19, self, var_4 );

        watchaddminigunrestrictions( var_0, var_7, var_16 );
        var_5.ent = var_19;
        thread watch_for_usb_notetrack();
        gethelinextgroupafterwait( var_6 );

        if ( isent( var_6 ) )
            var_6 delete();
        else
            var_6 freescriptable();

        return 1;
    }

    return 0;
}

watch_rpg_use( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = watch_minigun_ammo_depleted( var_0, var_1 );

    if ( !isdefined( var_5 ) )
        return;

    var_6 = watch_for_super_ammo_depleted();
    var_7 = playersetattractiontime();
    var_7.heli_lookat_monitor = var_6;
    var_8 = getitemdroporiginandangles( var_7, self.origin, self.angles, self );
    var_9 = scripts\mp\gametypes\br_extract_quest.gsc::initbrmechanics( var_4 );
    var_10 = delay_give_lethal_grenade( var_4 );

    if ( !var_9 && var_10 )
    {
        var_11 = spawnpickup( var_5, var_8, var_1, 1, var_4, 0, var_2, var_3 );
        watch_for_players_ledgespawners( var_0, var_6, var_11, var_8.origin, var_8.angles );
        scripts\mp\gametypes\br_analytics.gsc::branalytics_lootdrop( self, var_5, undefined, var_1 );

        if ( isdefined( var_4 ) )
            level.supportbox_watch_flight scripts\mp\trials\trial_sniper::deactivate_target( var_11, self, var_4 );
    }

    watchaddminigunrestrictions( var_0, var_8.origin, var_5 );
}

delay_give_lethal_grenade( var_0 )
{
    if ( scripts\mp\utility\weapon::propremovefromlocation( var_0 ) )
        return 0;

    return 1;
}

watch_players_entering_super( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "death" );
    nuke_vault_suicidebomber_internal( var_0 );
    [var_2, var_3, var_4, var_5, var_6] = mine_caves_turret_config( var_0 );

    if ( !var_2 )
        return;

    watchbombuse( var_0, var_3 );
    scripts\mp\class::disableclassswapallowed();
    var_7 = watch_for_players_regrouping_to_plane( var_0, var_3, var_4, var_5, var_6 );

    if ( var_7 )
        return;

    watch_rpg_use( var_0, var_3, var_4, var_5, var_6 );
}

watch_for_players_touching_ground( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "death" );
    nuke_vault_suicidebomber_internal( var_0 );
    var_1 = 1;
    [var_3, var_4, var_5, var_6, var_7] = mine_caves_turret_config( var_0, 1 );

    if ( !var_3 )
        return;

    watchbombuse( var_0, var_4 );
    scripts\mp\class::disableclassswapallowed();
    var_8 = watch_for_players_regrouping_to_plane( var_0, var_4, var_5, var_6, var_7 );

    if ( !var_8 )
        watch_rpg_use( var_0, var_4, var_5, var_6, var_7 );
}

disableplayerrewards( var_0 )
{
    switch ( var_0 )
    {
        case 7:
        case 6:
        case 5:
        case 4:
        case 3:
            return 1;
        default:
            return 0;
    }
}

nuke_vault_suicidebomber_internal( var_0 )
{
    if ( disableplayerrewards( var_0 ) )
    {
        var_1 = undefined;

        while ( self isreloading() )
        {
            if ( !istrue( var_1 ) )
            {
                var_1 = 1;
                self disableautoreload();
            }

            self cancelreload();
            waitframe();
        }

        if ( istrue( var_1 ) )
            self enableautoreload();

        waitframe();
    }
}

dangercircletick( var_0, var_1 )
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "loot" ) )
        return;

    var_2 = var_1 * var_1;
    var_3 = level.br_circle.circleindex;

    if ( var_3 > level.br_circle.damagetick.size - 1 )
        var_3 = level.br_circle.damagetick.size - 1;

    var_4 = level.br_circle.damagetick[var_3];

    if ( isdefined( level.circledamagemultiplier ) )
        var_4 = var_4 * level.circledamagemultiplier;

    level.br_pickups.helidrivabledeathall = scripts\engine\utility::array_removeundefined( level.br_pickups.helidrivabledeathall );

    for ( var_5 = level.br_pickups.helidrivabledeathall.size - 1; var_5 >= 0; var_5-- )
    {
        var_6 = level.br_pickups.helidrivabledeathall[var_5];

        if ( distance2dsquared( var_6.origin, var_0 ) > var_2 )
        {
            var_7 = var_6.count;
            var_8 = int( var_7 - var_4 );

            if ( var_8 <= 0 )
            {
                var_6 setscriptablepartstate( var_6.type, "death" );
                var_6 getcorpstablestate( 1.0 );
                level thread getheliflyheight( var_5 );
            }
            else if ( var_6 scripts\cp_mp\gasmask::getquickdropammotype( var_7, var_8 ) )
            {
                var_9 = getscriptablereservedremaining( var_6.origin + ( 0, 0, 12 ), var_6.angles );
                var_10 = maphint_computerscriptableused( var_6.origin, var_6.angles, var_9 );
                var_11 = var_6.type;
                var_6 getcoremapdropzones();
                var_12 = spawnpickup( var_11, var_10, var_8, 1, undefined, 0 );
            }
            else
            {
                var_6 setscriptablepartstate( var_6.type, "damage" );
                var_6.count = var_8;
            }
        }
    }
}

killstreakweaponfiredcontinue()
{
    level.br_pickups.helidrivabledeathall[level.br_pickups.helidrivabledeathall.size] = self;
}

getheliflyheight( var_0 )
{
    waittillframeend;

    if ( isdefined( level.br_pickups.helidrivabledeathall ) )
        level.br_pickups.helidrivabledeathall[var_0] = undefined;
}

playerzombieisingas()
{
    var_0 = level.br_pickups;
    var_0.scriptables = [];
    var_0._id_11CFA = 0;
    var_0._id_11CF8 = 0;
    var_0._id_11CF9 = matchdata_logaward();
    var_0._id_11CF7 = getdvarint( "scr_br_pickupScriptablesCleanupBatchSize", 10 );
}

matchdata_logaward()
{
    var_0 = _func_0430();
    var_1 = getdvarint( "scr_br_loot_override", 0 );

    if ( var_1 > 0 && var_1 < var_0 )
        var_2 = var_1;
    else
    {
        var_3 = getdvarint( "OOTQKOTRM", 150 );
        var_4 = getdvarint( "scr_br_loot_player_multi", 5 );
        var_2 = var_3 * var_4;
    }

    if ( var_2 > var_0 )
        var_2 = int( var_0 / 2 );

    return var_2;
}

_id_11959( var_0 )
{
    var_1 = level.br_pickups._id_11CF8;
    var_0.combo_duration_calculate = var_1;
    level.br_pickups.scriptables[var_1] = var_0;
    level.br_pickups._id_11CF8++;
}

gethelinextgroupafterwait( var_0 )
{
    level.br_pickups.scriptables[var_0.combo_duration_calculate] = undefined;
    var_0.combo_duration_calculate = undefined;
}

ending_player_disconnect_thread()
{
    var_0 = level.br_pickups;

    if ( var_0.scriptables.size < var_0._id_11CF9 && enabledismembermenttag() > 0 )
        return;

    var_1 = 0;

    for ( var_2 = var_0._id_11CFA; var_2 < var_0._id_11CF8; var_2++ )
    {
        if ( var_1 == var_0._id_11CF7 )
            break;

        var_3 = var_0.scriptables[var_2];

        if ( isdefined( var_3 ) )
        {
            if ( istrue( var_3.forcegivekillstreak ) )
                continue;

            var_0.scriptables[var_2] = undefined;

            if ( isent( var_3 ) )
                var_3 delete();
            else
                var_3 freescriptable();

            var_1++;
        }
        else
            var_0.scriptables[var_2] = undefined;

        var_0._id_11CFA++;
    }
}

getcoremapdropzones()
{
    gethelinextgroupafterwait( self );

    if ( isent( self ) )
        self delete();
    else
        self freescriptable();
}

getcorpstablestate( var_0 )
{
    thread getcost( var_0 );
}

getcost( var_0 )
{
    self endon( "death" );
    wait( var_0 );

    if ( isdefined( self ) )
        getcoremapdropzones();
}

_id_1195E( var_0, var_1 )
{
    while ( !isdefined( level.br_pickups ) )
        waitframe();

    level.br_pickups._id_12A41["uniqueLootItem_" + var_0] = var_1;
}

waitandspawnprops( var_0, var_1 )
{
    if ( isdefined( [[ level.br_pickups._id_12A41[var_0] ]]( var_1 ) ) )
        return;
    else
    {

    }
}

set_force_aitype_rpg()
{
    thread _id_12F0A();
    thread _id_12F5B();
    thread _id_12F56();
}

bonus_target()
{
    self.playerstreakspeedscale = scripts\mp\juggernaut::jugg_getmovespeedscalar();
    scripts\mp\weapons::updatemovespeedscale();
    scripts\mp\playeractions::allowactionset( "fakeJugg", 0 );

    if ( !istrue( level.give_killstreak_cluster ) )
    {
        scripts\common\utility::allow_mount_top( 0, "fakeJugg" );
        scripts\common\utility::allow_mount_side( 0, "fakeJugg" );
    }
}

_id_11A29()
{
    self.playerstreakspeedscale = undefined;
    scripts\mp\weapons::updatemovespeedscale();
    scripts\mp\playeractions::allowactionset( "fakeJugg", 1 );

    if ( !istrue( level.give_killstreak_cluster ) )
    {
        scripts\common\utility::allow_mount_top( 1, "fakeJugg" );
        scripts\common\utility::allow_mount_side( 1, "fakeJugg" );
    }
}

_id_12F0A()
{
    self endon( "death_or_disconnect" );
    self endon( "dropped_minigun" );
    self endon( "juggernaut_start" );
    level endon( "game_ended" );

    for (;;)
    {
        self waittill( "switched_to_minigun" );
        bonus_target();
    }
}

_id_12F5B()
{
    self endon( "death_or_disconnect" );
    self endon( "juggernaut_start" );
    level endon( "game_ended" );

    for (;;)
    {
        var_0 = scripts\engine\utility::_id_12E4E( "switched_from_minigun", "dropped_minigun" );

        if ( isdefined( var_0 ) )
        {
            _id_11A29();

            if ( var_0 == "dropped_minigun" )
                break;
        }
    }
}

_id_12F56()
{
    self endon( "death_or_disconnect" );
    self endon( "dropped_minigun" );
    self endon( "juggernaut_start" );
    level endon( "game_ended" );
    var_0 = 0;

    for (;;)
    {
        if ( !scripts\mp\utility\weapon::qm_intro_dialogue( self getcurrentweapon() ) )
        {
            if ( istrue( var_0 ) )
            {
                var_0 = 0;
                self notify( "switched_from_minigun" );
            }
        }
        else if ( !istrue( var_0 ) )
        {
            var_0 = 1;
            self notify( "switched_to_minigun" );
        }

        waitframe();
    }
}

gun_create_fake( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( !isdefined( self.streakdata ) )
        return 0;

    if ( !isdefined( self.streakdata.streaks ) || !isdefined( self.streakdata.streaks[1] ) )
        return 0;

    var_1 = self.streakdata.streaks[1];

    if ( !isdefined( var_0.streakname ) || !isdefined( var_1.streakname ) || var_0.streakname != var_1.streakname )
        return 0;

    if ( !isdefined( var_0.id ) || !isdefined( var_1.uniqueid ) || var_0.id != var_1.uniqueid )
        return 0;

    return 1;
}

_canceloffhandads_internal()
{
    self endon( "death_or_disconnect" );
    self notify( "cancelOffhandADS" );
    self endon( "cancelOffhandADS" );
    self notify( "offhand_ads_off" );
    wait 0.5;
    self notify( "offhand_ads_off" );
}

canceloffhandads()
{
    thread _canceloffhandads_internal();
}
