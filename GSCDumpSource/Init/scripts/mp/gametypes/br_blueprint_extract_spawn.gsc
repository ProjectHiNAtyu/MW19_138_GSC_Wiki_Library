// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level.calloutmarkerping_navigationcancelproximity = undefined;
    level.calloutmarkerping_islootquesttablet = undefined;
    level.calloutmarkerping_ismunitionsbox = undefined;

    if ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "risk" )
    {
        level.calloutmarkerping_navigationcancelproximity = getdvarfloat( "scr_blueprint_dmz_maxPerMatch", 4 );
        level.calloutmarkerping_islootquesttablet = getdvarfloat( "scr_blueprint_dmz_chanceBase", 0.02 );
        level.calloutmarkerping_ismunitionsbox = getdvarfloat( "scr_blueprint_dmz_chancePerContract", 0.0 );
    }
    else
    {
        level.calloutmarkerping_navigationcancelproximity = getdvarfloat( "scr_blueprint_br_maxPerMatch", 4 );
        level.calloutmarkerping_islootquesttablet = getdvarfloat( "scr_blueprint_br_chanceBase", 0.02 );
        level.calloutmarkerping_ismunitionsbox = getdvarfloat( "scr_blueprint_br_chancePerContract", 0.0 );
    }

    level.calloutmarkerping_watchplayerdeathordisconnect = 0;
    level.calloutmarkerping_watchentitydeathorenemydisconnect = level.calloutmarkerping_islootquesttablet;
    level.calloutmarkerping_removeallcalloutsforallplayers = undefined;
    scripts\mp\gametypes\br_pickups.gsc::_id_11953( "brloot_blueprintextract_tablet", ::calloutmarkerping_squadleaderbeaconcreate );
    scripts\mp\gametypes\br_pickups.gsc::_id_11953( "brloot_blueprintextract_tablet_easterevent", ::calloutmarkerping_sendmayday );
}

calloutmarkerping_squadleaderbeaconshouldcreate( var_0 )
{
    if ( !calloutmarkerping_squadleaderbeaconplayerfirstlanded( var_0 ) )
        return undefined;

    if ( level.calloutmarkerping_watchplayerdeathordisconnect >= level.calloutmarkerping_navigationcancelproximity )
        return undefined;

    var_1 = randomfloat( 1 );

    if ( var_1 <= level.calloutmarkerping_watchentitydeathorenemydisconnect )
    {
        level.calloutmarkerping_watchplayerdeathordisconnect = level.calloutmarkerping_watchplayerdeathordisconnect + 1;
        return "brloot_blueprintextract_tablet";
    }
    else
    {
        level.calloutmarkerping_watchentitydeathorenemydisconnect = level.calloutmarkerping_watchentitydeathorenemydisconnect + level.calloutmarkerping_ismunitionsbox;
        return undefined;
    }
}

calloutmarkerping_squadleaderbeaconplayerfirstlanded( var_0 )
{
    if ( scripts\mp\gametypes\br_public.gsc::process_entities_inside_subway_car() )
        return 0;

    if ( scripts\cp_mp\utility\game_utility::isrealismenabled() )
        return 0;

    if ( istrue( level.calloutmarkerpingvo_canplaywithspamavoidance ) )
        return 0;

    if ( isdefined( level.br_circle ) && isdefined( level.br_circle.circleindex ) && isdefined( level.br_level ) && isdefined( level.br_level.br_circleclosetimes ) )
    {
        var_1 = level.br_circle.circleindex;
        var_2 = level.br_level.br_circleclosetimes.size - 1;

        if ( var_2 - var_1 < 4 )
            return 0;
    }

    if ( !scripts\mp\gametypes\br_extract_quest.gsc::initextractionlocations( var_0 ) )
        return 0;

    return 1;
}

calloutmarkerping_removeallcalloutsforplayer( var_0, var_1 )
{
    level.calloutmarkerping_removeallcalloutsforallplayers = var_0;
    level.calloutmarkerping_playteamsoundfx = var_1;
}

_setclientkillstreakavailability( var_0 )
{
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::mine_caves_turret_op_internal( var_0 );
    calloutmarkerping_squadleaderbeaconkillforplayer( var_1 );
    thread calloutmarkerping_requestinventoryslotindex();
    thread calloutmarkerping_removevehiclecalloutonspecialconditions();
}

calloutmarkerping_squadleaderbeaconcreate()
{
    var_0 = scripts\engine\utility::ter_op( getdvarint( "scr_br_alt_mode_bblitz", 0 ), 2, 0 );
    _setclientkillstreakavailability( var_0 );
}

calloutmarkerping_sendmayday()
{
    _setclientkillstreakavailability( 1 );
}

calloutmarkerping_squadleaderbeaconkillforplayer( var_0 )
{
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::mine_caves_runner( var_0 );
    scripts\mp\gametypes\br_pickups.gsc::select_back_two_spawners( self, var_1 );
    self.initialwinningteam = var_0;
}

calloutmarkerping_requestinventoryslotindex()
{
    var_0 = level.calloutmarkerping_removeallcalloutsforallplayers;
    level.calloutmarkerping_removeallcalloutsforallplayers = undefined;
    var_1 = level.calloutmarkerping_playteamsoundfx;
    level.calloutmarkerping_playteamsoundfx = undefined;

    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_1 ) && istrue( var_1.stimmodelattached ) )
        return;

    var_2 = scripts\mp\objidpoolmanager::requestobjectiveid( 1 );

    if ( var_2 != -1 )
    {
        scripts\mp\objidpoolmanager::objective_add_objective( var_2, "invisible", ( 0, 0, 0 ), "ui_mp_br_mapmenu_icon_extraction_objective" );
        scripts\mp\objidpoolmanager::objective_set_play_intro( var_2, 1 );
        scripts\mp\objidpoolmanager::update_objective_setbackground( var_2, 1 );

        foreach ( var_4 in scripts\mp\utility\teams::getteamdata( var_0, "players" ) )
        {
            if ( !var_4 scripts\mp\gametypes\br_public.gsc::isplayeringulag() )
                objective_addclienttomask( var_2, var_4 );
        }
    }

    var_6 = gettime();

    while ( isdefined( self ) && gettime() - var_6 < 15000 )
    {
        var_7 = self.origin + ( 0, 0, 10 );
        scripts\mp\objidpoolmanager::update_objective_position( var_2, var_7 );
        waitframe();
    }

    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( var_2 );
    scripts\mp\objidpoolmanager::returnobjectiveid( var_2 );
}

calloutmarkerping_removevehiclecalloutonspecialconditions()
{
    while ( isdefined( self ) )
    {
        if ( !scripts\mp\gametypes\br_extract_quest.gsc::initextractionlocations( self.origin ) )
        {
            scripts\mp\gametypes\br_pickups.gsc::getcoremapdropzones();
            return;
        }

        waitframe();
    }
}
