// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    level._id_12EC6 = 1;
    level.nobroshot = 1;
    level.clearstockondrop = 1;
    level.give_player_juggernaut = 1;
    level.armoronweaponswitchlongpress = 1;
    level.get_aitypes_and_weights_from_call_counter = 1;
    level.noweaponfalloff = 0;
    level.dwell_aggro = 2;
    level.registerhint = 1;
    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();
    setdvarifuninitialized( "wsow_event_dvar_hot_reload", 0 );
    scripts\mp\gametypes\br_gametypes.gsc::init();
    var_0[0] = scripts\mp\utility\game::getgametype();

    if ( scripts\mp\gametypes\br_gametypes.gsc::proggressionmismatchpopup( "allowedEntities" ) )
        var_0 = scripts\mp\gametypes\br_gametypes.gsc::lootleadermarksizedynamic( "allowedEntities" );

    scripts\mp\gameobjects::main( var_0 );

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registertimelimitdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registerwinlimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registernumlivesdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerroundswitchdvar( scripts\mp\utility\game::getgametype(), 0, 0, 1 );
        scripts\mp\utility\game::registerlaststandhealthdvar( 100 );
        scripts\mp\utility\game::registerlaststandrevivehealthdvar( 30 );
        scripts\mp\utility\game::registerlaststandtimerdvar( 60 );
        scripts\mp\utility\game::registerlaststandinvulntimerdvar( 0 );
        scripts\mp\utility\game::registerlaststandsuicidetimerdvar( 10 );
        scripts\mp\utility\game::registerlaststandrevivetimerdvar( 5 );
        scripts\mp\utility\game::registerlaststandweapondvar( "iw8_gunless" );
        scripts\mp\utility\game::registerlaststandrevivedecayscaledvar( 0.5 );
        scripts\mp\utility\game::registerlaststandweapondelaydvar( 1.0 );

        if ( getdvarint( "scr_game_tacticalmode" ) )
        {
            setdvar( "scr_game_enableMinimap", 0 );
            setdvar( "scr_br_radarHidePings", 2 );
            setdvar( "scr_br_navBarHidePings", 2 );
            setdvar( "scr_br_navBarHideEnemy", 0 );
        }
        else
        {
            setdvar( "scr_game_enableMinimap", 1 );
            setdvar( "scr_br_radarHidePings", 0 );
            setdvar( "scr_br_navBarHidePings", 0 );
            setdvar( "scr_br_navBarHideEnemy", 0 );
        }

        setdvar( "scr_br_spawnProtectionTimer", 5 );
        setdvar( "scr_br_allowkillstreaks", 1 );
        setdvarifuninitialized( "scr_player_enableSecondWindAndPistol", 0 );
        setdvarifuninitialized( "scr_player_lastStandEnableSecondWind", getdvarint( "scr_player_enableSecondWindAndPistol", 0 ) );
        setdvarifuninitialized( "scr_player_lastStandHealthScalar", 2 );
        setdvarifuninitialized( "scr_player_lastStandReviveRetainHealth", 1 );
        setdvarifuninitialized( "scr_player_lastStandSpeedAddition", 1.0 );
        setdvarifuninitialized( "scr_br_squadLeaderForceJump", 0 );
        setdvarifuninitialized( "scr_br_respawn_token_is_self_revive", 1 );
    }

    defineplayerloadout();
    updategametypedvars();
    scripts\cp_mp\parachute::initparachutedvars();
    var_1 = "mp/classtable_br_prematch.csv";
    level.scr_arm_numnonrallyvehicles = 10;

    if ( scripts\mp\gametypes\br_gametypes.gsc::propsetflashesleft( "prematchBlueprints" ) )
        level thread vocalloutstring();
    else
        vopenangles( var_1 );

    level.checkforarenaloadoutoverride = getdvarint( "scr_br_allowLoadout", 0 );

    if ( istrue( level.checkforarenaloadoutoverride ) )
    {
        level.shouldgetnewspawnpoint = scripts\mp\gametypes\br_weapons.gsc::code;
        level.checkyellowmassacre = 0;
        level.monitor_hack_prox = 1;
    }

    thread waitthensetstatgroupreadonly();
    level.teambased = 0;
    level.overridecrateusetime = 0.5;
    level.onplayerscore = ::onplayerscore;
    level.onprecachegametype = ::onprecachegametype;
    level.onstartgametype = ::onstartgametype;
    level.onplayerconnect = ::onplayerconnect;
    level.getspawnpoint = ::getspawnpoint;
    level.modeonspawnplayer = ::onspawnplayer;
    level.modifyplayerdamage = ::brmodifyplayerdamage;
    level.showintelinstancetoplayer = ::collisioncheck;
    level.onplayerdamaged = ::onplayerdamaged;
    level.onnormaldeath = ::onnormaldeath;
    level.ondeadevent = ::ondeadevent;
    level.ononeleftevent = ::ononeleftevent;
    level.onplayerkilled = ::onplayerkilled;
    level.onsuicidedeath = ::onsuicidedeath;
    level.iconvisall = ::iconvisall;
    level.objvisall = ::objvisall;
    level.ontimelimit = ::ontimelimit;
    level.onplayerjointeam = ::onplayerjointeam;
    level.wait_for_player_gulag_respawn = ::comparescore;
    level.parachutetakeweaponscb = scripts\cp_mp\parachute::takeweaponsdefaultfunc;
    level.shouldrespawn = scripts\mp\gametypes\br_public.gsc::shouldrespawn;
    level.allowfauxdeath = 0;

    if ( !istrue( level.checkforarenaloadoutoverride ) )
        level.parachuterestoreweaponscb = ::nakeddrop;
    else
        level.parachuterestoreweaponscb = ::scoreleadchanged;

    level.modeshoulddofauxdeathfunc = scripts\mp\gametypes\br_respawn.gsc::playershoulddofauxdeath;
    level.modeonlaststandfunc = scripts\mp\gametypes\br_respawn.gsc::playersetinlaststand;
    level.shouldpickup = ::unset_just_keep_moving;
    level.endgame = ::brendgame;
    level.laststandweaponcallback = ::brchooselaststandweapon;
    level.shoulddropbrprimary = ::shoulddropbrprimary;
    level.preplayerdamaged = ::compareplundercounts;
    level.show_on_minimap = ::cp_dwn_twn_2_sound_load;
    level.show_player_clip = ::collection_num;
    level.shoulddeleteimmediately = ::clear_mortar_settings;
    level.show_charge = ::spawnclientbr;
    level.supply_crate_vo_when_used = ::supply_crate_vo_when_used;
    level.stop_counter_beep_sfx_on_bomb_vests = ::stop_counter_beep_sfx_on_bomb_vests;
    level.suncascademult2 = ::suncascademult2;
    level.stunboltdelete = ::stunboltdelete;
    level.stopstreamtomovingplane = ::stopstreamtomovingplane;
    level.suppress_spawn_vo = ::suppress_spawn_vo;
    level.suppressdamageflash = ::suppressdamageflash;
    level.shouldplayerovertimedialog = ::comparekillcounts;
    level.shouldmodelognotify = ::codenumber;
    level.subtract_from_spawn_count_from_group = ::subtract_from_spawn_count_from_group;
    level.update_spot_limit = ::update_spot_limit;
    level.resetstuckthermite = ::resetstuckthermite;
    level.x1questmanager = ::convoy4_roof_rpgs;
    level.x1playertransition = ::convoy4_roof_jugg;
    level.should_wait_before_spawn_chopper_boss = ::collectall;
    level.shouldspawndropscommon = ::collecteditems;
    level.shouldbekilledoff = ::shouldbekilledoff;
    level.shouldcrossbowhitmarker = ::shouldcrossbowhitmarker;
    level.show_balloon_deploy_hint = ::show_balloon_deploy_hint;
    level.show_headicon_to = ::show_headicon_to;
    level.checkstayingbehindcover = getdvarint( "scr_br_laststandwipe", 1 );
    level.updategameevents = ::chopper_lights;
    level.disableteamkillrewards = ::checkpoint_carepackage_munitions_role_init;
    level.disableteamrewards = ::checkpoint_carepackage_munitions_role_think;
    level._id_12D16 = scripts\mp\gametypes\br_public.gsc::choose_and_drop_tank_near_hostage;
    level.allowclasschoicefunc = scripts\mp\gametypes\br_weapons.gsc::chopperexfil_sh070_start;
    level.tacticaltimemod = scripts\mp\utility\dvars::dvarfloatvalue( "tacticalTimeMod", 2.5, 0.5, 5 );
    level.ammobox_onplayerholduse = scripts\engine\utility::void;
    level.votesys_init = ::prematchperiod;
    level.dontshootwhileparachuting = 1;
    level.disablecopycatloadout = 1;
    level.disableinitplayergameobjects = 1;
    level.restorekillstreakplayerangles = 1;
    level.remote_tank_think = ::remote_tank_think;
    level.dropbrplatepouch = scripts\cp_mp\killstreaks\chopper_support::checkpoint_carepackage_munitions_think;
    level.set_corpse_detect_ranges = 1;
    level._id_127C2 = ::_id_127C2;
    scripts\cp_mp\utility\script_utility::registersharedfunc( "airdrop", "brGetGameModeSpecificCrateData", ::balloon_deposit_monitor );

    if ( istrue( getdvarint( "scr_br_prematchffa", 0 ) ) )
    {
        level.br_prematchffa = 1;
        level.allowprematchdamage = 1;
        level.recordfinalkillcam = 0;
        level.ignorescoring = 1;
        level.disableweaponstats = 1;
        level.disablestattracking = 1;
        level.prematchaddkillfunc = ::brprematchaddkill;
        level.stop_firing_minigun = ::combat_action;
        level.dialogueindex = 1;
        setdynamicdvar( "scr_" + scripts\mp\utility\game::getgametype() + "_numLives", 0 );
    }

    level.br_prematchloot = [];
    level.br_prematchlootparts = [];
    setomnvar( "scriptable_loot_hide", 1 );
    setomnvar( "ui_killcam_copycat", 0 );
    level.bypassclasschoicefunc = ::tracking_munitions_purchase;
    setomnvarforallclients( "ui_skip_loadout", 0 );
    game["dialog"]["gametype"] = "gametype_survival";

    if ( getdvarint( "OSMSLRTOP" ) )
        game["dialog"]["gametype"] = "hc_" + game["dialog"]["gametype"];

    game["dialog"]["offense_obj"] = "hint_killall";
    game["dialog"]["defense_obj"] = "hint_ffa";
    game["dialog"]["obj_extraction"] = "objective_extraction";
    game["dialog"]["prematch_enter"] = "gamestate_prematch_enter";
    game["dialog"]["prematch_end"] = "gamestate_prematch_end";
    game["dialog"]["deploy_squad_leader"] = "gamestate_deploy_squad_leader";
    game["dialog"]["first_circle"] = "gamestate_circle_first";
    game["dialog"]["new_circle"] = "gamestate_circle_new";
    game["dialog"]["circle_closing"] = "gamestate_circle_red_close";
    game["dialog"]["final_circle"] = "gamestate_circle_red_final";
    game["dialog"]["last_man_standing"] = "gamestate_last_man_standing";
    game["dialog"]["match_start"] = "gametype_battleroyale";
    game["dialog"]["primary_objective"] = "objective_battleroyale";
    game["dialog"]["supply_drop_incoming"] = "gamestate_supply_drop";
    game["dialog"]["team_loss"] = "gamestate_lose";
    game["dialog"]["team_victory"] = "gamestate_win";
    game["dialog"]["top_5"] = "gamestate_top_5";
    game["dialog"]["top_10"] = "gamestate_top_10";
    game["dialog"]["top_25"] = "gamestate_top_25";
    game["dialog"]["top_50"] = "gamestate_top_50";
    game["dialog"]["top_5_lose"] = "gametype_top_5_lose";
    game["dialog"]["top_10_lose"] = "gametype_top_10_lose";
    game["dialog"]["top_25_lose"] = "gametype_top_25_lose";
    game["dialog"]["finish_calls"] = "game_end_prompt_finish_calls";
    level notify( "br_dialog_initialized" );
    level.getwincost = 1;
    level.getxmike109ammotype = ::clean_up_none;
    level.startingspawns = [];
    level._effect["vfx_smk_signal"] = loadfx( "vfx/_requests/mp_gameplay/vfx_smk_signal" );
    level._effect["vfx_smk_signal_gr"] = loadfx( "vfx/_requests/mp_gameplay/vfx_smk_signal_gr" );
    level._effect["vfx_smk_signal_red"] = loadfx( "vfx/iw8_cp/prop/vfx_smk_signal_red" );
    level._effect["vfx_br_ac130_clouds"] = loadfx( "vfx/iw8_br/gameplay/infil/vfx_br_ac130_clouds" );
    level._effect["vfx_br_infil_cloud_anim"] = loadfx( "vfx/iw8_br/gameplay/infil/vfx_br_infil_cloud_anim" );
    level.bots_ignore_team_balance = 1;
    level.seq3_computer_interaction = getdvarint( "live_lobby_lowpop_check", 0 );
    setdvar( "NKTQRKRMTS", 560 );
    setdvar( "LKMOLLSKKO", 561 );
    setdvar( "OMLLLQKQSR", 560 );
    setdvar( "LTMMLKRKTR", 561 );
    level.modespecificparachutecompletecb = ::parachutecomplete;
    level.stoppingpower_tracklastcrossbowshot = ::stoppingpower_tracklastcrossbowshot;

    if ( !isdefined( level.skipprematchdropspawn ) )
        level.skipprematchdropspawn = getdvarint( "scr_br_skipPrematchDropSpawn", 0 );

    level.br_debugsolotest = getdvarint( "scr_br_solo_test", 0 );

    if ( level.br_debugsolotest )
        level.disableforfeit = 1;

    level.br_infils_disabled = getdvarint( "scr_br_infils_disable", 0 ) || scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "infil" );
    level.br_circle_disabled = getdvarint( "scr_br_circle_disable", 0 );
    level.initial_right = getdvarint( "scr_bmo_extract_heli_invulnerable", 1 );
    level.checkpoint_next_fx_play = getdvarint( "scr_br_ending_delay", 4 );
    level.roundenddelay = 0.5;
    level.postroundtime = 9;
    level.updatecirclepulse = getdvarint( "scr_player_maxhealth" );
    level.setupbobbingboatmultiple = getdvarint( "scr_br_minArmorDropOnDeath", 1 );
    level.chooseanim_vehicleturret = getdvarint( "scr_br_pelletMaxDamage", -1 );
    level.chooseanim_vehicleturretdeath = getdvarint( "scr_br_pelletMaxDamageFast", -1 );
    level.chopper_death_callback = getdvarint( "scr_br_slugMaxDamage", -1 );

    if ( !isdefined( level.checkyellowmassacre ) )
        clear_lights_based_on_targetname();

    scripts\mp\gametypes\br_analytics.gsc::chopperoccupied();
    scripts\mp\gametypes\br_vehicles.gsc::brvehiclesinit();
    scripts\mp\gametypes\br_infils.gsc::main();

    if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "armor" ) )
        scripts\mp\gametypes\br_armor.gsc::main();

    scripts\mp\gametypes\br_ending.gsc::checkpoint_next_fx_set();
    initializetweakableoverrides();
    entcleanup();
    level thread bomb_count_down_end_time_stamp_ms();
    setdvarifuninitialized( "scr_br_no_inventory", 1 );
    setdvarifuninitialized( "scr_br_platePouchCount", 3 );
    setdvarifuninitialized( "scr_trophy_timeoutOverride", 600.0 );
    setdvarifuninitialized( "scr_tacCover_timeoutOverride", 600.0 );
    setdvarifuninitialized( "scr_manualTurret_timeoutOverride", 600.0 );
    setdvar( "compassScramblerRadius", 12000 );
    scripts\mp\gametypes\br_alt_mode_inflation.gsc::init();
    thread scripts\mp\gametypes\br_zones.gsc::init();
    thread scripts\mp\gametypes\br_c130airdrop.gsc::init();
    thread scripts\mp\gametypes\br_jugg_common.gsc::init();
    thread scripts\mp\gametypes\br_dev.gsc::init();
}

waitthensetstatgroupreadonly()
{
    self endon( "game_ended" );
    wait 1;

    if ( isdefined( level.playerstats ) )
    {
        scripts\mp\playerstats_interface::makeplayerstatgroupreadonly( "losses" );
        scripts\mp\playerstats_interface::makeplayerstatgroupreadonly( "winLoss" );
    }
}

entcleanup()
{
    for ( var_0 = 1; var_0 < 10; var_0++ )
        _delete_ents( "script_noteworthy", "locale_" + var_0 );

    _delete_ents( "script_noteworthy", "locale_99" );
}

_delete_ents( var_0, var_1 )
{
    var_2 = getentarray( var_1, var_0 );
    scripts\engine\utility::array_call( var_2, ::delete );
}

playerzombiesetradar( var_0 )
{
    var_1 = tablelookupgetnumcols( "mp/classtable_br.csv" ) - 1;
    var_2["loadoutArchetype"] = "archetype_assault";
    var_2["loadoutPrimary"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutPrimary", var_0 + 1 );
    var_2["loadoutPrimaryAttachment"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutPrimaryAttachment1", var_0 + 1 );
    var_2["loadoutPrimaryAttachment2"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutPrimaryAttachment2", var_0 + 1 );
    var_2["loadoutPrimaryAttachment3"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutPrimaryAttachment3", var_0 + 1 );
    var_2["loadoutPrimaryAttachment4"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutPrimaryAttachment4", var_0 + 1 );
    var_2["loadoutPrimaryAttachment5"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutPrimaryAttachment5", var_0 + 1 );
    var_2["loadoutPrimaryCamo"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutPrimaryCamo", var_0 + 1 );
    var_2["loadoutPrimaryReticle"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutPrimaryReticle", var_0 + 1 );
    var_2["loadoutSecondary"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutSecondary", var_0 + 1 );
    var_2["loadoutSecondaryAttachment"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutSecondaryAttachment1", var_0 + 1 );
    var_2["loadoutSecondaryAttachment2"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutSecondaryAttachment2", var_0 + 1 );
    var_2["loadoutSecondaryAttachment3"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutSecondaryAttachment3", var_0 + 1 );
    var_2["loadoutSecondaryAttachment4"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutSecondaryAttachment4", var_0 + 1 );
    var_2["loadoutSecondaryAttachment5"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutSecondaryAttachment5", var_0 + 1 );
    var_2["loadoutSecondaryCamo"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutSecondaryCamo", var_0 + 1 );
    var_2["loadoutSecondaryReticle"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutSecondaryReticle", var_0 + 1 );
    var_2["loadoutMeleeSlot"] = "none";
    var_2["loadoutEquipmentPrimary"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutEquipmentPrimary", var_0 + 1 );
    var_2["loadoutEquipmentSecondary"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutEquipmentSecondary", var_0 + 1 );
    var_2["loadoutStreakType"] = "assault";
    var_2["loadoutKillstreak1"] = "none";
    var_2["loadoutKillstreak2"] = "none";
    var_2["loadoutKillstreak3"] = "none";
    var_2["loadoutSuper"] = "super_br_extract";
    var_2["loadoutPerks"] = [ tablelookup( "mp/classtable_br.csv", 0, "loadoutPerk1", var_0 + 1 ), tablelookup( "mp/classtable_br.csv", 0, "loadoutPerk2", var_0 + 1 ), tablelookup( "mp/classtable_br.csv", 0, "loadoutPerk3", var_0 + 1 ), tablelookup( "mp/classtable_br.csv", 0, "loadoutExtraPerk1", var_0 + 1 ), tablelookup( "mp/classtable_br.csv", 0, "loadoutExtraPerk2", var_0 + 1 ), tablelookup( "mp/classtable_br.csv", 0, "loadoutExtraPerk3", var_0 + 1 ) ];
    var_2["loadoutGesture"] = "playerData";

    if ( getdvarint( "scr_br_alt_mode_zxp", 0 ) )
        var_2["loadoutEquipmentSecondary"] = "equip_binoculars";
    else
        var_2["loadoutEquipmentSecondary"] = tablelookup( "mp/classtable_br.csv", 0, "loadoutEquipmentSecondary", var_0 + 1 );

    return var_2;
}

monitor_traversal_watcher( var_0, var_1, var_2 )
{
    if ( !isdefined( level.chopper_gunner ) )
        level.chopper_gunner = playerzombiesetradar( var_0 );

    self.pers["gamemodeLoadout"] = level.chopper_gunner;
    self.class = "gamemode";
    self.prevweaponobj = undefined;
    var_3 = scripts\mp\class::loadout_getclassstruct();
    var_3 = scripts\mp\class::loadout_updateclass( var_3, "gamemode" );
    scripts\mp\class::preloadandqueueclassstruct( var_3, 1, 1 );
    self takeallweapons();
    scripts\mp\class::giveloadout( self.team, "gamemode", var_1, var_1 );
    self givestartammo( var_3.loadoutprimaryobject );
    self givestartammo( var_3.loadoutsecondaryobject );
    monitor_game_end_on_front_truck_death( self );
    scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();

    if ( !istrue( var_2 ) )
        scripts\mp\gametypes\br_weapons.gsc::checkpoint_overwatch();

    scripts\mp\gametypes\br_weapons.gsc::br_ammo_update_weapons( self );
    self notify( "ammo_update" );
}

spawn_remote_tank_thermite()
{
    if ( clean_up_steam_triggers() )
    {
        var_0 = 0;

        if ( istrue( self.obj_room_fire_07 ) )
            return;

        var_1 = isdefined( self.obj_room_fire_07 ) && !self.obj_room_fire_07;

        if ( var_1 )
            var_0 = 1;

        var_2 = clear_and_give_killstreak_loadout_recon();
        monitor_traversal_watcher( var_2, var_0 );

        if ( var_1 )
            self.obj_room_fire_07 = 1;
    }
    else if ( clean_up_vandalize() )
        givematchloadoutfordropbags();
    else if ( clean_up_steam() )
    {
        var_3 = clear_all_remaining();
        var_4 = cleanupvehicleoutline();
        givematchloadout( var_3, var_4 );
    }

    if ( isdefined( level.init_cp_execution ) && level.init_cp_execution.watchthrowingkifefireswipe == 1 )
        clear_bomb_vest_controller_holder();
}

nakeddrop()
{
    var_0 = scripts\mp\gametypes\br_gulag.gsc::mp_vacant_patch_thread();

    if ( !var_0 && istrue( level.br_prematchstarted ) && !istrue( self.gulag ) )
    {
        if ( scripts\mp\gametypes\br_gametypes.gsc::progress_obj( "playerNakedDropLoadout" ) )
            scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "playerNakedDropLoadout" );
        else
            spawn_remote_tank_thermite();
    }

    thread checkpoint_fx_play();
}

scoreleadchanged()
{
    if ( istrue( self.radialhintinternal ) )
    {
        self.radialhintinternal = undefined;
        return;
    }

    var_0 = self.class;

    if ( istrue( self.playerstartbesttimeupdate ) && !istrue( level.monitor_hack_prox ) )
    {
        self.pers["gamemodeLoadout"] = level.br_respawn_loadout;
        var_0 = "gamemode";
    }

    var_1 = scripts\mp\class::preloadandqueueclass( var_0, 1 );
    thread scripts\mp\class::swaploadout();

    if ( var_0 != "gamemode" )
        scripts\cp_mp\utility\inventory_utility::_takeweapon( "iw8_fists_mp" );

    self._id_1276E = 0;

    if ( !istrue( self.vote_player_init ) )
    {
        if ( istrue( level.monitor_hack_prox ) )
            clear_bomb_vest_controller_holder();
    }

    self.vote_player_init = 1;

    if ( !istrue( self.playerstartbesttimeupdate ) )
    {
        if ( istrue( level.br_prematchstarted ) )
        {
            if ( istrue( level.monitor_hack_prox ) )
                clear_bomb_vest_controller_holder();

            self.playerstartbesttimeupdate = 1;
        }
    }

    thread checkpoint_fx_play();
}

handle_nav_bounds_buildings( var_0, var_1, var_2, var_3 )
{
    var_4 = -1200;
    var_5 = scripts\engine\trace::create_contents( 0, 1, 1, 1, 0, 1, 1 );
    var_6 = 70;
    var_7 = var_1.origin - var_0.origin;
    var_8 = ( var_7[0], var_7[1], 0 );
    var_9 = 0;

    if ( length2d( var_8 ) > 0.001 )
    {
        var_10 = vectornormalize( var_8 );
        var_11 = vectortoangles( var_10 );
        var_9 = angleclamp180( var_11[1] );
    }

    var_12 = var_0.origin;
    var_13 = ( cos( var_9 ), sin( var_9 ), 0 );
    var_13 = vectornormalize( var_13 );
    var_13 = var_13 * var_6;
    var_14 = scripts\mp\gametypes\br_public.gsc::weapon_xp_iw8_ar_akilo47( var_12, var_13[0], var_13[1], var_2, var_3, var_5, var_0 );

    if ( var_14["fraction"] < 1.0 )
    {
        var_15 = var_14["position"] + ( 0, 0, 0.001 );
        var_16 = var_12 + ( 0, 0, 30 );
        var_17 = scripts\engine\trace::ray_trace( var_16, var_15, var_0, var_5 );

        if ( var_17["fraction"] >= 1.0 )
        {
            var_1 setorigin( var_15 );
            return;
        }
        else
        {

        }
    }

    var_14 = scripts\mp\gametypes\br_public.gsc::weapon_xp_iw8_ar_akilo47( var_12, 0, 0, var_2, var_3, var_5 );

    if ( var_14["fraction"] < 1.0 )
    {
        var_18 = var_14["position"] + ( 0, 0, 0.2 );
        var_19 = var_14["position"] + ( 0, 0, 1 );
        var_20 = playerphysicstrace( var_18, var_19 );

        if ( var_20 == var_19 )
        {
            var_1 setorigin( var_14["position"] );
            return;
        }
    }

    var_1 kill( var_0.origin );
}

clear_bomb_vest_controller_holder()
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "giveStartFieldUpgrade" ) )
        return;

    if ( istrue( level.allowsupers ) )
    {
        var_0 = scripts\mp\supers::getcurrentsuper();

        if ( isdefined( var_0 ) )
        {
            scripts\mp\supers::givesuperpoints( scripts\mp\supers::getsuperpointsneeded() );
            return;
        }
    }
    else
        scripts\mp\gametypes\br_pickups.gsc::forcegivesuper( self.score_event_nuked );
}

commandwatcher( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( !isalive( var_0 ) )
        return 0;

    if ( istrue( var_0.gulag ) )
        return 0;

    if ( !isdefined( var_0.team ) )
        return 0;

    if ( isdefined( var_1 ) && var_1.team != var_0.team )
        return 0;

    if ( isdefined( var_1 ) && var_1 == var_0 )
        return 0;

    return 1;
}

comms_crates( var_0 )
{
    if ( !isdefined( var_0 ) || !isdefined( var_0.pers["squadMemberIndex"] ) || !isdefined( var_0._id_12688 ) )
        return;

    var_1 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getFriendlyPlayers" ) ]]( var_0.team, 1 );
    var_2 = "outline_nodepth_brplayer" + var_0.pers["squadMemberIndex"];
    var_3 = getdvarint( "scr_br_hudoutlineForTeammatesDistance", 1024 );
    var_4 = squared( var_3 );
    var_5 = commandwatcher( var_0 );

    foreach ( var_7 in var_1 )
    {
        var_8 = var_7 getentitynumber();
        var_9 = var_5 && commandwatcher( var_7, var_0 );

        if ( var_9 )
        {
            var_10 = distancesquared( var_0.origin, var_7.origin );

            if ( var_10 > var_4 )
                var_9 = 0;
        }

        if ( !var_9 )
        {
            if ( isdefined( var_0._id_12688[var_8] ) )
            {
                scripts\mp\utility\outline::outlinedisable( var_0._id_12688[var_8], var_0 );
                var_0._id_12688[var_8] = undefined;
            }

            continue;
        }

        if ( !isdefined( var_0._id_12688[var_8] ) )
            var_0._id_12688[var_8] = scripts\mp\utility\outline::outlineenableforplayer( var_0, var_7, var_2, "level_script" );
    }
}

compare_higher_score( var_0 )
{
    var_0 endon( "disconnect" );

    for (;;)
    {
        level waittill( "update_circle_hide" );
        comms_crates( var_0 );
    }
}

combo_reset( var_0 )
{
    var_0 endon( "disconnect" );

    if ( !isdefined( var_0.pers["squadMemberIndex"] ) )
        return;

    if ( !istrue( level.br_infils_disabled ) )
        var_0 waittill( "infil_jump_done" );

    var_0._id_12688 = [];
    var_0 thread compare_higher_score( var_0 );

    for (;;)
    {
        comms_crates( var_0 );
        wait 1;
    }
}

initializetweakableoverrides()
{
    if ( !isdefined( level.tweakablesinitialized ) )
        thread scripts\mp\tweakables::init();
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata();
    setdynamicdvar( "scr_br_brLoadouts", getmatchrulesdata( "brData", "brLoadouts" ) );
    setdynamicdvar( "scr_br_crateDropTimer", getmatchrulesdata( "brData", "crateDropTimer" ) );
    setdynamicdvar( "scr_br_infilC130", getmatchrulesdata( "brData", "infilC130" ) );
    setdynamicdvar( "scr_br_gulag", getmatchrulesdata( "brData", "gulag" ) );
    setdynamicdvar( "scr_br_circleDamageMultiplier", getmatchrulesdata( "brData", "circleDamageMultiplier" ) );
    setdynamicdvar( "scr_br_startingWeapon", getmatchrulesdata( "brData", "startingWeapon" ) );
    setdynamicdvar( "scr_br_roundlimit", 1 );
    scripts\mp\utility\game::registerroundlimitdvar( "br", 1 );
    setdynamicdvar( "scr_br_winlimit", 1 );
    scripts\mp\utility\game::registerwinlimitdvar( "br", 1 );
    setdynamicdvar( "scr_br_promode", 0 );
    scripts\mp\utility\game::registerlaststandinvulntimerdvar( 0 );
}

updategametypedvars()
{
    scripts\mp\gametypes\common.gsc::updatecommongametypedvars();
    level.numendgame = scripts\mp\utility\dvars::dvarintvalue( "numEndGame", 4, 0, 20 );
    level.brloadouts = scripts\mp\utility\dvars::dvarintvalue( "brLoadouts", 0, 0, 5 );
    level.cratedroptimer = scripts\mp\utility\dvars::dvarintvalue( "crateDropTimer", 60, 0, 300 );
    level.goalenabletimer = scripts\mp\utility\dvars::dvarfloatvalue( "goalEnableTimer", 60, 0, 300 );
    level.goalmovetimer = scripts\mp\utility\dvars::dvarfloatvalue( "goalMoveTimer", 0, 0, 300 );
    level.radarendgame = scripts\mp\utility\dvars::dvarfloatvalue( "radarEndGame", 1, 0, 1 );
    level.infilcanusec130 = scripts\mp\utility\dvars::dvarfloatvalue( "infilC130", 1, 0, 1 );
    level.usegulag = scripts\mp\utility\dvars::dvarfloatvalue( "gulag", 1, 0, 1 );
    level.circledamagemultiplier = scripts\mp\utility\dvars::dvarfloatvalue( "circleDamageMultiplier", 1, 0.5, 4 );
    level.startingweapon = scripts\mp\utility\dvars::dvarintvalue( "startingWeapon", 0, 0, 8 );
    level.timetoadd = 30;
}

tracking_munitions_purchase()
{
    var_0 = "";

    if ( !istrue( level.br_prematchstarted ) && istrue( level.br_prematchffa ) )
        var_0 = trackriotshield_tryreset();
    else
    {
        var_1 = level.br_loadouts["default"];

        if ( scripts\mp\gametypes\br_gametypes.gsc::progress_obj( "getDefaultLoadout" ) )
            var_1 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "getDefaultLoadout" );

        self.pers["gamemodeLoadout"] = var_1;
        var_0 = "gamemode";
    }

    self.pers["class"] = var_0;
    return var_0;
}

anin_playvo_func()
{
    if ( self isplayerheadless() )
    {
        if ( self.pers["gamemodeLoadout"]["loadoutEquipmentPrimary"] == "equip_molotov" )
            self.pers["gamemodeLoadout"]["loadoutEquipmentPrimary"] = "equip_frag";
    }
}

_id_12D45()
{
    wait 5.0;
    iprintln( "Loadout verification starting in 10 seconds." );
    wait 5.0;
    iprintln( "5 seconds to start." );
    wait 5.0;
    iprintln( "Verification start!" );

    for ( var_0 = 0; var_0 < level.scr_arm_numnonrallyvehicles; var_0++ )
    {
        iprintln( "Loadout: " + var_0 );
        self.pers["gamemodeLoadout"] = level.vote_player_set[level.votesys_think[var_0]];
        self.class = "gamemode";
        scripts\mp\class::preloadandqueueclass( self.pers["class"] );
        scripts\mp\class::swaploadout();
        scripts\mp\gametypes\br_weapons.gsc::checkforsubgametypeoverrides();
        wait 5.0;
        scripts\cp_mp\utility\inventory_utility::_switchtoweapon( self.secondaryweapon );
        wait 4.0;
    }

    self.pers["gamemodeLoadout"] = level.vote_player_set[level.votesys_think[0]];
    self.class = "gamemode";
    scripts\mp\class::preloadandqueueclass( self.pers["class"] );
    scripts\mp\class::swaploadout();
    scripts\mp\gametypes\br_weapons.gsc::checkforsubgametypeoverrides();
    iprintln( "Verification done!" );
}

trackriotshield_tryreset()
{
    var_0 = "";

    if ( getdvarint( "scr_br_use_set_loadouts", 1 ) )
    {
        if ( !isdefined( level.votesys_think ) )
        {
            level.votesys_think = [];

            for ( var_1 = 0; var_1 < level.scr_arm_numnonrallyvehicles; var_1++ )
                level.votesys_think[level.votesys_think.size] = var_1;

            if ( getdvar( "scr_br_prematch_loadout_override" ) == "" && getdvarint( "scr_br_verify_prematch_loadouts", 0 ) == 0 )
                level.votesys_think = scripts\engine\utility::array_randomize( level.votesys_think );

            self.vote_player_reset = level.scr_arm_numnonrallyvehicles - 2;
        }

        if ( !isdefined( self.vote_player_reset ) || self.vote_player_reset < 0 || self.vote_player_reset >= level.scr_arm_numnonrallyvehicles - 1 )
            self.vote_player_reset = 0;
        else
            self.vote_player_reset++;

        self.pers["gamemodeLoadout"] = level.vote_player_set[level.votesys_think[self.vote_player_reset]];
        var_0 = "gamemode";
        anin_playvo_func();
    }
    else
        var_0 = "default" + ( randomint( 10 ) + 1 );

    return var_0;
}

vocalloutstring()
{
    level endon( "game_ended" );

    while ( !isdefined( level.weaponlootmapdata ) )
        waitframe();

    level.vote_player_set = [];
    var_0 = [];
    var_0["classIdxPrimaryArray"] = [];
    var_0["classIdxSecondaryArray"] = [];
    var_1 = "mp/classtable_br_prematch_bp.csv";
    var_0 = cumulative_damage_monitor( var_0 );

    for ( var_3 = 0; var_3 < var_0["classIdxPrimaryArray"].size; var_3++ )
    {
        var_4 = var_0["classIdxPrimaryArray"][var_3];
        var_5 = var_0["classIdxSecondaryArray"][var_3];
        level.vote_player_set[level.vote_player_set.size] = _id_12B1C( var_1, var_4, var_5 );
    }
}

cumulative_damage_monitor( var_0 )
{
    var_1 = 0;
    var_2 = 2;
    var_3 = 2;
    var_4 = 1;
    var_5 = 1;
    var_6 = 2;
    var_7 = 2;

    for ( var_8 = [ var_2, var_3, var_4, var_5, var_6, var_7 ]; var_1 < var_8.size; var_1++ )
    {
        var_9 = 0;
        var_10 = 0;
        var_11 = 5;

        while ( var_9 < var_8[var_1] )
        {
            var_12 = monitor_target_death( var_1 );

            if ( !scripts\engine\utility::array_contains( var_0["classIdxPrimaryArray"], var_12 ) || var_10 >= var_11 )
            {
                var_9++;
                var_10 = 0;
                var_0["classIdxPrimaryArray"][var_0["classIdxPrimaryArray"].size] = var_12;
                continue;
            }

            var_10++;
        }
    }

    var_13 = 0;

    for ( var_14 = 0; var_14 < var_0["classIdxPrimaryArray"].size; var_14++ )
    {
        if ( var_13 < 3 )
        {
            if ( randomint( 4 ) == 1 )
                var_15 = monitor_target_death( 6 );
            else
                var_15 = monitor_target_death( 5 );

            var_13++;
        }
        else
            var_15 = monitor_target_death( 7 );

        var_0["classIdxSecondaryArray"][var_0["classIdxSecondaryArray"].size] = var_15;
    }

    var_0["classIdxPrimaryArray"] = scripts\engine\utility::array_randomize( var_0["classIdxPrimaryArray"] );
    var_0["classIdxSecondaryArray"] = scripts\engine\utility::array_randomize( var_0["classIdxSecondaryArray"] );
    return var_0;
}

voqueue()
{
    level endon( "game_ended" );

    while ( !isdefined( level.weaponlootmapdata ) )
        waitframe();

    level.vote_player_set = [];
    var_0 = "mp/classtable_br_eventbp.csv";
    var_1 = 0;

    for ( var_2 = tablelookupgetnumcols( var_0 ) - 1; var_1 < var_2; var_1++ )
        level.vote_player_set[level.vote_player_set.size] = _id_12B3B( var_0, var_1 );
}

monitor_target_death( var_0 )
{
    var_1 = 0;

    switch ( var_0 )
    {
        case 0:
            var_1 = 0 + randomint( 10 );
            break;
        case 1:
            var_1 = 10 + randomint( 7 );
            break;
        case 2:
            var_1 = 23 + randomint( 5 );
            break;
        case 3:
            var_1 = 28 + randomint( 8 );
            break;
        case 4:
            var_1 = 36 + randomint( 6 );
            break;
        case 5:
            var_1 = randomint( 42 );
            break;
        case 6:
            var_1 = 42 + randomint( 3 );
            break;
        case 7:
            var_1 = 17 + randomint( 6 );
            break;
        default:
            break;
    }

    return var_1;
}

_id_12B1C( var_0, var_1, var_2 )
{
    if ( var_1 == var_2 )
    {
        if ( var_2 > 0 )
            var_2--;
        else
            var_2 = 1;
    }

    var_3 = [];
    var_3["loadoutArchetype"] = "archetype_assault";
    var_3["loadoutPrimaryAttachment"] = "none";
    var_3["loadoutPrimaryAttachment2"] = "none";
    var_3["loadoutPrimaryAttachment3"] = "none";
    var_3["loadoutPrimaryAttachment4"] = "none";
    var_3["loadoutPrimaryAttachment5"] = "none";
    var_3["loadoutPrimaryCosmeticAttachment"] = "none";
    var_3["loadoutPrimarySticker"] = "none";
    var_3["loadoutPrimarySticker1"] = "none";
    var_3["loadoutPrimarySticker2"] = "none";
    var_3["loadoutPrimarySticker3"] = "none";
    var_3["loadoutSecondary"] = "none";
    var_3["loadoutSecondaryAttachment"] = "none";
    var_3["loadoutSecondaryAttachment2"] = "none";
    var_3["loadoutSecondaryAttachment3"] = "none";
    var_3["loadoutSecondaryAttachment4"] = "none";
    var_3["loadoutSecondaryAttachment5"] = "none";
    var_3["loadoutSecondarySticker"] = "none";
    var_3["loadoutSecondarySticker1"] = "none";
    var_3["loadoutSecondarySticker2"] = "none";
    var_3["loadoutSecondarySticker3"] = "none";
    var_3["loadoutMeleeSlot"] = "none";
    var_3["loadoutStreakType"] = "assault";
    var_3["loadoutKillstreak1"] = "none";
    var_3["loadoutKillstreak2"] = "none";
    var_3["loadoutKillstreak3"] = "none";
    var_3["loadoutSuper"] = "none";
    var_3["tableColumn"] = var_1;
    var_3["loadoutPrimaryAddBlueprintAttachments"] = scripts\mp\class::_id_125D7( var_0, var_1, 0 );
    var_3["loadoutPrimary"] = scripts\mp\class::table_getweapon( var_0, var_1, 0 );

    for ( var_4 = 0; var_4 < scripts\mp\class::getmaxprimaryattachments(); var_4++ )
    {
        var_5 = scripts\mp\class::getattachmentloadoutstring( var_4, "primary" );
        var_3[var_5] = scripts\mp\class::table_getweaponattachment( var_0, var_1, 0, var_4 );
    }

    var_3["loadoutPrimaryCamo"] = scripts\mp\class::table_getweaponcamo( var_0, var_1, 0 );
    var_3["loadoutPrimaryReticle"] = scripts\mp\class::table_getweaponreticle( var_0, var_1, 0 );
    var_3["loadoutPrimaryVariantID"] = scripts\mp\class::_id_125D9( var_0, var_1, 0, var_3["loadoutPrimary"] );
    var_3["loadoutSecondaryAddBlueprintAttachments"] = scripts\mp\class::_id_125D7( var_0, var_2, 0 );
    var_3["loadoutSecondary"] = scripts\mp\class::table_getweapon( var_0, var_2, 0 );

    for ( var_4 = 0; var_4 < scripts\mp\class::getmaxsecondaryattachments(); var_4++ )
    {
        var_5 = scripts\mp\class::getattachmentloadoutstring( var_4, "secondary" );
        var_3[var_5] = scripts\mp\class::table_getweaponattachment( var_0, var_2, 0, var_4 );
    }

    var_3["loadoutSecondaryCamo"] = scripts\mp\class::table_getweaponcamo( var_0, var_2, 0 );
    var_3["loadoutSecondaryReticle"] = scripts\mp\class::table_getweaponreticle( var_0, var_2, 0 );
    var_3["loadoutSecondaryVariantID"] = scripts\mp\class::_id_125D9( var_0, var_2, 0, var_3["loadoutSecondary"] );
    var_3["loadoutEquipmentPrimary"] = minecart( "lethal" );

    if ( scripts\engine\utility::cointoss() )
        var_3["loadoutExtraEquipmentPrimary"] = "TRUE";
    else
        var_3["loadoutExtraEquipmentPrimary"] = "FALSE";

    var_3["loadoutEquipmentSecondary"] = minecart( "tactical" );

    if ( var_3["loadoutEquipmentSecondary"] != "equip_smoke" && scripts\engine\utility::cointoss() )
        var_3["loadoutExtraEquipmentSecondary"] = "TRUE";
    else
        var_3["loadoutExtraEquipmentSecondary"] = "FALSE";

    var_3["loadoutPerks"] = [];

    for ( var_6 = 0; var_6 < 3; var_6++ )
    {
        var_7 = scripts\mp\class::table_getperk( var_0, var_1, var_6 );

        if ( var_7 != "specialty_null" )
            var_3["loadoutPerks"][var_3["loadoutPerks"].size] = var_7;
    }

    var_3["loadoutGesture"] = "playerData";
    var_3["loadoutExecution"] = "playerData";
    return var_3;
}

_id_12B3B( var_0, var_1 )
{
    var_2 = [];
    var_2["loadoutArchetype"] = "archetype_assault";
    var_2["loadoutPrimaryAttachment"] = "none";
    var_2["loadoutPrimaryAttachment2"] = "none";
    var_2["loadoutPrimaryAttachment3"] = "none";
    var_2["loadoutPrimaryAttachment4"] = "none";
    var_2["loadoutPrimaryAttachment5"] = "none";
    var_2["loadoutPrimaryCosmeticAttachment"] = "none";
    var_2["loadoutPrimarySticker"] = "none";
    var_2["loadoutPrimarySticker1"] = "none";
    var_2["loadoutPrimarySticker2"] = "none";
    var_2["loadoutPrimarySticker3"] = "none";
    var_2["loadoutSecondary"] = "none";
    var_2["loadoutSecondaryAttachment"] = "none";
    var_2["loadoutSecondaryAttachment2"] = "none";
    var_2["loadoutSecondaryAttachment3"] = "none";
    var_2["loadoutSecondaryAttachment4"] = "none";
    var_2["loadoutSecondaryAttachment5"] = "none";
    var_2["loadoutSecondarySticker"] = "none";
    var_2["loadoutSecondarySticker1"] = "none";
    var_2["loadoutSecondarySticker2"] = "none";
    var_2["loadoutSecondarySticker3"] = "none";
    var_2["loadoutMeleeSlot"] = "none";
    var_2["loadoutStreakType"] = "assault";
    var_2["loadoutKillstreak1"] = "none";
    var_2["loadoutKillstreak2"] = "none";
    var_2["loadoutKillstreak3"] = "none";
    var_2["loadoutSuper"] = "none";
    var_2["tableColumn"] = var_1;
    var_2["loadoutPrimaryAddBlueprintAttachments"] = scripts\mp\class::_id_125D7( var_0, var_1, 0 );
    var_2["loadoutPrimary"] = scripts\mp\class::table_getweapon( var_0, var_1, 0 );

    for ( var_3 = 0; var_3 < scripts\mp\class::getmaxprimaryattachments(); var_3++ )
    {
        var_4 = scripts\mp\class::getattachmentloadoutstring( var_3, "primary" );
        var_2[var_4] = scripts\mp\class::table_getweaponattachment( var_0, var_1, 0, var_3 );
    }

    var_2["loadoutPrimaryCamo"] = scripts\mp\class::table_getweaponcamo( var_0, var_1, 0 );
    var_2["loadoutPrimaryReticle"] = scripts\mp\class::table_getweaponreticle( var_0, var_1, 0 );
    var_2["loadoutPrimaryVariantID"] = scripts\mp\class::_id_125D9( var_0, var_1, 0, var_2["loadoutPrimary"] );
    var_2["loadoutSecondaryAddBlueprintAttachments"] = scripts\mp\class::_id_125D7( var_0, var_1, 1 );
    var_2["loadoutSecondary"] = scripts\mp\class::table_getweapon( var_0, var_1, 1 );

    for ( var_3 = 0; var_3 < scripts\mp\class::getmaxsecondaryattachments(); var_3++ )
    {
        var_4 = scripts\mp\class::getattachmentloadoutstring( var_3, "secondary" );
        var_2[var_4] = scripts\mp\class::table_getweaponattachment( var_0, var_1, 1, var_3 );
    }

    var_2["loadoutSecondaryCamo"] = scripts\mp\class::table_getweaponcamo( var_0, var_1, 1 );
    var_2["loadoutSecondaryReticle"] = scripts\mp\class::table_getweaponreticle( var_0, var_1, 1 );
    var_2["loadoutSecondaryVariantID"] = int( tablelookup( var_0, 0, "loadoutSecondaryVariantID", var_1 + 1 ) );
    var_2["loadoutEquipmentPrimary"] = tablelookup( var_0, 0, "loadoutEquipmentPrimary", var_1 + 1 );

    if ( scripts\engine\utility::cointoss() )
        var_2["loadoutExtraEquipmentPrimary"] = "TRUE";
    else
        var_2["loadoutExtraEquipmentPrimary"] = "FALSE";

    var_2["loadoutEquipmentSecondary"] = tablelookup( var_0, 0, "loadoutEquipmentSecondary", var_1 + 1 );

    if ( var_2["loadoutEquipmentSecondary"] != "equip_smoke" && scripts\engine\utility::cointoss() )
        var_2["loadoutExtraEquipmentSecondary"] = "TRUE";
    else
        var_2["loadoutExtraEquipmentSecondary"] = "FALSE";

    var_2["loadoutPerks"] = [];
    var_2["loadoutGesture"] = "playerData";
    var_2["loadoutExecution"] = "playerData";
    return var_2;
}

minecart( var_0 )
{
    var_1 = [];

    if ( var_0 == "lethal" )
        var_1 = [ "equip_at_mine", "equip_claymore", "equip_c4", "equip_frag", "equip_molotov", "equip_semtex", "equip_thermite", "equip_throwing_knife", "equip_throwing_knife_fire", "equip_throwing_knife_electric", "equip_throwing_knife_drill" ];
    else if ( var_0 == "tactical" )
        var_1 = [ "equip_adrenaline", "equip_concussion", "equip_decoy", "equip_flash", "equip_gas_grenade", "equip_hb_sensor", "equip_smoke", "equip_snapshot_grenade" ];
    else
    {

    }

    var_2 = var_1[randomint( var_1.size )];
    return var_2;
}

vopenangles( var_0 )
{
    var_1 = tablelookupgetnumcols( var_0 ) - 1;
    level.vote_player_set = [];
    var_2 = 0;

    if ( getdvar( "scr_br_prematch_loadout_override" ) != "" )
    {
        var_3 = strtok( getdvar( "scr_br_prematch_loadout_override" ), " " );
        var_4 = [];

        for ( var_5 = 0; var_5 < var_3.size; var_5++ )
            var_4[var_4.size] = int( var_3[var_4.size] );

        for ( var_6 = 0; var_6 < var_4.size; var_6++ )
            level.vote_player_set[level.vote_player_set.size] = follow_players_when_close( var_4[var_6], var_0 );

        level.scr_arm_numnonrallyvehicles = var_4.size;
        return;
    }
    else if ( getdvarint( "scr_br_use_set_loadouts", 1 ) )
    {
        if ( getdvarint( "scr_br_verify_prematch_loadouts", 0 ) == 1 && getdvarint( "scr_br_prematch_loadout_set", -1 ) == -1 )
        {
            var_2 = 0;
            level.scr_arm_numnonrallyvehicles = var_1;
        }
        else
        {
            var_2 = int( randomint( var_1 - 1 ) * 0.1 ) * 10;

            if ( getdvarint( "scr_br_prematch_loadout_set", -1 ) != -1 )
                var_2 = getdvarint( "scr_br_prematch_loadout_set", -1 );

            var_1 = var_2 + 10;
        }
    }

    for ( var_7 = var_2; var_7 < var_1; var_7++ )
        level.vote_player_set[level.vote_player_set.size] = follow_players_when_close( var_7, var_0 );
}

follow_players_when_close( var_0, var_1 )
{
    var_2["loadoutArchetype"] = "archetype_assault";
    var_2["loadoutPrimary"] = tablelookup( var_1, 0, "loadoutPrimary", var_0 + 1 );
    var_2["loadoutPrimaryAttachment"] = tablelookup( var_1, 0, "loadoutPrimaryAttachment1", var_0 + 1 );
    var_2["loadoutPrimaryAttachment2"] = tablelookup( var_1, 0, "loadoutPrimaryAttachment2", var_0 + 1 );
    var_2["loadoutPrimaryAttachment3"] = tablelookup( var_1, 0, "loadoutPrimaryAttachment3", var_0 + 1 );
    var_2["loadoutPrimaryAttachment4"] = tablelookup( var_1, 0, "loadoutPrimaryAttachment4", var_0 + 1 );
    var_2["loadoutPrimaryAttachment5"] = tablelookup( var_1, 0, "loadoutPrimaryAttachment5", var_0 + 1 );
    var_2["loadoutPrimaryCamo"] = tablelookup( var_1, 0, "loadoutPrimaryCamo", var_0 + 1 );
    var_2["loadoutPrimaryReticle"] = tablelookup( var_1, 0, "loadoutPrimaryReticle", var_0 + 1 );
    var_2["loadoutSecondary"] = tablelookup( var_1, 0, "loadoutSecondary", var_0 + 1 );
    var_2["loadoutSecondaryAttachment"] = tablelookup( var_1, 0, "loadoutSecondaryAttachment1", var_0 + 1 );
    var_2["loadoutSecondaryAttachment2"] = tablelookup( var_1, 0, "loadoutSecondaryAttachment2", var_0 + 1 );
    var_2["loadoutSecondaryAttachment3"] = tablelookup( var_1, 0, "loadoutSecondaryAttachment3", var_0 + 1 );
    var_2["loadoutSecondaryAttachment4"] = tablelookup( var_1, 0, "loadoutSecondaryAttachment4", var_0 + 1 );
    var_2["loadoutSecondaryAttachment5"] = tablelookup( var_1, 0, "loadoutSecondaryAttachment5", var_0 + 1 );
    var_2["loadoutSecondaryCamo"] = tablelookup( var_1, 0, "loadoutSecondaryCamo", var_0 + 1 );
    var_2["loadoutSecondaryReticle"] = tablelookup( var_1, 0, "loadoutSecondaryReticle", var_0 + 1 );
    var_2["loadoutMeleeSlot"] = "none";
    var_2["loadoutEquipmentPrimary"] = tablelookup( var_1, 0, "loadoutEquipmentPrimary", var_0 + 1 );
    var_2["loadoutEquipmentSecondary"] = tablelookup( var_1, 0, "loadoutEquipmentSecondary", var_0 + 1 );
    var_2["loadoutStreakType"] = "assault";
    var_2["loadoutKillstreak1"] = "none";
    var_2["loadoutKillstreak2"] = "none";
    var_2["loadoutKillstreak3"] = "none";
    var_2["loadoutSuper"] = "super_br_extract";
    var_2["loadoutPerks"] = [ tablelookup( var_1, 0, "loadoutPerk1", var_0 + 1 ), tablelookup( var_1, 0, "loadoutPerk2", var_0 + 1 ), tablelookup( var_1, 0, "loadoutPerk3", var_0 + 1 ), tablelookup( var_1, 0, "loadoutExtraPerk1", var_0 + 1 ), tablelookup( var_1, 0, "loadoutExtraPerk2", var_0 + 1 ), tablelookup( var_1, 0, "loadoutExtraPerk3", var_0 + 1 ) ];
    var_2["loadoutGesture"] = "playerData";
    var_2["tableColumn"] = var_0;
    return var_2;
}

defineplayerloadout()
{
    level.br_loadouts["default"]["loadoutArchetype"] = "archetype_assault";
    level.br_loadouts["default"]["loadoutPrimary"] = "none";
    level.br_loadouts["default"]["loadoutPrimaryAttachment"] = "none";
    level.br_loadouts["default"]["loadoutPrimaryAttachment2"] = "none";
    level.br_loadouts["default"]["loadoutPrimaryCamo"] = "none";
    level.br_loadouts["default"]["loadoutPrimaryReticle"] = "none";
    level.br_loadouts["default"]["loadoutSecondary"] = "none";
    level.br_loadouts["default"]["loadoutSecondaryAttachment"] = "none";
    level.br_loadouts["default"]["loadoutSecondaryAttachment2"] = "none";
    level.br_loadouts["default"]["loadoutSecondaryCamo"] = "none";
    level.br_loadouts["default"]["loadoutSecondaryReticle"] = "none";
    level.br_loadouts["default"]["loadoutMeleeSlot"] = "iw8_fists_mp";
    level.br_loadouts["default"]["loadoutEquipmentPrimary"] = "none";
    level.br_loadouts["default"]["loadoutEquipmentSecondary"] = "none";
    level.br_loadouts["default"]["loadoutStreakType"] = "assault";
    level.br_loadouts["default"]["loadoutKillstreak1"] = "none";
    level.br_loadouts["default"]["loadoutKillstreak2"] = "none";
    level.br_loadouts["default"]["loadoutKillstreak3"] = "none";
    level.br_loadouts["default"]["loadoutSuper"] = "super_br_extract";
    level.br_loadouts["default"]["loadoutPerks"] = [ "specialty_null" ];
    level.br_loadouts["default"]["loadoutGesture"] = "playerData";
    level.br_loadouts["allies"] = level.br_loadouts["default"];
    level.br_loadouts["axis"] = level.br_loadouts["default"];
    level.br_respawn_loadout = level.br_loadouts["default"];
    level.br_respawn_loadout["loadoutSecondary"] = "iw8_pi_t9semiauto";
}

onprecachegametype()
{
    level._effect["vfx_gas_ring_player"] = loadfx( "vfx/iw8_cp/br_ring/vfx_gas_ring_player.vfx" );
    level._effect["vfx_gas_ring_puffy"] = loadfx( "vfx/iw8_cp/br_ring/vfx_gas_ring_puffy.vfx" );
    level._effect["vfx_br_infil_jump_smoke_01"] = loadfx( "vfx/iw8_br/gameplay/infil/vfx_br_infil_jump_smoke_01.vfx" );
    level._effect["vfx_br_infil_jump_wisp_01"] = loadfx( "vfx/iw8_br/gameplay/infil/vfx_br_infil_jump_wisp_01.vfx" );
    level._effect["vfx_br_infil_jump_wisp_02"] = loadfx( "vfx/iw8_br/gameplay/infil/vfx_br_infil_jump_wisp_02.vfx" );
    level._effect["vfx_gas_mask_break"] = loadfx( "vfx/iw8_br/gameplay/vfx_br_gasmask_dest.vfx" );
}

onstartgametype()
{
    level.blockweapondrops = 1;
    level.customlaststandactionset = "brlaststand";
    scripts\mp\playeractions::registeractionset( level.customlaststandactionset, [ "usability", "weapon_switch", "offhand_primary_weapons", "offhand_secondary_weapons", "killstreaks", "supers", "gesture", "allow_jump", "sprint", "crouch", "prone", "melee" ] );
    level.graceperiod = 3;
    level.ingraceperiod = level.graceperiod;
    level.prematchperiodend = 0;

    if ( !level.allowsupers )
        level.setsuperweapondisabled = ::_id_11F00;

    setclientnamemode( "auto_change" );

    foreach ( var_1 in level.teamnamelist )
    {
        scripts\mp\utility\game::setobjectivetext( var_1, &"OBJECTIVES/DM" );

        if ( level.splitscreen )
            scripts\mp\utility\game::setobjectivescoretext( var_1, &"OBJECTIVES/DM" );
        else
            scripts\mp\utility\game::setobjectivescoretext( var_1, &"OBJECTIVES/DM_SCORE" );

        scripts\mp\utility\game::setobjectivehinttext( var_1, &"OBJECTIVES/DM_HINT" );
    }

    initspawns();

    if ( !seq3_cleanup_leftovers() )
        scripts\mp\gametypes\br_circle.gsc::initcircle();

    scripts\mp\gametypes\br_weapons.gsc::br_ammo_init();
    scripts\mp\gametypes\br_c130.gsc::init();
    scripts\mp\gametypes\br_pickups.gsc::chopper_boss_fight_spawn_watcher();
    scripts\mp\gametypes\br_pickups.gsc::initpickupusability();
    scripts\mp\gametypes\br_functional_poi.gsc::init();
    scripts\mp\gametypes\br_callouts.gsc::init();

    if ( !seq3_cleanup_leftovers() )
        scripts\mp\gametypes\br_quest_util.gsc::init_quest_util();

    scripts\cp\vehicles\cargo_truck_mg_cp::calloutmarkerping_init();
    scripts\mp\gametypes\br_lootcache.gsc::brlootcache_init();
    scripts\mp\gametypes\br_events.gsc::cleanuppropcontrolshud();
    scripts\mp\gametypes\br_publicevents.gsc::init();
    scripts\mp\gametypes\br_challenges.gsc::init();
    scripts\mp\gametypes\br_alt_mode_escape.gsc::init();
    scripts\mp\gametypes\br_alt_mode_gxp.gsc::init();
    scripts\mp\gametypes\br_alt_mode_zai.gsc::init();
    scripts\mp\gametypes\br_alt_mode_zxp.gsc::init();
    scripts\mp\gametypes\br_containmentprotocol.gsc::init();
    scripts\mp\gametypes\br_satellite_hunt.gsc::init();
    scripts\mp\gametypes\br_alt_mode_bblitz.gsc::init();
    level.br_pickups.crates = [];
    level.br_pickups.outercrates = [];
    scripts\mp\gametypes\br_gulag.gsc::initgulag();
    scripts\cp_mp\utility\script_utility::registersharedfunc( "vehicle_compass", "shouldBeVisibleToPlayer", ::_id_12BFF );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "br", "superSlotCleanUp", scripts\mp\gametypes\br_pickups.gsc::_id_12594 );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "br", "challengeEvaluator", scripts\mp\gametypes\br_challenges.gsc::dialog_wait_ready );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "airdrop", "registerCrateForCleanup", ::airdrop_registercrateforcleanup );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "airdrop", "brLoadoutCrateFirstActivation", ::balloon_deposit_cash_nags );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "airdrop", "makeWeaponFromCrate", ::airdrop_makeweaponfromcrate );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "airdrop", "makeItemFromCrate", ::airdrop_makeitemfromcrate );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "airdrop", "makeItemsFromCrate", ::airdrop_makeitemsfromcrate );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "airdrop", "br_giveDropBagLoadout", ::airdrop_br_givedropbagloadout );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "airdrop", "brOnLoadoutCrateDestroyed", ::balloon_hint_logic );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "gasmask", "breakGasMaskBR", scripts\mp\gametypes\br_pickups.gsc::cleanupafterweaponswitch );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "game", "skipPlayerVO", ::convoy_turret );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "game", "playSoundToSquad", scripts\mp\gametypes\br_public.gsc::vehicle_isfriendlytoteam );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "game", "getSquadPlayers", scripts\mp\gametypes\br_public.gsc::minshotstostage3acc );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "game", "squadAsTeamEnabled", scripts\mp\menus::_id_1237A );
    _calloutmarkerping_handleluinotify_acknowledged::player_cam_disable();
    scripts\cp\vehicles\little_bird_mg_cp::playerregenhealthadd();
    initloot();
    level thread onprematchstarted();
    thread turnofftimer();
    level thread watchprematchdone();
    level thread scripts\mp\gametypes\br_vehicles.gsc::brvehiclesonstartgametype();
    thread scripts\mp\gametypes\br_gametype_dmz.gsc::_id_12E02();
    level thread updateplayerlocationcallouts();
    scripts\mp\utility\lui_game_event_aggregator::registeronluieventcallback( ::brdpadcallback );
    scripts\mp\utility\disconnect_event_aggregator::registerondisconnecteventcallback( ::onplayerdisconnect );
    scripts\mp\utility\lui_game_event_aggregator::registeronluieventcallback( ::nuke_carrier_last_transform );

    if ( clean_up_vandalize() )
    {
        thread scripts\mp\gametypes\br_rewards.gsc::initdropbagsystem();
        thread cleanupdropbagsoncircle();
    }

    level.killstreakbeginusefunc = ::clients;
    scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "onStartGameType" );
}

_id_12BFF( var_0, var_1 )
{
    return 1;
}

enable_super()
{
    var_0 = getentarray( "grenade", "classname" );

    foreach ( var_2 in var_0 )
    {
        if ( isdefined( var_2 ) && isdefined( var_2.weapon_name ) && var_2.weapon_name == "molotov_mp" )
            thread scripts\mp\equipment\molotov::showteamtanks( var_2 );
    }
}

successfulteams()
{
    scripts\mp\flags::gameflagwait( "prematch_fade_done" );

    if ( !istrue( level._id_120B6 ) )
    {
        level thread resetalldoors( 2.1 );
        level thread scripts\cp\equipment\cp_incendiarylauncher::deathcashcollected( 1 );
        level thread scripts\mp\gametypes\br_vehicles.gsc::brvehicleonprematchstarted();
        level thread scripts\cp\vehicles\little_bird_mg_cp::eggtrigger();
    }

    level thread scripts\mp\gametypes\br_functional_poi.gsc::onprematchdone();

    if ( !istrue( level._id_120B6 ) )
    {
        enable_super();
        scripts\mp\gametypes\br_vehicles.gsc::emptyallvehicles();

        if ( !istrue( level.br_infils_disabled ) )
        {
            foreach ( var_1 in level.players )
            {
                var_1 scripts\mp\gametypes\br_infils.gsc::setplayerprematchallows();
                var_1 thread scripts\mp\gametypes\br_pickups.gsc::resetplayerinventory();

                if ( istrue( var_1.hasspawned ) )
                {
                    if ( istrue( var_1.usingascender ) )
                        var_1 scripts\cp_mp\auto_ascender::bot_loadout_choose_from_custom_default_class();

                    var_1 thread scripts\mp\weapons::deleteplacedequipment( 1 );
                }
            }
        }

        foreach ( var_1 in level.players )
        {
            if ( isdefined( var_1.burninginfo ) )
                var_1 scripts\mp\equipment\molotov::molotov_clear_burning();

            var_1 scripts\mp\javelin::redbuttonused();
        }

        level notify( "prematch_cleanup" );
    }

    level.getwincost = 0;

    foreach ( var_7, var_6 in level.br_prematchloot )
        var_6 setscriptablepartstate( level.br_prematchlootparts[var_7], "visible" );

    level.br_prematchloot = undefined;
    level.br_prematchlootparts = undefined;

    if ( !scripts\mp\gametypes\br_public.gsc::isusinginfilselection() && clean_up_strafe() )
        scripts\mp\gametypes\br_infils.gsc::classselectionbeginnonexclusion();

    var_8 = getdvarint( "wsow_event_dvar_hot_reload", 0 );

    if ( istrue( var_8 ) )
        _id_119D6();

    if ( !istrue( level.br_circle_disabled ) )
        level thread scripts\mp\gametypes\br_circle.gsc::_id_11BE8( 1 );
}

_id_119D6()
{
    if ( !istrue( getdvarint( "scr_br_gulag", 1 ) ) )
    {
        if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "gulag" ) )
            level scripts\mp\gametypes\br_gametypes.gsc::give_fists( "gulag" );

        level.usegulag = 0;
        setomnvar( "ui_gulag_state", 0 );
        setomnvar( "ui_gulag_show_closing_state", 2 );
    }

    if ( !istrue( level.br_circle_disabled ) )
    {
        level scripts\mp\gametypes\br_circle.gsc::bombs_setup();
        level thread scripts\mp\gametypes\br_circle.gsc::additionalrecondronetargets();
    }
}

onprematchstarted()
{
    level thread successfulteams();
    var_0 = undefined;

    if ( !istrue( level.br_infils_disabled ) && !scripts\mp\gametypes\br_public.gsc::isusinginfilselection() )
    {
        if ( scripts\mp\gametypes\br_gametypes.gsc::progress_obj( "createC130PathStruct" ) )
            var_0 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "createC130PathStruct" );
        else
            var_0 = scripts\mp\gametypes\br_c130.gsc::createtestc130path();
    }

    if ( !istrue( level._id_120B6 ) && !scripts\cp_mp\utility\game_utility::isrealismenabled() )
    {
        foreach ( var_2 in level.teamnamelist )
        {
            setteamradar( var_2, 1 );
            setteamradarstrength( var_2, 1 );
        }
    }

    if ( scripts\mp\utility\game::missions_clearinappropriaterewards() != "zxp" )
        thread scripts\mp\music_and_dialog::stopsuspensemusic();

    level waittill( "prematch_started" );

    if ( seq3_cleanup_leftovers() )
    {
        scripts\mp\gametypes\br_circle.gsc::initcircle();
        scripts\mp\gametypes\br_quest_util.gsc::init_quest_util();
    }

    if ( !istrue( level._id_120B6 ) )
    {
        var_4 = getdvarint( "scr_br_radar_strength", 0 );

        foreach ( var_2 in level.teamnamelist )
        {
            if ( var_4 )
            {
                setteamradar( var_2, 1 );
                setteamradarstrength( var_2, var_4 );
                continue;
            }

            setteamradar( var_2, 0 );
            setteamradarstrength( var_2, 0 );
        }
    }

    var_7 = 0;
    level.checkpoint_add_carepackage = 0;
    level.checkunscoredspawnpoint = 0;

    if ( !istrue( level.br_infils_disabled ) )
    {
        if ( !istrue( level.infilcanusec130 ) && !istrue( level.infilcanusemap ) )
            level.infilcanusec130 = 1;

        if ( istrue( level.infilcanusemap ) )
        {
            if ( clean_up_vandalize() && !clampstepbulletdamage() )
                scripts\mp\gametypes\br_rewards.gsc::vo_one_remain( 1 );

            scripts\mp\gametypes\br_infils.gsc::spawnselectioninfil( "player" );
            waitframe();

            foreach ( var_9 in level.players )
            {
                var_9 stopanimscriptsceneevent();
                var_9 notify( "infil_jump_done" );

                if ( !var_9.brmapselectionafk )
                {
                    var_9 thread scripts\mp\gametypes\br_infils.gsc::_id_126BB();
                    continue;
                }

                var_9 thread sendafksquadmembertogulag();
            }
        }

        setdvarifuninitialized( "scr_br_use_script_model_infil", 0 );

        if ( scripts\mp\gametypes\br_gametypes.gsc::progress_obj( "infilSequence" ) )
            scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "infilSequence" );
        else if ( istrue( level.infilcanusec130 ) && !istrue( level.infilcanusemap ) )
        {
            var_11 = undefined;

            if ( scripts\mp\gametypes\br_gametypes.gsc::progress_obj( "getInfilPlayers" ) )
                var_11 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "getInfilPlayers" );

            if ( !getdvarint( "scr_br_use_script_model_infil", 0 ) )
                scripts\mp\gametypes\br_infils.gsc::bufferedammoboxdata( var_0, "player", var_11 );
            else
            {
                scripts\mp\gametypes\br_infils.gsc::bufferedammoboxdata( var_0, "script_model" );

                if ( isdefined( level.infilstruct ) && isdefined( level.infilstruct.transporttime ) )
                    var_7 = level.infilstruct.transporttime;
            }

            level thread scripts\mp\gametypes\br_c130.gsc::waittoplayinfildialog();
        }
    }
    else
    {
        if ( scripts\mp\gametypes\br_gametypes.gsc::progress_obj( "skipInfilSequence" ) )
            scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "skipInfilSequence" );

        scripts\mp\flags::gameflagset( "prematch_fade_done" );
        waitframe();
        level.allowprematchdamage = 0;
        var_11 = undefined;

        if ( scripts\mp\gametypes\br_gametypes.gsc::progress_obj( "getInfilPlayers" ) )
            var_11 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "getInfilPlayers" );

        if ( !isdefined( var_11 ) || var_11.size > 0 )
            scripts\mp\gametypes\br_infils.gsc::_id_12DFE( var_11 );

        foreach ( var_9 in level.players )
        {
            var_9.plotarmor = undefined;
            var_9 skydive_setdeploymentstatus( 1 );
            var_9 skydive_setbasejumpingstatus( 1 );
        }

        scripts\mp\flags::gameflagset( "br_ready_to_jump" );
    }

    level thread notstand();
    level thread nuke_mercyending_think();

    if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "teamSpectate" ) )
        level thread scripts\mp\gametypes\br_spectate.gsc::spectate_init();

    level.br_prematchstarted = 1;
    level notify( "infils_ready" );
}

nuke_mercyending_think()
{
    if ( scripts\mp\utility\game::race_set_checkpoint() )
        return;

    scripts\mp\scoreboard::wait_until_truck_arrives_at_station();

    if ( getdvarint( "MTKSQRQLKN" ) != 0 )
    {
        if ( scripts\mp\utility\game::matchmakinggame() && !scripts\mp\utility\game::privatematch() )
            setclientmatchdata( "isPublicMatch", 1 );
        else
            setclientmatchdata( "isPublicMatch", 0 );
    }

    level scripts\engine\utility::waittill_notify_or_timeout( "br_c130_left_bounds", 120 );
    scripts\mp\scoreboard::wait_until_truck_arrives_at_station();
}

notstand()
{
    level endon( "game_ended" );

    if ( clean_up_vandalize() && clampstepbulletdamage() )
    {
        if ( !scripts\mp\gametypes\br_public.gsc::rear_minigun_model() && !scripts\mp\gametypes\br_public.gsc::processvoqueue() )
        {
            var_0 = clear_and_give_killstreak_loadout_assault();
            scripts\mp\gametypes\br_rewards.gsc::get_track_controller_struct( var_0 );

            if ( scripts\mp\gametypes\br_gametypes.gsc::propsetflashesleft( "dropBagLoop" ) )
            {
                for (;;)
                    scripts\mp\gametypes\br_rewards.gsc::get_track_controller_struct( var_0 );
            }
        }
    }

    level.dropbagstruct = undefined;
}

resetalldoors( var_0 )
{
    level endon( "game_ended" );

    if ( isdefined( var_0 ) )
        wait( var_0 );

    clean_up_laser_trap_ents( 200 );
}

nuke_carrier_last_transform( var_0, var_1 )
{
    if ( isdefined( var_0 ) && var_0 == "exit_squad_eliminated" )
        self setclientomnvar( "ui_br_squad_eliminated_active", 0 );
}

updateplayerlocationcallouts()
{
    level endon( "game_ended" );
    level.calloutglobals.calloutzones = getentarray( "location_volume", "targetname" );

    if ( !level.calloutglobals.calloutzones.size )
        return;

    for (;;)
    {
        var_0 = 0;

        foreach ( var_2 in level.players )
        {
            if ( !isplayer( var_2 ) || !isalive( var_2 ) )
                continue;

            if ( isdefined( var_2.br_currentcalloutzone ) && var_2 istouching( var_2.br_currentcalloutzone ) )
                continue;

            var_3 = 0;

            foreach ( var_5 in level.calloutglobals.calloutzones )
            {
                if ( var_2 istouching( var_5 ) )
                {
                    var_3 = 1;
                    var_2.br_currentcalloutzone = var_5;
                    var_2 scripts\mp\callouts::setplayercalloutarea( var_5.script_noteworthy );
                    var_2 thread scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "onEnterCalloutArea", var_5.script_noteworthy );
                    break;
                }
            }

            if ( !var_3 )
            {
                var_2.br_currentcalloutzone = undefined;
                var_2 scripts\mp\callouts::setplayercalloutarea( "none" );
            }

            var_0 = ( var_0 + 1 ) % 2;

            if ( var_0 == 0 )
                waitframe();
        }

        waitframe();
    }
}

getusingproxdoors()
{
    return 0;
}

watchprematchdone()
{
    scripts\mp\flags::gameflagwait( "prematch_fade_done" );
    level notify( "br_prematchEnded" );
    var_0 = scripts\mp\utility\game::getlivingplayers();
    level.totalplayers = var_0.size;
    var_1 = 0;

    foreach ( var_3 in level.teamnamelist )
    {
        if ( scripts\mp\utility\teams::getteamdata( var_3, "aliveCount" ) > 0 )
            var_1++;
    }

    level._id_12492 = max( 1, var_1 );
    level.vo_use_computer = gettime();
    level.recordfinalkillcam = 1;
    level.ignorescoring = 0;
    level.disableweaponstats = 0;
    level.disablestattracking = 0;
    level.prematchaddkillfunc = undefined;
    level.dialogueindex = 0;
    clean_up_func();

    foreach ( var_6 in level.players )
        var_6 _id_11A74();

    if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetflashesleft( "allowLateJoiners" ) )
    {
        level.allowlatecomers = 0;
        setnojiptime( 1, 1 );
        setnojipscore( 1, 1 );
    }

    vehicle_getarrayinradius();
    setomnvar( "scriptable_loot_hide", 0 );

    foreach ( var_6 in level.players )
    {
        var_6 setclientdvar( "MQNNLTKNTS", 1 );

        if ( isalive( var_6 ) )
        {
            var_6.health = var_6.maxhealth;
            var_6 scripts\cp\helicopter\chopper_boss::_id_12478( "alive_not_downed" );
        }
    }

    scripts\mp\gametypes\br_analytics.gsc::chosencodephones( var_0.size );
    level _id_11ED9();
}

turnofftimer()
{
    wait 1;
    setomnvar( "ui_match_timer_hidden", 1 );
}

initspawns()
{
    scripts\mp\spawnlogic::setactivespawnlogic( "FreeForAll", "Crit_Default" );
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );
}

playerzombiedovehicledamageimmunity()
{
    if ( !scripts\mp\gametypes\br_public.gsc::processvoqueue() )
    {
        level.startingspawns = scripts\mp\spawnlogic::getspawnpointarray( "mp_dm_spawn_start" );

        if ( level.startingspawns.size == 0 )
            level.startingspawns = scripts\mp\spawnlogic::getspawnpointarray( "mp_tdm_spawn_allies_start" );

        level.prematchspawnorigins = getprematchlocationspawnorigins();
    }
}

debugspawnlocations()
{
    for (;;)
    {
        foreach ( var_1 in level.prematchspawnorigins )
        {
            [var_3, var_4] = getprematchradius( var_1 );

            if ( var_3 > 0 )
            {

            }
        }

        waitframe();
    }
}

_id_12B75()
{
    var_0 = getdvarint( "scr_useProfileSpawn", 0 ) != 0;
    return ( !istrue( level.br_prematchstarted ) || istrue( level.checkforammoquickdrop ) ) && !istrue( level.skipprematchdropspawn ) && !var_0 && !istrue( level.play_travel_vo );
}

getspawnpoint( var_0 )
{
    if ( isdefined( self.wait_display_pavelow_boss_health_bar ) )
    {
        var_1 = self.wait_display_pavelow_boss_health_bar;
        self.wait_display_pavelow_boss_health_bar = undefined;
        return var_1;
    }

    if ( isdefined( self.playerstartjailsetcontrols ) )
    {
        var_1 = self.playerstartjailsetcontrols;
        return var_1;
    }

    if ( !isdefined( level.prematchspawnorigins ) )
        playerzombiedovehicledamageimmunity();

    if ( istrue( var_0 ) || _id_12B75() )
    {
        var_2 = ( 0, randomintrange( 0, 360 ), 0 );
        var_3 = getprematchspawnorigin();
        [var_5, var_6] = getprematchradius( var_3 );
        var_7 = randomfloatrange( var_5, var_6 );

        if ( getdvarint( "scr_br_streamFurthestInitial", 0 ) == 1 )
        {
            var_8 = vectortoangles( var_3.origin );
            var_2 = ( 0, var_8[1], 0 ) * -1;
            var_7 = var_6;
        }

        if ( isdefined( var_3.angles ) )
            var_2 = var_3.angles;

        var_9 = anglestoforward( var_2 ) * -1;
        var_10 = var_9 * var_7;
        var_11 = var_3.origin + var_10;

        if ( isdefined( self.setspawnpoint ) )
        {
            var_12 = scripts\mp\gametypes\br_infils.gsc::getinfilspawnoffset();
            var_11 = self.setspawnpoint.playerspawnpos + ( 0, 0, var_12 );
            var_2 = self.setspawnpoint.playerspawnangles;
            scripts\mp\equipment\tac_insert::_id_122E2( 0, 1 );
        }

        var_1 = spawnstruct();
        var_1.origin = var_11;
        var_1.angles = var_2;
        var_1.index = -1;
        return var_1;
    }

    var_13 = level.startingspawns;
    var_1 = scripts\mp\spawnlogic::getspawnpoint_random( var_13 );

    if ( !isdefined( var_1 ) )
    {
        var_1 = spawnstruct();
        var_1.origin = ( 0, 0, 0 );
        var_1.angles = ( 0, 0, 0 );
        var_1.index = -1;
    }

    return var_1;
}

createspawnlocation( var_0, var_1, var_2 )
{
    var_3 = spawnstruct();
    var_3.origin = var_0;
    var_3.minradius = var_1;
    var_3.radius = var_2;
    return var_3;
}

getprematchlocationspawnorigins()
{
    var_0 = 0;
    var_1 = scripts\engine\utility::getstructarray( "br_prematch_insertion_point", "targetname" );

    if ( isdefined( level.chopper_boss_player_monitor ) )
    {
        var_0 = 1;
        var_1 = level.chopper_boss_player_monitor;
    }
    else if ( !var_1.size )
    {
        var_0 = 1;
        var_1 = getentarray( "vehicle_volume", "script_noteworthy" );
    }

    foreach ( var_3 in var_1 )
    {
        var_3.groundorigin = var_3.origin;

        if ( !isdefined( var_3.radius ) )
            var_3.radius = 5000;

        if ( !isdefined( var_3.minradius ) )
            var_3.minradius = 500;
    }

    var_5 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "prematchSpawnMaxLocations" );

    if ( !isdefined( var_5 ) )
        var_5 = getdvarint( "scr_br_maxprematchlocations", 5 );

    if ( var_5 > 0 && var_5 < var_1.size )
        var_1 = scripts\engine\utility::array_slice( scripts\engine\utility::array_randomize( var_1 ), 0, var_5 );

    foreach ( var_3 in var_1 )
    {
        if ( var_0 )
        {
            var_3.origin = getoffsetspawnorigin( var_3.origin );
            continue;
        }

        var_7 = getoffsetspawnorigin( var_3.origin )[2];

        if ( var_3.origin[2] < var_7 )
            var_3.origin = ( var_3.origin[0], var_3.origin[1], var_7 );
    }

    return var_1;
}

getoffsetspawnorigin( var_0, var_1 )
{
    var_2 = scripts\engine\trace::create_default_contents( 1 );
    var_3 = ( 0, 0, 5000 );
    var_4 = var_0 + var_3;
    var_5 = var_0 - var_3;
    var_6 = scripts\engine\trace::ray_trace( var_4, var_5, undefined, var_2 );
    var_7 = var_0;

    if ( var_6["hittype"] != "hittype_none" )
        var_7 = var_6["position"];

    if ( !isdefined( var_1 ) )
    {
        var_8 = scripts\mp\gametypes\br_infils.gsc::getinfilspawnoffset();
        var_1 = ( 0, 0, var_8 );
    }

    return var_7 + var_1;
}

maxelderrank( var_0, var_1 )
{
    var_2 = 5000;
    var_3 = -5000;
    var_4 = scripts\mp\gametypes\br_public.gsc::helihint_deposit( var_0, var_2, var_3 );

    if ( !isdefined( var_1 ) )
    {
        var_5 = scripts\mp\gametypes\br_infils.gsc::getinfilspawnoffset();
        var_1 = ( 0, 0, var_5 );
    }

    return var_4 + var_1;
}

make_place_c4_interact()
{
    var_0 = int( 150 / scripts\mp\gametypes\br_public.gsc::matchdata_logplayerdata() );
    return var_0;
}

getprematchspawnorigin()
{
    var_0 = scripts\mp\gametypes\br_gametypes.gsc::propsetflashesleft( "doFirstUnusedPrematchSpawnOrigin" );

    if ( istrue( var_0 ) && isdefined( level.voting ) )
    {
        var_1 = 0;

        for ( var_2 = 0; var_2 < level.prematchspawnorigins.size; var_2++ )
        {
            if ( level.voting[var_2] < level.voting[var_1] )
                var_1 = var_2;
        }

        level.voting[var_1]++;
        var_3 = level.prematchspawnorigins[var_1];
        return var_3;
    }

    if ( !isdefined( level.prematchspawnoriginnextidx ) )
    {
        if ( scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "randomizePrematchSpawnOriginNextIdx" ) )
            level.prematchspawnoriginnextidx = 0;
        else
            level.prematchspawnoriginnextidx = randomint( level.prematchspawnorigins.size );

        level.vstartposition = [];

        for ( var_2 = 0; var_2 < level.prematchspawnorigins.size; var_2++ )
            level.vstartposition[var_2] = 0;
    }

    var_3 = scripts\mp\gametypes\br_public.gsc::minplunderdropondeath( self.sessionteam, self.squadindex, "prematchSpawnOrigin" );

    if ( !isdefined( var_3 ) )
    {
        var_3 = level.prematchspawnorigins[level.prematchspawnoriginnextidx];
        scripts\mp\gametypes\br_public.gsc::_id_11EFC( self.sessionteam, self.squadindex, "prematchSpawnOrigin", var_3 );
        level.vstartposition[level.prematchspawnoriginnextidx]++;
        var_4 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "prematchSpawnNumTeamsPerLocation" );

        if ( !isdefined( var_4 ) )
        {
            var_5 = make_place_c4_interact();
            var_4 = int( var_5 / level.prematchspawnorigins.size );
        }

        if ( level.vstartposition[level.prematchspawnoriginnextidx] >= var_4 )
            level.prematchspawnoriginnextidx = ( level.prematchspawnoriginnextidx + 1 ) % level.prematchspawnorigins.size;
    }

    var_6 = getdvarint( "scr_br_overrideprematchspawn", -1 );

    if ( var_6 >= 0 && var_6 < level.prematchspawnorigins.size )
        var_3 = level.prematchspawnorigins[var_6];

    return var_3;
}

onplayerconnect( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_0.ui_dom_securing = undefined;
    var_0.ui_dom_stalemate = undefined;
    var_0.needtoplayintro = undefined;
    var_0.br_infil_type = undefined;
    var_0.equipment = [];
    var_0.checkreload = 1;
    var_0 thread scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_init();
    var_0 scripts\cp\equipment\cp_incendiarylauncher::calloutmarkerping_initplayer();

    if ( scripts\mp\gametypes\br_gametypes.gsc::progress_obj( "playerWelcomeSplashes" ) )
        var_0 thread scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "playerWelcomeSplashes" );
    else
        var_0 thread vehicle_compass_deregisterinstance();

    var_0 _id_11A74();
    scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "onPlayerConnect", var_0 );

    if ( !istrue( level.prematchstarted ) )
    {
        var_0.radarmode = "slow_radar";
        level waittill( "prematch_started" );
        wait 1.4;
    }

    if ( !isdefined( var_0.streakdata ) )
        waittillframeend;

    if ( isdefined( var_0 ) )
    {
        if ( !scripts\mp\gametypes\br_public.gsc::prophasclonesleft() && !scripts\mp\gametypes\br_public.gsc::rear_minigun_model() && !scripts\mp\gametypes\br_public.gsc::processvoqueue() && !scripts\mp\utility\game::race_set_checkpoint() )
        {
            if ( !istrue( level._id_120B6 ) )
            {
                var_0 scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();
                var_0 scripts\mp\gametypes\br_pickups.gsc::resetplayerinventory();
            }

            var_0 scripts\cp_mp\utility\game_utility::startkeyearning();
        }

        if ( !scripts\mp\gametypes\br_public.gsc::rear_minigun_model() && !scripts\mp\gametypes\br_public.gsc::prophasclonesleft() && scripts\mp\utility\game::missions_clearinappropriaterewards() != "dmz" && !scripts\mp\utility\game::race_set_checkpoint() )
            var_0 thread smoke_init();

        var_1 = getdvar( "scr_br_radar_mode", "" );

        if ( var_1 != "" )
            var_0.radarmode = var_1;
        else
            var_0.radarmode = "normal_radar";

        scripts\mp\gametypes\br_quest_util.gsc::onplayerconnect( var_0 );
        playersplash( var_0 );
    }
}

vehicle_compass_deregisterinstance()
{
    self endon( "disconnect" );
    self waittill( "spawned_player" );
    wait 1;

    if ( !istrue( game["liveLobbyCompleted"] ) )
    {
        scripts\mp\hud_message::showsplash( "br_prematch_welcome" );

        if ( istrue( level.recently_spawned_vehicle ) )
            self setplayermusicstate( "event01_lobby" );
    }

    if ( !istrue( level.br_infils_disabled ) )
    {
        self waittill( "br_jump" );

        while ( !self isonground() )
            waitframe();
    }
    else
        level waittill( "prematch_done" );

    scripts\mp\gametypes\br_analytics.gsc::choppersupport_watchleashrange( self );
    wait 1;
    scripts\mp\gametypes\br_public.gsc::cloud_cover( "primary_objective", self, 0 );
}

onspawnplayer()
{
    self notify( "br_spawned" );
    var_0 = istrue( self.gulag );
    scripts\mp\gametypes\br_pickups.gsc::initplayer( var_0 );
    scripts\mp\gametypes\br_functional_poi.gsc::initplayer();

    if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "armor" ) )
        scripts\mp\gametypes\br_armor.gsc::playerpowerscleanupkeybindings();

    if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "teamSpectate" ) )
        scripts\mp\gametypes\br_spectate.gsc::initplayer();

    self.oldprimarygun = undefined;
    self.newprimarygun = undefined;
    self.healthregendisabled = 0;
    self.br_lastscenecheck = gettime();
    self.needtoplayintro = undefined;
    self.gunnlessweapon = undefined;
    self.cleanup_lights = undefined;
    self.wait_for_one_player_near_point = undefined;

    if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "waitLoadoutDone" ) )
        thread waitloadoutdone();

    level.superdelay = 0;
    level.superpointsmod = 1;
    self.br_perks = [ 0, 0, 0, 0, 0 ];
    self.br_perkpoints = 0;

    if ( level.targetsite )
        self skydive_cutautodeployon();
    else
        self skydive_cutautodeployoff();

    if ( level.targetsshot )
        self skydive_cutparachuteon();
    else
        self skydive_cutparachuteoff();

    if ( getdvarint( "scr_br_hudoutlineForTeammates", 0 ) > 0 )
        level thread combo_reset( self );

    scripts\mp\gametypes\br_public.gsc::_id_11EDC( 0 );
    scripts\mp\gametypes\br_public.gsc::_id_11EDA( 0 );
    _id_12B2D( self, self, 0, 1 );
    level thread _id_12B17();
}

waittill_return( var_0, var_1 )
{
    if ( var_0 != "death" )
        self endon( "death" );

    var_1 endon( "die" );
    self waittill( var_0, var_2, var_3 );
    var_1 notify( "returned", var_2, var_3, var_0 );
}

waittill_confirm_or_cancel( var_0, var_1, var_2 )
{
    if ( ( !isdefined( var_0 ) || var_0 != "death" ) && ( !isdefined( var_1 ) || var_1 != "death" ) )
        self endon( "death" );

    var_3 = spawnstruct();

    if ( isdefined( var_0 ) )
        childthread waittill_return( var_0, var_3 );

    if ( isdefined( var_1 ) )
        childthread waittill_return( var_1, var_3 );

    if ( isdefined( var_2 ) )
        childthread waittill_return( var_2, var_3 );

    var_3 waittill( "returned", var_4, var_5, var_6 );
    var_3 notify( "die" );
    var_7 = spawnstruct();
    var_7.location = var_4;
    var_7.angles = var_5;
    var_7.string = var_6;
    return var_7;
}

_id_127C2( var_0 )
{
    var_1 = var_0 + ( 0, 0, 10000 );
    var_2 = var_0 - ( 0, 0, 10000 );
    var_3 = scripts\cp_mp\vehicles\vehicle_tracking::vehicle_tracking_getgameinstancesforall();
    var_4 = level.activekillstreaks;
    var_5 = scripts\engine\utility::array_combine( var_3, var_4 );
    var_6 = scripts\engine\trace::create_contents( 0, 1, 0, 1, 1, 0, 0, 0, 0 );
    return scripts\engine\trace::ray_trace( var_1, var_2, var_5, var_6, 0, 1 );
}

giveprematchloadout()
{
    self endon( "death_or_disconnect" );

    if ( !istrue( level.br_prematchffa ) )
        return;

    waitframe();

    if ( !level.allowsupers && !istrue( level.monitor_hack_prox ) || getdvar( "scr_br_gametype", "" ) == "reveal" )
    {
        scripts\mp\gametypes\br_pickups.gsc::_id_11A84();
        scripts\mp\gametypes\br_pickups.gsc::forcegivesuper( "super_ammo_drop", 0 );
    }
}

givematchloadout( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 0.5;

    if ( !isdefined( var_1 ) )
        var_1 = 20;

    var_2 = self;
    var_3 = var_2 scripts\mp\class::loadout_getorbuildclassstruct( var_2.class );

    if ( !isdefined( var_3 ) )
        return;

    var_2.prevweaponobj = undefined;
    var_2 scripts\mp\class::loadout_clearperks();
    var_2 scripts\mp\class::loadout_updateplayerperks( var_3 );
    monitor_game_end_on_front_truck_death( var_2 );
    var_4 = 0;

    if ( isdefined( var_3.loadoutsecondaryobject ) && !nullweapon( var_3.loadoutsecondaryobject ) )
    {
        scripts\mp\gametypes\br_weapons.gsc::br_forcegivecustomweapon( var_2, var_3.loadoutsecondaryobject, var_3.loadoutsecondaryfullname, var_3.loadoutsecondary, var_0, var_1 );
        var_4++;
    }

    if ( isdefined( var_3.loadoutprimaryobject ) && !nullweapon( var_3.loadoutprimaryobject ) )
    {
        scripts\mp\gametypes\br_weapons.gsc::br_forcegivecustomweapon( var_2, var_3.loadoutprimaryobject, var_3.loadoutprimaryfullname, var_3.loadoutprimary, var_0, var_1 );
        var_4++;
    }

    if ( var_4 > 1 )
        var_2 takeweapon( "iw8_fists_mp" );

    var_5 = [];

    if ( isdefined( var_3.loadoutequipmentprimary ) )
        var_5[var_5.size] = var_3.loadoutequipmentprimary;

    if ( isdefined( var_3.loadoutequipmentsecondary ) )
        var_5[var_5.size] = var_3.loadoutequipmentsecondary;

    foreach ( var_7 in var_5 )
    {
        if ( isdefined( level.br_pickups.br_equipnametoscriptable[var_7] ) )
        {
            var_8 = level.br_pickups.br_equipnametoscriptable[var_7];
            scripts\mp\gametypes\br_pickups.gsc::br_forcegivecustompickupitem( var_2, var_8, 1 );
        }
    }
}

givematchloadoutfordropbags()
{
    var_0 = self;
    var_0.prevweaponobj = undefined;
    var_0 scripts\mp\class::loadout_clearperks();
    monitor_game_end_on_front_truck_death( var_0 );
}

prematchdeployparachute()
{
    self endon( "disconnect" );

    while ( self.sessionstate != "playing" )
        waitframe();

    thread scripts\cp_mp\parachute::startfreefall( 2, 0, undefined, undefined, 1, 0 );
}

getprematchradius( var_0 )
{
    var_1 = var_0.radius;
    var_2 = var_0.minradius;
    var_3 = getdvarint( "scr_br_prematch_spawn_max_radius", -1 );

    if ( var_3 >= 0 )
        var_1 = var_3;

    var_3 = getdvarint( "scr_br_prematch_spawn_min_radius", -1 );

    if ( var_3 >= 0 )
        var_2 = var_3;

    if ( var_2 >= var_1 )
        var_1 = var_2 + 1;

    return [ var_2, var_1 ];
}

monitor_game_end_on_front_truck_death( var_0 )
{
    if ( istrue( level.issidehouseobjective ) )
        return;

    if ( !level.teambased )
        return;

    var_1 = level.maxteamsize == 1;
    var_2 = istrue( var_0.obj_room_fire_06 );

    if ( var_1 && !var_2 && !istrue( level.binoculars_onstateexitfunc ) )
        return;

    if ( !propcamerazoom( var_0 ) )
        return;

    if ( var_0 scripts\mp\utility\perk::_hasperk( "specialty_pistoldeath" ) )
        return;

    if ( scripts\mp\utility\game::getgametype() != "br" )
        return;

    var_0 scripts\mp\utility\perk::giveperk( "specialty_pistoldeath" );
}

monitor_traversal_timer( var_0 )
{
    if ( !propcamerazoom( var_0 ) )
        return;

    if ( !var_0 scripts\mp\gametypes\br_public.gsc::obj_room_fire_08() )
        return;

    if ( scripts\mp\utility\game::getgametype() != "br" )
        return;

    var_0 scripts\mp\perks\perks::analytics_lui_mission_end_dlog();
}

waitloadoutdone()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "death" );
    self waittill( "giveLoadout" );

    if ( scripts\mp\gametypes\br_public.gsc::rear_minigun_model() || scripts\mp\gametypes\br_public.gsc::prophasclonesleft() )
        return;

    if ( scripts\mp\gametypes\br_public.gsc::processvoqueue() )
    {
        if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "armor" ) )
            scripts\mp\gametypes\br_armor.gsc::monitor_truck();

        return;
    }

    if ( !istrue( level.br_prematchstarted ) )
    {
        thread giveprematchloadout();

        if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "armor" ) )
            scripts\mp\gametypes\br_armor.gsc::monitor_truck();

        if ( !istrue( self.votesys_new ) )
        {
            self.votesys_new = 1;
            scripts\engine\utility::delaythread( 1.0, scripts\mp\gametypes\br_public.gsc::cloud_cover, "prematch_enter", self );
            var_0 = game["music"]["br_lobby_intro"].size - 1;
            var_1 = randomint( var_0 );
            self setplayermusicstate( game["music"]["br_lobby_intro"][var_1] );
        }

        var_2 = getdvarint( "scr_useProfileSpawn", 0 ) != 0;

        if ( istrue( level.infilcanusemap ) && !var_2 )
        {
            level waittill( "begin_infil_map_selection" );
            scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();
            scripts\mp\gametypes\br_pickups.gsc::resetplayerinventory();
        }

        level waittill( "infils_ready" );

        if ( level.allowsupers )
            scripts\mp\supers::clearsuper( 0 );
    }

    scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();
    var_3 = istrue( self.gulag ) || scripts\mp\gametypes\br_public.gsc::rear_minigun_model() || istrue( self._id_11AA7 );
    scripts\mp\gametypes\br_pickups.gsc::resetplayerinventory( var_3 );

    if ( !var_3 && !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "armor" ) )
        scripts\mp\gametypes\br_armor.gsc::monitor_truck();

    monitor_game_end_on_front_truck_death( self );

    if ( istrue( self.isrespawn ) )
        return;

    if ( istrue( self.gulag ) || istrue( self._id_11AA7 ) )
        return;

    if ( !istrue( level.br_infils_disabled ) && !istrue( self.rewardmodifier ) )
        thread scripts\mp\gametypes\br_infils.gsc::setplayerprematchallows();
}

onplayerscore( var_0, var_1, var_2, var_3 )
{
    return var_2;
}

brmodifyplayerdamage( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 )
{
    if ( level.tacticalmode )
        var_3 = scripts\mp\damage::gamemodemodifyplayerdamage( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 );

    if ( var_1 scripts\mp\gametypes\br_public.gsc::isplayeringulag() && istrue( var_1.gulagarena ) && getdvarint( "scr_gulag_mp_damage", 1 ) )
        return var_3;

    if ( !isdefined( var_10 ) )
        var_10 = var_3;

    if ( var_3 > 0 )
    {
        if ( istrue( var_1.playlandingbreath ) )
            var_1 notify( "br_try_armor_cancel" );

        var_11 = scripts\mp\utility\weapon::getweaponrootname( var_5 );
        var_12 = scripts\mp\utility\weapon::getweaponbasenamescript( var_5 );
        var_13 = weaponclass( var_5 );

        if ( var_4 == "MOD_FALLING" )
        {
            if ( isdefined( level.showdangercircle ) )
                var_3 = var_1 [[ level.showdangercircle ]]( var_3 );
            else if ( var_1 scripts\mp\utility\killstreak::isjuggernaut() )
            {

            }
            else if ( getdvarint( "scr_br_alt_mode_rocketjump", 0 ) )
            {
                if ( var_1 isskydiving() )
                    var_1 skydive_interrupt();

                var_3 = 0;
            }
            else if ( isdefined( self.br_maxarmorhealth ) )
                var_3 = self.maxhealth + self.br_maxarmorhealth;
            else
                var_3 = self.maxhealth;
        }
        else if ( isdefined( var_0 ) && var_0 scripts\cp_mp\vehicles\vehicle::isvehicle() )
        {
            if ( isdefined( level.showdiscountsplash ) )
                var_3 = var_1 [[ level.showdiscountsplash ]]( var_3 );
            else if ( var_1 scripts\mp\utility\killstreak::isjuggernaut() )
            {

            }
            else
            {
                var_14 = self.maxhealth;

                if ( isdefined( self.br_maxarmorhealth ) )
                    var_14 = var_14 + self.br_maxarmorhealth;

                var_3 = scripts\mp\utility\script::roundup( var_3 * ( var_14 / level.updatecirclepulse ) );
            }
        }
        else if ( var_11 == "iw8_sn_crossbow" && var_4 != "MOD_PISTOL_BULLET" )
        {

        }
        else if ( var_4 == "MOD_MELEE" )
            var_3 = int( var_10 );
        else if ( scripts\mp\utility\weapon::iskillstreakweapon( var_5 ) )
        {
            if ( istrue( var_1.inlaststand ) && scripts\mp\utility\killstreak::getkillstreaknamefromweapon( var_5 ) == "precision_airstrike" )
            {
                if ( isdefined( var_1.cleanup_lights ) )
                {
                    var_15 = gettime() - var_1.cleanup_lights < 5000;

                    if ( var_15 )
                        var_3 = 0;
                }
            }
        }
        else if ( var_4 == "MOD_EXPLOSIVE" || var_4 == "MOD_GRENADE_SPLASH" || var_4 == "MOD_PROJECTILE_SPLASH" || var_4 == "MOD_FIRE" )
        {
            if ( getdvarint( "scr_br_alt_mode_rocketjump", 0 ) )
            {
                var_3 = 0;
                var_1 thread checkforcorrectinstance( var_0 );
            }

            if ( var_11 == "claymore_mp" || var_11 == "claymore_radial_mp" )
                var_3 = int( var_3 * 1.5 );
        }
        else if ( scripts\mp\utility\weapon::isthrowingknife( var_5 ) )
            var_3 = 200;
        else if ( getdvarint( "scr_br_alt_mode_gg", 0 ) && var_4 != "MOD_TRIGGER_HURT" )
            var_3 = clean_up_eliminate_drone( var_9, var_13, var_11, var_8, var_3 );
        else if ( getdvarint( "scr_br_clamp_step_damage", istrue( level.dwell_aggro ) ) && var_4 != "MOD_TRIGGER_HURT" )
            var_3 = clean_up_combat_action( var_9, var_13, var_11, var_8, var_10, var_3, var_5, var_4 );

        if ( clear_cypher_icon( var_1 ) )
        {
            if ( var_11 != "rock_mp" )
            {
                var_3 = 0;
                var_2 thread scripts\mp\damagefeedback::updatedamagefeedback( "standard", 0, 0, "standard", 0 );
            }
            else
                var_3 = 1;

            if ( var_1.health - var_3 <= 0 )
                var_3 = 0;
        }

        if ( scripts\mp\gametypes\br_gametypes.gsc::progress_obj( "modifyPlayerDamage" ) )
        {
            var_16 = scripts\cp_mp\utility\damage_utility::packdamagedata( var_2, self, var_3, var_5, var_4, var_0, var_6, var_7 );
            var_16.shitloc = var_8;
            var_3 = thread scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "modifyPlayerDamage", var_16 );
        }
    }

    return var_3;
}

collisioncheck( var_0 )
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::progress_obj( "modifyVehicleDamage" ) )
        return scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "modifyVehicleDamage", var_0 );

    return var_0.damage;
}

shouldbekilledoff( var_0 )
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::progress_obj( "allowMeleeVehicleDamage" ) )
        return scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "allowMeleeVehicleDamage", var_0 );

    return 0;
}

shouldcrossbowhitmarker( var_0 )
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::progress_obj( "ignoreVehicleExplosiveDamage" ) )
        return scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "ignoreVehicleExplosiveDamage", var_0 );

    return 0;
}

show_balloon_deploy_hint( var_0 )
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::progress_obj( "shouldLastStandDamageScale" ) )
        return scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "shouldLastStandDamageScale", var_0 );

    return 1;
}

show_headicon_to( var_0, var_1 )
{
    if ( isdefined( var_1 ) && isdefined( var_1.cratetype ) && var_1.cratetype == "battle_royale_loadout" )
    {
        handle_nav_bounds_buildings( var_1, var_0, 75.0, -75.0 );
        return 1;
    }

    if ( isscriptabledefined() )
    {
        var_2 = undefined;

        if ( isdefined( var_1 ) )
        {
            var_2 = getclosestpointonnavmesh( var_1.origin );

            if ( isdefined( var_2 ) )
            {
                var_3 = var_2 + ( 0, 0, 5 );
                var_4 = playerphysicstrace( var_2, var_3 );

                if ( var_4 != var_3 )
                    var_2 = undefined;
            }
        }

        if ( !isdefined( var_2 ) )
        {
            var_5 = scripts\mp\gametypes\br_public.gsc::helihint_deposit( var_0.origin, 30 );
            var_2 = getclosestpointonnavmesh( var_5 );
        }

        if ( isdefined( var_2 ) && isdefined( var_1 ) && istrue( var_1.handle_leads_collected_hideiconbuilding ) )
        {
            var_6 = [];

            if ( isdefined( var_1.play_elevator_anim_when_group_is_spawned ) && isarray( var_1.play_elevator_anim_when_group_is_spawned ) )
                var_6 = var_1.play_elevator_anim_when_group_is_spawned;

            var_7 = scripts\engine\trace::create_contents( 1, 1, 1, 1, 1, 1 );
            var_8 = scripts\engine\trace::ray_trace( var_0 gettagorigin( "tag_eye" ), var_2, scripts\engine\utility::array_add( var_6, var_1 ), var_7 );

            if ( isdefined( var_8["hittype"] ) && var_8["hittype"] != "hittype_none" || !canspawn( var_2 ) )
                var_2 = undefined;
        }

        if ( isdefined( var_2 ) )
        {
            var_0 setorigin( var_2 );
            return 1;
        }
    }

    return 0;
}

checkforcorrectinstance( var_0 )
{
    var_1 = ( self.origin[0], self.origin[1], self.origin[2] + 36 );

    if ( self isonground() )
    {
        var_2 = ( self.origin[0], self.origin[1], self.origin[2] + 20 );
        self setorigin( var_2 );
    }

    var_3 = var_1 - var_0.origin;
    var_3 = vectornormalize( var_3 );
    var_4 = getdvarfloat( "scr_br_alt_mode_rocketjump_mult", 1300 );
    var_5 = undefined;

    if ( var_3[2] > -0.3 )
        var_5 = getdvarfloat( "scr_br_alt_mode_rocketjump_minz", 600 );

    var_6 = distance2d( var_0.origin, self.origin ) - 20;
    var_7 = clamp( var_6, 0, 80 ) / 100 * 0.5;
    var_8 = 1;
    var_9 = var_8 - var_7;
    var_3 = var_3 * var_4 * var_9;

    if ( isdefined( var_5 ) )
    {
        var_10 = var_8 - var_7 * 0.5;
        var_5 = var_5 * var_10;
        var_3 = ( var_3[0], var_3[1], max( var_5, var_3[2] ) );
    }

    self setvelocity( var_3 );
}

clean_up_eliminate_drone( var_0, var_1, var_2, var_3, var_4 )
{
    if ( isdefined( var_0 ) && var_0 & level.idflags_penetration )
        var_5 = 1;
    else
        var_5 = 0;

    if ( !var_5 )
    {
        switch ( var_1 )
        {
            case "pistol":
                if ( var_2 == "iw8_pi_decho" || var_2 == "iw8_pi_cpapa" )
                {
                    if ( var_3 == "head" || var_3 == "helmet" )
                        var_4 = 250;
                    else
                        var_4 = 150;
                }

                break;
            case "sniper":
                if ( var_2 == "iw8_sn_crossbow" )
                    var_4 = 250;

                break;
            default:
                break;
        }
    }

    return var_4;
}

progression_update( var_0 )
{
    return isdefined( var_0 ) && var_0 & level.idflags_penetration;
}

randomize_target( var_0 )
{
    return var_0 == "iw8_sn_delta" || var_0 == "iw8_sn_golf28" || var_0 == "iw8_sn_mike14" || var_0 == "iw8_sn_sbeta" || var_0 == "iw8_sn_sksierra";
}

recharge_equipment_init( var_0, var_1, var_2 )
{
    return var_0 == "iw8_sn_xmike109" && var_1 == "MOD_PISTOL_BULLET" && var_2 == 1;
}

propsetchangesleft( var_0 )
{
    return var_0 == "iw8_sh_oscar12" || var_0 == "iw8_sh_aalpha12" || var_0 == "iw8_sh_t9fullauto" || var_0 == "iw8_sh_dpapa12" || var_0 == "iw8_sh_t9semiauto";
}

clean_up_combat_action( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = progression_update( var_0 );

    if ( !var_8 )
    {
        switch ( var_1 )
        {
            case "rifle":
                var_9 = var_5 / var_4;

                if ( getweaponammopoolname( var_6 ) == "WEAPON/AMMO_SLUGS" )
                {
                    if ( level.chopper_death_callback >= 0 )
                    {
                        var_9 = var_5 / var_4;
                        var_5 = min( var_5, level.chopper_death_callback );
                        var_5 = int( var_9 * var_5 );
                    }

                    break;
                }

                if ( scripts\cp_mp\utility\weapon_utility::prohibited_weapon_list_from_vehicle( var_2 ) )
                    var_10 = 1;
                else if ( randomize_target( var_2 ) )
                {
                    if ( var_3 == "head" || var_3 == "helmet" )
                    {
                        var_5 = 175;
                        break;
                    }

                    var_10 = 1;
                }
                else if ( var_2 == "iw8_ar_kilo433" )
                    var_10 = level.dwell_aggro + 1;
                else
                    var_10 = level.dwell_aggro;

                var_5 = clean_up_ents( var_4, var_6, var_10 );
                var_5 = int( var_9 * var_5 );
                break;
            case "pistol":
            case "mg":
                if ( var_2 == "iw8_pi_mike" && var_6 hasattachment( "barauto_mike" ) )
                    return var_5;
                else if ( var_2 == "iw8_pi_t9fullauto" )
                    return var_5;
                else
                {
                    var_9 = var_5 / var_4;
                    var_5 = clean_up_ents( var_4, var_6, level.dwell_aggro );
                    var_5 = int( var_9 * var_5 );
                }

                break;
            case "sniper":
                if ( var_3 == "head" || var_3 == "helmet" )
                {
                    if ( recharge_equipment_init( var_2, var_7, var_5 ) )
                        var_5 = 75;
                    else if ( randomize_target( var_2 ) )
                        var_5 = 175;
                    else
                        var_5 = 250;
                }
                else if ( recharge_equipment_init( var_2, var_7, var_5 ) )
                    return var_5;
                else if ( var_2 == "iw8_sn_crossbow" || var_2 == "iw8_sn_t9crossbow" )
                    var_5 = 200;
                else
                {
                    var_9 = var_5 / var_4;

                    if ( randomize_target( var_2 ) || var_2 == "iw8_sn_kilo98" )
                        var_11 = 1;
                    else if ( var_2 == "iw8_sn_romeo700" )
                        var_11 = 3;
                    else
                        var_11 = level.dwell_aggro;

                    var_5 = clean_up_ents( var_4, var_6, var_11 );
                    var_5 = int( var_9 * var_5 );
                }

                break;
            case "smg":
                if ( scripts\cp_mp\utility\weapon_utility::prohibited_weapon_list_from_vehicle( var_2 ) )
                {
                    var_12 = 1;

                    if ( var_2 == "iw8_sm_t9burst" )
                        var_12 = 2;
                }
                else
                    var_12 = 3;

                var_9 = var_5 / var_4;
                var_5 = clean_up_ents( var_4, var_6, var_12 );
                var_5 = int( var_9 * var_5 );
                break;
            case "spread":
                if ( level.chooseanim_vehicleturret >= 0 )
                {
                    if ( propsetchangesleft( var_2 ) && level.chooseanim_vehicleturretdeath >= 0 )
                        var_13 = level.chooseanim_vehicleturretdeath;
                    else
                        var_13 = level.chooseanim_vehicleturret;

                    var_9 = var_5 / var_4;
                    var_5 = min( var_5, var_13 );
                    var_5 = int( var_9 * var_5 );
                }
            default:
                break;
        }
    }

    return var_5;
}

clear_cypher_icon( var_0 )
{
    return istrue( var_0.gulag ) && !istrue( var_0.gulagarena );
}

clean_up_ents( var_0, var_1, var_2 )
{
    var_3 = 0;

    if ( var_2 == 4 )
        var_3 = var_1 getmid3damage();
    else if ( var_2 == 3 )
        var_3 = var_1 getmid2damage();
    else if ( var_2 == 2 )
        var_3 = var_1 getmid1damage();

    if ( var_3 <= 0 )
        var_3 = var_1.mindamage;

    if ( var_2 == 1 || var_3 <= 0 )
        var_3 = var_1.maxdamage;

    if ( var_0 < var_3 )
        return int( var_3 );
    else
        return var_0;
}

onplayerdamaged( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13 )
{
    if ( scripts\mp\utility\weapon::iskillstreakweapon( var_6 ) )
    {
        if ( scripts\mp\utility\killstreak::getkillstreaknamefromweapon( var_6 ) == "precision_airstrike" && istrue( level.recently_spawned_vehicle ) )
            return;
    }

    if ( isdefined( var_1 ) && var_1 != var_2 && isplayer( var_1 ) )
    {
        if ( var_3 >= var_7 )
            var_3 = var_7;

        if ( var_3 > 0 )
        {
            var_14 = scripts\mp\utility\weapon::getweaponbasenamescript( var_6 );

            if ( var_14 == "rock_mp" && isalive( var_2 ) )
                var_2 playlocalsound( "br_gulag_rock_player_impact" );
        }

        var_1 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "damageDealt", var_1.pers["damage"] );
    }

    if ( isdefined( var_6 ) && scripts\mp\utility\weapon::iskillstreakweapon( var_6 ) )
    {
        var_15 = var_3 >= var_7 && scripts\mp\utility\killstreak::getkillstreaknamefromweapon( var_6 ) == "precision_airstrike";
        var_16 = istrue( var_2.inlaststand );

        if ( var_15 && var_16 )
            var_2.cleanup_lights = gettime();
    }

    if ( scripts\mp\gametypes\br_gametypes.gsc::progress_obj( "onPlayerDamaged" ) )
    {
        var_17 = scripts\cp_mp\utility\damage_utility::packdamagedata( var_1, var_2, var_3, var_6, var_5, var_0, undefined, var_9 );
        thread scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "onPlayerDamaged", var_17 );
    }
}

onnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !istrue( level.br_prematchstarted ) )
        return;

    scripts\mp\gametypes\common.gsc::oncommonnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 );
    var_0.extract_ismissionweapon = 0;

    if ( scripts\mp\utility\game::missions_clearinappropriaterewards() == "dmz" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "risk" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "kingslayer" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "rumble" )
        return;

    var_6 = scripts\mp\utility\game::getlivingplayers();

    if ( isdefined( level.numendgame ) )
    {
        if ( var_6.size <= level.numendgame )
            level thread startendgame( 1 );
    }

    var_7 = level.totalplayers - var_6.size;
    var_8 = 0;

    foreach ( var_10 in level.players )
    {
        if ( isdefined( var_10.score ) && var_10.score > var_8 )
            var_8 = var_10.score;

        if ( isdefined( var_10.petwatch ) && isalive( var_10 ) )
        {
            var_11 = 1 - var_7 / level.totalplayers;
            var_10 scripts\cp_mp\pet_watch::_id_1297B( var_11, 5 );
        }
    }

    if ( !level.teambased )
    {
        var_0.score = level.totalplayers - var_6.size;

        foreach ( var_10 in var_6 )
            var_10.score = var_0.score + 1;
    }
}

getalivecount( var_0 )
{
    var_1 = 0;

    if ( istrue( var_0 ) )
    {
        foreach ( var_3 in level.teamnamelist )
            var_1 = var_1 + scripts\mp\utility\teams::getteamdata( var_3, "aliveCount" );
    }
    else
    {
        foreach ( var_3 in level.teamnamelist )
        {
            var_6 = scripts\mp\utility\teams::getteamdata( var_3, "aliveCount" );

            if ( var_6 )
            {
                var_7 = scripts\mp\utility\teams::getteamdata( var_3, "alivePlayers" );

                foreach ( var_9 in var_7 )
                {
                    if ( isdefined( var_9 ) && !istrue( var_9.gulag ) )
                        var_1 = var_1 + 1;
                }
            }
        }
    }

    return var_1;
}

doplayerkilledsplashes( var_0, var_1 )
{
    if ( istrue( level.usegulag ) && var_0 scripts\mp\gametypes\br_public.gsc::isplayeringulag() )
        return;

    var_2 = scripts\mp\gametypes\br_public.gsc::minigunbackup( var_0.team, var_0.squadindex );

    foreach ( var_4 in var_2 )
    {
        if ( !isdefined( var_4 ) )
            continue;

        if ( var_4 != var_0 )
            var_4 thread scripts\mp\hud_message::showsplash( "br_teammate_dead", undefined, var_0 );
    }
}

_id_1206B()
{
    if ( istrue( level.usegulag ) && !istrue( level.gulag.shutdown ) )
    {
        var_0 = getalivecount( 0 );

        if ( var_0 <= getdvarint( "scr_br_fc_num_players_disable", -1 ) )
            scripts\mp\gametypes\br_gulag.gsc::shutdowngulag( "player_count", var_0 );
    }
}

_id_1206C()
{
    if ( istrue( level.usegulag ) && !istrue( level.gulag.shutdown ) )
    {
        var_0 = getdvarint( "scr_br_fc_num_teams_disable", -1 );

        if ( var_0 < 0 )
            return;

        var_1 = start_coop_escape_safehouse( 0 );

        if ( var_1 <= var_0 )
            scripts\mp\gametypes\br_gulag.gsc::shutdowngulag( "team_count", var_1 );
    }
}

onplayerdisconnect( var_0 )
{
    if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "teamSpectate" ) )
        scripts\mp\gametypes\br_spectate.gsc::setup_teleport_rooms( var_0, undefined, 0 );

    if ( istrue( level.br_prematchstarted ) )
    {
        _id_1206B();
        _id_1206C();
        scripts\mp\gametypes\br_gulag.gsc::onplayerdisconnect( var_0 );

        if ( isdefined( var_0 ) && istrue( var_0.inlaststand ) && scripts\mp\utility\game::missions_clearinappropriaterewards() != "dmz" && scripts\mp\utility\game::missions_clearinappropriaterewards() != "risk" && scripts\mp\utility\game::missions_clearinappropriaterewards() != "kingslayer" && scripts\mp\utility\game::missions_clearinappropriaterewards() != "rumble" )
        {
            var_0 scripts\mp\gametypes\br_pickups.gsc::droponplayerdeath();

            if ( isdefined( var_0.respawntagvisibility ) )
                var_0.respawntagvisibility scripts\mp\damage::update_last_stand_id();
        }
    }

    var_1 = scripts\mp\utility\teams::getenemyteams( var_0.team );
    var_2 = [];

    foreach ( var_4 in var_1 )
    {
        if ( scripts\mp\utility\teams::getteamdata( var_4, "aliveCount" ) )
            var_2[var_2.size] = var_4;
    }

    var_6 = var_2.size + 1;
    scripts\mp\gametypes\br_analytics.gsc::chopperexfil_slamtoblack( var_0, int( scripts\mp\utility\player::isreallyalive( var_0 ) ) );

    if ( isdefined( var_0 ) )
    {
        if ( scripts\mp\flags::gameflag( "prematch_done" ) )
        {
            [var_8, var_9, var_10] = damageskipburndownhigh( var_6 );

            if ( var_8 > 0 )
            {
                var_0 monitor_dropmenu( var_8, undefined, "disconnect" );
                var_0.matchbonus = var_9;
                var_0.transient_prefab_group = var_10;
            }

            var_0 _id_11ED8( var_6 );
            var_0 scripts\cp_mp\utility\game_utility::_id_11EB9( var_6 );
            var_0 _id_124FA();
            scripts\mp\gamelogic::addspecialistdialog( var_0, var_6 );
            _id_12AED( var_0 );
            var_0 scripts\mp\gametypes\br_challenges.gsc::spawn_weapon_box_cache();
        }

        var_0 thread nosplash( var_6 );
    }

    level thread _id_12B17();
}

_id_12AED( var_0 )
{
    scripts\mp\gamelogic::wait_until_trap_room_clear( var_0 );
    scripts\mp\scoreboard::wait_unload_jeep( var_0 );
    var_1 = getdvarint( "MTKSQRQLKN", 0 );

    if ( var_1 )
        var_0 sendclientmatchdataforclient();
}

onplayerkilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    if ( istrue( level.br_prematchstarted ) )
    {
        if ( var_3 == "MOD_EXECUTION" )
            self._id_12EC8 = 1;
        else
            self._id_12EC8 = 0;

        scripts\mp\gametypes\br_pickups.gsc::droponplayerdeath( var_1 );
        doplayerkilledsplashes( self, var_1 );
        _id_1206B();
        _id_1206C();
    }

    scripts\mp\gametypes\br_jugg_common.gsc::onplayerkilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );
    scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();
    scripts\mp\gametypes\br_pickups.gsc::resetplayerinventory();
    onplayerscore( "kill", var_1, 0, self );

    if ( isdefined( self.retreat_vehicle_collision_clear ) )
    {
        scripts\mp\utility\outline::outlinedisable( self.retreat_vehicle_collision_clear, self );
        self.retreat_vehicle_collision_clear = undefined;
    }

    if ( scripts\mp\gametypes\br_gametypes.gsc::progress_obj( "onPlayerKilled" ) )
    {
        var_10 = scripts\cp_mp\utility\damage_utility::packdamagedata( var_1, self, var_2, var_4, var_3, var_0, undefined, var_5 );
        var_10.hitloc = var_6;
        thread scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "onPlayerKilled", var_10 );
    }

    if ( !istrue( level.br_prematchstarted ) )
    {
        scripts\mp\gametypes\br_plunder.gsc::playerplunderlivelobbydropondeath( var_3 );
        return;
    }

    thread scripts\mp\gametypes\br_quest_util.gsc::onplayerkilled( var_1, self );
    thread scripts\mp\gametypes\br_respawn.gsc::playerdied( var_1, var_4 );
    scripts\mp\gametypes\br_public.gsc::_id_11EDC( 0 );
    scripts\mp\gametypes\br_public.gsc::_id_11EDA( 0 );
    _id_12B2D( self, self, 0, 1 );

    if ( istrue( self.inlaststand ) )
    {
        if ( isplayer( var_1 ) )
            var_1 incrementcleanupsstat();
    }

    var_11 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "markPlayerAsEliminatedOnKilled" );

    if ( !isdefined( var_11 ) )
        var_11 = !istrue( level.usegulag );

    if ( var_11 )
        set_spawner_type( self );

    if ( scripts\mp\gametypes\br_public.gsc::processvoqueue() )
    {
        if ( isbot( self ) && isplayer( var_1 ) && !istrue( var_1 scripts\mp\gametypes\br_public.gsc::isplayeringulag() ) )
            var_1 notify( "killed_enemy" );
    }

    if ( istrue( level.cleanupswaploadoutflags.binoculars_processlosqueue ) )
        self._id_12ECE = scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder();

    level thread _id_12B17();
}

set_spawner_type( var_0 )
{
    var_0.checkpointstruct = 1;
    level notify( "br_player_eliminated" );
    var_0 _id_12B18();
    var_0 scripts\mp\gamelogic::updateplayerleaderboardstats();
}

_id_12A58( var_0 )
{
    var_0.checkpointstruct = 0;
    var_0 scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
    var_0 _id_12B18();
}

_id_12B18()
{
    var_0 = self;
    var_1 = 0;
    var_2 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_0.team, var_0.squadindex );

    foreach ( var_4 in var_2 )
    {
        if ( istrue( var_4.checkpointstruct ) )
            var_1 = var_1 | 1 << var_4.pers["squadMemberIndex"] - 1;
    }

    foreach ( var_4 in var_2 )
        var_4 setclientomnvar( "ui_br_eliminated", var_1 );

    if ( istrue( level.matchmakingmatch ) )
    {
        var_8 = var_0 getfireteammembers();

        if ( isdefined( var_8 ) && var_8.size > 0 )
        {
            var_9 = 2;

            foreach ( var_4 in var_8 )
            {
                if ( isdefined( var_4 ) && !istrue( var_4.checkpointstruct ) )
                {
                    var_9 = 0;
                    break;
                }
            }

            var_0 setclientomnvar( "ui_br_squad_eliminated_active", var_9 );

            foreach ( var_4 in var_8 )
                var_4 setclientomnvar( "ui_br_squad_eliminated_active", var_9 );
        }
    }
}

incrementcleanupsstat()
{
    var_0 = self;

    if ( !isdefined( var_0.br_cleanups ) )
        var_0.br_cleanups = 0;

    var_0.br_cleanups++;
    var_0 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "cleanups", var_0.br_cleanups );
}

registercrateforcleanup( var_0 )
{
    level.br_pickups.crates[level.br_pickups.crates.size] = var_0;
}

cloudref( var_0 )
{

}

makeitemsfromcrate( var_0 )
{
    var_1 = self.data;

    if ( var_1.type == "personal" )
    {
        makepersonalweaponfromcrate( var_0 );
        return;
    }

    if ( var_1.type == "weapon" )
    {
        var_2 = randomintrange( 2, 4 );
        var_3 = 6 - var_2;
    }
    else
    {
        var_2 = randomintrange( 1, 2 );
        var_3 = 6 - var_2;
    }

    var_4 = 0;

    for ( var_5 = 0; var_5 < var_2 && var_4 < level.br_pickups.br_dropoffsets.size; var_5++ )
    {
        if ( isdefined( makeweaponfromcrate( var_4 ) ) )
            var_4++;
    }

    for ( var_5 = 0; var_5 < var_3 && var_4 < level.br_pickups.br_dropoffsets.size; var_5++ )
    {
        if ( isdefined( makeitemfromcrate( var_4 ) ) )
            var_4++;
    }
}

makeweaponfromcrate( var_0 )
{
    var_1 = scripts\engine\utility::random( level.br_pickups.br_crateguns );
    var_2 = scripts\mp\gametypes\br_pickups.gsc::manage_fakebody_hides( var_1 );

    if ( !isdefined( var_2 ) )
        return;

    var_3 = scripts\engine\utility::drop_to_ground( self.origin + level.br_pickups.br_dropoffsets[var_0], 50, -200, ( 0, 0, 1 ) ) + ( 0, 0, 24 );
    var_4 = scripts\mp\gametypes\br_weapons.gsc::createspawnweaponatpos( var_3, ( 0, 0, 90 ), var_2 );

    if ( isdefined( var_4 ) )
        var_4.isweaponfromcrate = 1;

    return var_4;
}

makeitemfromcrate( var_0 )
{
    var_1 = scripts\engine\utility::drop_to_ground( self.origin + level.br_pickups.br_dropoffsets[var_0], 50, -200, ( 0, 0, 1 ) ) + ( 0, 0, 12 );
    var_2 = scripts\engine\utility::random( level.br_pickups.br_crateitems );
    var_3 = var_2;
    var_4 = scripts\mp\gametypes\br_pickups.gsc::maphint_computerscriptableused( var_1, ( 0, 0, 90 ) );
    var_5 = scripts\mp\gametypes\br_pickups.gsc::spawnpickup( var_3, var_4, 1 );
    return var_5;
}

set_customizable_values( var_0 )
{
    var_1 = scripts\engine\utility::drop_to_ground( self.origin + level.br_pickups.br_dropoffsets[0], 50, -200, ( 0, 0, 1 ) ) + ( 0, 0, 12 );
    var_2 = scripts\mp\gametypes\br_pickups.gsc::maphint_computerscriptableused( var_1, ( 0, 0, 90 ) );
    var_3 = scripts\mp\gametypes\br_pickups.gsc::spawnpickup( var_0, var_2, 1 );
    return var_3;
}

makepersonalweaponfromcrate( var_0 )
{
    var_1 = self.data;
    var_2 = scripts\engine\utility::drop_to_ground( self.origin + ( 0, 0, 6 ), 50, -200, ( 0, 0, 1 ) ) + ( 0, 0, 24 );
    var_3 = scripts\mp\gametypes\br_weapons.gsc::createspawnweaponatposfromname( var_2, var_1.personalweaponfullname );

    if ( isdefined( var_3 ) )
    {
        var_3.isweaponfromcrate = 1;
        var_0 loadweaponsforplayer( [ var_1.personalweaponfullname ] );
    }

    return var_3;
}

iconvisall( var_0, var_1 )
{

}

objvisall( var_0 )
{
    scripts\mp\objidpoolmanager::objective_playermask_showtoall( var_0 );
}

initloot()
{
    level.br_weaponweights = [];
    level.br_weaponweights["iw8_ar_mike4"] = 20;
    level.br_weaponweights["iw8_sm_mpapa5"] = 40;
    level.br_weaponweights["iw8_sh_dpapa12"] = 40;
    level.br_weaponweights["iw8_la_gromeo"] = 30;
    level.br_weaponweights["iw8_lm_kilo121"] = 10;
    level.br_weaponweights["iw8_sn_alpha50"] = 10;
    level.br_weaponweights["iw8_knife"] = 5;
    level.br_weaponweights["iw8_pi_golf21"] = 50;
    level.br_weaponweights["iw8_ar_akilo47"] = 20;
    level.br_weaponweighttotal = 0;

    foreach ( var_2, var_1 in level.br_weaponweights )
        level.br_weaponweighttotal = level.br_weaponweighttotal + var_1;

    level.attachmentmap = [];
    level.attachmentmap["iw8_ar_mike4"] = [];
    level.attachmentmap["iw8_ar_akilo47"] = [];
    level.attachmentmap["iw8_sm_mpapa5"] = [];
    level.attachmentmap["iw8_lm_kilo121"] = [];
    level.attachmentmap["iw8_sn_alpha50"] = [];
    level.attachmentmap["iw8_pi_golf21"] = [];
    level.attachmentmap["iw8_ar_akilo47"] = [];
    level.baseraritymap = [];
    level.baseraritymap["iw8_ar_mike4"] = 1;
    level.baseraritymap["iw8_ar_akilo47"] = 1;
    level.baseraritymap["iw8_sm_mpapa5"] = 1;
    level.baseraritymap["iw8_sh_dpapa12"] = 1;
    level.baseraritymap["iw8_la_gromeo"] = 1;
    level.baseraritymap["iw8_lm_kilo121"] = 1;
    level.baseraritymap["iw8_sn_alpha50"] = 3;
    level.baseraritymap["iw8_knife"] = 0;
    level.baseraritymap["iw8_pi_golf21"] = 0;
    level.attachraritymap = [];
    level.attachraritymap["holo"] = 1;
    level.attachraritymap["silencer"] = 2;
    level.attachraritymap["gl"] = 2;
}

weaponlocallowed( var_0, var_1 )
{
    foreach ( var_3 in var_1 )
    {
        var_4 = var_3.origin[2] - 24;
        var_5 = var_3.origin[2] + 90 - 24;

        if ( scripts\engine\utility::distance_2d_squared( var_3.origin, var_0.origin ) < 147456 && var_0.origin[2] >= var_4 && var_0.origin[2] <= var_5 )
            return 0;
    }

    return 1;
}

startendgame( var_0 )
{
    if ( istrue( level.br_debugsolotest ) )
        return;

    scripts\mp\gamelogic::pausetimer();
    level.timepausestart = gettime();
    level.timelimitoverride = 1;
}

debugtestcirclevfx( var_0 )
{
    if ( isdefined( level.circleemitters ) )
        destroyemitters( level.circleemitters );

    level notify( "runDebugVFXCircleTest" );
    waitframe();

    switch ( var_0 )
    {
        case 1:
            level thread rundebugvfxcircletest( 1000, 0, 15, 2000 );
            break;
        case 2:
            level thread rundebugvfxcircletest( 2500, 1000, 20, 2000 );
            break;
        case 3:
            level thread rundebugvfxcircletest( 4500, 2500, 25, 2000 );
            break;
        case 4:
            level thread rundebugvfxcircletest( 7000, 4500, 40, 2000 );
            break;
        case 5:
            level thread rundebugvfxcircletest( 10500, 7000, 70, 2000 );
            break;
        case 6:
            level thread rundebugvfxcircletest( 15000, 10500, 80, 2000 );
            break;
        case 7:
            level thread rundebugvfxcircletest( 20000, 15000, 80, 2000 );
            break;
        case 8:
            level thread rundebugvfxcircletest( 50000, 20000, 80, 2000 );
            break;
    }
}

groundraycast( var_0 )
{
    var_1 = scripts\engine\trace::create_contents( 0, 1, 0, 0, 1, 1 );
    var_2 = var_0 + ( 0, 0, 10000 );
    var_3 = var_2 + ( 0, 0, -20000 );
    var_4 = physics_raycast( var_2, var_3, var_1, undefined, 0, "physicsquery_closest", 1 );

    if ( isdefined( var_4 ) && var_4.size > 0 )
        return var_4[0]["position"];

    return ( 0, 0, 0 );
}

debugplayercirclevfx()
{
    for (;;)
    {
        waitframe();

        if ( !isdefined( level.circledebugpos ) || !isdefined( level.circledebugradius ) )
            continue;

        var_0 = distance2d( self.origin, level.circledebugpos ) < level.circledebugradius;

        if ( istrue( self.debugcircleincircle ) )
        {
            if ( !var_0 && level.debugcircleplayerfx == 0 )
            {
                playfxontag( level._effect["vfx_gas_ring_player"], self, "tag_eye" );
                level.debugcircleplayerfx = 1;
                self.debugcircleincircle = 0;
            }

            continue;
        }

        if ( var_0 && !self.debugcircleincircle )
        {
            self.debugcircleincircle = 1;
            stopfxontag( level._effect["vfx_gas_ring_player"], self, "tag_eye" );
            level.debugcircleplayerfx = 0;
        }
    }
}

rundebugvfxcircletest( var_0, var_1, var_2, var_3 )
{
    level endon( "game_ended" );
    level endon( "runDebugVFXCircleTest" );

    if ( !istrue( level.debugcircleplayerfx ) )
        level.players[0] thread debugplayercirclevfx();

    var_4 = 5;
    var_5 = level.players[0] groundraycast( level.players[0].origin );
    level.circleemitters = spawnentsincircle( var_5, var_0, var_3 );
    level.circledebugpos = var_5;
    wait 0.1;
    spawnvfxincircle( level.circleemitters );
    var_6 = var_2;

    while ( var_2 > 0 )
    {
        var_7 = var_2 / var_6;
        var_8 = var_1 + ( var_0 - var_1 ) * var_7;

        if ( var_4 < 0 )
        {
            destroyemitters( level.circleemitters );

            if ( var_8 <= 0 )
                return;

            level.circledebugradius = var_8;
            var_4 = 5;
            level.circleemitters = spawnentsincircle( var_5, var_8, var_3 );
            wait 0.1;
            spawnvfxincircle( level.circleemitters );
        }
        else
            updateemitterpositions( var_5, var_8, level.circleemitters );

        var_2 = var_2 - level.framedurationseconds;
        var_4 = var_4 - level.framedurationseconds;
        waitframe();
    }
}

destroyemitters( var_0 )
{
    for ( var_1 = 0; var_1 < var_0.size; var_1++ )
    {
        if ( isdefined( var_0[var_1] ) )
        {
            stopfxontag( level._effect["vfx_gas_ring_puffy"], var_0[var_1], "tag_origin" );
            var_0[var_1] delete();
        }
    }
}

updateemitterpositions( var_0, var_1, var_2 )
{
    var_3 = var_2.size;
    var_4 = 6.2831 * var_1;
    var_5 = 360 / var_3;

    for ( var_6 = 0; var_6 < var_3; var_6++ )
    {
        var_7 = var_5 * var_6;
        var_8 = sin( var_7 ) * var_1;
        var_9 = cos( var_7 ) * var_1;
        var_10 = groundraycast( var_0 + ( var_9, var_8, 0 ) );
        var_2[var_6].origin = var_10;
        var_2[var_6].angles = ( 0, var_7 + 180, 0 );
    }
}

spawnentsincircle( var_0, var_1, var_2 )
{
    var_3 = [];
    var_4 = 6.2831 * var_1;
    var_5 = var_4 / var_2;

    if ( var_5 < 200 )
        iprintlnbold( "Using " + int( var_5 ) + " emitters" );
    else
        iprintlnbold( "Can't use " + int( var_5 ) + " emitters, using 200 instead" );

    var_5 = min( var_5, 200 );
    var_6 = 360 / var_5;

    for ( var_7 = 0; var_7 < var_5; var_7++ )
    {
        var_8 = var_6 * var_7;
        var_9 = sin( var_8 ) * var_1;
        var_10 = cos( var_8 ) * var_1;
        var_11 = groundraycast( var_0 + ( var_10, var_9, 0 ) );
        var_3[var_7] = spawn( "script_model", var_11 );
        var_3[var_7] setmodel( "tag_origin" );
        var_3[var_7].origin = var_11;
        var_3[var_7].angles = ( 0, var_8 + 180, 0 );
    }

    return var_3;
}

spawnvfxincircle( var_0 )
{
    for ( var_1 = 0; var_1 < var_0.size; var_1++ )
        playfxontag( level._effect["vfx_gas_ring_puffy"], var_0[var_1], "tag_origin" );
}

debuggiveperkpoints()
{
    var_0 = scripts\mp\utility\game::getlivingplayers();

    foreach ( var_2 in var_0 )
        var_2.br_perkpoints = var_2.br_perkpoints + 5;
}

ontimelimit()
{
    if ( isdefined( level.numendgame ) )
        level thread startendgame( 1 );

    level.numendgame = undefined;
}

onplayerjointeam( var_0 )
{
    if ( !isdefined( var_0.team ) )
        scripts\mp\utility\script::getdropbagspawntypeenum( "onPlayerJoinTeam: !IsDefined( player.team ) - " + var_0.name );

    if ( !scripts\mp\utility\teams::isgameplayteam( var_0.team ) )
        scripts\mp\utility\script::getdropbagspawntypeenum( "onPlayerJoinTeam: !isGameplayTeam( player.team ) - " + var_0.name + " " + var_0.team );

    thread subway_death_or_disconnect_monitor( var_0 );
}

subway_death_or_disconnect_monitor( var_0 )
{
    self endon( "disconnect" );
    waittillframeend;

    if ( level.teambased )
    {
        var_1 = [];

        for ( var_2 = 1; var_2 < scripts\mp\gametypes\br_public.gsc::matchdata_logplayerdata() + 1; var_2++ )
            var_1[var_1.size] = var_2;

        var_3 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_0.team, var_0.squadindex );
        var_4 = 1;

        foreach ( var_6 in var_3 )
        {
            if ( istrue( var_6.propgetlocation ) )
                continue;

            if ( istrue( var_6.progression_main ) )
                var_4 = 0;

            if ( isdefined( var_6.pers["squadMemberIndex"] ) )
                var_1 = scripts\engine\utility::array_remove( var_1, var_6.pers["squadMemberIndex"] );
        }

        if ( var_1.size == 0 && !isdefined( var_0.pers["squadMemberIndex"] ) )
            return;

        var_8 = undefined;

        if ( isdefined( var_0.pers["squadMemberIndex"] ) )
            var_8 = var_0.pers["squadMemberIndex"];
        else
            var_8 = var_1[0];

        if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "squadLeader" ) )
            var_0 _id_11EDB( var_4 );

        var_0 _id_11EE5( var_8 );
        return;
    }
}

ondeadevent( var_0 )
{
    if ( istrue( level.br_debugsolotest ) || scripts\mp\utility\game::missions_clearinappropriaterewards() == "dmz" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "risk" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "kingslayer" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "rumble" )
        return;

    if ( isdefined( var_0 ) && var_0 != "all" )
    {
        thread supply_station_direction( var_0 );
        var_1 = [];

        foreach ( var_3 in scripts\mp\utility\teams::getenemyteams( var_0 ) )
        {
            if ( scripts\mp\utility\teams::getteamdata( var_3, "aliveCount" ) )
                var_1[var_1.size] = var_3;
        }

        var_5 = var_1.size + 1;

        foreach ( var_7 in scripts\mp\utility\teams::getteamdata( var_0, "players" ) )
        {
            var_7 scripts\cp_mp\utility\game_utility::_id_11EB9( var_5 );
            var_7 _id_124FA();
        }

        scripts\mp\gamelogic::default_ondeadevent( var_0 );
    }
}

start_coop_escape_safehouse( var_0 )
{
    var_1 = 0;
    var_2 = level.teamnamelist;

    foreach ( var_4 in var_2 )
    {
        if ( scripts\mp\utility\teams::getteamdata( var_4, "aliveCount" ) )
        {
            if ( var_0 )
            {
                var_1++;
                continue;
            }

            var_5 = 0;
            var_6 = scripts\mp\utility\teams::getteamdata( var_4, "players" );

            foreach ( var_8 in var_6 )
            {
                if ( isdefined( var_8 ) && !var_8 scripts\mp\gametypes\br_public.gsc::questtypes() )
                {
                    var_5 = 1;
                    break;
                }
            }

            if ( var_5 )
                var_1++;
        }
    }

    return var_1;
}

supply_station_direction( var_0 )
{
    var_1 = [];
    var_2 = 0;

    foreach ( var_4 in level.teamnamelist )
    {
        if ( var_4 == var_0 )
            continue;

        var_5 = scripts\mp\utility\teams::getteamdata( var_4, "aliveCount" );

        if ( var_5 )
        {
            var_1[var_1.size] = var_4;
            var_6 = var_5;

            if ( scripts\mp\gametypes\br_gametypes.gsc::progress_obj( "remainingPlayersAliveOnTeam" ) )
                var_6 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "remainingPlayersAliveOnTeam", var_4 );

            var_2 = var_2 + var_5;
        }
    }

    var_8 = var_1.size + 1;
    supplydropprice( var_0, var_8, var_2, 0 );
    wait 20;
    thread scripts\mp\gamelogic::nuke_vault_alarm_on();
}

supplydropprice( var_0, var_1, var_2, var_3, var_4 )
{
    soundsettimescalefactorfromtable( var_0, var_1 );
    scripts\mp\gametypes\br_analytics.gsc::civ_death( var_0, var_1 );
    [var_6, var_7, var_8] = damageskipburndownhigh( var_1 );
    var_9 = scripts\mp\utility\teams::getteamdata( var_0, "players" );

    foreach ( var_11 in var_9 )
    {
        if ( isdefined( var_11 ) )
        {
            var_11 monitor_dropmenu( var_6, undefined, "squadEliminated" );
            var_11.wait_for_enemies_cleared = var_6;
            var_11.matchbonus = var_7;
            var_11.transient_prefab_group = var_8;
        }
    }

    if ( !istrue( var_4 ) )
        wait 1.5;

    if ( !istrue( level.recently_spawned_vehicle ) )
    {
        if ( !istrue( var_3 ) && var_2 < 5 )
            scripts\mp\gametypes\br_public.gsc::brleaderdialog( "top_5_lose", 0, var_9, 1 );
        else if ( !istrue( var_3 ) && var_2 < 10 )
            scripts\mp\gametypes\br_public.gsc::brleaderdialog( "top_10_lose", 0, var_9, 1 );
        else if ( !istrue( var_3 ) && var_2 < 25 )
            scripts\mp\gametypes\br_public.gsc::brleaderdialog( "top_25_lose", 0, var_9, 1 );

        scripts\mp\gametypes\br_public.gsc::brleaderdialog( "team_loss", 0, var_9, 1 );
    }

    foreach ( var_11 in var_9 )
    {
        if ( isdefined( var_11 ) )
        {
            var_11 thread nosplash( var_1 );
            var_11 _id_11ED8( var_1 );
            var_11 _id_124FA();
            scripts\mp\gamelogic::addspecialistdialog( var_11, var_1 );
            _id_12AED( var_11 );
        }
    }

    _id_11E7F( var_0 );
}

nosplash( var_0 )
{
    var_1 = self;
    var_1 endon( "disconnnect" );

    if ( var_0 < 4 )
        var_1 scripts\cp_mp\pet_watch::anim_ref();

    var_2 = gettime();
    var_1 setclientomnvar( "ui_br_player_position", var_0 );

    if ( !istrue( var_1.br_spectatorinitialized ) && !var_1 scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder() )
        var_1 waittill( "br_spectatorInitialized" );

    var_1 setclientomnvar( "ui_br_squad_eliminated_active", 1 );
    var_1 setclientomnvar( "ui_round_end_title", game["round_end"]["defeat"] );
    var_1 setclientomnvar( "ui_round_end_reason", game["end_reason"]["br_eliminated"] );
    var_1 scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
    var_1 notify( "br_team_fully_eliminated" );
}

_id_11ED8( var_0 )
{
    var_1 = self;

    if ( !isdefined( var_1 ) || istrue( var_1.transient_world_proxy_collision_distance ) )
        return;

    var_1.transient_world_proxy_collision_distance = 1;
    var_1._id_1268D = var_0;

    if ( var_0 <= 25 )
    {
        var_1 scripts\mp\utility\stats::incpersstat( "topTwentyFive", 1 );

        if ( var_0 <= 10 )
        {
            var_1 scripts\mp\utility\stats::incpersstat( "topTen", 1 );

            if ( var_0 <= 5 )
            {
                var_1 scripts\mp\utility\stats::incpersstat( "topFive", 1 );

                if ( var_0 == 1 )
                    var_1 scripts\mp\utility\stats::incpersstat( "wins", 1 );
            }
        }

        var_1 scripts\mp\gamelogic::updateplayerleaderboardstats();
    }
}

damageskipburndownhigh( var_0 )
{
    if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
        return [ 0, 0, 0 ];

    if ( scripts\mp\utility\game::missions_clearinappropriaterewards() == "dmz" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "risk" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "kingslayer" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "rumble" )
        return [ 0, 0, 0 ];

    var_1 = getdvarfloat( "scr_br_time_XP_milisecond", 0.0039 );

    if ( !isdefined( level._id_12498 ) || !isdefined( var_0 ) || !isdefined( level._id_130AC ) || ( level._id_12498 <= 0 || var_0 <= 0 || level._id_130AC <= 0 ) )
        return [ 0, 0, 0 ];

    var_2 = gettime() - level._id_12498;
    var_3 = int( var_1 * var_2 + 0.5 );
    var_4 = level._id_130AC * ( level._id_130AE - var_0 + 1 );
    var_5 = var_3 + var_4;
    return [ var_5, var_3, var_4 ];
}

_id_11A74()
{
    scripts\cp\helicopter\chopper_boss::_id_11A73( "driving" );
    scripts\cp\helicopter\chopper_boss::_id_11A73( "alive_in_gas" );
    scripts\cp\helicopter\chopper_boss::_id_11A73( "alive_not_downed" );
}

_id_124FA()
{
    scripts\cp\helicopter\chopper_boss::_id_124F9( "driving" );
    scripts\cp\helicopter\chopper_boss::_id_124F9( "alive_in_gas" );
    scripts\cp\helicopter\chopper_boss::_id_124F9( "alive_not_downed" );
}

monitor_dropmenu( var_0, var_1, var_2 )
{
    if ( !isdefined( self ) || isbot( self ) || initmaxspeedforpathlengthtable( self ) )
        return;

    if ( !game["timePassed"] )
        return;

    if ( !( scripts\mp\utility\game::matchmakinggame() || getdvarint( "OSPNSPSKL" ) ) )
        return;

    if ( scripts\mp\utility\game::missions_clearinappropriaterewards() == "dmz" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "risk" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "kingslayer" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "risk" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "rebirth" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "rumble" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "payload" )
        return;

    if ( isdefined( self.claymore_crate_spawn ) && self.claymore_crate_spawn == 0 )
        return;

    var_3 = 0;
    var_4 = 0;

    if ( !isdefined( var_2 ) )
        var_2 = "undefined";

    switch ( var_2 )
    {
        case "disconnect":
            var_3 = 1;
            var_4 = 1;
            break;
        case "squadEliminated":
            var_3 = 1;
            var_4 = 1;
            break;
        case "endGame":
        case "winner":
            var_3 = 1;
            var_4 = 1;
            break;
        case "undefined":
        default:
            var_3 = 0;
            var_4 = 1;
            break;
    }

    if ( isdefined( self.wait_for_enemies_cleared ) )
        var_0 = var_0 - self.wait_for_enemies_cleared;

    if ( var_0 > 0 )
    {
        scripts\mp\rank::giverankxp( "br_timeXPBonus", var_0, var_1, var_3, var_4 );
        scripts\mp\gametypes\br_analytics.gsc::chopperexfil_sitting_wind( var_0, var_2 );
    }

    self.claymore_crate_spawn = 0;
}

_id_11ED9()
{
    var_0 = 545000;
    var_1 = var_0;
    var_2 = max( 1, level.maxteamsize );
    var_3 = 0;

    foreach ( var_5 in level.teamnamelist )
    {
        if ( scripts\mp\utility\teams::getteamdata( var_5, "teamCount" ) )
            var_3++;
    }

    var_3 = max( 1, var_3 );
    var_7 = 200;
    var_8 = 25;
    var_9 = int( var_3 * ( var_3 + 1 ) / 2 );
    var_9 = max( var_9, 1 );
    var_10 = int( var_1 / ( var_9 * var_2 ) + 0.9 );
    var_10 = int( clamp( var_10, var_8, var_7 ) );
    var_11 = getdvarint( "scr_br_placement_XP_share", var_10 );
    level._id_130AC = var_11;
    level._id_130AE = var_3;
    level._id_12498 = gettime();
}

monitoraveragevelocities( var_0 )
{
    var_1 = getdvarfloat( "scr_br_weapon_XP_milsecond", 0.002 );
    var_2 = self.lastnormalweaponobj;
    var_3 = int( var_0 * var_1 );
    monitor_dropped_phones( "", var_3, var_2, 1, 0 );
}

monitor_dropped_phones( var_0, var_1, var_2, var_3, var_4 )
{
    if ( !isdefined( var_2 ) || scripts\mp\utility\weapon::iskillstreakweapon( var_2 ) || scripts\mp\utility\weapon::isvehicleweapon( var_2 ) )
        return;

    if ( isdefined( self.owner ) && !isbot( self ) )
    {
        self.owner monitor_dropped_phones( var_0, var_1, var_2 );
        return;
    }

    if ( isai( self ) || !isplayer( self ) )
        return;

    if ( !isdefined( var_1 ) || var_1 <= 0 )
        return;

    if ( !isdefined( var_3 ) )
        var_3 = 0;

    if ( !isdefined( var_4 ) )
        var_4 = 0;

    if ( !var_3 )
        scripts\mp\utility\points::displayscoreeventpoints( var_1, var_0 );

    if ( !level.playerxpenabled )
        return;

    thread _id_12DFD( var_0, var_1, var_2, var_4 );
}

_id_12DFD( var_0, var_1, var_2, var_3 )
{
    self endon( "disconnect" );

    if ( !isdefined( var_3 ) )
        var_3 = 0;

    if ( !var_3 )
    {
        waitframe();
        scripts\mp\utility\script::waittillslowprocessallowed();
    }

    var_4 = 0;

    if ( !isdefined( var_2 ) || !scripts\mp\weaponrank::weaponshouldgetxp( var_2.basename ) )
        return;

    var_4 = var_1;
    var_4 = var_4 * scripts\mp\weaponrank::getweaponrankxpmultipliertotal();
    var_4 = int( var_4 );
    scripts\mp\rank::incrankxp( 0, var_2, var_4, "brWeaponXp" );

    if ( level.playerxpenabled && !isai( self ) )
    {
        if ( isdefined( var_2 ) && ( scripts\mp\utility\weapon::iscacprimaryweapon( var_2 ) || scripts\mp\utility\weapon::iscacsecondaryweapon( var_2 ) ) )
        {
            if ( !scripts\mp\utility\weapon::ispickedupweapon( var_2 ) || scripts\mp\utility\game::getgametype() == "br" )
                scripts\common\utility::_id_12965( level.set_up_rear_minigun, scripts\mp\utility\weapon::getweaponrootname( var_2 ), "xp_earned", var_4, -1, var_2 );
        }
    }
}

dangernotifyplayer( var_0 )
{
    var_1 = 100;
    var_2 = scripts\mp\utility\game::missions_clearinappropriaterewards();

    if ( var_2 == "dmz" || var_2 == "sandbox" || var_2 == "risk" || var_2 == "kingslayer" )
        var_3 = 0.5;
    else
        var_3 = 20;

    var_4 = var_1 + int( var_0 * var_3 );
    return var_4;
}

resetpostgamestateonjoinedspectators()
{
    self endon( "disconnect" );
    var_0 = gettime();

    if ( !istrue( self.br_spectatorinitialized ) )
        self waittill( "br_spectatorInitialized" );

    var_1 = 3;
    var_2 = ( gettime() - var_0 ) / 1000;

    if ( var_2 < var_1 )
        wait( var_1 - var_2 );

    self setclientomnvar( "post_game_state", 0 );
}

ononeleftevent( var_0 )
{
    if ( istrue( level.br_debugsolotest ) )
        return;

    if ( level.teambased )
    {
        var_1 = scripts\mp\utility\game::getlastlivingplayer( var_0 );

        if ( isdefined( var_1 ) )
        {
            if ( istrue( scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "disableLastManStandingDialog", var_1 ) ) )
                return;

            var_1 scripts\engine\utility::delaythread( 0.5, scripts\mp\gametypes\br_public.gsc::brleaderdialog, "last_man_standing", 0, [ var_1 ] );
            return;
        }
    }
    else
    {
        level.lastplayerwins = scripts\mp\utility\game::getlastlivingplayer();
        level thread scripts\mp\gamelogic::endgame( level.lastplayerwins, game["end_reason"]["enemies_eliminated"] );
    }
}

onsuicidedeath( var_0 )
{
    if ( !level.teambased )
    {
        var_1 = scripts\mp\utility\game::getlivingplayers();
        var_0.score = level.totalplayers - var_1.size;

        foreach ( var_3 in var_1 )
            var_3.score = var_0.score + 1;
    }

    if ( !isgamebattlematch() && istrue( var_0.collorigin1 ) )
    {
        if ( !isdefined( var_0.extract_ismissionweapon ) )
            var_0.extract_ismissionweapon = 1;
        else
            var_0.extract_ismissionweapon++;

        if ( var_0.extract_ismissionweapon >= getdvarint( "scr_br_kick_consecutive_suicides", 5 ) )
            level thread scripts\mp\teams::relic_award_bullets( var_0 );
    }
}

spawn_smoke_bombers()
{
    if ( isdefined( level.forcedend ) )
        return scripts\mp\gametypes\br_public.gsc::processvoqueue() && level.forcedend;

    return 0;
}

brendgame( var_0, var_1 )
{
    if ( level.gameended )
        return;

    if ( isdefined( var_1 ) )
        logstring( "[KEY_MOMENT] BrEndGame " + var_1 );
    else
        logstring( "[KEY_MOMENT] BrEndGame" );

    level.gameendtime = gettime();
    level.gameended = 1;
    level notify( "game_ended" );

    if ( scripts\mp\gametypes\br_public.gsc::prophasclonesleft() )
    {
        if ( var_1 == 25 )
        {
            level.checkpoint_next_fx_play = 0;

            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "DMZTut", "empty" ) )
            {
                var_2 = scripts\cp_mp\utility\script_utility::getsharedfunc( "DMZTut", "empty" );
                level.checkpoint_get_item = var_2;
            }
        }
        else if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "DMZTut", "endGameVO" ) )
            [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "DMZTut", "endGameVO" ) ]]();
    }

    scripts\mp\gametypes\br_gulag.gsc::shutdowngulag( "end_game", 0, 1 );

    if ( scripts\mp\gametypes\br_public.gsc::processvoqueue() )
        level.keyboard_make_usable = 1;

    scripts\mp\gametypes\br_vehicles.gsc::emptyallvehicles();
    thread scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "endGame", var_0 );

    if ( spawn_smoke_bombers() )
    {
        scripts\mp\gamelogic::endgame_regularmp( var_0, var_1, game["end_reason"]["br_eliminated"] );
        return;
    }

    setomnvarforallclients( "ui_br_transition_type", 0 );
    var_3 = undefined;

    if ( isdefined( var_0 ) && var_0 != "tie" )
    {
        _id_13019();
        var_3 = scripts\mp\utility\teams::getteamdata( var_0, "players" );
        level scripts\engine\utility::delaythread( 1.0, scripts\mp\gametypes\br_challenges.gsc::set_strict_ff, var_0 );
        var_4 = 1;

        if ( scripts\mp\gametypes\br_public.gsc::prophasclonesleft() && scripts\engine\utility::is_equal( var_1, 25 ) )
            var_4 = 0;

        if ( var_4 )
            scripts\mp\gametypes\br_public.gsc::brleaderdialog( "team_victory", 0, var_3 );

        [var_6, var_7, var_8] = damageskipburndownhigh( 1 );
        scripts\mp\gametypes\br_analytics.gsc::civ_death( var_0, 1 );

        foreach ( var_10 in var_3 )
        {
            if ( !isdefined( var_10 ) )
                continue;

            if ( istrue( var_10.inlaststand ) )
            {
                if ( var_10 scripts\mp\laststand::is_same_combat_action( "self_revive_on_kill_success", var_10 ) )
                    var_10 scripts\mp\laststand::onrevive( 1 );
            }

            var_10 scripts\mp\gametypes\br_pickups.gsc::empty_vo_func();

            if ( istrue( var_10.playlandingbreath ) )
                var_10 notify( "br_try_armor_cancel" );

            var_10 scripts\mp\gametypes\br_gulag.gsc::gulagfadefromblack();
            var_10.spawnprotection = 1;
            var_10 setclientomnvar( "ui_br_player_position", 1 );
            var_10 monitor_dropmenu( var_6, undefined, "winner" );
            var_10.matchbonus = var_7;
            var_10.transient_prefab_group = var_8;
            var_10 scripts\cp_mp\pet_watch::anim_ref();
            scripts\mp\gametypes\br_analytics.gsc::choppersupport_issmallpatrolmap( var_10, "player_win" );
            var_10 _id_11ED8( 1 );
            var_10 scripts\cp_mp\utility\game_utility::_id_11EB9( 1 );
            var_10 _id_124FA();
            scripts\mp\gamelogic::addspecialistdialog( var_10, 0 );
            var_10 scripts\mp\gamelogic::updateplayerleaderboardstats();
            _id_12AED( var_10 );

            if ( var_10 ispcplayer() )
                var_10 setclientomnvar( "nVidiaHighlights_events", 23 );

            if ( scripts\mp\gametypes\br_public.gsc::processvoqueue() && !isbot( var_10 ) )
                var_10 thread [[ level.hostvictimdefensefactormod ]]();
        }

        _id_11E7F( var_0 );
    }
    else
    {
        var_12 = [];

        if ( isdefined( level._id_11AFA ) )
        {
            var_13 = getdvarint( "scr_br_reveal_placement_xp", 1984 );

            foreach ( var_15 in level.teamnamelist )
            {
                if ( scripts\mp\utility\teams::getteamdata( var_15, "teamCount" ) )
                    var_12[var_12.size] = var_15;
            }

            var_17 = var_12.size;
            [var_6, var_7, var_8] = damageskipburndownhigh( var_17 );

            foreach ( var_10 in level.players )
            {
                var_10 monitor_dropmenu( var_6, undefined, "endGame" );
                var_10.wait_for_enemies_cleared = var_6;
                var_10.matchbonus = var_7;
                var_10.transient_prefab_group = var_13;
                var_10 _id_124FA();
            }
        }
        else if ( istrue( level._id_1304E ) )
        {
            var_21 = getdvarint( "scr_br_x1_placement_xp", 5140 );

            foreach ( var_15 in level.teamnamelist )
            {
                if ( scripts\mp\utility\teams::getteamdata( var_15, "teamCount" ) )
                    var_12[var_12.size] = var_15;
            }

            var_17 = var_12.size;
            [var_6, var_7, var_8] = damageskipburndownhigh( var_17 );

            foreach ( var_10 in level.players )
            {
                var_10 monitor_dropmenu( var_6, undefined, "endGame" );
                var_10.wait_for_enemies_cleared = var_6;
                var_10.matchbonus = var_7;
                var_10.transient_prefab_group = var_21;
                var_10 _id_124FA();
            }
        }
        else
        {
            foreach ( var_15 in level.teamnamelist )
            {
                if ( scripts\mp\utility\teams::getteamdata( var_15, "aliveCount" ) )
                    var_12[var_12.size] = var_15;
            }

            var_17 = var_12.size;
            [var_6, var_7, var_8] = damageskipburndownhigh( var_17 );

            foreach ( var_10 in level.players )
            {
                if ( !isdefined( var_10 ) )
                    continue;

                if ( isbot( var_10 ) || initmaxspeedforpathlengthtable( var_10 ) )
                    continue;

                if ( !scripts\mp\utility\player::isreallyalive( var_10 ) )
                    continue;

                var_10 monitor_dropmenu( var_6, undefined, "endGame" );
                var_10 _id_124FA();
                var_10.spawnprotection = 1;
                var_10 setclientomnvar( "ui_br_player_position", 1 );
            }
        }

        foreach ( var_15 in var_12 )
            _id_11E7F( var_15 );
    }

    var_34 = undefined;

    if ( isdefined( var_3 ) )
        var_34 = scripts\mp\gametypes\br_ending.gsc::get_center_of_array( var_3 );

    var_35 = scripts\mp\gametypes\br_quest_util.gsc::getvalidplayersinarray( level.players, level.questinfo.defaultfilter );
    scripts\mp\gametypes\br_analytics.gsc::choppergunner_waitintroanimtime( var_35 );
    level thread scripts\mp\gametypes\br_analytics.gsc::choppergunner_watchexplosioninfluencepoint();
    wait 1.5;

    if ( isdefined( level.checkpoint_get_item ) )
        level thread [[ level.checkpoint_get_item ]]( var_0 );
    else
    {
        level thread handleendgamesplash( var_0 );
        level thread nuclear_core_carrier_escaped( var_0 );

        if ( istrue( level._id_12050 ) )
            level thread npcbodies( var_0 );

        if ( isdefined( level.checkpoint_next_fx_play ) )
            wait( level.checkpoint_next_fx_play );

        level thread nuclear_core_carrier_escaped( var_0 );

        if ( istrue( level._id_12050 ) )
            level thread npcbodies( var_0 );
    }

    if ( scripts\mp\gametypes\br_public.gsc::prophasclonesleft() )
    {
        if ( isdefined( level.grenadestuckkill ) )
        {
            level thread [[ level.grenadestuckkill ]]( var_0, var_1, game["end_reason"]["br_eliminated"] );
            return;
        }
    }

    if ( isdefined( var_3 ) && isdefined( var_34 ) )
        scripts\mp\gametypes\br_ending.gsc::trial_enemy_dont_drop_weapon( var_3, var_34 );

    scripts\mp\gamelogic::endgame_regularmp( var_0, var_1, game["end_reason"]["br_eliminated"] );
}

_id_13019( var_0 )
{

}

handleendgamesplash( var_0 )
{
    var_1 = [];

    if ( isdefined( var_0 ) && var_0 != "tie" )
        var_1 = scripts\mp\utility\teams::getteamdata( var_0, "players" );

    var_2 = scripts\mp\gamelogic::lootleadermarksize();

    if ( scripts\mp\utility\game::missions_clearinappropriaterewards() == "dmz" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "risk" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "kingslayer" )
        thread scripts\mp\music_and_dialog::vehicle_occupancy_giveriotshield( var_1 );

    foreach ( var_4 in var_1 )
    {
        var_4 setclientomnvar( "post_game_state", var_2 );
        var_4 setclientomnvar( "ui_br_end_game_splash_type", 1 );
    }
}

nuclear_core_carrier_escaped( var_0 )
{
    if ( isdefined( var_0 ) && var_0 != "tie" )
    {
        var_1 = scripts\mp\gamelogic::lootleadermarksize();

        foreach ( var_3 in level.players )
        {
            if ( isdefined( var_3.vehicle_clearpreventplayercollisiondamagefortimeafterexit ) && var_3.vehicle_clearpreventplayercollisiondamagefortimeafterexit.team == var_0 && var_3.team != var_0 && !isdefined( var_3.obj_room_fire_03 ) )
            {
                var_3 setclientomnvar( "post_game_state", var_1 );
                var_3 setclientomnvar( "ui_br_end_game_splash_type", 1 );
                var_3.obj_room_fire_03 = 1;
            }
        }
    }
}

npcbodies( var_0 )
{
    if ( isdefined( var_0 ) && var_0 != "tie" )
    {
        var_1 = scripts\mp\gamelogic::lootleadermarksize();

        foreach ( var_3 in level.players )
        {
            if ( var_3.team != var_0 && !isdefined( var_3.obj_room_fire_03 ) )
            {
                var_3 setclientomnvar( "post_game_state", var_1 );
                var_3 setclientomnvar( "ui_br_end_game_splash_type", 1 );
                var_3.obj_room_fire_03 = 1;
            }
        }
    }
}

brdpadcallback( var_0, var_1 )
{
    if ( istrue( level.play_travel_vo ) )
        return;

    if ( isdefined( var_0 ) )
    {
        switch ( var_0 )
        {
            case "dpad_slot_down":
                if ( scripts\mp\gametypes\br_public.gsc::prophasclonesleft() && var_1 == 0 )
                {
                    if ( isdefined( level.grenadehealthatdeathframeupdatecallback ) )
                        self thread [[ level.grenadehealthatdeathframeupdatecallback ]]( var_0, var_1 );

                    break;
                }

                thread scripts\mp\gametypes\br_pickups.gsc::watch_players_entering_super( var_1 );
                break;
            case "dpad_slot_up":
                scripts\mp\gametypes\br_pickups.gsc::useitemfrominventory( var_1 );
                break;
            case "dpad_perk_buy":
                scripts\mp\gametypes\br_perks.gsc::buyperkinslot( var_1 );
                break;
            case "dpad_mayday":
                thread scripts\cp\equipment\cp_incendiarylauncher::debug_ai_aggro();
                break;
            case "try_use_heal_slot":
                var_2 = var_1;
                scripts\mp\gametypes\br_pickups.gsc::vehicle_collision_ignorefuturemultievent( var_2 );
                break;
            case "br_drop_all":
                if ( scripts\mp\gametypes\br_public.gsc::prophasclonesleft() && var_1 == 0 )
                {
                    if ( isdefined( level.grenadehealthatdeathframeupdatecallback ) )
                        self thread [[ level.grenadehealthatdeathframeupdatecallback ]]( var_0, var_1 );

                    break;
                }

                scripts\mp\gametypes\br_pickups.gsc::watch_for_players_touching_ground( var_1 );
                break;
            default:
                break;
        }
    }
}

get_int_or_0( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    return int( var_0 );
}

parachutecomplete()
{
    if ( clean_up_vandalize() && !clampstepbulletdamage() && !istrue( self.dropbagspawned ) && !istrue( level.vo_nag_plant_router ) )
    {
        if ( scripts\mp\gametypes\br_public.gsc::questrewarduav() )
        {
            thread scripts\mp\gametypes\br_rewards.gsc::spawndropbagonlanding();

            foreach ( var_1 in level.teamdata[self.team]["players"] )
                var_1.dropbagspawned = 1;
        }
    }

    if ( scripts\mp\flags::gameflag( "prematch_done" ) )
        thread scripts\mp\gametypes\br_armory_kiosk.gsc::_id_1203E( 5 );

    thread scripts\cp_mp\gestures::_id_12974();
}

spawnintermission( var_0, var_1 )
{
    scripts\mp\playerlogic::setspawnvariables();
    self freezecontrols( 1 );
    scripts\mp\utility\player::updatesessionstate( "intermission" );
    scripts\mp\utility\player::clearkillcamstate();
    self.friendlydamage = undefined;
    self spawn( var_0, var_1 );
    scripts\mp\utility\player::wait_spawn_final_juggernaut( "playerlogic::spawnIntermission() !!!CODE SPAWN!!! @" + var_0 );
    scripts\mp\utility\player::setdof_spectator();
}

comparescore( var_0 )
{
    if ( !isdefined( self.wait_display_pavelow_boss_health_bar ) || self isplayerheadless() )
    {
        if ( !istrue( game["switchedsides"] ) )
            self setclientomnvar( "ui_br_extended_load_screen", 0 );

        return;
    }

    thread comparescriptindexobscuredspawns();

    if ( !isdefined( self.playerstartjailsetcontrols ) )
    {
        var_1 = self.wait_display_pavelow_boss_health_bar.origin;
        var_2 = scripts\mp\gametypes\br_public.gsc::vandalize_attack_nodes( var_1 );
        var_3 = getdvarint( "scr_br_drop_prespawn_timeout_ms", 9000 );
        scripts\mp\gametypes\br_public.gsc::vandalize_internal( var_2, var_3, 1 );

        if ( !istrue( level._id_1306E ) && !istrue( self._id_1306E ) )
        {
            convoy_left_gulag_monitor();
            self setclientomnvar( "ui_br_transition_type", 4 );
        }

        wait 0.5;
        spawnintermission( var_2, self.wait_display_pavelow_boss_health_bar.angles );
        scripts\mp\spectating::setdisabled();
    }
    else
        self.playerstartjailsetcontrols = undefined;

    scripts\mp\gametypes\br_public.gsc::vehicle_collision_updateinstanceend();
    self freezecontrols( 0 );
}

comparescriptindexobscuredspawns()
{
    self endon( "disconnect" );
    self waittill( "brWaitAndSpawnClientComplete" );
    self clearpredictedstreampos();

    if ( !istrue( level._id_1306E ) )
        self setclientomnvar( "ui_br_transition_type", 0 );

    if ( !istrue( game["switchedsides"] ) )
        self setclientomnvar( "ui_br_extended_load_screen", 0 );
}

brprematchaddkill()
{
    self.kills++;
}

combat_action( var_0 )
{
    if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
        self.pers["damage"] = self.pers["damage"] + var_0;
}

clean_up_func()
{
    foreach ( var_1 in level.players )
    {
        var_1.kills = 0;
        var_1.pers["kills"] = 0;
        var_1.score = 0;
        var_1.pers["score"] = 0;
        var_1.collbrush = 0;
        var_1.pers["contracts"] = 0;
        var_1 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "missionsCompleted", 0 );
        var_1.pers["damage"] = 0;
        var_1 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "damageDealt", 0 );
    }
}

clean_up_laser_trap_ents( var_0 )
{
    level endon( "game_ended" );
    var_1 = getentitylessscriptablearrayinradius( undefined, undefined, undefined, undefined, "door" );
    var_2 = 0;
    var_3 = isdefined( var_0 ) && isint( var_0 );

    foreach ( var_5 in var_1 )
    {
        if ( !var_5 scriptabledoorisclosed() )
        {
            var_5 scriptabledoorclose();

            if ( var_3 )
            {
                var_2++;

                if ( var_2 >= var_0 )
                {
                    var_2 = 0;
                    waitframe();
                }
            }
        }
    }
}

vehicle_collision_update( var_0 )
{
    var_1 = spawnstruct();
    thread _id_12E89( var_1 );
    thread _id_12E93( var_1, var_0 );
    var_1 waittill( "waittill_proc" );
    return var_1.result;
}

_id_12E89( var_0 )
{
    var_0 endon( "waittill_proc" );
    self waittill( "luinotifyserver", var_1, var_2 );
    var_0.result = [ var_1, var_2 ];
    var_0 notify( "waittill_proc" );
}

_id_12E93( var_0, var_1 )
{
    var_0 endon( "waittill_proc" );
    wait( var_1 );
    var_0 notify( "waittill_proc" );
}

playerselectspawnclass()
{
    self endon( "death_or_disconnect" );
    self endon( "last_stand_start" );
    self endon( "halo_kick_c130" );
    level endon( "game_ended" );
    level endon( "end_spawn_selection" );

    if ( getdvarint( "scr_force_cac_sre_callstack", 0 ) == 1 && scripts\mp\utility\game::getgametype() == "br" && scripts\mp\utility\game::missions_clearinappropriaterewards() != "dmz" && scripts\mp\utility\game::missions_clearinappropriaterewards() != "risk" && scripts\mp\utility\game::missions_clearinappropriaterewards() != "rumble" && scripts\mp\utility\game::missions_clearinappropriaterewards() != "sandbox" )
    {
        var_0 = isdefined( level.allowclasschoicefunc ) && istrue( self [[ level.allowclasschoicefunc ]]() );
        scripts\mp\utility\script::getdropbagspawntypeenum( "playerSelectSpawnClass() " + self.name + " ui_options_menu = 2, allowClassChoiceFunc = " + var_0 );
    }

    self setclientomnvar( "ui_options_menu", 2 );
    var_1 = "custom1";
    self.pers["class"] = var_1;
    self.class = var_1;
    scripts\mp\class::preloadandqueueclass( var_1 );
    var_2 = getdvarfloat( "scr_dropbag_timeout", 10.0 );
    var_3 = 0.0;
    var_4 = var_2 > 0.0;

    for (;;)
    {
        var_5 = undefined;
        var_6 = undefined;

        if ( var_4 )
        {
            var_7 = vehicle_collision_update( 1.0 );

            if ( !isdefined( var_7 ) )
            {
                var_3 = var_3 + 1.0;

                if ( var_3 > var_2 )
                {
                    self setclientomnvar( "ui_options_menu", 0 );
                    return 0;
                }

                self setclientomnvar( "ui_options_menu", 2 );
                continue;
            }

            var_5 = var_7[0];
            var_6 = var_7[1];
        }
        else
            self waittill( "luinotifyserver", var_5, var_6 );

        if ( var_5 == "exit_loadout_bag" )
            return 0;
        else if ( var_5 != "class_select" )
            continue;

        var_8 = 0;

        if ( var_6 >= 0 )
        {
            var_9 = scripts\mp\menus::getclasschoice( var_6 );
            self.pers["class"] = var_9;
            self.class = var_9;
            scripts\mp\class::preloadandqueueclass( var_9 );
            var_8 = 1;
        }

        self setclientomnvar( "ui_options_menu", 0 );
        return var_8;
    }
}

playerselectspawnsequence()
{
    var_0 = self;
    var_0.issquadleader = undefined;
    var_0.br_infilstarted = 0;
    var_0 endon( "disconnect" );
    scripts\mp\gametypes\br_vehicles.gsc::emptyallvehicles();
    var_1 = 1.0;
    var_2 = scripts\mp\gametypes\br_infils.gsc::getspawnselectionlockedtimer();
    var_3 = getdvarint( "scr_br_match_timer", 25 );
    var_4 = var_2 + 0.5 + var_3;
    var_0 thread scripts\mp\gametypes\br_infils.gsc::infilallfadetoblack( var_1, var_4, 1 );
    wait( var_1 );
    var_0 freezecontrols( 1 );
    var_0 thread monitorjumpmasterclaim();

    if ( clean_up_strafe() )
        var_0 playerselectspawnclass();

    var_0 playerselectspawnlocation();
    var_0 setclientomnvar( "ui_options_menu", 0 );
    var_0 freezecontrols( 0 );
}

playerstartselectspawnclassnonexclusion()
{
    var_0 = self;
    var_0 endon( "disconnect" );
    var_0 freezecontrols( 1 );

    if ( clean_up_strafe() )
        var_0 playerselectspawnclass();

    var_0 setclientomnvar( "ui_options_menu", 0 );
    var_0 freezecontrols( 0 );
}

playerselectspawnlocation()
{
    var_0 = self;
    var_0 beginlocationselection( 0, 0, 0, 0, 4 );

    while ( !scripts\mp\flags::gameflag( "end_spawn_selection" ) )
    {
        var_1 = waittill_confirm_or_cancel( "confirm_location_alt", "cancel_location" );

        if ( !isdefined( var_1 ) || var_1.string == "cancel_location" )
            continue;

        waittillframeend;
        scripts\mp\gametypes\br_infils.gsc::handleinfillocationselection( var_1 );
        waitframe();
    }

    var_0 endlocationselection();
}

monitorjumpmasterclaim()
{
    var_0 = self;
    var_0 endon( "disconnect" );
    var_0 thread listenforjumpmasterclaimluanotify();
    var_1 = 0;

    while ( !scripts\mp\flags::gameflag( "end_spawn_selection" ) )
    {
        var_2 = var_0 scripts\engine\utility::waittill_any_ents_return( var_0, "attempt_jumpmaster_claim", var_0, "squad_jumpmaster_claimed", level, "end_spawn_selection" );

        if ( var_2 == "attempt_jumpmaster_claim" )
        {
            if ( !var_1 )
            {
                var_0 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "jumpMasterState", 2 );
                var_0.issquadleader = 1;
                var_0 scripts\mp\utility\lower_message::setlowermessageomnvar( 48 );
                var_3 = scripts\mp\utility\teams::getfriendlyplayers( var_0.team, 0 );

                foreach ( var_5 in var_3 )
                {
                    if ( var_5 != var_0 )
                    {
                        var_5.issquadleader = 0;
                        var_5 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "jumpMasterState", 0 );
                        var_5 notify( "squad_jumpmaster_claimed" );
                        var_5 scripts\mp\utility\lower_message::setlowermessageomnvar( 49 );
                    }
                }
            }
            else
            {
                var_0 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "jumpMasterState", 1 );
                var_0 scripts\mp\utility\lower_message::setlowermessageomnvar( 53 );
            }

            continue;
        }

        if ( var_2 == "squad_jumpmaster_claimed" )
            var_1 = 1;
    }
}

listenforjumpmasterclaimluanotify()
{
    var_0 = self;
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_0 notify( "listenClaimJumpMaster" );
    var_0 endon( "listenClaimJumpMaster" );
    level endon( "end_spawn_selection" );

    for (;;)
    {
        var_0 waittill( "luinotifyserver", var_1 );

        if ( var_1 == "attempt_jumpmaster_claim" )
            var_0 notify( "attempt_jumpmaster_claim" );
    }
}

sendafksquadmembertogulag()
{
    var_0 = self;
    var_0.br_infilstarted = 1;
    var_0 setclientomnvar( "ui_br_infil_started", 1 );
    var_0 setclientomnvar( "ui_br_infiled", 1 );
    var_0 playershow( 1 );
    var_0 kill();
}

checkpoint_fx_play()
{
    self endon( "disconnect" );

    if ( isdefined( level.raritycammedium ) && !level.raritycammedium )
        return;

    self setclientomnvar( "ui_br_display_perk_info", 1 );
    wait 0.1;
    self setclientomnvar( "ui_br_display_perk_info", 0 );
}

checkpoint_register( var_0, var_1 )
{
    var_0.gettingloadout = 1;
    var_2 = undefined;

    if ( isdefined( var_0.preloadedclassstruct ) )
    {
        var_2 = var_0.preloadedclassstruct;
        var_0.preloadedclassstruct = undefined;
    }
    else
    {
        var_2 = var_0 scripts\mp\class::loadout_getclassstruct();
        var_2 = var_0 scripts\mp\class::loadout_updateclass( var_2, var_0.class );
    }

    var_0.classstruct = var_2;
    var_3 = istrue( var_0.inlaststand );
    var_4 = checkpoint_edit_munitions_icon_init( var_0, var_1 );
    var_0.prevweaponobj = undefined;
    var_0 scripts\mp\class::loadout_clearperks();
    var_0 scripts\mp\class::loadout_updateplayerperks( var_2 );
    monitor_game_end_on_front_truck_death( var_0 );
    monitor_traversal_timer( var_0 );

    if ( isdefined( var_0.classstruct.loadoutsecondaryobject ) )
        scripts\mp\gametypes\br_weapons.gsc::br_forcegivecustomweapon( var_0, var_0.classstruct.loadoutsecondaryobject, var_0.classstruct.loadoutsecondaryfullname, var_0.classstruct.loadoutsecondary );

    if ( isdefined( var_0.classstruct.loadoutprimaryobject ) )
        scripts\mp\gametypes\br_weapons.gsc::br_forcegivecustomweapon( var_0, var_0.classstruct.loadoutprimaryobject, var_0.classstruct.loadoutprimaryfullname, var_0.classstruct.loadoutprimary );

    var_5 = [];

    if ( isdefined( var_0.classstruct.loadoutequipmentprimary ) )
        var_5[var_5.size] = var_0.classstruct.loadoutequipmentprimary;

    if ( isdefined( var_0.classstruct.loadoutequipmentsecondary ) )
        var_5[var_5.size] = var_0.classstruct.loadoutequipmentsecondary;

    foreach ( var_7 in var_5 )
    {
        if ( isdefined( level.br_pickups.br_equipnametoscriptable[var_7] ) )
        {
            var_8 = level.br_pickups.br_equipnametoscriptable[var_7];
            scripts\mp\gametypes\br_pickups.gsc::br_forcegivecustompickupitem( var_0, var_8, 1 );

            if ( isdefined( var_4.init_chopper_boss_battle ) && var_4.init_chopper_boss_battle.type == var_8 )
                scripts\mp\gametypes\br_pickups.gsc::lootused( var_4.init_chopper_boss_battle, undefined, "visible", var_0, 1 );
            else if ( isdefined( var_4.init_civs ) && var_4.init_civs.type == var_8 )
                scripts\mp\gametypes\br_pickups.gsc::lootused( var_4.init_civs, undefined, "visible", var_0, 1 );
        }
    }

    var_0.gettingloadout = 0;
    var_0 notify( "giveLoadout" );
    var_0 thread checkpoint_fx_play();

    if ( var_3 )
    {
        var_10 = var_0 getcurrentprimaryweapon();

        if ( !issameweapon( var_10 ) )
            var_10 = getcompleteweaponname( var_10 );

        self.laststandoldweaponobj = var_10;
        var_11 = var_0 brchooselaststandweapon();

        if ( !issameweapon( var_11 ) )
            var_11 = getcompleteweaponname( var_11 );

        var_0 scripts\mp\laststand::givelaststandweapon( var_11 );

        if ( !var_0 scripts\mp\utility\perk::_hasperk( "specialty_pistoldeath" ) )
            var_0 scripts\mp\utility\perk::giveperk( "specialty_pistoldeath" );
    }
}

checkpoint_edit_munitions_icon_init( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2.heli_lookat_monitor = 0;
    var_2._id_12FED = [];
    var_2.init_chopper_boss_battle = undefined;
    var_2.init_civs = undefined;

    foreach ( var_4 in var_0.equippedweapons )
    {
        var_5 = scripts\mp\utility\weapon::getweaponrootname( var_4.basename );

        if ( issameweapon( var_4 ) && var_4.inventorytype == "primary" )
        {
            if ( var_5 != "iw8_fists" && var_5 != "iw8_knifestab" )
            {
                var_6 = var_0 scripts\mp\gametypes\br_extract_quest.gsc::initbrmechanics( var_4 );

                if ( istrue( var_1 ) && !var_6 )
                {
                    var_7 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_2, var_0.origin, var_0.angles, var_0 );
                    var_8 = scripts\mp\gametypes\br_weapons.gsc::weaponspawn( var_4, var_0, var_7, 0, 1 );

                    if ( isdefined( var_8 ) )
                    {
                        var_9 = var_0 getweaponammoclip( var_4 );
                        var_10 = var_0 getweaponammoclip( var_4, "left" );
                        var_11 = 0;

                        if ( var_4.hasalternate )
                        {
                            var_12 = var_4 getaltweapon();

                            if ( !scripts\mp\gametypes\br_weapons.gsc::checkformatchend( var_4, var_12 ) )
                                var_11 = var_0 getweaponammoclip( var_12 );
                        }

                        scripts\mp\gametypes\br_pickups.gsc::select_back_two_spawners( var_8, var_9, var_10, var_11 );
                        var_2._id_12FED[var_2._id_12FED.size] = var_8;
                    }
                }
            }

            var_0 scripts\cp_mp\utility\inventory_utility::_takeweapon( var_4 );
        }
    }

    if ( isdefined( var_0.equipment["primary"] ) )
    {
        if ( istrue( var_1 ) )
        {
            var_14 = var_0 scripts\mp\equipment::getequipmentslotammo( "primary" );
            var_15 = scripts\engine\utility::array_find( level.br_pickups.br_equipname, var_0.equipment["primary"] );

            if ( isdefined( var_15 ) && var_14 > 0 )
            {
                var_7 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_2, var_0.origin, var_0.angles, var_0 );
                var_8 = scripts\mp\gametypes\br_pickups.gsc::spawnpickup( var_15, var_7, var_14, 1 );

                if ( isdefined( var_8 ) )
                    var_2.init_chopper_boss_battle = var_8;
            }
        }

        var_0 scripts\mp\equipment::takeequipment( "primary" );
    }

    if ( isdefined( var_0.equipment["secondary"] ) )
    {
        if ( istrue( var_1 ) )
        {
            var_14 = var_0 scripts\mp\equipment::getequipmentslotammo( "secondary" );
            var_15 = scripts\engine\utility::array_find( level.br_pickups.br_equipname, var_0.equipment["secondary"] );

            if ( isdefined( var_15 ) && var_14 > 0 )
            {
                var_7 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_2, var_0.origin, var_0.angles, var_0 );
                var_8 = scripts\mp\gametypes\br_pickups.gsc::spawnpickup( var_15, var_7, var_14, 1 );

                if ( isdefined( var_8 ) )
                {
                    var_2.init_civs = var_8;
                    var_8 scripts\mp\gametypes\br_pickups.gsc::helicopter_firendly_dmg_text_display( var_0, var_8.type );
                }
            }
        }

        var_0 scripts\mp\equipment::takeequipment( "secondary" );
    }

    var_0 giveweapon( getcompleteweaponname( "iw8_fists_mp" ) );
    return var_2;
}

chopper_carepackage()
{
    self endon( "disconnect" );
    self freezecontrols( 1 );
    self setclientomnvar( "ui_open_loadout_bag", 1 );
    var_0 = playerselectspawnclass();
    self setclientomnvar( "ui_options_menu", 0 );
    self setclientomnvar( "ui_open_loadout_bag", 0 );
    self freezecontrols( 0 );
    return var_0;
}

br_givedropbagloadout( var_0 )
{
    if ( istrue( self.playlandingbreath ) )
        var_0 notify( "br_try_armor_cancel" );

    var_1 = var_0 chopper_carepackage();

    if ( istrue( var_1 ) )
        scripts\cp_mp\killstreaks\airdrop::cluster_child_spawnpoint_scoring( var_0 );
    else
        return;

    checkpoint_register( var_0, 1 );
    var_2 = scripts\engine\utility::ter_op( isstartstr( var_0.class, "custom" ), 1, 0 );
    var_0 scripts\cp\helicopter\chopper_boss::strict_ff_disable( var_2 );

    if ( scripts\mp\utility\game::getgametype() == "br" )
    {
        var_3 = self.origin;
        var_0 endon( "disconnect" );
        wait 0.5;
        scripts\mp\gametypes\br_analytics.gsc::choppergunner_refillmissiles( var_0, var_3, self );
        scripts\mp\gametypes\br_analytics.gsc::choppersupport_issmallpatrolmap( var_0, "dropbag_used" );

        if ( isdefined( var_0.primaryweaponobj ) )
            var_0.primaryweaponobj.customweaponname = createheadicon( var_0.primaryweaponobj );

        if ( isdefined( var_0.secondaryweaponobj ) )
            var_0.secondaryweaponobj.customweaponname = createheadicon( var_0.secondaryweaponobj );
    }
}

combatrecordequipmentused( var_0 )
{
    level notify( "dropbag_kill_callout_" + self.origin );

    if ( scripts\mp\utility\game::getgametype() == "br" )
        scripts\mp\gametypes\br_analytics.gsc::choppergunner_handledangerzone( self.team, self.origin );
}

cleanupdropbagsoncircle()
{
    if ( !getdvarint( "scr_br_cleanup_drop_bags_on_first_circle", 0 ) )
        return;

    level waittill( "br_circle_started" );

    while ( level.br_pickups.crates.size > 0 )
    {
        var_0 = [];

        foreach ( var_2 in level.br_pickups.crates )
        {
            if ( isdefined( var_2 ) && ( !isdefined( var_2.curprogress ) || var_2.curprogress == 0 ) )
            {
                var_2 thread scripts\cp_mp\killstreaks\airdrop::destroycrate();
                continue;
            }

            var_0[var_0.size] = var_2;
        }

        level.br_pickups.crates = var_0;
        var_0 = undefined;
        wait 1.0;
    }
}

brchooselaststandweapon()
{
    var_0 = self;
    var_1 = var_0 scripts\mp\gametypes\br_public.gsc::unset_relic_martyrdom();

    if ( !isdefined( var_1 ) )
        var_1 = "iw8_gunless";

    return var_1;
}

unset_just_keep_moving( var_0 )
{
    scripts\mp\gametypes\br_gulag.gsc::unset_just_keep_moving( var_0 );
}

shoulddropbrprimary( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 )
{
    var_9 = scripts\cp_mp\utility\damage_utility::packdamagedata( var_1, self, var_2, var_4, var_3, var_0, undefined, var_5 );
    var_9.hitloc = var_6;

    if ( scripts\mp\gametypes\br_gametypes.gsc::progress_obj( "lastStandAllowed" ) && !scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "lastStandAllowed", var_9 ) )
        return 0;

    return 1;
}

rear_spotlight_min_dist_sq_from_node( var_0 )
{
    var_1 = var_0.attacker;

    if ( !isdefined( var_1 ) )
        return 0;

    if ( istrue( var_0.assistedsuicide ) )
        return 0;

    if ( scripts\mp\gametypes\br_public.gsc::processvoqueue() )
        return 0;

    return 1;
}

cp_dwn_twn_2_sound_load( var_0 )
{
    if ( !rear_spotlight_min_dist_sq_from_node( var_0 ) )
        var_0.dokillcam = 0;

    if ( !var_0.dokillcam )
        var_0.victim clearpredictedstreampos();

    if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "teamSpectate" ) )
        scripts\mp\gametypes\br_spectate.gsc::setup_teleport_rooms( var_0.victim, var_0.attacker, 1 );
}

propcamerazoom( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( !isalive( var_0 ) )
        return 0;

    if ( istrue( var_0.gulag ) )
        return 0;

    if ( istrue( var_0.inlaststand ) )
        return 0;

    return 1;
}

mlgiconemptyflag( var_0 )
{
    var_1 = [];
    var_2 = scripts\mp\utility\teams::getteamdata( var_0, "players" );

    foreach ( var_4 in var_2 )
    {
        if ( propcamerazoom( var_4 ) )
            var_1[var_1.size] = var_4;
    }

    return var_1;
}

strafe_speed( var_0, var_1 )
{
    var_2 = scripts\mp\gametypes\br_public.gsc::unset_relic_martyrdom();

    if ( propcamerazoom( var_1 ) && !isdefined( var_2 ) )
    {
        var_3 = mlgiconemptyflag( var_1.team );

        if ( var_3.size < 2 && !istrue( level.restorekillstreakplayerangles ) )
        {
            if ( var_1 scripts\mp\utility\perk::_hasperk( "specialty_pistoldeath" ) )
                var_1 scripts\mp\utility\perk::removeperk( "specialty_pistoldeath" );
        }

        if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "armor" ) )
            var_1 scripts\mp\gametypes\br_armor.gsc::cleanup_target_stats_thermal();
    }
}

compareplundercounts( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 )
{
    if ( isdefined( var_1 ) && var_1 != var_2 && var_3 >= var_2.health )
        strafe_speed( var_1, var_2 );
}

clear_and_give_killstreak_loadout_demo( var_0 )
{
    switch ( var_0 )
    {
        case "nothing":
            return 0;
        case "noammo":
            return 1;
        case "limitedammo":
            return 2;
        case "standardammo":
            return 3;
        case "dropbag":
            return 4;
        case "dropbagtime":
            return 5;
        case "pistolarmordropbagtime":
            return 6;
        case "pistolarmor":
            return 7;
        case "altmodegoldengun":
            return 8;
        default:
            return 0;
    }
}

clear_lights_based_on_targetname()
{
    var_0 = "pistolarmordropbagtime";
    var_1 = getdvar( "scr_br_loadout_option", var_0 );
    var_2 = clear_and_give_killstreak_loadout_demo( var_1 );
    level.checkyellowmassacre = var_2;
}

clean_up_strafe()
{
    return isdefined( level.checkyellowmassacre ) && ( level.checkyellowmassacre == 1 || level.checkyellowmassacre == 2 || level.checkyellowmassacre == 3 );
}

clean_up_vandalize()
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "drogBagLoadout" ) )
        return 0;

    return isdefined( level.checkyellowmassacre ) && ( level.checkyellowmassacre == 4 || level.checkyellowmassacre == 5 || level.checkyellowmassacre == 6 );
}

clampstepbulletdamage()
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "drogBagLoadout" ) )
        return 0;

    return isdefined( level.checkyellowmassacre ) && ( level.checkyellowmassacre == 5 || level.checkyellowmassacre == 6 );
}

clear_and_give_killstreak_loadout_assault()
{
    var_0 = [];

    if ( !isdefined( level.br_level ) )
    {
        var_0[var_0.size] = 1;
        return var_0;
    }

    var_1 = scripts\mp\gametypes\br_gametypes.gsc::lootleadermarksizedynamic( "dropBagDelay" );

    if ( isdefined( var_1 ) )
    {
        var_0[var_0.size] = var_1;
        return var_0;
    }

    var_2 = -15;
    var_3 = scripts\mp\gametypes\br_circle.gsc::low_roof_enemy_watcher( 0 );
    var_4 = max( 0, var_3 + var_2 );
    var_5 = getdvarfloat( "scr_br_dropbag_delay", var_4 );
    var_0[var_0.size] = var_5;

    if ( getdvarint( "scr_br_dropbag2_enabled", 0 ) && !scripts\mp\gametypes\br_gametypes.gsc::propsetflashesleft( "dropBagLoop" ) )
    {
        var_6 = 15;
        var_7 = scripts\mp\gametypes\br_gulag.gsc::modeloadoutupdateammo();
        var_8 = max( 0, var_7 + var_6 );
        var_9 = getdvarfloat( "scr_br_dropbag2_delay", var_8 );
        var_0[var_0.size] = var_9;
    }

    return var_0;
}

clean_up_steam_triggers()
{
    return isdefined( level.checkyellowmassacre ) && ( level.checkyellowmassacre == 6 || level.checkyellowmassacre == 7 || level.checkyellowmassacre == 8 );
}

clear_and_give_killstreak_loadout_recon()
{
    switch ( level.checkyellowmassacre )
    {
        case 8:
        case 7:
        case 6:
            return 0;
        default:
    }
}

clean_up_steam()
{
    return isdefined( level.checkyellowmassacre ) && ( level.checkyellowmassacre == 1 || level.checkyellowmassacre == 2 || level.checkyellowmassacre == 3 );
}

clear_all_remaining()
{
    if ( isdefined( level.checkyellowmassacre ) )
    {
        if ( level.checkyellowmassacre == 2 )
            return 0.5;
        else if ( level.checkyellowmassacre == 3 )
            return 1.0;
    }

    return 0.0;
}

cleanupvehicleoutline()
{
    if ( isdefined( level.checkyellowmassacre ) )
    {
        if ( level.checkyellowmassacre == 2 )
            return 20;
    }

    return;
}

convoy_start_5b()
{
    foreach ( var_1 in level.players )
    {
        if ( isplayer( var_1 ) && var_1 scripts\mp\utility\player::isinkillcam() )
        {
            var_1 notify( "abort_killcam" );
            var_1.cancelkillcam = 1;
        }
    }
}

clear_goal_when_heli_gone( var_0 )
{
    var_1 = getdvarint( "scr_br_invulnerability_time", 30 );

    if ( var_1 > var_0 )
        var_1 = var_0;

    wait( var_0 - var_1 );
    level.allowprematchdamage = 0;
    wait( var_1 / 2.0 );
    convoy_start_5b();
    wait( var_1 / 2.0 );
}

setincomingremovedcallback()
{
    var_0 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "maySpawn" );

    if ( isdefined( var_0 ) )
        return var_0;

    return scripts\mp\playerlogic::mayspawn();
}

spawnclientbr( var_0 )
{
    self endon( "disconnect" );
    self._id_126FF = undefined;

    if ( scripts\mp\gametypes\br_public.gsc::iswaitingtoentergulag( self ) )
    {
        self notify( "attempted_spawn" );
        scripts\mp\gametypes\br_gulag.gsc::entergulag( self );
        self.waitingtospawn = 0;
    }
    else if ( istrue( self.waitingtospawnamortize ) || scripts\mp\gametypes\br_public.gsc::radiussq( self ) || istrue( scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "spawnHandled", self ) ) )
    {
        self notify( "attempted_spawn" );
        self.waitingtospawn = 0;
    }
    else if ( !setincomingremovedcallback() )
    {
        waitframe();
        self notify( "attempted_spawn" );

        if ( istrue( level.playanim_mountturret ) || istrue( level.snatchspawnalltoc130done ) || istrue( level.checkpoint_add_carepackage ) )
        {
            if ( isdefined( level.brlatespawnplayer ) )
                self thread [[ level.brlatespawnplayer ]]();

            return;
        }
    }
    else
    {
        if ( istrue( var_0 ) )
            level.snatchspawnalltoc130done = 0;

        if ( istrue( level.playanim_mountturret ) || istrue( level.snatchspawnalltoc130done ) || istrue( level.checkpoint_add_carepackage ) )
        {
            if ( isdefined( level.brlatespawnplayer ) )
                self thread [[ level.brlatespawnplayer ]]();

            return;
        }

        if ( !istrue( level.checkforarenaloadoutoverride ) )
        {
            if ( isdefined( level.bypassclasschoicefunc ) )
                self.class = self [[ level.bypassclasschoicefunc ]]();
            else
                self.class = tracking_munitions_purchase();
        }

        if ( getdvarint( "scr_br_verify_prematch_loadouts", 0 ) == 1 )
            thread _id_12D45();

        var_1 = getdvarint( "scr_br_drop_prespawn", 1 );
        var_2 = var_1 && _id_12B75() && !isbot( self );

        if ( var_1 > 1 )
            var_2 = var_2 && !istrue( self.hasspawned );

        if ( var_2 )
            self.wait_display_pavelow_boss_health_bar = getspawnpoint( var_2 );

        scripts\mp\playerlogic::waitandspawnclient( var_0 );
        self freezecontrols( 1 );

        if ( _id_12B75() )
            thread prematchdeployparachute();

        waitframe();
        self skydive_setdeploymentstatus( 0 );
        self skydive_setbasejumpingstatus( 0 );
        var_3 = !self isplayerheadless();
        var_4 = scripts\mp\teams::getcustomization()["body"];
        var_5 = gettime();

        if ( var_3 )
        {
            while ( isalive( self ) && isdefined( self.weaponlist ) && !self hasloadedcustomizationviewmodels( var_4 ) && !self hasloadedviewweapons( self.weaponlist ) )
            {
                if ( var_5 + 3000 < gettime() )
                    break;

                waitframe();
            }
        }

        self notify( "brWaitAndSpawnClientComplete" );
        self.waitingtospawn = 0;
        self freezecontrols( 0 );
    }
}

clean_enemy_ai( var_0, var_1, var_2 )
{
    var_3 = 360 / var_0.size;
    var_4 = getdvarint( "scr_br_x1OpsFinalCircleRadiusOffset", 10000 );
    var_5 = scripts\mp\gametypes\br_circle.gsc::getdangercircleorigin();
    var_6 = 0;

    if ( isdefined( var_2 ) )
        var_6 = var_2;
    else
        var_6 = scripts\mp\gametypes\br_circle.gsc::getdangercircleradius() - var_4;

    for ( var_7 = 0; var_7 < var_0.size; var_7++ )
    {
        var_8 = var_6 * cos( var_3 * var_7 );
        var_9 = var_6 * sin( var_3 * var_7 );
        var_10 = var_5[0] + var_8;
        var_11 = var_5[1] + var_9;
        var_12 = 0;
        var_13 = ( var_10, var_11, var_12 );

        if ( var_1 )
        {
            foreach ( var_15 in var_0 )
                var_15.complete_hack_console = var_13;

            continue;
        }

        var_0[var_7].complete_hack_console = var_13;
    }
}

unset_forced_aitype_armored()
{
    if ( scripts\cp_mp\execution::hasexecution() )
    {
        self._id_11C58 = self.executionref;
        scripts\cp_mp\execution::_clearexecution();
        self disableexecutionattack();
    }
}

unset_heavy_hitter()
{
    if ( isdefined( self._id_11C58 ) )
    {
        scripts\cp_mp\execution::_giveexecution( self._id_11C58 );
        self enableexecutionattack();
        self._id_11C58 = undefined;
    }
}

_id_12F27()
{
    level endon( "game_ended" );
    self notify( "br_squad_leader_shift" );
    self endon( "br_squad_leader_shift" );
    var_0 = self;
    var_1 = var_0.team;
    var_2 = var_0.squadindex;

    for (;;)
    {
        var_3 = "";

        if ( scripts\mp\utility\game::missions_clearinappropriaterewards() == "dmz" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "sandbox" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "risk" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "rumble" )
            var_3 = var_0 scripts\engine\utility::_id_12E4E( "disconnect", "br_pass_squad_leader" );
        else
            var_3 = var_0 scripts\engine\utility::_id_12E50( "death", "disconnect", "remove_from_alive_count", "br_pass_squad_leader" );

        if ( var_3 == "br_pass_squad_leader" )
        {
            if ( !_id_12683( var_1 ) )
            {
                var_0 playlocalsound( "br_pickup_deny" );
                continue;
            }
        }

        if ( var_3 != "disconnect" )
        {
            if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
                continue;

            if ( !istrue( var_0.br_infilstarted ) )
                continue;
        }

        if ( var_0 ai_goal_distribution( var_1, var_2 ) )
            return;
    }
}

_id_11EE5( var_0 )
{
    var_1 = self;
    var_1.pers["squadMemberIndex"] = var_0;
    var_2 = var_1.game_extrainfo & 65528;
    var_2 = var_2 | var_0;
    var_1.game_extrainfo = var_2;
}

_id_11EDB( var_0 )
{
    var_1 = self;

    if ( var_0 == var_1 scripts\mp\gametypes\br_public.gsc::questrewarduav() )
        return;

    var_1.progression_main = var_0;

    if ( var_0 )
    {
        var_1.game_extrainfo = var_1.game_extrainfo | 64;
        var_1 thread _id_12F27();
    }
    else
        var_1.game_extrainfo = var_1.game_extrainfo & ~64;
}

ai_goal_distribution( var_0, var_1 )
{
    var_2 = self;

    if ( !isdefined( var_0 ) )
        var_0 = var_2.team;

    if ( !isdefined( var_1 ) )
        var_1 = var_2.squadindex;

    if ( isdefined( var_2 ) && !var_2 scripts\mp\gametypes\br_public.gsc::questrewarduav() )
        return 0;

    if ( isdefined( var_2 ) )
        var_2.obj_overwatch_tanks_ref = 1;

    var_3 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_0, var_2.squadindex );
    var_4 = 0;
    var_5 = undefined;

    foreach ( var_7 in var_3 )
    {
        var_8 = ui_init( var_7 );

        if ( var_8 > var_4 )
        {
            var_4 = var_8;
            var_5 = var_7;
        }
    }

    var_10 = 0;

    if ( isdefined( var_5 ) )
    {
        if ( isdefined( var_2 ) )
            var_2 _id_11EDB( 0 );

        var_5 _id_11EDB( 1 );
        var_10 = 1;

        if ( !istrue( level.checkpoint_add_carepackage ) )
            level scripts\mp\gametypes\br_public.gsc::cloud_cover( "deploy_squad_leader", var_5, 1, 0 );
    }

    _id_12B2C( var_0, var_1 );
    return var_10;
}

_id_12683( var_0, var_1 )
{
    var_2 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_0, var_1 );
    var_3 = 0;

    foreach ( var_5 in var_2 )
    {
        if ( !isdefined( var_5 ) || var_5 scripts\mp\gametypes\br_public.gsc::questrewarduav() )
            continue;

        if ( !isalive( var_5 ) )
            continue;

        if ( var_5 ismlgspectator() || var_5 isspectatingplayer() )
            continue;

        if ( var_5 scripts\mp\gametypes\br_public.gsc::isplayeringulag() )
            continue;

        if ( !istrue( var_5.obj_overwatch_tanks_ref ) )
        {
            var_3 = 1;
            break;
        }
    }

    return var_3;
}

_id_12B2C( var_0, var_1 )
{
    var_2 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_0, var_1 );
    var_3 = _id_12683( var_0, var_1 );

    foreach ( var_5 in var_2 )
        var_5 setclientomnvar( "ui_br_squad_leader_can_pass", var_3 );
}

ui_init( var_0 )
{
    if ( !isdefined( var_0 ) || var_0 scripts\mp\gametypes\br_public.gsc::questrewarduav() || var_0 ismlgspectator() || var_0 isspectatingplayer() || !isalive( var_0 ) )
        return 0;

    if ( var_0 scripts\mp\gametypes\br_public.gsc::isplayeringulag() )
        return 1;

    if ( istrue( var_0.inlaststand ) )
        return 2;

    if ( istrue( var_0.obj_overwatch_tanks_ref ) )
        return 3;

    return 4;
}

_id_1269B( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\mp\utility\teams::getteamdata( var_2, "players" );

    foreach ( var_6 in var_4 )
    {
        if ( !istrue( var_6.gulag ) )
            var_6 thread scripts\mp\hud_message::showsplash( var_0, var_3, var_1 );
    }
}

_id_11F00( var_0 )
{
    self.issuperdisabled = var_0;

    if ( !var_0 )
        hvt_visual_callout();
    else
    {
        var_1 = scripts\mp\supers::getcurrentsuper();

        if ( isdefined( var_1 ) )
        {
            var_2 = var_1.staticdata.weapon;
            var_3 = self getweaponammoclip( var_2 );
            self.give_punchcard = var_3;
        }

        self notify( "super_disable_start" );
        thread scripts\mp\supers::watchsuperdisableplayer();
    }
}

hvt_visual_callout()
{
    var_0 = "super_delay_mp";
    var_1 = scripts\mp\supers::getcurrentsuper();

    if ( isdefined( var_1 ) )
    {
        var_2 = var_1.staticdata.weapon;
        var_3 = 0;

        if ( isdefined( self.give_punchcard ) )
        {
            var_3 = self.give_punchcard;
            self.give_punchcard = undefined;
        }

        scripts\cp_mp\utility\inventory_utility::_giveweapon( var_2 );
        self setweaponammoclip( var_2, var_3 );
        self assignweaponoffhandspecial( var_2 );
        scripts\cp_mp\utility\inventory_utility::_takeweapon( var_0 );
    }

    self notify( "super_disable_end" );
}

mix()
{
    if ( !istrue( self.issuperdisabled ) )
        return 0;

    var_0 = 0;

    if ( isdefined( self.give_punchcard ) )
        var_0 = self.give_punchcard;

    return var_0;
}

supply_crate_vo_when_used( var_0 )
{
    var_1 = var_0 getweaponslistprimaries();

    if ( var_0 scripts\mp\utility\killstreak::isjuggernaut() )
    {
        if ( !isdefined( var_1 ) || var_1.size == 0 )
        {
            var_2 = var_0 getcurrentweapon();
            var_3 = var_0 getcurrentweaponclipammo();
            var_4 = weaponclipsize( var_2 );

            if ( var_3 < var_4 )
            {
                var_0 setweaponammoclip( var_2, var_4 );
                var_0 scripts\mp\damagefeedback::hudicontype( "br_ammo" );
                var_0 playlocalsound( "iw8_support_box_use" );
                return 1;
            }
        }
    }

    foreach ( var_6 in var_1 )
    {
        var_7 = scripts\mp\gametypes\br_weapons.gsc::br_ammo_type_for_weapon( var_6 );

        if ( var_6.isalternate && scripts\mp\utility\weapon::attachmentmap_tobase( var_6.underbarrel ) == "ubshtgn" )
        {
            var_8 = weaponclipsize( var_6 );
            var_9 = int( var_8 );
            var_0 setweaponammoclip( var_6, var_9 );
            var_6._id_11ABA = 1;
            continue;
        }
        else if ( scripts\mp\utility\weapon::qm_intro_dialogue( var_6 ) )
        {
            var_0 setweaponammoclip( var_6, var_6.clipsize );
            var_6._id_11ABA = 1;
            continue;
        }
        else if ( !isdefined( var_7 ) )
            continue;

        var_10 = int( level.br_ammo_max[var_7] / level.br_ammo_clipsize[var_7] );
        var_0 scripts\mp\gametypes\br_weapons.gsc::checkpoint_player_spawns_func( var_6, var_10 );
        var_6._id_11ABA = 1;
    }

    if ( isdefined( var_0.equipment["primary"] ) )
        var_0 scripts\mp\equipment::incrementequipmentammo( var_0.equipment["primary"], 2 );

    if ( isdefined( var_0.equipment["secondary"] ) )
        var_0 scripts\mp\equipment::incrementequipmentammo( var_0.equipment["secondary"], 2 );

    var_0 scripts\mp\damagefeedback::hudicontype( "ammobox" );
    scripts\mp\equipment\support_box::_id_125A4( var_0 );
    thread scripts\mp\equipment\support_box::supportbox_onplayeruseanim();
    return 1;
}

stop_counter_beep_sfx_on_bomb_vests( var_0 )
{
    var_1 = var_0 scripts\mp\equipment::getequipmentmaxammo( "equip_armorplate" );

    if ( var_1 <= 0 )
        return 0;

    scripts\mp\gametypes\br_pickups.gsc::br_forcegivecustompickupitem( var_0, "brloot_armor_plate", 1, var_1, 0 );
    var_0 scripts\mp\damagefeedback::hudicontype( "br_armor" );
    scripts\mp\equipment\support_box::_id_125A4( var_0 );
    thread scripts\mp\equipment\support_box::supportbox_onplayeruseanim();
    return 1;
}

airdrop_registercrateforcleanup( var_0 )
{
    registercrateforcleanup( var_0 );
}

balloon_deposit_cash_nags( var_0 )
{
    cloudref( var_0 );
}

airdrop_makeweaponfromcrate()
{
    makeweaponfromcrate();
}

airdrop_makeitemfromcrate()
{
    makeitemfromcrate();
}

airdrop_makeitemsfromcrate( var_0 )
{
    makeitemsfromcrate( var_0 );
}

airdrop_br_givedropbagloadout( var_0 )
{
    br_givedropbagloadout( var_0 );
}

balloon_hint_logic( var_0 )
{
    combatrecordequipmentused( var_0 );
}

balloon_deposit_monitor( var_0 )
{
    scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "initCrateData", var_0 );
}

suncascademult2( var_0 )
{
    var_1 = var_0 getcurrentprimaryweapon();
    var_0 scripts\mp\gametypes\br_weapons.gsc::checkpoint_player_spawns_func( var_1 );
}

stunboltdelete( var_0, var_1 )
{
    var_0 scripts\mp\gametypes\br_pickups.gsc::nuke_core_time_warning_nag( var_1, "primary" );
}

stopstreamtomovingplane( var_0, var_1 )
{
    switch ( var_0 )
    {
        case "iw8_fulton_bag_mp":
            thread _attachmentblocks::juggernaut_dmg_modifier( var_1 );
            break;
        case "rock_mp":
            thread scripts\mp\gametypes\br_gulag.gsc::rock_used( var_1 );
            break;
        default:
            break;
    }

    if ( var_0 == "rock_mp" && istrue( self._id_126FF ) )
    {
        var_1 delete();
        self._id_126FF = undefined;
    }
}

suppressdamageflash( var_0 )
{
    scripts\mp\gametypes\br_weapons.gsc::takeweaponpickup( var_0 );
}

suppress_spawn_vo( var_0 )
{
    scripts\mp\gametypes\br_weapons.gsc::br_ammo_update_weapons( self );
}

usingtacmap()
{
    if ( scripts\mp\gametypes\br_gametypes.gsc::progress_obj( "playerShouldRespawn" ) )
        return scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "playerShouldRespawn" );

    if ( !istrue( level.br_prematchstarted ) )
        return 1;

    if ( scripts\mp\gametypes\br_public.gsc::iswaitingtoentergulag( self ) )
        return 1;

    if ( scripts\mp\gametypes\br_public.gsc::radiussq( self ) )
        return 1;

    return 0;
}

comparekillcounts( var_0, var_1 )
{
    var_2 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "playerKilledSpawn", var_0, var_1 );

    if ( isdefined( var_2 ) )
        return var_2;
    else if ( scripts\mp\utility\game::missions_clearinappropriaterewards() == "dmz" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "risk" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "kingslayer" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "rumble" )
    {
        if ( getdvarint( "scr_bmo_use_spawn_fix", 1 ) == 1 )
        {
            if ( scripts\mp\utility\game::questtimerupdate( self ) )
                return 1;

            if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
                return 0;

            if ( istrue( var_0.victim.hasrespawntoken ) || istrue( level._id_12B6A ) )
            {
                if ( scripts\mp\gametypes\br_public.gsc::prophasclonesleft() )
                {
                    if ( isbot( var_0.victim ) )
                        return 1;
                }

                var_0.victim thread scripts\mp\gametypes\br_gametype_dmz.gsc::playerrespawn();
                var_3 = scripts\mp\utility\teams::getteamdata( var_0.victim.team, "teamCount" );

                if ( var_3 > 1 )
                    var_0.victim thread scripts\mp\gametypes\br_spectate.gsc::spawnspectator( var_0, var_1, 1 );

                return 1;
            }
        }
        else
        {
            if ( !scripts\mp\flags::gameflag( "prematch_done" ) )
                return 0;

            if ( istrue( var_0.victim.hasrespawntoken ) || istrue( level._id_12B6A ) )
            {
                if ( scripts\mp\gametypes\br_public.gsc::prophasclonesleft() )
                {
                    if ( isbot( var_0.victim ) )
                        return 1;
                }
                else if ( !scripts\mp\gametypes\br_public.gsc::prophasclonesleft() )
                    var_0.victim thread scripts\mp\playerlogic::respawn_asspectator( var_0.victim.origin + ( 0, 0, 60 ), var_0.victim.angles );

                var_0.victim thread scripts\mp\gametypes\br_gametype_dmz.gsc::playerrespawn();
                return 1;
            }
        }
    }
    else if ( !usingtacmap() )
    {
        if ( !scripts\mp\utility\damage::playershoulddofauxdeath( 0 ) )
            var_0.victim thread scripts\mp\gametypes\br_spectate.gsc::spawnspectator( var_0, var_1 );

        return 1;
    }

    return 0;
}

codenumber( var_0 )
{
    var_1 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "mayConsiderPlayerDead", var_0 );

    if ( isdefined( var_1 ) )
        return var_1;

    return codephonescodeenteredringingfrenzy( var_0 );
}

codephonescodeenteredringingfrenzy( var_0 )
{
    var_1 = var_0 scripts\mp\gametypes\br_gulag.gsc::trygulagspawn();

    if ( scripts\mp\flags::gameflag( "prematch_done" ) && !var_1 )
        set_spawner_type( var_0 );

    return !var_1;
}

_id_12A5B()
{

}

smoke_init()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    var_0 = gettime();

    for (;;)
    {
        self waittill( "weapon_change" );
        var_1 = gettime();
        var_2 = var_1 - var_0;
        var_0 = var_1;

        if ( var_2 > 3000 )
            thread monitoraveragevelocities( var_2 );

        var_3 = self.lastnormalweaponobj;

        if ( isdefined( var_3 ) )
        {
            var_4 = int( var_2 / 1000 );
            var_5 = getweaponvariantindex( var_3 );
            var_6 = var_3.basename;
            var_7 = getsubstr( var_6, 0, 4 );

            if ( var_7 == "iw8_" )
                var_6 = scripts\mp\utility\weapon::getweaponrootname( var_3 );

            scripts\common\utility::_id_12965( level.set_up_rear_minigun, var_6, "time_used_s", var_4, var_5, var_3 );
        }
    }
}

weaponshouldgetxp( var_0 )
{
    var_1 = scripts\mp\utility\weapon::getweaponrootname( var_0 );
    return weaponhasranks( var_1 );
}

weaponhasranks( var_0 )
{
    if ( !isdefined( level.weaponranktable.maxweaponranks[var_0] ) )
        return 0;

    var_1 = level.weaponranktable.maxweaponranks[var_0] > 0;
    return var_1;
}

bomb_count_down_end_time_stamp_ms()
{
    var_0 = scripts\mp\utility\game::missions_clearinappropriaterewards() == "dmz" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "risk" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "kingslayer" || istrue( level.recently_spawned_vehicle ) || isdefined( level._id_11AFA ) || isdefined( level._id_11ADD );

    if ( var_0 )
        return;

    if ( scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "playerCountLandmarks" ) )
        return;

    level endon( "game_ended" );
    level waittill( "prematch_started" );
    level validate_station( 50 );
    level validate_station( 25 );
    level validate_station( 10 );
    level validate_station( 5 );
}

validate_station( var_0 )
{
    level endon( "game_ended" );
    var_1 = lootleadermarksontopteams();

    while ( var_1.size > var_0 )
    {
        level scripts\engine\utility::waittill_either( "br_player_eliminated", "players_remaining_changed" );
        var_1 = lootleadermarksontopteams();

        if ( var_1.size <= var_0 )
        {
            var_2 = !istrue( level.usegulag ) || istrue( level.gulag.shutdown );

            if ( var_2 )
                scripts\mp\gametypes\br_public.gsc::brleaderdialog( "top_" + var_0, 0, undefined, 1 );

            break;
        }
    }
}

lootleadermarksontopteams()
{
    var_0 = [];

    foreach ( var_2 in level.players )
    {
        if ( istrue( var_2.checkpointstruct ) )
            continue;

        if ( var_2 scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder() )
            continue;

        if ( level.codcasterenabled )
        {
            if ( var_2 ismlgspectator() )
                continue;
        }

        var_0[var_0.size] = var_2;
    }

    return var_0;
}

_id_11A6F( var_0 )
{
    var_1 = var_0 scripts\mp\persistence::statgetchildbuffered( "round", "timePlayed", 0 );
    var_0.pers["afkResetTime"] = var_1;
    var_0.pers["distTrackingPassed"] = undefined;
    var_0.pers["totalDistTraveledAFK"] = undefined;
    var_0 thread scripts\mp\playerlogic::totaldisttracking( var_0.origin );
}

stoppingpower_tracklastcrossbowshot( var_0 )
{
    _id_11A6F( var_0 );

    if ( isalive( var_0 ) && !istrue( var_0.inlaststand ) )
        var_0.collorigin1 = undefined;

    var_0 scripts\cp\vehicles\cargo_truck_mg_cp::debug_bunkertestaccesscardlocs();
}

_id_12B2D( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( var_0.pers["squadMemberIndex"] ) )
    {
        if ( !isdefined( level.chopper_glow_sticks ) )
            level.chopper_glow_sticks = [];

        var_4 = get_int_or_0( level.chopper_glow_sticks[var_0.team] );

        if ( !isalive( var_0 ) )
        {
            var_3 = 1;
            var_2 = 0;
        }

        var_5 = var_0 == var_1;
        var_6 = var_0.pers["squadMemberIndex"];
        var_7 = int( ceil( clamp( var_2, 0, 1 ) * 128 ) );
        var_8 = var_7;

        if ( istrue( var_3 ) )
            var_0 scripts\mp\gametypes\br_public.gsc::_id_11EE3( 0 );
        else if ( var_5 )
            var_0 scripts\mp\gametypes\br_public.gsc::_id_11EE3( 1 );

        var_9 = var_6 * 8;
        var_10 = ( var_8 & 255 ) << var_9;
        var_11 = ~( 255 << var_9 );
        var_12 = var_4 & var_11;
        var_13 = var_12 + var_10;
        level.chopper_glow_sticks[var_0.team] = var_13;
        var_14 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_0.team, var_0.squadindex );

        if ( isdefined( var_14 ) && var_14.size > 0 )
        {
            foreach ( var_16 in var_14 )
                var_16 setclientomnvar( "ui_br_squad_revive_status", var_13 );
        }
    }
}

damageskipburndownlow( var_0 )
{
    var_1 = [ 0, 0, 0, 0 ];

    if ( isdefined( var_0 ) && isdefined( var_0.collect_intel_anim ) )
    {
        var_2 = 0;

        foreach ( var_7, var_4 in var_0.collect_intel_anim )
        {
            var_5 = scripts\mp\gametypes\br_quest_util.gsc::getquesttableindex( var_7 );
            var_6 = int( clamp( var_4, 0, 15 ) ) << 4;
            var_1[var_2] = var_6 + var_5;
            var_2++;

            if ( var_2 >= 4 )
                break;
        }
    }

    var_8 = [];
    var_8[0] = ( var_1[0] << 8 ) + var_1[1];
    var_8[1] = ( var_1[2] << 8 ) + var_1[3];
    var_8[2] = get_int_or_0( var_0.checkpoint_edit_munitions_limit_init );
    var_9 = int( clamp( get_int_or_0( var_0.pers["squadMemberIndex"] ) - 1, 0, 3 ) );
    var_8[3] = var_9 << 14;
    var_8[3] = var_8[3] + get_int_or_0( var_0.pers["damage"] );
    return var_8;
}

subtract_from_spawn_count_from_group()
{
    if ( !isdefined( self.sessionteam ) || self.sessionteam == "spectator" || self.sessionteam == "none" || isdefined( self.playerstartjailsetcontrols ) || self isplayerheadless() )
        return 0;

    if ( scripts\mp\menus::shouldmodesetsquads() && !isdefined( self.squadindex ) )
        return 0;

    if ( scripts\mp\gametypes\br_public.gsc::processvoqueue() && !isbot( self ) )
    {
        self setclientomnvar( "ui_br_extended_load_screen", 1 );
        return 0;
    }

    if ( !_id_12B75() )
        return 1;

    var_0 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "onConnectSpawnPoint" );

    if ( !isdefined( var_0 ) )
        var_0 = getspawnpoint();

    self.playerstartjailsetcontrols = var_0;
    var_1 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "initialPrespawnZOffset" );

    if ( isdefined( var_1 ) )
        self.playerstartjailsetcontrols.origin = self.playerstartjailsetcontrols.origin + ( 0, 0, var_1 );

    if ( istrue( game["switchedsides"] ) )
        setomnvar( "ui_current_round", 1 );

    self setclientomnvar( "ui_br_extended_load_screen", 1 );
    var_2 = scripts\mp\gametypes\br_public.gsc::vandalize_attack_nodes( var_0.origin );
    spawnintermission( var_2, var_0.angles );
    var_3 = getdvarint( "scr_br_initial_stream_timeout_ms", 15000 );
    scripts\mp\gametypes\br_public.gsc::vandalize_internal( var_2, var_3, 1, 1 );
    return 0;
}

update_spot_limit()
{
    return self.sessionstate == "intermission" && isdefined( self.playerstartjailsetcontrols );
}

resetstuckthermite()
{
    var_0 = -1;

    if ( isdefined( self.lastdroppableweaponobj ) )
        var_0 = getaltbunkerindexforname( self.lastdroppableweaponobj );

    self setclientomnvar( "ui_br_last_droppable_weapon", var_0 );
}

convoy4_roof_rpgs( var_0 )
{
    var_1 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "regenHealthAdd", var_0 );

    if ( isdefined( var_1 ) )
        return var_1;
    else
        return var_0;
}

convoy4_roof_jugg( var_0 )
{
    var_1 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "regenDelaySpeed", var_0 );

    if ( isdefined( var_1 ) )
        return var_1;
    else
        return var_0;
}

collectall( var_0, var_1 )
{
    scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "addToTeamLives", var_0, var_1 );
}

collecteditems( var_0, var_1 )
{
    scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "removeFromTeamLives", var_0, var_1 );
}

_id_12B17()
{
    level notify( "updatePlayerAndTeamCountUI" );
    level endon( "updatePlayerAndTeamCountUI" );
    waittillframeend;
    var_0 = level.players.size;
    var_1 = 0;
    var_2 = 0;
    var_3 = [];
    var_4 = [];

    for ( var_5 = 0; var_5 < var_0; var_5++ )
    {
        var_6 = level.players[var_5];

        if ( !istrue( var_6.checkpointstruct ) )
        {
            if ( istrue( var_6.iszombie ) )
                var_2++;
            else
            {
                var_1++;
                var_3[var_6.team] = 1;
                var_4[var_6.team] = var_6.team;
            }
        }

        if ( !scripts\engine\utility::array_contains_key( var_3, var_6.team ) )
        {
            var_7 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "isTeamEliminated", var_6.team );

            if ( isdefined( var_7 ) )
            {
                if ( !var_7 )
                {
                    var_3[var_6.team] = 1;
                    var_4[var_6.team] = var_6.team;
                }
            }
        }
    }

    var_9 = ( var_2 << 16 ) + ( var_3.size << 8 ) + var_1;
    setomnvar( "ui_br_match_stats", var_9 );
}

chopper_lights()
{
    var_0 = 0;
    level.teamswithplayers = [];
    var_1 = 0;

    foreach ( var_3 in level.teamnamelist )
    {
        var_4 = scripts\mp\utility\teams::getteamdata( var_3, "teamCount" );

        if ( var_4 )
        {
            var_0 = var_0 + var_4;
            var_1++;
            level.teamswithplayers[level.teamswithplayers.size] = var_3;

            if ( var_1 > 1 )
                break;
        }
    }

    if ( scripts\mp\utility\game::matchmakinggame() && !level.ingraceperiod && ( !isdefined( level.disableforfeit ) || !level.disableforfeit ) && !scripts\mp\menus::binoculars_onstatemarkedupdate() )
    {
        if ( level.teambased )
        {
            if ( level.teamswithplayers.size == 1 && game["state"] == "playing" )
            {
                thread scripts\mp\gamelogic::onforfeit( level.teamswithplayers[0] );
                return;
            }

            if ( level.teamswithplayers.size > 1 )
            {
                level.forfeitinprogress = undefined;
                level notify( "abort_forfeit" );
            }
        }
        else
        {
            if ( var_0 == 1 && level.maxplayercount > 1 )
            {
                thread scripts\mp\gamelogic::onforfeit();
                return;
            }

            if ( var_0 > 1 )
            {
                level.forfeitinprogress = undefined;
                level notify( "abort_forfeit" );
            }
        }
    }

    if ( level.teamswithplayers.size == 1 && istrue( level.br_debugsolotest ) )
        return;

    if ( !scripts\mp\utility\game::getgametypenumlives() && ( !isdefined( level.disablespawning ) || !level.disablespawning ) )
        return;

    if ( !scripts\mp\utility\game::gamehasstarted() )
        return;

    if ( level.ingraceperiod && !isdefined( level.overrideingraceperiod ) )
        return;

    checkpoint_carepackage_munitions_role_init();
    checkpoint_carepackage_munitions_role_think();

    if ( level.teambased )
    {
        var_6 = [];
        var_7 = 0;
        var_8 = 0;
        var_9 = [];
        var_10 = [];

        foreach ( var_12 in level.teamnamelist )
        {
            var_6[var_12] = 0;

            if ( !istrue( level.disablespawning ) )
            {
                foreach ( var_14 in scripts\mp\utility\teams::getteamdata( var_12, "players" ) )
                {
                    if ( !istrue( var_14.hasspawned ) || var_14.team == "spectator" || var_14.team == "follower" || var_14.team == "free" )
                        continue;

                    if ( var_14.pers["lives"] )
                    {
                        var_6[var_12] = var_6[var_12] + var_14.pers["lives"];
                        var_7 = 1;
                    }
                }
            }

            var_16 = scripts\mp\utility\teams::getteamdata( var_12, "aliveCount" );

            if ( !var_8 && var_16 > 0 )
                var_8 = 1;

            var_17 = 1;
            var_18 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "isTeamEliminated", var_12 );

            if ( isdefined( var_18 ) )
            {
                if ( !var_18 )
                    var_17 = 0;
            }

            if ( var_17 && scripts\mp\utility\teams::getteamdata( var_12, "hasSpawned" ) && var_16 <= 0 && !var_6[var_12] && !scripts\mp\utility\teams::getteamdata( var_12, "deathEvent" ) )
            {
                var_9[var_9.size] = var_12;
                continue;
            }

            if ( var_16 == 2 && !scripts\mp\utility\teams::getteamdata( var_12, "twoLeft" ) )
            {
                if ( scripts\mp\utility\game::missions_clearinappropriaterewards() != "brdov" && scripts\mp\utility\game::missions_clearinappropriaterewards() != "dmz" && scripts\mp\utility\game::missions_clearinappropriaterewards() != "risk" && scripts\mp\utility\game::missions_clearinappropriaterewards() != "kingslayer" && scripts\mp\utility\game::missions_clearinappropriaterewards() != "rumble" )
                {
                    var_19 = scripts\mp\utility\teams::getteamdata( var_12, "alivePlayers" );
                    var_20 = scripts\engine\utility::random( var_19 );
                    level thread scripts\mp\battlechatter_mp::trysaylocalsound( var_20, "inform_last_two" );
                }

                scripts\mp\utility\teams::setteamdata( var_12, "twoLeft", 1 );
                continue;
            }

            if ( var_16 == 1 )
            {
                if ( gettime() > scripts\mp\utility\teams::getteamdata( var_12, "oneLeftTime" ) + 5000 && !scripts\mp\utility\teams::getteamdata( var_12, "oneLeft" ) )
                {
                    var_21 = 0;
                    var_19 = scripts\mp\utility\teams::getteamdata( var_12, "players" );

                    foreach ( var_14 in var_19 )
                    {
                        if ( !isalive( var_14 ) )
                            var_21 = var_21 + var_14.pers["lives"];
                    }

                    if ( var_21 == 0 )
                    {
                        scripts\mp\utility\teams::setteamdata( var_12, "oneLeftTime", gettime() );
                        scripts\mp\utility\teams::setteamdata( var_12, "oneLeft", 1 );

                        if ( var_19.size > 1 )
                            [[ level.ononeleftevent ]]( var_12 );
                    }
                }

                continue;
            }

            scripts\mp\utility\teams::setteamdata( var_12, "oneLeft", 0 );
        }

        if ( !var_8 && !var_7 )
        {
            if ( istrue( level.postgameexfil ) && level.gameended )
                level notify( "exfil_continue_game_end" );

            if ( istrue( level.nukeincoming ) )
                return;

            return [[ level.ondeadevent ]]( "all" );
        }

        if ( istrue( level.postgameexfil ) && level.gameended )
            level notify( "exfil_continue_game_end" );

        if ( !istrue( level.skipondeadevent ) && !istrue( level.nukeincoming ) )
        {
            foreach ( var_12 in var_9 )
            {
                if ( level.multiteambased )
                {
                    scripts\mp\utility\teams::setteamdata( var_12, "deathEvent", 1 );
                    [[ level.ondeadevent ]]( var_12 );
                    continue;
                }

                return [[ level.ondeadevent ]]( var_12 );
            }
        }
    }
    else
    {
        var_6 = 0;

        foreach ( var_14 in level.players )
        {
            if ( var_14.team == "spectator" || var_14.team == "follower" )
                continue;

            var_6 = var_6 + var_14.pers["lives"];
        }

        var_29 = 0;

        foreach ( var_12 in level.teamnamelist )
            var_29 = var_29 + scripts\mp\utility\teams::getteamdata( var_12, "aliveCount" );

        if ( !var_29 && !var_6 )
        {
            if ( istrue( level.nukeincoming ) )
                return;

            return [[ level.ondeadevent ]]( "all" );
        }

        var_32 = scripts\mp\utility\game::getpotentiallivingplayers();

        if ( var_32.size == 1 )
            return [[ level.ononeleftevent ]]( "all" );
    }

    scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "postUpdateGameEvents" );
}

seq3_cleanup_leftovers()
{
    return istrue( level.seq3_computer_interaction ) && getdvarint( "br_lowpop_allow_tweaks", 1 );
}

checksolospawnselections( var_0 )
{
    var_1 = istrue( var_0 ) && scripts\mp\gametypes\br_gulag.gsc::checkgulagusecount();
    return istrue( self.inlaststand ) && !istrue( self.obj_room_fire_06 ) && !var_1;
}

checkpoint_set()
{
    var_0 = [];
    var_1 = [];
    var_2 = isdefined( level.gulag ) && !istrue( level.gulag.shutdown );

    if ( level.teambased )
    {
        foreach ( var_4 in level.teamnamelist )
        {
            var_5 = 0;

            foreach ( var_7 in level.teamdata[var_4]["alivePlayers"] )
            {
                if ( var_7 checksolospawnselections( var_2 ) )
                    continue;

                var_5 = 1;
                break;
            }

            if ( var_5 )
            {
                foreach ( var_7 in level.teamdata[var_4]["alivePlayers"] )
                {
                    if ( var_7 checksolospawnselections( var_2 ) )
                        continue;

                    var_0[var_0.size] = var_7;
                }

                continue;
            }

            foreach ( var_7 in level.teamdata[var_4]["alivePlayers"] )
            {
                if ( var_7 checksolospawnselections( var_2 ) )
                    var_1[var_1.size] = var_7;
            }
        }
    }
    else
    {
        foreach ( var_7 in level.players )
        {
            if ( var_7 checksolospawnselections( var_2 ) )
            {
                var_1[var_1.size] = var_7;
                continue;
            }

            if ( isalive( var_7 ) )
                var_0[var_0.size] = var_7;
        }
    }

    if ( !scripts\mp\gametypes\br_public.gsc::rear_minigun_model() )
    {
        scripts\mp\gametypes\br_public.gsc::brleaderdialog( "finish_calls", 0, var_0 );

        foreach ( var_7 in var_0 )
        {
            var_7 setclientomnvar( "ui_br_end_game_splash_type", 19 );
            var_7 playsoundtoplayer( "br_finish_them_splash", var_7 );
        }

        foreach ( var_7 in var_1 )
            var_7 hudoutlineenable( "outline_nodepth_red" );
    }
}

checkpoint_carepackage_munitions_role_init()
{
    if ( !getdvarint( "scr_br_laststandfinisher", 0 ) )
        return;

    if ( istrue( level.restart_watcher ) )
        return;

    if ( scripts\mp\utility\game::missions_clearinappropriaterewards() == "dmz" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "risk" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "kingslayer" || scripts\mp\utility\game::missions_clearinappropriaterewards() == "rumble" )
        return;

    var_0 = isdefined( level.gulag ) && !istrue( level.gulag.shutdown );
    var_1 = 0;
    var_2 = 0;

    if ( level.teambased )
    {
        foreach ( var_4 in level.teamnamelist )
        {
            var_5 = 0;

            foreach ( var_7 in level.teamdata[var_4]["alivePlayers"] )
            {
                if ( var_7 checksolospawnselections( var_0 ) )
                {
                    var_2 = 1;
                    continue;
                }

                var_5 = 1;
                break;
            }

            if ( var_5 )
            {
                var_1++;

                if ( var_1 > 1 )
                    return;
            }
        }
    }
    else
    {
        foreach ( var_7 in level.players )
        {
            if ( !isalive( var_7 ) )
                continue;

            if ( var_7 checksolospawnselections( var_0 ) )
            {
                var_2 = 1;
                continue;
            }

            var_1++;

            if ( var_1 > 1 )
                return;
        }
    }

    if ( var_1 == 0 || !var_2 )
        return;

    level.restart_watcher = 1;
    checkpoint_set();
}

checkpoint_carepackage_munitions_role_think( var_0 )
{
    if ( !istrue( level.checkstayingbehindcover ) )
        return 0;

    if ( istrue( scripts\mp\gametypes\br_public.gsc::processvoqueue() ) )
        return 0;

    var_1 = scripts\mp\gametypes\br_gametypes.gsc::propsetflashesleft( "ignoreZombiesLastStandWipe" );
    var_2 = isdefined( level.gulag ) && !istrue( level.gulag.shutdown );
    var_3 = [];
    var_4 = 0;
    var_5 = [];

    foreach ( var_7 in level.teamnamelist )
    {
        var_8 = 1;
        var_3 = [];
        var_9 = scripts\mp\gametypes\br_public.gsc::minplunderextractions( var_7 );

        for ( var_10 = 0; var_10 < var_9.size; var_10++ )
        {
            var_11 = var_9[var_10];
            var_12 = scripts\mp\gametypes\br_public.gsc::minigunbackup( var_7, var_11 );

            foreach ( var_14 in var_12 )
            {
                var_15 = istrue( var_2 ) && var_14 scripts\mp\gametypes\br_public.gsc::questtypes();

                if ( var_15 )
                    continue;

                if ( var_1 && var_14 scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder() )
                    continue;

                var_16 = istrue( var_14.inlaststand ) || isdefined( var_0 ) && var_0 == var_14;

                if ( var_16 && !istrue( var_14.obj_room_fire_06 ) && !var_14 scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder() )
                {
                    var_3[var_3.size] = var_14;
                    continue;
                }

                var_8 = 0;
                break;
            }
        }

        if ( var_8 && var_3.size > 0 )
        {
            var_18 = [];

            foreach ( var_14 in var_3 )
            {
                if ( isdefined( self.respawntagvisibility ) && !scripts\engine\utility::array_contains( var_18, self.respawntagvisibility ) )
                {
                    self.respawntagvisibility._id_1301E = self.return_same_module_as_next_module;
                    var_18[var_18.size] = self.respawntagvisibility;
                }

                if ( isdefined( var_0 ) && var_0 == var_14 )
                    var_4 = 1;

                var_14 notify( "squad_wipe_death" );
                var_14._id_1238B = 1;
                var_14 scripts\mp\utility\damage::_suicide( 0 );
            }

            foreach ( var_22 in var_18 )
            {
                var_22 thread scripts\mp\events::killeventtextpopup( "team_wiped", 0 );
                var_22 thread scripts\mp\utility\points::giveunifiedpoints( "team_wiped", var_22._id_1301E );
                var_22._id_1301E = undefined;
                var_22 thread _id_126A4( var_0, var_22, self.return_same_module_as_next_module );

                if ( !isdefined( var_5[var_22.team] ) )
                {
                    var_5[var_22.team] = 1;
                    var_22 playsoundtoteam( "ui_team_wipe_splash", var_22.team );
                }
            }
        }
    }

    return var_4;
}

_id_126A4( var_0, var_1, var_2 )
{
    waitframe();

    if ( getdvarint( "scr_disable_br_teamwiped_message", 1 ) )
    {
        if ( isdefined( var_0 ) )
            obituary( var_0, var_1, var_2, "MOD_TEAM_WIPED", scripts\mp\gametypes\br_public.gsc::minigunbackup( var_1.team, var_1.squadindex ) );
    }
}

clean_up_none( var_0 )
{
    if ( clear_cypher_icon( var_0 ) )
        return 0;

    if ( isagent( var_0 ) )
        return 0;

    return 1;
}

playersplash( var_0 )
{
    if ( var_0 scripts\mp\utility\game::rankingenabled() && var_0 hasplayerdata() )
    {
        var_0 setplayerdata( "mp", "aarValue", 0, 0 );
        var_0 setplayerdata( "mp", "aarValue", 1, 0 );
        var_0 setplayerdata( "mp", "aarValue", 2, 0 );
        var_0 setplayerdata( "mp", "aarValue", 3, 0 );
        var_0 setplayerdata( "mp", "aarValue", 4, 0 );
        var_0 setplayerdata( "mp", "aarValue", 5, 0 );
        var_1 = var_0 getplayerdata( "common", "mpProgression", "playerLevel", "xp" );
        var_0 setplayerdata( "mp", "aarValue", 6, var_1 );
        var_0 setplayerdata( "mp", "aarValue", 7, var_1 );
    }
}

_id_11E7F( var_0 )
{
    var_1 = scripts\mp\utility\teams::getteamdata( var_0, "players" );

    foreach ( var_3 in var_1 )
    {
        if ( !var_3 scripts\mp\utility\game::rankingenabled() || !var_3 hasplayerdata() )
            continue;

        var_4 = var_3.pers["combatXP"];

        if ( !isdefined( var_4 ) )
            var_4 = 0;

        var_3 setplayerdata( "mp", "aarValue", 0, var_4 );
        var_5 = var_3.pers["missionXP"];

        if ( !isdefined( var_5 ) )
            var_5 = 0;

        var_3 setplayerdata( "mp", "aarValue", 1, var_5 );
        var_6 = var_3.pers["lootingXP"];

        if ( !isdefined( var_6 ) )
            var_6 = 0;

        var_3 setplayerdata( "mp", "aarValue", 2, var_6 );
        var_7 = 0;

        if ( isdefined( var_3.matchbonus ) )
            var_7 = int( var_3.matchbonus );

        var_3 setplayerdata( "mp", "aarValue", 4, var_7 );
        var_8 = 0;

        if ( isdefined( var_3.transient_prefab_group ) )
            var_8 = int( var_3.transient_prefab_group );

        var_3 setplayerdata( "mp", "aarValue", 5, var_8 );
        var_9 = var_3 getplayerdata( "mp", "aarValue", 6 );
        var_10 = var_9 + var_3.pers["summary"]["xp"];
        var_3 setplayerdata( "mp", "aarValue", 7, var_10 );
    }
}

clear_mortar_settings( var_0, var_1 )
{
    if ( isdefined( self.vehicle ) )
    {
        var_2 = var_0.streakname;

        if ( var_2 == "manual_turret" )
            return 0;
    }

    return 1;
}

clients( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    var_1 = var_0.owner;

    if ( !isdefined( var_1 ) )
        return 0;

    if ( !istrue( var_0._id_120AA ) && !var_1 scripts\mp\gametypes\br_pickups.gsc::gun_create_fake( var_0 ) )
        return 0;

    var_2 = scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "onKillstreakBeginUseFunc", var_0 );

    if ( isdefined( var_2 ) )
        return var_2;

    return scripts\mp\killstreaks\killstreaks::streakglobals_onkillstreakbeginuse( var_0 );
}

collection_num( var_0 )
{
    return var_0 == 1;
}

remote_tank_think()
{
    var_0 = self.currentprimaryweapon;

    if ( isdefined( var_0 ) && isdefined( var_0.basename ) && var_0.basename == "iw8_spotter_scope_mp" )
        self setweaponammoclip( var_0, self getcurrentweaponclipammo() + 1 );
}

convoy_turret( var_0 )
{
    if ( !isdefined( var_0.operatorcustomization ) || !isdefined( var_0.operatorcustomization.voice ) || var_0 scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder() )
        return 1;

    return 0;
}

convoy_left_gulag_monitor( var_0, var_1, var_2 )
{
    if ( isdefined( var_0 ) && isdefined( var_1 ) && isdefined( var_2 ) )
    {
        scripts\mp\trials\trial_target_utility::_id_11E8D( "ui_compass_tacopsmap_cursor_pos_override_x", var_0 );
        scripts\mp\trials\trial_target_utility::_id_11E8D( "ui_compass_tacopsmap_cursor_pos_override_y", var_1 );
        scripts\mp\trials\trial_target_utility::_id_11E8D( "ui_compass_tacopsmap_size_override", var_2 );
    }
    else if ( isdefined( level.br_circle ) && isdefined( level.br_circle.dangercircleent ) )
    {
        scripts\mp\trials\trial_target_utility::_id_11E8D( "ui_compass_tacopsmap_cursor_pos_override_x", level.br_circle.dangercircleent.origin[0] );
        scripts\mp\trials\trial_target_utility::_id_11E8D( "ui_compass_tacopsmap_cursor_pos_override_y", level.br_circle.dangercircleent.origin[1] );
        scripts\mp\trials\trial_target_utility::_id_11E8D( "ui_compass_tacopsmap_size_override", level.br_circle.dangercircleent.origin[2] );
    }
    else
    {
        scripts\mp\trials\trial_target_utility::_id_11E8D( "ui_compass_tacopsmap_cursor_pos_override_x", 0 );
        scripts\mp\trials\trial_target_utility::_id_11E8D( "ui_compass_tacopsmap_cursor_pos_override_y", 0 );
        scripts\mp\trials\trial_target_utility::_id_11E8D( "ui_compass_tacopsmap_size_override", 0 );
    }
}

prematchperiod()
{
    if ( istrue( game["switchedsides"] ) )
    {
        level.connectingplayers = getdvarint( "NKSQNMMRRQ" );

        if ( getdvarint( "scr_live_lobby", 0 ) == 1 && !istrue( level._id_120B6 ) )
        {
            game["inLiveLobby"] = 0;
            game["liveLobbyCompleted"] = 1;
            level.allowprematchdamage = 1;
            setnojipscore( 1, 1 );
            setnojiptime( 1, 1 );
            level.nojip = 1;
            level scripts\mp\gamelogic::livelobbymatchstarttimer( "match_starting_in", 15 );
            level notify( "start_prematch" );
            level.prematchperiod = 0;
        }
        else if ( !istrue( level._id_120B6 ) )
        {
            level.allowprematchdamage = 1;
            level scripts\mp\gamelogic::livelobbymatchstarttimer( "match_starting_in", 15 );
        }

        if ( istrue( level._id_120B6 ) )
        {
            while ( !level.players.size )
                waitframe();
        }

        level notify( "prematch_started" );
        physics_raycastents( scripts\mp\gamelogic::gettimeremaining(), 2 );
        level.prematchstarted = 1;
        level.prematchperiodend = 0;
        scripts\mp\gamelogic::matchstarttimerskip();
        physics_raycastents( scripts\mp\gamelogic::gettimeremaining(), 0 );
        return 1;
    }

    return 0;
}
