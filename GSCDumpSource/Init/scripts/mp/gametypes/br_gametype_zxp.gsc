// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "gulag" );
    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "randomizeCircleCenter" );
    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "planeSnapToOOB" );
    scripts\mp\gametypes\br_gametypes.gsc::give_fists( "match_start_VO" );

    if ( getdvarint( "scr_br_zxp_disableHeli", 1 ) != 0 )
        scripts\mp\gametypes\br_gametypes.gsc::give_fists( "littleBirdSpawns" );

    scripts\mp\gametypes\br_gametypes.gsc::hostdamagepercentmedium( "planeUseCircleRadius" );
    scripts\mp\gametypes\br_gametypes.gsc::hostdamagepercentmedium( "circleEarlyStart" );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "playerShouldRespawn", ::usingtacmap );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "createC130PathStruct", ::flickerlights );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "addToC130Infil", ::anim_offset );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "playerSkipLootPickup", ::validate_demeanor );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "playerSkipKioskUse", ::validate_and_activate_stations );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "onPlayerKilled", ::onplayerkilled );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "vipRespawnPlayer", ::_id_12D73 );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "circleTimerNext", ::droppoint );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "markPlayerAsEliminatedOnKilled", ::set_spotlight_target_loc );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "addToTeamLives", ::addtoteamlives );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "removeFromTeamLives", ::removefromteamlives );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "playerWelcomeSplashes", ::vehicle_compass_deregisterinstance );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "allowMeleeVehicleDamage", ::binoculars_isads );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "playerNakedDropLoadout", ::updatecollectionui );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "dropOnPlayerDeath", ::droponplayerdeath );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "shouldLastStandDamageScale", ::_id_12006 );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "dangerCircleTick", ::dangercircletick );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "exfilStart", ::init_safehouse_gunshop );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "onInfilSequenceEnd", ::_id_130C7 );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "onLeaveAC130", ::streamtimeout );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "onJuggCrateUse", ::_id_1315F );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "gulagWinnerRespawn", ::gulagwinnerrespawn );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "remainingPlayersAliveOnTeam", scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_119D9 );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "spawnHandled", scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_122C5 );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "mayConsiderPlayerDead", scripts\mp\gametypes\br_alt_mode_zxp.gsc::setincomingcallback );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "modifyPlayerDamage", scripts\mp\gametypes\br_alt_mode_zxp.gsc::modifyplayerdamage );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "modifyVehicleDamage", scripts\mp\gametypes\br_alt_mode_zxp.gsc::showintelinstancetoplayer );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "ignoreVehicleExplosiveDamage", scripts\mp\gametypes\br_alt_mode_zxp.gsc::play_exfil_hvt_vo );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "regenHealthAdd", scripts\mp\gametypes\br_alt_mode_zxp.gsc::usb_left );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "regenDelaySpeed", scripts\mp\gametypes\br_alt_mode_zxp.gsc::usb_keys );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "postUpdateGameEvents", scripts\mp\gametypes\br_alt_mode_zxp.gsc::vfx_time );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "lastStandAllowed", scripts\mp\gametypes\br_alt_mode_zxp.gsc::respawntags );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "kioskRevivePlayer", scripts\mp\gametypes\br_alt_mode_zxp.gsc::remove_from_spawnflags );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "onPlayerDamaged", scripts\mp\gametypes\br_alt_mode_zxp.gsc::onplayerdamaged );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitshuman( "endGame", scripts\mp\gametypes\br_alt_mode_zxp.gsc::phfrozen );
    level.cleanupswaploadoutflags._id_120AC = 1;
    level.cleanupswaploadoutflags._id_130FC = 0;
    level.cleanupswaploadoutflags.setgameendflagsandnotifies = getdvarint( "scr_br_zxp_maxTagsVisible", 12 );
    level.cleanupswaploadoutflags.setfaketispawnpoint = getdvarfloat( "scr_br_zxp_maxRadius", 0 );
    level.cleanupswaploadoutflags.setfirsthistorydestination = level.cleanupswaploadoutflags.setfaketispawnpoint * level.cleanupswaploadoutflags.setfaketispawnpoint;
    level.cleanupswaploadoutflags._id_12614 = getdvarint( "scr_br_zxp_autoPickup", 1 );
    level.cleanupswaploadoutflags.pick_up_data = getdvarint( "scr_br_zxp_human_powers", 0 );
    level.cleanupswaploadoutflags._id_130E8 = getdvarint( "scr_br_zxp_zombie_drop_tags", 1 );
    level.cleanupswaploadoutflags.setbettermissionrewards = getdvarint( "scr_br_zxp_max_tags", 100 );
    level.cleanupswaploadoutflags.pick_from_preset_solutions = getdvarint( "scr_br_zxp_human_loadout_restore", 1 );
    level.cleanupswaploadoutflags._id_11AAE = [];
    level.cleanupswaploadoutflags._id_11AAF = [];
    level._effect["stim_pickup"] = loadfx( "vfx/iw8_br/gameplay/zombie/vfx_zmb_stim_pickup" );
    game["dialog"]["zmb_opening"] = "gametype_zombieroyale";
    game["dialog"]["zmb_infil_tutorial_01"] = "zombie_game_start";
    game["dialog"]["zmb_infil_tutorial_02"] = "zombie_close_gas_warning";
    game["dialog"]["zmb_teammate_back_human"] = "zombie_teammate_back_human";
    level.br_infils_disabled = 0;
    thread playerzombiedelayturnonfx();
}

playerzombiedelayturnonfx()
{
    waittillframeend;

    if ( level.cleanupswaploadoutflags._id_120AC )
        thread droppedgasmasks();

    thread _id_11F9B();
    thread _id_11F72();
    thread _id_11E9F();
    thread scripts\mp\gametypes\br_alt_mode_zxp.gsc::_id_1315E();
}

vehicle_compass_deregisterinstance()
{
    self endon( "disconnect" );
    self waittill( "spawned_player" );
    wait 1;

    if ( !istrue( game["liveLobbyCompleted"] ) )
        scripts\mp\hud_message::showsplash( "br_gametype_zxp_prematch_welcome" );

    if ( !istrue( level.br_infils_disabled ) )
    {
        self waittill( "br_jump" );

        while ( !self isonground() )
            waitframe();
    }
    else
        level waittill( "prematch_done" );

    scripts\mp\gametypes\br_analytics.gsc::choppersupport_watchleashrange( self );

    if ( isalive( self ) && !scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder() )
        thread update_health_value_for_special_cases();

    wait 1;
    scripts\mp\hud_message::showsplash( "br_gametype_zxp_welcome" );
    scripts\mp\gametypes\br_public.gsc::cloud_cover( "primary_objective", self, 0 );
}

_id_11E9F()
{
    var_0 = -15;
    var_1 = scripts\mp\gametypes\br_circle.gsc::low_roof_enemy_watcher( 1 );
    var_2 = max( 0, var_1 + var_0 );
    var_3 = getdvarfloat( "scr_br_dropbag_delay", var_2 );
    scripts\mp\gametypes\br_gametypes.gsc::zombienumhitsheli( "dropBagDelay", var_3 );
}

_id_130C7( var_0 )
{
    scripts\mp\gametypes\br_public.gsc::brleaderdialog( "zmb_opening", 0, var_0 );
    wait 1;
    scripts\mp\gametypes\br_public.gsc::brleaderdialog( "zmb_infil_tutorial_01", 0, var_0 );
}

streamtimeout()
{
    self endon( "disconnect" );
    var_0 = self;
    wait 3;

    while ( !var_0 isonground() )
        wait 2;

    scripts\mp\gametypes\br_public.gsc::cloud_cover( "zmb_infil_tutorial_02", var_0 );
}

set_spotlight_target_loc()
{
    return scripts\mp\gametypes\br_alt_mode_zxp.gsc::set_spotlight_target_loc();
}

usingtacmap( var_0 )
{
    if ( !istrue( level.br_prematchstarted ) )
        return 1;

    return scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder();
}

validate_demeanor( var_0 )
{
    return scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder();
}

validate_and_activate_stations( var_0 )
{
    return scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder();
}

_id_12006( var_0 )
{
    var_1 = isplayer( var_0.attacker ) && var_0.attacker scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder();
    var_2 = isplayer( var_0.victim ) && var_0.victim scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder();

    if ( var_1 && !var_2 && var_0.meansofdeath == "MOD_MELEE" )
        return 0;

    return 1;
}

binoculars_isads( var_0 )
{
    var_1 = isplayer( var_0.attacker ) && var_0.attacker scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder();
    return var_1;
}

vehicle_damage_inithitdamage_br()
{
    playfx( scripts\engine\utility::getfx( "zombie_trans" ), self.origin );
    self notify( "endSuperJumpFov" );
    vehicle_damage_mediumvisualcallback( 0 );
    var_0 = gettime() + 3000;

    while ( self isgestureplaying() && var_0 > gettime() )
    {
        self stopgestureviewmodel();
        waitframe();
    }

    while ( var_0 > gettime() && ( self isswitchingweapon() || self isreloading() || self ismantling() || self isthrowinggrenade() || self israisingweapon() || self ismeleeing() || self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "player", "isPlayerADS" ) ]]() ) )
        waitframe();

    self enableoffhandweapons();
    self giveandfireoffhand( "stim_zmb_mp" );
    wait 2;
}

vehicle_damage_mediumvisualcallback( var_0 )
{
    self allowfire( var_0 );
    self allowmovement( var_0 );
    self allowmelee( var_0 );

    if ( var_0 )
    {
        self playershow();
        self enableoffhandweapons();
    }
    else
    {
        self playerhide();
        self disableoffhandweapons();
    }
}

vehicle_compass_mp_init( var_0 )
{
    if ( !istrue( var_0 ) && !scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder() )
        return;

    var_1 = scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder() || istrue( self._id_12ECE );
    scripts\mp\gametypes\br_alt_mode_zxp.gsc::usepingsystem( 0 );
    scripts\mp\gametypes\br_alt_mode_zxp.gsc::vehicle_damage_inithitdamage( 0 );

    if ( isdefined( self.operatorcustomization.gender ) && self.operatorcustomization.gender == "female" )
        self _meth_87A8( "female" );
    else
        self _meth_87A8( "" );

    if ( isdefined( self.operatorcustomization.clothtype ) && self.operatorcustomization.clothtype != "" )
        self setclothtype( self.operatorcustomization.clothtype );
    else
        self setclothtype( "vestlight" );

    self._id_11AA7 = 1;
    var_2 = self.origin;
    var_3 = self.origin;
    var_4 = self getplayerangles();
    var_5 = 0;

    if ( level.cleanupswaploadoutflags.pickclassbr )
        [var_3, var_4, var_2] = update_hint_logic_killstreak();
    else
    {
        [var_3, var_4, var_5] = update_hint_logic_munitions();
        var_2 = var_3;
    }

    self.plotarmor = 1;
    self setscriptablepartstate( "zombie", "off" );
    self setscriptablepartstate( "compassicon", "defaulticon" );
    self setscriptablepartstate( "skydiveVfx", "default", 0 );
    vehicle_damage_inithitdamage_br();

    if ( !var_5 )
    {
        scripts\mp\gametypes\br_gulag.gsc::gulagfadetoblack();
        wait 1;
    }
    else
        waitframe();

    scripts\mp\class::loadout_emptycacheofloadout( "gamemode" );
    self.pers["gamemodeLoadout"] = level.br_respawn_loadout;
    self.pers["class"] = "gamemode";
    self.class = "gamemode";
    self.forcespawnangles = var_4;
    self.forcespawnorigin = var_2;
    scripts\mp\utility\player::_setsuit( "iw8_defaultsuit_mp" );
    scripts\mp\playerlogic::spawnplayer( undefined, 0 );
    self skydive_deployparachute();
    thread scripts\mp\gametypes\br.gsc::checkpoint_fx_play();
    vehicle_damage_mediumvisualcallback( 1 );
    self lerpfovbypreset( "default_2seconds" );

    if ( level.cleanupswaploadoutflags._id_13142 )
        thread scripts\mp\supers\super_deadsilence::superdeadsilence_endhudsequence();

    if ( level.cleanupswaploadoutflags._id_13141 )
    {
        scripts\mp\gametypes\br_alt_mode_zxp.gsc::update_health_think();

        if ( !level.cleanupswaploadoutflags._id_13142 )
            self setscriptablepartstate( "headVFX", "neutral" );

        self visionsetnakedforplayer( "", 0 );
    }

    if ( level.cleanupswaploadoutflags.pickclassbr )
    {
        self.plotarmor = undefined;
        scripts\mp\gametypes\br_alt_mode_zxp.gsc::vandalize_spotlight_speed( var_3, var_4, var_2 );
    }
    else
    {
        if ( !var_5 )
        {
            scripts\mp\gametypes\br_public.gsc::vehicle_collision_updateinstanceend();
            scripts\mp\gametypes\br_public.gsc::unload_vehicles_on_weapons_free_thread();
            playfx( scripts\engine\utility::getfx( "zombie_trans" ), self.origin );
        }

        if ( !var_5 )
            scripts\mp\gametypes\br_gulag.gsc::gulagfadefromblack();

        thread unlockableindex();
    }

    if ( istrue( level.cleanupswaploadoutflags.pick_from_preset_solutions ) && scripts\mp\gametypes\br_alt_mode_zxp.gsc::updatearenaomnvarplayers() )
        updateassassinationdataomnvar();
    else
    {
        var_8 = scripts\mp\gametypes\br.gsc::clear_and_give_killstreak_loadout_recon();
        scripts\mp\gametypes\br.gsc::monitor_traversal_watcher( var_8, 0 );
    }

    scripts\mp\gametypes\br_armor.gsc::monitor_truck();
    thread scripts\mp\gametypes\br.gsc::checkpoint_fx_play();
    scripts\mp\gametypes\br_alt_mode_zxp.gsc::updatescavengerhud( 0 );

    if ( var_1 )
        scripts\mp\hud_message::showsplash( "br_gametype_zxp_change_human" );

    self.plotarmor = undefined;
    thread update_health_on_spawn();
    self._id_11AA7 = undefined;

    if ( var_1 )
    {
        foreach ( var_10 in level.teamdata[self.team]["players"] )
        {
            if ( self != var_10 )
                scripts\mp\gametypes\br_public.gsc::cloud_cover( "zmb_teammate_back_human", var_10 );
        }
    }
}

update_hint_logic_killstreak()
{
    var_0 = getdvarint( "scr_br_zxp_spawnheightoffset", 3000 );
    var_1 = scripts\mp\gametypes\br_public.gsc::make_focus_fire_headicon() / 1000;
    var_2 = scripts\mp\gametypes\br_gulag.gsc::unsetreduceregendelayonkills( 0, var_1, var_0 );
    var_3 = scripts\mp\gametypes\br_gulag.gsc::updatex1stashhud( var_2 );
    return [ var_2.origin, var_2.angles, var_3 ];
}

update_hint_logic_munitions()
{
    [var_1, var_2, var_3] = update_health_bar_to_players();

    if ( !var_3 )
        scripts\mp\gametypes\br_public.gsc::vandalize_internal( var_1 );

    return [ var_1, var_2, var_3 ];
}

update_health_bar_to_players()
{
    var_0 = 500;
    var_1 = 10000;
    var_2 = 5;

    if ( !isdefined( level.br_circle ) || !isdefined( level.br_circle.dangercircleent ) )
        return [ self.origin, self getplayerangles(), 1 ];

    var_3 = scripts\mp\gametypes\br_circle.gsc::getdangercircleradius();
    var_4 = scripts\mp\gametypes\br_circle.gsc::getdangercircleorigin();
    var_5 = distance2dsquared( self.origin, var_4 );

    if ( var_5 <= var_3 * var_3 )
        return [ self.origin, self getplayerangles(), 1 ];

    var_6 = undefined;
    var_7 = undefined;
    var_8 = ( self.origin[0], self.origin[1], 0 );
    var_9 = vectornormalize( var_8 - var_4 );

    for ( var_10 = 1; var_10 <= var_2; var_10++ )
    {
        var_11 = var_3 - var_0 * var_10;

        if ( var_11 < 0 )
            break;

        [var_6, var_7] = manualadjustlittlebirdlocs( var_4, var_9, var_11 );

        if ( isdefined( var_6 ) )
            break;
    }

    if ( !isdefined( var_6 ) )
    {
        var_6 = var_4;
        var_7 = self getplayerangles();
    }

    var_13 = scripts\mp\gametypes\br_public.gsc::helihint_deposit( var_6, var_1 );
    return [ var_13, var_7, 0 ];
}

manualadjustlittlebirdlocs( var_0, var_1, var_2 )
{
    var_3 = var_0 + var_1 * var_2;
    var_4 = scripts\mp\gametypes\br_public.gsc::make_focus_fire_headicon() / 1000;

    if ( scripts\mp\gametypes\br_gulag.gsc::mp_m_stack_patch( var_3, var_4 ) )
    {
        var_5 = vectortoangles( var_1 * -1 );
        return [ var_3, var_5 ];
    }
    else
        return [ undefined, undefined ];
}

update_health_on_spawn()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "zombie_set" );

    while ( !self isonground() )
        waitframe();

    thread update_health_value_for_special_cases();
}

updateassassinationdataomnvar()
{
    self takeallweapons( 0, 1 );
    scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();
    self.equipment["primary"] = undefined;
    self.equipment["secondary"] = undefined;
    self.equipment["health"] = undefined;
    self.equipment["super"] = undefined;
    var_0 = getcompleteweaponname( "iw8_fists_mp" );

    if ( self._id_13160.wait_for_player_in_gas.size < 2 )
        self giveweapon( var_0 );

    var_1 = 0;

    foreach ( var_3 in self._id_13160.wait_for_player_in_gas )
    {
        var_4 = createheadicon( var_3 );
        scripts\cp_mp\utility\inventory_utility::_giveweapon( var_3 );

        if ( !var_1 )
        {
            self assignweaponprimaryslot( var_4 );
            scripts\cp_mp\utility\inventory_utility::_switchtoweapon( var_3 );
            var_1 = 1;
        }

        scripts\mp\weapons::fixupplayerweapons( self, var_4 );
    }

    foreach ( var_7 in self._id_13160.offhands )
    {
        var_8 = scripts\mp\equipment::getequipmentreffromweapon( var_7 );

        if ( !isdefined( var_8 ) )
            continue;

        var_9 = self._id_13160.init_client[var_8];

        if ( !isdefined( var_9 ) )
            continue;

        scripts\mp\equipment::giveequipment( var_8, var_9 );
    }

    foreach ( var_4, var_12 in self._id_13160.blockade_get_bomb_icon_on_cell_phone )
    {
        self setweaponammostock( var_4, var_12 );
        var_3 = getcompleteweaponname( getweaponbasename( var_4 ) );
        var_13 = scripts\mp\gametypes\br_weapons.gsc::br_ammo_type_for_weapon( var_3 );

        if ( isdefined( var_13 ) )
        {
            self.br_ammo[var_13] = var_12;
            scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_hud_update_ammotype( var_13 );
        }
    }

    foreach ( var_4, var_12 in self._id_13160.bloadinghvt )
        self setweaponammoclip( var_4, var_12 );

    foreach ( var_4, var_12 in self._id_13160.blockachievementstimestamp )
        self setweaponammoclip( var_4, var_12, "left" );

    waitframe();
    var_16 = var_0;

    if ( isdefined( self._id_13160.current ) && self._id_13160.current != getcompleteweaponname( "none" ) )
        var_16 = self._id_13160.current;

    self switchtoweaponimmediate( var_16 );

    if ( isdefined( self._id_13160.super ) )
    {
        var_17 = level.br_pickups.br_superreference[level.br_pickups.br_equipnametoscriptable[self._id_13160.super]];
        scripts\mp\gametypes\br_pickups.gsc::forcegivesuper( var_17, 0 );
    }

    thread scripts\cp_mp\gestures::_id_12974();
    self._id_13160 = undefined;
}

addtoteamlives( var_0, var_1 )
{
    var_0 scripts\mp\gametypes\br_alt_mode_zxp.gsc::addtoteamlives( var_0, var_1 );
}

removefromteamlives( var_0, var_1 )
{
    var_0 scripts\mp\gametypes\br_alt_mode_zxp.gsc::removefromteamlives( var_0, var_1 );
}

_id_1315F( var_0 )
{
    if ( level.cleanupswaploadoutflags.pick_from_preset_solutions && !var_0 scripts\mp\gametypes\br_alt_mode_zxp.gsc::updatearenaomnvarplayers() )
        var_0 scripts\mp\gametypes\br_alt_mode_zxp.gsc::updateassassinationthreatlevel();
}

gulagwinnerrespawn( var_0 )
{
    if ( level.cleanupswaploadoutflags.pick_from_preset_solutions && scripts\mp\gametypes\br_alt_mode_zxp.gsc::updatearenaomnvarplayers() )
        updateassassinationdataomnvar();
}

vehicle_compass_show()
{
    self.itemsdropped = 0;
    var_0 = level.cleanupswaploadoutflags._id_130FC % 10;
    level.cleanupswaploadoutflags._id_130FC++;
    var_1 = verifybunkercode( "zombie_death", var_0 );

    if ( isdefined( var_1 ) )
        var_2 = scripts\mp\gametypes\br_lootcache.gsc::selfrevivethink( var_1, 0 );
}

updatecollectionui()
{
    if ( scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder() )
        return;
    else
        scripts\mp\gametypes\br.gsc::spawn_remote_tank_thermite();
}

droponplayerdeath( var_0 )
{
    if ( scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder() || istrue( self.isjuggernaut ) )
        return 1;

    if ( level.cleanupswaploadoutflags.pick_from_preset_solutions )
        scripts\mp\gametypes\br_alt_mode_zxp.gsc::updateassassinationthreatlevel();

    return 0;
}

onplayerkilled( var_0 )
{
    if ( !istrue( level.br_prematchstarted ) )
        return;

    if ( level.gameended )
        return;

    var_1 = var_0.victim;
    var_2 = var_0.attacker;

    if ( !isdefined( var_2 ) || !isplayer( var_2 ) || !isdefined( var_1 ) )
        return;

    if ( var_1 _id_12001( var_2 ) )
        var_1 thread _id_122CA( var_1, var_2 );

    if ( istrue( level.cleanupswaploadoutflags._id_130E8 ) && var_1 _id_12027( var_2 ) )
        var_1 thread _id_12313( var_1, var_2 );

    if ( var_1 _id_1201F( var_2 ) )
        var_1 thread vehicle_compass_show();

    var_3 = var_0.hitloc;

    if ( isdefined( var_3 ) && var_1 scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder() && ( var_3 == "head" || var_3 == "helmet" ) )
    {
        var_4 = 0;
        var_2 thread scripts\mp\damagefeedback::updatedamagefeedback( "hitzombieheadshot", var_4, 1 );
    }

    var_1 setscriptablepartstate( "skydiveVfx", "default", 0 );
}

_id_1201E( var_0 )
{
    if ( isdefined( var_0 ) && var_0 == self )
        return 0;

    if ( level.teambased && isdefined( var_0 ) && isdefined( var_0.team ) && var_0.team == self.team )
        return 0;

    if ( isdefined( var_0 ) && !isdefined( var_0.team ) && ( var_0.classname == "trigger_hurt" || var_0.classname == "worldspawn" ) )
        return 0;

    if ( isagent( self ) || isagent( var_0 ) )
        return 0;

    return 1;
}

_id_1201F( var_0 )
{
    if ( !_id_1201E( var_0 ) )
        return 0;

    if ( !scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder() )
        return 0;

    return 1;
}

_id_12001( var_0 )
{
    if ( !_id_1201E( var_0 ) )
        return 0;

    if ( scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder() )
        return 0;

    return 1;
}

maxextractions()
{
    var_0 = undefined;

    foreach ( var_2 in level.cleanupswaploadoutflags._id_11AAE )
    {
        if ( !isdefined( var_0 ) || var_2.lastusedtime < var_0.lastusedtime )
            var_0 = var_2;
    }

    return var_0;
}

spawndogtags()
{
    var_0 = 16;
    var_1 = undefined;
    var_2 = 0;
    var_3 = undefined;

    if ( level.cleanupswaploadoutflags._id_11AAF.size > 0 )
    {
        var_4 = level.cleanupswaploadoutflags._id_11AAF.size - 1;
        var_1 = level.cleanupswaploadoutflags._id_11AAF[var_4];
        level.cleanupswaploadoutflags._id_11AAF[var_4] = undefined;
        give_radar_to_team( var_1 );
        var_2 = 1;
        var_3 = var_1.trigger;
        var_5 = var_1.visuals;
    }
    else if ( level.cleanupswaploadoutflags._id_11AAE.size >= level.cleanupswaploadoutflags.setbettermissionrewards )
    {
        var_1 = maxextractions();
        give_radar_to_team( var_1 );
        var_2 = 1;
        var_3 = var_1.trigger;
        var_5 = var_1.visuals;
    }
    else
    {
        var_6 = "lm_offhand_vm_stim_zmb_loot";
        var_5[0] = spawn( "script_model", ( 0, 0, 0 ) );
        var_5[0].angles = ( 45, 0, 0 );
        var_5[0] setmodel( var_6 );
        var_5[0] hudoutlineenable( "outline_depth_purple" );
        var_5[0] setasgametypeobjective();
        var_5[0].usetype = 1;
        var_5[0].rear_minigun_tag = 1;
        var_3 = var_5[0];

        if ( level.cleanupswaploadoutflags._id_12614 )
        {
            var_3 = spawn( "trigger_radius", ( 0, 0, 0 ), 0, 32, 32 );
            var_3.rear_minigun_tag = 1;
            var_5[0].rear_minigun_tag = undefined;
        }
    }

    var_7 = "any";
    var_8 = 0;
    var_1 = scripts\mp\gameobjects::createuseobject( var_7, var_3, var_5, ( 0, 0, var_0 ), undefined, var_2 );
    var_1._id_120BA = 1;
    var_1.onuse = ::onuse;
    var_1 scripts\mp\gameobjects::setusetime( var_8 );
    var_1 scripts\mp\gametypes\br_public.gsc::playerteleportprop();
    var_1.inuse = 1;
    var_1.lastusedtime = gettime();
    var_9 = "" + var_1 getentitynumber();
    level.cleanupswaploadoutflags._id_11AAE[var_9] = var_1;
    return var_1;
}

_id_11F5E( var_0, var_1 )
{
    var_2 = 36;
    var_3 = ( 0, 0, 36 );
    var_4 = scripts\mp\gametypes\br_public.gsc::helihint_deposit( var_1, 30 );
    var_5 = var_4 + ( 0, 0, var_2 );
    var_0.curorigin = var_5;

    if ( level.cleanupswaploadoutflags._id_12614 )
        var_0.trigger.origin = var_5;

    var_0.visuals[0].origin = var_5;
    var_0 scripts\mp\gameobjects::initializetagpathvariables();
    var_0.interactteam = "any";
    var_0.visuals[0] _id_12063();
    var_0.ownerteam = "neutral";
    var_0.trigger triggerenable();

    if ( isdefined( var_0.objidnum ) )
    {
        if ( var_0.objidnum != -1 )
        {
            var_6 = var_0.objidnum;
            scripts\mp\objidpoolmanager::update_objective_state( var_6, "active" );
            scripts\mp\objidpoolmanager::update_objective_position( var_6, var_4 + var_3 );
            scripts\mp\objidpoolmanager::update_objective_setbackground( var_6, 1 );
            scripts\mp\objidpoolmanager::objective_set_play_intro( var_0.objidnum, 0 );
            scripts\mp\objidpoolmanager::objective_set_play_outro( var_0.objidnum, 0 );
            var_0 scripts\mp\gameobjects::setobjectivestatusicons( "waypoint_dogtags_friendly", "waypoint_dogtags" );
            var_0 scripts\mp\gameobjects::setvisibleteam( "any" );
            objective_icon( var_0.objidnum, "icon_minimap_syringe" );
            scripts\mp\objidpoolmanager::objective_playermask_hidefromall( var_0.objidnum );
        }
    }

    playsoundatpos( var_5, "mp_killconfirm_tags_drop" );
    var_0.visuals[0] scriptmodelplayanim( "mp_dogtag_spin" );
}

_id_122CA( var_0, var_1 )
{
    var_2 = spawndogtags();
    _id_11F5E( var_2, var_0.origin );

    if ( istrue( var_0.isjuggernaut ) )
    {
        var_3 = 2;
        var_4 = getdvarint( "scr_br_zxp_numDropJugg", var_3 );
        var_5 = scripts\mp\gametypes\br_pickups.gsc::playersetattractiontime();

        for ( var_6 = 1; var_6 < var_4; var_6++ )
        {
            var_7 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_5, var_0.origin, var_0.angles, var_0, undefined, undefined, 0 );

            if ( !isdefined( var_7 ) || var_7.origin == ( 0, 0, 0 ) )
                var_7.origin = var_0.origin;

            var_2 = spawndogtags();
            _id_11F5E( var_2, var_7.origin );
        }
    }
}

_id_12027( var_0 )
{
    if ( !_id_1201E( var_0 ) )
        return 0;

    if ( scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder() && self.start_bomb_vest_global_timer > 0 )
        return 1;

    return 0;
}

_id_12313( var_0, var_1 )
{
    var_2 = spawndogtags();
    _id_11F5E( var_2, var_0.origin );

    if ( self.start_bomb_vest_global_timer > 1 )
    {
        var_3 = scripts\mp\gametypes\br_pickups.gsc::playersetattractiontime();

        for ( var_4 = 1; var_4 < self.start_bomb_vest_global_timer; var_4++ )
        {
            var_5 = scripts\mp\gametypes\br_pickups.gsc::getitemdroporiginandangles( var_3, var_0.origin, var_0.angles, var_0, undefined, undefined, 0 );

            if ( !isdefined( var_5 ) || var_5.origin == ( 0, 0, 0 ) )
                var_5.origin = var_0.origin;

            var_2 = spawndogtags();
            _id_11F5E( var_2, var_5.origin );
        }
    }
}

give_radar_to_team( var_0 )
{
    var_0.visuals[0] dontinterpolate();
    var_0.visuals[0] hide();
    var_0.trigger triggerdisable();
    var_0.trigger notify( "deleted" );
    var_0 scripts\mp\gameobjects::allowuse( "none" );
    var_0.inuse = 0;
    var_0.visuals[0].origin = ( 0, 0, 0 );
    var_0.trigger.origin = ( 0, 0, 0 );
    endcameraorigins( var_0 );
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( var_0.objidnum );
}

removetags( var_0 )
{
    give_radar_to_team( var_0 );
    var_1 = "" + var_0 getentitynumber();
    level.cleanupswaploadoutflags._id_11AAE[var_1] = undefined;
    level.cleanupswaploadoutflags._id_11AAF[level.cleanupswaploadoutflags._id_11AAF.size] = var_0;
    playfx( level._effect["stim_pickup"], var_0.curorigin );
    playsoundatpos( var_0.curorigin, "zxp_tags_pickup" );
}

endcameraorigins( var_0 )
{
    foreach ( var_2 in level.players )
    {
        if ( !var_2 scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder() )
            continue;

        var_3 = var_2 calloutmarkerping_getgscobjectiveindex( 7 );

        if ( var_3 != -1 && var_3 == var_0.objidnum )
            var_2 scripts\cp\equipment\cp_incendiarylauncher::calloutmarkerping_removecallout( 7 );
    }
}

vehicle_collision_loadtable( var_0 )
{
    foreach ( var_2 in level.cleanupswaploadoutflags._id_11AAE )
    {
        if ( isdefined( var_2.visuals[0] ) )
            var_2.visuals[0] _id_11AB0( self );
    }
}

_id_11AB0( var_0 )
{
    if ( var_0 scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder() )
    {
        self showtoplayer( var_0 );

        if ( !level.cleanupswaploadoutflags._id_12614 )
            self enableplayeruse( var_0 );
    }
    else
    {
        self hidefromplayer( var_0 );

        if ( !level.cleanupswaploadoutflags._id_12614 )
            self disableplayeruse( var_0 );
    }
}

_id_12063()
{
    self hide();

    if ( !level.cleanupswaploadoutflags._id_12614 )
    {
        self makeusable();
        self setcursorhint( "HINT_NOICON" );
        self sethintstring( &"MP_ZXP/PICKUP" );
        self setuseprioritymax();
    }

    foreach ( var_1 in level.players )
        _id_11AB0( var_1 );
}

onuse( var_0 )
{
    scripts\mp\gametypes\br_alt_mode_zxp.gsc::onuse( var_0 );
}

vehicle_damage_ondeathscore()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "zombie_unset" );
    var_0 = 0.5;

    for (;;)
    {
        var_1 = self calloutmarkerping_getgscobjectiveindex( 7 );
        var_2 = sortbydistance( level.cleanupswaploadoutflags._id_11AAE, self.origin );
        var_3 = 0;

        foreach ( var_5 in var_2 )
        {
            var_6 = undefined;

            if ( var_3 < level.cleanupswaploadoutflags.setgameendflagsandnotifies && level.cleanupswaploadoutflags.setfirsthistorydestination > 0 )
                var_6 = distance2dsquared( self.origin, var_5.origin );

            if ( var_3 < level.cleanupswaploadoutflags.setgameendflagsandnotifies && ( level.cleanupswaploadoutflags.setfirsthistorydestination == 0 || var_6 < level.cleanupswaploadoutflags.setfirsthistorydestination ) )
            {
                var_3++;
                scripts\mp\objidpoolmanager::objective_playermask_addshowplayer( var_5.objidnum, self );
                continue;
            }

            var_3 = level.cleanupswaploadoutflags.setgameendflagsandnotifies;
            scripts\mp\objidpoolmanager::objective_playermask_hidefrom( var_5.objidnum, self );

            if ( var_1 != -1 && var_1 == var_5.objidnum )
                scripts\cp\equipment\cp_incendiarylauncher::calloutmarkerping_removecallout( 7 );
        }

        wait( var_0 );
    }
}

update_current_solution()
{
    foreach ( var_1 in level.cleanupswaploadoutflags._id_11AAE )
        scripts\mp\objidpoolmanager::objective_playermask_hidefrom( var_1.objidnum, self );
}

droppoint( var_0 )
{
    if ( istrue( level.cleanupswaploadoutflags._id_1311D ) )
    {
        if ( getdvarint( "scr_br_zxp_respawn_can_shutdown", 0 ) == 0 )
            return;

        var_1 = scripts\mp\gametypes\br_gulag.gsc::manned_turret_createhintobject();

        if ( var_0 >= var_1 )
            level.cleanupswaploadoutflags._id_1311D = 0;
    }
}

_id_11F9B()
{
    if ( istrue( level.br_circle_disabled ) )
        return;

    if ( getdvarint( "scr_br_zxp_respawn_can_shutdown", 0 ) == 0 )
        return;

    scripts\mp\flags::gameflagwait( "prematch_fade_done" );
    var_0 = "hudsmall";
    var_1 = 0.8;
    var_2 = -100;
    var_3 = -290;
    var_4 = 90;
    var_5 = scripts\mp\gametypes\br_gulag.gsc::modeloadoutupdateammo();
    var_6 = fnlookforvehicles( var_0, var_1 );
    var_6 scripts\mp\hud_util::setpoint( "RIGHT", "CENTER", var_3, var_2 );
    var_6.label = &"MP_ZXP/RESPAWN_ALLOWED";
    var_7 = scripts\mp\hud_util::createservertimer( var_0, var_1 );
    var_7 scripts\mp\hud_util::setpoint( "LEFT", "CENTER", var_3, var_2 );
    var_7 settenthstimer( var_5 );
    var_8 = getdvarint( "scr_br_display_gulag_close_message", var_4 );
    var_9 = var_5 - var_8;

    if ( var_9 > 0 )
    {
        wait( var_9 );
        var_7.color = ( 1, 0, 0 );
        var_7 thread scripts\mp\gametypes\br_alt_mode_zxp.gsc::phase_three_combat();
        wait( var_8 );
    }
    else
        wait( var_5 );

    wait 2;
    var_7 destroy();
    var_6 destroy();
}

_id_12D73( var_0, var_1 )
{
    if ( !isalive( self ) || scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder() )
        scripts\mp\gametypes\br_alt_mode_zxp.gsc::remove_from_spawnflags( var_0 );
}

fnlookforvehicles( var_0, var_1, var_2 )
{
    if ( isdefined( var_2 ) )
        var_3 = newteamhudelem( var_2 );
    else
        var_3 = newhudelem();

    var_3.elemtype = "font";
    var_3.font = var_0;
    var_3.fontscale = var_1;
    var_3.basefontscale = var_1;
    var_3.x = 0;
    var_3.y = 0;
    var_3.width = 0;
    var_3.height = int( level.fontheight * var_1 );
    var_3.xoffset = 0;
    var_3.yoffset = 0;
    var_3.children = [];
    var_3 scripts\mp\hud_util::setparent( level.uiparent );
    var_3.hidden = 0;
    var_3.alpha = 1;
    return var_3;
}

droppedgasmasks()
{
    level.br_level.br_circledelaytimes[1] = level.br_level.br_circledelaytimes[0];
    level.br_level.br_circledelaytimes[0] = 1;
    level.br_level.br_circleclosetimes[0] = 1;
    level.br_level.checkpoint_edit_loadout[0] = 1;
}

flickerlights()
{
    var_0 = ( level.br_level.checkpoint_create_carepackage[1][0], level.br_level.checkpoint_create_carepackage[1][1], 0 );
    var_1 = level.br_level.br_circleradii[1];
    var_2 = scripts\mp\gametypes\br_c130.gsc::createtestc130path( var_0, var_1 );
    return var_2;
}

anim_offset()
{
    thread relic_bang_and_boom_dropfunc();
}

relic_bang_and_boom_dropfunc()
{
    level endon( "game_ended" );
    self endon( "death" );
    var_0 = distance( self.teleport_text_updated.startpt, self.teleport_text_updated.hvt_delayed_cig );
    var_1 = var_0 / scripts\mp\gametypes\br_c130.gsc::getc130speed() - 5;
    wait( var_1 );

    foreach ( var_3 in level.players )
    {
        if ( isdefined( var_3 ) && isdefined( var_3.br_infil_type ) && var_3.br_infil_type == "c130" && !isdefined( var_3.jumptype ) )
        {
            var_3.jumptype = "outOfBounds";
            var_3 notify( "halo_kick_c130" );
        }
    }
}

init_safehouse_gunshop( var_0 )
{
    foreach ( var_2 in level.players )
    {
        var_2 hudoutlinedisable();

        if ( var_2 scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder() )
        {
            var_2 setscriptablepartstate( "compassicon", "defaulticon" );
            var_2 unsetperk( "specialty_radarblip", 1 );

            if ( level.cleanupswaploadoutflags._id_13141 )
            {
                if ( !level.cleanupswaploadoutflags._id_13142 )
                    var_2 setscriptablepartstate( "headVFX", "neutral" );

                var_2 visionsetnakedforplayer( "", 0 );
            }

            if ( !isdefined( scripts\engine\utility::array_find( var_0, var_2 ) ) )
            {
                var_2 playerhide();
                var_2 setscriptablepartstate( "zombie", "off" );
            }
        }
    }
}

_id_11F72()
{
    if ( !istrue( level.cleanupswaploadoutflags.pick_up_data ) )
        return;

    level.cleanupswaploadoutflags.human = spawnstruct();
    level.cleanupswaploadoutflags.human.powers = [];
    scripts\mp\gametypes\br_alt_mode_zxp.gsc::ammorestock_used( level.cleanupswaploadoutflags.human, "push", [ "+stance", "+movedown" ], ::update_goal_population, 1, undefined, ::update_hack_objective_marker, undefined, &"MP_ZXP/PUSH", undefined, 60 );
}

update_health_value_for_special_cases()
{
    if ( !istrue( level.cleanupswaploadoutflags.pick_up_data ) )
        return;

    thread scripts\mp\gametypes\br_alt_mode_zxp.gsc::van_stop_vo( level.cleanupswaploadoutflags.human );
}

update_goal_population( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "zombie_set" );
    var_2 = 750;

    if ( istrue( self.extendcirclelist ) )
    {
        var_3 = getdvarint( "scr_br_zxp_push_double_tap_ms", var_2 );
        var_4 = gettime() - self.extendcirclelist;

        if ( var_4 <= var_3 )
        {
            unlockableindex();
            thread scripts\mp\gametypes\br_alt_mode_zxp.gsc::updatescrapassistdata( var_0, var_1 );
            self.extendcirclelist = undefined;
            return;
        }
    }

    self.extendcirclelist = gettime();
}

unlockableindex()
{
    if ( !getdvarint( "scr_br_zxp_human_spawn_concuss", 0 ) )
        return;

    var_0 = 650;
    var_1 = getdvarint( "scr_br_zxp_push_radius", var_0 );
    var_2 = incrementpersistentstat( level.players, self.origin, var_1 );

    foreach ( var_4 in var_2 )
    {
        if ( var_4 scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder() && var_4.team != self.team && isalive( var_4 ) )
            scripts\mp\gametypes\br_alt_mode_zxp.gsc::update_health_bar_to_player( var_4, var_1 );
    }

    var_6 = anglestoforward( self.angles );
    playfx( level.cleanupswaploadoutflags.play_go_to_safehouse, self.origin, var_6 );
    playsoundatpos( self.origin, "sentry_explode_smoke" );
    playrumbleonposition( "grenade_rumble", self.origin );
    earthquake( 0.5, 1.5, self.origin, var_1 );
}

update_hack_objective_marker( var_0, var_1 )
{
    self.extendcirclelist = undefined;
}

setradarparamsonlatejoiner( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = var_0.meansofdeath;

    var_2 = var_0.victim;
    var_3 = var_0.hitloc;

    if ( isplayer( var_2 ) && var_2 scripts\mp\gametypes\br_public.gsc::update_timer_for_bomb_vest_detonator_holder() && ( var_3 == "head" || var_3 == "helmet" ) )
        var_1 = "MOD_HEAD_SHOT_ZOMBIE";

    return var_1;
}

dangercircletick( var_0, var_1 )
{
    var_2 = var_1 * var_1;

    foreach ( var_4 in level.cleanupswaploadoutflags._id_11AAE )
    {
        if ( isdefined( var_4.visuals ) && distance2dsquared( var_4.origin, var_0 ) > var_2 )
            thread removetags( var_4 );
    }
}
