// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level.cleanupswaploadoutflags = spawnstruct();
    level.cleanupswaploadoutflags.funcs = [];
    level.cleanupswaploadoutflags.give_ammo_to_stock = [];
    level.cleanupswaploadoutflags.hostdamagefactorlow = [];
    level.cleanupswaploadoutflags.data = [];
    level.cleanupswaploadoutflags.name = getdvar( "scr_br_gametype", "" );

    if ( level.cleanupswaploadoutflags.name == "none" )
        level.cleanupswaploadoutflags.name = "";

    switch ( level.cleanupswaploadoutflags.name )
    {
        case "control":
            scripts\mp\gametypes\br_gametype_control.gsc::init();
            break;
        case "dmz":
            scripts\mp\gametypes\br_gametype_dmz.gsc::init();
            break;
        case "prop":
            scripts\mp\gametypes\br_gametype_prop.gsc::init();
            break;
        case "jugg":
            scripts\mp\gametypes\br_gametype_juggernaut.gsc::init();
            break;
        case "kingslayer":
            scripts\mp\gametypes\br_gametype_kingslayer.gsc::init();
            break;
        case "mini":
            scripts\mp\gametypes\br_gametype_mini.gsc::init();
            break;
        case "truckwar":
            scripts\mp\gametypes\br_gametype_truckwar.gsc::init();
            break;
        case "gxp":
            scripts\mp\gametypes\br_gametype_gxp.gsc::init();
            break;
        case "zxp":
            scripts\mp\gametypes\br_gametype_zxp.gsc::init();
            break;
        case "rebirth":
            scripts\mp\gametypes\br_gametype_rebirth.gsc::init();
            break;
        case "payload":
            scripts\mp\gametypes\br_gametype_payload.gsc::init();
            break;
        case "x2":
            scripts\mp\gametypes\br_gametype_x2.gsc::init();
            break;
        case "reveal":
            scripts\mp\gametypes\br_gametype_reveal.gsc::init();
            break;
        case "reveal_2":
            scripts\mp\gametypes\br_gametype_reveal_2.gsc::init();
            break;
        case "bodycount":
            scripts\mp\gametypes\br_gametype_bodycount.gsc::init();
            break;
        case "rumble":
            scripts\mp\gametypes\br_gametype_rumble.gsc::init();
            break;
        case "brz":
            scripts\mp\gametypes\br_gametype_brz.gsc::init();
            break;
        case "brdov":
            scripts\mp\gametypes\br_gametype_brdov.gsc::init();
            break;
        case "":
            break;
        default:
            break;
    }
}

zombienumhitshuman( var_0, var_1 )
{
    if ( isdefined( level.cleanupswaploadoutflags.funcs[var_0] ) )
        scripts\mp\utility\script::getdropbagspawntypeenum( "registerBrGametypeFunc already has " + var_0 + " defined." );

    level.cleanupswaploadoutflags.funcs[var_0] = var_1;
}

_id_11BE7( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    return [[ level.cleanupswaploadoutflags.funcs[var_0] ]]( var_1, var_2, var_3, var_4, var_5, var_6 );
}

_id_11BE4( var_0, var_1, var_2 )
{
    if ( isdefined( level.cleanupswaploadoutflags.funcs[var_0] ) )
    {
        if ( isdefined( var_2 ) )
            return [[ level.cleanupswaploadoutflags.funcs[var_0] ]]( var_1, var_2 );
        else if ( isdefined( var_1 ) )
            return [[ level.cleanupswaploadoutflags.funcs[var_0] ]]( var_1 );
        else
            return [[ level.cleanupswaploadoutflags.funcs[var_0] ]]();
    }
}

_id_11BE5( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( level.cleanupswaploadoutflags.funcs[var_0] ) )
        return [[ level.cleanupswaploadoutflags.funcs[var_0] ]]( var_1, var_2, var_3 );
}

_id_11BE6( var_0, var_1, var_2, var_3, var_4 )
{
    if ( isdefined( level.cleanupswaploadoutflags.funcs[var_0] ) )
        return [[ level.cleanupswaploadoutflags.funcs[var_0] ]]( var_1, var_2, var_3, var_4 );
}

_id_12A5C( var_0 )
{
    level.cleanupswaploadoutflags.funcs[var_0] = undefined;
}

progress_obj( var_0 )
{
    return isdefined( level.cleanupswaploadoutflags.funcs[var_0] );
}

give_fists( var_0 )
{
    level.cleanupswaploadoutflags.give_ammo_to_stock[var_0] = 1;
}

propsetclonesleft( var_0 )
{
    return istrue( level.cleanupswaploadoutflags.give_ammo_to_stock[var_0] );
}

hostdamagepercentmedium( var_0 )
{
    level.cleanupswaploadoutflags.hostdamagefactorlow[var_0] = 1;
}

propsetflashesleft( var_0 )
{
    return istrue( level.cleanupswaploadoutflags.hostdamagefactorlow[var_0] );
}

zombienumhitsheli( var_0, var_1 )
{
    level.cleanupswaploadoutflags.data[var_0] = var_1;
}

lootleadermarksizedynamic( var_0 )
{
    return level.cleanupswaploadoutflags.data[var_0];
}

proggressionmismatchpopup( var_0 )
{
    return isdefined( level.cleanupswaploadoutflags.data[var_0] );
}
