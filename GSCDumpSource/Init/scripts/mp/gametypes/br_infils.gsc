// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    level.brlatespawnplayer = ::latespawnplayer;
    level.playanim_vehicleturret = _id_11D85();
    setdvarifuninitialized( "br_infil_anim_enable_third_camera", 1 );
    setdvarifuninitialized( "br_infil_play_jump_anims", 1 );
    setdvarifuninitialized( "br_infil_bot_jumpmaster", 0 );
    level.infilselectionmethod = "";
    level.infilcanusemap = 0;

    if ( istrue( getdvarint( "br_spawnSelectionInfil", 0 ) ) )
    {
        level.infilselectionmethod = getdvar( "scr_br_infilselectionmethod", "exclusion" );
        level.infilcanusemap = 1;
        level.delay_play_depart_vo = getdvarint( "scr_br_canSoloJump", 1 );
    }

    initspawnexclusionpois();
    initinfillocationselectionhandlers();
}

_id_11D85()
{
    var_0 = 0;
    var_1 = 1;
    var_2 = var_1;
    var_3 = getdvarint( "scr_br_infilType", var_2 );

    if ( var_3 == var_1 )
    {
        if ( level.mapname != "mp_don4" && level.mapname != "mp_br_mechanics" && level.mapname != "mp_escape3" )
            var_3 = var_0;
    }

    return var_3;
}

primesneeded()
{
    return level.playanim_vehicleturret == 0;
}

propabilitykeysvisible()
{
    return level.playanim_vehicleturret == 1;
}

manualturret_domonitoredweaponswitch()
{
    var_0 = undefined;
    var_1 = undefined;

    if ( propabilitykeysvisible() )
    {
        var_0 = 0.0;
        var_1 = 0.0;
    }
    else
    {
        var_0 = 3.45;
        var_1 = 0.6;
    }

    return [ var_0, var_1 ];
}

setplayerprematchallows()
{
    scripts\mp\utility\player::enableplayerforspawnlogic( 0 );
    self allowmelee( 0 );
    self disableoffhandweapons();
    level.freefallstartcb = ::freefallstartfunc;
}

freefallstartfunc()
{
    self allowmelee( 1 );
    self enableoffhandweapons();
    thread scripts\cp_mp\parachute::vehicle_checktrailvfx();
}

play_vo_internal()
{
    self endon( "disconnect" );

    if ( self.class == "" )
    {
        self.class = "custom1";
        self.pers["class"] = "custom1";
    }

    scripts\mp\playerlogic::spawnplayer( 0 );
    self.br_infilstarted = 1;
    self notify( "brWaitAndSpawnClientComplete" );
    self setclientomnvar( "ui_br_transition_type", 0 );
    self setclientomnvar( "ui_br_extended_load_screen", 0 );
}

_id_12DFE( var_0, var_1, var_2 )
{
    var_3 = scripts\engine\utility::ter_op( isdefined( var_0 ), var_0, level.players );

    foreach ( var_5 in var_3 )
    {
        if ( !isdefined( var_5 ) )
            continue;

        var_5 hvt_death_player_vo();
        var_5 clearladderstate();

        if ( !isalive( var_5 ) )
        {
            if ( isdefined( var_1 ) )
                var_5.forcespawnorigin = var_1;

            var_5 play_vo_internal();
        }
        else
        {
            var_5.br_infilstarted = 1;

            if ( isdefined( var_1 ) )
                var_5 setorigin( var_1 );
        }

        if ( !isdefined( var_5 ) )
            continue;

        if ( isdefined( var_2 ) )
            var_5 playerlinkto( var_2 );

        if ( istrue( var_5.checkpointstruct ) )
            scripts\mp\gametypes\br.gsc::_id_12A58( var_5 );

        var_5 notify( "beginC130" );
    }

    if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "squadLeader" ) )
    {
        if ( level.teambased )
        {
            foreach ( var_8 in level.teamnamelist )
            {
                var_9 = scripts\mp\gametypes\br_public.gsc::minplunderextractions( var_8 );

                for ( var_10 = 0; var_10 < var_9.size; var_10++ )
                {
                    var_11 = var_9[var_10];
                    var_12 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_8, var_11 );
                    var_13 = _id_11F53( var_12 );

                    if ( isdefined( var_13 ) )
                    {
                        zombienumhitstruck( var_13 );
                        var_13 thread _id_12F18( var_8, var_11 );
                    }

                    scripts\mp\gametypes\br.gsc::_id_12B2C( var_8, var_11 );
                }
            }
        }
        else
        {
            var_3 = scripts\engine\utility::ter_op( isdefined( var_0 ), var_0, level.players );

            foreach ( var_5 in var_3 )
            {
                if ( isdefined( var_5 ) )
                    zombienumhitstruck( var_5 );
            }
        }
    }

    if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "oneLife" ) )
    {
        level.disablespawning = 1;
        setdynamicdvar( "scr_" + scripts\mp\utility\game::getgametype() + "_numLives", 1 );
    }

    level.snatchspawnalltoc130done = 1;
}

hvt_death_player_vo()
{
    var_0 = self;
    var_0 skydive_setdeploymentstatus( 0 );
    var_0 skydive_setbasejumpingstatus( 0 );

    if ( isdefined( var_0.is_bomb_use_allowed ) )
        var_0.is_bomb_use_allowed = 5;

    var_0 scripts\cp_mp\parachute::targetteamremaining();
}

zombienumhitstruck( var_0 )
{
    if ( !istrue( var_0.registerpreviousprop ) )
    {
        var_0.registerpreviousprop = 1;
        var_0 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "jumpMasterState", 2 );
        var_0 notifyonplayercommand( "halo_jump_c130", "+gostand" );
        var_0 notifyonplayercommand( "br_break_squad", "+breath_sprint" );
    }
}

_id_12F18( var_0, var_1 )
{
    scripts\engine\utility::_id_12E3F( "death", "disconnect" );
    var_2 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_0, var_1 );
    var_3 = _id_11F53( var_2 );

    if ( isdefined( var_3 ) )
    {
        zombienumhitstruck( var_3 );
        var_3 thread _id_12F18( var_0, var_1 );
    }
}

performfailsafeinfil()
{
    var_0 = ( 0, 0, 3000 );

    if ( isdefined( level.prematchspawnorigins ) && level.prematchspawnorigins.size > 0 )
    {
        var_1 = scripts\engine\utility::random( level.prematchspawnorigins );
        var_0 = var_1.origin;
    }

    var_2 = ( 0, randomintrange( 0, 360 ), 0 );
    self setorigin( var_0, 1 );
    self setplayerangles( var_2 );
    wait 0.2;
    thread scripts\cp_mp\parachute::startfreefall( 0, 1 );
}

latespawnplayer()
{
    self endon( "disconnect" );
    var_0 = self;
    var_1 = scripts\mp\gametypes\br_public.gsc::rear_minigun_model() || scripts\mp\gametypes\br_public.gsc::prophasclonesleft();

    if ( getdvar( "scr_br_lateSpawnFallback" ) != "" || var_1 )
        stealth_broken_music_index();
    else if ( !isalive( var_0 ) )
    {
        if ( !istrue( level.checkpoint_add_carepackage ) )
        {
            var_2 = isbot( var_0 ) && scripts\mp\gametypes\br_public.gsc::processvoqueue();

            while ( !istrue( level.checkunscoredspawnpoint ) && !var_2 )
            {
                if ( !var_2 )
                {
                    var_0 scripts\mp\gametypes\br.gsc::convoy_left_gulag_monitor();
                    var_0 setclientomnvar( "ui_br_transition_type", 4 );
                }

                wait 0.3;
            }

            var_0 thread rewardangles();
        }
        else
        {
            var_0.checkredmassacre = 0;
            var_0.br_infilstarted = 1;

            if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "squadLeader" ) )
            {
                var_3 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_0.team, var_0.squadindex );

                if ( !isdefined( var_3 ) || var_3.size == 0 )
                    var_3 = [ self ];

                _id_11F53( var_3 );
            }

            var_0 thread should_damage_player_on_bottom();
        }
    }

    var_0 setclientomnvar( "ui_br_transition_type", 0 );
    var_0 setclientomnvar( "ui_br_extended_load_screen", 0 );
}

rewardangles()
{
    var_0 = self;
    var_0 endon( "disconnect" );

    if ( !isalive( var_0 ) )
    {
        var_0.rewardmodifier = 1;
        var_0 scripts\mp\playerlogic::spawnplayer( 0 );
    }

    var_0 playerhide();
    var_0.rewardmodifier = undefined;
    var_0 freezecontrols( 1 );
    var_1 = 1;

    if ( isdefined( var_0.team ) && isdefined( var_0.squadindex ) )
    {
        var_2 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_0.team, var_0.squadindex );
        var_1 = var_2.size == 1;
    }

    var_0.play_train_speaker_vo_internal = var_1;

    if ( var_0 scripts\mp\gametypes\br_public.gsc::questrewarduav() )
        var_0.infilanimindex = 1;

    if ( !isdefined( var_0.infilanimindex ) && level.teambased )
    {
        var_2 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_0.team, var_0.squadindex );
        var_3 = cur_goal_struct( var_2.size );

        for ( var_4 = 0; var_4 < var_3.size; var_4++ )
        {
            var_5 = 0;

            foreach ( var_7 in var_2 )
            {
                if ( var_7 != var_0 && var_7 scripts\mp\gametypes\br_public.gsc::questrewarduav() )
                    continue;

                if ( isdefined( var_7.infilanimindex ) && isdefined( var_3[var_4] ) && var_7.infilanimindex == var_3[var_4] )
                {
                    var_5 = 1;
                    break;
                }
            }

            if ( !var_5 )
            {
                var_0.infilanimindex = var_3[var_4];
                break;
            }
        }
    }

    var_0 playerjoininfil();
    var_0 playerlinktopositionent( level.revivingteammate );
    scripts\mp\utility\game::_id_11EE1( var_0, 1 );
    var_9 = manualturret_moving_platform_death( level.revivingteammate );
    var_0 setorigin( var_9.origin );
    var_0 playerplayinfilloopanim( level.revivingteammate );
    waitframe();
    var_10 = 0;

    if ( !var_10 )
    {
        if ( isdefined( var_0.team ) && level.teambased )
        {
            var_2 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_0.team, var_0.squadindex );

            foreach ( var_12 in var_2 )
            {
                var_0 showtoplayer( var_12 );
                var_12 showtoplayer( var_0 );
            }
        }
    }

    if ( !isbot( var_0 ) )
        scripts\mp\gametypes\br_c130.gsc::orbitcam( level.br_ac130 );

    wait 0.5;
    var_0 freezecontrols( 0 );
    var_0 setclientomnvar( "ui_br_transition_type", 0 );
    var_0.br_infilstarted = 1;
}

cur_goal_struct( var_0 )
{
    var_1 = [];

    for ( var_2 = 0; var_2 < var_0 - 1; var_2++ )
        var_1[var_2] = var_2 + 2;

    return var_1;
}

should_damage_player_on_bottom()
{
    var_0 = self;
    var_0.br_infilstarted = 1;
    var_0 scripts\mp\gametypes\br_pickups.gsc::addrespawntoken( 1 );
    var_0 scripts\mp\gametypes\br_gulag.gsc::playergulagautowin( undefined, undefined, 1 );
}

stealth_broken_music_index()
{
    self endon( "disconnect" );
    var_0 = self;

    if ( !isalive( var_0 ) )
        var_0 scripts\mp\playerlogic::spawnplayer( 0 );

    if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "squadLeader" ) )
    {
        if ( level.teambased )
        {
            var_1 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_0.team, var_0.squadindex );

            if ( !isdefined( var_1 ) || var_1.size == 0 )
                var_1 = [ self ];

            var_2 = _id_11F53( var_1 );

            if ( isdefined( var_2 ) )
                zombienumhitstruck( var_2 );
            else
            {

            }
        }
        else
        {
            var_0 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "jumpMasterState", 2 );
            zombienumhitstruck( var_0 );
        }
    }

    var_0.br_infilstarted = 1;
}

takeloadoutatinfilend( var_0 )
{
    self takeweapon( self.weaponlist[0] );
    var_1 = getcompleteweaponname( "ks_remote_map_snatch" );
    var_2 = self getweaponslistall();

    foreach ( var_4 in var_2 )
    {
        if ( scripts\mp\utility\weapon::isgesture( var_4 ) )
            continue;

        if ( isnullweapon( var_1, var_4 ) )
            continue;

        scripts\cp_mp\utility\inventory_utility::_takeweapon( var_4 );
    }

    self.primaryweaponobj = undefined;
    self.primaryweapon = "none";
    self.pers["primaryWeapon"] = self.primaryweapon;
    self.secondaryweaponobj = undefined;
    self.secondaryweapon = "none";
    self.pers["secondaryWeapon"] = self.secondaryweapon;

    if ( !istrue( var_0 ) )
    {
        var_6 = getforcedloadoutweapon();
        scripts\cp_mp\utility\inventory_utility::_giveweapon( var_6, 1 );
        thread scripts\cp_mp\utility\inventory_utility::domonitoredweaponswitch( var_6 );
        self setspawnweapon( var_6, 1 );

        if ( level.magcount == 0 )
        {
            self setweaponammoclip( var_6, 0 );
            self setweaponammostock( var_6, 0 );
        }
        else
        {
            self setweaponammoclip( var_6, weaponclipsize( var_6 ) );
            self setweaponammostock( var_6, weaponclipsize( var_6 ) * ( level.magcount - 1 ) );
        }

        self.secondaryweaponobj = var_6;
        self.secondaryweapon = createheadicon( self.secondaryweaponobj );
        self.pers["secondaryWeapon"] = self.secondaryweapon;
    }
}

getforcedloadoutweapon()
{
    return scripts\mp\class::buildweapon( "iw8_pi_golf21", [ "reflex", "none", "none", "none", "none" ], "none", "none", -1, undefined, undefined, undefined, undefined, undefined, 0 );
}

_id_11F53( var_0 )
{
    if ( var_0.size == 0 )
        return undefined;

    var_1 = undefined;

    foreach ( var_3 in var_0 )
    {
        if ( isdefined( var_3 ) && var_3 scripts\mp\gametypes\br_public.gsc::questrewarduav() )
            return var_3;
    }

    foreach ( var_3 in var_0 )
    {
        if ( level.onlinegame && var_3 isfireteamleader() )
        {
            var_1 = var_3;
            break;
        }
    }

    if ( !isdefined( var_1 ) )
    {
        var_7 = 0;
        var_8 = 0;

        foreach ( var_3 in var_0 )
        {
            var_10 = var_7 == isbot( var_3 );

            if ( var_10 )
            {
                var_8++;
                var_11 = 1.0 / var_8;

                if ( randomfloat( 1.0 ) < var_11 )
                    var_1 = var_3;
            }
        }
    }

    if ( !isdefined( var_1 ) )
    {
        foreach ( var_3 in var_0 )
        {
            var_1 = var_3;
            break;
        }
    }

    if ( !isdefined( var_1 ) )
        return undefined;

    var_1 scripts\mp\gametypes\br.gsc::_id_11EDB( 1 );

    foreach ( var_3 in var_0 )
    {
        if ( var_3 != var_1 )
            var_3 scripts\mp\gametypes\br.gsc::_id_11EDB( 0 );

        var_16 = scripts\engine\utility::ter_op( var_3 scripts\mp\gametypes\br_public.gsc::questrewarduav(), 2, 1 );
        scripts\mp\gametypes\br_c130.gsc::setteammateomnvarsforplayer( var_3, var_0, var_16 );
    }

    return var_1;
}

csm_alg( var_0, var_1 )
{
    if ( propabilitykeysvisible() )
        return cs_setup_arrays( var_0, var_1 );
    else
        return buildac130infilanimstruct( var_0, var_1 );
}

buildac130infilanimstruct( var_0, var_1 )
{
    var_2 = spawnstruct();

    if ( isdefined( var_0 ) )
    {
        var_0.animstruct = var_2;
        var_2.movingc130 = var_0;
    }

    var_2.staticc130 = getent( "infil_plane", "script_noteworthy" );

    if ( isdefined( var_2.staticc130 ) )
        var_2.staticc130 show();
    else
    {
        var_2.staticc130 = spawn( "script_model", getdvarvector( "br_infil_anim_pos", ( 0, 0, 0 ) ) );
        var_2.staticc130 setmodel( "veh8_mil_air_acharlie130_magma_animated" );
        var_2.staticc130.cleanme = 1;
    }

    var_2.cameraent = spawn( "script_model", var_2.staticc130.origin );
    var_2.cameraent setmodel( "generic_prop_x5" );

    if ( isdefined( var_0 ) )
    {
        var_0 forcenetfieldhighlod( 1 );
        var_2.debugtimedelta = spawn( "script_model", var_2.movingc130.origin );
        var_2.debugtimedelta setmodel( "generic_prop_x5" );
        var_2.debugtimedelta linkto( var_2.movingc130, "tag_origin", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_2.debugtimedelta forcenetfieldhighlod( 1 );
    }

    spawnplayerpositionparentent( var_2, var_2.staticc130 );

    if ( var_1 == "script_model" )
    {
        var_2.playerslot1 = spawn( "script_model", var_2.staticc130.origin );
        var_2.playerslot1 setmodel( "fullbody_usmc_ar_br_infil" );
        var_2.playerslot2 = spawn( "script_model", var_2.staticc130.origin );
        var_2.playerslot2 setmodel( "fullbody_usmc_ar_br_infil" );
        var_2.playerslot3 = spawn( "script_model", var_2.staticc130.origin );
        var_2.playerslot3 setmodel( "fullbody_usmc_ar_br_infil" );
        var_2.playerslot4 = spawn( "script_model", var_2.staticc130.origin );
        var_2.playerslot4 setmodel( "fullbody_usmc_ar_br_infil" );
        var_2.playerslot1 linkto( var_2.playerpositionents["parent"], "j_prop_1", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_2.playerslot2 linkto( var_2.playerpositionents["parent"], "j_prop_2", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_2.playerslot3 linkto( var_2.playerpositionents["parent"], "j_prop_3", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_2.playerslot4 linkto( var_2.playerpositionents["parent"], "j_prop_4", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_2.infil_anim_type = "script_model";
    }
    else
    {
        var_3 = [ "j_prop_1", "j_prop_2", "j_prop_3", "j_prop_4" ];

        foreach ( var_5 in var_3 )
            spawnplayerpositionent( var_2, var_5 );

        var_2.infil_anim_type = "player";
    }

    var_2.aidoorchief = spawn( "script_model", var_2.staticc130.origin );
    var_2.aidoorchief setmodel( "fullbody_usmc_ar_br_infil" );

    if ( isdefined( var_0 ) && isdefined( var_2.movingc130.innards ) )
        var_2.movingc130.innards linkto( var_2.movingc130, "", ( 0, 0, 0 ), ( 0, 0, 0 ) );

    var_2.aidoorchief linkto( var_2.playerpositionents["parent"], "j_prop_5", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    var_2.cameraent linkto( var_2.staticc130, "", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    var_2.enemygunship_updatedebugflashlight = spawnfx( level._effect["vfx_br_infil_cloud_anim"], var_2.staticc130.origin );
    return var_2;
}

cs_setup_arrays( var_0, var_1 )
{
    var_2 = spawnstruct();

    if ( isdefined( var_0 ) )
    {
        var_0.animstruct = var_2;
        var_2.spawn_fake_letter = var_0;
    }

    var_3 = scripts\engine\utility::getstruct( "infil_plane_ch2", "script_noteworthy" );
    var_2.origin = var_3.origin;
    var_2.angles = ( 0, 0, 0 );

    if ( isdefined( var_3.angles ) )
        var_2.angles = var_3.angles;

    var_2.chopper = spawn( "script_model", var_2.origin );
    var_2.chopper.angles = var_2.angles;
    var_2.chopper setmodel( "tag_origin" );
    var_2.chopper.cleanme = 1;
    var_2.dropbrattackerperkammo = spawn( "script_model", var_2.origin );
    var_2.dropbrattackerperkammo setmodel( "veh8_mil_air_mindia8_interior_infil_netting" );
    var_2.dropbrattackerperkammo linkto( var_2.chopper, "tag_origin", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    var_2.drone_out_of_bound_monitor = spawn( "script_model", var_2.origin );
    var_2.drone_out_of_bound_monitor setmodel( "veh8_mil_air_mindia8_interior_infil_cabin_door" );
    var_2.drone_out_of_bound_monitor linkto( var_2.chopper, "tag_origin", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    var_2.decide_new_code = spawn( "script_model", var_2.origin );
    var_2.decide_new_code setmodel( "generic_prop_x3" );
    var_2.decide_new_code linkto( var_2.chopper, "tag_origin", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    var_2.decoy_aiseenplayerrecently = spawn( "script_model", var_2.origin );
    var_2.decoy_aiseenplayerrecently setmodel( "generic_prop_x3" );
    var_2.decoy_aiseenplayerrecently linkto( var_2.chopper, "tag_origin", ( 0, 0, 0 ), ( 0, 0, 0 ) );

    if ( isdefined( var_0 ) )
    {
        var_0 forcenetfieldhighlod( 1 );
        var_2.decoy_aicanseeanyplayer = spawn( "script_model", var_0.origin );
        var_2.decoy_aicanseeanyplayer setmodel( "generic_prop_x3" );
        var_2.decoy_aicanseeanyplayer linkto( var_0, "tag_origin", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_2.decoy_aicanseeanyplayer forcenetfieldhighlod( 1 );
        var_2.decoy_canseeplayer = spawn( "script_model", var_0.origin );
        var_2.decoy_canseeplayer setmodel( "generic_prop_x3" );
        var_2.decoy_canseeplayer linkto( var_0, "tag_origin", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_2.decoy_canseeplayer forcenetfieldhighlod( 1 );
    }

    var_2.playerpositionents["parent_solo"] = spawn( "script_model", var_2.origin );
    var_2.playerpositionents["parent_solo"] setmodel( "generic_prop_x3" );
    var_2.playerpositionents["parent_solo"] linkto( var_2.chopper, "tag_origin", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    var_2.playerpositionents["parent_squad"] = spawn( "script_model", var_2.origin );
    var_2.playerpositionents["parent_squad"] setmodel( "generic_prop_x5" );
    var_2.playerpositionents["parent_squad"] linkto( var_2.chopper, "tag_origin", ( 0, 0, 0 ), ( 0, 0, 0 ) );

    if ( var_1 == "script_model" )
    {
        var_2.validate_track = spawn( "script_model", var_2.origin );
        var_2.validate_track setmodel( "fullbody_usmc_ar_br_infil" );
        var_2.validate_track linkto( var_2.playerpositionents["parent_solo"], "j_prop_1", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_2.validatealivecount = spawn( "script_model", var_2.origin );
        var_2.validatealivecount setmodel( "fullbody_usmc_ar_br_infil" );
        var_2.validatealivecount linkto( var_2.playerpositionents["parent_squad"], "j_prop_1", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_2.validateboltent = spawn( "script_model", var_2.origin );
        var_2.validateboltent setmodel( "fullbody_usmc_ar_br_infil" );
        var_2.validateboltent linkto( var_2.playerpositionents["parent_squad"], "j_prop_2", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_2.validatedamagerelicswat = spawn( "script_model", var_2.origin );
        var_2.validatedamagerelicswat setmodel( "fullbody_usmc_ar_br_infil" );
        var_2.validatedamagerelicswat linkto( var_2.playerpositionents["parent_squad"], "j_prop_3", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_2.validateevents = spawn( "script_model", var_2.origin );
        var_2.validateevents setmodel( "fullbody_usmc_ar_br_infil" );
        var_2.validateevents linkto( var_2.playerpositionents["parent_squad"], "j_prop_4", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_2.infil_anim_type = "script_model";
    }
    else
    {
        var_2.playerpositionents["child_solo"] = spawn( "script_model", var_2.playerpositionents["parent_solo"] gettagorigin( "j_prop_1" ) );
        var_2.playerpositionents["child_solo"] setmodel( "tag_player" );
        var_2.playerpositionents["child_solo"] linkto( var_2.playerpositionents["parent_solo"], "j_prop_1", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_2.playerpositionents["child_squad_1"] = spawn( "script_model", var_2.playerpositionents["parent_squad"] gettagorigin( "j_prop_1" ) );
        var_2.playerpositionents["child_squad_1"] setmodel( "tag_player" );
        var_2.playerpositionents["child_squad_1"] linkto( var_2.playerpositionents["parent_squad"], "j_prop_1", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_2.playerpositionents["child_squad_2"] = spawn( "script_model", var_2.playerpositionents["parent_squad"] gettagorigin( "j_prop_2" ) );
        var_2.playerpositionents["child_squad_2"] setmodel( "tag_player" );
        var_2.playerpositionents["child_squad_2"] linkto( var_2.playerpositionents["parent_squad"], "j_prop_2", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_2.playerpositionents["child_squad_3"] = spawn( "script_model", var_2.playerpositionents["parent_squad"] gettagorigin( "j_prop_3" ) );
        var_2.playerpositionents["child_squad_3"] setmodel( "tag_player" );
        var_2.playerpositionents["child_squad_3"] linkto( var_2.playerpositionents["parent_squad"], "j_prop_3", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_2.playerpositionents["child_squad_4"] = spawn( "script_model", var_2.playerpositionents["parent_squad"] gettagorigin( "j_prop_4" ) );
        var_2.playerpositionents["child_squad_4"] setmodel( "tag_player" );
        var_2.playerpositionents["child_squad_4"] linkto( var_2.playerpositionents["parent_squad"], "j_prop_4", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_2.infil_anim_type = "player";
    }

    var_2.audio_player_spawn_mud_loop = spawn( "script_model", var_2.origin );
    var_2.audio_player_spawn_mud_loop setmodel( "fullbody_mp_eastern_bale_3_1" );
    var_2.audio_player_spawn_mud_loop linkto( var_2.playerpositionents["parent_solo"], "j_prop_2", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    var_2.atv = spawn( "script_model", var_2.origin );
    var_2.atv setmodel( "fullbody_usmc_ar_br_infil" );
    var_2.atv linkto( var_2.playerpositionents["parent_solo"], "j_prop_3", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    var_2.bot_dd_think = spawn( "script_model", var_2.origin );
    var_2.bot_dd_think setmodel( "generic_prop_x10" );
    var_2.bot_dd_think linkto( var_2.chopper, "tag_origin", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    var_2.bot_dd_think forcenetfieldhighlod( 1 );
    var_4 = 9;
    var_2.bot_dd_start = [];

    for ( var_5 = 0; var_5 < var_4; var_5++ )
    {
        var_6 = spawn( "script_model", var_2.origin );
        var_6 setmodel( "veh8_mil_air_mindia8_infil_flight" );
        var_6 linkto( var_2.bot_dd_think, "j_prop_" + ( var_5 + 2 ), ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_6 forcenetfieldhighlod( 1 );
        var_6 playloopsound( "br_heli_infil_fleet_lp" );
        var_2.bot_dd_start[var_2.bot_dd_start.size] = var_6;
    }

    return var_2;
}

eliminate_drone_internal( var_0 )
{
    if ( isdefined( var_0.bot_dd_start ) )
    {
        foreach ( var_2 in var_0.bot_dd_start )
            var_2 delete();
    }

    if ( isdefined( var_0.bot_dd_think ) )
        var_0.bot_dd_think delete();

    if ( isdefined( var_0.atv ) )
        var_0.atv delete();

    if ( isdefined( var_0.audio_player_spawn_mud_loop ) )
        var_0.audio_player_spawn_mud_loop delete();

    if ( isdefined( var_0.playerpositionents ) )
    {
        foreach ( var_5 in var_0.playerpositionents )
            var_5 delete();
    }

    if ( isdefined( var_0.validate_track ) )
        var_0.validate_track delete();

    if ( isdefined( var_0.validatealivecount ) )
        var_0.validatealivecount delete();

    if ( isdefined( var_0.validateboltent ) )
        var_0.validateboltent delete();

    if ( isdefined( var_0.validatedamagerelicswat ) )
        var_0.validatedamagerelicswat delete();

    if ( isdefined( var_0.validateevents ) )
        var_0.validateevents delete();

    if ( isdefined( var_0.decide_new_code ) )
        var_0.decide_new_code delete();

    if ( isdefined( var_0.decoy_aiseenplayerrecently ) )
        var_0.decoy_aiseenplayerrecently delete();

    if ( isdefined( var_0.decoy_aicanseeanyplayer ) )
        var_0.decoy_aicanseeanyplayer delete();

    if ( isdefined( var_0.decoy_canseeplayer ) )
        var_0.decoy_canseeplayer delete();

    if ( isdefined( var_0.drone_out_of_bound_monitor ) )
        var_0.drone_out_of_bound_monitor delete();

    if ( isdefined( var_0.dropbrattackerperkammo ) )
        var_0.dropbrattackerperkammo delete();

    if ( isdefined( var_0.chopper ) && istrue( var_0.chopper.cleanme ) )
        var_0.chopper delete();

    if ( isdefined( var_0.spawn_fake_letter ) && istrue( var_0.spawn_fake_letter.cleanme ) )
    {
        if ( isdefined( var_0.spawn_fake_letter.innards ) && istrue( var_0.spawn_fake_letter.innards.cleanme ) )
            var_0.spawn_fake_letter.innards delete();

        var_0.spawn_fake_letter delete();
    }
}

eliminate_drone_minigun_speed( var_0 )
{
    if ( propabilitykeysvisible() )
        eliminate_drone_internal( var_0 );
    else
        scripts\mp\gametypes\br_public.gsc::cleanac130struct( var_0 );
}

spawnplayerpositionparentent( var_0, var_1 )
{
    var_0.playerpositionents["parent"] = spawn( "script_model", var_1.origin );
    var_0.playerpositionents["parent"] setmodel( "generic_prop_x5" );
    var_0.playerpositionents["parent"] linkto( var_1, "", ( 0, 0, 0 ), ( 0, 0, 0 ) );
}

spawnplayerpositionent( var_0, var_1 )
{
    var_0.playerpositionents[var_1] = spawn( "script_model", var_0.playerpositionents["parent"] gettagorigin( var_1 ) );
    var_0.playerpositionents[var_1] setmodel( "tag_player" );
    var_0.playerpositionents[var_1] linkto( var_0.playerpositionents["parent"], var_1, ( 0, 0, 0 ), ( 0, 0, 0 ) );
}

mark_as_bomb_vest_controller_holder( var_0 )
{
    if ( propabilitykeysvisible() )
        return mark_armor( var_0 );
    else
        return mapnamefilter( var_0 );
}

#using_animtree("script_model");

mark_armor( var_0 )
{
    var_1 = self getplayerangles( 1 );
    var_2 = anglestoforward( var_1 );
    var_3 = anglestoforward( var_0.spawn_fake_letter.angles );
    var_4 = anglestoright( var_0.spawn_fake_letter.angles );
    var_5 = vectordot( var_2, var_3 );
    var_6 = vectordot( var_2, var_4 );
    var_7 = cos( 45.0 );

    if ( var_5 < -1.0 * var_7 )
        return [ "wz_infil_mindia8_jump_genpropx10", %wz_infil_mindia8_jump_genpropx10, "wz_infil_mindia8_jump01_pl01" ];

    if ( var_6 > var_7 )
        return [ "wz_infil_mindia8_jump_genpropx10_90_l", %wz_infil_mindia8_jump_genpropx10_90_l, "wz_infil_mindia8_jump01_pl01_90_l" ];
    else if ( var_6 < -1.0 * var_7 )
        return [ "wz_infil_mindia8_jump_genpropx10_90_r", %wz_infil_mindia8_jump_genpropx10_90_r, "wz_infil_mindia8_jump01_pl01_90_r" ];
    else if ( var_6 > 0.0 )
        return [ "wz_infil_mindia8_jump_genpropx10_180_l", %wz_infil_mindia8_jump_genpropx10_180_l, "wz_infil_mindia8_jump01_pl01_180_l" ];
    else
        return [ "wz_infil_mindia8_jump_genpropx10_180_r", %wz_infil_mindia8_jump_genpropx10_180_r, "wz_infil_mindia8_jump01_pl01_180_r" ];
}

mapnamefilter( var_0 )
{
    var_1 = self getplayerangles( 1 );
    var_2 = anglestoforward( var_1 );
    var_3 = anglestoforward( var_0.movingc130.angles );
    var_4 = anglestoright( var_0.movingc130.angles );
    var_5 = vectordot( var_2, var_3 );
    var_6 = vectordot( var_2, var_4 );
    var_7 = cos( 45.0 );

    if ( var_5 < -1.0 * var_7 )
        return [ "sdr_mp_infil_ac130_jump_genpropx10", %sdr_mp_infil_ac130_jump_genpropx10, "sdr_mp_infil_ac130_jump" ];

    if ( var_6 > var_7 )
        return [ "sdr_mp_infil_ac130_jump_genpropx10_90_l", %sdr_mp_infil_ac130_jump_genpropx10_90_l, "sdr_mp_infil_ac130_jump_90_l" ];
    else if ( var_6 < -1.0 * var_7 )
        return [ "sdr_mp_infil_ac130_jump_genpropx10_90_r", %sdr_mp_infil_ac130_jump_genpropx10_90_r, "sdr_mp_infil_ac130_jump_90_r" ];
    else if ( var_6 > 0.0 )
        return [ "sdr_mp_infil_ac130_jump_genpropx10_180_l", %sdr_mp_infil_ac130_jump_genpropx10_180_l, "sdr_mp_infil_ac130_jump_180_l" ];
    else
        return [ "sdr_mp_infil_ac130_jump_genpropx10_180_r", %sdr_mp_infil_ac130_jump_genpropx10_180_r, "sdr_mp_infil_ac130_jump_180_r" ];
}

vehicle_damage_updatestate_br( var_0 )
{
    var_1 = "";

    if ( var_0 scripts\mp\gametypes\br_public.gsc::questrewarduav() )
        var_1 = "br_infil_squad_leader_jump";
    else
        var_1 = "br_infil_squadmate_jump";

    var_0 scripts\mp\gametypes\br_public.gsc::vehicle_isfriendlytoteam( var_1, var_0.team, var_0 );
}

watchinfiljumpanim( var_0 )
{
    self endon( "death_or_disconnect" );

    if ( !isdefined( level.infiljumpentsspawned ) )
        level.infiljumpentsspawned = 0;

    self.obj_room_fire_07 = 0;
    self waittill( "br_jump" );
    var_1 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( self.team, self.squadindex );
    var_2 = [];

    if ( self.jumptype == "leader" )
    {
        foreach ( var_4 in var_1 )
        {
            if ( isdefined( var_4.infilanimindex ) )
                var_2[var_2.size] = var_4;
        }
    }
    else if ( self.jumptype == "solo" || self.jumptype == "outOfBounds" )
        var_2 = [ self ];

    var_6 = var_2.size > 0;

    if ( var_6 )
    {
        var_7 = getdvarint( "br_infil_play_jump_anims", 1 ) != 0;

        if ( level.infiljumpentsspawned >= 100 )
            var_7 = 0;

        var_8 = undefined;

        if ( var_7 )
        {
            var_8 = 0;
            [var_10, var_11, var_12] = mark_as_bomb_vest_controller_holder( var_0 );
            var_13 = manualturret_moving_platform_death( var_0 );
            var_14["parent"] = spawn( "script_model", var_13.origin );
            level.infiljumpentsspawned++;
            var_14["parent"] setmodel( "generic_prop_x10" );
            var_14["parent"] linkto( var_13, "tag_body", ( 0, 0, 0 ), ( 0, 0, 0 ) );

            foreach ( var_4 in var_2 )
            {
                if ( !isdefined( var_4.infilanimindex ) )
                    var_4.infilanimindex = 1;

                var_16 = "j_prop_" + ( var_4.infilanimindex + 2 );
                var_14[var_16] = spawn( "script_model", var_14["parent"] gettagorigin( var_16 ) );
                level.infiljumpentsspawned++;
                var_14[var_16] setmodel( "tag_player" );
                var_14[var_16] linkto( var_14["parent"], var_16, ( 0, 0, 0 ), ( 0, 0, 0 ) );
                var_4 playerlinkto( var_14[var_16], "tag_player" );
                var_4 playershow( 1 );
                var_4 playanimscriptsceneevent( "scripted_scene", var_12 );
                var_4.infilanimindex = undefined;
                var_4 playlocalsound( "scr_br_infil_jump_stinger" );
                level thread vehicle_damage_updatestate_br( var_4 );
            }

            var_14["parent"] scriptmodelplayanim( var_10, "prop" );
            var_18 = getanimlength( var_11 );
            var_19 = 1.0;
            var_18 = max( var_18, var_19 + 0.1 );
            wait( var_18 - var_19 );

            foreach ( var_4 in var_2 )
                var_4 cameradefault();

            wait( var_19 );

            foreach ( var_23 in var_14 )
            {
                var_23 delete();
                level.infiljumpentsspawned--;
            }
        }
        else
        {
            var_8 = 1;
            waittillframeend;
        }

        foreach ( var_4 in var_2 )
        {
            var_4.infilanimindex = undefined;
            var_4 stopanimscriptsceneevent();
            var_4 notify( "infil_jump_done" );
            var_4 scripts\mp\gametypes\br.gsc::unset_heavy_hitter();
        }

        if ( var_8 )
        {
            waitframe();
            var_13 = manualturret_moving_platform_death( var_0 );

            if ( isdefined( var_13 ) )
            {
                if ( isdefined( var_13.playeroffsets ) && isdefined( var_13.currentplayeroffset ) )
                {
                    foreach ( var_4 in var_2 )
                    {
                        var_28 = var_13.playeroffsets[var_13.currentplayeroffset];
                        var_4 setorigin( var_13.origin + var_28, 1, 1 );
                        var_13.currentplayeroffset++;

                        if ( var_13.currentplayeroffset == var_13.playeroffsets.size )
                            var_13.currentplayeroffset = 0;

                        var_4 playershow( 1 );
                        level thread vehicle_damage_updatestate_br( var_4 );
                    }
                }
            }
        }
    }
}

playinfilplayeranims( var_0, var_1 )
{
    var_2 = unset_relic_laststand( var_0 );
    var_3 = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, level.players );

    foreach ( var_5 in var_3 )
    {
        if ( !isdefined( var_5 ) )
            continue;

        var_5 thread [[ level.parachutetakeweaponscb ]]();
        var_5 scripts\mp\gametypes\br.gsc::unset_forced_aitype_armored();
        scripts\mp\utility\game::_id_11EE1( var_5, 1 );
        var_5.plotarmor = 1;
        var_5 unlink();
        var_5 playerlinktopositionent( var_0 );
        var_6 = var_5 unset_relic_laststandmelee( var_0 );
        var_5 playanimscriptsceneevent( "scripted_scene", var_6 );
    }

    wait( var_2 );
    var_3 = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, level.players );

    foreach ( var_5 in var_3 )
    {
        if ( !isdefined( var_5 ) )
            continue;

        var_5 thread playerplayinfilloopanim( var_0 );
    }
}

unset_relic_laststand( var_0 )
{
    if ( propabilitykeysvisible() )
        return getanimlength( %wz_infil_mindia8_solo_player );
    else
        return getanimlength( %sdr_mp_infil_ac130_redux_player1 );
}

unset_relic_laststandmelee( var_0 )
{
    if ( propabilitykeysvisible() )
    {
        var_1 = "";
        var_2 = self hasfemalecustomizationmodel();

        if ( var_2 )
            var_1 = "_fem";

        if ( self.play_train_speaker_vo_internal )
        {
            return "wz_infil_mindia8_solo_player" + var_1;
            return;
        }

        return "wz_infil_mindia8_squad_player" + self.infilanimindex + var_1;
        return;
    }
    else
        return "sdr_mp_infil_ac130_redux_player" + self.infilanimindex;
}

unset_relic_lfo( var_0 )
{
    if ( propabilitykeysvisible() )
    {
        if ( self.play_train_speaker_vo_internal )
            return "wz_infil_mindia8_loop_pl01";
        else
            return "wz_infil_mindia8_loop_pl0" + self.infilanimindex;
    }
    else
        return "sdr_mp_infil_ac130_loop_pl0" + self.infilanimindex;
}

unset_relic_mythic( var_0 )
{
    if ( propabilitykeysvisible() )
    {
        if ( self.play_train_speaker_vo_internal )
            return var_0.playerpositionents["child_solo"];
        else
            return var_0.playerpositionents["child_squad_" + self.infilanimindex];
    }
    else
        return var_0.playerpositionents["j_prop_" + self.infilanimindex];
}

unset_relic_no_ammo_mun( var_0 )
{
    if ( propabilitykeysvisible() )
    {
        if ( self.play_train_speaker_vo_internal )
            return "j_prop_1";
        else
            return "j_prop_" + self.infilanimindex;
    }
    else
        return "j_prop_" + self.infilanimindex;
}

playerlinktopositionent( var_0 )
{
    if ( isai( self ) && !istrue( self.hasspawned ) )
        return;

    if ( !isdefined( self.infilanimindex ) )
        self.infilanimindex = 1;

    var_1 = unset_relic_mythic( var_0 );
    self playerlinkto( var_1, "tag_player" );
}

playerplayinfilloopanim( var_0 )
{
    if ( !isdefined( self.infilanimindex ) )
        self.infilanimindex = 1;

    var_1 = unset_relic_lfo( var_0 );
    self playanimscriptsceneevent( "scripted_scene", var_1 );
    thread watchinfiljumpanim( var_0 );
}

x1ops7( var_0 )
{
    var_0 endon( "stopScene" );
    var_0.staticc130 waittillmatch( "plane", "gored" );
    var_1 = getentitylessscriptablearrayinradius( "infil_blinking_light", "script_noteworthy" );

    foreach ( var_3 in var_1 )
        var_3 setscriptablepartstate( "light_blinking_slow", "light_on", 1 );
}

move_spawnpoints_to_ac130( var_0 )
{
    var_0 endon( "stopScene" );
    var_0.staticc130 waittillmatch( "plane", "gogreen" );
    var_1 = getentitylessscriptablearrayinradius( "infil_blinking_light", "script_noteworthy" );

    foreach ( var_3 in var_1 )
        var_3 setscriptablepartstate( "light_blinking_slow", "light_jump", 1 );
}

startingteamcount( var_0 )
{
    var_1 = getentitylessscriptablearrayinradius( "infil_blinking_light", "script_noteworthy" );

    foreach ( var_3 in var_1 )
        var_3 setscriptablepartstate( "light_blinking_slow", "light_off_hold", 1 );
}

vehicle_compass_getleveldata( var_0, var_1 )
{
    var_0 endon( "stopScene" );
    var_0.staticc130 scripts\engine\utility::waittill_match_or_timeout( "plane", "opendoor", 30.0 );
    var_2 = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, level.players );

    foreach ( var_4 in var_2 )
    {
        if ( !isdefined( var_4 ) || isbot( var_4 ) )
            continue;

        var_4 scripts\mp\utility\player::_id_11F9E( "100", 1 );
    }

    var_0.aidoorchief scripts\mp\utility\player::_id_11F9E( "100" );
}

endgame_stars( var_0, var_1 )
{
    var_2 = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, level.players );

    foreach ( var_4 in var_2 )
    {
        if ( !isdefined( var_4 ) )
            continue;

        var_4.manualoverridewindmaterial = undefined;
    }

    var_0.aidoorchief scripts\mp\utility\player::_id_11F9E( "0" );
}

vehicle_compass_hide( var_0, var_1 )
{
    var_0 endon( "stopScene" );
    var_2 = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, level.players );

    foreach ( var_4 in var_2 )
    {
        if ( !isdefined( var_4 ) || isbot( var_4 ) )
            continue;

        var_4 scripts\mp\utility\player::_id_11F9E( "80", 1 );
    }
}

endgametutorial_func( var_0, var_1 )
{
    var_2 = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, level.players );

    foreach ( var_4 in var_2 )
    {
        if ( !isdefined( var_4 ) )
            continue;

        var_4.manualoverridewindmaterial = undefined;
    }
}

ending_fade_out( var_0 )
{
    _id_12E00( 7.7 );
    var_1 = scripts\engine\utility::ter_op( isdefined( var_0 ), var_0, level.players );

    foreach ( var_3 in var_1 )
    {
        if ( !isdefined( var_3 ) )
            continue;

        var_3 clearsoundsubmix( "mp_br_infil_ac130", 30.0 );
    }
}

ending_mortars( var_0 )
{
    _id_12E00( 0.65 );
    var_1 = scripts\engine\utility::ter_op( isdefined( var_0 ), var_0, level.players );

    foreach ( var_3 in var_1 )
    {
        if ( !isdefined( var_3 ) )
            continue;

        var_3 clearsoundsubmix( "mp_br_infil_anim", 3.0 );
    }
}

ending_fade_in( var_0 )
{
    _id_12E00( 0.5 );
    var_1 = scripts\engine\utility::ter_op( isdefined( var_0 ), var_0, level.players );

    foreach ( var_3 in var_1 )
    {
        if ( !isdefined( var_3 ) )
            continue;

        var_3 clearsoundsubmix( "fade_to_black_all_except_music_scripted5_and_amb", 1.0 );
    }
}

_id_11EF8( var_0 )
{
    _id_12E00( 2.0 );
    var_1 = scripts\engine\utility::ter_op( isdefined( var_0 ), var_0, level.players );

    foreach ( var_3 in var_1 )
    {
        if ( !isdefined( var_3 ) )
            continue;

        var_3 clearsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 0.5 );
        var_3 setsoundsubmix( "fade_to_black_all_except_music_scripted5_and_amb", 2.0 );
    }
}

_id_11A48( var_0 )
{
    var_1 = scripts\engine\utility::ter_op( isdefined( var_0 ), var_0, level.players );

    foreach ( var_3 in var_1 )
    {
        if ( !isdefined( var_3 ) )
            continue;

        var_4 = var_3 getlinkedchildren();

        if ( isdefined( var_4 ) && var_4.size )
        {
            var_5 = var_4.size;

            if ( var_5 > 0 )
            {
                var_6 = "Infil Player (" + var_3.name + ") with (" + var_5 + ") linked ents: ";

                foreach ( var_8 in var_4 )
                {
                    if ( isdefined( var_8.equipmentref ) )
                    {
                        var_6 = var_6 + ( "equip:" + var_8.equipmentref + "," );
                        continue;
                    }

                    if ( isdefined( var_8.weapon_name ) )
                    {
                        var_6 = var_6 + ( "weapon:" + var_8.weapon_name + "," );
                        continue;
                    }

                    if ( isdefined( var_8.model ) )
                    {
                        var_6 = var_6 + ( "model:" + var_8.model + "," );
                        continue;
                    }

                    var_6 = var_6 + "?,";
                }

                scripts\mp\utility\script::getdropbagspawntypeenum( var_6 );
            }
        }
    }
}

vehicle_damage_registerinstance( var_0, var_1 )
{
    _id_11A48( var_1 );

    if ( propabilitykeysvisible() )
        trophy_deployanimation( var_0, var_1 );
    else
        playac130infilanim( var_0, var_1 );
}

trophy_deployanimation( var_0, var_1 )
{
    thread _id_11EF8( var_1 );
    tromeo_death_watcher( var_0, var_1 );
    _id_1285E( var_0, var_1 );
    hudkothbesttime( var_0, var_1 );
}

playac130infilanim( var_0, var_1 )
{
    thread _id_11EF8( var_1 );
    trigger_waittill_player_enters( var_0, var_1 );
    _id_1285D( var_0, var_1 );
    hudextractmax( var_0, var_1 );
}

enemygunship_spawngunship( var_0 )
{
    var_0 endon( "stopScene" );
    var_0.staticc130 waittillmatch( "plane", "transitionstart" );
    triggerfx( var_0.enemygunship_updatedebugflashlight );
}

_id_11F71( var_0 )
{
    var_0.x = 0;
    var_0.y = 0;
    var_0 setshader( "white", 640, 480 );
    var_0.alignx = "left";
    var_0.aligny = "top";
    var_0.horzalign = "fullscreen";
    var_0.vertalign = "fullscreen";
    var_0.sort = -1;
    var_0.color = ( 0.21, 0.21, 0.17 );
    var_0.alpha = 0;
    var_0 setshowinrealism( 1 );
}

manualturret_endturretuseonexecution()
{
    var_0 = undefined;
    var_1 = undefined;

    if ( propabilitykeysvisible() )
    {
        var_0 = 0.15;
        var_1 = 0.2;
    }
    else
    {
        var_0 = 0.16;
        var_1 = 0.5;
    }

    return [ var_0, var_1 ];
}

initsquadspawnstruct( var_0, var_1 )
{
    level endon( "game_ended" );
    var_2 = manualturret_endturretuseonpush( var_0 );

    if ( !isdefined( var_2 ) )
        return;

    var_3 = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, level.players );
    var_4 = level.players.size == var_3.size;

    if ( var_4 )
    {
        level.play_usb_pickup_gesture = newhudelem();
        _id_11F71( level.play_usb_pickup_gesture );
    }
    else
    {
        foreach ( var_6 in var_3 )
        {
            if ( !isdefined( var_6 ) )
                continue;

            var_6.play_usb_pickup_gesture = newclienthudelem( var_6 );
            _id_11F71( var_6.play_usb_pickup_gesture );
        }
    }

    [var_9, var_10] = manualturret_endturretuseonexecution();
    var_2 waittillmatch( "camera", "fadeinstart" );

    if ( var_4 )
    {
        level.play_usb_pickup_gesture fadeovertime( var_9 );
        level.play_usb_pickup_gesture.alpha = 1;
    }
    else
    {
        foreach ( var_6 in var_3 )
        {
            if ( !isdefined( var_6 ) )
                continue;

            var_6.play_usb_pickup_gesture fadeovertime( var_9 );
            var_6.play_usb_pickup_gesture.alpha = 1;
        }
    }

    var_2 waittillmatch( "camera", "fadeoutstart" );

    if ( var_4 )
    {
        level.play_usb_pickup_gesture fadeovertime( var_10 );
        level.play_usb_pickup_gesture.alpha = 0;
    }
    else
    {
        foreach ( var_6 in var_3 )
        {
            if ( !isdefined( var_6 ) )
                continue;

            var_6.play_usb_pickup_gesture fadeovertime( var_10 );
            var_6.play_usb_pickup_gesture.alpha = 0;
        }
    }

    _id_12E00( var_10 + 0.1 );

    if ( var_4 )
    {
        level.play_usb_pickup_gesture destroy();
        level.play_usb_pickup_gesture = undefined;
    }
    else
    {
        foreach ( var_6 in var_3 )
        {
            if ( !isdefined( var_6 ) )
                continue;

            var_6.play_usb_pickup_gesture destroy();
        }
    }
}

play_vo_or_timeout()
{
    if ( istrue( level.checkpoint_trigger ) )
        return;

    if ( getdvarint( "scr_br_c130_intro_s2", 0 ) == 1 )
        return;

    level.checkpoint_trigger = 1;

    if ( propabilitykeysvisible() )
    {
        var_0 = level.matchcountdowntime - 0.05;
        wait( var_0 );
    }
    else
    {
        var_0 = level.matchcountdowntime + 1 + 3.5;
        wait( var_0 );
    }

    waittillframeend;

    foreach ( var_2 in level.players )
    {
        var_3 = game["music"]["br_infil_intro"].size;
        var_4 = randomint( var_3 );
        var_5 = game["music"]["br_infil_intro"][var_4];
        var_2 setplayermusicstate( var_5 );
    }

    wait 24.0;
    level.checkpoint_trigger = undefined;
}

play_thrust_fx( var_0 )
{
    var_1 = getdvarfloat( "LKOLRONRNQ" );
    var_2 = getdvarint( "LTQMSPKRKO" );
    var_3 = getdvarint( "MROOOROPKL" );
    var_4 = getdvarfloat( "NPONLLLSPL" );
    setdvar( "LKOLRONRNQ", 1000.0 );
    setdvar( "LTQMSPKRKO", 6 );
    setdvar( "MROOOROPKL", 8 );
    setdvar( "NPONLLLSPL", 0.25 );
    var_0 scripts\engine\utility::waittill_either( "infil_reset_light_dvars", "stopScene" );
    setdvar( "LKOLRONRNQ", var_1 );
    setdvar( "LTQMSPKRKO", var_2 );
    setdvar( "MROOOROPKL", var_3 );
    setdvar( "NPONLLLSPL", var_4 );
}

play_track_damage_screen_vfx( var_0 )
{
    var_1 = getdvarfloat( "LKOLRONRNQ" );
    var_2 = getdvarint( "LTQMSPKRKO" );
    var_3 = getdvarint( "MROOOROPKL" );
    var_4 = getdvarfloat( "NPONLLLSPL" );
    setdvar( "LKOLRONRNQ", 1000.0 );
    setdvar( "LTQMSPKRKO", 8 );
    setdvar( "MROOOROPKL", 8 );
    setdvar( "NPONLLLSPL", 0.25 );
    var_0 scripts\engine\utility::waittill_either( "infil_reset_light_dvars", "stopScene" );
    setdvar( "LKOLRONRNQ", var_1 );
    setdvar( "LTQMSPKRKO", var_2 );
    setdvar( "MROOOROPKL", var_3 );
    setdvar( "NPONLLLSPL", var_4 );
}

download_progress( var_0 )
{
    if ( isdefined( var_0.drone_out_of_bound_monitor ) )
        var_0.drone_out_of_bound_monitor hide();

    var_0.decide_new_code scripts\engine\utility::waittill_match_or_timeout( "camera", "showdoor", 30.0 );

    if ( isdefined( var_0.drone_out_of_bound_monitor ) )
        var_0.drone_out_of_bound_monitor show();
}

br_allowloadout( var_0, var_1 )
{
    var_2 = undefined;

    if ( var_0.infil_anim_type == "player" )
    {
        if ( !isdefined( var_1 ) )
        {
            foreach ( var_4 in level.teamnamelist )
            {
                var_5 = scripts\mp\gametypes\br_public.gsc::minplunderextractions( var_4 );

                for ( var_6 = 0; var_6 < var_5.size; var_6++ )
                {
                    var_7 = var_5[var_6];
                    var_8 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_4, var_7 );
                    var_9 = var_8.size == 1;
                    var_10 = cur_goal_struct( var_8.size );

                    foreach ( var_14, var_12 in var_8 )
                    {
                        if ( var_12 scripts\mp\gametypes\br_public.gsc::questrewarduav() )
                            var_12.infilanimindex = 1;
                        else
                        {
                            var_13 = scripts\engine\utility::random( var_10 );
                            var_12.infilanimindex = var_13;
                            var_10 = scripts\engine\utility::array_remove( var_10, var_13 );
                        }

                        var_12.play_train_speaker_vo_internal = var_9;
                    }
                }
            }

            x1opstransbink();
            return;
        }

        foreach ( var_12 in var_1 )
        {
            if ( !isdefined( var_12 ) )
                continue;

            var_12 playerhide();
            var_12 showtoplayer( var_12 );
            var_12.infilanimindex = 1;
            var_12.play_train_speaker_vo_internal = 1;
        }

        return;
    }
    else
    {

    }
}

trigger_waittill_player_enters( var_0, var_1 )
{
    var_0 endon( "stopScene" );
    br_allowloadout( var_0, var_1 );
    var_2 = 34;
    var_3 = 5.6;
    var_4 = 50.7;
    var_5 = 2.0;
    var_6 = 4;
    var_0.cameraent scriptmodelplayanim( "sdr_mp_infil_ac130_redux_players_cam", "camera" );

    if ( isdefined( var_0.debugtimedelta ) )
        var_0.debugtimedelta scriptmodelplayanim( "sdr_mp_infil_ac130_redux_players_cam", "camera" );

    if ( isdefined( var_0.movingc130 ) )
        var_0.movingc130 stoploopsound();

    var_7 = scripts\mp\gametypes\br_public.gsc::isusinginfilselection();
    var_0.aidoorchief hide();
    var_8 = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, level.players );

    foreach ( var_10 in var_8 )
    {
        if ( !isdefined( var_10 ) )
            continue;

        if ( !var_7 )
        {
            var_10 setsoundsubmix( "mp_br_infil_anim", 0.0 );
            var_10 setsoundsubmix( "mp_br_infil_music", 0.0 );

            if ( !istrue( level.recently_spawned_vehicle ) && !isdefined( level._id_11AFA ) )
                var_10 setsoundsubmix( "mp_br_infil_ac130", 0.0 );

            var_10 setclienttriggeraudiozone( "mp_donetsk_infil_int", 1.0 );
        }

        var_0.debugthink = "j_prop_" + var_10.infilanimindex;
        var_10 cameraunlink();
        var_10 cameralinkto( var_0.cameraent, var_0.debugthink, 1, 1 );
        var_10 setclientdvar( "QTSPTNLOL", var_2 );
        var_10 enablephysicaldepthoffieldscripting();
        var_10 setphysicaldepthoffield( var_3, var_4, var_5, var_6 );
        var_10 scripts\mp\utility\player::_freezelookcontrols( 1 );
        var_0.aidoorchief showtoplayer( var_10 );
    }

    thread ending_mortars( var_1 );
    thread getlightingvalues();
    playfxontag( level._effect["vfx_br_ac130_clouds"], var_0.staticc130, "tag_body" );
    var_0.staticc130 scriptmodelplayanim( "sdr_mp_infil_ac130_redux_players_ac130", "plane" );

    if ( isdefined( var_0.movingc130 ) )
    {
        var_0.movingc130 scriptmodelplayanim( "sdr_mp_infil_ac130_redux_players_ac130", "plane" );
        var_0.movingc130.innards scriptmodelplayanim( "sdr_mp_infil_ac130_redux_players_ac130", "planeInnards" );
    }

    var_0.playerpositionents["parent"] scriptmodelplayanim( "sdr_mp_infil_ac130_redux_character_link", "prop" );

    if ( var_0.infil_anim_type == "script_model" )
    {
        var_0.playerslot1 scriptmodelplayanim( "sdr_mp_infil_ac130_redux_player1", "p1" );
        var_0.playerslot2 scriptmodelplayanim( "sdr_mp_infil_ac130_redux_player2", "p2" );
        var_0.playerslot3 scriptmodelplayanim( "sdr_mp_infil_ac130_redux_player3", "p3" );
        var_0.playerslot4 scriptmodelplayanim( "sdr_mp_infil_ac130_redux_player4", "p4" );
    }
    else if ( var_0.infil_anim_type == "player" )
        thread playinfilplayeranims( var_0, var_1 );

    var_0.aidoorchief scriptmodelplayanim( "sdr_mp_infil_ac130_redux_doorchief", "doorchief" );
    level thread startingteamcount( var_0 );
    level thread x1ops7( var_0 );
    level thread move_spawnpoints_to_ac130( var_0 );
    level thread vehicle_compass_getleveldata( var_0, var_1 );
    level thread enemygunship_spawngunship( var_0 );
    level thread initsquadspawnstruct( var_0, var_1 );
    level thread play_thrust_fx( var_0 );
    level thread get_unique_id( var_0, var_1 );
    var_0.cameraent scripts\engine\utility::waittill_match_or_timeout( "camera", "transition", 30.0 );
    var_0 notify( "infil_reset_light_dvars" );
    level endgame_stars( var_0, var_1 );
}

tromeo_death_watcher( var_0, var_1, var_2, var_3 )
{
    var_0 endon( "stopScene" );
    br_allowloadout( var_0, var_1 );
    var_4 = 48;
    var_5 = 5.6;
    var_6 = 50.7;
    var_7 = 2.0;
    var_8 = 4;
    var_0.decide_new_code scriptmodelplayanim( "wz_infil_mindia8_solo_cam", "camera" );

    if ( isdefined( var_0.decoy_aicanseeanyplayer ) )
        var_0.decoy_aicanseeanyplayer scriptmodelplayanim( "wz_infil_mindia8_solo_cam", "camera" );

    var_0.decoy_aiseenplayerrecently scriptmodelplayanim( "wz_infil_mindia8_squad_cam", "camera" );

    if ( isdefined( var_0.decoy_canseeplayer ) )
        var_0.decoy_canseeplayer scriptmodelplayanim( "wz_infil_mindia8_squad_cam", "camera" );

    if ( isdefined( var_0.spawn_fake_letter ) )
        var_0.spawn_fake_letter stoploopsound();

    var_0.audio_player_spawn_mud_loop hide();
    var_0.atv hide();
    var_9 = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, level.players );

    foreach ( var_11 in var_9 )
    {
        if ( !isdefined( var_11 ) )
            continue;

        var_11 playlocalsound( "br_heli_infil_part2_lr" );
        var_11 setsoundsubmix( "mp_br_infil_anim", 0.0 );
        var_11 setsoundsubmix( "mp_br_infil_music", 0.0 );

        if ( !istrue( level.recently_spawned_vehicle ) && !isdefined( level._id_11AFA ) )
            var_11 setsoundsubmix( "mp_br_infil_ac130", 0.0 );

        var_11 setclienttriggeraudiozone( "mp_donetsk_infil_int", 1.0 );
        var_12 = scripts\engine\utility::ter_op( var_11.play_train_speaker_vo_internal, var_0.decide_new_code, var_0.decoy_aiseenplayerrecently );
        var_13 = "j_prop_1";
        var_11 cameraunlink();
        var_11 cameralinkto( var_12, var_13, 1, 1 );
        var_11 setclientdvar( "QTSPTNLOL", var_4 );
        var_11 setclientdvar( "LTMOQONPQ", 1 );
        var_11 enablephysicaldepthoffieldscripting();
        var_11 setphysicaldepthoffield( var_5, var_6, var_7, var_8 );
        var_11 scripts\mp\utility\player::_freezelookcontrols( 1 );
        var_0.audio_player_spawn_mud_loop showtoplayer( var_11 );
        var_0.atv showtoplayer( var_11 );
    }

    thread ending_mortars( var_1 );

    if ( isdefined( var_0.spawn_fake_letter ) )
        var_0.spawn_fake_letter setscriptablepartstate( "infil_fx_hero", "on" );

    var_0.playerpositionents["parent_solo"] scriptmodelplayanim( "wz_infil_mindia8_solo_character_link", "prop" );
    var_0.playerpositionents["parent_squad"] scriptmodelplayanim( "wz_infil_mindia8_squad_character_link", "prop" );

    if ( var_0.infil_anim_type == "script_model" )
    {
        if ( istrue( var_2 ) )
        {
            var_0.validate_track show();
            var_0.validatealivecount hide();
            var_0.validateboltent hide();
            var_0.validatedamagerelicswat hide();
            var_0.validateevents hide();
        }
        else
        {
            var_0.validate_track hide();
            var_0.validatealivecount show();
            var_0.validateboltent show();
            var_0.validatedamagerelicswat show();
            var_0.validateevents show();
        }

        var_15 = "";

        if ( istrue( var_3 ) )
            var_15 = "_fem";

        var_0.validate_track scriptmodelplayanim( "wz_infil_mindia8_solo_player" + var_15, "p1" );
        var_0.validatealivecount scriptmodelplayanim( "wz_infil_mindia8_squad_player1" + var_15, "p1" );
        var_0.validateboltent scriptmodelplayanim( "wz_infil_mindia8_squad_player2" + var_15, "p2" );
        var_0.validatedamagerelicswat scriptmodelplayanim( "wz_infil_mindia8_squad_player3" + var_15, "p3" );
        var_0.validateevents scriptmodelplayanim( "wz_infil_mindia8_squad_player4" + var_15, "p4" );
    }
    else if ( var_0.infil_anim_type == "player" )
        thread playinfilplayeranims( var_0, var_1 );

    var_0.audio_player_spawn_mud_loop scriptmodelplayanim( "wz_infil_mindia8_solo_pilot", "aiPilot" );
    var_0.atv scriptmodelplayanim( "wz_infil_mindia8_solo_copilot", "aiCopilot" );
    var_0.bot_dd_think scriptmodelplayanim( "wz_infil_mindia8_armada", "armadaRig" );

    foreach ( var_17 in var_0.bot_dd_start )
    {
        var_18 = getanimlength( %wz_infil_mindia8_loop_veh );
        var_19 = randomfloatrange( 0.5, var_18 - 0.5 );
        var_17 scriptmodelplayanim( "wz_infil_mindia8_loop_veh", "armadaChopper", var_19 );
        var_17 setscriptablepartstate( "infil_fx_armada", "on" );

        if ( isdefined( var_17.innards ) )
            var_17.innards scriptmodelplayanim( "wz_infil_mindia8_loop_veh", "armadaChopperInnards", var_19 );
    }

    level thread vehicle_compass_hide( var_0, var_1 );
    level thread download_progress( var_0 );
    level thread initsquadspawnstruct( var_0, var_1 );
    level thread play_track_damage_screen_vfx( var_0 );
    level thread get_unique_id( var_0, var_1 );
    var_0.decide_new_code scripts\engine\utility::waittill_match_or_timeout( "camera", "transition", 30.0 );
    var_0 notify( "infil_reset_light_dvars" );
    level endgametutorial_func( var_0, var_1 );
}

get_unique_id( var_0, var_1 )
{
    var_2 = manualturret_moving_platform_death( var_0 );

    if ( isdefined( var_2 ) && getdvarint( "scr_br_streamToMovingPlane", 1 ) == 1 )
    {
        var_3 = getdvarint( "scr_br_streamToMovingPlaneDelay", 8 );
        wait( var_3 );
        var_4 = var_2.origin;
        var_5 = getdvarint( "scr_br_streamToMovingPlaneForward", 0 );

        if ( var_5 > 0 )
        {
            var_6 = anglestoforward( var_2.angles );
            var_4 = var_2.origin + var_6 * var_5;
        }

        var_7 = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, level.players );

        foreach ( var_9 in var_7 )
        {
            if ( !isdefined( var_9 ) )
                continue;

            var_9 setpredictedstreamloaddist( 0.0 );
            var_9 scripts\mp\gametypes\br_public.gsc::vandalize_internal( var_4 );
        }
    }
}

_id_12516( var_0, var_1 )
{
    var_2 = manualturret_moving_platform_death( var_0 );

    if ( isdefined( var_2 ) && getdvarint( "scr_br_streamToMovingPlane", 1 ) == 1 )
    {
        var_3 = getdvarint( "scr_br_streamToMovingPlaneEndDelay", 5 );
        wait( var_3 );
        var_4 = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, level.players );

        foreach ( var_6 in var_4 )
        {
            if ( !isdefined( var_6 ) )
                continue;

            var_6 thread scripts\mp\gametypes\br_public.gsc::unload_vehicles_on_weapons_free_thread();
        }
    }
}

_id_12A3E( var_0, var_1 )
{
    wait( var_0 );
    var_2 = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, level.players );

    foreach ( var_4 in var_2 )
    {
        if ( !isdefined( var_4 ) )
            continue;

        var_4 scripts\mp\utility\player::_freezelookcontrols( 0 );
    }
}

_id_1285D( var_0, var_1 )
{
    var_2 = 65;
    var_3 = 14;
    var_4 = 35;
    var_5 = 2.0;
    var_6 = 4;

    if ( isdefined( var_0.debugtimedelta ) )
    {
        var_7 = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, level.players );

        foreach ( var_9 in var_7 )
        {
            if ( !isdefined( var_9 ) )
                continue;

            var_9 setallstreamloaddist( 0.0 );

            if ( !isdefined( var_9.infilanimindex ) )
                var_9.infilanimindex = 1;

            var_0.debugthink = "j_prop_" + var_9.infilanimindex;
            var_9 cameraunlink();
            var_9 cameralinkto( var_0.debugtimedelta, var_0.debugthink, 1, 1 );
            var_9 setclientdvar( "QTSPTNLOL", var_2 );
            var_9 setphysicaldepthoffield( var_3, var_4, var_5, var_6 );
        }

        thread ending_fade_in( var_1 );
    }
    else
    {
        var_7 = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, level.players );

        foreach ( var_9 in var_7 )
        {
            if ( !isdefined( var_9 ) )
                continue;

            var_9 setallstreamloaddist( 0.0 );
        }
    }

    if ( isdefined( var_0.enemygunship_updatedebugflashlight ) )
    {
        if ( isdefined( var_0.movingc130 ) )
            var_0.enemygunship_updatedebugflashlight.origin = var_0.movingc130.origin;
    }

    var_0.staticc130 hide();
    var_0.cameraent unlink();
    var_0.playerpositionents["parent"] unlink();

    if ( isdefined( var_0.movingc130 ) )
    {
        var_0.playerpositionents["parent"] linkto( var_0.movingc130, "", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_0.cameraent linkto( var_0.movingc130, "", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_0.movingc130 notify( "start_moving" );
    }

    setomnvar( "ui_hide_player_icons", 0 );
    var_7 = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, level.players );

    foreach ( var_9 in var_7 )
    {
        if ( !isdefined( var_9 ) )
            continue;

        var_9 setclienttriggeraudiozone( "mp_donetsk_infil_ext", 2.0 );
    }

    thread ending_fade_out( var_1 );

    if ( var_0.infil_anim_type == "script_model" )
    {
        var_0.playerslot1 scriptmodelplayanim( "sdr_mp_infil_ac130_loop_pl01", "p1" );
        var_0.playerslot2 scriptmodelplayanim( "sdr_mp_infil_ac130_loop_pl02", "p2" );
        var_0.playerslot3 scriptmodelplayanim( "sdr_mp_infil_ac130_loop_pl03", "p3" );
        var_0.playerslot4 scriptmodelplayanim( "sdr_mp_infil_ac130_loop_pl04", "p4" );
    }

    var_0.aidoorchief scriptmodelplayanim( "sdr_mp_infil_ac130_loop_doorchief", "doorchief" );
    level thread playac130infilloopanims( var_0 );

    if ( isdefined( var_0.debugtimedelta ) )
        var_0.debugtimedelta waittillmatch( "camera", "end" );

    thread _id_12A3E( 1.2, var_1 );
}

_id_1285E( var_0, var_1 )
{
    var_2 = 65;
    var_3 = 14;
    var_4 = 35;
    var_5 = 2.0;
    var_6 = 4;

    if ( isdefined( var_0.decoy_aicanseeanyplayer ) && isdefined( var_0.decoy_canseeplayer ) )
    {
        var_7 = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, level.players );

        foreach ( var_9 in var_7 )
        {
            if ( !isdefined( var_9 ) )
                continue;

            var_9 setallstreamloaddist( 0.0 );

            if ( !isdefined( var_9.infilanimindex ) )
                var_9.infilanimindex = 1;

            if ( !isdefined( var_9.play_train_speaker_vo_internal ) )
                var_9.play_train_speaker_vo_internal = 1;

            var_10 = scripts\engine\utility::ter_op( var_9.play_train_speaker_vo_internal, var_0.decoy_aicanseeanyplayer, var_0.decoy_canseeplayer );
            var_11 = "j_prop_1";
            var_9 cameraunlink();
            var_9 cameralinkto( var_10, var_11, 1, 1 );
            var_9 setclientdvar( "QTSPTNLOL", var_2 );
            var_9 setclientdvar( "LTMOQONPQ", 0 );
            var_9 setphysicaldepthoffield( var_3, var_4, var_5, var_6 );
        }

        thread ending_fade_in( var_1 );
    }
    else
    {
        var_7 = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, level.players );

        foreach ( var_9 in var_7 )
        {
            if ( !isdefined( var_9 ) )
                continue;

            var_9 setallstreamloaddist( 0.0 );
        }
    }

    var_0.playerpositionents["parent_solo"] unlink();
    var_0.playerpositionents["parent_squad"] unlink();

    if ( isdefined( var_0.spawn_fake_letter ) )
    {
        var_0.playerpositionents["parent_solo"] linkto( var_0.spawn_fake_letter, "", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_0.playerpositionents["parent_squad"] linkto( var_0.spawn_fake_letter, "", ( 0, 0, 0 ), ( 0, 0, 0 ) );
        var_0.spawn_fake_letter notify( "start_moving" );
    }

    var_0.bot_dd_think unlink();

    if ( isdefined( var_0.spawn_fake_letter ) )
        var_0.bot_dd_think linkto( var_0.spawn_fake_letter, "", ( 0, 0, 0 ), ( 0, 0, 0 ) );

    setomnvar( "ui_hide_player_icons", 0 );
    var_7 = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, level.players );

    foreach ( var_9 in var_7 )
    {
        if ( !isdefined( var_9 ) )
            continue;

        var_9 setclienttriggeraudiozone( "mp_donetsk_infil_ext", 2.0 );
    }

    thread ending_fade_out( var_1 );

    if ( var_0.infil_anim_type == "script_model" )
    {
        var_0.validate_track scriptmodelplayanim( "wz_infil_mindia8_loop_pl01", "p1" );
        var_0.validatealivecount scriptmodelplayanim( "wz_infil_mindia8_loop_pl01", "p1" );
        var_0.validateboltent scriptmodelplayanim( "wz_infil_mindia8_loop_pl02", "p2" );
        var_0.validatedamagerelicswat scriptmodelplayanim( "wz_infil_mindia8_loop_pl03", "p3" );
        var_0.validateevents scriptmodelplayanim( "wz_infil_mindia8_loop_pl04", "p4" );
    }

    var_0.audio_player_spawn_mud_loop hide();
    var_0.atv hide();
    level thread uniform_suicide_truck_speed_manager( var_0 );

    if ( isdefined( var_0.decoy_aicanseeanyplayer ) )
        var_0.decoy_aicanseeanyplayer waittillmatch( "camera", "end" );

    thread _id_12A3E( 1.2, var_1 );
}

hudextractmax( var_0, var_1 )
{
    thread rundomplateskybeam();
    stopfxontag( level._effect["vfx_br_ac130_clouds"], var_0.staticc130, "tag_body" );
    var_0.staticc130 stoploopsound();

    if ( isdefined( var_0.movingc130 ) )
        var_0.movingc130 playloopsound( "br_ac130_lp" );

    var_2 = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, level.players );

    foreach ( var_4 in var_2 )
    {
        if ( !isdefined( var_4 ) )
            continue;

        var_4 setallstreamloaddist( 0.0 );
        var_4 cameraunlink();
        var_4 setclientdvar( "QTSPTNLOL", 65 );
        var_4 disablephysicaldepthoffieldscripting();
        var_4 scripts\mp\utility\player::setdof_default();
    }

    level thread _id_12516( var_0, var_1 );
}

hudkothbesttime( var_0, var_1 )
{
    var_0.chopper stoploopsound();

    if ( isdefined( var_0.spawn_fake_letter ) )
        var_0.spawn_fake_letter playloopsound( "br_heli_infil_hero_lp" );

    var_2 = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, level.players );

    foreach ( var_4 in var_2 )
    {
        if ( !isdefined( var_4 ) )
            continue;

        var_4 setallstreamloaddist( 0.0 );
        var_4 cameraunlink();
        var_4 setclientdvar( "QTSPTNLOL", 65 );
        var_4 setclientdvar( "LTMOQONPQ", 0 );
        var_4 disablephysicaldepthoffieldscripting();
        var_4 scripts\mp\utility\player::setdof_default();
    }

    level thread _id_12516( var_0, var_1 );
}

play_usb_anims_single( var_0 )
{
    if ( propabilitykeysvisible() )
        play_usb_anims( var_0 );
    else
        play_trialympic_flames( var_0 );
}

play_trialympic_flames( var_0 )
{
    var_1 = level._effect["vfx_br_ac130_clouds"];
    var_2 = level._effect["vfx_br_ac130_oneshot"];

    if ( scripts\mp\utility\game::getgametype() != "br" )
        var_1 = level._effect["vfx_snatch_ac130_clouds"];

    if ( isdefined( var_1 ) )
        stopfxontag( var_1, var_0, "tag_body" );

    if ( isdefined( var_2 ) )
        stopfxontag( var_2, var_0, "tag_body" );
}

play_usb_anims( var_0 )
{

}

playac130infilloopanims( var_0 )
{
    if ( isdefined( var_0.movingc130 ) )
    {
        var_0.movingc130 scriptmodelplayanim( "sdr_mp_infil_ac130_loop2_plane", "plane" );
        var_0.movingc130.innards scriptmodelplayanim( "sdr_mp_infil_ac130_loop2_plane", "planeInnards" );
    }

    var_0.playerpositionents["parent"] scriptmodelplayanim( "sdr_mp_infil_ac130_loop_genpropx10", "prop" );
}

uniform_suicide_truck_speed_manager( var_0 )
{
    if ( isdefined( var_0.spawn_fake_letter ) )
    {
        var_0.spawn_fake_letter scriptmodelplayanim( "wz_infil_mindia8_loop_veh", "plane" );
        var_0.spawn_fake_letter.innards scriptmodelplayanim( "wz_infil_mindia8_loop_veh", "planeInnards" );
    }

    var_0.playerpositionents["parent_solo"] scriptmodelplayanim( "wz_infil_mindia8_loop_genpropx10", "prop" );
    var_0.playerpositionents["parent_squad"] scriptmodelplayanim( "wz_infil_mindia8_loop_genpropx10", "prop" );
}

playanimwithdooropen( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        preloadcinematicforall( var_1 );
    else
    {
        foreach ( var_3 in var_0 )
        {
            if ( isdefined( var_3 ) )
                var_3 preloadcinematicforplayer( var_1 );
        }
    }
}

playanimation( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = scripts\engine\utility::ter_op( isdefined( var_0 ), var_0, level.players );
    var_6 = level.players.size == var_5.size;

    if ( var_6 )
        setglobalsoundcontext( "lobby_fade", "", 2 );

    foreach ( var_8 in var_5 )
    {
        if ( !isdefined( var_8 ) )
            continue;

        if ( !var_6 )
            var_8 setentitysoundcontext( "lobby_fade", "", 2 );

        if ( !isdefined( var_4 ) )
            var_4 = "";

        switch ( var_4 )
        {
            case "s2":
                var_8 clearsoundsubmix( "mp_br_lobby_fade", 1.5 );
                var_8 clearsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 0.5 );
                break;
            case "infil_dov_part1":
                var_8 playlocalsound( "br_infil_part1_lr" );
                var_8 clearsoundsubmix( "mp_br_lobby_fade", 1.5 );
                var_8 clearsoundsubmix( "fade_to_black_all_except_music", 0.5 );
                var_8 setsoundsubmix( "mp_br_event_dovp1_infil", 0.5 );
                break;
            case "chopper_infil":
                var_8 playlocalsound( "br_heli_infil_part1_lr" );
                var_8 clearsoundsubmix( "mp_br_lobby_fade", 1.5 );
                var_8 clearsoundsubmix( "fade_to_black_all_except_music", 0.5 );
                var_8 setsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 0.5 );
                break;
            default:
                var_8 playlocalsound( "br_infil_part1_lr" );
                var_8 clearsoundsubmix( "mp_br_lobby_fade", 1.5 );
                var_8 clearsoundsubmix( "fade_to_black_all_except_music", 0.5 );
                var_8 setsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 0.5 );
                break;
        }
    }

    if ( istrue( level.recently_spawned_vehicle ) )
        var_1 = "mp_donetsk_c130_intro_x1";
    else if ( isdefined( level.cleanupswaploadoutflags ) && isdefined( level.cleanupswaploadoutflags.name ) && level.cleanupswaploadoutflags.name == "zxp" )
        var_1 = "mp_donetsk_c130_intro_zxp";
    else if ( level.mapname == "mp_kstenod" || level.mapname == "mp_escape2_pm" )
        var_1 = "mp_donetsk_c130_intro_zxp";

    if ( var_6 )
    {
        if ( istrue( level.recently_spawned_vehicle ) || var_2 )
            getweaponindex( var_1 );
        else
            playcinematicforall( var_1 );
    }
    else
    {
        foreach ( var_8 in var_5 )
        {
            if ( !isdefined( var_8 ) )
                continue;

            if ( istrue( level.recently_spawned_vehicle ) || var_2 )
            {
                var_8 playencryptedcinematicforplayer( var_1 );
                continue;
            }

            var_8 playcinematicforplayer( var_1 );
        }
    }

    var_12 = 3;

    if ( getdvarint( "scr_br_c130_intro_s2", 0 ) == 1 )
        var_12 = 9;
    else if ( propabilitykeysvisible() && scripts\mp\utility\game::missions_clearinappropriaterewards() != "x2" )
        var_12 = 11;
    else if ( istrue( var_3 ) )
        var_12 = 10;

    foreach ( var_8 in var_5 )
    {
        if ( !isdefined( var_8 ) )
            continue;

        if ( !istrue( var_8.rewardmodifier ) )
            var_8 setclientomnvar( "ui_br_bink_overlay_state", var_12 );
    }
}

disable_collect_leads( var_0, var_1 )
{
    var_2 = scripts\engine\utility::ter_op( isdefined( var_0 ), var_0, level.players );

    foreach ( var_4 in var_2 )
    {
        if ( !isdefined( var_4 ) )
            continue;

        var_4 setclientomnvar( "ui_br_bink_overlay_state", var_1 );
    }
}

playanim_aidismountturret( var_0, var_1 )
{
    if ( var_0 == "bink_complete" )
    {
        self setclientomnvar( "ui_br_bink_overlay_state", 5 );
        self stopcinematicforplayer();
    }
}

playanim_vehicleturret_terminate( var_0, var_1 )
{
    if ( var_0 == "bink_complete" )
    {
        self setclientomnvar( "ui_br_bink_overlay_state", 0 );
        self stopcinematicforplayer();
    }
}

playapache_dialogue( var_0 )
{
    if ( getdvarint( "scr_br_c130_intro_s2", 0 ) == 1 )
        scripts\mp\utility\lui_game_event_aggregator::registeronluieventcallback( ::playanim_aidismountturret );
    else
        scripts\mp\utility\lui_game_event_aggregator::registeronluieventcallback( ::playanim_vehicleturret_terminate );

    var_1 = undefined;

    if ( propabilitykeysvisible() )
        var_1 = 4.95;
    else
        var_1 = 3.2;

    if ( istrue( level.recently_spawned_vehicle ) )
        var_1 = 4.6;
    else if ( getdvarint( "scr_br_c130_intro_s2", 0 ) == 1 )
        var_1 = 36.0;

    wait( var_1 );
    var_2 = scripts\engine\utility::ter_op( isdefined( var_0 ), var_0, level.players );

    if ( isdefined( level._id_12094 ) )
        level._id_12094 = undefined;

    foreach ( var_4 in var_2 )
    {
        if ( !isdefined( var_4 ) )
            continue;

        var_4 notify( "beginC130" );
    }

    if ( isdefined( level.throwingknives ) )
    {
        foreach ( var_7 in level.throwingknives )
        {
            if ( isdefined( var_7 ) )
                var_7 thread scripts\cp_mp\equipment\throwing_knife::throwing_knife_deletepickup();
        }
    }
}

nostand()
{
    if ( propabilitykeysvisible() )
    {
        self setmodel( "veh8_mil_air_mindia8_open_back_infil" );
        self notsolid();
        self.innards setmodel( "veh8_mil_air_mindia8_interior_vm_infil" );
        self.innards notsolid();
        self.playeroffsets = [ ( 32, 30, -500 ), ( -32, 30, -500 ), ( 0, 30, -500 ), ( 16, 30, -500 ), ( -16, 30, -500 ) ];
    }
    else
    {
        self notsolid();

        if ( isdefined( self.innards ) )
            self.innards notsolid();
    }
}

notcanon( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "death" );
    self hide();

    if ( isdefined( self.innards ) )
        self.innards hide();

    self waittill( "start_moving" );
    self show();

    if ( isdefined( self.innards ) )
        self.innards show();

    self moveto( var_0, var_1 );
    thread scripts\mp\gametypes\br_c130.gsc::killaftertime( var_1, "c130" );

    if ( propabilitykeysvisible() )
        self playloopsound( "br_heli_infil_hero_lp" );
    else
    {
        thread scripts\mp\gametypes\br_c130.gsc::gunship_spawnvfx();
        self playloopsound( "br_ac130_lp" );
    }
}

manualturret_watchdeathongameend( var_0 )
{
    if ( propabilitykeysvisible() )
        return var_0.chopper;
    else
        return var_0.staticc130;
}

manualturret_moving_platform_death( var_0 )
{
    if ( propabilitykeysvisible() )
        return var_0.spawn_fake_letter;
    else
        return var_0.movingc130;
}

manualturret_endturretuseonpush( var_0 )
{
    if ( propabilitykeysvisible() )
        return var_0.decoy_aicanseeanyplayer;
    else
        return var_0.debugtimedelta;
}

manualturret_toggleallowplacementactions( var_0 )
{
    var_1 = 1;

    if ( isdefined( var_0.infilanimindex ) )
        var_1 = var_0.infilanimindex;

    if ( propabilitykeysvisible() )
    {
        if ( istrue( var_0.play_train_speaker_vo_internal ) )
        {
            var_2 = "cam_orbit_br_chopper_solo";
            return var_2;
        }
        else
        {
            var_2 = "cam_orbit_br_chopper_squad_player" + var_1;
            return var_2;
        }
    }
    else
    {
        var_2 = "cam_orbit_br_ac130_player" + var_1;
        return var_2;
    }
}

bufferedammoboxdata( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    var_3 = scripts\engine\utility::ter_op( isdefined( var_2 ), var_2, level.players );

    foreach ( var_5 in var_3 )
    {
        if ( !isdefined( var_5 ) )
            continue;

        var_5 setallstreamloaddist( -1.0 );
    }

    level.infilstruct = spawnstruct();
    level.infilstruct.playersinc130 = 0;

    if ( !isdefined( var_0 ) )
        var_0 = scripts\mp\gametypes\br_c130.gsc::createtestc130path();

    level.infilstruct.c130pathstruct = var_0;
    level.infilstruct.transporttime = scripts\mp\gametypes\br_c130.gsc::spawnc130( level.infilstruct.c130pathstruct, ::notcanon, ::nostand );
    level.infilstruct.firstc130endtime = level.infilstruct.transporttime + gettime();
    var_7 = csm_alg( level.br_ac130, var_1 );
    level.revivingteammate = var_7;

    if ( isdefined( level.vo_ten_remain ) )
        [[ level.vo_ten_remain ]]( var_7 );

    level.play_travel_vo = 1;
    level.allowprematchdamage = 0;
    level.br_ac130 thread gunship_updateplayercount();
    var_8 = manualturret_watchdeathongameend( var_7 );

    if ( getdvarint( "scr_br_c130_intro_s2", 0 ) == 1 )
    {
        _id_12865( var_3, "player", var_8, 1 );
        playanimwithdooropen( var_3, "mp_donetsk_c130_intro_s2" );
        playanimation( var_3, "mp_donetsk_c130_intro_s2", 0, 0, "s2" );
        playapache_dialogue( var_3 );
        var_9 = game["music"]["br_infil_intro"].size;
        var_10 = randomint( var_9 );
        var_3 = scripts\engine\utility::ter_op( isdefined( var_2 ), var_2, level.players );

        foreach ( var_5 in var_3 )
        {
            var_5 setsoundsubmix( "fade_to_black_all_except_music_and_scripted5", 0.5 );
            var_5 setplayermusicstate( game["music"]["br_infil_intro"][var_10] );
        }
    }
    else if ( scripts\mp\utility\game::missions_clearinappropriaterewards() == "reveal" )
    {
        _id_12865( var_3, var_1, var_8, 0 );
        var_13 = undefined;
        var_14 = 0;

        if ( propabilitykeysvisible() )
        {
            var_13 = "mp_donetsk_mindia8_intro";
            var_14 = 1;
        }
        else
            var_13 = "mp_donetsk_c130_intro";

        playanimwithdooropen( var_3, var_13 );
        playanimation( var_3, var_13, 0, var_14, "infil_dov_part1" );
        playapache_dialogue( var_3 );
    }
    else if ( scripts\mp\utility\game::missions_clearinappropriaterewards() == "x2" )
    {
        _id_12865( var_3, var_1, var_8, 0 );

        foreach ( var_5 in var_3 )
        {
            var_5 clearsoundsubmix( "mp_br_lobby_fade", 1.5 );
            var_5 clearsoundsubmix( "fade_to_black_all_except_music", 0.5 );
        }

        scripts\mp\gametypes\br_gametype_x2.gsc::create_thrust_fire();

        foreach ( var_5 in var_3 )
            var_5 playlocalsound( "br_infil_part1_lr" );
    }
    else
    {
        _id_12865( var_3, var_1, var_8, 0 );
        var_13 = undefined;
        var_14 = 0;
        var_19 = undefined;

        if ( propabilitykeysvisible() )
        {
            if ( scripts\cp_mp\utility\game_utility::radialairstrike() )
                var_13 = "mp_escape_mindia8_intro";
            else
                var_13 = "mp_donetsk_mindia8_intro";

            var_14 = 1;
            var_19 = "chopper_infil";
        }
        else
            var_13 = "mp_donetsk_c130_intro";

        playanimwithdooropen( var_3, var_13 );
        playanimation( var_3, var_13, 0, var_14, var_19 );
        playapache_dialogue( var_3 );
    }

    if ( scripts\mp\gametypes\br_public.gsc::processvoqueue() || scripts\mp\gametypes\br_public.gsc::prophaschangesleft() )
    {
        var_3 = scripts\engine\utility::ter_op( isdefined( var_2 ), var_2, level.players );

        foreach ( var_5 in var_3 )
        {
            if ( isdefined( var_5 ) && isplayer( var_5 ) )
                var_5 notify( "play_intro" );
        }
    }

    if ( getdvarint( "scr_br_c130_intro_s2", 0 ) == 1 )
        disable_collect_leads( var_3, 0 );

    [var_23, var_24] = manualturret_domonitoredweaponswitch();
    level thread infilallfadetoblack( 0.0, var_23, var_24, undefined, var_2 );
    vehicle_damage_registerinstance( var_7, var_2 );
    var_3 = scripts\engine\utility::ter_op( isdefined( var_2 ), var_2, level.players );
    _id_12863( var_3, var_1 );
    level.play_travel_vo = 0;
    level.infilstruct.infil_anim_type = var_1;

    if ( isdefined( level.init_cp_execution ) )
        level thread scripts\mp\gametypes\br_alt_mode_escape.gsc::init_escape_silo( var_2 );
    else
    {
        thread scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "onInfilSequenceEnd", var_2 );

        if ( !scripts\mp\gametypes\br_gametypes.gsc::propsetclonesleft( "match_start_VO" ) )
            scripts\mp\gametypes\br_public.gsc::brleaderdialog( "match_start", 0, var_2 );
    }

    var_25 = scripts\mp\gametypes\br_public.gsc::rear_minigun_model() || scripts\mp\gametypes\br_public.gsc::prophasclonesleft();

    if ( !var_25 )
    {
        var_26 = getdvar( "scr_br_lateSpawnFallback" ) == "";
        var_3 = scripts\engine\utility::ter_op( isdefined( var_2 ), var_2, level.players );

        foreach ( var_5 in var_3 )
        {
            if ( !isdefined( var_5 ) )
                continue;

            if ( !istrue( var_5.checkredmassacre ) && var_26 )
                continue;

            var_5 thread playerjoininfil();

            if ( var_5 isplayerheadless() )
                zombiesignorevehicleexplosions( var_5 );
        }

        if ( scripts\mp\gametypes\br_gametypes.gsc::progress_obj( "addToC130Infil" ) )
            level.br_ac130 scripts\mp\gametypes\br_gametypes.gsc::_id_11BE4( "addToC130Infil" );
    }

    if ( isdefined( level.off_min ) )
        level thread offerloc();
}

_id_11F70( var_0 )
{
    var_0.x = 0;
    var_0.y = 0;
    var_0 setshader( "black", 640, 480 );
    var_0.alignx = "left";
    var_0.aligny = "top";
    var_0.horzalign = "fullscreen";
    var_0.vertalign = "fullscreen";
    var_0.sort = -1;
    var_0 setshowinrealism( 1 );
}

infilallfadetoblack( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( var_5 ) )
        var_5 = 0;

    var_6 = scripts\engine\utility::ter_op( isdefined( var_4 ), var_4, level.players );
    var_7 = level.players.size == var_6.size;

    if ( var_7 && !isdefined( level.infilblackoverlay ) )
    {
        level.infilblackoverlay = newhudelem();
        _id_11F70( level.infilblackoverlay );
    }
    else if ( !var_7 )
    {
        foreach ( var_9 in var_6 )
        {
            if ( !isdefined( var_9 ) )
                continue;

            var_9.infilblackoverlay = newclienthudelem( var_9 );
            _id_11F70( var_9.infilblackoverlay );
        }
    }

    if ( isdefined( var_0 ) && var_0 > 0 )
    {
        var_6 = scripts\engine\utility::ter_op( isdefined( var_4 ), var_4, level.players );

        foreach ( var_9 in var_6 )
        {
            if ( !isdefined( var_9 ) )
                continue;

            if ( !var_5 )
            {
                var_9 setsoundsubmix( "iw8_br_infil_fadeout", 0.0 );

                if ( !istrue( level.recently_spawned_vehicle ) && !isdefined( level._id_11AFA ) )
                    var_9 setsoundsubmix( "mp_br_infil_music", 0.0 );
            }

            if ( !var_7 )
            {
                var_9.infilblackoverlay.alpha = 0;
                var_9.infilblackoverlay fadeovertime( var_0 );
                var_9.infilblackoverlay.alpha = 1;
            }
        }

        if ( var_7 )
        {
            level.infilblackoverlay.alpha = 0;
            level.infilblackoverlay fadeovertime( var_2 );
            level.infilblackoverlay.alpha = 1;
        }

        wait( var_0 );
    }

    if ( !scripts\mp\gametypes\br_public.gsc::isusinginfilselection() )
    {
        if ( var_7 )
            level.infilblackoverlay.alpha = 1;

        var_6 = scripts\engine\utility::ter_op( isdefined( var_4 ), var_4, level.players );

        foreach ( var_9 in var_6 )
        {
            if ( !isdefined( var_9 ) )
                continue;

            if ( !var_5 )
            {
                var_9 setsoundsubmix( "mp_br_infil_anim", 0.0 );
                var_9 setsoundsubmix( "mp_br_infil_ac130", 0.0 );
            }

            if ( !var_7 )
                var_9.infilblackoverlay.alpha = 1;
        }
    }

    if ( isdefined( var_3 ) )
        level waittill( var_3 );

    if ( isdefined( var_1 ) && var_1 > 0 )
        wait( var_1 );

    if ( isdefined( var_2 ) && var_2 > 0 )
    {
        if ( var_7 )
        {
            level.infilblackoverlay.alpha = 1;
            level.infilblackoverlay fadeovertime( var_2 );
            level.infilblackoverlay.alpha = 0;
        }

        var_6 = scripts\engine\utility::ter_op( isdefined( var_4 ), var_4, level.players );

        foreach ( var_9 in var_6 )
        {
            if ( !isdefined( var_9 ) )
                continue;

            if ( !var_5 )
            {
                if ( !scripts\mp\gametypes\br_public.gsc::isusinginfilselection() )
                    var_9 setclienttriggeraudiozone( "mp_donetsk_infil_int", var_2 );

                var_9 clearsoundsubmix( "iw8_br_infil_fadeout", 2 );
                var_9 clearsoundsubmix( "deaths_door_mp" );
            }

            if ( !var_7 )
            {
                var_9.infilblackoverlay.alpha = 1;
                var_9.infilblackoverlay fadeovertime( var_2 );
                var_9.infilblackoverlay.alpha = 0;
            }
        }

        wait( var_2 );
    }
    else if ( !var_5 )
    {
        var_6 = scripts\engine\utility::ter_op( isdefined( var_4 ), var_4, level.players );

        foreach ( var_9 in var_6 )
        {
            if ( !isdefined( var_9 ) )
                continue;

            if ( !scripts\mp\gametypes\br_public.gsc::isusinginfilselection() )
                var_9 setclienttriggeraudiozone( "mp_donetsk_infil_int" );

            var_9 clearsoundsubmix( "iw8_br_infil_fadeout", 2 );
            var_9 clearsoundsubmix( "deaths_door_mp" );
        }
    }

    if ( var_7 )
        level.infilblackoverlay.alpha = 0;
    else
    {
        var_6 = scripts\engine\utility::ter_op( isdefined( var_4 ), var_4, level.players );

        foreach ( var_9 in var_6 )
        {
            if ( !isdefined( var_9 ) )
                continue;

            if ( isdefined( var_9.infilblackoverlay ) )
                var_9.infilblackoverlay destroy();

            var_9.infilblackoverlay = undefined;
        }
    }
}

x1opstransbink( var_0 )
{
    var_1 = 0;
    var_2 = isdefined( var_0 ) && var_0.size != level.players.size;

    foreach ( var_4 in level.teamnamelist )
    {
        var_5 = scripts\mp\gametypes\br_public.gsc::minplunderextractions( var_4 );

        for ( var_6 = 0; var_6 < var_5.size; var_6++ )
        {
            var_7 = var_5[var_6];
            var_8 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_4, var_7 );

            foreach ( var_14, var_10 in var_8 )
            {
                if ( var_2 && !scripts\engine\utility::array_contains( var_0, var_10 ) )
                    continue;

                var_10 playerhide();

                if ( !var_1 )
                {
                    foreach ( var_12 in var_8 )
                        var_10 showtoplayer( var_12 );
                }
            }
        }
    }
}

_id_12865( var_0, var_1, var_2, var_3 )
{
    foreach ( var_5 in var_0 )
    {
        if ( !isdefined( var_5 ) )
            continue;

        scripts\mp\utility\game::_id_11EE1( var_5, 1 );
        var_5 scripts\mp\utility\player::hidehudenable();
        var_5 scripts\mp\class::calldropbag();
    }

    scripts\mp\deathicons::_id_11A16();
    setomnvar( "ui_hide_player_icons", 1 );
    thread infilallfadetoblack( 1, 3.5, 1, "prematch_respawn_finished", var_0, var_3 );

    foreach ( var_5 in var_0 )
    {
        if ( !isdefined( var_5 ) )
            continue;

        var_5 predictstreampos( var_2.origin, 1 );
    }

    level.playanim_mountturret = 1;
    _id_12E00( 1 );
    waitframe();
    scripts\mp\gametypes\br_vehicles.gsc::emptyallvehicles();
    setomnvar( "ui_in_infil", 1 );
    scripts\mp\flags::gameflagset( "prematch_fade_done" );

    foreach ( var_5 in var_0 )
    {
        if ( !isdefined( var_5 ) )
            continue;

        var_5 playerhide();
    }

    _id_12DFE( var_0, var_2.origin, var_2 );
    level notify( "prematch_respawn_finished" );
    _id_12E00( 3.5 );

    foreach ( var_5 in var_0 )
    {
        if ( !isdefined( var_5 ) )
            continue;

        var_5 clearpredictedstreampos();
        var_5 hvt_death_player_vo();
        var_5.checkredmassacre = 1;
    }

    if ( var_1 == "script_model" )
    {
        foreach ( var_5 in var_0 )
        {
            if ( !isdefined( var_5 ) )
                continue;

            var_5 playerhide();
        }
    }
    else
        x1opstransbink( var_0 );
}

_id_12863( var_0, var_1 )
{
    var_2 = var_1 == "script_model";

    foreach ( var_4 in var_0 )
    {
        if ( !isdefined( var_4 ) )
            continue;

        var_4 scripts\mp\class::_id_12A3B();
        var_4.instantclassswapallowed = 1;

        if ( scripts\mp\gametypes\br.gsc::get_int_or_0( var_4.hidehudenabled ) > 0 )
            var_4 scripts\mp\utility\player::hidehuddisable();

        var_4 visionsetfadetoblackforplayer( "", 1.0 );

        if ( var_2 )
            var_4 playershow();
    }

    setomnvar( "ui_in_infil", -1 );
    level.playanim_mountturret = undefined;
}

gunship_updateplayercount()
{
    level endon( "game_ended" );
    self notify( "ac130_player_count" );
    self endon( "ac130_player_count" );

    for (;;)
    {
        setomnvar( "ui_br_players_left_in_plane", level.infilstruct.playersinc130 );

        if ( !isdefined( self ) )
            break;

        wait 0.5;
    }
}

playerjoininfil()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self notify( "joining_Infil" );
    var_0 = self;
    var_0.br_infilstarted = 1;
    var_0.health = var_0.maxhealth;
    var_0 scripts\mp\gametypes\br_c130.gsc::spawnplayertoc130();
    var_0 playersetupcontrolsforinfil();
    var_0 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "isInInfilPlane", 1 );
    level.infilstruct.playersinc130++;
    var_0 scripts\mp\gametypes\br_public.gsc::usb_tape_animation_test();
    var_0 thread unlink_on_ai_death();
}

unlink_on_ai_death()
{
    level endon( "game_ended" );
    self endon( "death" );
    self endon( "cancel_c130" );
    self endon( "br_jump" );
    self waittill( "disconnect" );

    if ( isdefined( level.infilstruct ) && isdefined( level.infilstruct.playersinc130 ) && level.infilstruct.playersinc130 > 0 )
        level.infilstruct.playersinc130--;
}

playersetupcontrolsforinfil( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 0;

    self setclientomnvar( "ui_br_infil_started", 1 );
    self setclientomnvar( "ui_br_infiled", 0 );

    if ( !var_0 )
        self notifyonplayercommand( "halo_jump_c130", "+gostand" );
    else
        self notifyonplayercommand( "halo_jump_solo_c130", "+gostand" );

    self notifyonplayercommand( "br_pass_squad_leader", "+usereload" );
    self notifyonplayercommand( "br_pass_squad_leader", "+activate" );
}

getlightingvalues()
{

}

rundrawprematchareas()
{

}

rundomplateskybeam()
{

}

initinfillocationselectionhandlers()
{
    registerinfillocationselectionhandler( "exclusion", ::handleexclusionils, ::spawnselectionbegin, ::spawnselectionend );
}

handleinfillocationselection( var_0 )
{
    var_1 = self;
    var_2 = level.infilselectionmethod;
    var_3 = getinfillocationselectionfunc( var_2 );

    if ( !isdefined( var_3 ) )
        return;

    return var_1 [[ var_3 ]]( var_0.location, var_0.angles );
}

registerinfillocationselectionhandler( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( level.br_infillocationselectionhandlers ) )
        level.br_infillocationselectionhandlers = [];

    var_4 = spawnstruct();
    var_4.locationselectionfunc = var_1;
    var_4.spawnselectstartfunc = var_2;
    var_4.spawnselectendfunc = var_3;
    level.br_infillocationselectionhandlers[var_0] = var_4;
}

getinfillocationselectionfunc( var_0 )
{
    if ( !isdefined( level.br_infillocationselectionhandlers ) )
        return undefined;

    var_1 = level.br_infillocationselectionhandlers[var_0];

    if ( !isdefined( var_1 ) )
        return undefined;

    return var_1.locationselectionfunc;
}

handleexclusionils( var_0, var_1 )
{
    var_2 = self;

    if ( !istrue( level.delay_play_depart_vo ) && !istrue( var_2.issquadleader ) )
        return 0;

    [var_4, var_5] = getspawnselectionpoi( var_0 );
    var_6 = getspawnselectionexclusionsize( var_0, var_4, var_5 );

    if ( isdefined( var_2.team ) )
    {
        var_7 = scripts\mp\utility\player::getteamarray( var_2.team );
        var_6 = var_6 * var_7.size;
    }

    if ( istrue( level.delay_play_depart_vo ) && !istrue( var_2.issquadleader ) )
        return var_2 nuke_vault_oilfire_vision( var_0, var_1, var_6 );

    foreach ( var_9 in level.br_spawns )
    {
        var_10 = var_2 mintokensdropondeath();

        if ( isdefined( var_10 ) && var_9 == var_10 )
        {
            if ( level.delay_play_depart_vo )
            {
                if ( var_2 doarmsracelocationnags( var_9, var_6, var_0, 1 ) )
                    return 1;
            }

            continue;
        }
        else if ( level.delay_play_depart_vo )
        {
            if ( !var_2 doarmsracelocationnags( var_9, var_6, var_0, 0 ) )
                return 0;
        }

        if ( pow( var_6 + var_9.spawnexclusion2ddist, 2 ) > distance2dsquared( var_9.locationorigin, var_0 ) )
        {
            var_2 thread sendplayerstatusmessage( 50, 2.0 );
            var_2 playlocalsound( "br_map_selection_error" );
            return 0;
        }
    }

    return var_2 registerspawnlocation( var_0, var_1, var_6 );
}

nuke_vault_oilfire_vision( var_0, var_1, var_2 )
{
    var_3 = self;

    foreach ( var_5 in level.br_spawns )
    {
        var_6 = mintokensdropondeath();
        var_7 = 0;

        if ( isdefined( var_6 ) && var_5 == var_6 )
            var_7 = 1;

        if ( pow( var_2 + var_5.spawnexclusion2ddist, 2 ) > distance2dsquared( var_5.locationorigin, var_0 ) )
        {
            if ( var_7 )
            {
                var_8 = var_3 minigun_should_keep_firing();
                getcrateusetime( var_8 );
                var_3 thread sendplayerstatusmessage( 56, 2.0 );
                var_3 playlocalsound( "br_map_selection_placed" );
                return 1;
            }

            var_3 thread sendplayerstatusmessage( 50, 2.0 );
            var_3 playlocalsound( "br_map_selection_error" );
            return 0;
        }

        if ( var_7 && var_3 doarmsracelocationnags( var_5, var_2, var_0, var_7 ) )
            return 1;
    }

    return var_3 registerspawnlocation( var_0, var_1, var_2 );
}

doarmsracelocationnags( var_0, var_1, var_2, var_3 )
{
    var_4 = self;

    foreach ( var_6 in var_0._id_1216A )
    {
        if ( !isdefined( var_6 ) )
            continue;

        var_7 = var_4 minigun_should_keep_firing();

        if ( isdefined( var_7 ) && var_6 == var_7 )
            continue;

        if ( pow( var_1 + var_6.spawnexclusion2ddist, 2 ) > distance2dsquared( var_6.locationorigin, var_2 ) )
        {
            if ( !var_3 )
            {
                var_4 thread sendplayerstatusmessage( 50, 2.0 );
                var_4 playlocalsound( "br_map_selection_error" );
                return 0;
            }

            var_2 = var_6.locationorigin;
            var_8 = var_6.locationangles;
            var_1 = var_6.spawnexclusion2ddist;

            if ( isdefined( var_7 ) && isdefined( var_7.circleent ) )
                var_7.circleent delete();

            var_9 = var_4 registerspawnlocation( var_2, var_8, var_1 );

            if ( !var_9 )
                return var_9;

            if ( !istrue( var_4.issquadleader ) )
                var_4 thread sendplayerstatusmessage( 55, 2.0 );
            else
                var_4 thread sendplayerstatusmessage( 54, 2.0 );

            return var_9;
        }
    }

    if ( !var_3 )
        return 1;

    return 0;
}

sendplayerstatusmessage( var_0, var_1 )
{
    var_2 = self;
    var_2 notify( "sendPlayerStatusMessage" );
    var_2 endon( "sendPlayerStatusMessage" );
    var_2 scripts\mp\utility\lower_message::setlowermessageomnvar( var_0 );

    if ( isdefined( var_1 ) )
    {
        wait( var_1 );
        var_2 scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
    }
}

registerspawnlocation( var_0, var_1, var_2 )
{
    var_3 = self;
    var_4 = scripts\engine\trace::create_default_contents( 1 );

    if ( istrue( var_3.issquadleader ) )
    {
        var_5 = var_3 mintokensdropondeath();

        if ( !isdefined( var_5 ) )
            var_5 = var_3 playerzombieprestream();
    }
    else if ( istrue( level.delay_play_depart_vo ) )
    {
        var_5 = var_3 minigun_should_keep_firing();

        if ( !isdefined( var_5 ) )
            var_5 = var_3 playerzombiejumpstop();
    }
    else
        return 0;

    var_6 = getdvarfloat( "scr_infil_plus_spawn_height", 5500.0 );
    var_7 = ( 0, 0, var_6 );
    var_8 = ( 0, 0, 10000 );
    var_9 = var_0 + var_8;
    var_10 = var_0 - var_8;
    var_11 = scripts\engine\trace::ray_trace( var_9, var_10, undefined, var_4 );
    var_12 = var_0;

    if ( var_11["hittype"] != "hittype_none" )
        var_12 = var_11["position"];

    var_5.locationorigin = var_12 + var_7;

    if ( istrue( var_3.issquadleader ) )
        var_5.groundorigin = var_12;

    var_5.locationangles = var_1;
    var_5.spawnexclusion2ddist = var_2;
    [var_14, var_15, var_16] = var_5.locationorigin;

    if ( isdefined( var_5.circleent ) )
        var_5.circleent.origin = ( var_14, var_15, var_2 );
    else
    {
        var_5.circleent = getmaxobjectivecount( var_14, var_15, var_2, var_3 );

        if ( istrue( var_3.issquadleader ) )
            var_5.circleent setmapcircleiconindex( 1 );
    }

    var_17 = scripts\mp\utility\teams::getfriendlyplayers( var_3.team, 0 );

    foreach ( var_19 in var_17 )
    {
        if ( !istrue( var_3.issquadleader ) )
        {
            var_19 thread sendplayerstatusmessage( 64, 2.0 );
            var_19 playlocalsound( "br_map_selection_placed" );
            continue;
        }

        var_19 thread sendplayerstatusmessage( 57, 2.0 );
        var_19 playlocalsound( "br_map_selection_placed" );
    }

    return 1;
}

assignrandomspawnselection()
{
    var_0 = self;

    if ( !isdefined( var_0.issquadleader ) )
    {
        var_0.issquadleader = 1;
        var_1 = scripts\mp\utility\teams::getfriendlyplayers( var_0.team, 0 );

        foreach ( var_3 in var_1 )
        {
            if ( var_3 != var_0 )
                var_3.issquadleader = 0;
        }
    }

    var_5 = ( 0, 0, 0 );

    for ( var_6 = 0; var_6 < 3; var_6++ )
    {
        var_7 = randomfloatrange( level.mapsafecorners[1][0], level.mapsafecorners[0][0] );
        var_8 = randomfloatrange( level.mapsafecorners[1][1], level.mapsafecorners[0][1] );
        var_5 = ( var_7, var_8, 0 );
        var_9 = var_0 handleexclusionils( var_5 );

        if ( var_9 )
            return 1;
    }

    var_0 registerspawnlocation( var_5, undefined, getdvarint( "scr_map_selection_dense_min", 2000 ) );
    return 0;
}

notifyafkofselection( var_0 )
{
    var_1 = self;
    var_2 = scripts\mp\utility\teams::getfriendlyplayers( var_1.team, 0 );
    var_3 = "";

    if ( var_0 )
        var_3 = "Safe Spawn Selection Assigned";
    else
        var_3 = "Unsafe Spawn Selection Assigned";

    foreach ( var_5 in var_2 )
        var_5 iprintlnbold( var_3 );
}

_id_126BB()
{
    var_0 = self;
    var_0 playershow( 1 );
    var_0 unlink( 1 );
    var_1 = var_0 mintokensdropondeath();

    if ( isdefined( var_1.locationorigin ) )
    {
        var_2 = var_1.locationorigin;
        var_3 = var_0 minigun_should_keep_firing();

        if ( isdefined( var_3 ) )
            var_2 = var_3.locationorigin;

        var_4 = 512;
        var_5 = ( 0, 60 * var_0.pers["squadMemberIndex"] % 360, 0 );
        var_6 = anglestoforward( var_5 ) * var_4;
        var_2 = var_2 + var_6 + ( 0, 0, randomfloatrange( 0, 512 ) );

        if ( getdvarint( "scr_br_fallbackinfilspawn", 0 ) )
        {
            var_0.forcespawnorigin = var_2;
            var_0.forcespawnangles = undefined;
            var_0.alreadyaddedtoalivecount = 1;
            var_0 scripts\mp\playerlogic::spawnplayer( 0, 0 );
        }
        else
        {
            var_0 setorigin( var_2, 1 );
            var_0 setplayerangles( var_5 );
        }
    }

    var_0 stopanimscriptsceneevent();
    var_0 clearpredictedstreampos();
    var_0 playershow( 1 );
    var_0.br_infilstarted = 1;
    var_0 setclientomnvar( "ui_br_infil_started", 1 );
    var_0 setclientomnvar( "ui_br_infiled", 1 );
    var_0 scripts\cp_mp\parachute::startfreefall( 0, 0 );
    var_0 scripts\mp\gametypes\br_weapons.gsc::br_ammo_player_clear();
    scripts\mp\gametypes\br_weapons.gsc::br_ammo_update_weapons( var_0 );
}

postspawnselectionstream()
{
    var_0 = self;
    var_1 = var_0 minigun_should_keep_firing();
    var_2 = var_0 mintokensdropondeath();

    if ( isdefined( var_1 ) )
        var_0 predictstreampos( var_1.locationorigin, 1 );
    else if ( isdefined( var_2 ) )
        var_0 predictstreampos( var_2.locationorigin, 1 );
}

spawnselectionbegin()
{
    setomnvar( "ui_match_start_text", "prepare_for_infil" );
    scripts\mp\gamelogic::matchstarttimerperplayer_internal( 10 );
    scripts\mp\flags::gameflaginit( "end_spawn_selection", 0 );
    level notify( "begin_infil_map_selection" );

    if ( !isdefined( level.br_spawns ) )
        level.br_spawns = [];

    foreach ( var_1 in level.players )
    {
        var_1 thread scripts\mp\gametypes\br.gsc::playerselectspawnsequence();
        var_1.isselectingspawn = 1;
    }

    wait 2.0;
}

spawnselectionend()
{
    scripts\mp\flags::gameflagset( "end_spawn_selection" );
    var_0 = getdvarint( "scr_sendAfkToGulag", 0 );

    foreach ( var_2 in level.players )
    {
        var_2 notify( "cancel_location" );
        var_2 thread sendplayerstatusmessage( 51, 2.0 );
        var_3 = var_2 mintokensdropondeath();

        if ( !isdefined( var_3 ) )
        {
            if ( var_0 )
            {
                var_2.brmapselectionafk = 1;
                continue;
            }
            else
            {
                var_4 = var_2 assignrandomspawnselection();
                var_2 notifyafkofselection( var_4 );
            }
        }

        var_2.brmapselectionafk = 0;
        var_2.isselectingspawn = 0;
        var_2 postspawnselectionstream();
    }

    thread _id_11A38();
    wait 4;

    foreach ( var_2 in level.players )
    {
        var_2 thread sendplayerstatusmessage( 0 );
        var_2 scripts\mp\gametypes\br_public.gsc::updatebrscoreboardstat( "jumpMasterState", 0 );
    }

    thread _id_12E2C();
}

_id_12E2C()
{
    level endon( "game_ended" );
    level waittill( "infils_ready" );
}

minigun_should_keep_firing()
{
    var_0 = self;

    if ( !istrue( level.delay_play_depart_vo ) || istrue( var_0.issquadleader ) )
        return undefined;

    var_1 = var_0 mintokensdropondeath();

    if ( isdefined( var_0.pers["squadMemberIndex"] ) && isdefined( var_1 ) )
    {
        if ( isdefined( var_1._id_1216A[var_0.pers["squadMemberIndex"]] ) && isdefined( var_1._id_1216A[var_0.pers["squadMemberIndex"]].locationorigin ) )
            return var_1._id_1216A[var_0.pers["squadMemberIndex"]];
    }

    return undefined;
}

mintokensdropondeath()
{
    var_0 = self;

    if ( isdefined( level.br_spawns ) && isdefined( var_0.team ) && isdefined( level.br_spawns[var_0.team] ) && isdefined( level.br_spawns[var_0.team].locationorigin ) )
        return level.br_spawns[var_0.team];

    return undefined;
}

playerzombiejumpstop()
{
    var_0 = self;

    if ( !istrue( level.delay_play_depart_vo ) || istrue( var_0.issquadleader ) )
        return undefined;

    var_1 = var_0 mintokensdropondeath();

    if ( isdefined( var_1 ) && isdefined( var_0.pers["squadMemberIndex"] ) )
    {
        var_1._id_1216A[var_0.pers["squadMemberIndex"]] = spawnstruct();
        var_1._id_1216A[var_0.pers["squadMemberIndex"]].circleent = undefined;
        return var_1._id_1216A[var_0.pers["squadMemberIndex"]];
    }

    return undefined;
}

playerzombieprestream()
{
    var_0 = self;

    if ( !istrue( var_0.issquadleader ) )
        return undefined;

    if ( isdefined( level.br_spawns ) && isdefined( var_0.team ) )
    {
        level.br_spawns[var_0.team] = spawnstruct();
        level.br_spawns[var_0.team].circleent = undefined;
        level.br_spawns[var_0.team]._id_1216A = [];
        return level.br_spawns[var_0.team];
    }

    return undefined;
}

getcrateusetime( var_0 )
{
    if ( isdefined( var_0.circleent ) )
        var_0.circleent delete();

    var_1 = undefined;
}

getcrossbowimpactfunc( var_0 )
{
    if ( isdefined( var_0.circleent ) )
        var_0.circleent delete();

    var_0 = undefined;
}

classselectionbeginnonexclusion()
{
    scripts\mp\flags::gameflaginit( "end_spawn_selection", 0 );

    foreach ( var_1 in level.players )
        var_1 thread scripts\mp\gametypes\br.gsc::playerstartselectspawnclassnonexclusion();
}

classselectionendnonexclusion()
{
    scripts\mp\flags::gameflagset( "end_spawn_selection" );
}

_id_11A38()
{
    wait 25;

    if ( isdefined( level.br_spawns ) )
    {
        foreach ( var_1 in level.br_spawns )
        {
            if ( isdefined( var_1._id_1216A ) )
            {
                foreach ( var_3 in var_1._id_1216A )
                    getcrateusetime( var_3 );
            }

            getcrossbowimpactfunc( var_1 );
        }
    }
}

getspawnselectionlockedtimer()
{
    return 5;
}

spawnselectioninfil( var_0 )
{
    foreach ( var_2 in level.players )
    {
        var_2.br_infilstarted = 1;
        var_2 setclientomnvar( "ui_br_infil_started", 1 );
        var_2 setclientomnvar( "ui_br_infiled", 1 );
    }

    var_4 = buildac130infilanimstruct( undefined, var_0 );
    playac130infilanim( var_4 );
}

initspawnexclusionpois()
{
    setdvarifuninitialized( "scr_map_selection_sparse_min", 813 );
    setdvarifuninitialized( "scr_map_selection_sparse_max", 1000 );
    setdvarifuninitialized( "scr_map_selection_semidense_min", 625 );
    setdvarifuninitialized( "scr_map_selection_semidense_max", 813 );
    setdvarifuninitialized( "scr_map_selection_dense_min", 500 );
    setdvarifuninitialized( "scr_map_selection_dense_max", 625 );
    setdvarifuninitialized( "scr_map_selection_falloff_max_distance", 25000 );
    setdvarifuninitialized( "scr_map_selection_falloff_fxn", "continuous" );
    level.br_spawnsparsepois = [ "boneyard", "farm", "lumber", "dam", "smallAirport", "quarry" ];
    level.br_spawnsemidensepois = [ "transit", "hospital", "port", "stadium", "tvStation", "storagetown", "supermarket" ];
    level.br_spawndensepois = [ "gulag", "northDowntown", "southDowntown", "eastAirport", "westAirport" ];
    var_0 = getdvarint( "scr_map_selection_sparse_min" );
    var_1 = getdvarint( "scr_map_selection_sparse_max" );

    foreach ( var_3 in level.br_spawnsparsepois )
    {
        level.br_spawnpois[var_3] = spawnstruct();
        level.br_spawnpois[var_3].exclusionmin = var_0;
        level.br_spawnpois[var_3].exclusionmax = var_1;
    }

    var_5 = getdvarint( "scr_map_selection_semidense_min" );
    var_6 = getdvarint( "scr_map_selection_semidense_max" );

    foreach ( var_3 in level.br_spawnsemidensepois )
    {
        level.br_spawnpois[var_3] = spawnstruct();
        level.br_spawnpois[var_3].exclusionmin = var_5;
        level.br_spawnpois[var_3].exclusionmax = var_6;
    }

    var_9 = getdvarint( "scr_map_selection_dense_min" );
    var_10 = getdvarint( "scr_map_selection_dense_max" );

    foreach ( var_3 in level.br_spawndensepois )
    {
        level.br_spawnpois[var_3] = spawnstruct();
        level.br_spawnpois[var_3].exclusionmin = var_9;
        level.br_spawnpois[var_3].exclusionmax = var_10;
    }

    level.br_spawnpois["transit"].pos = ( -12420, -26792, 0 );
    level.br_spawnpois["boneyard"].pos = ( -26542, -21776, 0 );
    level.br_spawnpois["hospital"].pos = ( 7827, -22240, 0 );
    level.br_spawnpois["port"].pos = ( 35008, -37117, 0 );
    level.br_spawnpois["farm"].pos = ( 48757, -25620, 0 );
    level.br_spawnpois["gulag"].pos = ( 51019, -52257, 0 );
    level.br_spawnpois["lumber"].pos = ( 51048, -8557, 0 );
    level.br_spawnpois["stadium"].pos = ( 28873, -9839, 0 );
    level.br_spawnpois["tvStation"].pos = ( 14423, 4999, 0 );
    level.br_spawnpois["northDowntown"].pos = ( 20311, -18724, 0 );
    level.br_spawnpois["southDowntown"].pos = ( 22076, -29372, 0 );
    level.br_spawnpois["storagetown"].pos = ( -24594, -3984, 0 );
    level.br_spawnpois["supermarket"].pos = ( -12782, -3634, 0 );
    level.br_spawnpois["eastAirport"].pos = ( -8280, 5837, 0 );
    level.br_spawnpois["westAirport"].pos = ( -21055, 7124, 0 );
    level.br_spawnpois["dam"].pos = ( -26873, 32208, 0 );
    level.br_spawnpois["smallAirport"].pos = ( 5823, 38518, 0 );
    level.br_spawnpois["quarry"].pos = ( 32653, 26929, 0 );
}

getspawnselectioncontexclusiongrowth( var_0, var_1, var_2, var_3 )
{
    var_4 = getdvarint( "scr_map_selection_falloff_max_distance" );
    var_5 = distance2d( var_0, var_1 );

    if ( var_5 > var_4 )
        return getdvarint( "scr_map_selection_exclusion", 2800 );

    var_6 = log( var_3 ) / ( log( var_2 ) * var_4 );
    var_7 = var_2 * exp( var_6 * var_5 );
    return var_7;
}

getspawnselectionconstexclusiongrowth( var_0, var_1, var_2, var_3 )
{
    var_4 = var_2 / var_3;
    var_5 = getdvarint( "scr_map_selection_falloff_max_distance" );
    var_6 = distance2d( var_0, var_1 );

    if ( var_6 > var_5 )
        return getdvarint( "scr_map_selection_exclusion", 2800 );

    var_7 = var_6 / var_5;
    var_8 = var_2 * pow( 1 + var_4, var_7 );
    return var_8;
}

getspawnselectionlerpexclusiongrowth( var_0, var_1, var_2, var_3 )
{
    var_4 = getdvarint( "scr_map_selection_falloff_max_distance" );
    var_5 = distance2d( var_0, var_1 );

    if ( var_5 > var_4 )
        return getdvarint( "scr_map_selection_exclusion", 2800 );

    var_6 = var_5 / var_4;
    var_7 = scripts\engine\math::lerp( var_2, var_3, var_6 );
    return var_7;
}

getspawnselectionpoi( var_0 )
{
    var_1 = 2147483647;
    var_2 = undefined;

    foreach ( var_6, var_4 in level.br_spawnpois )
    {
        var_5 = distance2d( var_0, var_4.pos );

        if ( var_5 < var_1 )
        {
            var_1 = var_5;
            var_2 = var_6;
        }
    }

    return [ var_1, var_2 ];
}

getspawnselectionexclusionsize( var_0, var_1, var_2 )
{
    var_3 = getdvar( "scr_map_selection_falloff_fxn", "continuous" );
    var_4 = level.br_spawnpois[var_2];

    switch ( var_3 )
    {
        case "continuous":
            var_4.spawnexclusion2ddist = getspawnselectioncontexclusiongrowth( var_4.pos, var_0, var_4.exclusionmin, var_4.exclusionmax );
            break;
        case "constant":
            var_4.spawnexclusion2ddist = getspawnselectionconstexclusiongrowth( var_4.pos, var_0, var_4.exclusionmin, var_4.exclusionmax );
            break;
        case "lerp":
            var_4.spawnexclusion2ddist = getspawnselectionlerpexclusiongrowth( var_4.pos, var_0, var_4.exclusionmin, var_4.exclusionmax );
            break;
        default:
            var_4.spawnexclusion2ddist = getdvarint( "scr_map_selection_exclusion", 2800 );
    }

    return var_4.spawnexclusion2ddist;
}

getinfilspawnoffset()
{
    if ( istrue( level.infilcanusemap ) )
        return getdvarfloat( "scr_map_selection_height_offset", 2000 );

    return getdvarfloat( "scr_br_dropSpawnOffsetMinZ", 12000 );
}

_id_12E00( var_0 )
{
    wait( var_0 );
}

spawn_exfil_juggs( var_0, var_1, var_2, var_3 )
{
    self moveto( var_0, var_1, var_2, var_3 );
}

_id_11B84( var_0, var_1, var_2, var_3 )
{
    self rotateto( var_0, var_1, var_2, var_3 );
}

offerloc()
{
    var_0 = distance( level.br_ac130.teleport_text_updated.startpt, level.br_ac130.teleport_text_updated.endpt );
    var_1 = var_0 / scripts\mp\gametypes\br_c130.gsc::getc130speed() / level.off_min.size;

    for ( var_2 = 0; var_2 < level.off_min.size; var_2++ )
    {
        wait( var_1 );
        level.off_min[var_2] notify( "halo_jump_c130" );
    }

    level.off_min = undefined;
}

zombiesignorevehicleexplosions( var_0 )
{
    if ( !isdefined( level.off_min ) )
        level.off_min = [];

    level.off_min[level.off_min.size] = var_0;
}
