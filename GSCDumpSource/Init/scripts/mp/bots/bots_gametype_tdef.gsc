// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    setup_callbacks();
    _id_11F11();
    thread siteused();
}

setup_callbacks()
{
    level.bot_funcs["gametype_think"] = ::check_for_solo;
}

_id_11F11()
{
    scripts\mp\bots\bots_util::bot_waittill_bots_enabled( 1 );
    level.protect_radius = 600;
    level.bodyguard_radius = 400;
    thread carriable_physics_launch_drop();
    level.bot_gametype_precaching_done = 1;
}

categorytogroup()
{
    return level.get_proximity_alias;
}

cash_hud_bink()
{
    if ( isdefined( level.get_proximity_alias.carrier ) )
        return level.get_proximity_alias.carrier;

    return undefined;
}

bot_get_enemy_team()
{
    if ( self.team == "allies" )
        return "axis";

    return "allies";
}

check_for_solo()
{
    self notify( "bot_flag_think" );
    self endon( "bot_flag_think" );
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );

    while ( !isdefined( level.bot_gametype_precaching_done ) )
        wait 0.05;

    self botsetflag( "separation", 0 );
    var_0 = undefined;
    var_1 = undefined;

    for (;;)
    {
        wait 0.05;

        if ( !isdefined( self.role ) )
        {
            playerspawndata();
            var_0 = undefined;
        }

        if ( scripts\mp\bots\bots_strategy::bot_has_tactical_goal() )
        {
            var_0 = undefined;
            continue;
        }

        if ( self.role != "carrier" && isdefined( self.carryobject ) )
        {
            var_0 = undefined;
            iscopiedclass( "carrier" );
        }

        if ( self.role == "carrier" )
        {
            if ( isdefined( self.carryobject ) )
            {
                var_2 = 0;

                if ( isdefined( self.enemy ) )
                    var_2 = distancesquared( self.enemy.origin, self.origin );

                if ( isdefined( self.enemy ) && var_2 < 9216 )
                {

                }
                else
                {

                }

                self botclearscriptgoal();

                if ( !isdefined( var_1 ) )
                    var_1 = gettime() + randomintrange( 500, 1000 );

                if ( gettime() > var_1 )
                    var_1 = gettime() + randomintrange( 500, 1000 );
            }
            else
            {
                var_3 = categorytogroup();

                if ( !isdefined( var_3 ) )
                {
                    var_4 = cash_hud_bink();

                    if ( isdefined( var_4 ) && var_4 != self )
                        playerspawndata();
                }
                else
                {
                    self botsetscriptgoal( var_3.curorigin, 16, "objective" );
                    continue;
                }
            }
        }
        else
            var_0 = undefined;

        if ( self.role == "attacker" )
        {
            var_3 = categorytogroup();

            if ( !isdefined( var_3 ) )
            {
                var_4 = cash_hud_bink();

                if ( isdefined( var_4 ) )
                {
                    if ( !scripts\mp\bots\bots_util::bot_is_guarding_player( var_4 ) )
                        scripts\mp\bots\bots_strategy::bot_guard_player( var_4, level.bodyguard_radius );
                }
            }
            else if ( !istrue( var_3.isresetting ) && !istrue( var_3.in_goal ) )
            {
                var_5 = getclosestpointonnavmesh( var_3.curorigin );

                if ( !scripts\mp\bots\bots_util::bot_is_defending_point( var_5 ) )
                    scripts\mp\bots\bots_strategy::bot_protect_point( var_5, level.protect_radius );
            }

            continue;
        }

        if ( self.role == "defender" )
        {
            var_6 = level.get_proximity_alias.carrier;
            var_7 = var_6.origin;

            if ( !scripts\mp\bots\bots_util::bot_is_defending_point( var_7 ) )
                scripts\mp\bots\bots_strategy::bot_protect_point( var_7, level.protect_radius );
        }
    }
}

playerspawndata()
{
    var_0 = get_allied_attackers_for_team( self.team );
    var_1 = get_allied_defenders_for_team( self.team );
    var_2 = iscarriablescriptable( self.team );
    var_3 = iscash( self.team );
    var_4 = level.bot_personality_type[self.personality];

    if ( var_4 == "active" )
    {
        if ( var_0.size >= var_2 )
        {
            var_5 = 0;

            foreach ( var_7 in var_0 )
            {
                if ( isai( var_7 ) && level.bot_personality_type[var_7.personality] == "stationary" )
                {
                    var_7.role = undefined;
                    var_5 = 1;
                    break;
                }
            }

            if ( var_5 )
            {
                iscopiedclass( "attacker" );
                return;
            }

            iscopiedclass( "defender" );
            return;
        }
        else
            iscopiedclass( "attacker" );
    }
    else if ( var_4 == "stationary" )
    {
        if ( var_1.size >= var_3 )
        {
            var_5 = 0;

            foreach ( var_10 in var_1 )
            {
                if ( isai( var_10 ) && level.bot_personality_type[var_10.personality] == "active" )
                {
                    var_10.role = undefined;
                    var_5 = 1;
                    break;
                }
            }

            if ( var_5 )
            {
                iscopiedclass( "defender" );
                return;
            }

            iscopiedclass( "attacker" );
            return;
        }
        else
            iscopiedclass( "defender" );
    }
}

carriable_physics_launch_drop()
{
    level notify( "bot_flag_ai_director_update" );
    level endon( "bot_flag_ai_director_update" );
    level endon( "game_ended" );
    var_0[0] = "allies";
    var_0[1] = "axis";
    var_1 = [];

    for (;;)
    {
        foreach ( var_3 in var_0 )
        {
            var_4 = iscarriablescriptable( var_3 );
            var_5 = iscash( var_3 );
            var_6 = get_allied_attackers_for_team( var_3 );
            var_7 = get_allied_defenders_for_team( var_3 );

            if ( var_6.size > var_4 )
            {
                var_8 = [];
                var_9 = 0;

                foreach ( var_11 in var_6 )
                {
                    if ( isai( var_11 ) )
                    {
                        if ( level.bot_personality_type[var_11.personality] == "stationary" )
                        {
                            var_11 iscopiedclass( "defender" );
                            var_9 = 1;
                            break;
                        }
                        else
                            var_8 = scripts\engine\utility::array_add( var_8, var_11 );
                    }
                }

                if ( !var_9 && var_8.size > 0 )
                    scripts\engine\utility::random( var_8 ) iscopiedclass( "defender" );
            }

            if ( var_7.size > var_5 )
            {
                var_13 = [];
                var_14 = 0;

                foreach ( var_16 in var_7 )
                {
                    if ( isai( var_16 ) )
                    {
                        if ( level.bot_personality_type[var_16.personality] == "active" )
                        {
                            var_16 iscopiedclass( "attacker" );
                            var_14 = 1;
                            break;
                        }
                        else
                            var_13 = scripts\engine\utility::array_add( var_13, var_16 );
                    }
                }

                if ( !var_14 && var_13.size > 0 )
                    scripts\engine\utility::random( var_13 ) iscopiedclass( "attacker" );
            }

            var_18 = categorytogroup();

            if ( isdefined( var_18 ) )
            {
                var_19 = track_target_group_complete( var_3, var_18 );

                if ( isdefined( var_19 ) && isdefined( var_19.role ) && var_19.role != "carrier" )
                {
                    if ( !isdefined( var_19.carryobject ) )
                    {
                        var_20 = var_1[var_3];

                        if ( isdefined( var_20 ) )
                            var_20 iscopiedclass( undefined );

                        var_19 iscopiedclass( "carrier" );
                        var_1[var_19.team] = var_19;
                    }
                }
            }
        }

        wait 1.0;
    }
}

iscarriablescriptable( var_0 )
{
    var_1 = iscloseto( var_0 );
    return var_1;
}

iscash( var_0 )
{
    return 0;
}

iscloseto( var_0 )
{
    var_1 = 0;

    foreach ( var_3 in level.participants )
    {
        if ( scripts\mp\utility\entity::isteamparticipant( var_3 ) && isdefined( var_3.team ) && var_3.team == var_0 )
            var_1++;
    }

    return var_1;
}

track_target_group_complete( var_0, var_1 )
{
    var_2 = undefined;
    var_3 = undefined;

    foreach ( var_5 in level.participants )
    {
        if ( !isdefined( var_5.team ) )
            continue;

        if ( var_5.team != var_0 )
            continue;

        if ( !isalive( var_5 ) )
            continue;

        if ( !isai( var_5 ) )
            continue;

        if ( isdefined( var_5.role ) && var_5.role == "defender" )
            continue;

        var_6 = distancesquared( var_5.origin, var_1.curorigin );

        if ( !isdefined( var_3 ) || var_6 < var_3 )
        {
            var_3 = var_6;
            var_2 = var_5;
        }
    }

    if ( isdefined( var_2 ) )
        return var_2;

    return undefined;
}

get_allied_attackers_for_team( var_0 )
{
    var_1 = get_players_by_role( "attacker", var_0 );
    return var_1;
}

get_allied_defenders_for_team( var_0 )
{
    var_1 = get_players_by_role( "defender", var_0 );
    return var_1;
}

iscopiedclass( var_0 )
{
    self.role = var_0;
    self botclearscriptgoal();
    scripts\mp\bots\bots_strategy::bot_defend_stop();
}

get_players_by_role( var_0, var_1 )
{
    var_2 = [];

    foreach ( var_4 in level.participants )
    {
        if ( !isdefined( var_4.team ) )
            continue;

        if ( isalive( var_4 ) && scripts\mp\utility\entity::isteamparticipant( var_4 ) && var_4.team == var_1 && isdefined( var_4.role ) && var_4.role == var_0 )
            var_2[var_2.size] = var_4;
    }

    return var_2;
}

siteused()
{
    level endon( "game_ended" );
    var_0 = undefined;

    for (;;)
    {
        var_1 = cash_hud_bink();

        if ( !isdefined( var_0 ) || !isdefined( var_1 ) || var_1 != var_0 )
        {
            if ( isdefined( var_0 ) && var_0.threatbias == 505 )
                var_0.threatbias = 0;

            var_0 = var_1;
        }

        if ( isdefined( var_1 ) && var_1.threatbias == 0 )
            var_1.threatbias = 505;

        wait 0.05;
    }
}
