// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    setup_callbacks();
    center_node();
}

center_node()
{
    _id_11F12();
}

setup_callbacks()
{
    level.bot_funcs["gametype_think"] = ::center_struct;
    level.bot_funcs["should_start_cautious_approach"] = ::_id_11FE4;
}

_id_11F12()
{
    scripts\mp\bots\bots_util::bot_waittill_bots_enabled();
    var_0 = 0;

    foreach ( var_2 in level.objectives )
    {
        var_2 thread scripts\mp\bots\bots_gametype_common.gsc::monitor_zone_control();
        var_3 = 0;

        if ( istrue( var_2.trigger.trigger_off ) )
        {
            var_2.trigger scripts\engine\utility::trigger_on();
            var_3 = 1;
        }

        var_2.nodes = scripts\mp\bots\bots_gametype_common.gsc::bot_get_valid_nodes_in_trigger( var_2.trigger );

        if ( var_3 )
            var_2.trigger scripts\engine\utility::trigger_off();
    }

    level.check_digit_models_to_create = 1;

    if ( !var_0 )
    {
        var_5 = find_current_radio();

        if ( !isdefined( var_5 ) )
            var_5 = scripts\engine\utility::random( level.objectives );

        scripts\mp\bots\bots_gametype_common.gsc::cargo_truck_mg_explode( [ var_5 ] );
        level.carry_ref[var_5.trigger getentitynumber()] = 1;
        level.bot_gametype_precaching_done = 1;
        thread cargo_truck_mg_exitend( var_5 );
    }
}

cargo_truck_mg_exitend( var_0 )
{
    for ( var_1 = scripts\engine\utility::array_remove( level.objectives, var_0 ); var_1.size > 0; var_1 = scripts\engine\utility::array_remove( var_1, var_2 ) )
    {
        var_2 = undefined;
        var_3 = find_current_radio();

        if ( isdefined( var_3 ) && scripts\engine\utility::array_contains( var_1, var_3 ) )
            var_2 = var_3;
        else
            var_2 = scripts\engine\utility::random( var_1 );

        scripts\mp\bots\bots_gametype_common.gsc::cargo_truck_mg_explode( [ var_2 ] );
        level.carry_ref[var_2.trigger getentitynumber()] = 1;
    }
}

center_struct()
{
    self notify( "bot_hq_think" );
    self endon( "bot_hq_think" );
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );

    while ( !isdefined( level.bot_gametype_precaching_done ) )
        wait 0.05;

    self botsetflag( "separation", 0 );
    self botsetflag( "grenade_objectives", 1 );

    for (;;)
    {
        wait 0.05;

        if ( self.health <= 0 )
            continue;

        var_0 = find_current_radio();

        if ( !isdefined( var_0 ) || !istrue( var_0.active ) || !isdefined( level.carry_ref[var_0.trigger getentitynumber()] ) )
        {
            cargo_truck_mg_initomnvars();
            self [[ self.personality_update_function ]]();
            continue;
        }

        var_1 = level.zone scripts\mp\gameobjects::getownerteam();

        if ( self.team != var_1 )
        {
            if ( !centers( var_0 ) )
                cargo_truck_mg_initcollision( var_0 );

            continue;
        }

        var_2 = scripts\engine\utility::get_enemy_team( self.team );
        var_3 = level.zone.touchlist[var_2].size > 0;

        if ( var_3 )
        {
            if ( !centers( var_0 ) )
                cargo_truck_mg_initcollision( var_0 );

            continue;
        }

        if ( !challenges_init( var_0 ) )
        {
            if ( centers( var_0 ) )
            {
                wait( randomfloat( 2 ) );
                cargo_truck_mg_initomnvars();
                continue;
            }

            check_cannot_spawn_tank( var_0 );
        }
    }
}

find_current_radio()
{
    foreach ( var_1 in level.objectives )
    {
        if ( isdefined( level.zone ) && var_1.trigger == level.zone.trigger )
            return var_1;
    }
}

centers( var_0 )
{
    if ( !scripts\mp\bots\bots_util::bot_is_capturing() )
        return 0;

    return isdefined( self.fulton_initanims ) && self.fulton_initanims == var_0;
}

challenges_init( var_0 )
{
    if ( !scripts\mp\bots\bots_util::bot_is_protecting() )
        return 0;

    return isdefined( self.fulton_initanims ) && self.fulton_initanims == var_0;
}

cargo_truck_mg_initcollision( var_0 )
{
    self.fulton_initanims = var_0;
    var_1["entrance_points_index"] = var_0.entrance_indices;
    var_1["override_origin_node"] = var_0.dialog_monitor_hurry;
    scripts\mp\bots\bots_strategy::bot_capture_zone( var_0.trigger.origin, var_0.nodes, var_0.trigger, var_1 );
}

check_cannot_spawn_tank( var_0 )
{
    self.fulton_initanims = var_0;
    var_1 = length( var_0._id_13147.nexthealthtiercalledout ) * 2;
    var_2["override_origin_node"] = var_0.dialog_monitor_hurry;
    scripts\mp\bots\bots_strategy::bot_protect_point( var_0.dialog_monitor_hurry.origin, var_1, var_2 );
}

cargo_truck_mg_initomnvars()
{
    if ( scripts\mp\bots\bots_util::bot_is_defending() )
        scripts\mp\bots\bots_strategy::bot_defend_stop();

    self.fulton_initanims = undefined;
}

_id_11FE4( var_0 )
{
    if ( var_0 )
    {
        var_1 = level.zone scripts\mp\gameobjects::getownerteam();

        if ( var_1 == "neutral" || var_1 == self.team )
            return 0;
    }

    return scripts\mp\bots\bots_strategy::should_start_cautious_approach_default( var_0 );
}
