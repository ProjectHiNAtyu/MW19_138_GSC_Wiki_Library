// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "uav", "init" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "uav", "init" ) ]]();

    var_0 = getentarray( "minimap_corner", "targetname" );

    if ( var_0.size )
    {
        var_1 = var_0[0].origin;
        var_2 = var_0[1].origin;
        var_3 = ( 0, 0, 0 );
        var_3 = var_2 - var_1;
        var_3 = ( var_3[0] / 2, var_3[1] / 2, var_3[2] / 2 ) + var_1;
        level.uavrotationorigin = var_3;
    }
    else
        level.uavrotationorigin = ( 0, 0, 0 );

    level.uavrig = spawn( "script_model", level.uavrotationorigin );
    level.uavrig setmodel( "tag_origin" );
    level.uavrig.angles = ( 0, 115, 0 );
    level.uavrig hide();
    level.uavrig.targetname = "uavrig_script_model";
    level.uavrig thread rotateuavrig( 70 );
    level.uavrigslow = spawn( "script_model", level.uavrotationorigin );
    level.uavrigslow setmodel( "tag_origin" );
    level.uavrigslow.angles = ( 0, 115, 0 );
    level.uavrigslow hide();
    level.uavrigslow.targetname = "uavrig_script_model";
    level.uavrigslow thread rotateuavrig( 90 );
    level.counteruavrig = spawn( "script_model", level.uavrotationorigin );
    level.counteruavrig setmodel( "tag_origin" );
    level.counteruavrig.angles = ( 0, 115, 0 );
    level.counteruavrig hide();
    level.counteruavrig.targetname = "counteruavrig_script_model";
    level.counteruavrig thread rotateuavrig( 80 );
    level.advanceduavrig = spawn( "script_model", level.uavrotationorigin );
    level.advanceduavrig setmodel( "tag_origin" );
    level.advanceduavrig.angles = ( 0, 115, 0 );
    level.advanceduavrig hide();
    level.advanceduavrig.targetname = "advanceduavrig_script_model";
    level.advanceduavrig thread rotateuavrig( 200 );
    level._id_12A23 = getuavstrengthmin();
    level._id_12A1F = getuavstrengthmax();
    level._id_12A20 = getuavstrengthlevelshowenemydirectional();
    level._id_12A22 = getuavstrengthlevelneutral();
    level._id_12A21 = getuavstrengthlevelshowenemyfastsweep();

    if ( level.teambased )
    {
        for ( var_4 = 0; var_4 < level.teamnamelist.size; var_4++ )
        {
            level.radarmode[level.teamnamelist[var_4]] = "normal_radar";
            level.activeuavs[level.teamnamelist[var_4]] = 0;
            level.activecounteruavs[level.teamnamelist[var_4]] = 0;
            level.activeadvanceduavs[level.teamnamelist[var_4]] = 0;
            level.uavmodels[level.teamnamelist[var_4]] = [];
        }
    }
    else
    {
        level.radarmode = [];
        level.activeuavs = [];
        level.activecounteruavs = [];
        level.activeadvanceduavs = [];
        level.uavmodels = [];
    }

    level.totalactiveuavs = 0;
    level.totalactivecounteruavs = 0;
    level.allassassin_initteamlist = 0;
    level thread onplayerconnect();
    level thread uavtracker();
    game["dialog"]["uav_destroyed"] = "uav_destroyed";
}

onplayerconnect()
{
    var_0 = getuavstrengthlevelneutral();

    for (;;)
    {
        level waittill( "connected", var_1 );
        level.activeuavs[var_1.guid] = 0;
        level.activeuavs[var_1.guid + "_radarStrength"] = var_0;
        level.activecounteruavs[var_1.guid] = 0;
        level.radarmode[var_1.guid] = "normal_radar";
        var_1.radarstrength = var_0;
    }
}

onplayerspawned()
{
    level notify( "uav_update" );
}

rotateuavrig( var_0, var_1, var_2 )
{
    if ( isdefined( var_2 ) )
        self endon( var_2 );

    if ( !isdefined( var_0 ) )
        var_0 = 60;

    if ( !isdefined( var_1 ) )
        var_1 = -360;

    for (;;)
    {
        self rotateyaw( var_1, var_0 );
        wait( var_0 );
    }
}

tryuseuav( var_0 )
{
    var_1 = scripts\cp_mp\utility\killstreak_utility::createstreakinfo( var_0, self );
    return tryuseuavfromstruct( var_1 );
}

tryuseuavfromstruct( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    if ( isdefined( level.killstreaktriggeredfunc ) )
    {
        if ( !level [[ level.killstreaktriggeredfunc ]]( var_0 ) )
            return 0;
    }

    var_1 = scripts\cp_mp\killstreaks\killstreakdeploy::streakdeploy_dogesturedeploy( var_0, getcompleteweaponname( "ks_gesture_generic_mp" ) );

    if ( !istrue( var_1 ) )
        return 0;

    if ( isdefined( level.killstreakbeginusefunc ) )
    {
        if ( !level [[ level.killstreakbeginusefunc ]]( var_0 ) )
            return 0;
    }

    var_2 = useuav( var_0.streakname, var_0 );
    return istrue( var_2 );
}

useuav( var_0, var_1 )
{
    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "logKillstreakEvent" ) )
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "logKillstreakEvent" ) ]]( var_0, self.origin );

    var_2 = self.pers["team"];
    var_3 = level.uavsettings[var_0].timeout;
    var_4 = 0;

    if ( level.gametype == "br" )
        var_4 = 1;

    scripts\cp\helicopter\chopper_boss::_id_11A49( "t9_ch_global_call_in_uav_for_operator_mission", 1 );
    scripts\cp\helicopter\chopper_boss::_id_11A49( "t9_ch_global_call_in_uav_for_operator_mission_op2", 1 );

    if ( getdvarint( "LRTSSKLKPK", 1 ) >= 8 )
        scripts\cp\helicopter\chopper_boss::_id_11A49( "t9_ch_global_call_in_uav_for_operator_mission_op3", 1 );

    level thread launchuav( self, var_0, var_1, var_4 );

    switch ( var_0 )
    {
        case "counter_uav":
            self notify( "used_counter_uav" );
            break;
        case "harp":
        case "directional_uav":
            self.radarshowenemydirection = 1;

            if ( level.teambased )
            {
                foreach ( var_6 in level.players )
                {
                    if ( var_6.pers["team"] == var_2 )
                        var_6.radarshowenemydirection = 1;
                }
            }

            self notify( "used_directional_uav" );
            break;
        default:
            self notify( "used_uav" );

            if ( level.teambased )
                var_8 = _getradarstrength( var_2 );

            break;
    }

    return 1;
}

launchuav( var_0, var_1, var_2, var_3 )
{
    var_4 = var_0.team;
    var_5 = getuavrig( var_1 );

    if ( scripts\cp_mp\utility\game_utility::islargemap() )
    {
        if ( level.gametype == "arm" )
        {
            if ( isdefined( level.hqmidpoint ) )
                var_5.origin = level.hqmidpoint;
        }
        else
            var_5.origin = var_0.origin;
    }

    var_6 = undefined;

    if ( istrue( var_3 ) )
    {
        var_6 = spawnstruct();
        var_6.damagetaken = 0;
    }
    else
        var_6 = spawn( "script_model", var_5 gettagorigin( "tag_origin" ) + ( 0, 0, 5000 ) );

    var_7 = level.uavsettings[var_1].modelbase;

    if ( scripts\cp_mp\utility\player_utility::getplayersuperfaction( var_0 ) && isdefined( level.uavsettings[var_1].modelbasealt ) )
        var_7 = level.uavsettings[var_1].modelbasealt;

    var_8 = level.uavsettings[var_1].timeout;
    var_10 = level.uavsettings[var_1].maxhealth;
    var_11 = level.uavsettings[var_1].teamsplash;
    var_12 = undefined;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "sound", "playKillstreakDeployDialog" ) )
    {
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "sound", "playKillstreakDeployDialog" ) ]]( var_0, var_2.streakname );
        var_12 = 2.0;
    }

    if ( level.gametype == "br" )
        var_0 _id_12A1C( var_4, 15000, var_1 );

    if ( var_1 == "harp" )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "harpSpawned" ) )
            var_6 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "harpSpawned" ) ]]( var_0 );
    }

    var_0 thread scripts\cp_mp\utility\killstreak_utility::playkillstreakoperatordialog( "use_" + var_2.streakname, 1, var_12 );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "hud", "teamPlayerCardSplash" ) )
        level thread [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "hud", "teamPlayerCardSplash" ) ]]( var_11, var_0 );

    if ( isent( var_6 ) )
        var_6 setmodel( var_7 );

    var_6.team = var_4;
    var_6.owner = var_0;
    var_6.timetoadd = 0;
    var_6.uavtype = var_1;
    var_6.health = level.uavsettings[var_1].health;
    var_6.maxhealth = var_10;
    var_6.streakinfo = var_2;
    var_6 thread monitorowner();
    var_6 thread restorestrengthafterhostmigration();
    var_6 thread watchgameend();

    if ( isent( var_6 ) )
    {
        var_6 setotherent( var_0 );
        var_6 scriptmoveroutline();
        var_6 scriptmoverthermal();

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "addToActiveKillstreakList" ) )
            var_6 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "addToActiveKillstreakList" ) ]]( var_1, "Killstreak_Air", var_0 );

        var_6 thread damagetracker();
        var_6 thread handleincomingstinger();
        var_6 thread perkengineer_manageminimap();
        var_6 thread trackvelocity();
        var_6 setscriptablepartstate( "lights", "on", 0 );
        var_13 = randomintrange( 6000, 6500 );

        if ( var_6.uavtype == "directional_uav" || var_6.uavtype == "harp" )
            var_13 = randomintrange( 30000, 31000 );

        if ( isdefined( level.spawnpoints ) )
            var_14 = level.spawnpoints;
        else
            var_14 = level.startspawnpoints;

        if ( !isdefined( var_14 ) )
        {
            var_15 = spawnstruct();
            var_15.origin = ( var_0.origin[0], var_0.origin[1], 6969 );
            var_14 = [ var_15 ];
        }

        var_16 = var_14[0];

        foreach ( var_15 in var_14 )
        {
            if ( var_15.origin[2] < var_16.origin[2] )
                var_16 = var_15;
        }

        var_19 = var_16.origin[2];
        var_20 = var_5.origin[2];

        if ( var_19 < 0 )
        {
            var_20 = var_20 + var_19 * -1;
            var_19 = 0;
        }

        var_21 = randomint( 360 );
        var_22 = randomint( 1000 );

        if ( var_6.uavtype == "directional_uav" || var_6.uavtype == "harp" )
            var_22 = randomintrange( 20000, 22000 );

        var_23 = var_22 + 4000;
        var_24 = cos( var_21 ) * var_23;
        var_25 = sin( var_21 ) * var_23;
        var_26 = vectornormalize( ( var_24, var_25, var_13 ) );
        var_26 = var_26 * var_13;

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "getGameType" ) )
        {
            var_27 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getGameType" ) ]]();

            if ( var_27 == "br" )
            {
                var_28 = ( 0, 0, 3000 );
                var_26 = var_26 + var_28;
            }
        }

        var_6 linkto( var_5, "tag_origin", var_26, ( 0, var_21 - 90, 0 ) );
        var_6 thread updateuavmodelvisibility();
    }

    var_6 [[ level.uavsettings[var_1].addfunc ]]();

    if ( var_1 == "uav" || var_1 == "directional_uav" || var_6.uavtype == "harp" )
    {
        var_6 revealminimapforteam( 1 );
        var_6 thread applymapenableonspawn();
    }

    if ( isdefined( level.activeuavs[var_4] ) && level.activeuavs[var_4] > 0 )
    {
        if ( isent( var_6 ) )
        {
            foreach ( var_30 in level.uavmodels[var_4] )
            {
                if ( var_30 == var_6 )
                    continue;

                if ( isdefined( var_30.timetoadd ) )
                    var_30.timetoadd = var_30.timetoadd + 5;
            }
        }
        else
            var_6.timetoadd = 5 * ( level.activeuavs[var_4] - 1 );
    }

    var_6 thread handlewiretap();
    level notify( "uav_update" );
    var_6 scripts\cp_mp\hostmigration::hostmigration_waittillnotifyortimeoutpause( "death", var_8 );

    if ( isdefined( var_6 ) && var_6.damagetaken < var_6.maxhealth )
    {
        if ( isent( var_6 ) )
        {
            var_6 unlink();
            var_6.getinitialwinningteam = var_6.origin + anglestoforward( var_6.angles ) * 50000;
            var_6 moveto( var_6.getinitialwinningteam, 50 );

            if ( isdefined( level.uavsettings[var_1].fxid_leave ) && isdefined( level.uavsettings[var_1].fx_leave_tag ) )
                playfxontag( level.uavsettings[var_1].fxid_leave, var_6, level.uavsettings[var_1].fx_leave_tag );
        }

        if ( isdefined( var_0 ) && !istrue( level.gameended ) )
            var_0 scripts\cp_mp\utility\killstreak_utility::playkillstreakoperatordialog( level.uavsettings[var_6.uavtype].votimeout, 1 );

        var_6 scripts\cp_mp\hostmigration::hostmigration_waittillnotifyortimeoutpause( "death", 3 );

        if ( isdefined( var_6 ) && var_6.damagetaken < var_6.maxhealth )
        {
            var_6 notify( "leaving" );
            var_6.isleaving = 1;

            if ( var_1 == "harp" )
            {
                if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "harpTimeout" ) )
                    var_6 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "harpTimeout" ) ]]( var_0 );
            }

            if ( isent( var_6 ) )
                var_6 moveto( var_6.getinitialwinningteam, 15 );

            var_6 scripts\cp_mp\hostmigration::hostmigration_waittillnotifyortimeoutpause( "death", 4 + var_6.timetoadd );

            if ( isdefined( var_6 ) && var_6.damagetaken < var_6.maxhealth )
                var_6.leftplayspace = 1;
        }
    }

    if ( isdefined( var_6 ) )
    {
        var_6.owner notify( "uav_finished" );

        if ( var_1 == "uav" || var_1 == "directional_uav" || var_1 == "harp" )
            var_6 revealminimapforteam( level.minimaponbydefault );

        var_6 [[ level.uavsettings[var_1].removefunc ]]();

        if ( isdefined( level.killstreakfinishusefunc ) )
            level thread [[ level.killstreakfinishusefunc ]]( var_2 );

        if ( isdefined( var_6.enemyobjid ) )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "returnObjectiveID" ) )
                [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "returnObjectiveID" ) ]]( var_6.enemyobjid );

            var_6 notify( "uav_deleteObjective" );
        }

        var_6.streakinfo.init_swivelroom_currsolution_marquee = !istrue( var_6.leftplayspace );

        if ( !istrue( self.x1givelaststandoverride ) )
            var_6.owner scripts\cp_mp\utility\killstreak_utility::x1loadout( var_6.streakinfo );

        if ( isent( var_6 ) )
            var_6 delete();
        else
            var_6 notify( "death" );
    }

    if ( var_1 == "directional_uav" )
    {
        var_0.radarshowenemydirection = 0;

        if ( level.teambased )
        {
            foreach ( var_33 in level.players )
            {
                if ( isdefined( var_33 ) && var_33.pers["team"] == var_4 )
                    var_33.radarshowenemydirection = 0;
            }
        }
    }

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "player", "printGameAction" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "player", "printGameAction" ) ]]( "killstreak ended - " + var_1, var_0 );

    level notify( "uav_update" );
}

monitorowner()
{
    self endon( "death" );
    self.owner scripts\engine\utility::_id_12E3F( "disconnect", "joined_team" );

    if ( isent( self ) )
    {
        self hide();
        var_0 = anglestoright( self.angles ) * 200;
        playfx( level.uavsettings[self.uavtype].fxid_explode, self.origin, var_0 );
        playsoundatpos( self.origin, level.uavsettings[self.uavtype].sound_explode );
        self.damagetaken = self.maxhealth;
    }

    self notify( "death" );
}

restorestrengthafterhostmigration()
{
    self endon( "death" );

    for (;;)
    {
        level waittill( "host_migration_end" );

        if ( level.teambased )
        {
            foreach ( var_1 in level.teamnamelist )
            {
                var_2 = _getradarstrength( var_1 );
                _setteamradarstrength( var_1, var_2 );
            }
        }
    }
}

updateuavmodelvisibility()
{
    self endon( "death" );

    for (;;)
    {
        level scripts\engine\utility::waittill_either( "joined_team", "uav_update" );
        self hide();

        foreach ( var_1 in level.players )
        {
            if ( level.teambased )
            {
                if ( var_1.team != self.team )
                    self showtoplayer( var_1 );

                continue;
            }

            if ( isdefined( self.owner ) && var_1 == self.owner )
                continue;

            self showtoplayer( var_1 );
        }
    }
}

damagetracker()
{
    level endon( "game_ended" );
    self setcandamage( 1 );
    self.damagetaken = 0;

    for (;;)
    {
        self waittill( "damage", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13 );

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "weapons", "mapWeapon" ) )
            var_9 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "weapons", "mapWeapon" ) ]]( var_9, var_13 );

        if ( !isplayer( var_1 ) )
        {
            if ( !isdefined( self ) )
                return;
        }
        else
        {
            if ( ( self.uavtype == "directional_uav" || self.uavtype == "harp" ) && ( var_4 == "MOD_RIFLE_BULLET" || var_4 == "MOD_PISTOL_BULLET" || var_4 == "MOD_EXPLOSIVE_BULLET" ) )
                continue;

            if ( isdefined( var_8 ) && var_8 & level.idflags_penetration )
                self.wasdamagedfrombulletpenetration = 1;

            if ( isdefined( var_8 ) && var_8 & level.idflags_ricochet )
                self.wasdamagedfrombulletricochet = 1;

            self.wasdamaged = 1;
            var_14 = var_0;

            if ( isplayer( var_1 ) )
            {
                if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "damage", "updateDamageFeedback" ) )
                    var_1 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "damage", "updateDamageFeedback" ) ]]( "hitequip" );

                if ( var_4 == "MOD_RIFLE_BULLET" || var_4 == "MOD_PISTOL_BULLET" )
                {
                    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "perk", "hasPerk" ) )
                    {
                        if ( var_1 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "perk", "hasPerk" ) ]]( "specialty_armorpiercing" ) )
                            var_14 = var_14 + var_0 * level.armorpiercingmod;
                    }
                }
            }

            var_15 = 1;
            var_16 = 1;
            var_17 = 1;
            var_18 = 0;
            var_19 = 3;

            if ( self.uavtype == "directional_uav" || self.uavtype == "harp" )
            {
                var_15 = 5;
                var_16 = 6;
                var_17 = 7;
                var_18 = 0;
                var_19 = 0;
            }

            if ( isdefined( var_9 ) )
            {
                if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "getModifiedAntiKillstreakDamage" ) )
                    var_14 = self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "getModifiedAntiKillstreakDamage" ) ]]( var_1, var_9, var_4, var_14, self.maxhealth, var_15, var_16, var_17, var_18, var_19 );

                if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "killstreakHit" ) )
                    [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "killstreakHit" ) ]]( var_1, var_9, self, var_4, var_14 );

                if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "damage", "logAttackerKillstreak" ) )
                    self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "damage", "logAttackerKillstreak" ) ]]( self, var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, createheadicon( var_9 ) );
            }

            self.damagetaken = self.damagetaken + var_14;

            if ( self.damagetaken >= self.maxhealth )
            {
                if ( isplayer( var_1 ) && ( !isdefined( self.owner ) || var_1 != self.owner ) )
                {
                    var_20 = level.uavsettings[self.uavtype].calloutdestroyed;
                    var_21 = "destroyed_" + self.uavtype;

                    if ( self.uavtype == "uav" )
                    {
                        var_21 = undefined;
                        self.owner scripts\cp_mp\utility\killstreak_utility::playkillstreakoperatordialog( "uav_destroyed", 1 );
                    }

                    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "damage", "onKillstreakKilled" ) )
                        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "damage", "onKillstreakKilled" ) ]]( self.uavtype, var_1, var_9, var_4, var_0, "destroyed_" + self.uavtype, var_21, var_20 );

                    if ( isdefined( self.uavremotemarkedby ) && self.uavremotemarkedby != var_1 )
                    {
                        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "uav", "remoteUAV_processTaggedAssist" ) )
                            self.uavremotemarkedby thread [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "uav", "remoteUAV_processTaggedAssist" ) ]]();
                    }
                }

                self hide();
                var_22 = anglestoright( self.angles ) * 200;
                playfx( level.uavsettings[self.uavtype].fxid_explode, self.origin, var_22 );
                playsoundatpos( self.origin, level.uavsettings[self.uavtype].sound_explode );
                self notify( "death" );
                return;
            }
        }
    }
}

uavtracker()
{
    level endon( "game_ended" );

    for (;;)
    {
        level waittill( "uav_update" );

        if ( level.teambased )
        {
            foreach ( var_1 in level.teamnamelist )
                updateteamuavstatus( var_1 );

            continue;
        }

        updateplayersuavstatus();
    }
}

handlewiretap()
{
    foreach ( var_1 in level.players )
    {
        if ( isdefined( self.streakname ) && ( self.streakname == "directional_uav" || self.streakname == "counter_uav" || self.uavtype == "harp" ) )
            return;

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "perk", "hasPerk" ) )
        {
            if ( !var_1 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "perk", "hasPerk" ) ]]( "specialty_expanded_minimap" ) )
                continue;
        }

        if ( var_1.team == self.team )
            continue;

        thread executewiretapsweeps( var_1 );
    }
}

executewiretapsweeps( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    triggeroneoffradarsweep( var_0 );
    self waittill( "death" );
    triggeroneoffradarsweep( var_0 );
}

_getradarstrength( var_0 )
{
    var_1 = level.activeuavs[var_0];
    var_2 = level.activeadvanceduavs[var_0];
    var_3 = level.totalactivecounteruavs - level.activecounteruavs[var_0];
    var_4 = getuavstrengthmin();
    var_5 = getuavstrengthmax();

    if ( var_2 )
        var_1 = var_5 - getuavstrengthlevelneutral();

    if ( level.gametype == "br" )
        var_6 = int( clamp( var_1 + getuavstrengthlevelneutral(), getuavstrengthlevelneutral(), getuavstrengthlevelshowenemydirectional() ) );
    else if ( var_3 > 0 )
        var_6 = var_4;
    else if ( var_2 > 0 )
        var_6 = var_5;
    else
        var_6 = int( clamp( var_1 + getuavstrengthlevelneutral(), getuavstrengthlevelneutral(), getuavstrengthlevelshowenemyfastsweep() ) );

    var_6 = int( clamp( var_6, var_4, var_5 ) );
    return var_6;
}

_setteamradarstrength( var_0, var_1 )
{
    updateteamuavstatus( var_0, var_1 );
}

updateteamuavstatus( var_0, var_1 )
{
    if ( isdefined( var_1 ) )
        var_2 = var_1;
    else
        var_2 = _getradarstrength( var_0 );

    var_2 = int( max( min( var_2, level._id_12A1F ), level._id_12A23 ) );
    var_3 = var_2 == level._id_12A23;
    var_4 = !var_3;
    var_5 = var_2 >= level._id_12A20;
    var_6 = !var_3;

    if ( var_2 == level._id_12A22 )
    {
        var_7 = "normal_radar";
        var_4 = 0;
    }
    else if ( var_2 == level._id_12A1F || var_5 )
        var_7 = "constant_radar";
    else if ( var_2 == level._id_12A21 )
        var_7 = "fast_radar";
    else
        var_7 = "normal_radar";

    var_8 = level.players;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "getTeamData" ) )
        var_8 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getTeamData" ) ]]( var_0, "players" );

    foreach ( var_10 in var_8 )
    {
        if ( !isdefined( var_10 ) )
            continue;

        if ( istrue( var_10.playmatchendcamera ) )
            continue;

        if ( istrue( var_10._id_120BD ) )
            continue;

        var_10.radarstrength = var_2;
        var_10.isradarblocked = var_3;
        var_10.hasradar = var_4;
        var_10.radarshowenemydirection = var_5;

        if ( var_10.radarshowenemydirection )
        {
            var_10.radarmode = "constant_radar";
            continue;
        }

        var_10.radarmode = var_7;
    }
}

updateplayersuavstatus()
{
    foreach ( var_1 in level.players )
    {
        if ( istrue( var_1.playmatchendcamera ) )
            continue;

        var_2 = level.activeuavs[var_1.guid + "_radarStrength"];
        var_3 = level.totalactivecounteruavs - level.activecounteruavs[var_1.guid];

        if ( var_3 > 0 )
            var_2 = level._id_12A23;

        var_2 = int( max( min( var_2, level._id_12A1F ), level._id_12A23 ) );
        var_1.radarstrength = var_2;
        var_4 = var_1.team == "spectator" || var_1.team == "follower" || var_1.team == "free";

        if ( var_2 <= level._id_12A22 || var_4 )
        {
            var_1.hasradar = 0;
            var_1.radarshowenemydirection = 0;

            if ( isdefined( var_1.radarmode ) && var_1.radarmode == "constant_radar" )
                var_1.radarmode = "normal_radar";

            continue;
        }

        if ( var_2 >= level._id_12A21 )
            var_1.radarmode = "fast_radar";
        else
            var_1.radarmode = "normal_radar";

        var_1.radarshowenemydirection = var_2 >= level._id_12A20;

        if ( istrue( var_1.radarshowenemydirection ) )
            var_1.radarmode = "constant_radar";

        var_1.hasradar = 1;
    }
}

handleincomingstinger()
{
    level endon( "game_ended" );
    self endon( "death" );

    for (;;)
    {
        level waittill( "stinger_fired", var_0, var_1, var_2 );

        if ( !isdefined( var_2 ) || var_2 != self )
            continue;

        var_1 thread stingerproximitydetonate( var_2, var_0 );
    }
}

trackvelocity()
{
    level endon( "game_ended" );
    self endon( "death" );
    self.velocity = ( 0, 0, 0 );

    for (;;)
    {
        self.lastorigin = self.origin;
        wait 0.05;
        self.velocity = ( self.origin - self.lastorigin ) / 0.05;
    }
}

watchgameend()
{
    self endon( "death" );
    self.owner endon( "uav_finished" );
    level waittill( "game_ended" );
    self.x1givelaststandoverride = 1;
    self.owner scripts\cp_mp\utility\killstreak_utility::x1loadout( self.streakinfo );
}

stingerproximitydetonate( var_0, var_1 )
{
    self endon( "death" );
    var_2 = distance( self.origin, var_0 getpointinbounds( 0, 0, 0 ) );
    var_3 = var_0 getpointinbounds( 0, 0, 0 );

    for (;;)
    {
        if ( !isdefined( var_0 ) )
            var_4 = var_3;
        else
            var_4 = var_0 getpointinbounds( 0, 0, 0 );

        var_3 = var_4;
        var_5 = distance( self.origin, var_4 );

        if ( var_5 < var_2 )
            var_2 = var_5;

        if ( var_5 > var_2 )
        {
            if ( var_5 > 1536 )
                return;

            radiusdamage( self.origin, 1536, 600, 600, var_1, "MOD_EXPLOSIVE", "iw8_la_gromeo_mp" );
            self hide();
            self notify( "deleted" );
            waitframe();
            self delete();
            var_1 notify( "killstreak_destroyed" );
        }

        waitframe();
    }
}

adduavmodel()
{
    if ( level.teambased )
        level.uavmodels[self.team][level.uavmodels[self.team].size] = self;
    else
        level.uavmodels[self.owner.guid + "_" + gettime()] = self;
}

removeuavmodel()
{
    var_0 = [];

    if ( level.teambased )
    {
        var_1 = self.team;

        foreach ( var_3 in level.uavmodels[var_1] )
        {
            if ( !isdefined( var_3 ) )
                continue;

            var_0[var_0.size] = var_3;
        }

        level.uavmodels[var_1] = var_0;
    }
    else
    {
        foreach ( var_3 in level.uavmodels )
        {
            if ( !isdefined( var_3 ) )
                continue;

            var_0[var_0.size] = var_3;
        }

        level.uavmodels = var_0;
    }
}

addactiveuav()
{
    level.totalactiveuavs++;

    if ( level.teambased )
    {
        level.activeuavs[self.team]++;

        if ( self.uavtype == "directional_uav" || self.uavtype == "harp" )
        {
            level.activeadvanceduavs[self.team]++;
            level.allassassin_initteamlist++;
        }
    }
    else
    {
        level.activeuavs[self.owner.guid]++;
        level.activeuavs[self.owner.guid + "_radarStrength"]++;

        if ( self.uavtype == "directional_uav" || self.uavtype == "harp" )
        {
            level.activeuavs[self.owner.guid + "_radarStrength"] = level.activeuavs[self.owner.guid + "_radarStrength"] + 2;

            if ( !isdefined( level.activeadvanceduavs[self.owner.guid] ) )
                level.activeadvanceduavs[self.owner.guid] = 0;

            level.activeadvanceduavs[self.owner.guid]++;
            level.allassassin_initteamlist++;
        }
    }
}

addactivecounteruav()
{
    if ( level.teambased )
        level.activecounteruavs[self.team]++;
    else
        level.activecounteruavs[self.owner.guid]++;

    level.totalactivecounteruavs++;
}

removeactiveuav()
{
    if ( level.teambased )
    {
        level.activeuavs[self.team]--;
        level.totalactiveuavs--;

        if ( self.uavtype == "directional_uav" || self.uavtype == "harp" )
        {
            level.activeadvanceduavs[self.team]--;
            level.allassassin_initteamlist--;
        }
    }
    else if ( isdefined( self.owner ) )
    {
        level.activeuavs[self.owner.guid]--;
        level.totalactiveuavs--;
        level.activeuavs[self.owner.guid + "_radarStrength"]--;

        if ( self.uavtype == "directional_uav" || self.uavtype == "harp" )
        {
            level.activeuavs[self.owner.guid + "_radarStrength"] = level.activeuavs[self.owner.guid + "_radarStrength"] - 2;
            level.activeadvanceduavs[self.owner.guid]--;
            level.allassassin_initteamlist--;
        }
    }
}

removeactivecounteruav()
{
    if ( level.teambased )
        level.activecounteruavs[self.team]--;
    else if ( isdefined( self.owner ) )
        level.activecounteruavs[self.owner.guid]--;

    level.totalactivecounteruavs--;
}

watchhighlightfadetime( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( var_3 ) )
        var_3 endon( "death" );

    self endon( "disconnect" );
    level endon( "game_ended" );
    scripts\engine\utility::_id_12E59( var_2, "leave" );

    if ( isdefined( var_1 ) )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "outline", "outlineDisable" ) )
            [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "outline", "outlineDisable" ) ]]( var_0, var_1 );
    }
}

getuavrig( var_0 )
{
    var_1 = undefined;

    switch ( var_0 )
    {
        case "uav":
            var_1 = level.uavrig;
            break;
        case "counter_uav":
            var_1 = level.counteruavrig;
            break;
        case "harp":
        case "directional_uav":
            var_1 = level.advanceduavrig;
            break;
        case "default":
            break;
    }

    return var_1;
}

perkengineer_manageminimap()
{
    self.owner endon( "disconnect" );
    self endon( "uav_deleteObjective" );

    switch ( self.uavtype )
    {
        case "uav":
            var_0 = "icon_minimap_uav";
            break;
        case "counter_uav":
            var_0 = "icon_minimap_counter_uav_enemy";
            break;
        case "harp":
        case "directional_uav":
            var_0 = "icon_minimap_auav";
            break;
        default:
            var_0 = "icon_minimap_uav";
    }

    var_1 = undefined;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "createObjective" ) )
        var_1 = scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "createObjectiveEngineer" );

    if ( isdefined( var_1 ) )
        self.enemyobjid = self [[ var_1 ]]( var_0, 1, 1 );

    var_2 = 0;

    for (;;)
    {
        var_3 = level.players.size;

        for ( var_4 = 0; var_4 < 10; var_4++ )
        {
            if ( var_2 >= level.players.size )
                var_2 = 0;

            var_5 = level.players[var_2];
            var_2++;

            if ( !isdefined( var_5 ) )
                continue;

            if ( self.enemyobjid != -1 )
            {
                if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "perk", "hasPerk" ) )
                {
                    if ( var_5 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "perk", "hasPerk" ) ]]( "specialty_engineer" ) && istrue( scripts\cp_mp\utility\player_utility::playersareenemies( var_5, self.owner ) ) )
                    {
                        scripts\mp\objidpoolmanager::objective_playermask_addshowplayer( self.enemyobjid, var_5 );
                        continue;
                    }

                    scripts\mp\objidpoolmanager::objective_playermask_hidefrom( self.enemyobjid, var_5 );
                }
            }
        }

        waitframe();
    }
}

startsystemshutdown()
{
    level endon( "game_ended" );

    foreach ( var_1 in level.players )
    {
        if ( !var_1 scripts\cp_mp\utility\player_utility::_isalive() )
            continue;

        if ( level.teambased && var_1.team == self.owner.team )
            continue;

        if ( !level.teambased && var_1 == self.owner )
            continue;

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "perk", "hasPerk" ) )
        {
            if ( !var_1 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "perk", "hasPerk" ) ]]( "specialty_empimmune" ) )
                var_1 thread shutdownenemysystem( self );
        }
    }

    thread applyshutdownonspawn();
}

givefriendlyperks( var_0 )
{
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "perk", "givePerk" ) )
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "perk", "givePerk" ) ]]( "specialty_coldblooded" );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "perk", "givePerk" ) )
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "perk", "givePerk" ) ]]( "specialty_tracker_jammer" );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "perk", "givePerk" ) )
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "perk", "givePerk" ) ]]( "specialty_noscopeoutline" );

    var_0 waittill( "death" );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "perk", "removePerk" ) )
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "perk", "removePerk" ) ]]( "specialty_coldblooded" );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "perk", "removePerk" ) )
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "perk", "removePerk" ) ]]( "specialty_tracker_jammer" );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "perk", "removePerk" ) )
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "perk", "removePerk" ) ]]( "specialty_noscopeoutline" );
}

shutdownenemysystem( var_0 )
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    self setuavjammed( 1 );
    var_0 waittill( "death" );
    self setuavjammed( 0 );
}

applyshutdownonspawn()
{
    self endon( "death" );
    level endon( "game_ended" );
    var_0 = self.owner;
    var_1 = var_0.team;

    for (;;)
    {
        level waittill( "player_spawned", var_2 );

        if ( var_2 == var_0 )
            continue;

        if ( level.teambased && var_2.team == var_1 )
            continue;

        var_2 thread shutdownenemysystem( self );
    }
}

startemppulse()
{
    self endon( "death" );
    level endon( "game_ended" );
    wait 2;
    self playsound( "jammer_drone_charge" );
    playfxontag( scripts\engine\utility::getfx( "jammer_drone_charge" ), self, "tag_origin" );
    wait 1.5;
    stopfxontag( scripts\engine\utility::getfx( "jammer_drone_charge" ), self, "tag_origin" );
    playfxontag( scripts\engine\utility::getfx( "jammer_drone_shockwave" ), self, "tag_origin" );
    self playsound( "jammer_drone_shockwave" );

    foreach ( var_1 in level.players )
    {
        if ( !var_1 scripts\cp_mp\utility\player_utility::_isalive() )
            continue;

        var_1 thread applyuavshellshock();
    }

    var_3 = undefined;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "getEnemyTeams" ) )
        var_3 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getEnemyTeams" ) ]]( self.team );

    foreach ( var_5 in var_3 )
        destroyactiveobjects( var_5, self.owner );
}

applyuavshellshock()
{
    self playloopsound( "emp_nade_lp" );
    thread applyuavshellshockvisionset();
    wait 0.5;
    self playsound( "emp_nade_lp_end" );
    self stoploopsound( "emp_nade_lp" );
}

applyuavshellshockvisionset()
{
    visionsetnaked( "coup_sunblind", 0.05 );
    waitframe();
    visionsetnaked( "coup_sunblind", 0 );
    visionsetnaked( "", 0.5 );
}

destroyactiveobjects( var_0, var_1 )
{
    var_2 = "nuke_mp";
    var_3 = level.activekillstreaks;
    var_4 = [[ level.getactiveequipmentarray ]]();
    var_5 = undefined;

    if ( isdefined( var_3 ) && isdefined( var_4 ) )
        var_5 = scripts\engine\utility::array_combine_unique( var_3, var_4 );
    else if ( isdefined( var_3 ) )
        var_5 = var_3;
    else if ( isdefined( var_4 ) )
        var_5 = var_4;

    if ( isdefined( var_5 ) )
    {
        foreach ( var_7 in var_5 )
        {
            if ( isdefined( var_7 ) )
            {
                if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "doDamageToKillstreak" ) )
                    var_7 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "doDamageToKillstreak" ) ]]( 10000, var_1, var_1, var_0, var_7.origin, "MOD_EXPLOSIVE", var_2 );
            }
        }
    }
}

revealminimapforteam( var_0 )
{
    var_1 = undefined;

    if ( level.teambased )
        var_1 = self.team;
    else
        var_1 = self.owner.guid;

    foreach ( var_3 in level.players )
    {
        if ( isai( var_3 ) )
            continue;

        if ( level.teambased && self.team != var_3.team )
            continue;

        if ( !level.teambased && self.owner != var_3 )
            continue;

        if ( !var_3 scripts\cp_mp\utility\player_utility::_isalive() )
            continue;

        if ( istrue( var_0 ) )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "player", "showMiniMap" ) )
                var_3 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "player", "showMiniMap" ) ]]();

            continue;
        }

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "player", "hideMiniMap" ) )
            var_3 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "player", "hideMiniMap" ) ]]();
    }
}

applymapenableonspawn()
{
    self.owner endon( "disconnect" );
    self endon( "death" );
    level endon( "game_ended" );
    var_0 = self.owner.guid;

    if ( level.teambased )
        var_0 = self.team;

    level notify( "uav_show_minimap_" + var_0 );
    level endon( "uav_show_minimap_" + var_0 );

    if ( istrue( level.istacops ) )
        return;

    for (;;)
    {
        level waittill( "player_spawned", var_1 );

        if ( isai( var_1 ) )
            continue;

        if ( level.teambased && self.team != var_1.team )
            continue;

        if ( !level.teambased && self.owner != var_1 )
            continue;

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "player", "showMiniMap" ) )
            var_1 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "player", "showMiniMap" ) ]]();

        var_1.showuavminimaponspawn = 1;
    }
}

setforceradars( var_0, var_1 )
{
    if ( isdefined( var_1 ) )
        wait( var_1 );

    var_2 = getdvarint( "scr_game_forceuav" );
    var_3 = "normal_radar";
    var_4 = 1;
    var_5 = 0;

    switch ( var_2 )
    {
        case 3:
            var_3 = "normal_radar";
            break;
        case 5:
            var_3 = "fast_radar";
            var_4 = 2;
            break;
        case 6:
            var_3 = "constant_radar";
            var_5 = 1;
            break;
        default:
            break;
    }

    if ( level.teambased )
    {
        foreach ( var_7 in level.teamnamelist )
        {
            level.radarmode[var_7] = var_3;
            level.activeuavs[var_7] = var_4;
            level.activeadvanceduavs[var_7] = var_5;
            level.allassassin_initteamlist = level.teamnamelist.size;
            _setteamradarstrength( var_7, var_2 );
        }
    }
    else
    {
        var_4 = var_2;
        level.radarmode[var_0.guid] = var_3;
        var_0.radarstrength = var_4;
        level.activeuavs[var_0.guid + "_radarStrength"] = var_4;
        level.activeadvanceduavs[var_0.guid] = var_5;
        level.allassassin_initteamlist = level.teamnamelist.size;
        updateplayersuavstatus();
    }
}

_id_12A1C( var_0, var_1, var_2 )
{
    if ( !isdefined( var_2 ) )
        return;

    var_3 = _id_12A1D( var_0, var_1 );

    foreach ( var_5 in var_3 )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "dangerNotifyPlayer" ) )
            self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "dangerNotifyPlayer" ) ]]( var_5, var_2, 1 );
    }
}

_id_12A1D( var_0, var_1 )
{
    var_2 = [];
    var_3 = level.teamdata[var_0]["players"];

    foreach ( var_5 in var_3 )
    {
        if ( !isdefined( var_5 ) || !var_5 scripts\cp_mp\utility\player_utility::_isalive() || var_5 scripts\cp_mp\utility\player_utility::_isalive() && istrue( var_5.gulag ) )
            continue;

        var_6 = scripts\common\utility::playersincylinder( var_5.origin, var_1, var_3 );

        foreach ( var_8 in var_6 )
        {
            if ( var_2.size > 0 )
            {
                var_9 = _id_12A1E( var_8, var_2 );

                if ( istrue( var_9 ) )
                    continue;
            }

            var_2[var_2.size] = var_8;
        }
    }

    return var_2;
}

_id_12A1E( var_0, var_1 )
{
    var_2 = 0;

    foreach ( var_4 in var_1 )
    {
        if ( isdefined( var_4 ) && var_0 == var_4 )
        {
            var_2 = 1;
            break;
        }
    }

    return var_2;
}
