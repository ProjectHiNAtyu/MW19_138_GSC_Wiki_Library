// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

playerzombiewaittillinputreturn( var_0 )
{
    if ( !isdefined( level._id_130AB ) )
        level._id_130AB = [];
}

_id_12B48( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "faux_spawn" );
    self endon( "end_launcher" );
    var_1 = modifyvehicledamage( var_0 );

    if ( var_1 == "mag_xmike109" )
        return;

    var_2 = modifyvehicletoplayerdamage( var_1 );
    thread play_gas_sequence( var_0, var_1, var_2 );
}

emp_target_list()
{
    self waittill( "end_launcher" );
    wait 6;
    self notify( "cleanupXMike109ImpactWatcher" );
}

play_gas_sequence( var_0, var_1, var_2 )
{
    self notify( "cleanupXMike109ImpactWatcher" );
    self endon( "disconnect" );
    self endon( "cleanupXMike109ImpactWatcher" );
    childthread emp_target_list();

    if ( var_1 == "default" )
        return;

    for (;;)
    {
        self waittill( "bullet_first_impact", var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 );

        if ( var_0 != var_7 )
            continue;

        nuke_hostmigration_waittillhostmigrationdone( var_3, var_4, var_10, var_5, var_6, var_7, var_8, var_9, var_2, var_1 );
    }
}

nuke_hostmigration_waittillhostmigrationdone( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    var_10 = _id_12019( var_4, var_9, var_0, var_1, var_3, var_6 );
    var_11 = _id_122EC( var_7, var_6, var_9, var_5, var_10, var_3 );

    if ( _id_11FF4( var_0 ) )
    {
        var_11 delete();
        return;
    }
    else if ( _id_12007( var_0, var_10 ) )
        linktoent( var_11, var_0, var_1 );

    if ( isdefined( var_8 ) )
        [[ var_8 ]]( var_11, var_0, var_1, var_2, var_4, var_10 );
}

play_found_leads_counting_building_one( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = 0.1;
    var_0.grenade = magicgrenademanual( "semtex_xmike109_mp", var_0.origin, ( 0, 0, 0 ), var_6 );
    var_0.grenade.angles = var_0.angles;
    var_0.grenade linkto( var_0, "tag_origin" );
    thread waitforremoteend( var_0, var_6, var_3 );
}

play_found_leads_counting_building_three( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    thread waitforreturntobattlestance( var_0, var_1, var_2, var_3, var_5 );
}

play_found_leads_counting_building_two( var_0, var_1, var_2, var_3, var_4, var_5 )
{

}

waitforremoteend( var_0, var_1, var_2 )
{
    self endon( "disconnect" );
    var_0 endon( "entitydeleted" );
    var_0.grenade scripts\engine\utility::_id_12E59( var_1, "explode" );
    var_0 setscriptablepartstate( "effects", "explode" );
    var_3 = getcompleteweaponname( "semtex_xmike109_mp" );
    var_4 = getcompleteweaponname( "semtex_xmike109_splash_mp" );
    var_3.teamclearextractplunder = var_0.weapon;
    var_4.teamclearextractplunder = var_0.weapon;
    glassradiusdamage( var_0.origin, 150, 50, 1 );

    if ( isdefined( var_0.stuckenemyentity ) && isalive( var_0.stuckenemyentity ) )
    {
        var_0.stuckenemyentity scripts\cp_mp\utility\damage_utility::isteameliminated();
        var_0.stuckenemyentity dodamage( 140, var_0.origin, self, self, "MOD_EXPLOSIVE", var_3, var_2 );
        var_0.stuckenemyentity scripts\cp_mp\utility\damage_utility::isteamextracted();
    }

    getplaylistname( var_0.origin, 9, 35, 15, 25, 60, 14, self, "MOD_EXPLOSIVE", var_4 );
    wait 0.4;

    if ( !var_0 _id_12BC2() )
        return;

    var_0 delete();
}

waitforreturntobattlestance( var_0, var_1, var_2, var_3, var_4 )
{
    if ( istrue( var_0.propwaitminigamefalltimer ) )
    {
        var_0 setscriptablepartstate( "effects", "reflectThermite" );
        _id_12E1B( var_0 );
    }

    var_0 setscriptablepartstate( "effects", "burn" );
    thread _id_126ED( var_0 );
    thread _id_126EA( var_0 );
    thread _id_126E9( var_0 );
}

_id_12E1B( var_0 )
{
    var_0 endon( "stuckWaitTimeout" );
    var_0 thread waitfunc();
    var_0 waittill( "missile_stuck", var_1, var_2 );

    if ( isdefined( var_1 ) )
    {
        linktoent( var_0, var_1, var_2 );
        var_0.checkcarpuncherprogress = 1;
    }
}

waitfunc()
{
    wait 3;

    if ( isdefined( self ) )
        self notify( "stuckWaitTimeout" );
}

_id_126ED( var_0 )
{
    self endon( "disconnect" );
    var_0 endon( "entitydeleted" );
    var_1 = getcompleteweaponname( "thermite_xmike109_mp" );
    var_1.teamclearextractplunder = var_0.weapon;

    if ( isdefined( var_0.stuckenemyentity ) && isalive( var_0.stuckenemyentity ) )
    {
        if ( var_0.stuckenemyentity scripts\cp_mp\vehicles\vehicle::isvehicle() || isdefined( var_0.stuckenemyentity.classname ) && var_0.stuckenemyentity.classname == "misc_turret" )
            var_2 = 0.95;
        else
            var_2 = 0.25;

        if ( istrue( var_0.checkcarpuncherprogress ) )
            var_0.stuckenemyentity dodamage( 80, var_0.origin, self, var_0, "MOD_FIRE", var_1 );

        var_3 = int( 3.0 / var_2 );

        while ( isdefined( var_0 ) && isdefined( var_0.stuckenemyentity ) && isalive( var_0.stuckenemyentity ) && var_3 >= 0 )
        {
            var_0.stuckenemyentity scripts\cp_mp\utility\damage_utility::isteameliminated();
            var_0.stuckenemyentity dodamage( 3, var_0.origin, self, var_0, "MOD_FIRE", var_1 );
            var_0.stuckenemyentity scripts\cp_mp\utility\damage_utility::isteamextracted();
            var_3--;
            wait( var_2 );
        }
    }
}

_id_126EA( var_0 )
{
    self endon( "disconnect" );
    var_0 endon( "entitydeleted" );
    var_1 = int( 12.0 );
    var_2 = getcompleteweaponname( "thermite_xmike109_radius_mp" );
    var_2.teamclearextractplunder = var_0.weapon;
    var_0._id_126EB = var_2.basename;

    while ( var_1 > 0 )
    {
        if ( isdefined( var_0.stuckenemyentity ) && isalive( var_0.stuckenemyentity ) )
            var_0.stuckenemyentity scripts\cp_mp\utility\damage_utility::adddamagemodifier( "thermite25mmStuck", 0, 0, ::_id_126E0 );

        var_0 radiusdamage( var_0.origin, 50, 2, 2, self, "MOD_FIRE", var_2 );

        if ( isdefined( var_0.stuckenemyentity ) && isalive( var_0.stuckenemyentity ) )
            var_0.stuckenemyentity scripts\cp_mp\utility\damage_utility::removedamagemodifier( "thermite25mmStuck", 0 );

        var_1--;
        wait 0.25;
    }
}

_id_126E0( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    if ( !isdefined( var_0 ) )
        return 1;

    if ( !isdefined( var_0._id_126EB ) || var_0._id_126EB != "thermite_xmike109_radius_mp" )
        return 1;

    if ( !isdefined( var_0.stuckenemyentity ) || var_0.stuckenemyentity != var_2 )
        return 1;

    return 0;
}

_id_126E9( var_0 )
{
    var_0 endon( "entitydeleted" );
    wait 3.0;

    if ( !var_0 _id_12BC2() )
        return;

    var_0 setscriptablepartstate( "effects", "burnout" );
    var_0 setscriptablepartstate( "visibility", "hide" );
    wait( randomfloatrange( 0.3, 2.0 ) );

    if ( !var_0 _id_12BC2() )
        return;

    wait( randomfloatrange( 2, 3 ) );
    var_0 delete();
}

_id_122EC( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( var_4 && var_2 == "thermal" )
    {
        var_6 = x1opsrespawnselection( var_5, var_1, var_0, 1 );
        var_7 = var_0 + var_5 * 10;
        var_8 = magicgrenademanual( "xmike109_grenade", var_7, var_6, 10 );
        var_8.propwaitminigamefalltimer = 1;
        playfx( scripts\engine\utility::getfx( "xmike109ThermiteBounce" ), var_0, var_5 );
    }
    else
    {
        var_8 = spawn( "script_model", var_0 );
        var_8 setmodel( "weapon_wm_sn_xmike109_projectile" );
        var_8.origin = var_0;

        if ( var_4 )
        {
            var_6 = x1opsrespawnselection( var_5, var_1, var_0, 0 );
            var_8 physicslaunchserver( var_0, var_6 );
        }
    }

    var_8.angles = vectortoangles( var_1 );
    var_8 _id_11E9A( var_2 );
    var_8.owner = self;
    var_8.blockdrive = var_2;
    var_8.weapon = var_3;
    var_8.recharge_equipment_update_slot = 1;
    var_8 thread waitforplayerstospawn();
    set_initial_goalheight( var_8 );
    return var_8;
}

_id_11E9A( var_0 )
{
    switch ( var_0 )
    {
        case "thermal":
            thread _id_11E9B( 3.5 );
            self.getbrgametypedata = 0;
            break;
        case "explosive":
            self.getbrgametypedata = 0;
            break;
        default:
            self.getbrgametypedata = 1;
    }
}

_id_11E9B( var_0 )
{
    self endon( "entitydeleted" );
    wait( var_0 );
    self.getbrgametypedata = 1;
    set_initial_goalheight();
}

set_initial_goalheight( var_0 )
{
    if ( isdefined( var_0 ) )
        var_1 = [ var_0 ];
    else
        var_1 = [];

    foreach ( var_3 in level._id_130AB )
    {
        if ( !isdefined( var_3 ) )
            continue;

        if ( isdefined( var_3 ) )
        {
            if ( var_1.size >= 24 && var_3.getbrgametypedata )
            {
                var_3 delete();
                continue;
            }

            var_1[var_1.size] = var_3;
        }
    }

    level._id_130AB = var_1;
}

modifyvehicledamage( var_0 )
{
    var_1 = "";

    foreach ( var_3 in var_0.attachments )
    {
        if ( issubstr( var_3, "calcust1" ) )
        {
            var_1 = "calcust1_xmike109";
            break;
        }

        if ( issubstr( var_3, "calcust2" ) )
        {
            var_1 = "calcust2_xmike109";
            break;
        }
    }

    switch ( var_1 )
    {
        case "calcust2_xmike109":
            return "thermal";
        case "calcust1_xmike109":
            return "explosive";
        default:
            return "default";
    }
}

modifyvehicletoplayerdamage( var_0 )
{
    switch ( var_0 )
    {
        case "thermal":
            return ::play_found_leads_counting_building_three;
        case "explosive":
            return ::play_found_leads_counting_building_one;
        default:
            return ::play_found_leads_counting_building_two;
    }
}

_id_12019( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( var_0 ) )
        var_0 = "";

    if ( var_0 == "riotshield" )
        return 1;

    if ( var_1 != "thermal" )
        return 0;

    if ( !isdefined( var_2 ) && isdefined( var_3 ) )
        return 1;

    if ( raid_player_start_pos_array( var_2 ) || raid_objective_cleanup_func( var_2 ) )
        return 1;

    if ( propminigameupdateshowloser( var_2 ) || propminigameupdates( var_2 ) )
        return 0;

    if ( isdefined( var_2 ) )
    {
        if ( var_2 scripts\cp_mp\vehicles\vehicle::isvehicle() )
            return 0;

        if ( isdefined( var_2.equipmentref ) && var_2.equipmentref == "equip_tac_cover" )
            return 0;
    }

    switch ( var_0 )
    {
        case "glass_solid":
        case "glass_pane":
        case "riotshield":
            return 1;
        default:
            var_6 = abs( vectordot( var_5, var_4 ) );

            if ( var_6 < 0.2 )
            {
                return 1;
                return;
            }

            return 0;
            return;
    }
}

x1opsrespawnselection( var_0, var_1, var_2, var_3 )
{
    if ( var_3 )
    {
        var_4 = 1500;
        var_5 = 500;
        var_6 = 150;
    }
    else
    {
        var_4 = 500;
        var_5 = 500;
        var_6 = 500;
    }

    var_7 = scripts\engine\math::vector_reflect( var_1, var_0 );
    var_7 = vectorlerp( var_7, var_0, 0.2 );
    var_8 = abs( vectordot( var_1, var_0 ) );

    if ( var_8 < 0.2 )
    {
        var_8 = scripts\engine\math::normalize_value( 0, 0.2, var_8 );
        var_9 = scripts\engine\math::factor_value( var_4, var_5, var_8 );
    }
    else
    {
        var_8 = scripts\engine\math::normalize_value( 0.2, 1, var_8 );
        var_9 = scripts\engine\math::factor_value( var_5, var_6, var_8 );
    }

    var_7 = var_7 * var_9;
    return var_7;
}

_id_11FF4( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( isagent( var_0 ) && var_0 prepdoorsforunload() && !isalive( var_0 ) && !isdefined( var_0 getcorpseentity() ) )
        return 1;

    return 0;
}

_id_12007( var_0, var_1 )
{
    if ( var_1 || !isdefined( var_0 ) )
        return 0;

    if ( isdefined( var_0.classname ) && var_0.classname == "weapon_scavenger_bag_mp" )
        return 0;

    return 1;
}

prepdoorsforunload()
{
    return istrue( isdefined( self.unittype ) && self.unittype == "suicidebomber" );
}

linktoent( var_0, var_1, var_2 )
{
    if ( ( isplayer( var_1 ) || isagent( var_1 ) ) && !isalive( var_1 ) )
    {
        var_3 = var_1 getcorpseentity();

        if ( isdefined( var_3 ) )
            var_1 = var_3;
    }

    if ( isplayer( var_1 ) )
        var_0 hidefromplayer( var_1 );

    if ( isdefined( var_2 ) )
        var_0 linkto( var_1, var_2 );
    else
        var_0 linkto( var_1 );

    if ( delay_show_balloon( var_1 ) )
    {
        var_0.stuckenemyentity = var_1;
        var_0 thread _id_11A3C( var_1 );
    }

    if ( !istrue( var_0.propwaitminigamefalltimer ) )
        var_0 notsolid();

    var_0 thread waitforstuck( var_1 );
    var_0 thread waitforplayerstoconnect_countdown( var_1, "vehicle_deleted" );
    var_0 thread waitforplayerstoconnect_countdown( var_1, "detonated" );
    var_0 thread waitforplayerstoconnect_countdown( var_1, "beginC130" );
}

_id_12BC2()
{
    if ( isdefined( self ) && istrue( self.recharge_equipment_update_slot ) )
        return 1;
    else
    {

    }
}

_id_11A3C( var_0 )
{
    self endon( "entitydeleted" );
    var_0 scripts\engine\utility::_id_12E40( "entitydeleted", "death", "disconnect" );

    if ( !_id_12BC2() )
        return;

    self.stuckenemyentity = undefined;

    if ( isdefined( var_0 ) && isdefined( var_0.nocorpse ) )
        self delete();
}

waitforstuck( var_0 )
{
    self endon( "entitydeleted" );

    if ( isagent( var_0 ) )
        var_0 waittill( "entitydeleted" );
    else
        var_0 scripts\engine\utility::_id_12E3F( "entitydeleted", "disconnect" );

    if ( !_id_12BC2() )
        return;

    waitforstreamsynccomplete();
}

waitforstreamsynccomplete( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = ( 0, 0, 100 );

    if ( self islinked() )
        self unlink();

    if ( !istrue( self.propwaitminigamefalltimer ) )
        self solid();

    self physicslaunchserver( self.origin, var_0 );
}

waitforplayerstoconnect_countdown( var_0, var_1 )
{
    self endon( "entitydeleted" );
    var_0 waittill( var_1 );

    if ( !_id_12BC2() )
        return;

    self delete();
}

waitforplayerstospawn()
{
    self waittill( "entitydeleted" );

    if ( isdefined( self.grenade ) )
        self.grenade delete();
}

raid_player_start_pos_array( var_0 )
{
    if ( !isplayer( var_0 ) )
        return 0;

    if ( scripts\mp\utility\player::isenemy( var_0 ) )
        return 0;
    else
        return 1;
}

propminigameupdateshowloser( var_0 )
{
    if ( !isplayer( var_0 ) )
        return 0;

    if ( scripts\mp\utility\player::isenemy( var_0 ) )
        return 1;
    else
        return 0;
}

raid_objective_cleanup_func( var_0 )
{
    if ( !isagent( var_0 ) )
        return 0;

    if ( isdefined( var_0.agentteam ) && self.team == var_0.agentteam )
        return 1;

    return 0;
}

propminigameupdates( var_0 )
{
    if ( !isagent( var_0 ) )
        return 0;

    if ( isdefined( var_0.agentteam ) && self.team == var_0.agentteam )
        return 0;

    return 1;
}

delay_show_balloon( var_0 )
{
    var_1 = 0;

    if ( isplayer( var_0 ) || isagent( var_0 ) )
        var_1 = 1;

    if ( var_0 scripts\cp_mp\vehicles\vehicle::isvehicle() )
        var_1 = 1;

    if ( isdefined( var_0.classname ) )
    {
        if ( var_0.classname == "misc_turret" )
            var_1 = 1;

        if ( var_0.classname == "script_model" )
        {
            if ( isdefined( var_0.streakinfo ) && ( var_0.streakinfo.streakname == "uav" || var_0.streakinfo.streakname == "gunship" ) )
                var_1 = 1;
        }
    }

    if ( isdefined( var_0.equipmentref ) )
    {
        if ( var_0.equipmentref == "equip_tac_cover" )
            var_1 = 1;
    }

    return var_1;
}
