// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

sat_signal_lost_nag()
{
    level.riotshieldmodeltag = getdvarfloat( "scr_little_bird_dmg_factor_fuselage", 1.0 );
    level.risk_currentflagsactive = getdvarfloat( "scr_little_bird_dmg_factor_tail_stabilizer", 1.0 );
    level.riotshieldswitchawaytimer = getdvarfloat( "scr_little_bird_dmg_factor_main_rotor", 1.2 );
    level.riotshieldtaken = getdvarfloat( "scr_little_bird_dmg_factor_tail_rotor", 1.0 );
    level.riotshieldswitchaway = getdvarfloat( "scr_little_bird_dmg_factor_landing_gear", 0.5 );
    level.riotshieldiscurrentprimary = getdvarfloat( "scr_little_bird_dmg_factor_driverless_collision", 3.0 );
    level.risk_flagspawnmaxradius = getdvarfloat( "scr_little_bird_impulse_dmg_threshold_high", 0.9 );
    level.risk_flagspawndebugobjicons = getdvarfloat( "scr_little_bird_impulse_dmg_threshold_mid", 0.9 );
    level.risk_flagspawncountchange = getdvarfloat( "scr_little_bird_impulse_dmg_threshold_low", 0.1 );
    level.risk_currentflagstier = getdvarfloat( "scr_little_bird_impulse_dmg_factor_low", 0.1 );
    level.risk_flagspawncount = getdvarfloat( "scr_little_bird_impulse_dmg_factor_mid_low", 0.2 );
    level.risk_currentlocsinuse = getdvarfloat( "scr_little_bird_impulse_dmg_factor_mid_high", 0.75 );
    level.risk_flagspawnmincount = getdvarfloat( "scr_little_bird_dmg_pitch_roll_threshold", 55.0 );
    level.risk_flagspawnminactivetospawn = getdvarfloat( "scr_little_bird_dmg_pitch_roll_factor", 10.0 );
    level.risk_flagspawnminradius = getdvarfloat( "scr_little_bird_wood_surf_dmg_scalar", 0.6 );
    var_0 = scripts\cp_mp\vehicles\vehicle::vehicle_getleveldataforvehicle( "little_bird_mg", 1 );
    var_0.destroycallback = ::sat_piece_think;
    var_0.canfly = 1;
    sat_wait_for_connection_think();
    sat_wait_for_activated_think();
    sat_wait_for_controller();
    sat_sound_think();
    sat_signal_shift();
    sat_wait_for_access_card();

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "little_bird_mg", "init" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "little_bird_mg", "init" ) ]]();

    sat_wait_for_piece_added();
    sat_wait_for_antenna();
}

sat_wait_for_antenna()
{
    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "little_bird_mg", "initLate" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "little_bird_mg", "initLate" ) ]]();
}

sat_wait_for_connection_think()
{
    var_0 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforvehicle( "little_bird_mg", 1 );
    var_0.enterstartcallback = ::sat_loop;
    var_0.enterendcallback = ::sat_hack_paused_monitor;
    var_0.exitstartcallback = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_exitstartcallback;
    var_0.exitendcallback = ::sat_missing_pieces;
    var_0.reentercallback = ::saw_3_angles;
    var_0.restrictions = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getcombatpassengerrestrictions();
    var_0.exitextents["front"] = 95;
    var_0.exitextents["back"] = 195;
    var_0.exitextents["left"] = 55;
    var_0.exitextents["right"] = 55;
    var_0.exitextents["top"] = -5;
    var_0.exitextents["bottom"] = 117;
    var_0.allowairexit = 1;
    var_1 = "front";
    var_0.exitoffsets[var_1] = ( 85, 0, -40 );
    var_0.exitdirections[var_1] = "front";
    var_1 = "front_right";
    var_0.exitoffsets[var_1] = ( 40, -17, -40 );
    var_0.exitdirections[var_1] = "right";
    var_1 = "middle_left";
    var_0.exitoffsets[var_1] = ( -40, 17, -45 );
    var_0.exitdirections[var_1] = "left";
    var_1 = "middle_right";
    var_0.exitoffsets[var_1] = ( -40, -17, -45 );
    var_0.exitdirections[var_1] = "right";
    var_1 = "back";
    var_0.exitoffsets[var_1] = ( -85, 0, -65 );
    var_0.exitdirections[var_1] = "back";
    var_2 = [ "pilot", "copilot", "br_gunner", "bl_gunner" ];
    var_3 = "pilot";
    var_4 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforseat( "little_bird_mg", var_3, 1 );
    var_4.seatswitcharray = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_generateseatswitcharray( var_3, var_2 );
    var_4.exitids = [ var_3, "middle_left", "front_right", "front", "back" ];
    var_0.exitoffsets[var_3] = ( 40, 17, -40 );
    var_0.exitdirections[var_3] = "left";
    var_4.animtag = "tag_seat_0";
    var_4.restrictions = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getdriverrestrictions();
    var_4.spawnpriority = 10;
    var_4.stoppingpower_clearhcrongameended = "ping_vehicle_pilot";
    var_3 = "bl_gunner";
    var_4 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforseat( "little_bird_mg", var_3, 1 );
    var_4.seatswitcharray = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_generateseatswitcharray( var_3, var_2 );
    var_4.exitids = [ "middle_left", "pilot", "middle_right", "front", "back" ];
    var_4.restrictions = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getturretpassengerrestrictions();
    var_4.viewclamps["top"] = 180;
    var_4.viewclamps["bottom"] = 180;
    var_4.viewclamps["left"] = 120;
    var_4.viewclamps["right"] = 105;
    var_4.stoppingpower_clearhcrongameended = "ping_vehicle_rider";
    var_3 = "copilot";
    var_4 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforseat( "little_bird_mg", var_3, 1 );
    var_4.seatswitcharray = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_generateseatswitcharray( var_3, var_2 );
    var_4.exitids = [ var_3, "middle_right", "front_right", "middle_left", "front", "back" ];
    var_0.exitoffsets[var_3] = ( 40, -17, -40 );
    var_0.exitdirections[var_3] = "right";
    var_4.viewclamps["top"] = 27;
    var_4.viewclamps["bottom"] = 42;
    var_4.viewclamps["left"] = 125;
    var_4.viewclamps["right"] = 125;
    var_4.animtag = "tag_seat_1";
    var_4.stoppingpower_clearhcrongameended = "ping_vehicle_rider";
    var_3 = "br_gunner";
    var_4 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforseat( "little_bird_mg", var_3, 1 );
    var_4.seatswitcharray = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_generateseatswitcharray( var_3, var_2 );
    var_4.exitids = [ "middle_right", "front_right", "middle_left", "front", "back" ];
    var_4.restrictions = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getturretpassengerrestrictions();
    var_4.viewclamps["top"] = 180;
    var_4.viewclamps["bottom"] = 180;
    var_4.viewclamps["left"] = 105;
    var_4.viewclamps["right"] = 120;
    var_4.stoppingpower_clearhcrongameended = "ping_vehicle_rider";
}

sat_wait_for_activated_think()
{
    var_0 = scripts\cp_mp\vehicles\vehicle_interact::vehicle_interact_getleveldataforvehicle( "little_bird_mg", 1 );
    scripts\cp_mp\vehicles\vehicle_interact::_id_12C7B( "little_bird_mg", "single", [ "pilot", "copilot", "bl_gunner", "br_gunner" ] );
}

sat_signal_shift()
{
    var_0 = _accessreaderscriptableused::_id_12BF1( "little_bird_mg", 1 );
    var_0.br_onvehicledeath = 1.66666;
    var_0.get_random_station_names_on_track = 0.83333;
    var_0.gate_closes = 350;
    var_0.gate_flares_think = 525;
    var_0.gasvfxstructs = 875;
    var_0.gcd = 7.5;
    var_0.generate_achievementid = 30;
    var_0.gatherstadiumlocs = 60;
    var_0.generatecodestoshow = 0;
    var_0.generatenumbercode = 0;
    var_0.generate_solution = 0;
}

sat_wait_for_controller()
{
    var_0 = scripts\cp_mp\utility\vehicle_omnvar_utility::_id_12D33( "little_bird_mg", 1 );
    var_0.blockade_barbwires["flares"] = 1;
    var_0.id = 17;
    var_0.seatids["pilot"] = 0;
    var_0.seatids["copilot"] = 1;
    var_0.seatids["br_gunner"] = 2;
    var_0.seatids["bl_gunner"] = 3;
    var_0._id_11B87[0] = 0;
    var_0._id_11B87[1] = 1;
    var_0._id_11B88["pilot"]["little_bird_mg_mp"] = 0;
    var_0._id_11B88["pilot"]["tur_gun_little_bird_left_mp"] = 0;
    var_0._id_11B88["pilot"]["tur_gun_little_bird_right_mp"] = 1;
    var_0._id_11B88["copilot"]["little_bird_mg_mp"] = 0;
    var_0._id_11B88["copilot"]["tur_gun_little_bird_left_mp"] = 0;
    var_0._id_11B88["copilot"]["tur_gun_little_bird_right_mp"] = 1;
    var_0._id_11B88["br_gunner"]["little_bird_mg_mp"] = 0;
    var_0._id_11B88["br_gunner"]["tur_gun_little_bird_left_mp"] = 0;
    var_0._id_11B88["br_gunner"]["tur_gun_little_bird_right_mp"] = 1;
    var_0._id_11B88["bl_gunner"]["little_bird_mg_mp"] = 0;
    var_0._id_11B88["bl_gunner"]["tur_gun_little_bird_left_mp"] = 0;
    var_0._id_11B88["bl_gunner"]["tur_gun_little_bird_right_mp"] = 1;
}

sat_sound_think()
{
    if ( level.gametype == "br" )
        var_0 = 3000;
    else
        var_0 = 2500;

    scripts\cp_mp\vehicles\vehicle_damage::_id_12C4B( "little_bird_mg", var_0 );
    var_1 = scripts\cp_mp\vehicles\vehicle_damage::vehicle_damage_getleveldataforvehicle( "little_bird_mg" );
    var_1.class = "medium_heavy";
    var_2 = scripts\cp_mp\vehicles\vehicle_damage::_id_12C2E( "little_bird_mg", "heavy" );
    var_2.stoppingpower_clearhcronperkscleared = ::saveendgamelocals;
    var_2.stoppingpower_isvalidprimaryoralt = ::saveweaponstates;
    scripts\cp_mp\vehicles\vehicle_damage::_id_12C1F( "little_bird_mg" );
    scripts\cp_mp\vehicles\vehicle_damage::_id_12C57( "little_bird_mg", 12 );
    scripts\cp_mp\vehicles\vehicle_damage::_id_12C50( "little_bird_mg", ::sat_get_piece );
    scripts\cp_mp\vehicles\vehicle_damage::_id_12C5A( "little_bird_mg_mp", 5 );
}

sat_wait_for_access_card()
{
    level._effect["little_bird_mg_explode"] = loadfx( "vfx/iw8/prop/scriptables/vfx_vh8_mil_air_lbravo_debris.vfx" );
}

sat_computer_think_new( var_0, var_1 )
{
    if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, 0, 0 );

    var_0.modelname = "veh8_mil_air_lbravo_mp_flyable_mg";
    var_0.targetname = "little_bird_mg";
    var_0.vehicletype = "lbravo_physics_mp";
    var_0.cannotbesuspended = 1;
    var_2 = scripts\cp_mp\vehicles\vehicle_tracking::_spawnvehicle( var_0, var_1 );

    if ( !isdefined( var_2 ) )
        return undefined;

    var_2.carepackage_spawn = gettime();
    var_2.flareslive = [];
    var_2.isdying = 1;

    if ( level.gametype == "br" )
        var_2.isdroppablepickup = 35;
    else
        var_2.isdroppablepickup = 10;

    var_3 = sat_create_interaction( var_2, "tur_gun_little_bird_right_mp", "weapon_wm_mg_dblmg_air", "tag_turret_right", ( 16, -11, 0 ) );
    scripts\cp_mp\vehicles\vehicle::_id_12CDB( var_2, var_3, getcompleteweaponname( "tur_gun_little_bird_right_mp" ) );
    var_4 = sat_create_interaction( var_2, "tur_gun_little_bird_left_mp", "weapon_wm_mg_dblmg_air", "tag_turret_left", ( 16, 0, 0 ) );
    scripts\cp_mp\vehicles\vehicle::_id_12CDB( var_2, var_4, getcompleteweaponname( "tur_gun_little_bird_left_mp" ) );
    scripts\cp_mp\vehicles\vehicle::_id_12C1A( var_2, "little_bird_mg", var_0 );
    var_2.objweapon = getcompleteweaponname( "little_bird_mg_mp" );
    _applydvarstosettings::_id_12C0D( var_2 );
    scripts\cp_mp\vehicles\vehicle::_id_12C1B( var_2, var_0 );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "little_bird_mg", "create" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "little_bird_mg", "create" ) ]]( var_2 );

    var_2 thread sat_setup_interactions();
    var_2 thread sandbox_combat_area();
    return var_2;
}

sandbox_combat_area()
{
    self endon( "death" );
    self vehphys_enablecollisioncallback( 1 );

    for (;;)
    {
        self waittill( "collision", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 );

        if ( gettime() - self.carepackage_spawn < 5000 )
            continue;

        if ( isdefined( var_7 ) && isdefined( var_7.helperdronetype ) && var_7.helperdronetype == "radar_drone_recon" )
            continue;

        var_9 = 1.0;

        switch ( var_8 )
        {
            case 0:
                var_9 = level.riotshieldmodeltag;
                break;
            case 1:
                var_9 = level.risk_currentflagsactive;
                break;
            case 2:
                var_9 = level.riotshieldswitchawaytimer;
                break;
            case 3:
                var_9 = level.riotshieldtaken;
                break;
            case 4:
                var_9 = level.riotshieldswitchaway;
                break;
        }

        var_10 = var_6 * var_9;
        var_11 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getdriver( self );

        if ( !isdefined( var_11 ) )
            var_10 = var_10 * level.riotshieldiscurrentprimary;

        var_12 = self.angles[0];

        if ( var_12 > 180 )
            var_12 = var_12 - 360;

        if ( abs( var_12 > level.risk_flagspawnmincount ) )
            var_10 = var_10 * level.risk_flagspawnminactivetospawn;

        var_13 = self.angles[2];

        if ( var_13 > 180 )
            var_13 = var_13 - 360;

        if ( abs( var_13 > level.risk_flagspawnmincount ) )
            var_10 = var_10 * level.risk_flagspawnminactivetospawn;

        var_14 = 0;

        if ( var_10 > level.risk_flagspawnmaxradius )
            var_14 = self.maxhealth;
        else if ( var_10 > level.risk_flagspawndebugobjicons )
        {
            var_15 = level.risk_flagspawnmaxradius - level.risk_flagspawndebugobjicons;
            var_16 = ( var_10 - level.risk_flagspawndebugobjicons ) / var_15;
            var_17 = self.maxhealth * level.risk_flagspawncount;
            var_18 = self.maxhealth * level.risk_currentlocsinuse;
            var_14 = scripts\engine\math::lerp( var_17, var_18, var_16 );
        }
        else if ( var_10 > level.risk_flagspawncountchange )
            var_14 = self.maxhealth * level.risk_currentflagstier;

        if ( var_14 > 0 )
        {
            if ( isdefined( var_11 ) && var_3 == 11534336 )
                var_14 = var_14 * level.risk_flagspawnminradius;

            scripts\cp_mp\vehicles\vehicle_damage::_id_12C25( 1 );
            self dodamage( var_14, var_4, undefined, undefined, "MOD_CRUSH" );
            scripts\cp_mp\vehicles\vehicle_damage::_id_12C25( 0 );
        }

        wait 0.5;
    }
}

sat_create_interaction( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = spawnturret( "misc_turret", var_0 gettagorigin( var_3 ), var_1, 0 );
    var_5 linkto( var_0, var_3, var_4, ( 0, 0, 0 ) );
    var_5 setmodel( var_2 );
    var_5 setmode( "sentry_offline" );
    var_5 setsentryowner( undefined );
    var_5 makeunusable();
    var_5 setdefaultdroppitch( 0 );
    var_5 setturretmodechangewait( 1 );
    var_5 hidepart( "tag_scope" );
    var_5 hidepart( "tag_glass_hip" );
    var_5 hidepart( "tag_red_dot_stencil" );
    var_5.angles = var_0.angles;
    var_5.vehicle = var_0;
    var_5.maxhealth = 999999;
    var_5.health = var_5.maxhealth;
    return var_5;
}

sat_piece_think( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
    {
        var_0 = spawnstruct();
        var_0.inflictor = self;
        var_0.objweapon = "little_bird_mg_mp";
        var_0.meansofdeath = "MOD_EXPLOSIVE";
    }

    self notify( "predeath" );
    wait 0.2;
    scripts\cp_mp\vehicles\vehicle_damage::_id_12C43( var_0 );
    waitframe();
    scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_killoccupants( self, var_0 );
    scripts\cp_mp\vehicles\vehicle_damage::vehicle_damage_clearvisuals( undefined, undefined, 1 );
    thread sat_get_signal_strength();

    if ( !istrue( level.suppressvehicleexplosion ) )
    {
        var_2 = self gettagorigin( "tag_detach" );
        var_3 = scripts\engine\utility::ter_op( isdefined( var_0.attacker ), var_0.attacker, self );
        self radiusdamage( var_2, 256, 140, 70, var_3, "MOD_EXPLOSIVE", "little_bird_mg_mp" );
        playfx( scripts\engine\utility::getfx( "little_bird_mg_explode" ), var_2, anglestoforward( self.angles ), anglestoup( self.angles ) );
        playsoundatpos( var_2, "veh_lbravo_explode" );
        earthquake( 0.4, 800, var_2, 0.7 );
        playrumbleonposition( "grenade_rumble", var_2 );
        physicsexplosionsphere( var_2, 500, 200, 1 );
    }
}

sat_get_signal_strength()
{
    scripts\cp_mp\vehicles\vehicle::_id_12C63( self );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "little_bird_mg", "delete" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "little_bird_mg", "delete" ) ]]( self );

    waitframe();
    scripts\cp_mp\vehicles\vehicle::_id_12C64( self );
}

sat_get_piece( var_0 )
{
    thread sat_piece_think( var_0 );
    return 1;
}

saveendgamelocals( var_0, var_1 )
{
    self setscriptablepartstate( "alarm", "engineFailure", 0 );
    scripts\cp_mp\vehicles\vehicle_damage::_id_12C44( var_0, var_1 );
}

saveweaponstates( var_0, var_1 )
{
    self setscriptablepartstate( "alarm", "off", 0 );
    scripts\cp_mp\vehicles\vehicle_damage::_id_12C48( var_0, var_1 );
}

sat_loop( var_0, var_1, var_2, var_3, var_4 )
{
    if ( var_3 isthrowinggrenade() )
    {
        var_4.success = 0;
        return;
    }

    if ( isdefined( var_3.javelin ) )
    {
        if ( isdefined( var_3.javelin.state ) && var_3.javelin.state != "off" || isdefined( var_3.javelin.target ) || isdefined( var_3.javelin.groundlockonent ) )
        {
            var_4.success = 0;
            return;
        }
    }

    var_3 skydive_setbasejumpingstatus( 0 );
    var_3 skydive_setdeploymentstatus( 0 );

    if ( isdefined( var_2 ) )
    {
        if ( var_2 == "br_gunner" )
        {
            scripts\cp_mp\vehicles\vehicle_occupancy::_id_12CB4( var_3, var_4 );
            saw_2_origin( var_0, var_3, var_4, "tur_gun_little_bird_right_mp", var_2, var_1 );
        }
        else if ( var_2 == "bl_gunner" )
        {
            scripts\cp_mp\vehicles\vehicle_occupancy::_id_12CB4( var_3, var_4 );
            saw_2_origin( var_0, var_3, var_4, "tur_gun_little_bird_left_mp", var_2, var_1 );
        }
        else if ( var_1 == "bl_gunner" || var_1 == "br_gunner" )
            scripts\cp_mp\vehicles\vehicle_occupancy::_id_12CB4( var_3, var_4 );
    }

    if ( var_1 == "br_gunner" )
        var_3 scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_giveturret( var_3, "tur_gun_little_bird_right_mp", var_4, 1 );
    else if ( var_1 == "bl_gunner" )
        var_3 scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_giveturret( var_3, "tur_gun_little_bird_left_mp", var_4, 1 );

    if ( istrue( var_0.israllypointvehicle ) )
    {
        foreach ( var_6 in level.players )
        {
            if ( istrue( var_0.revealed ) || var_6.team == var_0.team )
                scripts\mp\objidpoolmanager::objective_playermask_addshowplayer( var_0.marker.objidnum, var_6 );
        }

        foreach ( var_9 in var_0.occupants )
            scripts\mp\objidpoolmanager::objective_playermask_hidefrom( var_0.marker.objidnum, var_9 );

        scripts\mp\objidpoolmanager::objective_playermask_hidefrom( var_0.marker.objidnum, var_3 );
    }
}

sat_hack_paused_monitor( var_0, var_1, var_2, var_3, var_4 )
{
    if ( istrue( var_4.success ) )
    {
        var_3 scripts\cp_mp\parachute::targetteamremaining();
        sat_handle_player_disconnect( var_0, var_1, var_2, var_3, var_4 );
    }

    var_3 skydive_setbasejumpingstatus( 1 );
    var_3 skydive_setdeploymentstatus( 1 );
}

sat_handle_player_disconnect( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = undefined;
    var_6 = undefined;

    if ( isdefined( var_2 ) )
    {
        var_7 = var_2 == "bl_gunner" || var_2 == "br_gunner";
        var_8 = var_1 != "bl_gunner" && var_1 != "br_gunner";

        if ( var_7 && var_8 )
        {
            var_5 = "lbravo_physics_mp";
            var_6 = 7;
        }
    }

    if ( var_1 == "pilot" )
    {
        var_0 setotherent( var_3 );
        var_0 setentityowner( var_3 );
        var_3 controlslinkto( var_0 );
        var_3 thread scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_animateplayer( var_0, var_1, var_2, undefined, var_5, var_6 );
        var_0 thread sat_setup_access_cards( var_3 );
    }
    else if ( var_1 == "br_gunner" )
        saw_2_angles( var_0, var_3, "tur_gun_little_bird_right_mp" );
    else if ( var_1 == "bl_gunner" )
        saw_2_angles( var_0, var_3, "tur_gun_little_bird_left_mp" );
    else
        var_3 thread scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_animateplayer( var_0, var_1, var_2, undefined, var_5, var_6 );

    thread scripts\cp_mp\vehicles\vehicle_occupancy::_id_12CCD( var_4, 1 );
    scripts\cp_mp\utility\vehicle_omnvar_utility::vehomn_updateomnvarsonseatenter( var_0, var_2, var_1, var_3 );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "little_bird_mg", "endEnterInternal", 0 ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "little_bird_mg", "endEnterInternal" ) ]]( var_0, var_1, var_2, var_3, var_4 );
}

saw_2_angles( var_0, var_1, var_2 )
{
    var_3 = scripts\cp_mp\vehicles\vehicle::_id_12C70( var_0, var_2 );
    var_3.owner = var_1;
    var_3 setotherent( var_1 );
    var_3 setentityowner( var_1 );
    var_3 setsentryowner( var_1 );
    var_1 disableturretdismount();
    var_1 controlturreton( var_3 );
}

sat_missing_pieces( var_0, var_1, var_2, var_3, var_4 )
{
    if ( istrue( var_4.success ) )
        sat_piece( var_0, var_1, var_2, var_3, var_4 );
}

sat_piece( var_0, var_1, var_2, var_3, var_4 )
{
    if ( var_1 == "pilot" )
    {
        var_0 notify( "little_bird_driver_exit" );
        var_0 setotherent( undefined );
        var_0 setentityowner( undefined );

        if ( !istrue( var_4.playerdisconnect ) )
            var_3 controlsunlink();
    }

    var_5 = !isdefined( var_2 );
    var_6 = 0;

    if ( isdefined( var_3 ) )
        var_6 = var_3 hasweapon( "tur_gun_little_bird_right_mp" );

    var_7 = 0;

    if ( isdefined( var_3 ) )
        var_7 = var_3 hasweapon( "tur_gun_little_bird_left_mp" );

    if ( var_1 == "br_gunner" || var_5 && var_6 )
        saw_2_origin( var_0, var_3, var_4, "tur_gun_little_bird_right_mp", var_1, var_2 );

    if ( var_1 == "bl_gunner" || var_5 && var_7 )
        saw_2_origin( var_0, var_3, var_4, "tur_gun_little_bird_left_mp", var_1, var_2 );

    if ( !istrue( var_4.playerdisconnect ) )
    {
        if ( istrue( var_4.playerdeath ) )
            var_3 scripts\cp_mp\vehicles\vehicle_occupancy::adddroponplayerdeath();

        var_3 scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_stopanimatingplayer();
        var_8 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_moveplayertoexit( var_3, var_2, var_4 );

        if ( !var_8 )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "vehicle_occupancy", "handleSuicideFromVehicles" ) )
                [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "vehicle_occupancy", "handleSuicideFromVehicles" ) ]]( var_3 );
            else
                var_3 suicide();
        }
        else if ( istrue( var_0.israllypointvehicle ) )
            scripts\mp\objidpoolmanager::objective_playermask_addshowplayer( var_0.marker.objidnum, var_3 );
    }

    scripts\cp_mp\utility\vehicle_omnvar_utility::vehomn_updateomnvarsonseatexit( var_0, var_1, var_2, var_3 );
}

saw_2_origin( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = scripts\cp_mp\vehicles\vehicle::_id_12C70( var_0, var_3 );

    if ( !istrue( var_2.playerdisconnect ) )
    {
        var_1 enableturretdismount();
        var_1 controlturretoff( var_6 );

        if ( !istrue( var_2.playerdeath ) )
            var_1 thread saw_4_angles( var_0, var_2, var_3, 1, var_4, var_5 );
    }

    var_6.owner = undefined;
    var_6 setotherent( undefined );
    var_6 setentityowner( undefined );
    var_6 setsentryowner( undefined );
}

saw_3_angles( var_0, var_1, var_2, var_3, var_4 )
{
    scripts\cp_mp\vehicles\vehicle_occupancy::_id_12CCD( var_4 );
    thread saw_3_origin( var_0, var_1, var_2, var_3, var_4 );
}

saw_3_origin( var_0, var_1, var_2, var_3, var_4 )
{
    if ( !isdefined( level.risk_modifyflagstieronrespawn ) )
        level.risk_modifyflagstieronrespawn = getdvarint( "scr_lbmgTakeTurretOnReenter", 1 ) > 0;

    if ( level.risk_modifyflagstieronrespawn )
    {
        var_4.raceendon = "turretGiveTakeTimeout";
        var_4.raceendnotify = "turretGiveTakeTimeout";
        var_4.success = 1;

        if ( isdefined( var_2 ) )
        {
            if ( var_2 == "br_gunner" )
            {
                var_5 = scripts\cp_mp\vehicles\vehicle_occupancy::_id_12CB4( var_3, var_4 );
                scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_taketurret( var_3, var_0, "tur_gun_little_bird_right_mp", var_4, 1 );

                if ( !var_4.success && isdefined( var_3 ) && var_3 scripts\cp_mp\utility\player_utility::_isalive() )
                    var_3 suicide();

                scripts\cp_mp\vehicles\vehicle_occupancy::_id_12CCE( var_5 );
            }
            else if ( var_2 == "bl_gunner" )
            {
                var_5 = scripts\cp_mp\vehicles\vehicle_occupancy::_id_12CB4( var_3, var_4 );
                scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_taketurret( var_3, var_0, "tur_gun_little_bird_left_mp", var_4, 1 );

                if ( !var_4.success && isdefined( var_3 ) && var_3 scripts\cp_mp\utility\player_utility::_isalive() )
                    var_3 suicide();

                scripts\cp_mp\vehicles\vehicle_occupancy::_id_12CCE( var_5 );
            }
        }

        if ( isdefined( var_3 ) && var_3 scripts\cp_mp\utility\player_utility::_isalive() )
        {
            if ( var_1 == "br_gunner" )
            {
                var_5 = scripts\cp_mp\vehicles\vehicle_occupancy::_id_12CB4( var_3, var_4 );
                scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_giveturret( var_3, "tur_gun_little_bird_right_mp", var_4, 1 );

                if ( !var_4.success && isdefined( var_3 ) && var_3 scripts\cp_mp\utility\player_utility::_isalive() )
                    var_3 suicide();
                else
                    saw_2_angles( var_0, var_3, "tur_gun_little_bird_right_mp" );

                scripts\cp_mp\vehicles\vehicle_occupancy::_id_12CCE( var_5 );
            }
            else if ( var_1 == "bl_gunner" )
            {
                var_5 = scripts\cp_mp\vehicles\vehicle_occupancy::_id_12CB4( var_3, var_4 );
                scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_giveturret( var_3, "tur_gun_little_bird_left_mp", var_4, 1 );

                if ( !var_4.success && isdefined( var_3 ) && var_3 scripts\cp_mp\utility\player_utility::_isalive() )
                    var_3 suicide();
                else
                    saw_2_angles( var_0, var_3, "tur_gun_little_bird_left_mp" );

                scripts\cp_mp\vehicles\vehicle_occupancy::_id_12CCE( var_5 );
            }
        }
    }
}

saw_4_angles( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( isdefined( var_1.raceendon ) )
        var_1 endon( var_1.raceendon );

    if ( istrue( var_3 ) )
        childthread sat_setup_access_card_pickup( var_1, 1.5 );

    var_6 = scripts\cp_mp\vehicles\vehicle::_id_12C70( var_0, var_2 );
    var_7 = undefined;

    if ( scripts\cp_mp\utility\inventory_utility::isswitchingtoweaponwithmonitoring( var_2 ) )
    {
        var_8 = getcompleteweaponname( var_2 );
        scripts\cp_mp\utility\inventory_utility::abortmonitoredweaponswitch( var_8 );
        var_7 = 1;
    }
    else
    {
        self controlturretoff( var_6 );

        if ( self hasweapon( var_2 ) )
        {
            var_9 = scripts\cp_mp\utility\inventory_utility::iscurrentweapon( var_2 );

            if ( var_9 )
            {
                scripts\cp_mp\utility\inventory_utility::_takeweapon( var_2 );

                if ( !_id_1201D( self, var_4, var_5 ) )
                    thread scripts\cp_mp\utility\inventory_utility::forcevalidweapon();
            }
            else
                thread scripts\cp_mp\utility\inventory_utility::getridofweapon( var_2, 1 );
        }

        var_7 = 1;
    }

    if ( isdefined( var_7 ) && !var_7 )
    {
        var_1.success = 0;
        var_1 notify( var_1.raceendnotify );
    }
}

_id_1201D( var_0, var_1, var_2 )
{
    if ( istrue( var_0.isjuggernaut ) )
    {
        if ( isdefined( var_1 ) && var_1 == "br_gunner" && isdefined( var_2 ) && var_2 == "bl_gunner" )
            return 1;

        if ( isdefined( var_1 ) && var_1 == "bl_gunner" && isdefined( var_2 ) && var_2 == "br_gunner" )
            return 1;
    }

    return 0;
}

sat_setup_access_card_pickup( var_0, var_1 )
{
    wait( var_1 );
    var_0.success = 0;
    var_0 notify( var_0.raceendnotify );
}

sat_setup_interactions()
{
    self endon( "death" );

    for (;;)
    {
        if ( !self.isdying )
        {
            wait( self.isdroppablepickup );
            self.isdying = 1;
            var_0 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getdriver( self );

            if ( isdefined( var_0 ) )
                scripts\cp_mp\utility\vehicle_omnvar_utility::vehomn_setammo( "little_bird_mg", "flares", 1, var_0 );
        }

        waitframe();
    }
}

sat_setup_access_cards( var_0 )
{
    self endon( "death" );
    self endon( "little_bird_driver_exit" );
    var_0 endon( "death_or_disconnect" );
    var_0 endon( "vehicle_exit" );
    var_0 notifyonplayercommand( "shoot_flare", "+attack" );
    scripts\cp_mp\utility\vehicle_omnvar_utility::vehomn_setammo( "little_bird_mg", "flares", scripts\engine\utility::ter_op( self.isdying, 1, 0 ), var_0 );

    for (;;)
    {
        var_0 waittill( "shoot_flare" );

        if ( !self.isdying )
        {
            self playsoundtoplayer( "lbravo_noflares_warning", var_0 );
            continue;
        }

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "flares", "playFx" ) )
            self thread [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "flares", "playFx" ) ]]();

        var_1 = undefined;

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "flares", "deploy" ) )
            var_1 = self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "flares", "deploy" ) ]]();

        if ( isdefined( level.missiles ) )
        {
            foreach ( var_3 in level.missiles )
            {
                if ( !isdefined( var_3.scriptable_carriable_damage_internal ) || var_3.scriptable_carriable_damage_internal != self )
                    continue;

                var_4 = distance( self.origin, var_3.origin );

                if ( var_4 < 4000 )
                {
                    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "player", "giveUnifiedPoints" ) )
                        var_0 thread [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "player", "giveUnifiedPoints" ) ]]( "manual_flare_missile_redirect" );

                    scripts\cp_mp\utility\weapon_utility::clearprojectilelockedon( var_3 );
                    var_3 missile_settargetent( var_1 );
                    var_3 notify( "missile_pairedWithFlare" );
                }
            }
        }

        self.isdying = 0;
        scripts\cp_mp\utility\vehicle_omnvar_utility::vehomn_setammo( "little_bird_mg", "flares", 0, var_0 );
        scripts\cp_mp\vehicles\vehicle_occupancy::_id_12CAB( var_0 );
    }
}

sat_wait_for_piece_added()
{
    var_0 = scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_getleveldataforvehicle( "little_bird_mg", 1 );
    var_0.maxinstancecount = 5;
    var_0.priority = 100;
    var_0.getspawnstructscallback = ::sat_play_unfolding_sounds;
    var_0.spawncallback = scripts\cp_mp\utility\script_utility::getsharedfunc( "little_bird_mg", "spawnCallback" );
    var_0.clearancecheckradius = 185;
    var_0.clearancecheckheight = 100;
    var_0.clearancecheckoffsetz = -100;
    var_0.clearancecheckminradius = 185;
}

sat_play_unfolding_sounds()
{
    var_0 = scripts\engine\utility::getstructarray( "littlebird_mg_spawn", "targetname" );

    if ( var_0.size > 0 )
    {
        var_0 = scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_removespawnstructswithflag( var_0, 1 );

        if ( var_0.size > 1 )
            var_0 = scripts\engine\utility::array_randomize( var_0 );
    }

    return var_0;
}
