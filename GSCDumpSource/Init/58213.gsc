// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

bush_onplayerconnect()
{
    if ( isdefined( level.calchelicoptertrailpoint ) )
        return;

    level.calchelicoptertrailpoint = 1;
    c130airdrop_managedrop( 0, ::buy_menu_closed, ::buy_point_init, ::buy_point_loop );
    c130airdrop_managedrop( 1, ::buy_point_think, ::buy_points, ::buy_points_objectives_handler );
    c130airdrop_managedrop( 2, ::c130_lights, ::c130airdrop_createpath, ::c130airdrop_createpathstruct );
    c130airdrop_managedrop( 4, ::c130_crate, ::c130_door_badplace_id, ::c130_drop );
    c130airdrop_managedrop( 5, ::buystationsusepaddingdistribution, ::buystationtrig, ::bwasjuggernaut );
}

c130airdrop_managedrop( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( level.calculate_path_struct ) )
        level.calculate_path_struct = [];

    var_4 = spawnstruct();
    var_4.stoppingpower_getweaponhcrdata = var_1;
    var_4.stoppingpower_loadoutchangeremovehcr = var_2;
    var_4.support_update_hint_logic = var_3;
    level.calculate_path_struct[var_0] = var_4;
}

c130airdrop_deleteatlifetime( var_0, var_1 )
{
    var_2 = level.calculate_path_struct[var_0];

    if ( isdefined( var_2.support_update_hint_logic ) )
        return self [[ var_2.support_update_hint_logic ]]( var_1 );
}

buttonmodel( var_0, var_1 )
{
    var_2 = level.calculate_path_struct[var_0];

    if ( isdefined( var_2.stoppingpower_getweaponhcrdata ) )
        return self [[ var_2.stoppingpower_getweaponhcrdata ]]( var_1 );
}

buttonnotify( var_0, var_1 )
{
    var_2 = level.calculate_path_struct[var_0];

    if ( isdefined( var_2.stoppingpower_loadoutchangeremovehcr ) )
        return self [[ var_2.stoppingpower_loadoutchangeremovehcr ]]( var_1 );
}

buttonmashcount( var_0, var_1 )
{
    if ( var_0 != "equip_binoculars" )
        return;

    bush_onplayerconnect();
    thread c4vehiclemultkill();
}

c130airdrop_dropcrates( var_0, var_1 )
{
    if ( var_0 != "equip_binoculars" )
        return;

    self notify( "binoculars_take" );
}

c4vehiclecooperator( var_0 )
{
    waitframe();

    if ( isdefined( var_0 ) )
        var_0 delete();
}

c4vehiclemultkill()
{
    self endon( "disconnect" );
    self notify( "binoculars_watchForADS" );
    self endon( "binoculars_watchForADS" );
    var_0 = 0;

    for (;;)
    {
        var_1 = spawnstruct();
        childthread cache1_defender_after_spawn( var_1 );
        childthread cachedomnars( var_1 );
        childthread caclulate_track_distance( var_1 );
        childthread cacheentity( var_1 );
        childthread cac_getweaponattachmentid( var_1 );
        childthread cac_getaccessorylogic( var_1 );
        self waittill( "binoculars_watchRaceStart" );
        waittillframeend;
        var_2 = istrue( var_1.death );
        var_3 = istrue( var_1._id_12619 );
        var_4 = istrue( var_1.any_player_within_distance2d );
        var_5 = istrue( var_1.any_player_pushed_past_pos ) || istrue( var_1.laststand );

        if ( var_2 || var_3 )
        {
            self notify( "binoculars_watchRaceEnd" );
            burndowntime();
            return;
        }

        if ( var_4 && !var_0 )
        {
            var_0 = 1;
            thread c130airdrop_spawn();
        }
        else if ( var_5 && var_0 )
        {
            var_0 = 0;
            burndowntime();
        }

        self notify( "binoculars_watchRaceEnd" );
    }
}

cache1_defender_after_spawn( var_0 )
{
    self endon( "binoculars_watchRaceEnd" );
    self waittill( "death" );
    var_0.death = 1;
    self notify( "binoculars_watchRaceStart" );
}

cachedomnars( var_0 )
{
    self endon( "binoculars_watchRaceEnd" );
    self waittill( "last_stand_start" );
    var_0.laststand = 1;
    self notify( "binoculars_watchRaceStart" );
}

caclulate_track_distance( var_0 )
{
    self endon( "binoculars_watchRaceEnd" );
    self waittill( "binoculars_take" );
    var_0._id_12619 = 1;
    self notify( "binoculars_watchRaceStart" );
}

cacheentity( var_0 )
{
    self endon( "binoculars_watchRaceEnd" );

    for (;;)
    {
        if ( !isdefined( self.offhandweapon ) || getweaponbasename( self.offhandweapon ) != "offhand_spotter_scope_mp" )
            break;

        waitframe();
    }

    var_0.any_player_pushed_past_pos = 1;
    self notify( "binoculars_watchRaceStart" );
}

cac_getweaponattachmentid( var_0 )
{
    self endon( "binoculars_watchRaceEnd" );

    for (;;)
    {
        self waittill( "offhand_ads_on", var_1 );

        if ( getweaponbasename( var_1 ) == "offhand_spotter_scope_mp" )
            break;
    }

    var_0.any_player_within_distance2d = 1;
    self notify( "binoculars_watchRaceStart" );
}

cac_getaccessorylogic( var_0 )
{
    self endon( "binoculars_watchRaceEnd" );

    for (;;)
    {
        self waittill( "offhand_ads_off", var_1 );

        if ( !isdefined( var_1 ) || getweaponbasename( var_1 ) == "offhand_spotter_scope_mp" )
            break;
    }

    var_0.any_player_pushed_past_pos = 1;
    self notify( "binoculars_watchRaceStart" );
}

burndowntime()
{
    self notify( "binoculars_ads_off" );

    if ( isdefined( self.calculate_teleport_data_for_player ) )
    {
        self.calculate_teleport_data_for_player.any_player_within_distance2d = undefined;

        if ( isdefined( self.calculate_teleport_data_for_player.targetmarkergroup ) )
        {
            scripts\cp_mp\targetmarkergroups::targetmarkergroup_off( self.calculate_teleport_data_for_player.targetmarkergroup );
            self.calculate_teleport_data_for_player.targetmarkergroup = undefined;
        }

        bunkervaults();

        foreach ( var_2, var_1 in self.calculate_teleport_data_for_player._id_1265C )
        {
            if ( !isdefined( var_1 ) )
                continue;

            var_1.obj_room_fire_10 = undefined;

            if ( isdefined( var_1.headicon ) )
                c4_obj_and_progress_clear( var_1, self );
        }
    }
}

c130airdrop_spawn()
{
    self endon( "disconnect" );
    self endon( "binoculars_ads_off" );
    self notify( "binoculars_ads_on" );

    if ( !isdefined( self.calculate_teleport_data_for_player ) )
    {
        self.calculate_teleport_data_for_player = spawnstruct();
        self.calculate_teleport_data_for_player._id_1265C = [];
    }

    self.calculate_teleport_data_for_player.any_player_within_distance2d = 1;
    self.calculate_teleport_data_for_player.targetmarkergroup = scripts\cp_mp\targetmarkergroups::targetmarkergroup_on( "rcdmarker", self, undefined, self, 0, 0, 0 );
    thread c130airdrop_heightoverride();
}

bush_trig()
{
    return isdefined( self.calculate_teleport_data_for_player ) && istrue( self.calculate_teleport_data_for_player.any_player_within_distance2d );
}

c130airdrop_heightoverride()
{
    self endon( "disconnect" );
    self notify( "binoculars_processTargetData" );
    self endon( "binoculars_processTargetData" );
    self.calculate_teleport_data_for_player.send_wave_spawns_to_roof = -1;
    self.calculate_teleport_data_for_player.send_notify_after_player_tac_vis = -1;

    for (;;)
    {
        var_0 = level.characters;
        var_1 = getdvarfloat( "scr_binoculars_projection_distance", 72.0 );
        self.calculate_teleport_data_for_player.send_notify_to_module_struct = [];
        self.calculate_teleport_data_for_player.send_munition_used_notify = [];
        self.calculate_teleport_data_for_player.maxrange = burningdown();
        self.calculate_teleport_data_for_player.setextrascore4 = self.calculate_teleport_data_for_player.maxrange * self.calculate_teleport_data_for_player.maxrange;
        self.calculate_teleport_data_for_player.fade_cover = cos( burnfxstates() );
        self.calculate_teleport_data_for_player.waitforhvttrigger = var_1 * var_1;
        self.calculate_teleport_data_for_player.markingtarget = 0;
        self.calculate_teleport_data_for_player.set_showing_bomb_wire_pair_to_player = 0;
        self.calculate_teleport_data_for_player.set_slow_healthregen = 0;
        var_2 = 0;

        foreach ( var_4 in var_0 )
        {
            var_5 = 0;
            var_6 = self.calculate_teleport_data_for_player._id_1265C[var_4 getentitynumber()];

            if ( isdefined( var_6 ) )
                var_5 = var_6.state;

            var_7 = c130airdrop_deleteatlifetime( var_5, var_4 );

            if ( var_7 != var_5 )
            {
                buttonnotify( var_5, var_4 );
                buttonmodel( var_7, var_4 );
            }

            if ( !var_2 && var_7 != 0 )
                var_2 = 1;
        }

        if ( bush_trig() )
        {
            c130airdrop_findvaliddroplocation();
            c4_placing_bc();
        }
        else if ( !var_2 )
        {
            self.calculate_teleport_data_for_player = undefined;
            break;
        }

        waitframe();
    }
}

c130airdrop_isnearotherdrop( var_0 )
{
    var_1 = scripts\engine\trace::create_contents( 0, 1, 0, 1, 1, 1, 0, 1 );
    var_2 = [ var_0.origin ];

    if ( isplayer( var_0 ) )
    {
        var_3 = var_0 scripts\mp\utility\player::missing_window_blockers();
        var_4 = var_0 scripts\mp\utility\player::getstancecenter();
        var_2 = [ var_3, var_4, var_0.origin ];
    }
    else if ( isagent( var_0 ) )
        var_2 = [ var_0.origin + ( 0, 0, 1 ) ];

    var_5 = [ self, var_0 ];
    var_6 = var_0 scripts\cp_mp\utility\player_utility::getvehicle();

    if ( isdefined( var_6 ) )
    {
        var_5[var_5.size] = var_6;
        var_7 = var_6 getlinkedchildren( 1 );

        foreach ( var_9 in var_7 )
            var_5[var_5.size] = var_6;
    }

    var_11 = 0;

    foreach ( var_13 in var_2 )
    {
        if ( !scripts\engine\trace::ray_trace_passed( self getvieworigin(), var_13, var_5, var_1 ) )
            continue;

        var_11 = 1;
        break;
    }

    var_15 = self.calculate_teleport_data_for_player._id_1265C[var_0 getentitynumber()];
    var_15.send_all_ai_to_players = gettime();
    var_15.semtex_used = var_11;
}

c130airdrop_getteamaveragepos( var_0 )
{
    if ( !self.calculate_teleport_data_for_player.send_munition_used_notify.size )
        return 0;

    var_1 = 0;
    var_2 = undefined;

    foreach ( var_5, var_4 in self.calculate_teleport_data_for_player.send_munition_used_notify )
    {
        if ( var_5 >= self.calculate_teleport_data_for_player.send_notify_after_player_tac_vis )
        {
            c130airdrop_isnearotherdrop( var_4 );
            self.calculate_teleport_data_for_player.send_notify_after_player_tac_vis = var_5 + 1;
            var_1++;

            if ( !isdefined( var_2 ) )
                var_2 = var_5;

            if ( var_1 >= var_0 )
                break;
        }
    }

    if ( var_1 < var_0 )
    {
        self.calculate_teleport_data_for_player.send_notify_after_player_tac_vis = -1;

        foreach ( var_5, var_4 in self.calculate_teleport_data_for_player.send_munition_used_notify )
        {
            if ( isdefined( var_2 ) && var_2 == var_5 )
                break;

            if ( var_5 >= self.calculate_teleport_data_for_player.send_notify_after_player_tac_vis )
            {
                c130airdrop_isnearotherdrop( var_4 );
                self.calculate_teleport_data_for_player.send_notify_after_player_tac_vis = var_5 + 1;
                var_1++;

                if ( var_1 >= var_0 )
                    break;
            }
        }
    }

    return var_1;
}

c130airdrop_getvalidteaminlastplace( var_0 )
{
    if ( !self.calculate_teleport_data_for_player.send_notify_to_module_struct.size )
        return 0;

    var_1 = 0;
    var_2 = undefined;

    foreach ( var_5, var_4 in self.calculate_teleport_data_for_player.send_notify_to_module_struct )
    {
        if ( var_5 >= self.calculate_teleport_data_for_player.send_wave_spawns_to_roof )
        {
            c130airdrop_isnearotherdrop( var_4 );
            self.calculate_teleport_data_for_player.send_wave_spawns_to_roof = var_5 + 1;
            var_1++;

            if ( !isdefined( var_2 ) )
                var_2 = var_5;

            if ( var_1 >= var_0 )
                break;
        }
    }

    if ( var_1 < var_0 )
    {
        self.calculate_teleport_data_for_player.send_wave_spawns_to_roof = -1;

        foreach ( var_5, var_4 in self.calculate_teleport_data_for_player.send_notify_to_module_struct )
        {
            if ( isdefined( var_2 ) && var_2 == var_5 )
                break;

            if ( var_5 >= self.calculate_teleport_data_for_player.send_wave_spawns_to_roof )
            {
                c130airdrop_isnearotherdrop( var_4 );
                self.calculate_teleport_data_for_player.send_wave_spawns_to_roof = var_5 + 1;
                var_1++;

                if ( var_1 >= var_0 )
                    break;
            }
        }
    }

    return var_1;
}

c130airdrop_findvaliddroplocation()
{
    var_0 = 3;
    var_1 = c130airdrop_getteamaveragepos( 1 );
    var_0 = var_0 - var_1;
    var_1 = c130airdrop_getvalidteaminlastplace( var_0 );
}

c130airdrop_startdelivery( var_0, var_1 )
{
    var_2 = self.calculate_teleport_data_for_player._id_1265C[var_0 getentitynumber()];

    if ( !isdefined( var_2 ) )
    {
        if ( var_1 == 0 )
            return;

        var_2 = spawnstruct();
        self.calculate_teleport_data_for_player._id_1265C[var_0 getentitynumber()] = var_2;
    }

    var_2.state = var_1;
}

busbpulledout( var_0 )
{
    return isplayer( var_0 ) && var_0 scripts\mp\utility\perk::_hasperk( "specialty_noscopeoutline" );
}

c4_crate_player_at_max_ammo( var_0, var_1 )
{
    var_2 = self.calculate_teleport_data_for_player._id_1265C[var_0 getentitynumber()];

    if ( isdefined( var_2 ) )
        var_2.obj_room_fire_10 = 1;

    if ( !isdefined( self.calculate_teleport_data_for_player.targetmarkergroup ) )
        return;

    scripts\cp_mp\targetmarkergroups::targetmarkergroup_markentity( var_0, self.calculate_teleport_data_for_player.targetmarkergroup, 0 );
    var_3 = busbpulledout( var_0 );

    if ( var_3 )
        c130successfulairdrops( var_0, 3 );
    else if ( var_1 )
        c130successfulairdrops( var_0, 2 );
    else
        c130successfulairdrops( var_0, 1 );
}

c4_placed_bc( var_0, var_1 )
{
    if ( !isdefined( self.calculate_teleport_data_for_player.targetmarkergroup ) )
        return;

    var_2 = busbpulledout( var_0 );

    if ( var_2 )
        c130successfulairdrops( var_0, 3 );
    else if ( var_1 )
        c130successfulairdrops( var_0, 2 );
    else
        c130successfulairdrops( var_0, 1 );
}

bush_concealment_monitor( var_0 )
{
    var_1 = self.calculate_teleport_data_for_player._id_1265C[var_0 getentitynumber()];

    if ( isdefined( var_1 ) )
        var_1.obj_room_fire_10 = undefined;

    if ( !isdefined( self.calculate_teleport_data_for_player.targetmarkergroup ) )
        return;

    scripts\cp_mp\targetmarkergroups::targetmarkergroup_unmarkentity( var_0, var_0 getentitynumber(), self.calculate_teleport_data_for_player.targetmarkergroup );
}

c130successfulairdrops( var_0, var_1 )
{
    var_2 = ( var_1 >> 0 ) % 2 == 1;
    var_3 = ( var_1 >> 1 ) % 2 == 1;
    targetmarkergroupsetextrastate( self.calculate_teleport_data_for_player.targetmarkergroup, var_0, var_2 );
    addclienttotargetmarkergroupmask( self.calculate_teleport_data_for_player.targetmarkergroup, var_0, var_3 );
}

bunker_waitforuse( var_0 )
{
    var_1 = "hud_icon_head_marked";
    var_2 = 8;
    var_3 = 1;
    var_4 = 0;
    var_5 = 500;
    var_6 = self.calculate_teleport_data_for_player._id_1265C[var_0 getentitynumber()];
    var_6.headicon = var_0 scripts\cp_mp\entityheadicons::setheadicon_singleimage( [], var_1, var_2, var_3, var_4, var_5, undefined, 1, 1 );
    thread bunkermusicstarted( var_0 );
}

c4_obj_and_progress( var_0 )
{
    var_1 = self.calculate_teleport_data_for_player._id_1265C[var_0 getentitynumber()];

    if ( !isdefined( var_1 ) || !isdefined( var_1.headicon ) )
        return;

    var_2 = scripts\mp\utility\teams::getteamdata( self.team, "players" );

    foreach ( var_4 in var_2 )
        c4_obj_and_progress_clear( var_1, var_4 );
}

c4_obj_and_progress_clear( var_0, var_1 )
{
    var_2 = 1;

    if ( var_1 == self && bush_trig() && istrue( var_0.obj_room_fire_10 ) )
        var_2 = 0;

    if ( var_2 )
        scripts\cp_mp\entityheadicons::_id_11EAF( var_0.headicon, var_1 );
    else
        scripts\cp_mp\entityheadicons::_id_11EB0( var_0.headicon, var_1 );
}

bunkermusicstarted( var_0 )
{
    var_1 = var_0 getentitynumber();
    self endon( "disconnect" );
    self endon( "removeHeadIcon_" + var_1 );
    var_0 waittill( "disconnect" );

    if ( isdefined( self.calculate_teleport_data_for_player ) && isdefined( self.calculate_teleport_data_for_player._id_1265C ) )
    {
        var_2 = self.calculate_teleport_data_for_player._id_1265C[var_1];

        if ( isdefined( var_2 ) && isdefined( var_2.headicon ) )
            scripts\cp_mp\entityheadicons::setheadicon_deleteicon( var_2.headicon );
    }
}

c130airdrop_oncrateuse( var_0 )
{
    var_1 = self.calculate_teleport_data_for_player._id_1265C[var_0 getentitynumber()];
    scripts\cp_mp\entityheadicons::setheadicon_deleteicon( var_1.headicon );
    self notify( "removeHeadIcon_" + var_0 getentitynumber() );
}

buy_menu_closed( var_0 )
{
    bush_concealment_monitor( var_0 );
    c130airdrop_startdelivery( var_0, 0 );
}

buy_point_init( var_0 )
{

}

buy_point_loop( var_0 )
{
    var_1 = c4_crate_update_hint_logic_alt( var_0 );

    if ( var_1 )
        return 1;

    return 0;
}

buy_point_think( var_0 )
{
    bush_concealment_monitor( var_0 );
    c130airdrop_startdelivery( var_0, 1 );
}

buy_points( var_0 )
{

}

buy_points_objectives_handler( var_0 )
{
    var_1 = c4_crate_update_hint_logic_alt( var_0 );

    if ( !var_1 )
        return 0;

    c4_pick_up_listener( var_0 );
    bunkeralt_playeridlewatch( var_0 );

    if ( bunkeralt_playerinteractwithkeypadloop( var_0 ) )
        return 2;

    return 1;
}

c130_lights( var_0 )
{
    c4_crate_player_at_max_ammo( var_0, 0 );
    c130airdrop_startdelivery( var_0, 2 );
}

c130airdrop_createpath( var_0 )
{

}

c130airdrop_createpathstruct( var_0 )
{
    var_1 = c4_crate_update_hint_logic_alt( var_0 );

    if ( !var_1 )
        return 0;

    c4_pick_up_listener( var_0 );
    bunkeralt_playeridlewatch( var_0 );

    if ( !bunkeralt_playerinteractwithkeypadloop( var_0 ) )
        return 1;

    c4_placed_bc( var_0, 0 );

    if ( button( var_0 ) )
    {
        if ( busbpulledout( var_0 ) )
        {
            self.calculate_teleport_data_for_player.set_showing_bomb_wire_pair_to_player = 1;
            return 2;
        }

        return 4;
    }

    return 2;
}

c130_crate( var_0 )
{
    c130deliverydirection( var_0 );
    c130airdrop_startdelivery( var_0, 4 );
    self playlocalsound( "binoculars_marking" );
}

c130_door_badplace_id( var_0 )
{
    bunkeropened( var_0 );
    self stoplocalsound( "binoculars_marking" );
}

c130_drop( var_0 )
{
    var_1 = c4_crate_update_hint_logic_alt( var_0 );

    if ( !var_1 )
        return 0;

    c4_pick_up_listener( var_0 );
    bunkeralt_playeridlewatch( var_0 );

    if ( !bunkeralt_playerinteractwithkeypadloop( var_0 ) )
        return 1;

    if ( !button( var_0 ) )
        return 2;

    if ( bunkerinteriorkeypads( var_0 ) )
        return 5;

    self.calculate_teleport_data_for_player.markingtarget = 1;

    if ( self.calculate_teleport_data_for_player.set_slow_healthregen == 0 )
        self.calculate_teleport_data_for_player.set_slow_healthregen = burningpartlogic( var_0 );
    else
        self.calculate_teleport_data_for_player.set_slow_healthregen = int( min( self.calculate_teleport_data_for_player.set_slow_healthregen, burningpartlogic( var_0 ) ) );

    return 4;
}

buystationsusepaddingdistribution( var_0 )
{
    bunker_waitforuse( var_0 );
    c4_obj_and_progress( var_0 );
    c4_crate_player_at_max_ammo( var_0, 1 );
    c130deliveriesinprogress( var_0 );
    bunkeralt_damagedeathdisconnectwatch( var_0 );
    c130airdrop_startdelivery( var_0, 5 );
    self playlocalsound( "binoculars_marked" );
    self stoplocalsound( "binoculars_marking" );
}

buystationtrig( var_0 )
{
    c130airdrop_oncrateuse( var_0 );
    bunkernum( var_0 );
}

bwasjuggernaut( var_0 )
{
    if ( !c4_crate_use( var_0 ) )
        return 0;

    c4_pick_up_listener( var_0 );
    bunkeralt_playeridlewatch( var_0 );

    if ( bush_trig() && bunkeralt_playerinteractwithkeypadloop( var_0 ) && button( var_0 ) )
        c130deliveriesinprogress( var_0 );
    else if ( bunkercounteruav( var_0 ) )
        return 0;

    c4_obj_and_progress( var_0 );
    c4_placed_bc( var_0, 1 );
    return 5;
}

c4_crate_update_hint_logic_alt( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( !bush_trig() )
        return 0;

    if ( isplayer( var_0 ) && !scripts\mp\utility\player::isreallyalive( var_0 ) )
        return 0;

    if ( isagent( var_0 ) && !isalive( var_0 ) )
        return 0;

    if ( level.teambased )
    {
        if ( isdefined( var_0.team ) && var_0.team == self.team )
            return 0;
    }
    else if ( var_0 == self )
        return 0;

    if ( !bush_zones( var_0 ) )
        return 0;

    if ( !bush_trig_debug( var_0 ) )
        return 0;

    return 1;
}

c4_crate_use( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( isplayer( var_0 ) && !scripts\mp\utility\player::isreallyalive( var_0 ) )
        return 0;

    if ( isagent( var_0 ) && !isalive( var_0 ) )
        return 0;

    if ( level.teambased )
    {
        if ( isdefined( var_0.team ) && var_0.team == self.team )
            return 0;
    }
    else if ( var_0 == self )
        return 0;

    return 1;
}

burningdown()
{
    var_0 = self playergetzoomlevelindex();

    if ( var_0 > 0 )
        return getdvarint( "scr_binoculars_max_range_zoomed", 30000 );
    else
        return getdvarint( "scr_binoculars_max_range_unzoomed", 15000 );
}

burnfxstates()
{
    var_0 = self playergetzoomfov();
    return var_0;
}

bush_zones( var_0 )
{
    return distancesquared( self.origin, var_0.origin ) < self.calculate_teleport_data_for_player.setextrascore4;
}

bush_trig_debug( var_0 )
{
    return scripts\engine\utility::within_fov( self.origin, self getplayerangles(), var_0.origin, self.calculate_teleport_data_for_player.fade_cover );
}

button_sequence( var_0 )
{
    var_1 = self getvieworigin();
    var_2 = var_1 + anglestoforward( self getplayerangles() ) * self.calculate_teleport_data_for_player.maxrange;
    var_3 = [ var_0.origin ];

    if ( isplayer( var_0 ) )
    {
        var_4 = var_0 scripts\mp\utility\player::missing_window_blockers();
        var_5 = var_0 scripts\mp\utility\player::getstancecenter();
        var_3 = [ var_4, var_5, var_0.origin ];
    }
    else if ( isagent( var_0 ) )
        var_3 = [ var_0.origin + ( 0, 0, 1 ) ];

    foreach ( var_7 in var_3 )
    {
        var_8 = lengthsquared( vectorfromlinetopoint( var_1, var_2, var_7 ) );

        if ( var_8 < self.calculate_teleport_data_for_player.waitforhvttrigger )
            return 1;
    }

    return 0;
}

c4_pick_up_listener( var_0 )
{
    var_1 = button_sequence( var_0 );
    var_2 = self.calculate_teleport_data_for_player._id_1265C[var_0 getentitynumber()];

    if ( var_1 )
        var_2._id_13027 = 1;
    else
        var_2._id_13027 = undefined;
}

button( var_0 )
{
    var_1 = self.calculate_teleport_data_for_player._id_1265C[var_0 getentitynumber()];
    return istrue( var_1._id_13027 );
}

bunkeralt_playeridlewatch( var_0 )
{
    var_1 = 0;

    if ( button( var_0 ) )
        var_1 = 1;

    if ( var_1 )
        self.calculate_teleport_data_for_player.send_munition_used_notify[var_0 getentitynumber()] = var_0;
    else
        self.calculate_teleport_data_for_player.send_notify_to_module_struct[var_0 getentitynumber()] = var_0;
}

bunkeralt_playerinteractwithkeypadloop( var_0 )
{
    var_1 = self.calculate_teleport_data_for_player._id_1265C[var_0 getentitynumber()];

    if ( !isdefined( var_1.send_all_ai_to_players ) || gettime() - var_1.send_all_ai_to_players > 1000 )
        return 0;

    return istrue( var_1.semtex_used );
}

c130deliverydirection( var_0 )
{
    var_1 = self.calculate_teleport_data_for_player._id_1265C[var_0 getentitynumber()];
    var_1.toma_strike_watch_owner = gettime() + burningstate( var_0 );
}

bunkeropened( var_0 )
{
    var_1 = self.calculate_teleport_data_for_player._id_1265C[var_0 getentitynumber()];
    var_1.toma_strike_watch_owner = undefined;
}

bunkerinteriorkeypads( var_0 )
{
    var_1 = self.calculate_teleport_data_for_player._id_1265C[var_0 getentitynumber()];

    if ( !isdefined( var_1.toma_strike_watch_owner ) )
        return 0;

    return gettime() > var_1.toma_strike_watch_owner;
}

burningstate( var_0 )
{
    var_1 = getdvarfloat( "scr_binoculars_min_pending_distance", 2500 );
    var_2 = getdvarfloat( "scr_binoculars_max_pending_distance", 5000 );

    if ( var_1 >= var_2 )
        return getdvarfloat( "scr_binoculars_min_pending_time", 700 );

    var_3 = distance( self.origin, var_0.origin );

    if ( var_3 <= var_1 )
        return getdvarfloat( "scr_binoculars_min_pending_time", 700 );
    else if ( var_3 >= 5000 )
        return getdvarfloat( "scr_binoculars_max_pending_time", 2700 );
    else
    {
        var_4 = getdvarfloat( "scr_binoculars_min_pending_time", 700 );
        var_5 = getdvarfloat( "scr_binoculars_max_pending_time", 2700 );
        var_6 = ( var_3 - var_1 ) / ( var_2 - var_1 );
        return int( scripts\engine\math::lerp( var_4, var_5, var_6 ) );
    }
}

burningpartlogic( var_0 )
{
    var_1 = self.calculate_teleport_data_for_player._id_1265C[var_0 getentitynumber()];

    if ( !isdefined( var_1.toma_strike_watch_owner ) )
        return gettime() + burningstate( var_0 );

    return var_1.toma_strike_watch_owner;
}

c130deliveriesinprogress( var_0 )
{
    var_1 = self.calculate_teleport_data_for_player._id_1265C[var_0 getentitynumber()];
    var_2 = getdvarint( "scr_binoculars_expire_time", 5000 );
    var_1.init_subway_cars = gettime() + var_2;
}

bunkernum( var_0 )
{
    var_1 = self.calculate_teleport_data_for_player._id_1265C[var_0 getentitynumber()];
    var_1.init_subway_cars = undefined;
}

bunkercounteruav( var_0 )
{
    var_1 = self.calculate_teleport_data_for_player._id_1265C[var_0 getentitynumber()];

    if ( !isdefined( var_1.init_subway_cars ) )
        return 1;

    return gettime() >= var_1.init_subway_cars;
}

bunkeralt_damagedeathdisconnectwatch( var_0 )
{
    if ( !isdefined( self.set_respawn_points ) )
        self.set_respawn_points = [];

    var_1 = var_0 getentitynumber();
    var_2 = scripts\engine\utility::ter_op( isdefined( self.matchdatalifeindex ), self.matchdatalifeindex, 0 );

    if ( !isdefined( self.set_respawn_points[var_1] ) || self.set_respawn_points[var_1] > var_2 )
    {
        self.set_respawn_points[var_1] = var_2;
        scripts\mp\utility\points::giveunifiedpoints( "binoculars_marked" );
    }
}

c4_crate_spawn( var_0 )
{
    if ( !isdefined( self.calculate_teleport_data_for_player ) || !isdefined( self.calculate_teleport_data_for_player._id_1265C ) )
        return 0;

    var_1 = self.calculate_teleport_data_for_player._id_1265C[var_0 getentitynumber()];

    if ( !isdefined( var_1 ) )
        return 0;

    return var_1.state == 5;
}

burst_fire_turret( var_0, var_1 )
{
    if ( !isdefined( level.calchelicoptertrailpoint ) )
        return;

    if ( !isdefined( var_0 ) || !isdefined( var_1 ) || !isdefined( var_0.team ) )
        return;

    var_2 = scripts\mp\utility\teams::getteamdata( var_0.team, "players" );

    foreach ( var_4 in var_2 )
    {
        if ( var_4 == var_0 )
            continue;

        if ( var_4 c4_crate_spawn( var_1 ) )
            var_4 thread scripts\mp\utility\points::giveunifiedpoints( "binoculars_assist" );
    }
}

bunkervaults()
{
    self setclientomnvar( "ui_binoculars_timer", 0 );
    self setclientomnvar( "ui_binoculars_state", 0 );
    self stoplocalsound( "binoculars_marking" );
}

c4_charge_detonate_think( var_0, var_1 )
{
    if ( self getclientomnvar( "ui_binoculars_state" ) == var_0 && self getclientomnvar( "ui_binoculars_timer" ) == var_1 )
        return;

    self setclientomnvar( "ui_binoculars_state", var_0 );
    self setclientomnvar( "ui_binoculars_timer", var_1 );
}

c4_placing_bc()
{
    var_0 = istrue( self.calculate_teleport_data_for_player.markingtarget );

    if ( var_0 )
    {
        c4_charge_detonate_think( 1, self.calculate_teleport_data_for_player.set_slow_healthregen );
        return;
    }

    var_1 = istrue( self.calculate_teleport_data_for_player.set_showing_bomb_wire_pair_to_player );

    if ( var_1 )
    {
        c4_charge_detonate_think( 2, 0 );
        return;
    }

    c4_charge_detonate_think( 0, 0 );
}
