// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    if ( getdvarint( "TLRPKRKMS" ) != 0 && !isdefined( game["gamestarted"] ) )
    {
        setmatchdatadef( "ddl/mp/matchdata.ddl" );
        setmatchdata( "commonMatchData", "map", level.script );

        if ( level.hardcoremode )
        {
            var_0 = scripts\mp\utility\game::getgametype() + " hc";
            setmatchdata( "commonMatchData", "gametype", var_0 );
        }
        else
            setmatchdata( "commonMatchData", "gametype", scripts\mp\utility\game::getgametype() );

        setmatchdata( "commonMatchData", "build_version", getbuildversion() );
        setmatchdata( "commonMatchData", "build_number", getbuildnumber() );
        setmatchdata( "commonMatchData", "is_private_match", scripts\mp\utility\game::privatematch() );
        setmatchdata( "firstOvertimeRoundIndex", -1 );

        if ( scripts\mp\utility\game::ismlgmatch() )
            setmatchdata( "codESportsRules", 1 );
    }

    if ( getdvarint( "TLRPKRKMS" ) != 0 )
    {
        if ( level.gametype == "br" )
            level.maxlogclients = 200;
        else
            level.maxlogclients = 30;
    }
    else
        level.maxlogclients = 0;

    level.maxlives = 475;
    level.maxnamelength = 26;
    level.maxgameevents = 250;
    level.maxkillstreaks = 64;
    level.maxkillstreaksavailable = 64;
    level.maxnumchallengesperplayer = 10;
    level.maxnumawardsperplayer = 10;
    level.maxsupersavailable = 50;
    level.maxsupersactivated = 50;
    level.maxsupersexpired = 50;
    level.matchdataattachmentstatsenabled = 0;
    level.degrees_to_radians = scripts\mp\utility\game::getgametype() == "br" && getdvarint( "scr_log_br_weapon_stats", 0 ) == 1;
    level.set_up_rear_spotlight = ::onmatchstart;
    level.set_up_spotlight = ::onroundend;
    level.set_ui_omnvar_for_relics = ::logkillstreakevent;
    level.set_trap_flag = ::loggameevent;
    level.set_total_successful_vehicle_spawns_from_module = ::logattackerkillevent;
    level.set_up_pilots = ::logvictimkillevent;
    level.set_unloadtype_at_end_path = ::logmultikill;
    level.set_up_coop_push = ::logplayerlife;
    level.set_up_chopper_boss = ::logplayerdeath;
    level.set_up_blockade_gate_anims = ::logplayerdata;
    level.set_up_minigun = ::logscoreevent;
    level.set_up_subway_car = ::x1ops1;
    level.set_up_rear_minigun = ::logweaponstat;
    level.set_tier_lights = ::logattachmentstat;
    level.set_tank_target_player = ::buildweaponrootlist;
    level.set_train_stopped = ::logchallenge;
    level.set_track_operational_status = ::logaward;
    level thread endofgamesummarylogger();
}

onmatchstart()
{
    setmatchdata( "commonMatchData", "utc_start_time_s", getsystemtime() );
    setmatchdata( "commonMatchData", "player_count_start", level.players.size );
    var_0 = scripts\mp\utility\game::getgametype();
    var_1 = "";

    if ( var_0 == "br" )
        var_1 = level.cleanupswaploadoutflags.name;

    if ( level.hardcoremode )
        var_0 = var_0 + " hc";

    var_2 = getdvarint( "dlog_is_playtest" );
    var_3 = getdvar( "MQQPLSSSLQ" );
    var_4 = _func_429();
    getentitylessscriptablearray( "dlog_event_server_match_start", [ "map", level.script, "game_type", var_0, "is_playtest", var_2, "experiment_name", var_3, "dedi_server_guid", isdismembermentenabled(), "sub_game_type", var_1, "playlist_name", var_4 ] );

    if ( var_0 == "br" )
        scripts\common\utility::_id_12965( level.set_systems_init_flag );

    onmatchend();
}

onroundend()
{
    level.endtimeutcseconds = getsystemtime();
    setmatchdata( "commonMatchData", "utc_end_time_s", level.endtimeutcseconds );
    setmatchdata( "commonMatchData", "player_count_end", level.players.size );
    setmatchdata( "globalPlayerXpModifier", int( scripts\mp\rank::getglobalrankxpmultiplier() ) );
    setmatchdata( "globalWeaponXpModifier", int( scripts\mp\weaponrank::getglobalweaponrankxpmultiplier() ) );
}

getmatchstarttimeutc()
{
    if ( getdvarint( "TLRPKRKMS" ) == 0 )
        return level.starttimeutcseconds;

    return getmatchdata( "commonMatchData", "utc_start_time_s" );
}

getmatchendtimeutc()
{
    if ( getdvarint( "TLRPKRKMS" ) == 0 )
        return level.endtimeutcseconds;

    return getmatchdata( "commonMatchData", "utc_end_time_s" );
}

gettimefrommatchstart( var_0 )
{
    var_1 = var_0;

    if ( isdefined( level.starttimefrommatchstart ) )
    {
        var_1 = var_1 - level.starttimefrommatchstart;

        if ( var_1 < 0 )
            var_1 = 0;
    }
    else
        var_1 = 0;

    return var_1;
}

logkillstreakevent( var_0, var_1 )
{

}

loggameevent( var_0, var_1 )
{
    var_2 = undefined;
    var_3 = -1;

    if ( isvalidclient( self ) && scripts\mp\utility\entity::isgameparticipant( self ) )
    {
        var_2 = self;

        if ( isdefined( self.matchdatalifeindex ) )
            var_3 = self.matchdatalifeindex;
    }

    var_4 = getmatchdata( "gameEventCount" );
    var_5 = var_4 + 1;
    setmatchdata( "gameEventCount", var_5 );
    var_6 = gettimefrommatchstart( gettime() );
    getentitylessscriptablearray( "dlog_event_game_event", [ "event_player", var_2, "event_name", var_0, "time_from_match_start_ms", var_6, "player_life_index", var_3, "pos_x", var_1[0], "pos_y", var_1[1], "pos_z", var_1[2] ] );
}

logattackerkillevent( var_0, var_1 )
{

}

logvictimkillevent( var_0, var_1 )
{

}

logmultikill( var_0, var_1 )
{

}

logplayerlife()
{
    if ( !isvalidclient( self ) )
        return -1;

    var_0 = 0;
    var_1 = ( 0, 0, 0 );
    var_2 = 0;

    if ( isdefined( self.spawntime ) )
        var_0 = self.spawntime;

    if ( isdefined( self.spawnpos ) )
        var_1 = self.spawnpos;

    if ( isdefined( self.wasti ) )
        var_2 = self.wasti;

    var_3 = gettimefrommatchstart( var_0 );
    var_4 = game["life_count"];
    game["life_count"]++;
    self dlog_recordplayerevent( "dlog_event_life_spawn", [ "spawn_time_from_match_start_ms", var_3, "life_index", var_4, "spawn_pos_x", var_1[0], "spawn_pos_y", var_1[1], "spawn_pos_z", var_1[2], "team", self.team, "is_host", self ishost(), "was_tactical_insertion", var_2 ] );
    thread monitorweaponfire();
    return var_4;
}

monitorweaponfire()
{
    self endon( "death_or_disconnect" );

    for (;;)
    {
        self waittill( "begin_firing" );
        thread smoke_enemy_think();
        var_0 = self.lastdroppableweaponobj;
        var_0 = scripts\mp\utility\weapon::mapweapon( var_0 );
        var_1 = createheadicon( var_0 );
        thread scripts\mp\gamelogic::threadedsetweaponstatbyname( var_1, 1, "trigger_pulls" );
    }
}

smoke_enemy_think()
{
    self endon( "disconnect" );
    self.revivent_watchfordeath_safety = gettime();
    self notify( "monitorWeaponFireTime" );
    self endon( "monitorWeaponFireTime" );
    scripts\engine\utility::waittill_either( "end_firing", "death" );
    self.revive_wounded_out_handlerr = gettime();
}

spawn_and_enter_cargo_truck_mg()
{
    var_0 = self playermounttype();

    if ( isdefined( var_0 ) )
    {
        switch ( var_0 )
        {
            case "mount_left":
                return "MOUNT_LEFT";
            case "mount_right":
                return "MOUNT_RIGHT";
            case "mount_top":
                return "MOUNT_TOP";
        }
    }

    return "MOUNT_NONE";
}

logplayerdeath( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    if ( !isvalidclient( self ) )
        return;

    if ( var_4 == "agent_mp" )
        var_7 = [];
    else
    {
        var_7 = scripts\mp\utility\weapon::getweaponattachmentsbasenames( var_4 );
        var_7 = scripts\mp\utility\weapon::attachmentsfilterforstats( var_7, var_4 );
    }

    var_8 = gettimefrommatchstart( gettime() );
    var_9 = 0;

    if ( isdefined( self.spawntime ) )
        var_9 = self.spawntime;

    var_10 = gettimefrommatchstart( var_9 );
    var_11 = -1;
    var_12 = -1;
    var_13 = [];

    if ( isvalidclient( var_1 ) )
    {
        var_14 = getweaponbasename( var_4 );
        var_15 = var_1;
        var_16 = var_1 scripts\mp\utility\weapon::ispickedupweapon( var_4 );
        var_17 = var_1 isalternatemode( var_4 );

        if ( scripts\mp\utility\weapon::iscacprimaryorsecondary( var_4 ) )
            var_18 = var_1 playerads();
        else
            var_18 = 0.0;

        var_19 = 0.4226;
        var_20 = scripts\engine\utility::within_fov( self.origin, self.angles, var_1.origin, var_19 );
        var_21 = scripts\engine\utility::within_fov( var_1.origin, var_1.angles, self.origin, var_19 );
        var_22 = var_1 spawn_and_enter_cargo_truck_mg();
        var_23 = var_1.origin;
        var_24 = var_1.angles;

        if ( isdefined( var_1.matchdatalifeindex ) )
            var_11 = var_1.matchdatalifeindex;

        if ( isdefined( var_1.loadoutindex ) )
            var_12 = var_1.loadoutindex;

        var_25 = var_1 getplayerbuffs();

        if ( istrue( var_25[0] ) )
            var_13[var_13.size] = "UAV_ACTIVE";

        if ( istrue( var_25[1] ) )
            var_13[var_13.size] = "DEADSILENCE_ACTIVE";

        if ( istrue( var_25[2] ) )
            var_13[var_13.size] = "HAS_STOPPING_POWER";

        var_26 = var_1 getplayerdebuffs();

        if ( istrue( var_26[0] ) )
            var_13[var_13.size] = "CUAV_ACTIVE";

        if ( istrue( var_26[1] ) )
            var_13[var_13.size] = "IS_MARKED";

        if ( istrue( var_26[2] ) )
            var_13[var_13.size] = "IS_FLASHED";

        if ( istrue( var_26[3] ) )
            var_13[var_13.size] = "IS_STUNNED";

        if ( istrue( var_26[4] ) )
            var_13[var_13.size] = "IN_GAS";

        if ( istrue( var_26[5] ) )
            var_13[var_13.size] = "IN_BURNING";

        if ( istrue( var_26[6] ) )
            var_13[var_13.size] = "IS_SNAPSHOTTED";

        if ( istrue( var_26[7] ) )
            var_13[var_13.size] = "IN_SMOKE";

        if ( istrue( var_26[8] ) )
            var_13[var_13.size] = "IS_EMPED";

        if ( istrue( var_26[9] ) )
            var_13[var_13.size] = "IN_WHITE_PHOSPHOROUS";

        if ( var_1 isnightvisionon() )
            var_13[var_13.size] = "NVG_ENABLED";

        if ( isdefined( var_1.modifiers ) )
        {
            if ( istrue( var_1.modifiers["headshot"] ) )
                var_13[var_13.size] = "HEADSHOT";

            if ( istrue( var_1.modifiers["avenger"] ) )
                var_13[var_13.size] = "AVENGER";

            if ( istrue( var_1.modifiers["defender"] ) )
                var_13[var_13.size] = "DEFENDER";

            if ( istrue( var_1.modifiers["posthumous"] ) )
                var_13[var_13.size] = "POSTHUMOUS";

            if ( istrue( var_1.modifiers["revenge"] ) )
                var_13[var_13.size] = "REVENGE";

            if ( istrue( var_1.modifiers["buzzkill"] ) )
                var_13[var_13.size] = "BUZZKILL";

            if ( istrue( var_1.modifiers["firstblood"] ) )
                var_13[var_13.size] = "FIRSTBLOOD";

            if ( istrue( var_1.modifiers["comeback"] ) )
                var_13[var_13.size] = "COMEBACK";

            if ( istrue( var_1.modifiers["longshot"] ) )
                var_13[var_13.size] = "LONGSHOT";

            if ( istrue( var_1.modifiers["pointblank"] ) )
                var_13[var_13.size] = "POINTBLANK";

            if ( istrue( var_1.modifiers["assistedsuicide"] ) )
                var_13[var_13.size] = "ASSISTED_SUICIDE";
        }

        if ( scripts\mp\utility\weapon::iskillstreakweapon( var_14 ) )
            var_13[var_13.size] = "KILLSTREAK";
    }
    else
    {
        var_15 = undefined;
        var_14 = "";
        var_16 = 0;
        var_17 = 0;
        var_18 = 0.0;
        var_20 = 0;
        var_21 = 0;
        var_22 = "MOUNT_NONE";
        var_23 = [];
        var_23[0] = 0.0;
        var_23[1] = 0.0;
        var_23[2] = 0.0;
        var_24 = [];
        var_24[0] = 0.0;
        var_24[1] = 0.0;
        var_24[2] = 0.0;
    }

    var_27 = [];
    var_28 = getplayerbuffs();

    if ( istrue( var_28[0] ) )
        var_27[var_27.size] = "UAV_ACTIVE";

    if ( istrue( var_28[1] ) )
        var_27[var_27.size] = "DEADSILENCE_ACTIVE";

    if ( istrue( var_28[2] ) )
        var_27[var_27.size] = "HAS_STOPPING_POWER";

    var_29 = getplayerdebuffs();

    if ( istrue( var_29[0] ) )
        var_27[var_27.size] = "CUAV_ACTIVE";

    if ( istrue( var_29[1] ) )
        var_27[var_27.size] = "IS_MARKED";

    if ( istrue( var_29[2] ) )
        var_27[var_27.size] = "IS_FLASHED";

    if ( istrue( var_29[3] ) )
        var_27[var_27.size] = "IS_STUNNED";

    if ( istrue( var_29[4] ) )
        var_27[var_27.size] = "IN_GAS";

    if ( istrue( var_29[5] ) )
        var_27[var_27.size] = "IN_BURNING";

    if ( istrue( var_29[6] ) )
        var_27[var_27.size] = "IS_SNAPSHOTTED";

    if ( istrue( var_29[7] ) )
        var_27[var_27.size] = "IN_SMOKE";

    if ( istrue( var_29[8] ) )
        var_27[var_27.size] = "IS_EMPED";

    if ( istrue( var_29[9] ) )
        var_27[var_27.size] = "IN_WHITE_PHOSPHOROUS";

    if ( self isnightvisionon() )
        var_27[var_27.size] = "NVG_ENABLED";

    if ( isdefined( self.modifiers ) )
    {
        if ( istrue( self.modifiers["headshot"] ) )
            var_27[var_27.size] = "HEADSHOT";

        if ( istrue( self.modifiers["avenger"] ) )
            var_27[var_27.size] = "AVENGER";

        if ( istrue( self.modifiers["defender"] ) )
            var_27[var_27.size] = "DEFENDER";

        if ( istrue( self.modifiers["posthumous"] ) )
            var_27[var_27.size] = "POSTHUMOUS";

        if ( istrue( self.modifiers["revenge"] ) )
            var_27[var_27.size] = "REVENGE";

        if ( istrue( self.modifiers["buzzkill"] ) )
            var_27[var_27.size] = "BUZZKILL";

        if ( istrue( self.modifiers["firstblood"] ) )
            var_27[var_27.size] = "FIRSTBLOOD";

        if ( istrue( self.modifiers["comeback"] ) )
            var_27[var_27.size] = "COMEBACK";

        if ( istrue( self.modifiers["longshot"] ) )
            var_27[var_27.size] = "LONGSHOT";

        if ( istrue( self.modifiers["pointblank"] ) )
            var_27[var_27.size] = "POINTBLANK";

        if ( istrue( self.modifiers["assistedsuicide"] ) )
            var_27[var_27.size] = "ASSISTED_SUICIDE";
    }

    var_30 = undefined;
    var_31 = [];
    var_32 = "";

    if ( isdefined( self.lastweaponused ) )
    {
        var_30 = self.lastweaponused;
        var_31 = scripts\mp\utility\weapon::getweaponattachmentsbasenames( var_30 );
        var_31 = scripts\mp\utility\weapon::attachmentsfilterforstats( var_31, var_30 );
        var_32 = getweaponbasename( var_30 );
        var_33 = scripts\mp\utility\weapon::ispickedupweapon( var_30 );
        var_34 = self isalternatemode( var_30, 0, 1 );
        var_35 = self playerads();
    }
    else
    {
        var_33 = 0;
        var_34 = 0;
        var_35 = 0.0;
    }

    if ( scripts\mp\utility\weapon::iskillstreakweapon( var_32 ) )
        var_27[var_27.size] = "KILLSTREAK";

    var_36 = spawn_and_enter_cargo_truck_mg();
    var_37 = -1;

    if ( isdefined( self.loadoutindex ) )
        var_37 = self.loadoutindex;

    var_38 = 0;

    if ( isdefined( self.pers["summary"]["xp"] ) )
    {
        var_39 = self.pers["summary"]["xp"];
        var_38 = var_39 - self.pers["xpAtLastDeath"];
        self.pers["xpAtLastDeath"] = var_39;
    }

    var_40 = self.score - self.pers["scoreAtLastDeath"];
    self.pers["scoreAtLastDeath"] = self.score;
    var_41 = -1;

    if ( scripts\mp\utility\game::isroundbased() )
    {
        var_41 = game["roundsPlayed"];

        if ( var_3 == "MOD_GAME_ENDED" || var_3 == "MOD_ROUND_ENDED" )
        {
            var_41--;

            if ( var_41 < 0 )
                var_41 = 0;
        }
    }

    var_42 = 0;

    if ( isdefined( var_1 ) && isdefined( var_1.modifiers ) )
        var_42 = istrue( var_1.modifiers["hipfire"] );

    self dlog_recordplayerevent( "dlog_event_life_death", [ "attacker", var_15, "death_time_from_match_start_ms", var_8, "spawn_time_from_match_start_ms", var_10, "victim_weapon", var_32, "victim_weapon_attachments", var_31, "attacker_weapon", var_14, "attacker_weapon_attachments", var_7, "victim_death_modifiers", var_27, "attacker_death_modifiers", var_13, "victim_pos_x", self.origin[0], "victim_pos_y", self.origin[1], "victim_pos_z", self.origin[2], "victim_angle_x", self.angles[0], "victim_angle_y", self.angles[1], "victim_angle_z", self.angles[2], "attacker_pos_x", var_23[0], "attacker_pos_y", var_23[1], "attacker_pos_z", var_23[2], "attacker_angle_x", var_24[0], "attacker_angle_y", var_24[1], "attacker_angle_z", var_24[2], "means_of_death", var_3, "attacker_weapon_alt_mode", var_17, "attacker_weapon_picked_up", var_16, "victim_weapon_alt_mode", var_34, "victim_weapon_picked_up", var_33, "attacker_ads_value", var_18, "victim_ads_value", var_35, "attacker_was_in_victim_fov", var_20, "victim_was_in_attacker_fov", var_21, "attacker_mount_type", var_22, "victim_mount_type", var_36, "xp_earned", var_38, "score_earned", var_40, "victim_life_index", var_0, "victim_loadout_index", var_37, "attacker_life_index", var_11, "attacker_loadout_index", var_12, "victim_was_reloading", self isreloading(), "victim_was_executing", self isinexecutionattack(), "round", var_41, "is_hipfire", var_42 ] );

    if ( isvalidclient( var_1 ) )
    {
        updatetournamentroundtime( self getxuid(), var_1 getxuid(), var_4, var_3 == "MOD_HEAD_SHOT" );

        if ( isdefined( level.matchrecording_logevent ) )
        {
            var_43 = gettime();
            [[ level.matchrecording_logevent ]]( self.clientid, self.team, "DEATH", self.origin[0], self.origin[1], var_43 );

            if ( issubstr( tolower( var_3 ), "bullet" ) && isdefined( var_4 ) && !scripts\mp\utility\weapon::iskillstreakweapon( var_4 ) )
                [[ level.matchrecording_logevent ]]( var_1.clientid, var_1.team, "BULLET", var_1.origin[0], var_1.origin[1], var_43, undefined, self.origin[0], self.origin[1] );
        }
    }
}

getplayerbuffs()
{
    var_0 = [];
    var_0[0] = scripts\cp_mp\utility\killstreak_utility::teamhasuav( self.team );
    var_0[1] = scripts\mp\utility\perk::_hasperk( "specialty_quieter" );
    var_0[2] = scripts\mp\utility\perk::_hasperk( "specialty_bulletdamage" );
    return var_0;
}

getplayerdebuffs()
{
    var_0 = gettime();
    var_1 = [];
    var_1[0] = scripts\cp_mp\utility\killstreak_utility::enemyhascuav( self.team );
    var_1[1] = scripts\cp_mp\killstreaks\helper_drone::istargetmarked();
    var_1[2] = istrue( self.flashbanged );
    var_1[3] = istrue( self.concussiongrenadefx );
    var_1[4] = isdefined( self.gastriggerstouching ) && self.gastriggerstouching.size > 0 || isdefined( self.lastgastouchtime ) && self.lastgastouchtime + 5000 > var_0;
    var_1[5] = isdefined( self.burninginfo ) || isdefined( self.lastburntime ) && self.lastburntime + 5000 > var_0;
    var_1[6] = isdefined( self.lastsnapshotgrenadetime ) && self.lastsnapshotgrenadetime + 5000 > var_0;
    var_1[7] = isdefined( self.lastinsmoketime ) && self.lastinsmoketime + 5000 > var_0;
    var_1[8] = istrue( self.empcount );
    var_1[9] = istrue( self.wphealthblock );
    return var_1;
}

scriptmover_utils( var_0 )
{
    if ( isdefined( var_0 ) )
        var_1 = var_0;
    else
        var_1 = "";

    if ( level.teambased )
        var_2 = int( scripts\mp\rank::getteamrankxpmultiplier( self.team ) );
    else
        var_2 = 0;

    var_3 = 0;
    var_4 = 0;
    var_5 = 0;
    var_6 = 0;
    var_7 = 0;
    var_8 = 0;
    var_9 = 0;

    if ( scripts\mp\utility\game::onlinestatsenabled() )
    {
        if ( isdefined( self.pers["summary"]["xp"] ) )
            var_3 = self.pers["summary"]["xp"];

        if ( isdefined( self.pers["summary"]["score"] ) )
            var_4 = self.pers["summary"]["score"];

        if ( isdefined( self.pers["summary"]["challenge"] ) )
            var_5 = self.pers["summary"]["challenge"];

        if ( isdefined( self.pers["summary"]["match"] ) )
            var_6 = self.pers["summary"]["match"];

        if ( isdefined( self.pers["summary"]["medal"] ) )
            var_7 = self.pers["summary"]["medal"];

        if ( isdefined( self.pers["summary"]["bonusXp"] ) )
            var_8 = self.pers["summary"]["bonusXp"];

        if ( isdefined( self.pers["summary"]["misc"] ) )
            var_9 = self.pers["summary"]["misc"];
    }

    var_10 = scripts\mp\rank::getrankxp();
    var_11 = scripts\mp\rank::getrankforxp( var_10 );

    if ( scripts\mp\utility\game::rankingenabled() && self hasplayerdata() )
    {
        var_12 = self getplayerdata( "common", "mpProgression", "playerLevel", "xp" );
        var_13 = self getplayerdata( "mp", "playerStats", "combatStats", "kills" );
        var_14 = self getplayerdata( "mp", "playerStats", "combatStats", "deaths" );
        var_15 = self getplayerdata( "mp", "playerStats", "matchStats", "wins" );
        var_16 = self getplayerdata( "mp", "playerStats", "matchStats", "losses" );
        var_17 = self getplayerdata( "mp", "playerStats", "combatStats", "hits" );
        var_18 = self getplayerdata( "mp", "playerStats", "combatStats", "misses" );
        var_19 = self getplayerdata( "mp", "playerStats", "combatStats", "wallbangs" );
        var_20 = self getplayerdata( "mp", "playerStats", "combatStats", "nearMisses" );
        var_21 = self getplayerdata( "mp", "playerStats", "matchStats", "gamesPlayed" );
        var_22 = self getplayerdata( "mp", "playerStats", "matchStats", "timePlayedTotal" );
        var_23 = self getplayerdata( "mp", "playerStats", "matchStats", "score" );
        var_24 = self getplayerdata( level.loadoutsgroup, "squadMembers", "season_rank" );
        var_25 = self getplayerdata( level.loadoutsgroup, "squadMembers", "season_rank" );
    }
    else
    {
        var_12 = 0;
        var_13 = 0;
        var_14 = 0;
        var_15 = 0;
        var_16 = 0;
        var_17 = 0;
        var_18 = 0;
        var_19 = 0;
        var_20 = 0;
        var_21 = 0;
        var_22 = 0;
        var_23 = 0;
        var_24 = 0;
        var_25 = 0;
    }

    var_26 = -1;
    var_27 = 0;
    var_28 = 0;

    if ( isdefined( var_0 ) )
    {
        if ( scripts\mp\utility\game::isroundbased() )
            var_26 = game["roundsPlayed"];

        if ( level.teambased )
        {
            if ( isdefined( self.team ) )
            {
                if ( self.team == "allies" )
                {
                    var_27 = getteamscore( "allies" );
                    var_28 = getteamscore( "axis" );
                }
                else if ( self.team == "axis" )
                {
                    var_27 = getteamscore( "axis" );
                    var_28 = getteamscore( "allies" );
                }
            }
        }
    }

    if ( isdefined( self.segments ) && self.segments["movementUpdateCount"] >= 30 )
    {
        var_29 = self.segments["movingTotal"] / ( self.segments["movementUpdateCount"] / 5 ) * 100;
        var_30 = self.segments["distanceTotal"] / self.segments["movementUpdateCount"];
    }
    else
    {
        var_30 = 0.0;
        var_29 = 0.0;
    }

    var_31 = 0;

    if ( isdefined( self.pers["utc_connect_time_s"] ) )
        var_31 = self.pers["utc_connect_time_s"];

    var_32 = 0.0;

    if ( isdefined( self.pers["totalDistTraveled"] ) )
        var_32 = float( self.pers["totalDistTraveled"] );

    var_33 = 0.0;

    if ( isdefined( self.pers["shotsFired"] ) && isdefined( self.pers["shotsHit"] ) )
    {
        var_34 = scripts\mp\utility\stats::getpersstat( "shotsFired" );

        if ( var_34 > 0 )
            var_33 = float( scripts\mp\utility\stats::getpersstat( "shotsHit" ) / var_34 * 100 );
    }

    var_35 = 0;

    if ( isdefined( self.pers["suicides"] ) )
        var_35 = scripts\mp\utility\stats::getpersstat( "suicides" );

    var_36 = [];
    var_36["press_rclick"] = 0;
    var_36["press_lclick"] = 0;
    var_36["press_activate"] = 0;
    var_36["press_gostand"] = 0;

    if ( scripts\mp\utility\game::getgametype() == "arm" && isdefined( self.neurotoxin_damage_loop ) )
    {
        var_36["press_rclick"] = istrue( self.neurotoxin_damage_loop["rightmouseup"] );
        var_36["press_lclick"] = istrue( self.neurotoxin_damage_loop["leftmouseup"] );
        var_36["press_activate"] = istrue( self.neurotoxin_damage_loop["activate"] );
        var_36["press_gostand"] = istrue( self.neurotoxin_damage_loop["gostand"] );
    }

    var_37 = 0;
    var_38 = 0;

    if ( scripts\mp\utility\game::getgametype() == "br" )
    {
        foreach ( var_40 in level.teamnamelist )
        {
            var_41 = scripts\mp\utility\teams::getteamcount( var_40, 1 );
            var_37 = var_37 + var_41;

            if ( var_41 > 0 )
                var_38++;
        }
    }

    self dlog_recordplayerevent( "dlog_event_player_match_end", [ "utc_connect_time_s", var_31, "utc_disconnect_time_s", getsystemtime(), "score", scripts\mp\utility\stats::getpersstat( "score" ), "assists", scripts\mp\utility\stats::getpersstat( "assists" ), "longest_streak", scripts\mp\utility\stats::getpersstat( "longestStreak" ), "kills", scripts\mp\utility\stats::getpersstat( "kills" ), "deaths", scripts\mp\utility\stats::getpersstat( "deaths" ), "headshots", scripts\mp\utility\stats::getpersstat( "headshots" ), "executions", scripts\mp\utility\stats::getpersstat( "executions" ), "player_xp_modifier", int( scripts\mp\rank::getrankxpmultipliertotal() ), "team_xp_modifier", var_2, "weapon_xp_modifier", int( scripts\mp\weaponrank::getweaponrankxpmultipliertotal() ), "battlepass_xp_modifier", int( scripts\mp\rank::lootchopper_premodifydamage() ), "total_xp", var_3, "score_xp", var_4, "challenge_xp", var_5, "match_xp", var_6, "medal_xp", var_7, "bonus_xp", var_8, "misc_xp", var_9, "rank", var_11, "season_rank", var_25, "end_xp", var_12, "end_kills", var_13, "end_deaths", var_14, "end_wins", var_15, "end_losses", var_16, "end_hits", var_17, "end_misses", var_18, "end_wall_bangs", var_19, "end_nearmisses", var_20, "end_games_played", var_21, "end_time_played_total", var_22, "end_score", var_23, "end_prestige", var_24, "disconnect_reason", var_1, "player_quit_round_number", var_26, "player_quit_team_score", var_27, "player_quit_opposing_team_score", var_28, "average_speed_during_match", var_30, "percent_time_moving", var_29, "damage_done", scripts\mp\utility\stats::getpersstat( "damage" ), "damage_taken", scripts\mp\utility\stats::getpersstat( "damageTaken" ), "distance_traveled", var_32, "weapon_accuracy", var_33, "suicides", var_35, "game_type", scripts\mp\utility\game::getgametype(), "gw_spawn_method_press_activate", var_36["press_activate"], "gw_spawn_method_press_gostand", var_36["press_gostand"], "gw_spawn_method_press_lclick", var_36["press_lclick"], "gw_spawn_method_press_rclick", var_36["press_rclick"], "is_headless", self isplayerheadless(), "was_keyboardmouse", self getplayergpadenabled() != 1, "br_remaining_players", var_37, "br_remaining_teams", var_38, "mm_party_id", self _meth_87C2() ] );
}

freight_lift_button_activation()
{
    if ( !scripts\mp\utility\game::onlinestatsenabled() )
        return;

    if ( !scripts\mp\utility\game::rankingenabled() )
        return;

    if ( !self hasplayerdata() )
        return;

    var_0 = scripts\mp\utility\game::getgametype();
    var_1 = scripts\mp\utility\stats::getpersstat( "kills" );
    var_2 = scripts\mp\utility\stats::getpersstat( "deaths" );
    var_3 = scripts\mp\utility\stats::getpersstat( "headshots" );
    var_4 = scripts\mp\utility\stats::getpersstat( "assists" );
    var_5 = scripts\mp\utility\stats::getpersstat( "suicides" );
    var_6 = scripts\mp\utility\stats::getpersstat( "score" );
    var_7 = scripts\mp\rank::getrankxp();
    var_8 = scripts\mp\rank::getrankforxp( var_7 );
    var_9 = scripts\mp\utility\stats::getpersstat( "utc_connect_time_s" );
    var_10 = getsystemtime() - var_9;
    self ctgsreportusermatchstats( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_8, var_10 );
}

logplayerdata( var_0 )
{
    if ( !isvalidclient( self ) )
        return;

    var_1 = self getplayerdata( level.loadoutsgroup, "squadMembers", "player_xp" );
    scriptmover_utils( var_0 );
    freight_lift_button_activation();

    if ( !isai( self ) && !scripts\mp\utility\game::rankingenabled() )
    {
        var_2 = scripts\mp\rank::freight_lift_attacker( self );
        scripts\mp\rank::freight_lift_attacker_internal( self.freight_lift_combat, var_2 );
    }

    self sendclientnetworktelemetry();
    self sendcollectedclientanticheatdata();
    var_3 = 0;
    var_4 = 0;

    foreach ( var_23, var_6 in self.pers["matchdataWeaponStats"] )
    {
        var_7 = 0;
        var_8 = 0;
        var_9 = 0;
        var_10 = 0;
        var_11 = 0;
        var_12 = 0;
        var_13 = 0;
        var_14 = 0;
        var_15 = 0;

        if ( scripts\mp\utility\game::getgametype() != "br" )
        {
            if ( isenumvaluevalid( "common", "LoadoutWeapon", var_6.weapon ) )
                var_7 = self getplayerdata( level.loadoutsgroup, "squadMembers", "weapon_xp", var_6.weapon );
        }

        foreach ( var_18, var_17 in var_6.stats )
        {
            if ( var_18 == "deaths" )
                var_9 = var_9 + var_17;

            if ( var_18 == "headshots" )
                var_10 = var_10 + var_17;

            if ( var_18 == "hits" )
            {
                var_11 = var_11 + var_17;
                var_4 = var_4 + var_17;
            }

            if ( var_18 == "kills" )
                var_12 = var_12 + var_17;

            if ( var_18 == "shots" )
            {
                var_13 = var_13 + var_17;
                var_3 = var_3 + var_17;
            }

            if ( var_18 == "xp_earned" )
                var_8 = var_8 + var_17;

            if ( var_18 == "damage" )
                var_14 = var_14 + var_17;

            if ( var_18 == "friendly_fire_damage" )
                var_15 = var_15 + var_17;
        }

        if ( scripts\mp\utility\game::getgametype() != "br" )
        {
            self dlog_recordplayerevent( "dlog_event_player_weapon_stats", [ "weapon", var_6.weapon, "variant_id", var_6.variantid, "loadout_index", var_6.loadoutindex, "starting_weapon_xp", var_7, "xp_earned", var_8, "deaths", var_9, "headshots", var_10, "hits", var_11, "kills", var_12, "shots", var_13, "damage", var_14, "friendly_fire_damage", var_15 ] );
            continue;
        }

        var_19 = isdefined( var_6.iscustomweapon );
        var_20 = 0;
        var_21 = 0;
        var_22 = 0;

        if ( isdefined( var_6.stats["time_used_s"] ) )
            var_22 = var_6.stats["time_used_s"];

        self dlog_recordplayerevent( "dlog_event_player_weapon_stats_br", [ "weapon", var_6.weapon, "variant_id", var_6.variantid, "from_loadout", var_19, "died", var_20, "time_used_s", var_22, "longest_hit_distance", var_21, "deaths", var_9, "headshots", var_10, "hits", var_11, "kills", var_12, "shots", var_13, "damage", var_14, "attachment_0", var_6.attachments[0], "attachment_1", var_6.attachments[1], "attachment_2", var_6.attachments[2], "attachment_3", var_6.attachments[3], "attachment_4", var_6.attachments[4], "sticker_0", var_6._id_124D3[0], "sticker_1", var_6._id_124D3[1], "sticker_2", var_6._id_124D3[2], "sticker_3", var_6._id_124D3[3], "reticle", var_6.reticle, "cosmetic_attachment", var_6.fadeoutinspectatorsofplayer, "camo", var_6.camo, "match_time_created_s", var_6.pickuptime ] );
    }
}

logscoreevent( var_0 )
{
    if ( scripts\mp\utility\entity::isgameparticipant( self ) == 0 )
        return;

    if ( !isvalidclient( self ) )
        return;

    if ( isbot( self ) || initmaxspeedforpathlengthtable( self ) || isai( self ) )
        return;

    var_1 = gettimefrommatchstart( gettime() );
    self dlog_recordplayerevent( "dlog_event_player_score_event", [ "time_ms_from_match_start", var_1, "score_event", var_0 ] );
}

_id_11EA9( var_0 )
{
    if ( getdvarint( "OMKTLMMNPT" ) == 1 )
        var_0 setplayerdata( "common", "round", "gameModeModifier", "tactical" );
    else if ( getdvarint( "MSQTTNSTNO" ) == 1 )
        var_0 setplayerdata( "common", "round", "gameModeModifier", "hardcore" );
    else
        var_0 setplayerdata( "common", "round", "gameModeModifier", "normal" );
}

endofgamesummarylogger()
{
    level waittill( "game_ended", var_0 );

    foreach ( var_2 in level.players )
    {
        wait 0.05;

        if ( !isdefined( var_2 ) )
            continue;

        if ( isdefined( var_2.weaponsused ) )
        {
            var_2 doublebubblesort();
            var_3 = 0;

            if ( var_2.weaponsused.size > 3 )
            {
                for ( var_4 = var_2.weaponsused.size - 1; var_4 > var_2.weaponsused.size - 3; var_4-- )
                {
                    var_2 setplayerdata( "common", "round", "weaponsUsed", var_3, var_2.weaponsused[var_4] );
                    var_2 setplayerdata( "common", "round", "weaponXpEarned", var_3, var_2.weaponxpearned[var_4] );
                    var_3++;
                }
            }
            else
            {
                for ( var_4 = var_2.weaponsused.size - 1; var_4 >= 0; var_4-- )
                {
                    var_2 setplayerdata( "common", "round", "weaponsUsed", var_3, var_2.weaponsused[var_4] );
                    var_2 setplayerdata( "common", "round", "weaponXpEarned", var_3, var_2.weaponxpearned[var_4] );
                    var_3++;
                }
            }
        }
        else
        {
            var_2 setplayerdata( "common", "round", "weaponsUsed", 0, "none" );
            var_2 setplayerdata( "common", "round", "weaponsUsed", 1, "none" );
            var_2 setplayerdata( "common", "round", "weaponsUsed", 2, "none" );
            var_2 setplayerdata( "common", "round", "weaponXpEarned", 0, 0 );
            var_2 setplayerdata( "common", "round", "weaponXpEarned", 1, 0 );
            var_2 setplayerdata( "common", "round", "weaponXpEarned", 2, 0 );
        }

        if ( isdefined( var_2.challengescompleted ) )
            var_2 setplayerdata( "common", "round", "challengeNumCompleted", var_2.challengescompleted.size );
        else
            var_2 setplayerdata( "common", "round", "challengeNumCompleted", 0 );

        for ( var_4 = 0; var_4 < 20; var_4++ )
        {
            if ( isdefined( var_2.challengescompleted ) && isdefined( var_2.challengescompleted[var_4] ) && var_2.challengescompleted[var_4] != "ch_prestige" && !issubstr( var_2.challengescompleted[var_4], "_daily" ) && !issubstr( var_2.challengescompleted[var_4], "_weekly" ) )
            {
                var_2 setplayerdata( "common", "round", "challengesCompleted", var_4, var_2.challengescompleted[var_4] );
                continue;
            }

            var_2 setplayerdata( "common", "round", "challengesCompleted", var_4, "ch_none" );
        }

        var_5 = tolower( getdvar( "mapname" ) );
        var_2 setplayerdata( "common", "round", "gameMode", scripts\mp\utility\game::getgametype() );
        var_2 setplayerdata( "common", "round", "map", var_5 );
        _id_11EA9( var_2 );
    }
}

x1ops1()
{
    if ( scripts\mp\utility\game::matchmakinggame() )
    {
        var_0 = tolower( getdvar( "mapname" ) );
        var_1 = getdvarint( "NLTOPSKPQM" );

        foreach ( var_3 in level.players )
        {
            for ( var_4 = 31; var_4 > 0; var_4-- )
            {
                var_5 = var_3 getplayerdata( "mp", "mapsPlayed", var_4 - 1 );
                var_3 setplayerdata( "mp", "mapsPlayed", var_4, var_5 );
            }

            var_3 setplayerdata( "mp", "mapsPlayed", 0, var_0 );

            for ( var_4 = 4; var_4 > 0; var_4-- )
            {
                var_6 = var_3 getplayerdata( "mp", "playlistIdsPlayed", var_4 - 1 );
                var_3 setplayerdata( "mp", "playlistIdsPlayed", var_4, var_6 );
            }

            var_3 setplayerdata( "mp", "playlistIdsPlayed", 0, var_1 );
        }
    }
}

doublebubblesort()
{
    var_0 = self.weaponxpearned;
    var_1 = self.weaponxpearned.size;

    for ( var_2 = var_1 - 1; var_2 > 0; var_2-- )
    {
        for ( var_3 = 1; var_3 <= var_2; var_3++ )
        {
            if ( var_0[var_3 - 1] < var_0[var_3] )
            {
                var_4 = self.weaponsused[var_3];
                self.weaponsused[var_3] = self.weaponsused[var_3 - 1];
                self.weaponsused[var_3 - 1] = var_4;
                var_5 = self.weaponxpearned[var_3];
                self.weaponxpearned[var_3] = self.weaponxpearned[var_3 - 1];
                self.weaponxpearned[var_3 - 1] = var_5;
                var_0 = self.weaponxpearned;
            }
        }
    }
}

isvalidclient( var_0 )
{
    if ( istrue( game["isLaunchChunk"] ) )
        return 0;

    if ( !isdefined( var_0 ) )
        return 0;
    else if ( isagent( var_0 ) )
        return 0;
    else if ( !isplayer( var_0 ) )
        return 0;

    return 1;
}

canlogclient( var_0 )
{
    if ( isvalidclient( var_0 ) )
        return var_0.clientid < level.maxlogclients;
    else
        return 0;
}

canloglife( var_0 )
{
    return var_0 < level.maxlives;
}

logweaponstat( var_0, var_1, var_2, var_3, var_4 )
{
    if ( scripts\mp\utility\weapon::iskillstreakweapon( var_0 ) || scripts\mp\utility\weapon::isvehicleweapon( var_0 ) )
        return;

    if ( scripts\mp\utility\game::getgametype() == "br" && !istrue( level.degrees_to_radians ) )
        return;

    var_5 = var_0;

    if ( scripts\mp\utility\game::getgametype() != "br" )
    {
        if ( isdefined( self.loadoutindex ) )
            var_5 = var_5 + "+loadoutIndex" + self.loadoutindex;
        else
            return;
    }
    else if ( isdefined( self.pers["matchdataWeaponStats"][var_5] ) && isdefined( var_4 ) )
    {
        if ( !display_cypher_updated( var_4, var_5 ) )
        {
            var_6 = 1;
            var_7 = var_5 + "_" + var_6;

            for (;;)
            {
                if ( !isdefined( self.pers["matchdataWeaponStats"][var_7] ) || display_cypher_updated( var_4, var_7 ) )
                    break;

                var_6++;
                var_7 = var_5 + "_" + var_6;
            }

            var_5 = var_7;
        }
    }

    if ( !isdefined( self.pers["matchdataWeaponStats"][var_5] ) )
    {
        self.pers["matchdataWeaponStats"][var_5] = spawnstruct();
        self.pers["matchdataWeaponStats"][var_5].stats = [];
        self.pers["matchdataWeaponStats"][var_5].weapon = var_0;
        self.pers["matchdataWeaponStats"][var_5].loadoutindex = self.loadoutindex;

        if ( isdefined( var_3 ) )
            self.pers["matchdataWeaponStats"][var_5].variantid = var_3;
        else
            self.pers["matchdataWeaponStats"][var_5].variantid = -1;

        if ( scripts\mp\utility\game::getgametype() == "br" && isdefined( var_4 ) )
        {
            var_8 = scripts\engine\utility::ter_op( isdefined( var_4.camo ), var_4.camo, "none" );
            var_9 = scripts\engine\utility::ter_op( isdefined( var_4.visual ), var_4.visual, "none" );
            var_10 = scripts\engine\utility::ter_op( isdefined( var_4.reticle ), var_4.reticle, "none" );
            self.pers["matchdataWeaponStats"][var_5].iscustomweapon = isdefined( var_4.customweaponname );
            self.pers["matchdataWeaponStats"][var_5].camo = var_8;
            self.pers["matchdataWeaponStats"][var_5].fadeoutinspectatorsofplayer = var_9;
            self.pers["matchdataWeaponStats"][var_5].reticle = var_10;
            self.pers["matchdataWeaponStats"][var_5].pickuptime = scripts\cp_mp\utility\game_utility::gettimesincegamestart();
            var_11 = scripts\mp\utility\weapon::getweaponattachmentsbasenames( var_4 );
            var_12 = [];

            for ( var_13 = 0; var_13 < 5; var_13++ )
                var_12[var_13] = "none";

            var_14 = 0;

            foreach ( var_16 in var_11 )
            {
                if ( scripts\mp\utility\weapon::attachmentlogsstats( var_16, var_4 ) )
                {
                    var_12[var_14] = var_16;
                    var_14++;
                }
            }

            self.pers["matchdataWeaponStats"][var_5].attachments = var_12;
            var_18 = [];
            var_18[var_18.size] = var_4.stickerslot0;
            var_18[var_18.size] = var_4.stickerslot1;
            var_18[var_18.size] = var_4.stickerslot2;
            var_18[var_18.size] = var_4.stickerslot3;
            self.pers["matchdataWeaponStats"][var_5]._id_124D3 = var_18;
        }
    }

    if ( !isdefined( self.pers["matchdataWeaponStats"][var_5].stats[var_1] ) )
        self.pers["matchdataWeaponStats"][var_5].stats[var_1] = var_2;
    else
        self.pers["matchdataWeaponStats"][var_5].stats[var_1] = self.pers["matchdataWeaponStats"][var_5].stats[var_1] + var_2;
}

display_cypher_updated( var_0, var_1 )
{
    var_2 = scripts\engine\utility::ter_op( isdefined( var_0.camo ), var_0.camo, "none" );

    if ( var_2 != self.pers["matchdataWeaponStats"][var_1].camo )
        return 0;

    var_3 = scripts\engine\utility::ter_op( isdefined( var_0.visual ), var_0.visual, "none" );

    if ( var_3 != self.pers["matchdataWeaponStats"][var_1].fadeoutinspectatorsofplayer )
        return 0;

    var_4 = scripts\engine\utility::ter_op( isdefined( var_0.reticle ), var_0.reticle, "none" );

    if ( var_4 != self.pers["matchdataWeaponStats"][var_1].reticle )
        return 0;

    var_5 = scripts\mp\utility\weapon::getweaponattachmentsbasenames( var_0 );

    if ( var_5.size != self.pers["matchdataWeaponStats"][var_1].attachments.size )
        return 0;

    for ( var_6 = 0; var_6 < var_5.size; var_6++ )
    {
        if ( var_5[var_6] != self.pers["matchdataWeaponStats"][var_1].attachments[var_6] )
            return 0;
    }

    var_7 = [];
    var_7[var_7.size] = var_0.stickerslot0;
    var_7[var_7.size] = var_0.stickerslot1;
    var_7[var_7.size] = var_0.stickerslot2;
    var_7[var_7.size] = var_0.stickerslot3;

    if ( var_7.size != self.pers["matchdataWeaponStats"][var_1]._id_124D3.size )
        return 0;

    for ( var_6 = 0; var_6 < var_7.size; var_6++ )
    {
        if ( var_7[var_6] != self.pers["matchdataWeaponStats"][var_1]._id_124D3[var_6] )
            return 0;
    }

    return 1;
}

logattachmentstat( var_0, var_1, var_2, var_3 )
{
    if ( !level.matchdataattachmentstatsenabled )
        return;
}

buildweaponrootlist()
{
    var_0 = [];
    var_1 = 149;

    for ( var_2 = 0; var_2 <= var_1; var_2++ )
    {
        var_3 = tablelookup( "mp/statstable.csv", 0, var_2, 4 );
        var_4 = tablelookup( "mp/statstable.csv", 0, var_2, 2 );

        if ( !issubstr( var_4, "weapon_" ) )
            continue;

        if ( var_4 == "weapon_other" )
            continue;

        var_0[var_0.size] = var_3;
    }

    return var_0;
}

logchallenge( var_0, var_1 )
{

}

logaward( var_0 )
{
    if ( !isvalidclient( self ) )
        return;

    if ( isbot( self ) || initmaxspeedforpathlengthtable( self ) || isai( self ) )
        return;

    var_1 = gettimefrommatchstart( gettime() );
    self dlog_recordplayerevent( "dlog_event_player_award", [ "time_ms_from_match_start", var_1, "award", var_0 ] );
}
