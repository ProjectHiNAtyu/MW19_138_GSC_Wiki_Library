// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level._effect["vfx_killmonger_screen_fx"] = loadfx( "vfx/iw8_br/gameplay/rumble/vfx_rum_killmonger_scrnfx" );
    level._effect["vfx_killmonger_blood_trail"] = loadfx( "vfx/iw8_br/gameplay/rumble/vfx_rum_marked_blood_trail" );
    level._effect["vfx_killmonger_smoke_trail"] = loadfx( "vfx/iw8_br/gameplay/rumble/vfx_rum_killmonger_trail" );
    level._effect["vfx_killmonger_victim_explosion"] = loadfx( "vfx/iw8_br/gameplay/rumble/vfx_rum_victim_explosion" );
    scripts\engine\scriptable::_id_11CD8( ::vo_areas_remaining );
    vipbot_movesup();
    relic_squadlink_toofar_hud_logic();
}

vo_areas_remaining( var_0, var_1, var_2, var_3, var_4 )
{
    if ( isdefined( var_0 ) )
    {
        if ( isdefined( var_0.type ) && var_0.type == "brloot_rumble_powerup_killmonger" )
        {
            var_3 vo_boss_heli( "killmonger" );
            var_0 freescriptable();
        }
    }
}

vipbot_movesup()
{
    level.vo_crates_remaining = spawnstruct();
    level.vo_crates_remaining.playersetcontrols = [];
    level.vo_crates_remaining.use_struct = [];
}

viphud_deletehud( var_0 )
{
    level.vo_crates_remaining.playersetcontrols[var_0.relativevelocity] = var_0;
    level.vo_crates_remaining.use_struct[var_0.relativevelocity] = [];
}

vip_removequestinstance( var_0 )
{
    if ( !vip_ontimerexpired( var_0 ) )
        return;

    return level.vo_crates_remaining.playersetcontrols[var_0];
}

vo_boss_heli( var_0 )
{
    if ( !vip_ontimerexpired( var_0 ) )
        return 0;

    if ( !scripts\engine\utility::array_contains( level.vo_crates_remaining.use_struct[var_0], self ) )
    {
        vip_playerdisconnect( var_0 );
        level.vo_crates_remaining.use_struct[var_0] = scripts\engine\utility::array_add( level.vo_crates_remaining.use_struct[var_0], self );
    }
    else
    {
        var_1 = visibilityisscriptcontrolled( var_0 );

        if ( isdefined( var_1.vip_respawnplayer.weapon_xp_iw8_pi_cpapa ) )
            var_1 [[ var_1.vip_respawnplayer.weapon_xp_iw8_pi_cpapa ]]();
    }
}

vo_control_tower( var_0 )
{
    if ( !vip_ontimerexpired( var_0 ) )
        return 0;

    if ( scripts\engine\utility::array_contains( level.vo_crates_remaining.use_struct[var_0], self ) )
        level.vo_crates_remaining.use_struct[var_0] = scripts\engine\utility::array_remove( level.vo_crates_remaining.use_struct[var_0], self );
}

vip_playerdisconnect( var_0 )
{
    var_1 = spawnstruct();
    var_1.vip_respawnplayer = vip_removequestinstance( var_0 );
    var_1.player = self;
    var_1.team = self.team;
    var_1._id_12686 = scripts\mp\utility\teams::getteamdata( self.team, "players" );
    var_1.origin = self.origin;
    var_1.angles = self.angles;
    var_1.play_3p_anim_non_animscene = [];
    var_1._id_1245A = gettime();
    var_1.hudcost = gettime() + var_1.vip_respawnplayer.duration * 1000;
    var_1 vip_playerdied( var_1.player );
    var_1 thread [[ var_1.vip_respawnplayer.airfield_safehouse_loot ]]();

    foreach ( var_3 in var_1._id_12686 )
    {
        var_4 = var_1 viphud_showtoplayer( var_1.player, undefined, &"BR_RUMBLE/KILLMONGER_DEFEND" );
        var_3 scripts\mp\objidpoolmanager::objective_playermask_addshowplayer( var_4, var_3 );
    }
}

vip_playerdied( var_0 )
{
    if ( !isdefined( var_0.viphud_hidefromplayer ) )
        var_0.viphud_hidefromplayer = [];

    var_0.viphud_hidefromplayer[self.vip_respawnplayer.relativevelocity] = self;
}

vip_questthink_iconposition( var_0 )
{
    if ( !isdefined( var_0.viphud_hidefromplayer[self.vip_respawnplayer.relativevelocity] ) )
        return;

    var_0.viphud_hidefromplayer = scripts\engine\utility::array_remove( var_0.viphud_hidefromplayer, var_0.viphud_hidefromplayer[self.vip_respawnplayer.relativevelocity] );
}

visible2state( var_0 )
{
    if ( scripts\engine\utility::array_contains( level.vo_crates_remaining.use_struct[var_0], self ) )
        return 1;

    return 0;
}

visibilityisscriptcontrolled( var_0 )
{
    if ( !visible2state( var_0 ) )
        return;

    if ( !isdefined( self.viphud_hidefromplayer ) )
        return;

    return self.viphud_hidefromplayer[var_0];
}

vip_playerremoved()
{
    foreach ( var_1 in self.play_3p_anim_non_animscene )
        scripts\mp\objidpoolmanager::objective_playermask_hidefromall( var_1 );
}

vip_ontimerexpired( var_0 )
{
    var_1 = scripts\engine\utility::array_contains_key( level.vo_crates_remaining.playersetcontrols, var_0 );

    if ( isdefined( level.vo_crates_remaining.playersetcontrols ) && var_1 )
        return 1;
    else
        return 0;
}

relic_squadlink_toofar_hud_logic()
{
    var_0 = spawnstruct();
    var_0.relativevelocity = "killmonger";
    var_0.duration = 30;
    var_0.airfield_safehouse_loot = ::relic_shieldsonly_set_player_stats_after_spawn;
    var_0.weapon_xp_iw8_pi_cpapa = ::relic_squadlink_vision_debuff;
    var_0._id_12F21 = ::relic_team_proximity_monitor;
    var_0.get_all_players_enemy_info_new = ::relic_squadlink_onsteppedclose;
    viphud_deletehud( var_0 );
}

relic_shieldsonly_set_player_stats_after_spawn()
{
    self.use_emp_drone = 0;
    self.spawn_origin = 2;
    self.player.viphud_setupvisibility = 1;
    self.helipad_activated = 0;
    self._id_12A36 = self.player scripts\mp\hud_util::createtimer( "default", 2 );
    self._id_12A36.x = 0;
    self._id_12A36.y = 0;
    self._id_12A36 scripts\mp\hud_util::setpoint( "BOTTOM_RIGHT", "BOTTOM_RIGHT", -100, -100, 0.5 );
    self._id_12A36 settimer( 30 );
    relic_steelballs_slide();
    playfxontagforclients( scripts\engine\utility::getfx( "vfx_killmonger_screen_fx" ), self.player, "tag_origin", self.player );
    self.player playlocalsound( "ui_iw8_vip_premium_collected_fullscreen_lsrs" );
    self.player lerpfovbypreset( "zombiedefault" );
    thread relic_team_proximity_monitor();
}

relic_team_proximity_monitor()
{
    self endon( "death" );
    self endon( "stop_killmonger" );
    self.player endon( "death_or_disconnect" );
    self.player endon( "joined_team" );
    self.player endon( "joined_spectators" );
    level endon( "game_ended" );
    thread relic_squadlink_outline_monitor();
    var_0 = 0;

    while ( gettime() < self.hudcost )
    {
        var_1 = gettime();

        if ( var_1 - var_0 >= 5000.0 )
        {
            thread relic_steelballs_stump();
            thread relic_squadlink_watch_for_visionset_end();
            var_0 = gettime();
        }

        waitframe();
    }

    relic_squadlink_onsteppedclose();
}

relic_squadlink_outline_monitor()
{
    self endon( "death" );
    level endon( "game_ended" );
    self endon( "stop_killmonger" );
    self.player scripts\engine\utility::_id_12E40( "death_or_disconnect", "joined_team", "joined_spectators" );
    relic_squadlink_onsteppedclose();
    self notify( "stop_killmonger" );
}

relic_squadlink_onsteppedclose()
{
    stopfxontagforclients( scripts\engine\utility::getfx( "vfx_killmonger_screen_fx" ), self.player, "tag_origin", self.player );
    self.player.viphud_setupvisibility = 0;
    self.player lerpfovbypreset( "default_2seconds" );
    vip_questthink_iconposition( self.player );
    vip_playerremoved();
    relic_squadlink_onsteppedfar();
    self._id_12A36 scripts\mp\hud_util::destroyelem();
    self.player vo_control_tower( "killmonger" );
    self notify( "stop_killmonger" );
}

relic_squadlink_vision_debuff()
{
    relic_squadlink_remove_visionset( 30 );
    self.helipad_activated = 0;
    self.player playlocalsound( "ui_iw8_vip_premium_collected_fullscreen_lsrs" );
    self.player lerpfovbypreset( "zombiedefault" );
}

relic_squadlink_turn_team_headobjectives( var_0 )
{
    if ( isdefined( var_0.attacker.viphud_setupvisibility ) )
    {
        if ( var_0.attacker.viphud_setupvisibility )
        {
            playfx( scripts\engine\utility::getfx( "vfx_killmonger_victim_explosion" ), var_0.victim.origin );
            playsoundatpos( var_0.victim.origin, "deaths_door_death" );
            var_1 = var_0.attacker visibilityisscriptcontrolled( "killmonger" );
            var_1.use_emp_drone++;

            if ( var_1.helipad_activated < 3 )
            {
                var_1 relic_squadlink_remove_visionset( 10 );
                var_1.helipad_activated++;
            }

            if ( var_1.use_emp_drone % 3 == 0 )
            {
                var_2 = clamp( var_1.spawn_origin + 1, 2, 2 );
                var_1.spawn_origin = var_2;
            }

            var_3 = ( var_1.spawn_origin - 1 ) * 75;
            var_1.player thread scripts\mp\rank::giverankxp( "br_rumble_killmonger_kill_bonus", var_3, var_0.objweapon );
            var_1.player thread scripts\mp\rank::scoreeventpopup( "br_rumble_killmonger_kill_bonus" );
        }
    }
}

relic_squadlink_remove_visionset( var_0 )
{
    self.hudcost = clamp( self.hudcost + var_0 * 1000, 0, gettime() + 60000 );
    var_1 = ( self.hudcost - gettime() ) / 1000;
    self._id_12A36 settimer( var_1 );
}

relic_steelballs_slide()
{
    playfxontag( scripts\engine\utility::getfx( "vfx_killmonger_smoke_trail" ), self.player, "j_spine4" );
    stopfxontagforclients( scripts\engine\utility::getfx( "vfx_killmonger_smoke_trail" ), self.player, "j_spine4", self.player );
}

relic_squadlink_onsteppedfar()
{
    stopfxontag( scripts\engine\utility::getfx( "vfx_killmonger_smoke_trail" ), self.player, "j_spine4" );
}

relic_squadlink_watch_for_visionset_end()
{
    level endon( "game_ended" );
    self.player scripts\mp\utility\perk::giveperk( "specialty_tracker" );
    wait 2.0;
    self.player scripts\mp\utility\perk::removeperk( "specialty_tracker" );
}

relic_steelballs_stump()
{
    var_0 = self.player;
    var_1 = self.player.origin;
    var_2 = self.player.angles;
    var_3 = relic_squadlink_onbecameinvalidplayer( var_0, var_1 );
    var_4 = physics_createcontents( [ "physicscontents_solid", "physicscontents_glass", "physicscontents_water", "physicscontents_sky", "physicscontents_item", "physicscontents_vehicle" ] );
    var_5 = scripts\common\utility::playersinsphere( var_1, 1500 );
    var_6 = relic_squadlink_add_visionset( var_1, 1500 );

    if ( var_6.size )
        var_5 = scripts\engine\utility::array_combine( var_5, var_6 );

    self._id_11C78 = var_5;

    if ( var_5.size > 0 )
        self.player playlocalsound( "ui_splash_dov2_device_on_ground" );

    foreach ( var_8 in var_5 )
    {
        if ( !scripts\mp\utility\player::isreallyalive( var_8 ) )
            continue;

        if ( !scripts\cp_mp\utility\player_utility::playersareenemies( var_0, var_8 ) )
            continue;

        if ( 0 )
        {
            var_9 = var_1;
            var_10 = var_8 geteye();
            var_11 = physics_raycast( var_9, var_10, var_4, undefined, 0, "physicsquery_closest", 1 );

            if ( isdefined( var_11 ) && var_11.size > 0 )
                continue;
        }

        thread relic_squadlink_modifyplayerdamage( var_8, var_0, var_3 );
        thread relic_squadlink_init_vfx( var_8, var_0 );
    }

    if ( 1 )
        triggerportableradarping( var_1, var_0, 1500, 500, "specialty_snapshot_immunity" );
}

relic_squadlink_init_vfx( var_0, var_1 )
{
    level endon( "game_ended" );
    var_2 = playfxontagforclients( scripts\engine\utility::getfx( "vfx_killmonger_blood_trail" ), var_0, "j_spine4", var_1 );
    wait 2.36111;
    stopfxontagforclients( scripts\engine\utility::getfx( "vfx_killmonger_blood_trail" ), var_0, "j_spine4", var_1 );
}

relic_squadlink_modifyplayerdamage( var_0, var_1, var_2 )
{
    if ( var_0 scripts\mp\utility\perk::_hasperk( "specialty_snapshot_immunity" ) )
    {
        var_1 scripts\mp\damagefeedback::updatedamagefeedback( "hittacresist" );
        return;
    }

    if ( 1 )
    {
        var_3 = var_0 getentitynumber();
        var_2.targets[var_3] = var_0;
        var_2.endtimes[var_3] = gettime() + 4250.0;
        var_2.outlineids[var_3] = scripts\mp\utility\outline::outlineenableforplayer( var_0, var_1, "killmonger_snapshot", "equipment" );

        if ( isplayer( var_0 ) || isbot( var_0 ) )
            var_0 scripts\mp\utility\outline::_hudoutlineviewmodelenable( "killmonger_snapshot", 0 );

        var_2 thread relic_steelballs_stump_monitor();
    }

    var_0.lastsnapshotgrenadetime = gettime();
    var_1 scripts\mp\damage::combatrecordtacticalstat( "equip_snapshot_grenade" );
    var_1 scripts\mp\utility\stats::incpersstat( "snapshotHits", 1 );
}

relic_squadlink_onbecameinvalidplayer( var_0, var_1 )
{
    var_2 = undefined;

    if ( 1 )
    {
        var_2 = spawnstruct();
        var_2.owner = var_0;
        var_2.position = var_1;
        var_2.isalive = 1;
        var_2.targets = [];
        var_2.endtimes = [];
        var_2.outlineids = [];
    }

    return var_2;
}

relic_steelballs_stump_monitor()
{
    self endon( "death" );
    self endon( "stop_killmonger" );
    self.owner endon( "death_or_disconnect" );
    self.owner endon( "joined_team" );
    self.owner endon( "joined_spectators" );
    level endon( "game_ended" );

    if ( !istrue( self.isalive ) )
        return;

    self notify( "update" );
    self endon( "update" );
    thread relic_steelballs_dodamage();

    while ( self.targets.size > 0 )
    {
        foreach ( var_4, var_1 in self.targets )
        {
            var_1 = self.targets[var_4];
            var_2 = self.endtimes[var_4];
            var_3 = self.outlineids[var_4];

            if ( !isdefined( var_1 ) || !scripts\mp\utility\player::isreallyalive( var_1 ) || gettime() >= var_2 )
            {
                scripts\mp\utility\outline::outlinedisable( var_3, var_1 );

                if ( isdefined( var_1 ) && ( isplayer( var_1 ) || isbot( var_1 ) ) )
                    var_1 scripts\mp\utility\outline::_hudoutlineviewmodeldisable();

                self.targets[var_4] = undefined;
                self.endtimes[var_4] = undefined;
                self.outlineids[var_4] = undefined;
            }
        }

        waitframe();
    }

    thread relic_steelballs_health_boost();
}

relic_steelballs_dodamage()
{
    self endon( "death" );
    self endon( "update" );
    self endon( "stop_killmonger" );
    relic_steelballs_dash();
    thread relic_steelballs_health_boost();
}

relic_steelballs_dash()
{
    self.owner endon( "death_or_disconnect" );
    self.owner endon( "joined_team" );
    self.owner endon( "joined_spectators" );
    self endon( "stop_killmonger" );
    level endon( "game_ended" );

    for (;;)
        waitframe();
}

relic_steelballs_health_boost()
{
    self notify( "death" );
    self.isalive = 0;

    foreach ( var_3, var_1 in self.targets )
    {
        var_1 = self.targets[var_3];
        var_2 = self.outlineids[var_3];
        scripts\mp\utility\outline::outlinedisable( var_2, var_1 );

        if ( isdefined( var_1 ) && ( isplayer( var_1 ) || isbot( var_1 ) ) )
            var_1 scripts\mp\utility\outline::_hudoutlineviewmodeldisable();
    }
}

relic_squadlink_add_visionset( var_0, var_1 )
{
    var_2 = relic_squadlink_flash_squadlink_icon( var_0, var_1 );
    var_3 = [];
    var_4 = var_1 * var_1;

    foreach ( var_6 in var_2 )
    {
        var_7 = distancesquared( var_6.origin, var_0 );

        if ( var_7 < var_4 )
            var_3[var_3.size] = var_6;
    }

    return var_3;
}

relic_squadlink_flash_squadlink_icon( var_0, var_1 )
{
    var_2 = physics_createcontents( [ "physicscontents_actor" ] );
    var_3 = ( var_1, var_1, var_1 );
    var_4 = var_0 - var_3;
    var_5 = var_0 + var_3;
    var_6 = physics_aabbbroadphasequery( var_4, var_5, var_2, [] );
    return var_6;
}

viphud_showtoplayer( var_0, var_1, var_2 )
{
    if ( !isdefined( var_1 ) )
        var_1 = "icon_waypoint_generic";

    var_3 = scripts\mp\objidpoolmanager::requestobjectiveid( 1 );
    objective_state( var_3, "current" );
    objective_position( var_3, var_0.origin + ( 0, 0, 100 ) );
    objective_setplayintro( var_3, 1 );
    objective_setshowoncompass( var_3, 0 );
    objective_setshowdistance( var_3, 0 );
    scripts\mp\objidpoolmanager::update_objective_icon( var_3, var_1 );
    scripts\mp\objidpoolmanager::update_objective_setbackground( var_3, 1 );
    scripts\mp\objidpoolmanager::update_objective_setzoffset( var_3, 100 );
    scripts\mp\objidpoolmanager::update_objective_onentity( var_3, var_0 );

    if ( isdefined( var_2 ) )
        scripts\mp\objidpoolmanager::update_objective_setneutrallabel( var_3, var_2 );

    scripts\mp\objidpoolmanager::objective_set_pulsate( var_3, 1 );
    scripts\mp\objidpoolmanager::objective_playermask_hidefromall( var_3 );
    self.play_3p_anim_non_animscene = scripts\engine\utility::array_add( self.play_3p_anim_non_animscene, var_3 );
    return var_3;
}

get_cumulative_damage_expire_time()
{
    scripts\mp\gametypes\br_dev.gsc::zombiesdamagezombies( ::get_correct_bomb_wire_pair );
    level thread get_current_ai_cap();
}

get_current_ai_cap()
{
    level endon( "game_ended" );

    while ( !isdefined( level.player ) )
        waitframe();
}

get_correct_bomb_wire_pair( var_0, var_1 )
{
    var_2 = "";

    switch ( var_0 )
    {
        case "rmbl_give_killmonger_powerup":
            level.player vo_boss_heli( "killmonger" );
            var_3 = anglestoforward( level.player.angles ) * 20;
            break;
        case "rmbl_spawn_killmonger_powerup":
            var_4 = level.player.origin + anglestoforward( level.player.angles ) * 300 + ( 0, 0, 25 );
            easepower( "brloot_rumble_powerup_killmonger", var_4 );
            break;
        case "rmbl_give_teammate_killmonger_powerup":
            var_5 = scripts\mp\utility\teams::getteamdata( level.player.team, "players" );
            var_5 = scripts\engine\utility::array_remove( var_5, level.player );
            var_5[randomintrange( 0, var_5.size )] vo_boss_heli( "killmonger" );
            break;
    }
}
