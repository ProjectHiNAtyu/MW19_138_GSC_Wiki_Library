// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

createstreakinfo( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2.streakname = var_0;
    var_2.owner = var_1;
    var_2.id = getuniquekillstreakid( var_1 );
    var_2.lifeid = getcurrentplayerlifeidforkillstreak();
    var_2.score = 0;
    var_2.shots_fired = 0;
    var_2.hits = 0;
    var_2.damage = 0;
    var_2.kills = 0;

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "createCustomStreakData" ) )
        var_2 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "createCustomStreakData" ) ]]( var_2, var_0 );

    return var_2;
}

getuniquekillstreakid( var_0 )
{
    if ( !isdefined( var_0.pers["nextKillstreakID"] ) )
        var_0.pers["nextKillstreakID"] = 0;

    var_1 = var_0.pers["nextKillstreakID"];
    var_0.pers["nextKillstreakID"]++;
    return var_1;
}

getcurrentplayerlifeidforkillstreak()
{
    if ( !isdefined( self.pers["deaths"] ) )
        return 0;

    return self.pers["deaths"];
}

getkillstreaklifeid( var_0 )
{
    var_1 = undefined;

    for ( var_2 = 1; var_2 <= 3; var_2++ )
    {
        var_3 = self.streakdata.streaks[var_2];

        if ( isdefined( var_3 ) && var_3.streakname == var_0 )
        {
            var_1 = var_3;
            break;
        }
    }

    if ( isdefined( var_1 ) )
        return var_1.lifeid;

    return undefined;
}

registervisibilityomnvarforkillstreak( var_0, var_1, var_2 )
{
    if ( !isdefined( level.killstreak_visbilityomnvarlist ) )
        level.killstreak_visbilityomnvarlist = [];

    if ( isdefined( level.killstreak_visbilityomnvarlist[var_0] ) && isdefined( level.killstreak_visbilityomnvarlist[var_0][var_1] ) )
        return;

    var_3 = 0;

    foreach ( var_5 in level.killstreak_visbilityomnvarlist )
    {
        foreach ( var_7 in var_5 )
        {
            if ( var_2 == var_7 )
            {
                var_3 = 1;
                break;
            }
        }

        if ( istrue( var_3 ) )
            return;
    }

    level.killstreak_visbilityomnvarlist[var_0][var_1] = var_2;
}

_setvisibiilityomnvarforkillstreak( var_0, var_1 )
{
    var_2 = undefined;

    if ( var_1 == "off" )
        var_2 = 0;
    else
        var_2 = level.killstreak_visbilityomnvarlist[var_0][var_1];

    self setclientomnvar( "ui_killstreak_controls", var_2 );
}

killstreakcanbeusedatroundstart( var_0 )
{
    switch ( var_0 )
    {
        case "rcxd_rad":
        case "weapondrop":
        case "dronedrop":
        case "radar_drone_overwatch":
        case "scrambler_drone_guard":
        case "directional_uav":
        case "counter_uav":
        case "uav":
            return 1;
        default:
            return 0;
    }
}

isridekillstreak( var_0 )
{
    switch ( var_0 )
    {
        case "cruise_predator":
        case "pac_sentry":
        case "assault_drone":
        case "radar_drone_recon":
        case "gunship":
        case "chopper_gunner":
            return 1;
        default:
            return 0;
    }
}

ismapselectkillstreak( var_0 )
{
    switch ( var_0 )
    {
        case "multi_airstrike":
        case "white_phosphorus":
        case "scrambler_drone_guard":
        case "nuke":
            return 1;
        default:
            return 0;
    }
}

radialmonitor( var_0 )
{
    var_1 = 0;

    switch ( var_0 )
    {
        case "ks_remote_gunship_mp":
        case "ks_remote_device_mp":
            var_1 = 1;
            break;
    }

    return var_1;
}

starttabletscreen( var_0, var_1 )
{
    var_2 = int( tablelookup( "mp/killstreakTable.csv", 1, var_0, 0 ) );
    self setclientomnvar( "ui_remote_control_sequence", var_2 );
    thread tabletdofset( var_1 );
}

stoptabletscreen( var_0, var_1 )
{
    self setclientomnvar( "ui_remote_control_sequence", -1 );
    thread tabletdofset( var_0, 1, var_1 );
}

tabletdofset( var_0, var_1, var_2 )
{
    self endon( "disconnect" );
    self notify( "dof_set_tablet" );
    self endon( "dof_set_tablet" );

    if ( istrue( var_1 ) && !istrue( var_2 ) )
    {
        self enablephysicaldepthoffieldscripting();
        self setphysicaldepthoffield( 1.8, 15, 20, 20 );
        self setphysicalviewmodeldepthoffield( 30, 5 );
    }

    if ( isdefined( var_0 ) && var_0 > 0 )
        scripts\cp_mp\hostmigration::hostmigration_waitlongdurationwithpause( var_0 );

    if ( istrue( var_1 ) )
        self disablephysicaldepthoffieldscripting();
    else
    {
        self enablephysicaldepthoffieldscripting();
        self setphysicaldepthoffield( 1.8, 15, 20, 20 );
        self setphysicalviewmodeldepthoffield( 30, 5 );
    }
}

killstreak_savenvgstate()
{
    if ( !isdefined( self.pers["useNVG"] ) )
        return;

    if ( self isnightvisionon() )
    {
        self.pers["useNVG"] = 1;
        self.pers["killstreak_forcedNVGOff"] = 1;
        self nightvisionviewoff( 1 );
    }
    else
    {
        self.pers["useNVG"] = 0;
        self.pers["killstreak_forcedNVGOff"] = 0;
    }
}

killstreak_restorenvgstate()
{
    if ( !isdefined( self.pers["useNVG"] ) )
        return;

    if ( istrue( self.pers["useNVG"] ) )
    {
        self nightvisionviewon( 1 );
        self.pers["killstreak_forcedNVGOff"] = 0;
    }
}

playkillstreakoperatordialog( var_0, var_1, var_2 )
{
    var_3 = undefined;

    if ( isplayer( self ) )
        var_3 = self;
    else if ( isdefined( self.owner ) )
        var_3 = self.owner;

    if ( isdefined( var_2 ) && var_2 > 0 )
    {
        var_3 endon( "disconnect" );
        scripts\cp_mp\hostmigration::hostmigration_waitlongdurationwithpause( var_2 );
    }

    if ( isdefined( var_3 ) )
    {
        if ( !isdefined( var_3.currentkillstreakopvo ) || istrue( var_1 ) )
        {
            var_3 scripts\cp_mp\utility\dialog_utility::operatordialogonplayer( var_0 );
            var_3.currentkillstreakopvo = var_0;
            var_3 thread clearstoredkillstreakoperatordialog( 5 );
        }
    }
}

clearstoredkillstreakoperatordialog( var_0 )
{
    self endon( "disconnect" );
    self notify( "clear_stored_dialog" );
    self endon( "clear_stored_dialog" );
    wait( var_0 );

    if ( isdefined( self.currentkillstreakopvo ) )
        self.currentkillstreakopvo = undefined;
}

killstreak_createdangerzone( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "lpcFeatureGated" ) && [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "lpcFeatureGated" ) ]]() )
        return;

    killstreak_destroydangerzone();
    var_6 = undefined;

    if ( isdefined( var_4 ) && isdefined( var_5 ) )
        var_6 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "spawn", "addSpawnDangerZone" ) ]]( var_0, var_1, var_2, var_5, var_3, var_4, 1 );
    else if ( isdefined( var_5 ) )
        var_6 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "spawn", "addSpawnDangerZone" ) ]]( var_0, var_1, var_2, var_5, var_3, undefined, 1 );
    else
        var_6 = killstreak_spawnuniversaldangerzone( var_0, var_1, var_2, var_3 );

    self.dangerzoneid = var_6;
    return var_6;
}

killstreak_spawnuniversaldangerzone( var_0, var_1, var_2, var_3 )
{
    if ( !scripts\cp_mp\utility\script_utility::issharedfuncdefined( "spawn", "addSpawnDangerZone" ) )
        return;

    var_4 = [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "spawn", "addSpawnDangerZone" ) ]]( var_0, var_1, var_2, undefined, var_3, level.players[randomint( level.players.size )], 1 );
    self.dangerzoneid = var_4;
    return var_4;
}

killstreak_destroydangerzone( var_0 )
{
    if ( !isdefined( var_0 ) && !isdefined( self.dangerzoneid ) )
        return;

    if ( !scripts\cp_mp\utility\script_utility::issharedfuncdefined( "spawn", "isSpawnDangerZoneAlive" ) || !scripts\cp_mp\utility\script_utility::issharedfuncdefined( "spawn", "removeSpawnDangerZone" ) )
        return;

    if ( !isdefined( var_0 ) )
        var_0 = self.dangerzoneid;

    if ( isdefined( var_0 ) && [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "spawn", "isSpawnDangerZoneAlive" ) ]]( var_0 ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "spawn", "removeSpawnDangerZone" ) ]]( var_0 );

    self.dangerzoneid = undefined;
}

streakcanseetarget( var_0, var_1, var_2 )
{
    var_3 = 0;
    var_4 = scripts\engine\trace::create_contents( 0, 1, 0, 1, 1, 0 );

    if ( scripts\engine\trace::ray_trace_passed( var_0, var_1, var_2, var_4 ) )
        var_3 = 1;

    return var_3;
}

teamhasuav( var_0 )
{
    foreach ( var_2 in level.teamnamelist )
    {
        if ( var_2 == var_0 )
            continue;

        if ( isdefined( level.uavmodels ) && isdefined( level.uavmodels[var_2] ) && level.uavmodels[var_2].size > 0 )
        {
            foreach ( var_4 in level.uavmodels[var_2] )
            {
                if ( !isdefined( var_4 ) )
                    continue;

                if ( var_4.uavtype == "counter_uav" )
                    return 0;
            }
        }
    }

    if ( isdefined( level.uavmodels ) && isdefined( level.uavmodels[var_0] ) && level.uavmodels[var_0].size > 0 )
    {
        foreach ( var_4 in level.uavmodels[var_0] )
        {
            if ( !isdefined( var_4 ) )
                continue;

            if ( var_4.uavtype == "uav" || var_4.uavtype == "directional_uav" )
                return 1;
        }
    }

    return 0;
}

_id_12684( var_0 )
{
    if ( isdefined( level.uavmodels ) && isdefined( level.uavmodels[var_0] ) && level.uavmodels[var_0].size > 0 )
    {
        foreach ( var_2 in level.uavmodels[var_0] )
        {
            if ( !isdefined( var_2 ) )
                continue;

            if ( var_2.uavtype == "uav" || var_2.uavtype == "directional_uav" )
                return 1;
        }
    }

    return 0;
}

enemyhascuav( var_0 )
{
    if ( isdefined( level.supportdrones ) && level.supportdrones.size > 0 )
    {
        foreach ( var_2 in level.supportdrones )
        {
            if ( level.teambased && var_2.team == var_0 )
                continue;

            if ( var_2.helperdronetype == "scrambler_drone_guard" )
                return 1;
        }
    }

    return 0;
}

isuavactiveforteam( var_0 )
{
    if ( !isdefined( level.uavmodels ) )
        return 0;

    if ( !isdefined( level.uavmodels[var_0] ) )
        return 0;

    return level.uavmodels[var_0].size > 0;
}

getkillstreakdeployweapon( var_0 )
{
    var_1 = undefined;

    switch ( var_0 )
    {
        case "airdrop_multiple":
        case "airdrop":
            var_1 = "deploy_airdrop_mp";
            break;
        case "juggernaut":
            var_1 = "deploy_juggernaut_mp";
            break;
        case "bradley":
        case "radar_drone_overwatch":
        case "directional_uav":
        case "uav":
        case "chopper_support":
            var_1 = "ks_gesture_generic_mp";
            break;
        case "toma_strike":
            var_1 = "iw8_green_beam_mp";
            break;
        case "precision_airstrike":
            var_1 = "iw8_spotter_scope_mp";
            break;
        case "cruise_predator":
        case "pac_sentry":
        case "gunship":
        case "chopper_gunner":
            var_1 = "ks_remote_device_mp";
            break;
        case "white_phosphorus":
        case "hover_jet":
        case "scrambler_drone_guard":
            var_1 = "ks_remote_map_mp";
            break;
        case "manual_turret":
            var_1 = "deploy_manual_turret_mp";
            break;
        case "sentry_gun":
            var_1 = "deploy_sentry_mp";
            break;
        case "nuke":
            var_1 = "ks_remote_nuke_mp";
            break;
    }

    return var_1;
}

puddle_activated( var_0 )
{
    var_1 = 0;

    switch ( var_0.basename )
    {
        case "ks_gesture_generic_mp":
        case "ks_remote_nuke_mp":
        case "deploy_sentry_mp":
        case "deploy_manual_turret_mp":
        case "ks_remote_map_mp":
        case "iw8_spotter_scope_mp":
        case "iw8_green_beam_mp":
        case "deploy_juggernaut_mp":
        case "deploy_airdrop_mp":
        case "ks_remote_device_mp":
            var_1 = 1;
            break;
    }

    return var_1;
}

getkillstreakgameweapons( var_0 )
{
    var_1 = [];

    switch ( var_0 )
    {
        case "juggernaut":
            var_1 = [ "iw8_minigunksjugg_mp", "iw8_minigunksjugg_reload_mp", "iw8_lm_dblmg_mp" ];
            break;
        case "manual_turret":
            var_1 = [ "manual_turret_mp" ];
            break;
        case "sentry_gun":
            var_1 = [ "sentry_turret_mp" ];
            break;
    }

    return var_1;
}

getnumactivekillstreakperteam( var_0, var_1 )
{
    var_2 = 0;

    foreach ( var_4 in var_1 )
    {
        if ( var_4.team == var_0 )
            var_2++;
    }

    return var_2;
}

mark_danger_timeout()
{
    if ( isdefined( scripts\cp_mp\utility\game_utility::getlocaleid() ) )
        return scripts\cp_mp\utility\game_utility::getlocaleent( "airstrikeheight" );

    var_0 = getentarray( "airstrikeheight", "targetname" );

    if ( var_0.size > 1 )
    {

    }

    return var_0[0];
}

_id_11ABD( var_0 )
{
    var_0 endon( "death_or_disconnect" );
    level endon( "game_ended" );

    if ( !var_0 scripts\cp_mp\utility\player_utility::_isalive() )
        return;

    var_1 = 0.5;

    if ( !isdefined( var_0.restoreangles ) )
        return;

    while ( var_1 > 0 )
    {
        var_0 setplayerangles( ( var_0.restoreangles[0], var_0.restoreangles[1], 0 ) );
        var_1 = var_1 - 0.05;
        wait 0.05;
    }

    var_0.restoreangles = undefined;
}

x1loadout( var_0 )
{
    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "challenges", "onKillStreakEnd" ) )
    {
        var_1 = var_0.mpstreaksysteminfo;

        if ( isdefined( var_1 ) )
        {
            var_2 = var_1.streakname;
            var_3 = gettime();
            var_4 = var_3 - var_1.all_end_checkpoints_activated;
            var_5 = var_0.kills;
            var_6 = 0;
            var_7 = 0;
            var_8 = 0;
            self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "challenges", "onKillStreakEnd" ) ]]( var_2, var_4, var_3, var_5, var_6, var_7, var_8 );
        }
    }

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "dlog", "killStreakExpired" ) )
    {
        var_1 = var_0.mpstreaksysteminfo;

        if ( isdefined( var_1 ) )
        {
            var_9 = var_1._id_1252F;
            var_10 = var_1.streakname;
            var_11 = var_1.isgimme;
            var_3 = gettime();
            var_12 = self.origin;
            var_13 = istrue( var_0.init_swivelroom_currsolution_marquee );
            var_14 = var_0.shots_fired;
            var_15 = var_0.hits;
            var_16 = var_0.kills;
            var_17 = var_0.score;
            [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "dlog", "killStreakExpired" ) ]]( self, var_9, var_10, var_11, var_3, var_12, var_13, var_14, var_15, var_16, var_17 );
        }
    }
}

updateachievementhangtime()
{
    var_0 = undefined;

    if ( isdefined( self.vehicle ) )
        var_0 = [ self.vehicle ];
    else
    {
        var_1 = self getgroundentity();

        if ( isdefined( var_1 ) && isdefined( var_1.classname ) && var_1.classname == "script_vehicle" )
            var_0 = [ var_1 ];
    }

    return var_0;
}

spawn_fake_number( var_0 )
{
    var_1 = var_0 getmovingplatformparent();

    if ( isdefined( var_1 ) && scripts\mp\vehicles\little_bird_mg_mp::postupdategameevents( var_1 ) || scripts\cp_mp\utility\script_utility::issharedfuncdefined( "entity", "isGondolaBrush" ) && [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "entity", "isGondolaBrush" ) ]]( var_1 ) )
    {
        var_0 playerlinkto( var_1 );
        var_0 playerlinkedoffsetenable();
        var_0.spawn_field_ai_manager_wall = var_1;
    }
}

spawn_field_ai_manager_middle( var_0 )
{
    if ( isdefined( var_0.spawn_field_ai_manager_wall ) )
    {
        var_0.spawn_field_ai_manager_wall = undefined;
        var_0 unlink();
    }
}
