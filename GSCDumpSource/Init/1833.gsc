// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

callback_playerdamage_internal( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13, var_14 )
{
    if ( isdefined( var_1 ) && isdefined( var_1.classname ) && var_1.classname == "worldspawn" )
        var_1 = undefined;

    if ( isdefined( var_1 ) && isdefined( var_1.gunner ) )
        var_1 = var_1.gunner;

    if ( istrue( var_2.plotarmor ) )
        return;

    if ( istrue( var_2.stringtovec3 ) && isdefined( var_6 ) )
    {
        if ( !plundertimer( var_6.basename ) )
            return;
    }

    if ( var_5 == "MOD_CRUSH" && isdefined( var_0 ) && isdefined( var_2 scripts\cp_mp\utility\player_utility::getvehicle() ) && var_2 scripts\cp_mp\utility\player_utility::getvehicle() == var_0 )
        return;

    if ( istrue( var_2.inlaststand ) && istrue( level.laststandrequiresmelee ) && var_5 != "MOD_MELEE" )
        return;

    var_16 = var_2.health;

    if ( var_4 & level.idflags_stun )
    {
        if ( istrue( level._id_127E1 ) )
            var_2 thread scripts\mp\battlechatter_mp::addrecentattacker( var_1 );
    }
    else
    {
        var_17 = filterdamage( var_0, var_1, var_2, var_3, var_5, var_6, var_9 );

        if ( isdefined( var_17 ) )
            return;

        var_18 = scripts\mp\utility\damage::attackerishittingteam( var_2, var_1 );

        if ( isdefined( var_0 ) && istrue( var_0.currentability ) )
            var_18 = 0;

        var_19 = isdefined( var_6 ) && scripts\mp\utility\weapon::iskillstreakweapon( var_6.basename );

        if ( !istrue( level.allowprematchdamage ) )
        {
            if ( istrue( game["inLiveLobby"] ) || !scripts\mp\flags::gameflag( "prematch_done" ) || istrue( level.play_travel_vo ) )
            {
                handledamagefeedback( var_0, var_1, var_2, 0, var_5, var_6, var_9, var_4, 1, 1, var_19 );
                return;
            }
        }

        if ( var_18 )
        {
            var_3 = handlefriendlyfiredamage( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_19 );

            if ( var_3 == 0 )
                return;
        }

        if ( istrue( var_2.spawnprotection ) )
        {
            var_20 = isdefined( var_1 ) && isdefined( var_1.classname ) && var_1.classname == "trigger_hurt";
            var_21 = var_5 == "MOD_FALLING";

            if ( !var_20 && !var_21 )
            {
                handledamagefeedback( var_0, var_1, var_2, 0, var_5, var_6, var_9, var_4, 1, 1, var_19 );
                return;
            }
        }

        if ( isdefined( var_1 ) && istrue( var_1.cranked ) )
            var_1 thread scripts\mp\cranked::stop_spawn_modules( var_2 );

        if ( isdefined( var_1 ) && isdefined( var_1.classname ) && var_1.classname == "script_origin" && isdefined( var_1.type ) && var_1.type == "soft_landing" )
            return;

        var_4 = var_4 | level.idflags_no_knockback;

        if ( raritycamlarge( var_6 ) && scripts\mp\utility\damage::validshotcheck( var_5, var_1 ) )
        {
            if ( isdefined( var_6.propkilledend ) )
                var_2 thread hasspawnweapons( var_9, var_1, var_6 );

            var_3 = _id_1235C( var_2, var_1, var_6, var_3, var_4 );

            if ( var_3 == 0 )
                return;
        }

        var_22 = var_6.basename;
        var_23 = scripts\mp\utility\weapon::getequipmenttype( var_22 );

        if ( isdefined( var_23 ) )
        {
            if ( var_23 == "lethal" )
                var_3 = lethalequipmentdamagemod( var_0, var_1, var_2, var_3, var_4, var_5, var_6 );
            else if ( var_23 == "equipment_other" )
            {

            }
            else if ( var_23 == "tactical" )
            {

            }

            var_24 = scripts\cp_mp\utility\damage_utility::packdamagedata( var_1, var_2, var_3, var_6, var_5, var_0, var_7, var_8, undefined, var_12, undefined, var_4 );
            var_25 = scripts\mp\equipment::equiponplayerdamaged( var_24 );

            if ( isdefined( var_25 ) && var_25 == 0 )
                return;
        }

        if ( var_2 scripts\mp\utility\game::ismatchstartprotected() )
        {
            var_26 = isdefined( var_6 ) && isdefined( var_6.basename ) && var_6.basename == "minefield_mp";

            if ( !var_26 )
            {
                var_27 = istrue( var_6.isalternate );

                if ( isdefined( var_23 ) && !scripts\mp\utility\weapon::isthrowingknife( var_22 ) || var_27 || var_5 == "MOD_EXPLOSIVE" )
                {
                    var_28 = int( max( var_2.health / 5, 1 ) );

                    if ( var_3 >= var_28 )
                        var_3 = var_28;
                }
            }
        }

        var_29 = scripts\mp\utility\weapon::getweapontype( var_22 );

        if ( isdefined( var_29 ) && var_29 == "killstreak" )
        {
            var_3 = killstreakdamagefilter( var_1, var_2, var_3, var_6, var_5 );

            if ( var_3 == 0 )
                return;

            if ( isdefined( level.gunshipplayer ) && isdefined( var_1 ) && level.gunshipplayer == var_1 )
                level notify( "ai_pain", var_2 );
        }

        if ( var_5 == "MOD_CRUSH" && isdefined( var_1 ) && isdefined( var_1.streakname ) && var_1.streakname == "emp_drone" )
            var_3 = 0;

        var_3 = modifydamagegeneral( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_14 );
        var_3 = handleriotshieldhits( var_0, var_2, var_1, var_3, var_5, var_6, var_7, var_8, var_9, var_4, var_19 );

        if ( var_3 == 0 )
        {
            if ( istrue( level._id_127E1 ) )
                var_2 thread scripts\mp\battlechatter_mp::addrecentattacker( var_1 );

            return;
        }

        if ( !istrue( var_2.donotmodifydamage ) )
        {
            var_30 = cac_modified_damage( var_2, var_1, var_3, var_5, var_6, var_7, var_8, var_9, var_0, 0, var_4, var_19 );
            var_3 = var_30[0];
            var_31 = var_30[1];
            var_32 = var_30[2];
            var_33 = var_31 != 0 || var_32 != 0;
            var_9 = var_30[3];
        }
        else
        {
            var_31 = 0;
            var_32 = 0;
            var_33 = 0;
        }

        if ( puddle_triggers( var_1, var_2, var_3, var_5, var_6, var_13 ) )
            return;

        if ( isdefined( var_2.forcehitlocation ) )
        {
            var_9 = var_2.forcehitlocation;
            var_2.forcehitlocation = undefined;
        }

        if ( isplayer( var_1 ) && ( var_22 == "smoke_grenade_mp" || scripts\mp\utility\weapon::isthrowingknife( var_22 ) ) )
            var_1 thread scripts\mp\gamelogic::threadedsetweaponstatbyname( var_22, 1, "hits" );

        var_34 = var_8;

        if ( isdefined( var_4 ) && var_4 & level.idflags_ricochet && var_3 < self.health )
            var_34 = var_2.origin - var_1.origin;

        if ( propmoveunlock( var_0 ) )
            var_3 = 0;

        if ( isplayer( var_1 ) && scripts\mp\utility\game::getgametype() == "br" )
        {
            if ( armorvest_washit( var_1 ) || helmet_washit( var_1 ) )
                var_4 = var_4 | level.play_alarms_onto;

            if ( armorvest_wasbroke( var_1 ) || helmet_wasbroke( var_1 ) )
                var_4 = var_4 | level.play_airstrike_sequence;
        }

        if ( raid_umike_unload_func( var_1 ) )
            var_3 = _id_11D04( var_1, var_3, var_5 );

        if ( isdefined( level.subwave_progression ) )
        {
            if ( ![[ level.subwave_progression ]]( var_5 ) )
                return;
        }

        preplayerdamaged( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_34, var_9, var_10, var_11, var_12 );
        var_2 finishplayerdamagewrapper( var_0, var_1, var_3, var_4, var_5, var_6, var_7, var_34, var_9, var_10, var_11, var_12, var_33 );
        postplayerdamaged( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_34, var_9, var_10, var_11, var_12, var_31, var_32, var_16, var_19 );
    }
}

hasspawnweapons( var_0, var_1, var_2 )
{
    self notify( "newDragonsBreathHitLoc" );
    self endon( "newDragonsBreathHitLoc" );

    if ( !isdefined( self.hasselfrevivetoken ) )
        self.hasselfrevivetoken = scripts\cp\killstreaks\nuke_cp::_id_122A9();

    self.hasselfrevivetoken.spawnboardroom_gasmask = scripts\engine\utility::array_add( self.hasselfrevivetoken.spawnboardroom_gasmask, var_0 );
    waittillframeend;
    var_3 = [];

    if ( !isdefined( self ) )
        return;

    if ( isdefined( self.hasselfrevivetoken ) )
    {
        var_3 = self.hasselfrevivetoken.spawnboardroom_gasmask;
        self.hasselfrevivetoken.spawnboardroom_gasmask = [];
    }

    if ( scripts\mp\utility\player::isreallyalive( self ) )
        scripts\cp\killstreaks\nuke_cp::_id_11E9D( var_3, var_1, var_2 );
    else
        scripts\cp\killstreaks\nuke_cp::_id_11E9E();
}

preplayerdamaged( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 )
{
    var_13 = var_3;
    var_2.lastweaponused = var_2 getcurrentweapon();
    var_2.wasaimingdownsightsondamage = var_2 scripts\mp\utility\player::isplayerads();

    if ( isai( self ) )
        self [[ level.bot_funcs["on_damaged"] ]]( var_1, var_3, var_5, var_6, var_0, var_9 );

    if ( isdefined( var_0 ) && isdefined( var_0.streakinfo ) && isdefined( var_0.streakinfo.hits ) )
        var_0.streakinfo.hits++;

    scripts\mp\perks\perkfunctions::bulletoutlinecheck( var_1, var_2, var_6.basename, var_5 );

    if ( var_5 == "MOD_FALLING" )
        var_2 thread emitfalldamage( var_3 );

    logattacker( var_2, var_1, var_0, var_6, var_3, var_7, var_8, var_9, var_10, var_5 );

    if ( isdefined( var_0 ) && isdefined( var_0.owner ) && var_0.owner.team != var_2.team )
        var_2.lastdamagewasfromenemy = 1;
    else
        var_2.lastdamagewasfromenemy = isdefined( var_1 ) && var_1 != var_2;

    if ( var_2.lastdamagewasfromenemy )
    {
        var_14 = gettime();
        var_1.damagedplayers[var_2.guid] = var_14;
        var_2.lastdamagedtime = var_14;
    }

    var_2 thread scripts\mp\potg_events::onplayerdamaged( var_1, var_2, var_5 );
    var_2 thread scripts\cp\helicopter\chopper_boss::playerdamaged( var_0, var_1, var_3, var_5, var_6, var_9 );

    if ( isdefined( var_1 ) && var_3 != 0 )
        var_1 notify( "victim_damaged", var_2, var_0, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 );

    if ( isdefined( level.preplayerdamaged ) )
        var_2 thread [[ level.preplayerdamaged ]]( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 );
}

postplayerdamaged( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13, var_14, var_15, var_16 )
{
    var_17 = var_3;
    var_18 = scripts\engine\utility::isbulletdamage( var_5 );

    if ( var_3 > 10 && isdefined( var_0 ) && !var_2 scripts\mp\utility\player::isusingremote() && isplayer( var_2 ) )
    {
        var_2 thread scripts\mp\shellshock::bloodeffect( var_0.origin );

        if ( isplayer( var_0 ) && var_5 == "MOD_MELEE" )
        {
            if ( isalive( var_2 ) && !var_2 scripts\mp\utility\killstreak::isjuggernaut() && scripts\mp\utility\game::getgametype() != "br" )
            {
                var_2 thread meleestagger( var_1 );
                var_2.hitwithmeleetime = gettime();
            }

            var_0 thread scripts\mp\shellshock::bloodmeleeeffect( var_6, var_2 );
            var_2 playrumbleonentity( "defaultweapon_melee" );
            var_0 playrumbleonentity( "defaultweapon_melee" );
        }
    }

    if ( isagent( self ) )
    {
        if ( scripts\mp\utility\killstreak::isplayerkillstreak( self ) )
        {
            if ( var_3 >= self.health )
                var_3 = self.health - 1;
            else
            {
                var_19 = createheadicon( var_6 );
                self [[ scripts\mp\agents\agent_utility::agentfunc( "on_damaged_finished" ) ]]( var_0, var_1, var_3, var_4, var_5, var_19, var_7, var_8, var_9, var_10 );
            }
        }
        else
        {
            var_19 = createheadicon( var_6 );
            self [[ scripts\mp\agents\agent_utility::agentfunc( "on_damaged_finished" ) ]]( var_0, var_1, var_3, var_4, var_5, var_19, var_7, var_8, var_9, var_10 );
        }
    }

    handledamagefeedback( var_0, var_1, var_2, var_3, var_5, var_6, var_9, var_4, var_13, var_14, var_16 );

    if ( var_18 )
        var_2 thread scripts\mp\battlechatter_mp::adddamagetaken( var_1, var_6, var_3 );

    if ( isagent( var_1 ) && isdefined( var_1 ) && var_1 scripts\cp_mp\utility\player_utility::_isalive() && var_1 != var_2 )
        var_2 thread scripts\mp\battlechatter_mp::addrecentattacker( var_1 );

    if ( isdefined( var_2 ) && var_2 scripts\cp_mp\utility\player_utility::_isalive() )
    {
        if ( var_2.health < 30 )
            var_2 thread scripts\mp\battlechatter_mp::hurtbadlywait();

        if ( isdefined( var_1 ) && var_1 != var_2 && isexplosivedamagemod( var_5 ) )
        {
            if ( !isdefined( var_6 ) || var_6.basename != "gas_mp" )
                level thread scripts\mp\battlechatter_mp::trysaylocalsound( var_2, "flavor_surprise", undefined, 0.5 );
        }
    }

    scripts\mp\gamelogic::sethasdonecombat( var_2, 1 );

    if ( isdefined( var_1 ) && var_1 != var_2 )
        level.usestartspawns = 0;

    if ( isplayer( var_1 ) && isdefined( var_1.pers["participation"] ) )
        var_1.pers["participation"]++;
    else if ( isplayer( var_1 ) )
        var_1.pers["participation"] = 1;

    if ( isdefined( level.cinematic_replay_recording ) && isplayer( var_0 ) )
    {
        var_22 = spawnstruct();
        var_22.victim = var_2;
        var_22.vpoint = var_7;
        var_22.vdir = var_8;
        var_22.objweapon = var_6;
        var_22.kill = !isalive( var_2 );
        var_0.hitrecord[var_0.hitrecord.size] = var_22;
    }

    if ( isdefined( level.matchrecording_logeventmsg ) && isplayer( var_2 ) && isdefined( var_0 ) && isplayer( var_0 ) && var_18 )
    {
        if ( var_15 == var_2.maxhealth && var_2.health != self.maxhealth )
            var_2.engagementstarttime = gettime();
    }

    if ( allowdamageflash( var_1, var_2, var_6, var_5, var_3 ) )
        var_2 showuidamageflash();

    if ( isdefined( var_1 ) && var_3 > 0 )
    {
        if ( var_1 scripts\mp\utility\perk::_hasperk( "specialty_delayhealing" ) )
            var_1 thread scripts\mp\perks\perk_mark_targets::marktarget_run( var_2, var_5 );

        if ( var_18 && var_6 hasattachment( "ammomod_slow" ) && scripts\mp\utility\damage::islowerbodyshot( var_9, var_5, var_1 ) )
            var_1 thread scripts\mp\perks\perkfunctions::ammodisabling_run( var_2 );

        if ( isplayer( var_2 ) && var_1 scripts\mp\utility\perk::_hasperk( "specialty_shrapnel" ) && isshrapnelsource( var_6, var_5 ) )
            var_2.lastshrapneltime = gettime();
    }

    if ( isdefined( level.onplayerdamaged ) )
        var_2 thread [[ level.onplayerdamaged ]]( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_15, var_7, var_8, var_9, var_10, var_11, var_12 );

    if ( scripts\mp\utility\player::isreallyalive( var_2 ) )
    {
        switch ( var_5 )
        {
            case "MOD_EXPLOSIVE":
            case "MOD_GRENADE_SPLASH":
            case "MOD_GRENADE":
            case "MOD_PROJECTILE_SPLASH":
            case "MOD_PROJECTILE":
                var_2 scripts\mp\utility\stats::incpersstat( "explosionsSurvived", 1 );
                break;
        }
    }
    else if ( isdefined( var_4 ) && var_4 & level.idflags_penetration && !( var_4 & level.play_animation_old ) )
    {
        if ( var_1 scripts\mp\utility\game::onlinestatsenabled() )
        {
            var_23 = var_1 scripts\mp\playerstats_interface::getplayerstat( "combatStats", "wallbangs" ) + 1;
            var_1 scripts\mp\playerstats_interface::setplayerstatbuffered( var_23, "combatStats", "wallbangs" );
        }

        var_1 scripts\mp\utility\stats::incpersstat( "penetrationKills", 1 );
    }
}

meleestagger_anglesviewattack( var_0, var_1 )
{
    var_2 = anglestoforward( ( 0, var_0 getplayerangles()[1], 0 ) );
    var_3 = vectornormalize( ( var_1.origin[0], var_1.origin[1], 0 ) - ( var_0.origin[0], var_0.origin[1], 0 ) );
    return scripts\engine\math::anglebetweenvectorssigned( var_2, var_3, ( 0, 0, 1 ) );
}

isshrapnelsource( var_0, var_1 )
{
    if ( !isdefined( var_0 ) || nullweapon( var_0 ) )
        return 0;

    if ( !isexplosivedamagemod( var_1 ) )
        return 0;

    if ( scripts\mp\utility\weapon::iskillstreakweapon( var_0 ) )
        return 0;

    if ( scripts\mp\utility\weapon::isvehicleweapon( var_0 ) )
        return 0;

    if ( scripts\mp\utility\weapon::isgamemodeweapon( var_0 ) )
        return 0;

    var_2 = scripts\mp\utility\weapon::getequipmenttype( var_0.basename );

    if ( isdefined( var_2 ) )
    {
        if ( var_2 != "lethal" )
            return 0;
    }

    return 1;
}

meleestagger( var_0 )
{
    self endon( "death_or_disconnect" );
    var_1 = getdvarfloat( "melee_stagger_shock_duration" );
    var_2 = getdvarfloat( "melee_stagger_aftershock_duration" );
    var_3 = self getviewkickscale();

    if ( isdefined( level.keycardlocs_chosen ) )
        self setviewkickscale( scripts\engine\utility::ter_op( var_0 scripts\mp\utility\perk::_hasperk( "specialty_hardmelee" ), level.keycardlocs_chosen * 2, level.keycardlocs_chosen ) );
    else
        self setviewkickscale( scripts\engine\utility::ter_op( var_0 scripts\mp\utility\perk::_hasperk( "specialty_hardmelee" ), 3, 1.5 ) );

    var_4 = scripts\engine\utility::ter_op( var_0 scripts\mp\utility\perk::_hasperk( "specialty_hardmelee" ), var_1 * 1.5, var_1 );
    scripts\cp_mp\utility\shellshock_utility::_shellshock( "melee_mp", "damage", var_4, 0, 0 );
    var_5 = 0;

    if ( isdefined( var_0 ) && var_0 scripts\cp_mp\utility\player_utility::_isalive() )
    {
        var_6 = meleestagger_anglesviewattack( self, var_0 );

        if ( var_6 < 15 )
            var_5 = 10;
        else if ( var_6 > -15 )
            var_5 = -10;
    }

    var_7 = scripts\engine\utility::ter_op( var_0 scripts\mp\utility\perk::_hasperk( "specialty_hardmelee" ), 1.15, 1.0 );
    self setplayerangles( self getplayerangles() + ( -14 * var_7, var_5, 0 ) );
    thread meleedofroutine( var_0 );
    self earthquakeforplayer( 0.35, 0.2, self.origin, 400 );
    self playrumbleonpositionforclient( "plr_rumble_4_mp", self.origin );
    self setclientomnvar( "ui_hud_shake", 1 );
    wait 0.05;
    self setviewkickscale( var_3 );
    var_4 = scripts\engine\utility::ter_op( var_0 scripts\mp\utility\perk::_hasperk( "specialty_hardmelee" ), var_2 * 1.5, var_2 );
    scripts\cp_mp\utility\shellshock_utility::_shellshock( "melee_mp_after", "damage", var_4, 0, 0 );
}

meleedofroutine( var_0 )
{
    self notify( "resetMeleeDOF" );
    self endon( "resetMeleeDOF" );
    self endon( "death_or_disconnect" );
    var_1 = 1;
    var_2 = 2;
    var_3 = 350;
    var_4 = 1024;
    self setdepthoffield( var_1, var_2, var_3, var_4, 10, 9 );
    var_5 = getdvarfloat( "melee_stagger_shock_duration" );
    wait( scripts\engine\utility::ter_op( var_0 scripts\mp\utility\perk::_hasperk( "specialty_hardmelee" ), var_5 * 3, var_5 ) );

    while ( var_4 > 350 )
    {
        var_1 = clamp( var_1 - 100, 0, 10000 );
        var_2 = clamp( var_2 - 100, 0, 10000 );
        var_3 = clamp( var_3 - 100, 0, 10000 );
        var_4 = clamp( var_4 - 100, 0, 10000 );
        self setdepthoffield( var_1, var_2, var_3, var_4, 10, 9 );
        wait 0.05;
    }

    scripts\mp\utility\player::setdof_default();
}

monitormeleeoverlay( var_0 )
{
    scripts\engine\utility::_id_12E53( 2.0, "death_or_disconnect" );
    var_0 destroy();
}

allowdamageflash( var_0, var_1, var_2, var_3, var_4 )
{
    if ( isagent( var_1 ) )
        return 0;

    if ( var_4 == 0 )
        return 0;

    if ( _id_125AB( var_0, var_1, var_2, var_3, var_4 ) )
        return 0;

    return 1;
}

_id_125AB( var_0, var_1, var_2, var_3, var_4 )
{
    if ( isdefined( var_2 ) )
    {
        switch ( var_2.basename )
        {
            default:
        }
    }

    return 0;
}

_id_12FE7( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = var_3.basename;

    if ( plundertimer( var_7 ) )
        return 1;

    if ( isdefined( level.cleanupswaploadoutflags ) && istrue( level.cleanupswaploadoutflags._id_130F5 ) && isdefined( var_7 ) && var_7 == "iw8_fists_mp_zmb" )
        return 1;

    if ( var_4 == "MOD_EXECUTION" )
        return 1;

    return 0;
}

plundertimer( var_0 )
{
    return isdefined( var_0 ) && var_0 == "danger_circle_br";
}

cac_modified_damage( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11 )
{
    var_0 notify( "damage_begin", var_1 );
    var_12 = 0;
    var_13 = 0;
    var_14 = 0;
    var_15 = var_0 scripts\mp\gametypes\br_public.gsc::hasarmor();
    var_16 = var_0 scripts\mp\gametypes\br_public.gsc::hashelmet();

    if ( isplayer( var_1 ) )
    {
        armorvest_clearhit( var_1 );
        helmet_clearhit( var_1 );
        armorvest_clearbroke( var_1 );
        helmet_clearbroke( var_1 );
    }

    if ( scripts\engine\utility::isbulletdamage( var_3 ) )
    {
        var_17 = var_4.basename;
        var_18 = scripts\mp\utility\damage::isheadshot( var_7, var_3, var_1 );
        var_19 = scripts\mp\utility\damage::istorsoshot( var_7, var_3, var_1 );

        if ( isdefined( var_4 ) && scripts\mp\utility\weapon::iscacprimaryorsecondary( var_17 ) )
        {
            if ( isbehindmeleevictim( var_1, var_0 ) && isplayer( var_0 ) )
                level thread scripts\mp\battlechatter_mp::saytoself( var_0, "plr_hit_back", undefined, 0.1 );
        }

        if ( isdefined( var_10 ) && var_10 & level.idflags_ricochet )
        {
            if ( var_17 != "none" && !scripts\mp\utility\weapon::issuperweapon( var_17 ) )
                var_2 = var_2 * 0.4;
        }

        if ( isplayer( var_1 ) && var_1 scripts\mp\utility\perk::_hasperk( "specialty_paint_pro" ) && !var_11 )
            var_0 thread scripts\mp\perks\perkfunctions::setpainted( var_1 );

        if ( scripts\mp\utility\weapon::qm_intro_dialogue( var_17 ) && scripts\mp\utility\game::getgametype() == "br" )
            var_2 = var_2 * scripts\mp\gametypes\br_jugg_common.gsc::matchdata_recordrecentlyplayeddata();

        var_20 = var_19 && var_0 scripts\mp\utility\perk::_hasperk( "specialty_armorvest" );
        var_21 = var_18 && var_16;
        var_22 = var_18 && istrue( var_0.hasheadgear );
        var_23 = istrue( var_1.resetmissilelaunchertargets ) && scripts\mp\utility\weapon::getweaponrootname( var_4 ) == "iw8_sn_crossbow";
        var_24 = var_1 scripts\mp\utility\perk::_hasperk( "specialty_bulletdamage" ) || var_23;
        var_25 = scripts\mp\utility\damage::isfmjdamage( var_4, var_3, 0 );

        if ( var_21 && !istrue( var_0.inlaststand ) )
        {
            var_26 = weaponclass( var_4 );
            var_27 = 0;

            if ( var_26 == "sniper" || var_26 == "dmr" )
                var_27 = 1;

            var_28 = var_0 scripts\mp\gametypes\br_public.gsc::damagehelmet( var_2, var_27, var_6 );
            var_2 = var_2 * var_28;
        }

        if ( var_24 && var_20 )
            armorvest_sethit( var_1 );
        else if ( var_24 && var_2 > 0 )
        {
            var_29 = applystoppingpower( var_4, var_7, var_3, var_1, var_2, 100 );
            var_12 = var_12 + ( var_29 - var_2 );
        }
        else if ( var_20 && !istrue( var_0.tookvesthit ) && !var_25 )
        {
            var_0.tookvesthit = 1;
            var_29 = adjustbulletstokill( var_2, 100, level.armorvestbulletdelta );
            var_12 = var_12 + ( var_29 - var_2 );
            helmet_sethit( var_1 );
        }
        else if ( var_22 && !var_25 )
        {
            var_30 = scripts\mp\perks\headgear::getdamagemod();
            var_31 = scripts\mp\perks\headgear::getmaxdamage();
            var_32 = int( clamp( var_2 * var_30, 1, var_31 ) );

            if ( var_0.health > 1 )
                var_32 = int( min( var_0.health - 1, var_32 ) );

            var_33 = var_2 - var_32;
            var_12 = var_12 - var_33;
            var_0 notify( "headgear_save" );
            helmet_sethit( var_1 );
        }

        if ( var_0 scripts\mp\utility\killstreak::isjuggernaut() )
            var_2 = show_rocket_fuel_readings( var_4, var_2, var_25, 0, var_1 );

        if ( isdefined( var_1 ) && isdefined( var_1._id_12D19 ) && var_1._id_12D19 == "loot_chopper" )
            var_2 = int( var_2 / 3 );
    }
    else if ( isexplosivedamagemod( var_3 ) )
    {
        if ( isplayer( var_1 ) )
        {
            if ( var_1 != var_0 && var_1 scripts\mp\utility\perk::_hasperk( "specialty_paint" ) && !var_11 )
                var_0 thread scripts\mp\perks\perkfunctions::setpainted( var_1 );
        }

        var_2 = showexfilstartsplash( var_2, var_8, var_4 );
        var_2 = scripts\mp\equipment\claymore::claymore_modifieddamage( var_0, var_4, var_8, var_3, var_2 );
        var_2 = scripts\mp\equipment\at_mine::at_mine_modified_damage( var_0, var_8, var_4, var_3, var_2 );

        if ( isplayer( var_1 ) && weaponinheritsperks( var_4 ) && ( var_1 scripts\mp\utility\perk::_hasperk( "specialty_explosivedamage" ) && var_0 scripts\mp\utility\perk::_hasperk( "specialty_blastshield" ) ) )
        {

        }
        else if ( isplayer( var_1 ) && weaponinheritsperks( var_4 ) && !var_11 && var_1 scripts\mp\utility\perk::_hasperk( "specialty_explosivedamage" ) )
            var_12 = var_12 + var_2 * level.explosivedamagemod;
        else if ( var_0 scripts\mp\utility\perk::_hasperk( "specialty_blastshield" ) && !scripts\mp\utility\damage::damage_should_ignore_blast_shield( var_1, var_0, var_4, var_3, var_8, var_7 ) )
        {
            var_34 = show_regroup_text( var_2, var_1, var_0 );
            var_12 = var_12 - ( var_2 - var_34 );
        }

        if ( isplayer( var_1 ) && var_1 == var_0 && scripts\mp\utility\weapon::iskillstreakweapon( var_4 ) )
            var_2 = var_2 * 0.5;

        if ( isdefined( level.lethaldelay ) && !scripts\mp\equipment::lethaldelaypassed() )
            var_2 = var_2 * level.graceperiodgrenademod;

        if ( isdefined( var_0 ) && var_0 scripts\mp\utility\killstreak::isjuggernaut() && isdefined( var_4 ) && var_4.basename == "semtex_aalpha12_mp" )
            var_2 = var_2 * 110;
    }
    else if ( var_3 == "MOD_FIRE" )
    {
        if ( var_0 scripts\mp\utility\killstreak::isjuggernaut() )
        {
            if ( isdefined( var_4.basename ) && var_4.basename == "thermite_ap_mp" || var_4.basename == "thermite_bolt_mp" )
                var_2 = show_rocket_fuel_readings( var_4, var_2, 0, 1, var_1 );
        }

        if ( var_0 scripts\mp\utility\perk::_hasperk( "specialty_blastshield" ) && !scripts\mp\utility\damage::damage_should_ignore_blast_shield( var_1, var_0, var_4, var_3, var_8, var_7 ) )
        {
            var_34 = show_regroup_text( var_2, var_1, var_0 );
            var_12 = var_12 - ( var_2 - var_34 );
        }
    }

    var_35 = _id_12FE7( var_1, var_0, var_2, var_4, var_3, var_8, var_7 );
    var_36 = var_7 == "shield" && var_3 != "MOD_GRENADE_SPLASH" && var_3 != "MOD_FIRE";

    if ( var_15 && !istrue( var_35 ) && !istrue( var_0.inlaststand ) && !var_36 )
    {
        var_37 = var_0 scripts\mp\gametypes\br_public.gsc::damagearmor( var_2 );
        var_38 = int( var_2 - var_37 );
        var_14 = var_38;
        var_12 = var_12 - var_38;
        var_0.tookvesthit = 1;

        if ( isplayer( var_1 ) )
        {
            armorvest_sethit( var_1 );

            if ( _id_12018( self ) )
                var_1 scripts\mp\utility\stats::incpersstat( "damage", var_38 );
            else if ( isdefined( level.stop_firing_minigun ) )
                var_1 [[ level.stop_firing_minigun ]]( var_38 );
        }
    }

    var_39 = scripts\mp\equipment\trophy_system::trophy_modifieddamage( var_1, var_0, var_4.basename, var_2, var_12 );
    var_2 = var_39[0];
    var_12 = var_39[1];

    if ( var_0 scripts\mp\heavyarmor::hasheavyarmor() )
    {
        var_39 = scripts\mp\heavyarmor::heavyarmormodifydamage( var_0, var_1, var_2, var_12, var_3, var_4.basename, var_5, var_6, var_7, var_8, var_9 );
        var_13 = var_39[0] > 0;
        var_2 = var_39[1];
        var_12 = var_39[2];
    }

    if ( scripts\mp\lightarmor::haslightarmor( var_0 ) )
    {
        var_39 = scripts\mp\lightarmor::lightarmor_modifydamage( var_0, var_1, var_2, var_12, var_3, var_4.basename, var_5, var_6, var_7, var_8, var_9 );
        var_14 = var_39[0] > 0;
        var_2 = var_39[1];
        var_12 = var_39[2];
    }

    if ( isplayer( var_1 ) )
    {
        var_40 = var_0 scripts\mp\gametypes\br_public.gsc::hasarmor();
        var_41 = var_0 scripts\mp\gametypes\br_public.gsc::hashelmet();

        if ( var_15 && !var_40 )
            armorvest_setbroke( var_1 );

        if ( var_16 && !var_41 )
            helmet_setbroke( var_1 );
    }

    if ( scripts\mp\utility\damage::hashealthshield( var_0 ) )
        var_2 = var_0 scripts\mp\utility\damage::gethealthshielddamage( var_2 );

    if ( istrue( var_0.inlaststand ) && getdvarfloat( "scr_player_lastStandHealthScalar", 0 ) > 0 )
    {
        var_42 = 1;

        if ( isdefined( level.show_balloon_deploy_hint ) )
        {
            var_43 = scripts\cp_mp\utility\damage_utility::packdamagedata( var_1, var_0, var_2, var_4, var_3, var_8 );
            var_42 = self [[ level.show_balloon_deploy_hint ]]( var_43 );
        }

        if ( var_42 )
            var_2 = int( ceil( var_2 / getdvarfloat( "scr_player_lastStandHealthScalar", 0 ) ) );
    }

    if ( var_2 <= 1 )
        var_2 = int( ceil( clamp( var_2, 0, 1 ) ) );
    else
        var_2 = int( var_2 + var_12 );

    return [ var_2, var_14, var_13, var_7 ];
}

show_regroup_text( var_0, var_1, var_2 )
{
    var_3 = level.blastshieldmod;
    var_4 = level.blastshieldclamp;
    var_5 = int( var_0 * var_3 );

    if ( var_1 != var_2 )
        var_5 = clamp( var_5, 0, var_4 );

    return var_5;
}

show_rocket_fuel_readings( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = weaponclass( var_0 );
    var_6 = 1;

    if ( isdefined( var_4 ) && var_4 scripts\mp\utility\killstreak::isjuggernaut() && scripts\mp\utility\game::getgametype() == "br" )
        var_6 = scripts\mp\gametypes\br_jugg_common.gsc::maphint_offerscriptableused();

    switch ( var_5 )
    {
        case "smg":
        case "pistol":
            var_1 = min( 15, var_1 );
            break;
        case "mg":
        case "rifle":
            if ( scripts\mp\utility\weapon::qm_intro_dialogue( var_0.basename ) && scripts\mp\utility\game::getgametype() == "br" )
                var_1 = min( 50, var_1 );
            else
                var_1 = min( 20, var_1 );

            break;
        case "spread":
            var_1 = min( 25, var_1 );
            break;
        case "sniper":
            break;
        default:
            var_1 = min( 15, var_1 );
            break;
    }

    var_1 = int( var_1 * var_6 );

    if ( istrue( var_2 ) )
        var_1 = var_1 * level.armorpiercingmod;

    if ( istrue( var_3 ) )
    {
        if ( var_0.basename == "thermite_ap_mp" )
            var_1 = var_1 * 6;
        else if ( var_0.basename == "thermite_bolt_mp" )
            var_1 = var_1 * 3;
        else if ( var_0.basename == "thermite_xmike109_mp" )
            var_1 = var_1 * 3;
    }

    return var_1;
}

showexfilstartsplash( var_0, var_1, var_2 )
{
    if ( !isdefined( var_1 ) )
        return var_0;

    if ( !nullweapon( var_2 ) )
        return var_0;

    if ( !isdefined( var_1.code_classname ) || var_1.code_classname != "scriptable" )
        return var_0;

    var_3 = var_1.classname;

    if ( isdefined( var_3 ) && isstartstr( var_3, "scriptable_" ) )
    {
        var_3 = getsubstr( var_3, 11, var_3.size );
        var_4 = [ "uk_gas_tank_thin_cylinder", "uk_misc_fuel_jug", "uk_fire_extinguisher", "uk_misc_fuel_jug", "decor_barrels_gameplay_flammable", "un_propane_gas_tank", "machinery_oxygen_generator_tank", "sol_barrel", "box_wooden_grenade", "container_gas_tank", "decor_propane_tank", "equipment_propane_burner_stove", "equipment_propane_tank", "misc_propane_rocket", "oil_drum", "rp_propane_tank", "misc_exterior_oxygen_barrel" ];

        foreach ( var_6 in var_4 )
        {
            if ( isstartstr( var_3, var_6 ) )
            {
                if ( scripts\mp\utility\game::isanymlgmatch() )
                    return 0;
                else
                    return int( min( var_0, 60 ) );
            }
        }
    }

    return var_0;
}

puddle_triggers( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( isdefined( var_0 ) && isplayer( var_0 ) && ( !isalive( var_0 ) || scripts\mp\utility\player::proxtrigger( var_0 ) ) )
    {
        if ( istrue( var_5 ) && weaponclass( var_4 ) == "spread" )
            return 1;
        else if ( var_2 >= var_1.health )
        {
            if ( var_3 == "MOD_MELEE" )
                return 1;
            else if ( istrue( var_5 ) )
                return 1;
        }
    }

    return 0;
}

raritycamlarge( var_0 )
{
    return isdefined( var_0 ) && weaponclass( var_0 ) == "spread";
}

propcleanupdelayed( var_0 )
{
    var_1 = scripts\mp\utility\weapon::getweaponrootname( var_0.basename );

    if ( var_1 == "iw8_sn_crossbow" )
        return 1;

    return 0;
}

recentunresolvedcollision( var_0 )
{
    var_1 = scripts\mp\utility\weapon::getweaponrootname( var_0.basename );

    if ( var_1 == "iw8_sn_xmike109" )
        return 1;

    return 0;
}

previouscarepackagekillstreaks( var_0, var_1 )
{
    if ( var_0 hasattachment( "calcustmags_aalpha12" ) && var_1 == "MOD_RIFLE_BULLET" )
        return 1;

    return 0;
}

_id_11FF3( var_0 )
{
    if ( var_0 hasattachment( "boltexplo_crossbow" ) )
        return 1;

    return 0;
}

_id_12026( var_0 )
{
    if ( var_0 hasattachment( "calcust", 1 ) )
        return 0;

    return 1;
}

randomize_stealth_alert_music_array( var_0 )
{
    if ( var_0.basename == "semtex_xmike109_splash_mp" || var_0.basename == "thermite_xmike109_radius_mp" || var_0.basename == "semtex_bolt_splash_mp" || var_0.basename == "thermite_bolt_radius_mp" || var_0.basename == "semtex_aalpha12_splash_mp" )
        return 1;
    else
        return 0;
}

_id_1235C( var_0, var_1, var_2, var_3, var_4 )
{
    if ( isdefined( var_1 ) && isdefined( var_0 ) )
    {
        if ( var_4 & level.play_approach_building_two )
            var_5 = "lHandWeap";
        else
            var_5 = "rHandWeap";

        if ( !isdefined( var_1.toma_strike_munitionused ) )
            var_1.toma_strike_munitionused = [];

        var_6 = "" + var_0 getentitynumber();
        var_7 = gettime();

        foreach ( var_13, var_9 in var_1.toma_strike_munitionused )
        {
            foreach ( var_12, var_11 in var_9 )
            {
                if ( ( var_7 - var_11.time ) / 1000 > 0.1 )
                {
                    var_1.toma_strike_munitionused[var_13] = scripts\engine\utility::array_remove_key( var_1.toma_strike_munitionused[var_13], var_12 );

                    if ( var_1.toma_strike_munitionused[var_13].size == 0 )
                        var_1.toma_strike_munitionused = scripts\engine\utility::array_remove_key( var_1.toma_strike_munitionused, var_13 );
                }
            }
        }

        if ( !isdefined( var_1.toma_strike_munitionused[var_5] ) )
            var_1.toma_strike_munitionused[var_5] = [];

        if ( !isdefined( var_1.toma_strike_munitionused[var_5][var_6] ) )
        {
            var_1.toma_strike_munitionused[var_5][var_6] = spawnstruct();
            var_1.toma_strike_munitionused[var_5][var_6].time = var_7;
            var_1.toma_strike_munitionused[var_5][var_6].toma_strike = [];
        }

        var_14 = minigun_wait_between_shots( var_1, var_2 );
        var_15 = var_1.toma_strike_munitionused[var_5][var_6].toma_strike;

        if ( var_1.toma_strike_munitionused[var_5][var_6].toma_strike.size >= var_14 )
        {
            if ( getdvarint( "scr_spread_use_highest_damage_pellets", 0 ) )
            {
                foreach ( var_18, var_17 in var_1.toma_strike_munitionused[var_5][var_6].toma_strike )
                {
                    if ( var_3 > var_17 )
                    {
                        var_1.toma_strike_munitionused[var_5][var_6].toma_strike[var_18] = var_3;
                        var_1.toma_strike_munitionused[var_5][var_6].toma_strike = scripts\engine\utility::array_sort_with_func( var_1.toma_strike_munitionused[var_5][var_6].toma_strike, ::postspawn_rpg );
                        return var_3 - var_17;
                    }
                }
            }

            return 0;
        }
        else
        {
            var_1.toma_strike_munitionused[var_5][var_6].toma_strike = scripts\engine\utility::array_add( var_1.toma_strike_munitionused[var_5][var_6].toma_strike, var_3 );
            var_1.toma_strike_munitionused[var_5][var_6].toma_strike = scripts\engine\utility::array_sort_with_func( var_1.toma_strike_munitionused[var_5][var_6].toma_strike, ::postspawn_rpg );
        }
    }

    return var_3;
}

postspawn_rpg( var_0, var_1 )
{
    return var_0 < var_1;
}

minigun_wait_between_shots( var_0, var_1 )
{
    var_2 = scripts\mp\utility\weapon::getweaponrootname( var_1.basename );

    if ( var_2 == "iw8_sh_charlie725" || var_2 == "iw8_pi_cpapa" )
    {
        if ( var_0 isdualwielding() )
            return 2;

        if ( var_1 hasattachment( "barshort_charlie725" ) )
            return 3;

        var_3 = var_0 playerads() > 0.5;

        if ( var_3 )
        {
            return 4;
            return;
        }

        return 3;
        return;
    }
    else
        return 4;
}

armorvest_washit( var_0 )
{
    return isdefined( var_0.hitarmorvest ) && gettime() == var_0.hitarmorvest;
}

armorvest_sethit( var_0 )
{
    var_0.hitarmorvest = gettime();
}

armorvest_clearhit( var_0 )
{
    var_0.hitarmorvest = undefined;
}

armorvest_wasbroke( var_0 )
{
    return isdefined( var_0.brokearmorvest ) && gettime() == var_0.brokearmorvest;
}

armorvest_setbroke( var_0 )
{
    var_0.brokearmorvest = gettime();
}

armorvest_clearbroke( var_0 )
{
    var_0.brokearmorvest = undefined;
}

helmet_washit( var_0 )
{
    return isdefined( var_0.hithelmet ) && gettime() == var_0.hithelmet;
}

helmet_sethit( var_0 )
{
    var_0.hithelmet = gettime();
}

helmet_clearhit( var_0 )
{
    var_0.hithelmet = undefined;
}

helmet_wasbroke( var_0 )
{
    return isdefined( var_0.brokehelmet ) && gettime() == var_0.brokehelmet;
}

helmet_setbroke( var_0 )
{
    var_0.brokehelmet = gettime();
}

helmet_clearbroke( var_0 )
{
    var_0.brokehelmet = undefined;
}

applystoppingpower( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_5 = scripts\mp\tweakables::gettweakablevalue( "player", "maxhealth" );
    var_6 = getbulletstokill( var_5, var_4 );
    var_7 = scripts\mp\utility\weapon::getweaponrootname( var_0 );

    if ( var_6 == 2 )
    {
        if ( _id_12515( var_0, var_1, var_2, var_3 ) )
            return var_5;
        else
            return 0.9 * var_5;
    }

    var_8 = -1;

    if ( var_6 >= 7 )
        var_8 = -3;
    else if ( var_6 >= 5 )
        var_8 = -2;

    return adjustbulletstokill( var_4, var_5, var_8, var_7 );
}

_id_12515( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\mp\utility\weapon::getweaponrootname( var_0 );
    var_5 = weaponclass( var_0 );

    if ( var_4 == "iw8_sn_crossbow" )
        return 1;
    else if ( var_5 == "sniper" )
    {
        switch ( var_4 )
        {
            case "iw8_sn_sksierra":
            case "iw8_sn_mike14":
                if ( scripts\mp\utility\damage::istorsouppershot( var_1, var_2, var_3 ) || scripts\mp\utility\damage::isheadshot( var_1, var_2, var_3 ) )
                    return 1;

                break;
            case "iw8_sn_delta":
            case "iw8_sn_sbeta":
            case "iw8_sn_kilo98":
                if ( scripts\mp\utility\damage::istorsoshot( var_1, var_2, var_3 ) || scripts\mp\utility\damage::isheadshot( var_1, var_2, var_3 ) )
                    return 1;

                break;
            default:
                if ( scripts\mp\utility\damage::isupperbodyshot( var_1, var_2, var_3 ) || scripts\mp\utility\damage::isheadshot( var_1, var_2, var_3 ) )
                    return 1;
        }
    }
    else if ( var_5 == "pistol" )
    {
        switch ( var_4 )
        {
            case "iw8_pi_decho":
            case "iw8_pi_cpapa":
                if ( scripts\mp\utility\damage::istorsouppershot( var_1, var_2, var_3 ) || scripts\mp\utility\damage::isheadshot( var_1, var_2, var_3 ) )
                    return 1;

                break;
        }
    }
    else if ( var_5 == "rifle" )
    {
        switch ( var_4 )
        {
            case "iw8_ar_asierra12":
            case "iw8_ar_falima":
                if ( scripts\mp\utility\damage::isheadshot( var_1, var_2, var_3 ) )
                    return 1;

                break;
        }

        var_6 = getweaponammopoolname( var_0 );

        switch ( var_6 )
        {
            case "WEAPON/AMMO_SLUGS":
            case "WEAPON/AMMO_7_62_M67":
                if ( scripts\mp\utility\damage::istorsouppershot( var_1, var_2, var_3 ) || scripts\mp\utility\damage::isheadshot( var_1, var_2, var_3 ) )
                    return 1;

                break;
        }
    }

    return 0;
}

adjustbulletstokill( var_0, var_1, var_2, var_3 )
{
    var_0 = int( var_0 );
    var_2 = int( var_2 );

    if ( var_2 == 0 )
        return var_0;

    if ( var_0 <= 0 )
        return var_0;

    var_4 = getbulletstokill( var_1, var_0 );
    var_5 = var_4 + var_2;

    if ( isdefined( var_3 ) && var_3 == "iw8_sn_t9accurate" )
        var_0 = var_0 * 1.3;
    else if ( var_5 <= 0 )
        var_0 = var_0 * 1.4;
    else if ( var_5 == 1 )
        var_0 = int( max( var_1, var_0 * 1.4 ) );
    else
    {
        var_6 = scripts\engine\utility::ter_op( var_0 > var_1, var_1, var_0 );
        var_7 = 0.0;

        if ( var_4 == 1 )
            var_7 = 0.9;
        else
        {
            var_8 = int( ceil( var_1 / ( var_4 - 1 ) ) );
            var_9 = int( ceil( var_1 / var_4 ) );
            var_7 = ( var_6 - var_9 ) / ( var_8 - var_9 );
        }

        var_10 = int( ceil( var_1 / ( var_5 - 1 ) ) );
        var_11 = int( ceil( var_1 / var_5 ) );
        var_0 = int( ( var_10 - var_11 ) * var_7 + var_11 );
    }

    return var_0;
}

getbulletstokill( var_0, var_1 )
{
    return int( ceil( var_0 / var_1 ) );
}

isbehindmeleevictim( var_0, var_1 )
{
    var_2 = vectornormalize( ( var_1.origin[0], var_1.origin[1], 0 ) - ( var_0.origin[0], var_0.origin[1], 0 ) );
    var_3 = anglestoforward( ( 0, var_1.angles[1], 0 ) );
    return vectordot( var_2, var_3 ) > 0.4;
}

killstreakdamagefilter( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = 0;

    if ( isdefined( level.keypad_check_levelinput ) )
        var_5 = [[ level.keypad_check_levelinput ]]( var_0, var_1, var_2, var_3, var_4 );

    if ( var_1 scripts\mp\utility\game::isspawnprotected() || istrue( var_5 ) )
    {
        var_6 = int( max( var_1.health / 4, 1 ) );

        if ( var_2 >= var_6 && scripts\mp\utility\weapon::iskillstreakweapon( var_3.basename ) && !scripts\mp\utility\weapon::weaponbypassspawnprotection( var_3 ) && var_4 != "MOD_MELEE" )
            var_2 = var_6;
    }

    return var_2;
}

friendlyfire_ignoresdamageattacker( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 )
{
    var_13 = 0;

    if ( isdefined( var_6 ) )
    {
        switch ( var_6.basename )
        {
            case "none":
                if ( isdefined( var_0 ) && scripts\mp\utility\entity::isdronepackage( var_0 ) )
                    var_13 = 1;

                break;
            case "apache_turret_mp":
            case "trophy_mp":
                var_13 = 1;
                break;
        }
    }

    return var_13;
}

handlefriendlyfiredamage( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13 )
{
    if ( isdefined( var_6 ) && scripts\engine\utility::isbulletdamage( var_5 ) && ( scripts\mp\utility\weapon::iscacprimaryweapon( var_6.basename ) || scripts\mp\utility\weapon::iscacsecondaryweapon( var_6.basename ) ) )
        level thread scripts\mp\battlechatter_mp::trysaylocalsound( var_2, "check_fire_ally", undefined, 0.25 );

    if ( isdefined( var_0 ) && !isplayer( var_0 ) )
    {
        if ( !isdefined( var_1 ) )
        {
            if ( isdefined( var_0.owner ) )
                var_1 = var_0.owner;
        }
        else if ( !isplayer( var_1 ) )
        {
            if ( isdefined( var_0.owner ) )
                var_1 = var_0.owner;
            else if ( isdefined( var_1.owner ) )
                var_1 = var_1.owner;
        }
    }

    if ( level.hardcoremode )
    {
        if ( isdefined( var_4 ) && var_4 & level.idflags_ricochet && scripts\engine\utility::isbulletdamage( var_5 ) )
            var_3 = int( var_3 * 0.2 );
    }

    if ( level.friendlyfire != 0 )
    {
        if ( level.maxallowedteamkills == -1 )
            var_14 = 0;
        else
            var_14 = istrue( var_2.propsize ) || istrue( var_2.isdefusing ) || istrue( var_2.isplanting );

        var_15 = propspectating( var_1 );

        if ( var_14 || var_15 )
        {
            var_3 = int( var_3 * 0.5 );

            if ( var_3 < 1 )
                var_3 = 1;

            var_1.lastdamagewasfromenemy = 0;
            damageattacker( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 );
            return 0;
        }
    }

    if ( level.friendlyfire == 0 || !isplayer( var_1 ) && level.friendlyfire != 1 || var_6.basename == "bomb_site_mp" )
        return 0;
    else if ( level.friendlyfire == 1 )
    {
        if ( var_3 < 1 )
            var_3 = 1;

        var_2.lastdamagewasfromenemy = 0;
        scriptedspawns( var_2, var_1, var_3, var_5 );
        var_2 finishplayerdamagewrapper( var_0, var_1, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 );
        var_1 handledamagefeedback( var_0, var_1, var_2, var_3, var_5, var_6, var_9, var_4, 0, 0, var_13 );
        return 0;
    }
    else if ( level.friendlyfire == 2 )
    {
        var_3 = int( var_3 * 0.5 );

        if ( var_3 < 1 )
            var_3 = 1;

        var_1.lastdamagewasfromenemy = 0;

        if ( !friendlyfire_ignoresdamageattacker( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 ) )
            damageattacker( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 );

        return 0;
    }
    else if ( level.friendlyfire == 3 )
    {
        var_3 = int( var_3 * 0.5 );

        if ( var_3 < 1 )
            var_3 = 1;

        var_2.lastdamagewasfromenemy = 0;
        var_1.lastdamagewasfromenemy = 0;
        scriptedspawns( var_2, var_1, var_3, var_5 );
        var_2 finishplayerdamagewrapper( var_0, var_1, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 );

        if ( !friendlyfire_ignoresdamageattacker( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 ) )
            damageattacker( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 );

        var_1 handledamagefeedback( var_0, var_1, var_2, var_3, var_5, var_6, var_9, var_4, 0, 0, var_13 );
        return 0;
    }
    else if ( level.friendlyfire == 4 )
    {
        var_16 = var_1.pers["teamkills"] >= level.maxallowedteamkills;

        if ( var_16 )
        {
            if ( !friendlyfire_ignoresdamageattacker( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 ) )
            {
                var_3 = int( var_3 * 0.5 );

                if ( var_3 < 1 )
                    var_3 = 1;

                var_1.lastdamagewasfromenemy = 0;
                damageattacker( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 );
            }

            return 0;
        }
    }

    return var_3;
}

propspectating( var_0 )
{
    if ( level.ingraceperiod )
        return 1;

    if ( var_0.pers["teamkills"] > 1 && scripts\mp\utility\game::gettimepassed() < level.graceperiod * 1000 + 8000 + var_0.pers["teamkills"] * 1000 )
        return 1;

    return 0;
}

damageattacker( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 )
{
    if ( var_1 scripts\cp_mp\utility\player_utility::_isalive() )
    {
        var_1.friendlydamage = 1;
        var_1 finishplayerdamagewrapper( var_0, var_1, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 );
        var_1.friendlydamage = undefined;
    }
}

should_spawn_drones( var_0 )
{
    return var_0 == "head" || var_0 == "helmet" || var_0 == "neck";
}

showcashbag( var_0, var_1 )
{
    var_2 = scripts\mp\utility\weapon::getweaponrootname( var_1.basename );

    if ( var_2 == "iw8_pi_mike9" && var_1 hasattachment( "akimbo_mike9" ) && var_1 hasattachment( "barburst_mike9" ) )
        return var_0 * 0.75;

    return var_0;
}

showclosingmessage( var_0, var_1 )
{
    var_2 = scripts\mp\utility\weapon::getweaponrootname( var_1.basename );

    if ( var_2 == "iw8_pi_mike" && var_1 hasattachment( "akimbo_mike" ) && var_1 hasattachment( "barauto_mike" ) )
        return var_0 * 0.75;

    return var_0;
}

showing_bomb_wire_pair_to_player( var_0, var_1, var_2, var_3, var_4 )
{
    if ( isdefined( var_1 ) )
    {
        if ( previouscarepackagekillstreaks( var_0, var_4 ) )
        {
            if ( var_2.health > 0 && var_3 >= var_2.health )
                var_3 = var_2.health - 1;
        }
        else if ( isdefined( var_0._id_12342 ) )
        {
            if ( !isdefined( var_1._id_1233D ) )
                var_1._id_1233D = [];

            var_5 = "" + var_2 getentitynumber();
            var_6 = gettime();
            var_1._id_1233D[var_5] = spawnstruct();
            var_1._id_1233D[var_5].time = var_6;
            var_1._id_1233D[var_5].play_exfil_plane_vo = var_0._id_12342.basename;
        }
        else if ( isdefined( var_1._id_1233D ) )
        {
            var_6 = gettime();

            foreach ( var_9, var_8 in var_1._id_1233D )
            {
                if ( var_6 != var_8.time )
                    var_1._id_1233D = scripts\engine\utility::array_remove_key( var_1._id_1233D, var_9 );
            }

            var_9 = "" + var_2 getentitynumber();

            if ( scripts\engine\utility::array_contains_key( var_1._id_1233D, var_9 ) && var_1._id_1233D[var_9].play_exfil_plane_vo == var_0.basename )
            {
                var_3 = 0;
                var_1._id_1233D = scripts\engine\utility::array_remove_key( var_1._id_1233D, var_9 );
            }

            if ( var_1._id_1233D.size == 0 )
                var_1._id_1233D = undefined;
        }
    }

    return var_3;
}

should_take_damage( var_0, var_1, var_2, var_3, var_4 )
{
    if ( scripts\mp\utility\game::isanymlgmatch() && isdefined( var_0 ) && isplayer( var_0 ) && !nullweapon( var_3 ) && scripts\mp\utility\weapon::isprimaryweapon( var_3 ) && scripts\engine\utility::isbulletdamage( var_2 ) && should_spawn_drones( var_4 ) )
    {
        switch ( var_3.classname )
        {
            case "smg":
            case "pistol":
            case "mg":
            case "rifle":
                var_1 = int( clamp( var_1, 0, var_3.maxdamage * 1.3 ) );
                break;
        }
    }

    return var_1;
}

showextractionobjectivetoteam( var_0, var_1, var_2 )
{
    var_3 = var_1;

    if ( isdefined( var_2 ) && var_2 == "MOD_FALLING" )
    {
        if ( var_0 scripts\mp\utility\killstreak::isjuggernaut() )
            var_3 = var_0 scripts\mp\juggernaut::register_invalid_seats_for_module_by_seat();
    }

    return var_3;
}

showmapchyron( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = var_3;

    if ( isdefined( var_0 ) && var_0 scripts\cp_mp\vehicles\vehicle::isvehicle() )
    {
        if ( var_2 scripts\mp\utility\killstreak::isjuggernaut() )
            var_5 = var_2 scripts\mp\juggernaut::register_jugg_maze_objectives( var_3, var_4 );
    }

    return var_5;
}

showintelscriptablestoplayer( var_0, var_1 )
{
    var_2 = var_1;
    var_3 = var_0 scripts\cp_mp\utility\player_utility::getvehicle();

    if ( isdefined( var_3 ) )
        var_2 = scripts\cp_mp\vehicles\vehicle_damage::_id_12C41( var_3, var_0, var_1 );

    return var_2;
}

showdroplocations( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = var_3;

    if ( isdefined( var_4 ) && var_4 == "MOD_CRUSH" )
    {
        if ( isdefined( var_0 ) && isdefined( var_1 ) && var_0 == var_1 && var_1 scripts\mp\utility\killstreak::isjuggernaut() && var_2 scripts\mp\utility\killstreak::isjuggernaut() )
            var_5 = var_2 scripts\mp\juggernaut::register_jugg_maze_interactions( var_3 );
    }

    return var_5;
}

modifydamagegeneral( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11 )
{
    var_3 = showcashbag( var_3, var_6 );
    var_3 = showclosingmessage( var_3, var_6 );
    var_3 = should_take_damage( var_1, var_3, var_5, var_6, var_9 );
    var_3 = showextractionobjectivetoteam( var_2, var_3, var_5 );
    var_3 = showmapchyron( var_0, var_1, var_2, var_3, var_5 );
    var_3 = showintelscriptablestoplayer( var_2, var_3 );
    var_3 = showdroplocations( var_0, var_1, var_2, var_3, var_5 );
    var_3 = showing_bomb_wire_pair_to_player( var_6, var_1, var_2, var_3, var_5 );

    if ( var_5 == "MOD_EXPLOSIVE_BULLET" && var_3 != 1 )
    {
        var_3 = var_3 * getdvarfloat( "scr_explBulletMod" );
        var_3 = int( var_3 );
    }

    if ( var_5 == "MOD_IMPACT" && var_3 != 1 )
    {
        if ( istrue( var_6.isalternate ) && scripts\mp\weapons::process_struct_angle_tilt( var_6.underbarrel ) )
        {
            var_12 = var_0 getmissilevelocity();
            var_13 = length( var_12 );

            if ( var_13 < 400 )
                var_3 = 10;
        }
    }

    if ( isdefined( level.modifyplayerdamage ) )
        var_3 = int( [[ level.modifyplayerdamage ]]( var_0, var_2, var_1, var_3, var_5, var_6, var_7, var_8, var_9, var_4, var_11 ) );

    if ( !isdefined( var_2.donotmodifydamage ) )
        var_3 = int( var_3 * var_2 scripts\cp_mp\utility\damage_utility::getdamagemodifiertotal( var_0, var_1, var_2, var_3, var_5, var_6, var_9 ) );

    if ( scripts\mp\utility\damage::isheadshot( var_9, var_5, var_1 ) )
        var_5 = "MOD_HEAD_SHOT";

    if ( scripts\mp\tweakables::gettweakablevalue( "game", "onlyheadshots" ) )
    {
        if ( var_5 == "MOD_HEAD_SHOT" )
            var_3 = 150;
    }

    return var_3;
}

handleriotshieldhits( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 )
{
    if ( var_8 != "shield" )
        return var_3;

    var_11 = scripts\cp_mp\utility\damage_utility::packdamagedata( var_2, var_1, var_3, var_5, var_4, var_0, var_6, var_7, undefined, undefined, undefined, var_9 );
    var_12 = istrue( var_1.ignoreriotshieldxp );

    if ( isdefined( var_1.owner ) )
    {
        var_1 = var_1.owner;

        if ( var_2 == var_1 )
            return 0;
    }

    if ( var_4 == "MOD_PISTOL_BULLET" || var_4 == "MOD_RIFLE_BULLET" || var_4 == "MOD_EXPLOSIVE_BULLET" )
    {
        if ( isplayer( var_2 ) )
        {
            var_2.lastattackedshieldplayer = var_1;
            var_2.lastattackedshieldtime = gettime();
        }

        var_1 notify( "shield_blocked" );

        if ( scripts\mp\utility\weapon::isenvironmentweapon( var_5.basename ) )
            var_13 = 25;
        else
        {
            var_14 = cac_modified_damage( var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_0, 0, var_9 );
            var_13 = var_14[0];
            var_15 = var_14[1];
            var_16 = var_14[2];
            var_8 = var_14[3];
        }

        var_1 scripts\mp\utility\stats::incpersstat( "riotShieldDamageAbsorbed", var_13 );

        if ( isplayer( var_2 ) && isdefined( var_1.rearguardattackers ) )
        {
            var_17 = var_2 getentitynumber();

            if ( !isdefined( var_1.rearguardattackers[var_17] ) )
                var_1.rearguardattackers[var_17] = var_13;
            else
                var_1.rearguardattackers[var_17] = var_1.rearguardattackers[var_17] + var_13;
        }

        if ( var_12 )
            return 0;

        if ( !scripts\mp\utility\weapon::isenvironmentweapon( var_5.basename ) || scripts\engine\utility::cointoss() )
            var_1.shieldbullethits++;

        var_18 = istrue( scripts\cp_mp\utility\player_utility::playersareenemies( var_1, var_2 ) );

        if ( var_1.shieldbullethits >= level.riotshieldxpbullets && var_18 )
        {
            var_19 = 1.0;

            if ( self.recentshieldxp > 4 )
                var_19 = 1.0 / self.recentshieldxp;

            var_20 = scripts\mp\rank::getscoreinfovalue( "shield_damage" );
            var_1 thread scripts\mp\utility\points::giveunifiedpoints( "shield_damage", var_1.currentweapon, var_20 * var_19 );
            var_1 thread giverecentshieldxp();
            var_1.shieldbullethits = 0;
        }
    }

    var_21 = isdefined( var_0 ) && isdefined( var_0.stuckenemyentity ) && var_0.stuckenemyentity == var_1;

    if ( var_9 & level.idflags_shield_explosive_impact )
    {
        var_1.forcehitlocation = "none";

        if ( !( var_9 & level.idflags_shield_explosive_impact_huge ) )
        {
            var_1 scripts\mp\utility\stats::incpersstat( "riotShieldDamageAbsorbed", var_3 );
            var_3 = 0;
        }
    }
    else if ( var_9 & level.idflags_shield_explosive_splash )
    {
        var_1.forcehitlocation = "none";

        if ( var_1 scripts\cp_mp\utility\damage_utility::isstuckdamagekill( var_11 ) )
            var_3 = var_1.maxhealth;
    }
    else
        return 0;

    if ( var_4 == "MOD_MELEE" && scripts\mp\riotshield::isriotshield( var_5.basename ) )
        var_1 stunplayer( 0.0 );

    return var_3;
}

filterdamage( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    if ( !var_3 )
        return "!iDamage";

    if ( isdefined( level.hostmigrationtimer ) )
        return "level.hostMigrationTimer";

    var_1 = scripts\mp\utility\damage::_validateattacker( var_1 );

    if ( !isdefined( var_1 ) && var_4 != "MOD_FALLING" )
        return "invalid attacker";

    var_2 = scripts\mp\utility\damage::_validatevictim( var_2 );

    if ( !isdefined( var_2 ) )
        return "invalidVictim";

    if ( game["state"] == "postgame" )
        return "game[ state ] == postgame";

    if ( isdefined( var_2.sessionteam ) && var_2.sessionteam == "spectator" )
        return "victim.sessionteam == spectator";

    if ( scripts\mp\tweakables::gettweakablevalue( "game", "onlyheadshots" ) )
    {
        if ( var_6 != "head" && var_6 != "helmet" )
        {
            if ( var_4 == "MOD_PISTOL_BULLET" || var_4 == "MOD_RIFLE_BULLET" || var_4 == "MOD_EXPLOSIVE_BULLET" )
                return "getTweakableValue( game, onlyheadshots )";
        }
    }

    if ( scripts\cp_mp\vehicles\vehicle::_id_12CD5( var_0, var_2, var_4, var_5 ) )
        return "playerJustExitedVehicle";

    var_7 = isdefined( var_1 ) && isdefined( var_1.classname ) && !isdefined( var_1.gunner ) && ( var_1.classname == "script_vehicle" || var_1.classname == "misc_turret" || var_1.classname == "script_model" );

    if ( !level.teambased && var_7 && isdefined( var_1.owner ) && var_1.owner == var_2 )
    {
        if ( var_4 == "MOD_CRUSH" )
            var_2 scripts\mp\utility\damage::_suicide();

        return "ffa suicide";
    }
}

logattacker( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    if ( isdefined( var_1 ) && isplayer( var_1 ) )
        addattacker( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );

    if ( isdefined( var_1 ) && !isplayer( var_1 ) && isdefined( var_1.owner ) && ( !isdefined( var_1.scrambled ) || !var_1.scrambled ) )
        addattacker( var_0, var_1.owner, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );
    else if ( isdefined( var_1 ) && !isplayer( var_1 ) && isdefined( var_1.secondowner ) && isdefined( var_1.scrambled ) && var_1.scrambled )
        addattacker( var_0, var_1.secondowner, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );

    if ( isdefined( var_2 ) && isdefined( var_2.owner ) )
    {
        var_10 = var_2.owner.team != var_0.team || level.friendlyfire == 1;

        if ( var_10 && !istrue( var_2.owner._id_12B81 ) && !isdefined( self.attackerdata[var_2.owner.guid] ) )
            addattacker( var_0, var_2.owner, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );
    }

    if ( isdefined( var_1 ) )
        level.lastlegitimateattacker = var_1;

    if ( isdefined( var_1 ) && isplayer( var_1 ) && isdefined( var_3 ) )
        var_1 thread scripts\mp\weapons::checkhit( var_3, var_0 );

    if ( isdefined( var_1 ) && isplayer( var_1 ) && isdefined( var_3 ) && var_1 != var_0 )
    {
        var_1 thread scripts\mp\events::damagedplayer( self, var_4 );
        var_0.attackerposition = var_1.origin;
    }
    else
        var_0.attackerposition = undefined;
}

logattackerkillstreak( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 )
{
    if ( isdefined( var_2 ) && isplayer( var_2 ) )
        addattackerkillstreak( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 );

    if ( isdefined( var_2 ) && !isplayer( var_2 ) && isdefined( var_2.owner ) && ( !isdefined( var_2.scrambled ) || !var_2.scrambled ) )
    {
        var_2 = var_2.owner;
        addattackerkillstreak( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 );
    }
    else if ( isdefined( var_2 ) && !isplayer( var_2 ) && isdefined( var_2.secondowner ) && isdefined( var_2.scrambled ) && var_2.scrambled )
    {
        var_2 = var_2.secondowner;
        addattackerkillstreak( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 );
    }

    if ( isdefined( var_2 ) )
        level.lastlegitimateattacker = var_2;

    if ( isdefined( var_2 ) && isplayer( var_2 ) && isdefined( var_10 ) && var_2 != var_0 )
        var_0.attackerposition = var_2.origin;
    else
        var_0.attackerposition = undefined;
}

loggrenadedata( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( ( issubstr( var_4, "MOD_EXPLOSIVE" ) || issubstr( var_4, "MOD_PROJECTILE" ) ) && isdefined( var_0 ) && isdefined( var_1 ) )
    {
        var_6 = createheadicon( var_5 );
        var_2.explosiveinfo = [];
        var_2.explosiveinfo["damageTime"] = gettime();
        var_2.explosiveinfo["damageId"] = var_0 getentitynumber();
        var_2.explosiveinfo["returnToSender"] = 0;
        var_2.explosiveinfo["counterKill"] = 0;
        var_2.explosiveinfo["chainKill"] = 0;
        var_2.explosiveinfo["cookedKill"] = 0;
        var_2.explosiveinfo["throwbackKill"] = 0;
        var_2.explosiveinfo["suicideGrenadeKill"] = 0;
        var_2.explosiveinfo["weapon"] = var_6;
        var_7 = issubstr( var_5.basename, "frag_" );

        if ( var_1 != var_2 )
        {
            if ( ( issubstr( var_5.basename, "c4_" ) || issubstr( var_5.basename, "proximity_explosive_" ) || issubstr( var_5.basename, "claymore_" ) ) && isdefined( var_0.owner ) )
            {
                var_2.explosiveinfo["returnToSender"] = var_0.owner == var_2;
                var_2.explosiveinfo["counterKill"] = isdefined( var_0.wasdamaged );
                var_2.explosiveinfo["chainKill"] = isdefined( var_0.waschained );
                var_2.explosiveinfo["bulletPenetrationKill"] = isdefined( var_0.wasdamagedfrombulletpenetration );
                var_2.explosiveinfo["cookedKill"] = 0;
            }

            if ( isdefined( var_1.lastgrenadesuicidetime ) && var_1.lastgrenadesuicidetime >= gettime() - 50 && var_7 )
                var_2.explosiveinfo["suicideGrenadeKill"] = 1;
        }

        if ( var_7 )
        {
            var_2.explosiveinfo["cookedKill"] = isdefined( var_0.iscooked );
            var_2.explosiveinfo["throwbackKill"] = isdefined( var_0.threwback );
        }

        var_2.explosiveinfo["stickKill"] = isdefined( var_0.isstuck ) && var_0.isstuck == "enemy";
        var_2.explosiveinfo["stickFriendlyKill"] = isdefined( var_0.isstuck ) && var_0.isstuck == "friendly";

        if ( isplayer( var_1 ) && var_1 != self && scripts\mp\utility\game::getgametype() != "aliens" )
            updateinflictorstat( var_0, var_1, var_6 );
    }
}

handledamagefeedback( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 )
{
    var_11 = isdefined( var_1 ) && isdefined( var_1.classname ) && !isdefined( var_1.gunner ) && ( var_1.classname == "script_vehicle" || var_1.classname == "misc_turret" || var_1.classname == "script_model" );

    if ( var_11 && isdefined( var_1.gunner ) )
        var_12 = var_1.gunner;
    else if ( isdefined( var_1 ) && isdefined( var_1.owner ) )
        var_12 = var_1.owner;
    else
        var_12 = var_1;

    var_13 = "standard";

    if ( isdefined( var_12 ) && var_12 != var_2 && var_3 + var_8 + var_9 > 0 && ( !isdefined( var_6 ) || var_6 != "shield" ) )
    {
        var_14 = !var_2 scripts\cp_mp\utility\player_utility::_isalive() || isagent( var_2 ) && var_3 >= var_2.health;

        if ( var_2 scripts\mp\utility\perk::_hasperk( "specialty_pistoldeath" ) && isdefined( var_2.inlaststand ) && var_2.inlaststand == 1 && !var_2.hasshownlaststandicon )
        {
            var_2.hasshownlaststandicon = 1;
            var_13 = "hitlaststand";
        }
        else if ( istrue( var_2.isjuggernaut ) )
            var_13 = "hitjuggernaut";
        else if ( var_2 scripts\mp\heavyarmor::hasheavyarmor() || var_2 scripts\mp\heavyarmor::hasheavyarmorinvulnerability() )
            var_13 = "hitarmorheavy";
        else if ( var_7 & level.idflags_stun )
            var_13 = "stun";
        else if ( scripts\mp\utility\damage::istacticaldamage( var_5, var_4 ) && var_2 scripts\mp\utility\perk::_hasperk( "specialty_stun_resistance" ) )
            var_13 = "hittacresist";
        else if ( var_2 scripts\mp\utility\perk::_hasperk( "specialty_blastshield" ) && !scripts\mp\utility\damage::damage_should_ignore_blast_shield( var_1, var_2, var_5, var_4, var_0, var_6 ) )
            var_13 = "hitblastshield";
        else if ( scripts\mp\utility\damage::hashealthshield( var_2 ) )
            var_13 = "hitarmorlight";
        else if ( armorvest_wasbroke( var_1 ) )
            var_13 = "hitarmorlightbreak";
        else if ( helmet_wasbroke( var_1 ) )
            var_13 = "hithelmetlightbreak";
        else if ( armorvest_washit( var_1 ) )
            var_13 = "hitarmorlight";
        else if ( helmet_washit( var_1 ) )
            var_13 = "hithelmetlight";
        else if ( var_8 > 0 )
            var_13 = "hitarmorlight";
        else if ( istrue( var_2.adrenalinepoweractive ) )
            var_13 = "hitadrenaline";
        else if ( var_2 scripts\mp\utility\game::isspawnprotected() && var_10 && !scripts\mp\utility\weapon::weaponbypassspawnprotection( var_5 ) )
            var_13 = "hitspawnprotect";

        var_15 = scripts\engine\utility::isbulletdamage( var_4 );
        var_16 = scripts\engine\utility::ter_op( var_15 && scripts\mp\utility\weapon::isprimaryweapon( var_5 ), "standardspread", "standard" );
        var_17 = 0;

        if ( var_13 == "hitarmorlightbreak" )
        {
            var_17 = 1;

            if ( var_16 == "standardspread" )
                var_16 = "standardspreadarmor";
            else
                var_16 = "standardarmor";
        }

        var_18 = !raritycamlarge( var_5 ) && scripts\mp\utility\damage::isheadshot( var_6, var_4, var_1 );
        var_19 = 1;
        var_20 = var_4 == "MOD_MELEE";
        var_21 = "" + var_2 getentitynumber();
        var_22 = 0;

        if ( !var_17 && raritycamlarge( var_5 ) && isdefined( var_12.toma_strike_munitionused ) )
        {
            foreach ( var_24 in var_12.toma_strike_munitionused )
            {
                if ( isdefined( var_24[var_21] ) && var_24[var_21].toma_strike.size > 1 )
                    var_22 = 1;
            }
        }

        if ( !var_20 && var_22 )
        {
            if ( var_14 )
                var_20 = 1;
            else
                var_19 = 0;
        }

        if ( var_19 )
            var_12 thread scripts\mp\damagefeedback::updatedamagefeedback( var_13, var_14, var_18, var_16, var_20 );
    }
}

lethalequipmentdamagemod( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = scripts\cp_mp\utility\damage_utility::packdamagedata( var_1, var_2, var_3, var_6, var_5, var_0, undefined, undefined, undefined, undefined, undefined, var_4 );

    if ( isdefined( var_0 ) && isdefined( var_0.damagedby ) )
        var_1 = var_0.damagedby;

    if ( var_2 scripts\cp_mp\utility\damage_utility::isstuckdamagekill( var_7 ) )
    {
        if ( var_2 scripts\mp\utility\killstreak::isjuggernaut() )
            var_3 = min( 300, var_3 );
        else
            var_3 = var_2.maxhealth + scripts\engine\utility::ter_op( isdefined( self.br_armorhealth ), self.br_armorhealth, 0 );
    }

    if ( isdefined( var_5 ) && var_5 != "MOD_IMPACT" )
    {
        if ( var_2 != var_1 && isdefined( var_0 ) && isdefined( var_0.classname ) && var_0.classname == "grenade" && var_2.lastspawntime + 3500 > gettime() && isdefined( var_2.lastspawnpoint ) && distance( var_0.origin, var_2.lastspawnpoint.origin ) < 500 )
            var_3 = 0;
    }

    loggrenadedata( var_0, var_1, var_2, var_3, var_5, var_6 );
    var_1 scripts\common\utility::_id_12965( level.set_up_rear_minigun, scripts\mp\utility\weapon::getweaponrootname( var_6 ), "damage", min( var_2.health, var_3 ), -1, var_6 );
    return var_3;
}

playerkilled_initdeathdata( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11 )
{
    var_12 = scripts\cp_mp\utility\damage_utility::packdamagedata( var_1, var_2, var_3, var_6, var_5, var_0, undefined, var_7, undefined, undefined, undefined, var_4 );
    var_12.hitloc = var_8;
    var_12.psoffsettime = var_9;
    var_12.deathanimduration = var_10;
    var_12.isfauxdeath = var_11;

    if ( var_5 == "MOD_EXECUTION" )
        var_12.executionref = scripts\cp_mp\execution::execution_getrefbyplayer( var_1 );

    var_12.dokillcam = 0;
    var_12.dofinalkillcam = 1;
    var_12.killcamentity = undefined;
    var_12.killcamentityindex = -1;
    var_12.killcamentitystarttime = 0;
    var_12.inflictoragentinfo = undefined;
    var_12.killcamentstickstovictim = undefined;
    var_12.isfriendlyfire = undefined;
    var_12.primaryweapon = undefined;
    var_12.lifeid = undefined;
    var_12.attackerentnum = undefined;
    var_12.iskillstreakweapon = undefined;
    var_12.weaponfullstring = undefined;
    var_12.isnukekill = 0;
    var_12.deathscenetimesec = getdvarfloat( "scr_death_scene_time", 1.75 );
    var_12.deathscenetimems = int( var_12.deathscenetimesec * 1000 );
    var_12.deathtime = gettime();
    var_12.cp_is_point_in_front = undefined;
    return var_12;
}

playerkilled_parameterfixup( var_0 )
{
    if ( isdefined( var_0.objweapon ) )
    {

    }

    if ( scripts\mp\utility\game::gamehasneutralcrateowner( scripts\mp\utility\game::getgametype() ) )
    {
        if ( var_0.victim != var_0.attacker && var_0.meansofdeath == "MOD_CRUSH" )
        {
            var_0.inflictor = var_0.victim;
            var_0.attacker = var_0.victim;
            var_0.meansofdeath = "MOD_SUICIDE";
            var_0.objweapon.basename = "none";
            var_0.hitloc = "none";
            var_0.victim.attackers = [];
        }
    }

    if ( var_0.victim == var_0.attacker && var_0.meansofdeath == "MOD_CRUSH" )
        var_0.meansofdeath = "MOD_SUICIDE";

    if ( var_0.objweapon.basename == "none" )
    {
        if ( isdefined( var_0.inflictor ) && isdefined( var_0.inflictor.baseweapon ) )
            var_0.objweapon.basename = var_0.inflictor.baseweapon;
    }

    var_0.victim playerkilled_fixupattacker( var_0 );

    if ( scripts\mp\utility\damage::isheadshot( var_0.hitloc, var_0.meansofdeath, var_0.attacker ) )
        var_0.meansofdeath = "MOD_HEAD_SHOT";

    if ( var_0.isfauxdeath )
    {
        var_0.dokillcam = 0;
        var_0.deathanimduration = var_0.victim playerforcedeathanim( var_0.inflictor, var_0.meansofdeath, var_0.objweapon, var_0.hitloc, var_0.direction_vec );
    }
}

playerkilled_fixupattacker( var_0 )
{
    var_0.attacker = scripts\mp\utility\damage::_validateattacker( var_0.attacker );
    var_1 = 0;

    if ( !isdefined( var_0.attacker ) )
        var_1 = 1;
    else if ( isdefined( var_0.attacker.classname ) && ( var_0.attacker.classname == "trigger_hurt" || var_0.attacker.classname == "worldspawn" ) )
        var_1 = 1;
    else if ( var_0.attacker == var_0.victim )
        var_1 = 1;

    if ( var_1 )
    {
        var_2 = undefined;

        if ( isdefined( var_0.victim.attackers ) && self.attackers.size > 0 )
        {
            foreach ( var_4 in var_0.victim.attackers )
            {
                if ( !isdefined( scripts\mp\utility\damage::_validateattacker( var_4 ) ) )
                    continue;

                if ( !isdefined( var_0.victim.attackerdata[var_4.guid].damage ) )
                    continue;

                if ( var_4 == var_0.victim || level.teambased && var_4.team == var_0.victim.team )
                    continue;

                if ( var_0.victim.attackerdata[var_4.guid].damage > 1 && !isdefined( var_2 ) )
                {
                    var_2 = var_4;
                    continue;
                }

                if ( isdefined( var_2 ) && var_0.victim.attackerdata[var_4.guid].damage > var_0.victim.attackerdata[var_2.guid].damage )
                    var_2 = var_4;
            }
        }

        if ( !isdefined( var_2 ) )
        {
            if ( isdefined( var_0.victim.debuffedbyplayers ) && var_0.victim.debuffedbyplayers.size > 0 )
            {
                var_6 = [ "chargemode_mp", "cryo_mine_mp", "concussion_grenade_mp", "super_trophy_mp", "blackout_grenade_mp", "power_spider_grenade_mp", "emp_grenade_mp" ];

                foreach ( var_12, var_8 in var_6 )
                {
                    var_9 = scripts\mp\gamescore::getdebuffattackersbyweapon( var_0.victim, var_8 );

                    if ( isdefined( var_9 ) && var_9.size > 0 )
                    {
                        for ( var_10 = var_9.size - 1; var_10 >= 0; var_10-- )
                        {
                            var_11 = var_9[var_10];

                            if ( !isdefined( scripts\mp\utility\damage::_validateattacker( var_11 ) ) )
                                continue;

                            if ( !istrue( scripts\cp_mp\utility\player_utility::playersareenemies( var_11, var_0.victim ) ) )
                                continue;

                            var_2 = var_11;

                            if ( !isdefined( var_0.victim.attackerdata ) || !isdefined( var_0.victim.attackerdata[var_2.guid] ) )
                                addattacker( var_0.victim, var_2, undefined, getcompleteweaponname( var_8 ), 0, undefined, undefined, undefined, undefined, "MOD_EXPLOSIVE" );

                            break;
                        }
                    }

                    if ( isdefined( var_2 ) )
                        break;
                }
            }
        }

        if ( isdefined( var_2 ) )
        {
            var_0.attacker = var_2;
            var_0.attacker.assistedsuicide = 1;
            var_0.objweapon = var_0.victim.attackerdata[var_2.guid].objweapon;
            var_0.direction_vec = var_0.victim.attackerdata[var_2.guid].vdir;
            var_0.hitloc = var_0.victim.attackerdata[var_2.guid].shitloc;
            var_0.psoffsettime = var_0.victim.attackerdata[var_2.guid].psoffsettime;
            var_0.meansofdeath = var_0.victim.attackerdata[var_2.guid].smeansofdeath;
            var_0.damage = var_0.victim.attackerdata[var_2.guid].damage;
            var_0.primaryweapon = var_0.victim.attackerdata[var_2.guid].sprimaryweapon;

            if ( istrue( var_0.victim._id_1238B ) && isdefined( var_0.victim.attackerdata[var_2.guid].inflictor ) )
                var_0.inflictor = var_0.victim.attackerdata[var_2.guid].inflictor;

            var_0.assistedsuicide = 1;
        }
    }

    if ( isdefined( var_0.attacker ) )
    {
        if ( var_0.attacker.code_classname == "script_vehicle" && isdefined( var_0.attacker.owner ) )
            var_0.attacker = var_0.attacker.owner;

        if ( var_0.attacker.code_classname == "misc_turret" && isdefined( var_0.attacker.owner ) )
        {
            if ( isdefined( var_0.attacker.vehicle ) )
                var_0.attacker.vehicle notify( "killedPlayer", var_0.victim );

            var_0.attacker = var_0.attacker.owner;
        }

        if ( isagent( var_0.attacker ) )
        {
            if ( isdefined( var_0.attacker.owner ) )
                var_0.attacker = var_0.attacker.owner;
        }

        if ( var_0.attacker.code_classname == "script_model" && isdefined( var_0.attacker.owner ) )
        {
            var_0.attacker = var_0.attacker.owner;

            if ( !isfriendlyfire( var_0.victim, var_0.attacker ) && var_0.attacker != var_0.victim )
                var_0.attacker notify( "crushed_enemy" );
        }
    }

    if ( isdefined( var_0.inflictor ) && !isplayer( var_0.inflictor ) )
    {
        if ( !isdefined( var_0.attacker ) )
        {
            if ( isdefined( var_0.inflictor.owner ) )
                var_0.attacker = var_0.inflictor.owner;
        }
        else if ( !isplayer( var_0.attacker ) )
        {
            if ( isdefined( var_0.inflictor.owner ) )
                var_0.attacker = var_0.inflictor.owner;
        }
    }

    if ( isdefined( var_0.attacker ) && var_0.attacker != var_0.victim )
    {
        if ( isdefined( var_0.inflictor ) && var_0.inflictor == var_0.victim )
            var_0.inflictor = var_0.attacker;
    }

    var_0.attacker.assistedsuicide = 0;
}

playerkilled_precalc( var_0 )
{
    var_1 = var_0.attacker;
    var_2 = var_0.victim;
    var_3 = var_0.inflictor;
    var_4 = var_0.objweapon;
    var_2.perkoutlined = 0;
    var_2.deathspectatepos = undefined;
    var_2.deathtime = var_0.deathtime;
    var_2.attacker = var_1;
    var_2.lastdeathpos = var_2.origin;
    var_2.lastdeathangles = var_2 getplayerangles();

    if ( !isplayer( var_3 ) && isdefined( var_3.primaryweapon ) )
        var_0.primaryweapon = var_3.primaryweapon;
    else if ( isdefined( var_1 ) && isplayer( var_1 ) && !nullweapon( var_1 getcurrentprimaryweapon() ) )
        var_0.primaryweapon = createheadicon( var_1 getcurrentprimaryweapon() );
    else if ( var_4.isalternate )
        var_0.primaryweapon = var_4.basename;
    else
        var_0.primaryweapon = undefined;

    var_0.lifeid = var_2.matchdatalifeindex;

    if ( !isdefined( var_0.lifeid ) )
        var_0.lifeid = level.maxlives - 1;

    if ( scripts\mp\utility\entity::isgameparticipant( var_1 ) )
        var_0.attackerentnum = var_1 getentitynumber();
    else
        var_0.attackerentnum = -1;

    var_0.iskillstreakweapon = scripts\mp\utility\weapon::iskillstreakweapon( var_4.basename );
    var_0.weaponfullstring = createheadicon( var_4 );
    var_0.isfriendlyfire = isfriendlyfire( var_2, var_1 );
    var_0.isnukekill = var_4.basename == "nuke_mp";
    var_0.cp_is_point_in_front = scripts\mp\utility\player::proxtrigger( var_2 );
}

playerkilled_sharedlogic_early( var_0 )
{
    var_1 = var_0.attacker;
    var_2 = var_0.victim;
    var_3 = var_0.inflictor;
    var_4 = var_0.objweapon;
    var_5 = var_0.damage;
    var_6 = var_0.meansofdeath;
    var_7 = var_0.isfauxdeath;
    var_8 = var_0.hitloc;
    var_9 = var_0.direction_vec;

    if ( scripts\mp\utility\weapon::puddle_structs( var_3 ) && isdefined( var_4 ) && var_4.basename == "none" )
    {

    }

    var_2 notify( "killed_player" );
    scripts\mp\outline::outlinedisableinternalall( var_2 );
    var_2 showuidamageflash();
    var_2 setblurforplayer( 0, 0 );
    scripts\mp\outofbounds::clearoob( var_2, 1 );
    var_2 scripts\mp\equipment\molotov::showtozombies();
    var_2 scripts\mp\equipment\throwing_knife_mp::_id_12701();
    var_2 scripts\cp\killstreaks\nuke_cp::_id_124FE();

    if ( !scripts\mp\utility\game::runleanthreadmode() )
        scripts\mp\utility\print::printgameaction( "death", var_2 );

    var_2 launchshield( var_5, var_6 );
    var_2 scripts\mp\riotshield::riotshield_clear();

    if ( var_1 != var_2 )
    {
        if ( isdefined( var_1.petwatch ) )
        {
            var_1 scripts\cp_mp\pet_watch::addkillcharge();

            if ( var_6 == "MOD_EXECUTION" )
                var_1 scripts\cp_mp\pet_watch::addexecutioncharge();
            else if ( var_2 update_tracks_operational_status( var_6, var_3 ) )
                var_1 scripts\cp_mp\pet_watch::anim_weapon();
        }
        else if ( isdefined( var_2.touchedmovingplatform ) )
            var_2 scripts\cp\laser_traps\cp_laser_traps::onplayerkilled( var_1 );
    }

    if ( var_6 == "MOD_EXECUTION" )
    {
        var_1 scripts\mp\utility\stats::incpersstat( "executionKills", 1 );
        level thread scripts\mp\battlechatter_mp::trysaylocalsound( var_1, "flavor_execution", undefined, 1.0 );
    }

    var_10 = var_2 getcurrentweapon();

    if ( !var_2 scripts\mp\utility\weapon::iskillstreakweapon( var_10 ) )
    {
        scripts\mp\weapons::savetogglescopestates();
        scripts\mp\weapons::savealtstates();
    }

    var_2 scripts\mp\equipment\nvg::savenvgstate();
    scripts\mp\utility\inventory::handleweaponchangecallbacksondeath();

    if ( !var_7 )
    {
        if ( isdefined( var_2.endgame ) )
            scripts\mp\utility\player::restorebasevisionset( 2 );
        else
        {
            scripts\mp\utility\player::restorebasevisionset( 0 );
            var_2 thermalvisionoff();
        }
    }
    else
    {
        var_2.fauxdead = 1;
        var_2 sethidenameplate( 1 );
        self notify( "death" );
        self notify( "death_or_disconnect" );
    }

    scripts\mp\perks\perks::updateactiveperks( var_3, var_1, var_2, var_5, var_6, var_4, var_8, var_9 );
    scripts\mp\supers::updateactivesupers( var_3, var_1, var_2, var_5, var_6, var_4, var_8, var_9 );
    scripts\mp\equipment\wristrocket::wristrocketcooksuicideexplodecheck( var_3, var_1, var_2, var_6, var_4 );

    if ( var_6 != "MOD_HEAD_SHOT" && !var_0.isnukekill )
    {
        if ( isdefined( level.custom_death_sound ) )
            [[ level.custom_death_sound ]]( var_2, var_6, var_3 );
        else if ( var_6 != "MOD_MELEE" )
            var_2 scripts\mp\utility\sound::playdeathsound( var_6 );
    }

    if ( isdefined( level.custom_death_effect ) )
        [[ level.custom_death_effect ]]( var_2, var_6, var_3 );

    if ( var_6 != "MOD_SUICIDE" && ( scripts\mp\utility\entity::isaigameparticipant( var_2 ) || scripts\mp\utility\entity::isaigameparticipant( var_1 ) ) && isdefined( level.bot_funcs ) && isdefined( level.bot_funcs["get_attacker_ent"] ) )
    {
        var_11 = [[ level.bot_funcs["get_attacker_ent"] ]]( var_1, var_3 );

        if ( isdefined( var_11 ) )
        {
            if ( scripts\mp\utility\entity::isaigameparticipant( var_2 ) )
                var_2 botmemoryevent( "death", var_0.weaponfullstring, var_11.origin, var_2.origin, var_11 );

            if ( scripts\mp\utility\entity::isaigameparticipant( var_1 ) )
            {
                var_12 = 1;

                if ( isdefined( var_11.classname ) && ( var_11.classname == "script_vehicle" && isdefined( var_11.helitype ) || var_11.classname == "rocket" || var_11.classname == "misc_turret" ) )
                    var_12 = 0;

                if ( var_12 )
                    var_1 botmemoryevent( "kill", var_0.weaponfullstring, var_11.origin, var_2.origin, var_2 );
            }
        }
    }

    if ( ( scripts\mp\utility\game::isteamreviveenabled() || scripts\mp\utility\game::getgametype() == "br" ) && scripts\mp\flags::gameflag( "prematch_done" ) && !istrue( var_2.hvtnorevive ) && istrue( var_2.inlaststand ) )
        scripts\mp\laststand::ondeath( var_0 );

    if ( scripts\mp\utility\game::isteamreviveenabled() && scripts\mp\flags::gameflag( "prematch_done" ) )
    {
        if ( var_6 == "MOD_FALLING" && var_2 scripts\mp\teamrevive::isvalidrevivetriggerspawnposition() )
            var_2 scripts\mp\teamrevive::_id_11F9C();

        var_13 = istrue( self.isjuggernaut ) && isdefined( self.juggcontext );

        if ( !var_13 )
            var_14 = var_2 scripts\mp\class::respawnitems_saveplayeritemstostruct();
        else
            var_14 = self.juggcontext;

        var_2 scripts\mp\class::respawnitems_assignrespawnitems( var_14 );
    }

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "game", "getGameType" ) )
    {
        if ( [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "game", "getGameType" ) ]]() == "br" )
        {
            var_2 scripts\cp\helicopter\chopper_boss::_id_124F9( "alive_in_gas" );
            var_2 scripts\cp\helicopter\chopper_boss::_id_124F9( "alive_not_downed" );

            if ( istrue( level.br_prematchstarted ) && !scripts\mp\gametypes\br_public.gsc::isplayeringulag() )
                scripts\mp\gametypes\br_analytics.gsc::choppersupport_issmallpatrolmap( self, "player_death" );
        }
    }

    var_15 = scripts\engine\utility::ter_op( scripts\mp\utility\killstreak::isplayerkillstreak( var_2 ), var_2.playerproxyagent, var_2 );

    if ( var_1 scripts\mp\utility\perk::_hasperk( "specialty_scavenger" ) )
        var_15 thread scripts\mp\weapons::dropscavengerfordeath( var_1, var_0.meansofdeath );

    var_15 [[ level.weapondropfunction ]]( var_1, var_6, undefined, var_5 );

    if ( !var_7 )
    {
        var_2 scripts\mp\utility\player::updatesessionstate( "dead" );

        if ( isplayer( var_1 ) )
            var_2 setclientomnvar( "ui_killcam_killedby_id", var_1 getentitynumber() );
        else if ( var_1.classname == "trigger_hurt" || var_1.classname == "worldspawn" )
            var_2 setclientomnvar( "ui_killcam_killedby_id", var_2 getentitynumber() );
        else if ( isagent( var_1 ) )
        {
            if ( isdefined( var_1.asm ) && var_1.asm.archetype == "soldier_lw_br" )
                var_2 setclientomnvar( "ui_killcam_killedby_id", -1 );
        }
    }

    var_16 = istrue( var_2.fauxdead ) && istrue( var_2.switching_teams );

    if ( !var_16 )
    {
        if ( !isdefined( level.shouldmodelognotify ) || [[ level.shouldmodelognotify ]]( var_2 ) )
            var_2 scripts\mp\playerlogic::removefromalivecount();
    }

    if ( !isdefined( var_2.switching_teams ) )
    {
        if ( !istrue( level.ignorescoring ) && !var_0.isfriendlyfire )
        {
            var_2 scripts\mp\playerstats_interface::addtoplayerstat( 1, "combatStats", "deaths" );

            if ( var_2.pers["deaths"] < 999 )
            {
                var_2 scripts\mp\utility\stats::incpersstat( "deaths", 1 );
                var_2.deaths = var_2 scripts\mp\utility\stats::getpersstat( "deaths" );
                var_2 scripts\mp\persistence::statsetchild( "round", "deaths", var_2.deaths, level.ignorekdrstats );
            }
        }
    }

    var_17 = var_6;

    if ( isdefined( var_0.idflags ) && var_0.idflags & level.idflags_penetration && !( var_0.idflags & level.play_animation_old ) )
    {
        if ( isdefined( var_1.bulletkillsinaframecount ) && var_1.bulletkillsinaframecount == 0 )
        {
            var_17 = "MOD_PENETRATION";

            if ( isplayer( var_1 ) )
                var_1 thread scripts\mp\utility\points::monitordriverexitbutton( "penetration_kill" );
        }
    }
    else if ( ( var_4.basename == "semtex_xmike109_mp" || var_4.basename == "semtex_aalpha12_mp" ) && var_0.hitloc == "head" || var_0.hitloc == "helmet" )
        var_17 = "MOD_HEAD_SHOT";

    if ( isdefined( var_0.inflictor ) && ( istrue( var_0.inflictor.recentghostridekillcount ) || istrue( var_0.inflictor.recentc4vehiclekillcount ) ) )
        var_17 = "MOD_CRUSH";

    if ( level.gametype == "br" )
    {
        var_18 = [];

        if ( isdefined( var_2 ) )
        {
            var_19 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_2.team, var_2.squadindex );

            if ( isdefined( var_19 ) )
                var_18 = var_19;
        }

        if ( isdefined( var_1 ) && isplayer( var_1 ) )
        {
            var_20 = scripts\mp\gametypes\br_public.gsc::minshotstostage3acc( var_1.team, var_1.squadindex );

            if ( isdefined( var_20 ) && var_2.team != var_1.team )
                var_18 = scripts\engine\utility::array_combine( var_20, var_18 );
        }

        if ( var_18.size > 0 )
        {
            var_21 = scripts\engine\utility::ter_op( scripts\cp_mp\vehicles\vehicle::_id_12BE6( var_0 ), "MOD_EXPLOSIVE", var_17 );

            if ( getdvarint( "scr_br_alt_mode_zxp", 0 ) )
                var_21 = scripts\mp\gametypes\br_gametype_zxp.gsc::setradarparamsonlatejoiner( var_0, var_21 );

            obituary( var_2, var_1, var_4, var_21, var_18 );
        }
    }
    else
    {
        var_22 = var_4;

        if ( isdefined( var_17 ) && var_17 == "MOD_EXPLOSIVE" && ( !isdefined( var_22 ) || nullweapon( var_22 ) ) )
            var_22 = getcompleteweaponname( "obit_explosive" );

        var_21 = scripts\engine\utility::ter_op( scripts\cp_mp\vehicles\vehicle::_id_12BE6( var_0 ), "MOD_EXPLOSIVE", var_17 );
        obituary( var_2, var_1, var_22, var_21 );
    }

    var_2 updatedeathdetails( var_2.attackers, var_2.attackerdata, var_1 );
    var_2.lastbounty = scripts\mp\bounty::playergetbountypoints();
    var_2 scripts\mp\bounty::playerresetbountypoints();
    var_2 scripts\mp\bounty::playerresetbountystreak();
    var_2 thread scripts\mp\supers::handledeath();
    var_2 scripts\mp\battlechatter_mp::onplayerkilled( var_3, var_1, var_5, var_6, var_4, var_0.direction_vec, var_0.hitloc, var_0.psoffsettime, var_0.deathanimduration, var_0.lifeid );
    var_2 thread [[ level.onplayerkilledcommon ]]( var_3, var_1, var_5, var_6, var_4, var_0.direction_vec, var_0.hitloc, var_0.psoffsettime, var_0.deathanimduration, var_0.lifeid, scripts\mp\utility\weapon::iskillstreakweapon( var_10 ) );

    if ( isai( var_2 ) && isdefined( level.bot_funcs ) && isdefined( level.bot_funcs["on_killed"] ) )
        var_2 thread [[ level.bot_funcs["on_killed"] ]]( var_3, var_1, var_5, var_6, var_0.weaponfullstring, var_0.direction_vec, var_0.hitloc, var_0.psoffsettime, var_0.deathanimduration, var_0.lifeid );

    var_23 = ( var_0.deathtime - var_2.spawntime ) / 1000;

    if ( isdefined( var_2.pers["shortestLife"] ) )
    {
        if ( var_2.pers["shortestLife"] == 0 || var_23 < var_2.pers["shortestLife"] )
            var_2.pers["shortestLife"] = var_23;
    }

    if ( isdefined( var_2.pers["shortestLife"] ) )
    {
        if ( var_2.pers["longestLife"] == 0 || var_23 > var_2.pers["longestLife"] )
            var_2.pers["longestLife"] = var_23;
    }
}

playerkilled_logkill( var_0 )
{
    var_1 = var_0.attacker;
    var_2 = var_0.victim;
    var_3 = var_0.inflictor;
    var_4 = var_0.objweapon;
    var_5 = var_0.weaponfullstring;
    var_6 = var_0.meansofdeath;
    var_7 = var_0.lifeid;
    var_2 scripts\common\utility::_id_12965( level.endingph, var_1 );

    if ( !istrue( level.ignorescoring ) )
        var_2 scripts\common\utility::_id_12965( level.set_up_chopper_boss, var_7, var_1, var_0.damage, var_6, var_5, var_0.primaryweapon, var_0.hitloc );

    var_2 scripts\mp\analyticslog::logevent_path();
    var_2 scripts\mp\analyticslog::logevent_playerdeath( var_1, var_6, var_5 );

    if ( isplayer( var_1 ) )
        var_1 scripts\mp\analyticslog::logevent_playerkill( var_2, var_6, var_5 );

    if ( isplayer( var_1 ) && var_1 != self && ( !level.teambased || level.teambased && self.team != var_1.team ) )
    {
        var_8 = var_2.lastdroppableweaponobj;
        var_8 = scripts\mp\utility\weapon::mapweapon( var_8, var_3 );
        var_9 = createheadicon( var_8 );
        thread scripts\mp\gamelogic::trackleaderboarddeathstats( var_1, var_2, var_9, var_6 );
        thread scripts\mp\gamelogic::trackattackerleaderboarddeathstats( var_1, var_2, var_5, var_6 );
    }

    if ( isdefined( level.matchrecording_logeventmsg ) && isdefined( var_3 ) && isplayer( var_3 ) && scripts\engine\utility::isbulletdamage( var_6 ) )
    {
        var_10 = var_3.origin - var_2.origin;
        var_11 = vectornormalize( ( var_10[0], var_10[1], 0 ) );
        var_12 = anglestoforward( var_2.angles );
        var_13 = vectornormalize( ( var_12[0], var_12[1], 0 ) );
        var_14 = clamp( var_13[0] * var_11[0] + var_13[1] * var_11[1], -1.0, 1.0 );
        var_15 = acos( var_14 );

        if ( !isdefined( var_2._id_12072 ) )
            var_2._id_12072 = 0;

        if ( var_15 > 75.0 )
            var_2._id_12072++;

        var_16 = 0.0;

        if ( isdefined( var_2.engagementstarttime ) )
            var_16 = gettime() - var_2.engagementstarttime;

        if ( !isdefined( var_2.incrementalrespawnpunishmax ) )
        {
            var_2.incrementalrespawnpunishmax = 0;
            var_2.incrementalrespawnpunish = 0;
        }

        var_2.incrementalrespawnpunishmax = var_2.incrementalrespawnpunishmax + var_16;
        var_2.incrementalrespawnpunish++;
        var_2.engagementstarttime = undefined;
    }

    updatecombatrecordkillstats( var_1, var_2, var_6, var_4 );
}

playerkilled_finddeathtype( var_0 )
{
    var_1 = var_0.attacker;
    var_2 = var_0.victim;
    var_3 = var_0.inflictor;
    var_4 = var_0.meansofdeath;

    if ( var_2 isswitchingteams() )
        return "deathType_switchingTeams";
    else if ( !isplayer( var_1 ) || isplayer( var_1 ) && var_4 == "MOD_FALLING" )
        return "deathType_worldDeath";
    else if ( var_1 == var_2 || !scripts\cp_mp\utility\player_utility::playersareenemies( var_1, var_2 ) && scripts\mp\utility\entity::isdronepackage( var_3 ) )
        return "deathType_suicide";
    else if ( var_0.isfriendlyfire && var_0.objweapon.basename != "bomb_site_mp" && !var_0.isnukekill )
        return "deathType_friendlyFire";
    else if ( istrue( var_2.inlaststand ) )
        return "deathType_inLastStand";
    else
        return "deathType_normal";
}

playerkilled_handledeathtype( var_0 )
{
    var_1 = var_0.victim;
    var_0.deathtype = playerkilled_finddeathtype( var_0 );

    switch ( var_0.deathtype )
    {
        case "deathType_switchingTeams":
            handleteamchangedeath();
            break;
        case "deathType_worldDeath":
            handleworlddeath( var_0, var_0.attacker, var_0.lifeid, var_0.meansofdeath, var_0.hitloc );
            break;
        case "deathType_suicide":
            handlesuicidedeath( var_0.meansofdeath, var_0.hitloc );
            break;
        case "deathType_friendlyFire":
            handlefriendlyfiredeath( var_0.attacker, var_0.victim );
            break;
        case "deathType_inLastStand":
            handleinlaststanddeath( var_0 );
            break;
        case "deathType_normal":
            handlenormaldeath( var_0.lifeid, var_0.attacker, var_0.inflictor, var_0.objweapon, var_0.meansofdeath, var_1, var_0.iskillstreakweapon, var_0 );
            break;
        default:
            break;
    }
}

playerkilled_sharedlogic_late( var_0 )
{
    playerkilled_handlecorpse( var_0 );
    setdeathtimerlength( var_0 );
    var_1 = var_0.attacker;

    if ( isdefined( var_1.owner ) )
        var_1 = var_1.owner;

    if ( !isplayer( var_1 ) )
    {
        var_0.dokillcam = 0;
        var_0.dofinalkillcam = 0;
    }

    playerkilled_killcamsetup( var_0 );

    if ( scripts\mp\utility\game::getgametype() == "br" )
        scripts\mp\gametypes\br_analytics.gsc::branalytics_down( var_0.attacker, var_0.victim, var_0.objweapon, var_0.deathtype, var_0.meansofdeath );

    thread scripts\cp\helicopter\chopper_boss::ondeath( var_0.inflictor, var_0.attacker, var_0.damage, var_0.damageflags, var_0.meansofdeath, var_0.objweapon, var_0.hitloc, var_0.attacker.modifiers );

    if ( !scripts\mp\utility\game::runleanthreadmode() || getdvarint( "scr_runlean_playerthread_allow_logkill", 1 ) )
        playerkilled_logkill( var_0 );
}

playerkilled_handlecorpse( var_0 )
{
    var_1 = var_0.attacker;
    var_2 = var_0.victim;
    var_3 = var_0.inflictor;
    var_4 = var_0.meansofdeath;
    var_5 = var_0.objweapon;
    var_2 setscriptablepartstate( "watchVFXPlayer", "off" );
    scripts\cp_mp\vehicles\vehicle::vehicle_playerkilledbycollision( var_0 );

    if ( !isdefined( self.nocorpse ) && !istrue( var_2._id_120A6 ) )
        var_2.body = var_2 cloneplayer( var_0.deathanimduration, var_1 );

    if ( !isdefined( self.nocorpse ) && !istrue( var_2._id_120A6 ) && isdefined( var_2.body ) )
    {
        var_2.body.targetname = "player_corpse";

        if ( var_0.isnukekill )
        {

        }

        enqueueweapononkillcorpsetablefuncs( var_1, var_2, var_3, var_5, var_4 );
        var_2 thread callcorpsetablefuncs();

        if ( var_0.isfauxdeath )
        {
            var_2 playerhide();
            var_2 setsolid( 0 );
        }

        if ( !isdefined( var_2.switching_teams ) )
        {
            if ( isdefined( var_1 ) && isplayer( var_1 ) )
                thread scripts\mp\deathicons::adddeathicon( var_1, var_2.body, var_2, var_2.team, 5.0 );

            var_6 = [];

            foreach ( var_9, var_8 in level.players )
            {
                if ( isdefined( var_2 ) && istrue( scripts\cp_mp\utility\player_utility::playersareenemies( var_8, var_2 ) ) && var_8 scripts\mp\utility\perk::_hasperk( "specialty_kill_report" ) )
                    var_6[var_9] = var_8;
            }

            if ( var_6.size > 0 )
                thread scripts\mp\deathicons::addenemydeathicon( var_2.body, var_2, var_6, getdvarfloat( "perk_kill_report_icon_time" ), 1 );
        }

        var_2 thread _startragdoll( var_0.victim.body, var_0.meansofdeath, var_0.inflictor );
    }
    else if ( isdefined( var_2.nocorpse ) && !istrue( var_2._id_120A6 ) )
    {
        var_2.body = var_2 cloneplayer( var_0.deathanimduration );
        var_2.body hide( 1 );
    }

    if ( !istrue( game["isLaunchChunk"] ) )
    {
        var_2.streaktype = scripts\mp\class::loadout_getplayerstreaktype( var_2.streaktype );

        if ( scripts\mp\killstreaks\killstreaks::streaktyperesetsondeath( var_2.streaktype ) )
        {
            if ( !level.casualscorestreaks && !var_2 scripts\mp\utility\perk::_hasperk( "specialty_support_killstreaks" ) )
            {
                var_2 scripts\mp\killstreaks\killstreaks::resetstreakpoints();
                var_2 scripts\mp\killstreaks\killstreaks::resetstreakavailability();
            }
            else if ( level.casualscorestreaks )
            {
                var_10 = scripts\mp\killstreaks\killstreaks::checkcasualstreaksreset();

                if ( var_10 )
                {
                    var_2 scripts\mp\killstreaks\killstreaks::resetstreakpoints();
                    var_2 scripts\mp\killstreaks\killstreaks::resetstreakavailability();
                }
            }
        }
    }
}

_startragdoll( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0 ) )
        return;

    var_0 endon( "death" );

    if ( getdvarint( "NOONKKQQT", 0 ) && isdefined( var_1 ) && ( var_1 == "MOD_GRENADE" || var_1 == "MOD_EXPLOSIVE" || var_1 == "MOD_GRENADE_SPLASH" || var_1 == "MOD_PROJECTILE_SPLASH" ) )
        var_0 _meth_87BE( 1 );

    var_3 = var_0 getcorpseanim();
    var_4 = 0.0;

    if ( animisleaf( var_3 ) )
        var_4 = getanimlength( var_3 );

    var_5 = undefined;
    var_6 = scripts\cp_mp\utility\player_utility::getvehicle();
    var_7 = update_tracks_operational_status( var_1, var_2 );
    var_8 = undefined;
    var_9 = animhasnotetrack( var_3, "delete_corpse" );
    var_10 = animhasnotetrack( var_3, "delete_corpse_delayed" );
    var_11 = animhasnotetrack( var_3, "no_ragdoll" );
    var_12 = animhasnotetrack( var_3, "start_ragdoll" );

    if ( isdefined( var_6 ) )
    {
        var_8 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getoccupantseat( var_6, self );

        if ( var_11 || var_12 )
        {
            scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_linkseatcorpse( var_0, var_6, var_8 );
            var_0 setcorpsefalling( 0 );
            var_0.safehouse_create_loot = scripts\cp_mp\vehicles\vehicle_occupancy::_id_12CBF( var_6, var_8 );
        }

        if ( var_9 || var_10 || var_11 || var_12 )
        {
            var_13 = scripts\engine\utility::ter_op( var_11 || var_12, 0, 1 );
            var_14 = scripts\engine\utility::ter_op( var_10, var_4, var_4 + 3 );
            thread playerkilled_deletecorpseoutofvehicle( var_0, var_6, var_8, var_14, var_13 );
        }
    }

    if ( var_1 != "mod_execution" && !var_11 )
    {
        var_5 = 0;

        if ( var_12 && var_4 > 0.0 )
        {
            var_15 = getnotetracktimes( var_3, "start_ragdoll" )[0];
            var_5 = var_15 * var_4;
        }

        if ( var_7 )
            var_5 = 0;
    }

    if ( isdefined( var_5 ) )
    {
        wait( var_5 );

        if ( !isdefined( var_0 ) )
            return;

        if ( isdefined( var_6 ) )
        {
            var_0 thread ai_aggro_goal_shrink( var_6, var_8, var_9, var_10, var_5, var_4 );
            var_0 notify( "cancel_delete_corpse" );
            scripts\cp_mp\vehicles\vehicle_occupancy::_id_12CA5( var_0, var_6, var_8 );
        }
        else
        {
            if ( !var_0 isragdoll() )
            {
                if ( var_7 )
                    var_0 startragdollfromvehiclehit( var_2 );
                else
                    var_0 startragdoll();
            }

            var_0 thread activate_punchcard( var_9, var_10, var_5, var_4 );
        }
    }
}

activate_punchcard( var_0, var_1, var_2, var_3 )
{
    var_4 = self;

    if ( var_0 || var_1 )
    {
        var_5 = var_3;

        if ( var_1 )
            var_3 = var_3 + 3;

        if ( isdefined( var_2 ) )
            var_5 = var_5 - var_2;

        wait( var_5 );

        if ( !isdefined( var_4 ) )
            return;

        var_4 delete();
    }
    else if ( !scripts\mp\utility\game::isteamreviveenabled() && !isagent( self ) )
        var_4 setplayercorpsedone();
}

ai_aggro_goal_shrink( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = self;
    var_7 = getdvarint( "scr_ragdollBeforeUnlink", 1 );
    var_8 = !var_7;
    var_9 = getdvarint( "scr_ragdollImmediate", 1 );

    if ( var_7 )
    {
        if ( !var_6 isragdoll() )
            var_6 startragdoll( var_9 );
    }

    var_10 = getdvarfloat( "scr_ragdollUnlinkWait", 0.1 );

    if ( var_10 > 0 )
        wait( var_10 );

    if ( isdefined( var_6 ) )
    {
        if ( isdefined( var_6.safehouse_create_loot ) && isdefined( var_0 ) )
        {
            var_11 = ( 0, 0, 0 );
            var_12 = scripts\cp_mp\vehicles\vehicle_occupancy::_id_12CBF( var_0, var_1 );
            var_11 = var_12.origin - var_6.safehouse_create_loot.origin;
            var_13 = var_6.origin + var_11;
            var_14 = var_12.angles;
            var_6 trajectoryupdateoriginandangles( var_13, var_14 );
        }

        var_6 unlink();

        if ( var_8 )
            var_6 startragdoll( var_9 );

        var_6 thread activate_punchcard( var_2, var_3, var_4, var_5 );
    }
}

adjustactivespawnlogic( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0 ) )
        return;

    var_0 endon( "death" );
    var_3 = var_0 getcorpseanim();
    var_4 = undefined;
    var_5 = getanimlength( var_3 );
    var_6 = scripts\cp_mp\utility\player_utility::getvehicle();
    var_7 = var_1 == "MOD_CRUSH" && isdefined( var_2 ) && isdefined( var_2.vehiclename );

    if ( !var_7 )
    {
        var_8 = animhasnotetrack( var_3, "delete_corpse" );
        var_9 = animhasnotetrack( var_3, "delete_corpse_delayed" );
        var_10 = animhasnotetrack( var_3, "no_ragdoll" );
    }
    else
    {
        var_8 = 0;
        var_9 = 0;
        var_10 = 0;
    }

    if ( isdefined( var_6 ) )
    {
        var_11 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getoccupantseat( var_6, self );

        if ( var_10 )
            scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_linkseatcorpse( var_0, var_6, var_11 );

        if ( var_8 || var_9 )
        {
            var_12 = scripts\engine\utility::ter_op( var_9, var_5, var_5 + 3 );
            thread playerkilled_deletecorpseoutofvehicle( var_0, var_6, var_11, var_12 );
        }
    }

    if ( var_1 != "mod_execution" && !var_10 )
    {
        var_4 = 0;

        if ( animhasnotetrack( var_3, "start_ragdoll" ) )
        {
            var_13 = getnotetracktimes( var_3, "start_ragdoll" )[0];
            var_4 = var_13 * var_5;
        }
    }

    if ( var_7 )
        var_4 = 0;

    if ( isdefined( var_4 ) )
    {
        if ( var_4 > 0 )
            wait( var_4 );

        if ( !var_0 isragdoll() )
        {
            if ( !var_7 )
                var_0 startragdoll();
            else
                var_0 startragdollfromvehiclehit( var_2 );
        }
    }

    if ( var_8 || var_9 )
    {
        if ( !var_7 )
        {
            var_14 = var_5;

            if ( var_9 )
                var_5 = var_5 + 3;

            if ( isdefined( var_4 ) )
                var_14 = var_14 - var_4;

            wait( var_14 );
        }

        var_0 delete();
    }
    else if ( !scripts\mp\utility\game::isteamreviveenabled() )
        var_0 setplayercorpsedone();
}

playerkilled_deletecorpseoutofvehicle( var_0, var_1, var_2, var_3, var_4 )
{
    var_0 endon( "death" );
    var_0 endon( "cancel_delete_corpse" );
    scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_assignseatcorpse( var_0, var_1, var_2, var_4 );
    var_1 scripts\engine\utility::_id_12E53( var_3, "death" );

    if ( isdefined( var_0 ) )
        var_0 delete();
}

update_tracks_operational_status( var_0, var_1 )
{
    if ( var_0 != "MOD_CRUSH" )
        return 0;

    if ( !isdefined( var_1 ) )
        return 0;

    if ( !var_1 scripts\cp_mp\vehicles\vehicle::isvehicle() )
        return 0;

    return 1;
}

playerkilled_killcamsetup( var_0 )
{
    var_1 = var_0.attacker;
    var_2 = var_0.victim;
    var_3 = var_0.inflictor;
    var_4 = var_0.meansofdeath;
    var_5 = var_0.objweapon;
    var_6 = var_0.executionref;

    if ( var_0.attacker.assistedsuicide || level.teambased && isdefined( var_1.team ) && var_1.team == var_2.team )
    {
        var_0.dokillcam = 0;
        var_0.dofinalkillcam = 0;
    }

    if ( !isdefined( var_0.killcamentity ) )
        var_0.killcamentity = var_2 scripts\mp\killcam::getkillcamentity( var_1, var_3, var_5, var_4 );

    if ( isdefined( var_0.killcamentity ) )
    {
        var_0.killcamentityindex = var_0.killcamentity getentitynumber();
        var_0.killcamentitystarttime = var_0.killcamentity.birthtime;

        if ( !isdefined( var_0.killcamentitystarttime ) )
            var_0.killcamentitystarttime = 0;
    }

    if ( var_0.dokillcam )
    {
        var_2 scripts\mp\killcam::prekillcamnotify( var_1 );

        if ( isdefined( var_3 ) && isagent( var_3 ) )
        {
            var_0.inflictoragentinfo = spawnstruct();
            var_0.inflictoragentinfo.agent_type = var_3.agent_type;
            var_0.inflictoragentinfo.lastspawntime = var_3.lastspawntime;
        }
    }

    var_0.killcamentstickstovictim = var_4 == "MOD_IMPACT" || var_4 == "MOD_HEAD_SHOT" && isdefined( var_3 ) || var_4 == "MOD_GRENADE" || isdefined( var_2 ) && isdefined( var_2.stuckbygrenade ) && isdefined( var_3 ) && var_2.stuckbygrenade == var_3 || var_5.basename == "throwingknifec4_mp";

    if ( !var_0.iskillstreakweapon )
        scripts\mp\killcam::setkillcamnormalweaponomnvars( var_5, var_4, var_3, var_6 );

    if ( level.recordfinalkillcam && var_0.dofinalkillcam )
    {
        if ( ( !isdefined( level.disable_killcam ) || !level.disable_killcam ) && var_4 != "MOD_SUICIDE" && !( !isdefined( var_1 ) || var_1.classname == "trigger_hurt" || var_1.classname == "worldspawn" || var_1 == var_2 ) )
            scripts\mp\final_killcam::recordfinalkillcam( 5.0, var_2, var_1, var_0.attackerentnum, var_3, var_0.killcamentityindex, var_0.killcamentitystarttime, var_0.killcamentstickstovictim, var_5, var_0.psoffsettime, var_4 );
    }
}

playerkilled_deathscene( var_0 )
{
    var_1 = var_0.victim;
    var_1 endon( "spawned" );

    if ( !var_0.isfauxdeath )
    {
        if ( !isdefined( var_1.respawntimerstarttime ) )
            var_1.respawntimerstarttime = gettime() + var_0.deathscenetimems;

        wait( var_0.deathscenetimesec );

        if ( var_0.dokillcam )
            var_0.dokillcam = !scripts\mp\final_killcam::skipkillcamduringdeathtimer( 0.5 );

        var_1 notify( "death_delay_finished" );
    }
    else if ( !isdefined( var_1.respawntimerstarttime ) )
        var_1.respawntimerstarttime = gettime();
}

playerkilled_killcam( var_0 )
{
    var_1 = var_0;
    var_2 = var_1.victim.deathtime;

    if ( getdvarint( "scr_killcam_on_down", 1 ) && isdefined( var_1.victim.respawntokenenabled ) )
    {
        var_1 = var_1.victim.respawntokenenabled;
        var_1.victim.respawntokenenabled = undefined;
        var_1.dokillcam = var_0.dokillcam;
        var_2 = var_1.deathtime;
    }

    var_1.victim endon( "spawned" );
    var_3 = var_1.victim;
    var_4 = var_1.attacker;
    var_5 = ( gettime() - var_2 ) / 1000;

    if ( isdefined( level.show_on_minimap ) )
        [[ level.show_on_minimap ]]( var_1 );

    if ( !( isdefined( var_3.cancelkillcam ) && var_3.cancelkillcam ) && var_1.dokillcam && level.killcam && game["state"] == "playing" && !var_3 scripts\mp\utility\player::isusingremote() && !level.showingfinalkillcam )
    {
        var_6 = scripts\mp\playerlogic::timeuntilspawn( 1 );

        if ( !isdefined( var_4 ) || !isdefined( var_4.pers ) )
            var_7 = [];
        else
            var_7 = var_4.pers["loadoutPerks"];

        if ( !istrue( level.disablecopycatloadout ) )
            var_3 thread startcopycatoption( var_4 );

        var_8 = 1;
        var_3 scripts\mp\killcam::killcam( var_1.inflictor, var_1.inflictoragentinfo, var_1.attackerentnum, var_1.killcamentityindex, var_1.killcamentitystarttime, undefined, var_1.killcamentstickstovictim, var_1.objweapon, var_5, var_1.psoffsettime, var_6, scripts\mp\gamelogic::timeuntilroundend(), var_4, var_3, var_1.meansofdeath, var_7, var_8 );

        if ( !istrue( level.disablecopycatloadout ) )
            var_3 thread stopcopycatoption();

        if ( isdefined( level.successfulteam ) )
            [[ level.successfulteam ]]();
    }
}

playerkilled_spawn( var_0 )
{
    if ( isdefined( level.shouldplayerovertimedialog ) && [[ level.shouldplayerovertimedialog ]]( var_0, 1 ) )
        return;

    var_1 = var_0.victim;
    var_1 endon( "spawned" );
    var_1 endon( "disconnect" );
    var_2 = var_0.attacker;
    var_1 resetplayervariables();
    var_1 resetplayeromnvarsonspawn();

    if ( isdefined( var_2 ) )
        var_1.lastattacker = var_2;
    else
        var_1.lastattacker = undefined;

    var_1.wantsafespawn = 0;

    if ( game["state"] != "playing" )
    {
        if ( !level.showingfinalkillcam )
        {
            var_1 scripts\mp\utility\player::updatesessionstate( "dead" );
            var_1 scripts\mp\utility\player::clearkillcamstate();
        }

        return;
    }

    if ( scripts\mp\class::isvalidclass( var_1.class ) )
        var_1 thread scripts\mp\playerlogic::spawnclient();
}

playerkilled_internal( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11 )
{
    var_2 endon( "spawned" );

    if ( game["state"] == "postgame" )
        return;

    var_12 = var_2 playerkilled_initdeathdata( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11 );
    playerkilled_parameterfixup( var_12 );
    playerkilled_precalc( var_12 );
    playerkilled_sharedlogic_early( var_12 );
    playerkilled_handledeathtype( var_12 );
    playerkilled_sharedlogic_late( var_12 );
    playerkilled_deathscene( var_12 );
    playerkilled_killcam( var_12 );
    playerkilled_spawn( var_12 );
}

isswitchingteams()
{
    if ( isdefined( self.switching_teams ) )
        return 1;

    return 0;
}

isteamswitchbalanced()
{
    var_0 = scripts\mp\teams::countplayers();
    var_0[self.leaving_team]--;
    var_0[self.joining_team]++;
    return var_0[self.joining_team] - var_0[self.leaving_team] < 2;
}

isfriendlyfire( var_0, var_1 )
{
    if ( !level.teambased )
        return 0;

    if ( !isdefined( var_1 ) )
        return 0;

    if ( !isplayer( var_1 ) && !isdefined( var_1.team ) )
        return 0;

    if ( var_0.team != var_1.team )
        return 0;

    if ( var_0 == var_1 )
        return 0;

    return 1;
}

killedself( var_0 )
{
    if ( !isplayer( var_0 ) )
        return 0;

    if ( var_0 != self )
        return 0;

    return 1;
}

handleteamchangedeath()
{
    if ( !level.teambased )
        return;

    if ( self.joining_team == "spectator" || !isteamswitchbalanced() )
    {
        scripts\mp\playerstats_interface::addtoplayerstat( 1, "combatStats", "suicides" );
        scripts\mp\utility\stats::incpersstat( "suicides", 1 );
    }

    if ( isdefined( level.onteamchangedeath ) )
        [[ level.onteamchangedeath ]]( self );
}

handleworlddeath( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = var_0.victim;
    var_5.deathspectatepos = var_5.origin;

    if ( !isdefined( var_1 ) )
        return;

    scripts\mp\events::playerworlddeath( var_1, var_3 );

    if ( !isdefined( var_1.team ) || var_1.team == "neutral" )
    {
        handlesuicidedeath( var_3, var_4 );
        return;
    }

    if ( level.teambased && var_1.team != self.team || !level.teambased )
    {
        if ( isdefined( level.onnormaldeath ) && ( isplayer( var_1 ) || isagent( var_1 ) ) && var_1.team != "spectator" )
        {
            if ( !level.gameended )
                [[ level.onnormaldeath ]]( self, var_1, var_2, var_3 );
        }
    }

    if ( isagent( var_1 ) )
        var_0.dokillcam = 1;
}

handlesuicidedeath( var_0, var_1 )
{
    scripts\mp\playerstats_interface::addtoplayerstat( 1, "combatStats", "suicides" );
    scripts\mp\utility\stats::incpersstat( "suicides", 1 );
    var_2 = scripts\mp\tweakables::gettweakablevalue( "game", "suicidepointloss" );
    scripts\mp\gamescore::_setplayerscore( self, scripts\mp\gamescore::_getplayerscore( self ) - var_2 );

    if ( scripts\mp\weapons::grenadeheldatdeath() && var_0 == "MOD_SUICIDE" && var_1 == "none" )
        self.lastgrenadesuicidetime = gettime();

    if ( isdefined( level.onsuicidedeath ) )
        [[ level.onsuicidedeath ]]( self );

    self.suicidespawndelay = 1;

    if ( isdefined( self.friendlydamage ) )
        self.iwbestscore = 1;
}

handlefriendlyfiredeath( var_0, var_1 )
{
    if ( scripts\mp\utility\game::isteamreviveenabled() && scripts\mp\flags::gameflag( "prematch_done" ) )
        level thread scripts\mp\teamrevive::spawnrevivetrigger( var_1, var_1, "new_trigger_spawned", "MOD_SUICIDE" );

    var_0 thread scripts\mp\rank::scoreeventpopup( "teamkill" );
    var_0.pers["teamkills"] = var_0.pers["teamkills"] + 1.0;

    if ( scripts\mp\tweakables::gettweakablevalue( "team", "teamkillpointloss" ) )
    {
        var_2 = scripts\mp\rank::getscoreinfovalue( "kill" );
        scripts\mp\gamescore::_setplayerscore( var_0, scripts\mp\gamescore::_getplayerscore( var_0 ) - var_2 );
    }

    if ( level.maxallowedteamkills < 0 )
        return;

    var_3 = var_0 scripts\mp\playerlogic::teamkilldelay();

    if ( var_3 > 0 )
    {
        var_0.pers["teamKillPunish"] = 1;
        var_0 notify( "team_kill_punish" );

        if ( var_0 scripts\mp\utility\player::isusingremote() )
            var_0 thread scripts\mp\utility\damage::_id_1257A();
        else
            var_0 thread scripts\mp\utility\damage::_id_12579();
    }

    if ( level.friendlyfire == 4 && !istrue( var_0.hitfflimit ) && var_0.pers["teamkills"] >= level.maxallowedteamkills )
    {
        var_0.hitfflimit = 1;
        var_0 scripts\mp\hud_message::showerrormessage( "MP/FRIENDLY_FIRE_PUNISH_SWITCH" );
    }
}

handleinlaststanddeath( var_0 )
{
    var_1 = scripts\mp\utility\game::getgametype() == "br";

    if ( !istrue( var_0.victim.disable_killcam ) )
        var_0.dokillcam = 1;

    if ( !var_0.iskillstreakweapon )
        var_0.attacker thread scripts\mp\utility\points::giveunifiedpoints( "last_stand_kill", var_0.objweapon, undefined, undefined, var_0.victim );

    if ( isdefined( self.respawntagvisibility ) )
        self.respawntagvisibility update_last_stand_id();

    if ( isdefined( self.respawntagvisibility ) && var_0.attacker != self.respawntagvisibility )
    {
        thread scripts\cp\helicopter\chopper_boss::onplayerkilled( self.respawntagvisibility, self.respawntagvisibility, 0, var_0.damageflags, self.restoreweaponstates, self.return_same_module_as_next_module, var_0.hitloc, self.respawntokenclosewithgulag, self.respawntokendisabled );
        self.respawntagvisibility thread scripts\mp\rank::scoreeventpopup( "kill_confirmed" );
    }

    if ( var_1 )
        handlenormaldeath( var_0.lifeid, var_0.attacker, var_0.inflictor, var_0.objweapon, var_0.meansofdeath, self, var_0.iskillstreakweapon, var_0, 1 );

    self.respawntagvisibility = undefined;
    self.restoreweaponstates = undefined;
    self.return_same_module_as_next_module = undefined;
    self.respawntokenclosewithgulag = undefined;
    self.respawntokendisabled = undefined;
}

handlenormaldeath_sounds( var_0, var_1, var_2, var_3 )
{
    var_4 = 0;
    var_5 = var_1;

    if ( !isdefined( var_0.lastkillalertsoundtime ) )
    {
        var_0.lastkillalertsoundtime = gettime();
        var_4 = 1;
    }
    else if ( gettime() > var_0.lastkillalertsoundtime + 700 )
    {
        var_0.lastkillalertsoundtime = gettime();
        var_4 = 1;
    }

    if ( !scripts\engine\utility::isbulletdamage( var_2 ) || var_0 != var_3 )
    {
        if ( var_4 && !scripts\cp_mp\utility\game_utility::isrealismenabled() )
            var_5 playsoundtoplayer( "mp_kill_alert_quiet", var_0 );
    }
    else if ( var_2 == "MOD_HEAD_SHOT" )
    {
        var_5 playsoundtoplayer( "bullet_impact_headshot_plr", var_1 );
        var_5 playsoundtoplayer( "bullet_impact_headshot", var_0 );

        if ( var_4 )
            var_5 playsoundtoplayer( "mp_headshot_alert", var_0 );

        var_5 playsoundtoteam( "bullet_impact_headshot_npc", var_1.team, var_1 );
        var_5 playsoundtoteam( "bullet_impact_headshot_npc", var_0.team, var_0 );
    }
    else
    {
        var_5 playsoundtoteam( "mp_hit_alert_final_npc", var_1.team );
        var_5 playsoundtoteam( "mp_hit_alert_final_npc", var_0.team, var_0 );

        if ( var_4 )
            var_5 playsoundtoplayer( "mp_kill_alert", var_0 );
    }

    if ( isplayer( var_1 ) )
    {
        if ( var_2 != "MOD_EXECUTION" )
            var_1 playlocalsound( "deaths_door_death" );

        var_1 clearsoundsubmix( "deaths_door_mp", 2 );
    }
}

handlenormaldeath( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 )
{
    if ( var_4 == "MOD_GRENADE" && var_2 == var_1 )
        addattacker( var_5, var_1, var_2, var_3, var_7.damage, ( 0, 0, 0 ), var_7.direction_vec, var_7.hitloc, var_7.psoffsettime, var_4 );

    var_7.dokillcam = 1;

    if ( isai( var_5 ) && isdefined( level.bot_funcs ) && isdefined( level.bot_funcs["should_do_killcam"] ) )
        var_7.dokillcam = var_5 [[ level.bot_funcs["should_do_killcam"] ]]();

    if ( istrue( level.disable_killcam ) || istrue( var_5.disable_killcam ) )
        var_7.dokillcam = 0;

    var_1 thread scripts\mp\events::killedplayer( var_0, self, var_3, var_4, var_2, var_7 );

    if ( !istrue( level.disablestattracking ) )
    {
        var_9 = 0;
        var_10 = 0;

        if ( isdefined( var_1.modifiers ) )
        {
            var_9 = var_1.modifiers["mask"];
            var_10 = var_1.modifiers["mask2"];
        }

        var_5 thread scripts\cp\helicopter\chopper_boss::onplayerkilled( var_2, var_1, var_7.damage, var_7.damageflags, var_4, var_3, var_7.hitloc, var_9, var_10 );
        var_5.laststandbegintime = undefined;
        var_5.pers["cur_death_streak"]++;

        if ( var_4 == "MOD_HEAD_SHOT" )
        {
            var_1 scripts\mp\playerstats_interface::addtoplayerstat( 1, "combatStats", "headshots" );
            var_1 scripts\mp\utility\stats::incpersstat( "headshots", 1 );
            var_1.headshots = var_1 scripts\mp\utility\stats::getpersstat( "headshots" );

            switch ( weaponclass( var_3.basename ) )
            {
                case "rifle":
                    var_1 scripts\mp\utility\stats::incpersstat( "arHeadshots", 1 );
                    break;
                case "smg":
                    var_1 scripts\mp\utility\stats::incpersstat( "smgHeadshots", 1 );
                    break;
                case "spread":
                    var_1 scripts\mp\utility\stats::incpersstat( "shotgunHeadshots", 1 );
                    break;
                case "mg":
                    var_1 scripts\mp\utility\stats::incpersstat( "lmgHeadshots", 1 );
                    break;
                case "sniper":
                    var_1 scripts\mp\utility\stats::incpersstat( "sniperHeadshots", 1 );
                    break;
                case "rocketlauncher":
                    var_1 scripts\mp\utility\stats::incpersstat( "launcherHeadshots", 1 );
                    break;
                case "pistol":
                    var_1 scripts\mp\utility\stats::incpersstat( "pistolHeadshots", 1 );
                    break;
            }
        }

        if ( isdefined( var_2 ) && istrue( var_2.isequipment ) )
        {
            switch ( var_2.equipmentref )
            {
                case "equip_frag":
                    var_1 scripts\mp\utility\stats::incpersstat( "fragKills", 1 );
                    break;
                case "equip_semtex":
                    var_1 scripts\mp\utility\stats::incpersstat( "semtexKills", 1 );
                    break;
                case "equip_molotov":
                    var_1 scripts\mp\utility\stats::incpersstat( "molotovKills", 1 );
                    break;
                case "equip_claymore":
                    var_1 scripts\mp\utility\stats::incpersstat( "claymoreKills", 1 );
                    break;
                case "equip_throwing_knife_drill":
                case "equip_throwing_knife_electric":
                case "equip_throwing_knife_fire":
                case "equip_throwing_knife":
                    var_1 scripts\mp\utility\stats::incpersstat( "throwingKnifeKills", 1 );
                    var_1 scripts\cp_mp\pet_watch::anim_guy_keep_hidden();
                    break;
                case "equip_c4":
                    var_1 scripts\mp\utility\stats::incpersstat( "c4Kills", 1 );
                    break;
                case "equip_thermite":
                    var_1 scripts\mp\utility\stats::incpersstat( "thermiteKills", 1 );
                    break;
                case "equip_at_mine":
                    var_1 scripts\mp\utility\stats::incpersstat( "proximityMineKills", 1 );
                    break;
            }
        }
    }

    thread handlenormaldeath_sounds( var_1, var_5, var_4, var_2 );
    var_11 = var_1;

    if ( isdefined( var_1.commanding_bot ) )
        var_11 = var_1.commanding_bot;

    if ( !istrue( var_8 ) && !isfriendlyfire( var_5, var_1 ) )
    {
        if ( !istrue( level.ignorescoring ) )
        {
            var_11 update_last_stand_id();

            if ( isbehindmeleevictim( var_11, var_5 ) )
            {
                var_11 scripts\mp\utility\stats::incpersstat( "killsFromBehind", 1 );
                var_5 scripts\mp\utility\stats::incpersstat( "deathsFromBehind", 1 );
            }
        }
        else if ( isdefined( level.prematchaddkillfunc ) )
            var_11 [[ level.prematchaddkillfunc ]]();
    }

    if ( !istrue( level.disablestattracking ) )
    {
        self resetplayerconsecutivekills();

        if ( isplayer( var_1 ) )
            var_1 increaseplayerconsecutivekills();
    }

    if ( !istrue( var_11.pers["ignoreWeaponMatchBonus"] ) && ( scripts\mp\utility\weapon::iscacprimaryweapon( var_3 ) || scripts\mp\utility\weapon::iscacsecondaryweapon( var_3 ) ) )
    {
        if ( !isdefined( var_11.pers["weaponMatchBonusKills"] ) )
            var_11.pers["weaponMatchBonusKills"] = 1;
        else
            var_11.pers["weaponMatchBonusKills"]++;

        if ( var_11.pers["weaponMatchBonusKills"] > scripts\mp\weaponrank::managecontrolledcallbacktimeout() )
        {
            var_11.pers["ignoreWeaponMatchBonus"] = 1;
            var_11.pers["weaponMatchBonusKills"] = undefined;
            var_11.pers["killsPerWeapon"] = undefined;
        }
        else
        {
            if ( !isdefined( var_11.pers["killsPerWeapon"] ) )
                var_11.pers["killsPerWeapon"] = [];

            var_12 = scripts\mp\utility\weapon::getweaponrootname( var_3 );
            var_13 = 0;

            foreach ( var_16, var_15 in var_11.pers["killsPerWeapon"] )
            {
                if ( var_16 == var_12 )
                {
                    var_15.killcount++;
                    var_13 = 1;
                    break;
                }
            }

            if ( !var_13 )
            {
                var_15 = spawnstruct();
                var_15.killcount = 1;
                var_15.basename = var_3.basename;
                var_15.tac_cover_on_destroyed_by_mover = var_11.pers["killsPerWeapon"].size;
                var_11.pers["killsPerWeapon"][var_12] = var_15;
            }
        }
    }

    var_17 = var_1.pers["cur_kill_streak"];

    if ( !istrue( level.ignorescoring ) && ( isalive( var_1 ) || isdefined( var_1.streaktype ) && var_1.streaktype == "support" ) )
    {
        if ( var_4 == "MOD_MELEE" && !var_1 scripts\mp\utility\killstreak::isjuggernaut() || var_1 scripts\mp\utility\killstreak::killshouldaddtokillstreak( var_3 ) )
            var_1 registerkill( var_3, var_4, 1, var_6 );

        if ( var_1.pers["cur_kill_streak"] > var_1 scripts\mp\utility\stats::getpersstat( "longestStreak" ) )
            var_1.pers["longestStreak"] = var_1.pers["cur_kill_streak"];
    }

    var_1.pers["cur_death_streak"] = 0;

    if ( !scripts\mp\utility\game::runleanthreadmode() )
    {
        if ( !istrue( level.ignorescoring ) && var_1.pers["cur_kill_streak"] > var_1 scripts\mp\persistence::statgetchild( "round", "killStreak" ) )
            var_1 scripts\mp\persistence::statsetchild( "round", "killStreak", var_1.pers["cur_kill_streak"] );

        if ( !istrue( level.ignorescoring ) && var_1 scripts\mp\utility\game::onlinestatsenabled() )
        {
            if ( var_1.pers["cur_kill_streak"] > var_1.bestlifetimekillstreak )
            {
                var_1 scripts\mp\playerstats_interface::setplayerstat( var_1.pers["cur_kill_streak"], "bestStats", "killStreak" );
                var_1.bestlifetimekillstreak = var_1.pers["cur_kill_streak"];
            }
        }
    }

    if ( !var_6 && !scripts\mp\utility\weapon::puddle_structs( var_2 ) || scripts\mp\utility\points::propspectatekeys( var_3 ) )
    {
        var_1 thread scripts\mp\events::killeventtextpopup( "kill", 0 );
        var_18 = undefined;

        if ( scripts\mp\utility\game::getgametype() == "br" && !scripts\mp\flags::gameflag( "prematch_done" ) )
            var_18 = 100;

        var_1 thread scripts\mp\utility\points::giveunifiedpoints( "kill", var_3, var_18, undefined, var_5 );
        var_1 scripts\mp\bounty::bountyincreasestreak();
        var_1 scripts\mp\bounty::bountycollect( var_5.lastbounty, var_5.origin );

        if ( var_1 scripts\mp\utility\perk::_hasperk( "specialty_hardline" ) && isdefined( var_1.hardlineactive ) && var_1.hardlineactive["assists"] == 2 )
            var_1 thread scripts\mp\utility\points::givestreakpointswithtext( "assist_hardline", var_3, 1 );
    }

    var_19 = scripts\mp\tweakables::gettweakablevalue( "game", "deathpointloss" );

    if ( isdefined( level.gunshipplayer ) && level.gunshipplayer == var_1 )
        level notify( "ai_killed", self );

    scripts\mp\gamescore::_setplayerscore( self, scripts\mp\gamescore::_getplayerscore( self ) - var_19 );
    level notify( "player_got_killstreak_" + var_1.pers["cur_kill_streak"], var_1 );
    var_1 notify( "killed_enemy" );

    if ( istrue( var_1.inlaststand ) )
        var_1 thread scripts\mp\laststand::streamhintenabled( var_7 );

    if ( isdefined( level.onnormaldeath ) && ( isdefined( var_1.pers ) && var_1.pers["team"] != "spectator" ) && !istrue( level.ignorescoring ) )
        [[ level.onnormaldeath ]]( self, var_1, var_0, var_4, var_3, var_6 );

    if ( !var_1 scripts\mp\utility\player::isusingremote() )
        level thread scripts\mp\battlechatter_mp::trysaylocalsound( var_1, "killfirm_infantry", undefined, 0.75 );

    var_20 = undefined;

    switch ( var_5.loadoutarchetype )
    {
        case "archetype_assault":
            var_20 = "plr_killfirm_warfighter";
            break;
    }

    if ( isdefined( var_20 ) )
        level thread scripts\mp\battlechatter_mp::saytoself( var_1, var_20, "plr_killfirm_generic", 0.75 );

    if ( isdefined( self.lastattackedshieldplayer ) && isdefined( self.lastattackedshieldtime ) && self.lastattackedshieldplayer != var_1 )
    {
        if ( gettime() - self.lastattackedshieldtime < 2500 )
            self.lastattackedshieldplayer thread scripts\mp\gamescore::processshieldassist( self );
        else if ( isalive( self.lastattackedshieldplayer ) && gettime() - self.lastattackedshieldtime < 5000 )
        {
            var_21 = vectornormalize( anglestoforward( self.angles ) );
            var_22 = vectornormalize( self.lastattackedshieldplayer.origin - self.origin );

            if ( vectordot( var_22, var_21 ) > 0.925 )
                self.lastattackedshieldplayer thread scripts\mp\gamescore::processshieldassist( self );
        }
    }

    if ( !scripts\mp\utility\game::runleanthreadmode() )
        scripts\mp\gamescore::awardbuffdebuffassists( var_1, self );

    if ( isdefined( self.attackers ) )
    {
        foreach ( var_24 in self.attackers )
        {
            if ( !isdefined( scripts\mp\utility\damage::_validateattacker( var_24 ) ) )
                continue;

            if ( var_24 == var_1 )
                continue;

            if ( self == var_24 )
                continue;

            if ( isdefined( level.assists_disabled ) )
                continue;

            if ( isdefined( self.respawntagvisibility ) && self.respawntagvisibility == var_24 )
                continue;

            var_25 = undefined;

            if ( isdefined( self.attackerdata ) )
            {
                var_26 = self.attackerdata[var_24.guid];

                if ( isdefined( var_26 ) )
                    var_25 = var_26.objweapon;
            }

            var_27 = 0;

            if ( self.attackerdata[var_24.guid].damage >= 35 )
                var_27 = 1;

            if ( self.attackerdata[var_24.guid].damage >= 70 )
                var_27 = 2;

            var_24 thread scripts\mp\gamescore::processassist( self, var_25, var_27 );

            if ( var_24 scripts\mp\utility\perk::_hasperk( "specialty_boom" ) )
                var_5 thread scripts\mp\perks\perkfunctions::setboominternal( var_24 );
        }
    }

    if ( isdefined( self.markedbyboomperk ) )
    {
        foreach ( var_24 in level.players )
        {
            if ( var_24.team == self.team )
                continue;

            if ( scripts\engine\utility::array_contains( self.attackers, var_24 ) )
                continue;

            if ( scripts\engine\utility::array_contains_key( self.markedbyboomperk, var_24 scripts\mp\utility\player::getuniqueid() ) )
                var_24 thread scripts\mp\gamescore::processassist( self, var_3 );
        }
    }

    if ( level.teambased )
    {
        if ( isdefined( var_1.team ) && isdefined( level.uavmodels ) && isdefined( level.uavmodels[var_1.team] ) && level.uavmodels[var_1.team].size > 0 )
        {
            var_31 = [];

            foreach ( var_33 in level.uavmodels[var_1.team] )
            {
                if ( isdefined( var_33 ) && isdefined( var_33.owner ) && var_33.owner != var_1 && !scripts\engine\utility::array_contains( var_31, var_33.uavtype ) )
                {
                    var_34 = var_33.uavtype + "_assist";
                    var_35 = undefined;

                    if ( !isdefined( var_33.br_bunker_alt ) )
                        var_33.br_bunker_alt = 0;

                    var_36 = scripts\engine\utility::ter_op( var_33.uavtype == "directional_uav", 15, 10 );

                    if ( var_33.br_bunker_alt < var_36 )
                        var_33.owner thread scripts\mp\utility\points::giveunifiedpoints( var_34, undefined, var_35, undefined, undefined, undefined, var_33.streakinfo );
                    else
                        var_33.owner thread scripts\mp\utility\points::monitordriverexitbutton( var_34, var_35 );

                    var_33.br_bunker_alt++;

                    switch ( var_33.uavtype )
                    {
                        case "uav":
                            var_33.owner scripts\mp\utility\stats::incpersstat( "killstreakUAVAssists", 1 );
                            break;
                        case "directional_uav":
                            var_33.owner scripts\mp\utility\stats::incpersstat( "killstreakAUAVAssists", 1 );
                            break;
                    }

                    var_31[var_31.size] = var_33.uavtype;
                    scripts\cp\helicopter\chopper_boss::processuavassist( var_33.owner, var_33.uavtype );
                    var_33.owner scripts\mp\utility\script::bufferednotify( "update_uav_assist_buffered" );
                    var_33.owner combatrecordkillstreakstat( var_33.uavtype );
                }
            }
        }

        if ( isdefined( level.supportdrones ) && level.supportdrones.size > 0 )
        {
            foreach ( var_39 in level.supportdrones )
            {
                if ( level.teambased && var_39.team == var_1.team && var_39.owner != var_1 )
                {
                    if ( isdefined( var_39.enemiesmarked ) && isdefined( var_39.enemiesmarked[self getentitynumber()] ) )
                        var_39.owner thread scripts\mp\utility\points::giveunifiedpoints( var_39.streakinfo.streakname + "_assist" );
                }

                if ( var_39.helperdronetype == "scrambler_drone_guard" )
                {
                    if ( var_1 != var_39.owner )
                    {
                        var_34 = var_39.streakinfo.streakname + "_assist";

                        if ( !isdefined( var_39.br_bunker_alt ) )
                            var_39.br_bunker_alt = 0;

                        if ( var_39.br_bunker_alt < 10 )
                            var_39.owner thread scripts\mp\utility\points::giveunifiedpoints( var_34, undefined, undefined, undefined, undefined, undefined, var_39.streakinfo );
                        else
                            var_39.owner thread scripts\mp\utility\points::monitordriverexitbutton( var_34 );

                        var_39.br_bunker_alt++;
                        var_39.owner scripts\mp\utility\stats::incpersstat( "killstreakCUAVAssists", 1 );
                        continue;
                    }

                    if ( isdefined( var_39.owner ) && var_1 == var_39.owner )
                    {
                        if ( !istrue( var_1._id_11A47 ) )
                        {
                            var_1 scripts\cp\helicopter\chopper_boss::_id_11A49( "t9_ch_global_kill_scrambled_enemies_s1", 1 );
                            continue;
                        }

                        var_1._id_11A47 = undefined;
                    }
                }
            }
        }

        _applysalesdiscount::burst_fire_turret( var_1, self );

        if ( isdefined( var_1.team ) && isdefined( level.activewpzones ) && level.activewpzones.size > 0 )
        {
            var_41 = level.activewpzones[0];
            var_42 = var_41.owner;
            var_43 = var_41.team;

            if ( var_1.team == var_43 && var_1 != var_42 )
            {
                if ( istrue( var_5.wpdisorient ) || istrue( var_5.wpburning ) )
                {
                    var_34 = "white_phosphorus_assist";

                    if ( !isdefined( var_41.br_bunker_alt ) )
                        var_41.br_bunker_alt = 0;

                    if ( var_41.br_bunker_alt < 15 )
                        var_42 thread scripts\mp\utility\points::giveunifiedpoints( var_34, undefined, undefined, undefined, undefined, undefined, var_41.streakinfo );
                    else
                        var_42 thread scripts\mp\utility\points::monitordriverexitbutton( var_34 );

                    var_41.br_bunker_alt++;
                    var_42 scripts\mp\utility\stats::incpersstat( "killstreakWhitePhosphorousKillsAssists", 1 );
                }
            }
        }
    }

    if ( isplayer( var_1 ) )
    {
        var_1 setclientomnvar( "ui_killed_player", self getentitynumber() );
        var_1 setclientomnvar( "ui_killed_player_notify", gettime() );
    }
}

update_last_stand_id()
{
    var_0 = self;
    var_0 scripts\mp\playerstats_interface::addtoplayerstat( 1, "combatStats", "kills" );

    if ( var_0.pers["kills"] < 14999 )
    {
        var_0 scripts\mp\utility\stats::incpersstat( "kills", 1 );
        var_0.kills = var_0 scripts\mp\utility\stats::getpersstat( "kills" );
        var_0 scripts\mp\persistence::statsetchild( "round", "kills", var_0.kills, level.ignorekdrstats );
    }
}

callback_playerkilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    playerkilled_internal( var_0, var_1, self, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, 0 );
}

launchshield( var_0, var_1 )
{
    if ( scripts\mp\riotshield::riotshield_hasweapon() )
    {
        if ( isdefined( self.riotshieldmodel ) )
            scripts\mp\riotshield::riotshield_detach( 1 );

        if ( isdefined( self.riotshieldmodelstowed ) )
            scripts\mp\riotshield::riotshield_detach( 0 );
    }
}

resetplayervariables()
{
    self.switching_teams = undefined;
    self.joining_team = undefined;
    self.leaving_team = undefined;
    self.laststandbegintime = undefined;
    self.pers["cur_kill_streak"] = 0;
    self.killcountthislife = 0;
    self.fxrings = 0;
    self.setup_bot_hq = 0;
    self._id_120DA = 0;
    self.oil_puddles = 0;
    self.dialog_wait_think_civ = undefined;

    if ( !isdefined( self.brjugg_watchheatreduction ) )
        self.stoppingpower_init = 0;

    self.relic_nuketimer_waitforobjectives = undefined;
    self.relic_oneclip_monitor = undefined;
    self.relic_nuketimer_waitforcompleteobjectives = undefined;
    self.wait_for_player_in_gulag = undefined;
    self._id_12FE9 = undefined;
    self.init_br_jugg_setting = undefined;
    self.router_placed = undefined;
    self._id_1277B = undefined;
    scripts\mp\gameobjects::detachusemodels();
}

resetplayeromnvarsonspawn()
{
    scripts\mp\playerlogic::resetuiomnvarscommon();
    self setclientomnvar( "ui_life_kill_count", 0 );
    self setclientomnvar( "ui_shrapnel_overlay", 0 );
}

hitlocdebug( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = [];
    var_5[0] = 2;
    var_5[1] = 3;
    var_5[2] = 5;
    var_5[3] = 7;

    if ( !getdvarint( "scr_hitloc_debug" ) )
        return;

    if ( !isdefined( var_0.hitlocinited ) )
    {
        for ( var_6 = 0; var_6 < 6; var_6++ )
            var_0 setclientdvar( "ui_hitloc_" + var_6, "" );

        var_0.hitlocinited = 1;
    }

    if ( level.splitscreen || !isplayer( var_0 ) )
        return;

    var_7 = 6;

    if ( !isdefined( var_0.damageinfo ) )
    {
        var_0.damageinfo = [];

        for ( var_6 = 0; var_6 < var_7; var_6++ )
        {
            var_0.damageinfo[var_6] = spawnstruct();
            var_0.damageinfo[var_6].damage = 0;
            var_0.damageinfo[var_6].hitloc = "";
            var_0.damageinfo[var_6].bp = 0;
            var_0.damageinfo[var_6].colorindex = 0;
        }

        var_0.damageinfocolorindex = 0;
        var_0.damageinfovictim = undefined;
    }

    for ( var_6 = var_7 - 1; var_6 > 0; var_6-- )
    {
        var_0.damageinfo[var_6].damage = var_0.damageinfo[var_6 - 1].damage;
        var_0.damageinfo[var_6].hitloc = var_0.damageinfo[var_6 - 1].hitloc;
        var_0.damageinfo[var_6].bp = var_0.damageinfo[var_6 - 1].bp;
        var_0.damageinfo[var_6].colorindex = var_0.damageinfo[var_6 - 1].colorindex;
    }

    var_0.damageinfo[0].damage = var_2;
    var_0.damageinfo[0].hitloc = var_3;
    var_0.damageinfo[0].bp = var_4 & level.idflags_penetration;

    if ( isdefined( var_0.damageinfovictim ) && var_0.damageinfovictim != var_1 )
    {
        var_0.damageinfocolorindex++;

        if ( var_0.damageinfocolorindex == var_5.size )
            var_0.damageinfocolorindex = 0;
    }

    var_0.damageinfovictim = var_1;
    var_0.damageinfo[0].colorindex = var_0.damageinfocolorindex;

    for ( var_6 = 0; var_6 < var_7; var_6++ )
    {
        var_8 = "^" + var_5[var_0.damageinfo[var_6].colorindex];

        if ( var_0.damageinfo[var_6].hitloc != "" )
        {
            var_9 = var_8 + var_0.damageinfo[var_6].hitloc;

            if ( var_0.damageinfo[var_6].bp )
                var_9 = var_9 + " (BP)";

            var_0 setclientdvar( "ui_hitloc_" + var_6, var_9 );
        }

        var_0 setclientdvar( "ui_hitloc_damage_" + var_6, var_8 + var_0.damageinfo[var_6].damage );
    }
}

giverecentshieldxp()
{
    self endon( "death_or_disconnect" );
    self notify( "giveRecentShieldXP" );
    self endon( "giveRecentShieldXP" );
    self.recentshieldxp++;
    wait 20.0;
    self.recentshieldxp = 0;
}

updateinflictorstat( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0 ) || !isdefined( var_0.alreadyhit ) || !var_0.alreadyhit || !scripts\mp\utility\weapon::issinglehitweapon( var_2 ) )
        scripts\mp\gamelogic::setinflictorstat( var_0, var_1, var_2 );

    if ( isdefined( var_0 ) )
        var_0.alreadyhit = 1;
}

addattacker( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    if ( !isdefined( var_0.attackerdata ) )
        var_0.attackerdata = [];

    if ( !isdefined( var_0.attackerdata[var_1.guid] ) )
    {
        var_0.attackers[var_1.guid] = var_1;
        var_0.attackerdata[var_1.guid] = spawnstruct();
        var_0.attackerdata[var_1.guid].damage = 0;
        var_0.attackerdata[var_1.guid].attackerent = var_1;
        var_0.attackerdata[var_1.guid].firsttimedamaged = gettime();
        var_0.attackerdata[var_1.guid].hitcount = 1;
    }
    else
        var_0.attackerdata[var_1.guid].hitcount++;

    if ( scripts\mp\utility\weapon::iscacprimaryweapon( var_3 ) && !scripts\mp\utility\weapon::iscacsecondaryweapon( var_3 ) )
        var_0.attackerdata[var_1.guid].diddamagewithprimary = 1;

    if ( isdefined( var_9 ) && var_9 != "MOD_MELEE" )
        var_0.attackerdata[var_1.guid].didnonmeleedamage = 1;

    var_10 = scripts\mp\utility\weapon::getequipmenttype( var_3.basename );

    if ( isdefined( var_10 ) )
    {
        if ( var_10 == "lethal" )
            var_0.attackerdata[var_1.guid].diddamagewithlethalequipment = 1;

        if ( var_10 == "tactical" )
            var_0.attackerdata[var_1.guid].diddamagewithtacticalequipment = 1;
    }

    var_0.attackerdata[var_1.guid].damage = var_0.attackerdata[var_1.guid].damage + var_4;
    var_0.attackerdata[var_1.guid].weapon = createheadicon( var_3 );
    var_0.attackerdata[var_1.guid].objweapon = var_3;
    var_0.attackerdata[var_1.guid].vpoint = var_5;
    var_0.attackerdata[var_1.guid].vdir = var_6;
    var_0.attackerdata[var_1.guid].shitloc = var_7;
    var_0.attackerdata[var_1.guid].psoffsettime = var_8;
    var_0.attackerdata[var_1.guid].smeansofdeath = var_9;
    var_0.attackerdata[var_1.guid].attackerent = var_1;
    var_0.attackerdata[var_1.guid].lasttimedamaged = gettime();
    var_0.attackerdata[var_1.guid].inflictor = var_2;
    var_0.attackerdata[var_1.guid].show_players_breadcrumbs_to_safe_house = var_1 scripts\mp\events::lootchopper_findunoccupiedpatrolzone( 0, var_0, var_3, var_9, var_2 );
    var_0.attackerdata[var_1.guid].show_plunderboxes = var_1 scripts\mp\events::lootchopper_getattackerdata( 0, var_0, var_3, var_9, var_2 );

    if ( isdefined( var_2 ) && !isplayer( var_2 ) && isdefined( var_2.primaryweapon ) )
        var_0.attackerdata[var_1.guid].sprimaryweapon = var_2.primaryweapon;
    else if ( isdefined( var_1 ) && isplayer( var_1 ) && !nullweapon( var_1 getcurrentprimaryweapon() ) )
        var_0.attackerdata[var_1.guid].sprimaryweapon = createheadicon( var_1 getcurrentprimaryweapon() );
    else
        var_0.attackerdata[var_1.guid].sprimaryweapon = undefined;
}

addattackerkillstreak( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 )
{
    if ( !isdefined( var_0.attackerdata ) )
        var_0.attackerdata = [];

    if ( !isdefined( var_0.attackerdata[var_2.guid] ) )
    {
        var_0.attackers[var_2.guid] = var_2;
        var_0.attackerdata[var_2.guid] = spawnstruct();
        var_0.attackerdata[var_2.guid].damage = 0;
        var_0.attackerdata[var_2.guid].attackerent = var_2;
        var_0.attackerdata[var_2.guid].firsttimedamaged = gettime();
        var_0.attackerdata[var_2.guid].hitcount = 1;
    }

    var_0.attackerdata[var_2.guid].damage = var_0.attackerdata[var_2.guid].damage + var_1;
    var_0.attackerdata[var_2.guid].weapon = var_10;
    var_0.attackerdata[var_2.guid].vpoint = var_4;
    var_0.attackerdata[var_2.guid].vdir = var_3;
    var_0.attackerdata[var_2.guid].partname = var_8;
    var_0.attackerdata[var_2.guid].smeansofdeath = var_5;
    var_0.attackerdata[var_2.guid].attackerent = var_2;
    var_0.attackerdata[var_2.guid].lasttimedamaged = gettime();
    var_0.attackerdata[var_2.guid].show_players_breadcrumbs_to_safe_house = 0;
    var_0.attackerdata[var_2.guid].show_plunderboxes = 0;

    if ( isdefined( var_2 ) && isplayer( var_2 ) && !nullweapon( var_2 getcurrentprimaryweapon() ) )
        var_0.attackerdata[var_2.guid].sprimaryweapon = createheadicon( var_2 getcurrentprimaryweapon() );
    else
        var_0.attackerdata[var_2.guid].sprimaryweapon = undefined;
}

resetattackerlist()
{
    self.attackers = [];
    self.attackerdata = [];
}

removeoldattackersovertime()
{
    self endon( "damage" );
    self endon( "death_or_disconnect" );
    level endon( "game_ended" );

    if ( !isdefined( self.attackers ) )
        return;

    for (;;)
    {
        var_0 = gettime();

        foreach ( var_3, var_2 in self.attackers )
        {
            if ( isdefined( var_2 ) && var_0 - self.attackerdata[var_3].lasttimedamaged < 2000 )
                continue;

            self.attackers[var_3] = undefined;
            self.attackerdata[var_3] = undefined;
        }

        waitframe();
    }
}

callback_playerdamage( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13 )
{
    var_14 = gettime();
    callback_playerdamage_internal( var_0, var_1, self, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13 );
}

finishplayerdamagewrapper( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 )
{
    var_13 = int( min( var_2, self.health ) );

    if ( isdefined( var_1 ) && isplayer( var_1 ) )
    {
        if ( _id_12018( self ) )
        {
            var_1 scripts\mp\utility\stats::incpersstat( "damage", var_13 );

            if ( !isdefined( var_1.genuine_cypher_pieces ) )
                var_1.genuine_cypher_pieces = var_13;
            else
                var_1.genuine_cypher_pieces = var_1.genuine_cypher_pieces + var_13;

            if ( scripts\mp\codcasterclientmatchdata::shouldlogcodcasterclientmatchdata() )
            {
                if ( isplayer( var_1 ) )
                {
                    var_1 scripts\common\utility::_id_12965( level.set_up_rear_minigun, scripts\mp\utility\weapon::getweaponrootname( var_5 ), "damage", min( self.health, var_2 ), -1, var_5 );
                    scripts\mp\codcasterclientmatchdata::setcodcasterplayervalue( var_1, "damageDone", var_1 scripts\mp\utility\stats::getpersstat( "damage" ) );
                }
            }

            var_14 = scripts\mp\utility\weapon::mapweapon( var_5 );
            var_15 = createheadicon( var_14 );
            var_1 thread scripts\mp\gamelogic::threadedsetweaponstatbyname( var_15, var_13, "damage_dealt" );
        }
        else if ( isdefined( level.stop_firing_minigun ) )
            var_1 [[ level.stop_firing_minigun ]]( var_13 );
    }

    if ( scripts\mp\utility\weapon::iskillstreakweapon( var_5 ) )
    {
        if ( scripts\mp\utility\killstreak::getkillstreaknamefromweapon( var_5 ) == "precision_airstrike" && istrue( level.recently_spawned_vehicle ) )
            return;
    }

    if ( _id_12018( self ) )
    {
        var_14 = self.lastdroppableweaponobj;
        var_14 = scripts\mp\utility\weapon::mapweapon( var_14 );
        var_15 = createheadicon( var_14 );
        scripts\mp\utility\stats::incpersstat( "damageTaken", var_13 );
        thread scripts\mp\gamelogic::threadedsetweaponstatbyname( var_15, 1, "hit_markers_taken" );
        thread scripts\mp\gamelogic::threadedsetweaponstatbyname( var_15, var_13, "damage_taken" );
    }

    if ( isdefined( var_0 ) && isdefined( var_0.streakinfo ) && isdefined( var_0.streakinfo.damage ) )
        var_0.streakinfo.damage = var_0.streakinfo.damage + var_2;

    if ( scripts\mp\utility\damage::playershoulddofauxdeath() && var_2 >= self.health && !( var_3 & level.idflags_stun ) && allowfauxdeath() )
    {
        if ( !isdefined( var_7 ) )
            var_7 = ( 0, 0, 0 );

        if ( !isdefined( var_1 ) )
            var_1 = self;

        if ( !isdefined( var_0 ) )
            var_0 = var_1;

        playerkilled_internal( var_0, var_1, self, var_2, var_3, var_4, var_5, var_7, var_8, var_9, 0, 1 );
    }
    else
    {
        if ( !callback_killingblow( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 ) )
            return;

        if ( !isalive( self ) )
            return;

        if ( isplayer( self ) )
        {
            if ( !isdefined( var_11 ) )
                var_11 = "";

            if ( !isdefined( var_12 ) )
                var_12 = 0;

            if ( shoulduseexplosiveindicator( var_4 ) )
                var_3 = var_3 | level.idflags_ricochet;

            if ( scripts\mp\utility\game::getgametype() == "br" )
                var_12 = 0;

            var_16 = !( var_4 != "MOD_TRIGGER_HURT" && isdefined( self.punishwavechaseplayers ) );
            self finishplayerdamage( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, 0.0, var_10, var_11, var_12, var_16 );
        }
    }

    if ( var_4 == "MOD_EXPLOSIVE_BULLET" )
        scripts\cp_mp\utility\shellshock_utility::_shellshock( "damage_mp", "damage", getdvarfloat( "scr_csmode" ), 0, 0 );

    damageshellshockandrumble( var_0, var_5, var_4, var_2, var_3, var_1 );
}

shoulduseexplosiveindicator( var_0 )
{
    return var_0 == "MOD_GRENADE" || var_0 == "MOD_GRENADE_SPLASH" || var_0 == "MOD_EXPLOSIVE" || var_0 == "MOD_FIRE";
}

callback_playerimpaled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    thread scripts\mp\weapons::impale( var_0, self, var_1, var_2, var_3, var_4, var_5, var_6, var_7 );
}

allowfauxdeath()
{
    if ( !isdefined( level.allowfauxdeath ) )
        level.allowfauxdeath = 1;

    return level.allowfauxdeath;
}

callback_playerlaststand( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 )
{
    var_9 = isforcedlaststand( self, var_0, var_1, var_2, var_3, var_4, var_5, var_6 );

    if ( !istrue( var_9 ) )
    {
        if ( scripts\mp\utility\game::getgametype() != "br" && !istrue( self.killstreaklaststand ) && ( var_3 == "MOD_MELEE" && var_4.basename != "iw8_fists_mp" && var_4.basename != "iw8_fists_mp_ls" ) )
            return 0;

        if ( var_3 == "MOD_EXECUTION" )
            return 0;

        if ( scripts\mp\utility\game::getgametype() != "br" && scripts\mp\utility\damage::isheadshot( var_6, var_3, var_1 ) )
            return 0;

        if ( scripts\mp\utility\game::getgametype() != "br" && isexplosivedamagemod( var_3 ) )
            return 0;

        if ( istrue( self.gulagarena ) )
            return 0;

        if ( isdefined( var_1 ) && ( isdefined( var_1.classname ) && var_1.classname == "trigger_hurt" || var_1.classname == "worldspawn" ) )
            return 0;

        if ( var_1 == self && scripts\mp\utility\game::getgametype() != "br" )
            return 0;

        if ( scripts\mp\utility\game::getgametype() == "br" && scripts\mp\utility\killstreak::isjuggernaut() )
            return 0;

        if ( isdefined( level.shoulddropbrprimary ) && !self [[ level.shoulddropbrprimary ]]( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 ) )
            return 0;
    }

    if ( isdefined( level.team_revive_kbm_override_callback ) )
        self [[ level.team_revive_kbm_override_callback ]]();

    if ( self isskydiving() )
        self skydive_interrupt();

    var_10 = self.matchdatalifeindex;

    if ( !isdefined( var_10 ) )
        var_10 = level.maxlives - 1;

    if ( isdefined( var_1 ) && var_1.classname != "worldspawn" )
    {
        if ( !isplayer( var_1 ) )
        {
            if ( isdefined( var_1.owner ) && isplayer( var_1.owner ) )
                var_1 = var_1.owner;
            else if ( isdefined( var_0 ) && isdefined( var_0.owner ) && isplayer( var_0.owner ) )
                var_1 = var_0.owner;
        }

        var_11 = playerkilled_initdeathdata( var_0, var_1, self, var_2, 0, var_3, var_4, var_5, var_6, var_7, var_8, 0 );
        playerkilled_parameterfixup( var_11 );
        playerkilled_precalc( var_11 );
        var_11.laststandkill = 1;
        self.unsetbettermissionrewards = 1;

        if ( isplayer( var_1 ) && var_1 != self )
        {
            self.respawntagvisibility = var_1;
            self.restoreweaponstates = var_11.meansofdeath;
            self.return_same_module_as_next_module = var_4;
            var_1 thread scripts\mp\events::br_alt_mode_inflation( var_10, self, var_4, var_3, var_0, var_11 );
            self.respawntokenclosewithgulag = var_1.modifiers["mask"];
            self.respawntokendisabled = var_1.modifiers["mask2"];
        }

        self.lastbounty = scripts\mp\bounty::playergetbountypoints();
        scripts\mp\bounty::playerresetbountypoints();
        scripts\mp\bounty::playerresetbountystreak();
        var_11.isfriendlyfire = isfriendlyfire( self, var_1 );

        if ( getdvarint( "scr_killcam_on_down", 1 ) )
            self.respawntokenenabled = var_11;

        if ( !var_11.isfriendlyfire && var_1 != self )
        {
            if ( scripts\mp\utility\game::getgametype() == "br" )
            {
                if ( isplayer( var_1 ) && var_1 != self )
                {
                    var_1 scripts\mp\gametypes\br_public.gsc::incrementplayersdownedstat();
                    var_1 thread scripts\mp\rank::scoreeventpopup( "downed" );
                    var_12 = scripts\mp\utility\killstreak::getkillstreaknamefromweapon( var_4 );
                    var_13 = isdefined( var_12 ) && var_12 == "precision_airstrike";

                    if ( var_13 )
                    {
                        if ( isdefined( var_1.battle_tracks_setmusicstate ) )
                            var_1.battle_tracks_setmusicstate++;
                    }

                    if ( var_1 ispcplayer() && scripts\mp\flags::gameflag( "prematch_done" ) )
                        var_1 setclientomnvar( "nVidiaHighlights_events", 24 );

                    if ( getdvar( "scr_br_gametype", "" ) != "dmz" && getdvar( "scr_br_gametype", "" ) != "risk" && getdvar( "scr_br_gametype", "" ) != "rumble" && getdvar( "scr_br_gametype", "" ) != "kingslayer" && level.teamdata[self.team]["alivePlayers"].size > 0 )
                        obituary( self, var_1, var_4, "MOD_DOWN", level.teamdata[var_1.team]["alivePlayers"] );
                }

                if ( getdvar( "scr_br_gametype", "" ) != "dmz" && getdvar( "scr_br_gametype", "" ) != "risk" && getdvar( "scr_br_gametype", "" ) != "kingslayer" && getdvar( "scr_br_gametype", "" ) != "rumble" )
                {
                    if ( isdefined( level.br_circle ) && isdefined( level.br_circle.circleindex ) )
                    {
                        var_14 = min( max( 1, level.br_circle.circleindex ), 6 );
                        var_15 = "br_downEnemy_circle_" + scripts\engine\utility::string( var_14 );

                        if ( scripts\mp\rank::isregisteredevent( var_15 ) )
                            var_1 thread scripts\mp\utility\points::giveunifiedpoints( var_15, var_4 );
                    }
                }
            }
        }
    }

    scripts\common\utility::allow_vehicle_use( 0 );
    scripts\common\utility::allow_crate_use( 0 );
    scripts\common\utility::bhasthermitestucktoshield( 0 );

    if ( getdvar( "scr_br_gametype", "" ) == "dmz" || getdvar( "scr_br_gametype", "" ) == "risk" )
        scripts\mp\gametypes\br_plunder.gsc::vehicle_occupancy_errormessage( self, 0, 1 );

    if ( scripts\mp\utility\game::getgametype() == "br" )
    {
        scripts\mp\gametypes\br_analytics.gsc::branalytics_down( var_1, self, var_4, "downed", var_3 );

        if ( var_3 == "MOD_CRUSH" && isdefined( var_0.classname ) && var_0.classname == "script_vehicle" )
            self playsound( "vehicle_body_hit" );
    }

    if ( scripts\mp\gametypes\br_public.gsc::processvoqueue() )
    {
        if ( isdefined( var_1 ) && isplayer( var_1 ) && !isbot( var_1 ) )
            var_1 notify( "enemy_in_laststand" );
    }

    if ( isdefined( level.disableteamrewards ) )
    {
        if ( [[ level.disableteamrewards ]]( self ) )
            return 0;
    }

    thread scripts\mp\laststand::laststandthink();
    return 1;
}

isforcedlaststand( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = 0;

    if ( scripts\mp\utility\game::getgametype() == "br" )
    {
        if ( scripts\mp\gametypes\br_public.gsc::rear_minigun_model() )
            return 1;

        if ( isdefined( var_2 ) && isplayer( var_2 ) && var_2 != var_0 && !istrue( var_2.gulag ) )
            var_2 thread scripts\mp\hud_message::showsplash( "br_enemy_downed", undefined, var_0 );

        if ( var_4 == "MOD_FALLING" && !istrue( self.gulagarena ) )
            var_8 = 1;
    }

    if ( istrue( self.killstreaklaststand ) && isdefined( level.killstreak_laststand_func ) )
        var_8 = 1;

    return var_8;
}

gethitlocheight( var_0 )
{
    switch ( var_0 )
    {
        case "neck":
        case "helmet":
        case "head":
            return 60;
        case "left_hand":
        case "right_hand":
        case "left_arm_lower":
        case "right_arm_lower":
        case "left_arm_upper":
        case "right_arm_upper":
        case "torso_upper":
        case "gun":
            return 48;
        case "torso_lower":
            return 40;
        case "right_leg_upper":
        case "left_leg_upper":
            return 32;
        case "right_leg_lower":
        case "left_leg_lower":
            return 10;
        case "right_foot":
        case "left_foot":
            return 5;
    }

    return 48;
}

damageshellshockandrumble( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    thread scripts\mp\weapons::onweapondamage( var_0, var_1, var_2, var_3, var_5 );

    if ( !isai( self ) && scripts\common\utility::getdamagetype( var_2 ) != "bullet" )
    {
        self playrumbleonentity( "damage_heavy" );

        if ( isdefined( var_0 ) && istrue( var_0.recentghostridekillcount ) )
        {
            self playsound( "train_veh_impact_body" );

            if ( isdefined( level._id_1303C._id_12810 ) )
            {
                var_6 = level._id_1303C._id_12810[0].runplunderextractsitetimer;
                var_6 playsoundonmovingent( "veh_horn_cargotrain" );
            }
        }

        if ( scripts\mp\utility\game::getgametype() != "br" && var_2 == "MOD_TRIGGER_HURT" )
            self playsoundtoplayer( "trigger_hurt_impact_plr", self );
    }
}

callback_killingblow( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    return 1;
}

emitfalldamage( var_0 )
{
    physicsexplosionsphere( self.origin, 64, 64, 1 );
}

gamemodemodifyplayerdamage( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 )
{
    if ( isdefined( var_2 ) && isplayer( var_2 ) && isalive( var_2 ) )
    {
        if ( level.matchrules_damagemultiplier )
            var_3 = var_3 * level.matchrules_damagemultiplier;

        if ( level.matchrules_vampirism )
        {
            var_2.health = int( min( float( var_2.maxhealth ), min( var_2.health + var_3, float( var_2.health + 20 ) ) ) );
            var_2 notify( "vampirism" );
        }

        if ( scripts\cp_mp\utility\game_utility::isrealismenabled() )
        {
            var_11 = weaponclass( var_5 );

            switch ( var_8 )
            {
                case "neck":
                case "helmet":
                case "head":
                    if ( var_11 != "spread" && var_5.basename != "white_phosphorus_proj_mp" )
                        var_3 = var_3 * 2.7;

                    break;
                case "torso_upper":
                    break;
                case "left_hand":
                case "right_hand":
                case "left_arm_lower":
                case "right_arm_lower":
                case "left_arm_upper":
                case "right_arm_upper":
                case "gun":
                    break;
                case "torso_lower":
                    break;
                case "right_leg_upper":
                case "left_leg_upper":
                    break;
                case "right_foot":
                case "left_foot":
                case "right_leg_lower":
                case "left_leg_lower":
                    break;
            }
        }

        if ( istrue( game["isLaunchChunk"] ) )
        {
            if ( game["launchChunkRuleSet"] == 0 || game["launchChunkRuleSet"] == 3 )
            {
                if ( !isbot( var_1 ) )
                {
                    if ( var_4 == "MOD_PISTOL_BULLET" || var_4 == "MOD_RIFLE_BULLET" || var_4 == "MOD_HEAD_SHOT" )
                    {
                        var_12 = 80;

                        if ( !isplayer( var_2 ) || !isplayer( var_1 ) )
                            return 0;

                        var_13 = var_1 getplayerangles();
                        var_14 = var_2 getplayerangles();
                        var_15 = angleclamp180( var_13[1] - var_14[1] );

                        if ( abs( var_15 ) < var_12 )
                            var_3 = var_3 * 0.3;
                    }
                }
            }
        }

        if ( istrue( level.ninetypercent_music ) && scripts\mp\utility\game::getgametype() == "infect" && isdefined( var_5 ) )
        {
            if ( var_5.basename == "iw8_fists_mp_zmb" )
                var_3 = 135;
        }
    }

    return var_3;
}

registerkill( var_0, var_1, var_2, var_3 )
{
    self.killcountthislife++;
    self.pers["cur_kill_streak"]++;
    self setclientomnvar( "ui_life_kill_count", self.killcountthislife );
}

monitordamage( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    self endon( "death" );
    level endon( "game_ended" );
    self endon( "monitorDamageEnd" );

    if ( !isdefined( var_5 ) )
        var_5 = 0;

    self setcandamage( 1 );
    self.health = 2147483647;
    self.maxhealth = var_0;

    if ( !isdefined( self.damagetaken ) || istrue( var_6 ) )
        self.damagetaken = 0;

    if ( !isdefined( var_4 ) )
        var_4 = 0;

    for ( var_7 = 1; var_7; var_7 = monitordamageoneshot( var_8, var_9, var_10, var_11, var_12, var_13, var_14, var_15, var_16, var_17, var_21, var_1, var_2, var_3, var_4 ) )
    {
        self waittill( "damage", var_8, var_9, var_10, var_11, var_12, var_13, var_14, var_15, var_16, var_17, var_18, var_19, var_20, var_21 );
        var_17 = scripts\mp\utility\weapon::mapweapon( var_17, var_21 );

        if ( var_5 )
            self playrumbleonentity( "damage_light" );

        if ( var_4 )
        {
            var_22 = "none";

            if ( isdefined( var_17 ) )
                var_22 = createheadicon( var_17 );

            logattackerkillstreak( self, var_8, var_9, var_10, var_11, var_12, var_13, var_14, var_15, var_16, var_22 );
        }
    }
}

monitordamageend()
{
    self notify( "monitorDamageEnd" );
    self.damagetaken = undefined;
    self.attackers = undefined;
    self.wasdamaged = undefined;
    self.wasdamagedfrombulletpenetration = undefined;
    self.wasdamagedfrombulletricochet = undefined;
    self setcandamage( 0 );
}

monitordamageoneshot( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13, var_14 )
{
    if ( !isdefined( self ) )
        return 0;

    if ( isdefined( var_1 ) && isdefined( var_1.owner ) )
        var_1 = var_1.owner;

    if ( isdefined( var_1 ) && !scripts\mp\utility\entity::isgameparticipant( var_1 ) && !istrue( var_1.tank_arrive_and_fire ) )
        return 1;

    if ( isdefined( var_1 ) && !scripts\mp\weapons::friendlyfirecheck( self.owner, var_1 ) )
    {
        if ( isdefined( self.equipmentref ) && self.equipmentref == "equip_tac_cover" )
        {

        }
        else
            return 1;
    }

    var_15 = var_0;

    if ( !istrue( self._id_120B0 ) && scripts\mp\utility\damage::non_player_should_ignore_damage( var_1, var_9, var_10, var_4 ) )
        return 1;

    if ( isdefined( var_9 ) )
    {
        var_16 = scripts\cp_mp\utility\damage_utility::packdamagedata( var_1, self, var_0, var_9, var_4, var_10, var_3, var_2, var_5, var_7, var_6, var_8 );

        if ( !isdefined( var_13 ) )
            var_13 = ::modifydamage;

        var_15 = self [[ var_13 ]]( var_16 );
    }

    if ( var_15 <= 0 )
        return 1;

    self.wasdamaged = 1;
    self.damagetaken = self.damagetaken + int( var_15 );
    self.health = 2147483647;

    if ( isdefined( var_8 ) && var_8 & level.idflags_penetration )
        self.wasdamagedfrombulletpenetration = 1;

    if ( isdefined( var_8 ) && var_8 & level.idflags_ricochet )
        self.wasdamagedfrombulletricochet = 1;

    if ( istrue( var_14 ) )
        scripts\mp\killstreaks\killstreaks::killstreakhit( var_1, var_9, self, var_4, var_15 );

    if ( isdefined( var_1 ) )
    {
        if ( isplayer( var_1 ) )
            var_1 scripts\mp\damagefeedback::updatedamagefeedback( var_11 );
    }

    if ( self.damagetaken >= self.maxhealth )
    {
        var_16 = scripts\cp_mp\utility\damage_utility::packdamagedata( var_1, self, var_0, var_9, var_4, var_10, var_3, var_2, var_5, var_7, var_6, var_8 );
        self thread [[ var_12 ]]( var_16 );
        return 0;
    }

    return 1;
}

modifydamage( var_0 )
{
    var_1 = var_0.attacker;
    var_2 = var_0.objweapon;
    var_3 = var_0.meansofdeath;
    var_4 = var_0.damage;
    var_5 = var_0.idflag;

    if ( isdefined( var_5 ) && ( var_5 && level.idflags_ricochet ) )
        var_6 = 0.6 * var_4;
    else
        var_6 = var_4;

    var_6 = handleempdamage( var_2, var_3, var_6 );
    var_6 = handlemissiledamage( var_2, var_3, var_6 );
    var_6 = handlegrenadedamage( var_2, var_3, var_6 );
    var_6 = handleapdamage( var_2, var_3, var_6 );
    return var_6;
}

handlemissiledamage( var_0, var_1, var_2 )
{
    var_3 = var_2;

    switch ( var_0.basename )
    {
        case "ac130_40mm_mp":
        case "ac130_105mm_mp":
        case "iw8_la_gromeoks_mp":
        case "iw8_la_juliet_mp":
        case "iw8_la_rpapa7_mp":
        case "iw8_la_kgolf_mp":
        case "iw8_la_gromeo_mp":
        case "bomb_site_mp":
        case "iw8_la_t9launcher_mp":
        case "iw8_la_t9freefire_mp":
        case "iw8_la_t9standard_mp":
            self.largeprojectiledamage = 1;
            var_3 = self.maxhealth + 1;
            break;
        case "heli_pilot_turret_mp":
            self.largeprojectiledamage = 0;
            var_3 = var_3 * 2;
            break;
    }

    return var_3;
}

handlegrenadedamage( var_0, var_1, var_2 )
{
    if ( isexplosivedamagemod( var_1 ) )
    {
        switch ( var_0.basename )
        {
            case "c4_mp_p":
                var_2 = var_2 * 3;
                break;
            case "bouncing_betty_mp":
            case "semtex_mp":
            case "frag_grenade_mp":
                var_2 = var_2 * 4;
                break;
            default:
                if ( var_0.isalternate )
                    var_2 = var_2 * 3;

                break;
        }
    }

    return var_2;
}

handlemeleedamage( var_0, var_1, var_2 )
{
    if ( var_1 == "MOD_MELEE" )
        return self.maxhealth + 1;

    return var_2;
}

handleempdamage( var_0, var_1, var_2 )
{
    return var_2;
}

handleapdamage( var_0, var_1, var_2, var_3 )
{
    var_4 = 1.0;
    var_5 = level.armorpiercingmod - 1;

    if ( scripts\mp\utility\damage::isfmjdamage( var_0, var_1, 1 ) )
        var_4 = var_4 + var_5;

    var_6 = level.armorpiercingmodks - 1;

    if ( isdefined( var_3 ) && var_3 scripts\mp\utility\perk::_hasperk( "specialty_armorpiercingks" ) && isdefined( self.streakname ) && scripts\mp\utility\weapon::isprimaryweapon( var_0 ) && scripts\engine\utility::isbulletdamage( var_1 ) )
        var_4 = var_4 + var_6;

    return var_2 * var_4;
}

handleshotgundamage( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0 ) )
        return var_2;

    if ( var_0.basename == "none" )
        return var_2;

    if ( weaponclass( var_0 ) != "spread" )
        return var_2;

    return int( min( 150, var_2 ) );
}

onkillstreakdamaged( var_0, var_1, var_2, var_3 )
{
    var_4 = undefined;

    if ( isdefined( var_1 ) && isdefined( self.owner ) )
    {
        if ( isdefined( var_1.owner ) && isplayer( var_1.owner ) )
            var_1 = var_1.owner;

        if ( isplayer( var_1 ) && self.owner scripts\mp\utility\player::isenemy( var_1 ) )
            var_4 = var_1;
    }

    if ( isdefined( var_4 ) )
        thread scripts\cp\helicopter\chopper_boss::killstreakdamaged( var_0, self.owner, var_4, var_2, var_3 );
}

onkillstreakkilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 )
{
    var_9 = 0;
    var_10 = undefined;

    if ( isdefined( var_1 ) && isdefined( self.owner ) )
    {
        if ( isdefined( var_1.owner ) && isplayer( var_1.owner ) )
            var_1 = var_1.owner;

        if ( issentient( self.owner ) && issentient( var_1 ) )
        {
            if ( !istestclient( self.owner, var_1 ) )
                var_10 = var_1;
        }
        else if ( self.owner scripts\mp\utility\player::isenemy( var_1 ) )
            var_10 = var_1;
    }

    if ( isdefined( var_10 ) )
    {
        if ( isdefined( var_7 ) )
            var_10 scripts\mp\battlechatter_mp::killstreakdestroyed( var_0 );

        thread scripts\mp\events::killedkillstreak( var_0, var_10, var_2 );
        thread scripts\cp\helicopter\chopper_boss::killstreakkilled( var_0, self.owner, self, var_10, var_4, var_3, var_2, var_5 );
        scripts\cp_mp\gestures::processcalloutdeath( self, var_10 );
        var_9 = 1;
    }

    thread scripts\mp\events::waitandgetnewspawnpoint( var_10 );

    if ( isdefined( self.owner ) && isdefined( var_6 ) )
        self.owner scripts\mp\utility\dialog::playkillstreakdialogonplayer( var_6, undefined, undefined, self.origin );

    if ( !istrue( var_8 ) )
        self notify( "death" );

    return var_9;
}

updatedeathdetails( var_0, var_1, var_2 )
{
    var_3 = 0;

    if ( isdefined( var_2 ) && isplayer( var_2 ) && isdefined( var_2.health ) )
    {
        if ( !var_2 scripts\cp_mp\utility\player_utility::_isalive() )
            self setclientomnvar( "ui_death_details_enemy_health", 0 );
        else
            self setclientomnvar( "ui_death_details_enemy_health", int( clamp( var_2.health, 0, var_2.maxhealth ) ) / var_2.maxhealth );
    }
    else
        self setclientomnvar( "ui_death_details_enemy_health", -1 );

    if ( isdefined( var_0 ) && isdefined( var_1 ) )
    {
        foreach ( var_7, var_5 in var_0 )
        {
            if ( !isplayer( var_5 ) )
                continue;

            var_6 = var_5 getentitynumber();
            self setclientomnvar( "ui_death_details_attacker_" + var_3, var_6 );
            self setclientomnvar( "ui_death_details_hits_" + var_3, int( min( var_1[var_7].hitcount, 10 ) ) );
            var_3++;

            if ( var_3 >= 4 )
                break;
        }
    }

    for ( var_8 = var_3; var_8 < 4; var_8++ )
        self setclientomnvar( "ui_death_details_attacker_" + var_8, -1 );
}

setdeathtimerlength( var_0 )
{
    var_1 = var_0.victim;
    var_2 = 0;

    if ( var_1 scripts\mp\playerlogic::mayspawn() && !level.give_player_juggernaut )
    {
        var_3 = scripts\mp\playerlogic::timeuntilspawn( 1 );
        var_4 = 2.25;
        var_5 = 1;
        var_3 = max( var_3 + var_5, var_4 );
        var_2 = var_3 + var_0.deathscenetimesec;
    }

    var_1.death_timer_length = int( var_2 * 10 );
}

getindexfromhitloc( var_0 )
{
    switch ( var_0 )
    {
        case "torso_upper":
            return 0;
        case "torso_lower":
            return 1;
        case "helmet":
            return 2;
        case "head":
            return 3;
        case "neck":
            return 4;
        case "left_arm_upper":
            return 5;
        case "left_arm_lower":
            return 6;
        case "left_hand":
            return 7;
        case "right_arm_upper":
            return 8;
        case "right_arm_lower":
            return 9;
        case "right_hand":
            return 10;
        case "left_leg_upper":
            return 11;
        case "left_leg_lower":
            return 12;
        case "left_foot":
            return 13;
        case "right_leg_upper":
            return 14;
        case "right_leg_lower":
            return 15;
        case "right_foot":
            return 16;
        case "gun":
            return 17;
        case "none":
            return 18;
    }

    return 0;
}

showuidamageflash()
{
    self setclientomnvar( "ui_damage_event", self.damageeventcount );
}

updatecombatrecordkillstats( var_0, var_1, var_2, var_3 )
{
    if ( !scripts\mp\utility\stats::canrecordcombatrecordstats() )
        return;

    if ( isdefined( var_0 ) && isplayer( var_0 ) && var_0 != var_1 )
    {
        var_0 combatrecordarchetypekill( var_0.loadoutarchetype );

        if ( isdefined( var_3 ) )
        {
            var_4 = scripts\mp\utility\weapon::getequipmenttype( var_3.basename );

            if ( isdefined( var_4 ) && var_4 == "lethal" )
            {
                var_5 = scripts\mp\equipment::getequipmentreffromweapon( var_3 );

                if ( var_5 == "equip_throwing_knife_fire" || var_5 == "equip_throwing_knife_electric" || var_5 == "equip_throwing_knife_drill" )
                    var_5 = "equip_throwing_knife";

                var_0 combatrecordlethalkill( var_5 );
            }
            else
            {
                var_6 = scripts\mp\utility\killstreak::getkillstreaknamefromweapon( var_3 );

                if ( isdefined( var_6 ) )
                {
                    if ( isenumvaluevalid( "mp", "LethalScorestreakStatItems", var_6 ) )
                        var_0 combatrecordkillstreakstat( var_6 );
                }

                if ( istrue( var_0.personalradaractive ) )
                    var_0 combatrecordtacticalstat( "power_periphVis" );

                if ( istrue( var_0.adrenalinepoweractive ) )
                    var_0 combatrecordtacticalstat( "power_adrenaline" );
            }
        }
    }

    if ( isdefined( var_1 ) && isplayer( var_1 ) )
        var_1 combatrecordarchetypedeath( var_1.loadoutarchetype );
}

combatrecordarchetypekill( var_0 )
{
    if ( !scripts\mp\utility\stats::canrecordcombatrecordstats() )
        return;

    var_1 = self getplayerdata( "mp", "playerStats", "archetypeStats", var_0, "kills" );
    self setplayerdata( "mp", "playerStats", "archetypeStats", var_0, "kills", var_1 + 1 );
}

combatrecordarchetypedeath( var_0 )
{
    if ( !scripts\mp\utility\stats::canrecordcombatrecordstats() )
        return;

    var_1 = self getplayerdata( "mp", "playerStats", "archetypeStats", var_0, "deaths" );
    self setplayerdata( "mp", "playerStats", "archetypeStats", var_0, "deaths", var_1 + 1 );
}

evaluatefobspawns( var_0 )
{
    if ( !scripts\mp\utility\stats::canrecordcombatrecordstats() )
        return;

    var_1 = scripts\mp\equipment::isequipmentlethal( var_0 );

    if ( var_0 == "equip_throwing_knife_fire" || var_0 == "equip_throwing_knife_electric" || var_0 == "equip_throwing_knife_drill" )
        var_0 = "equip_throwing_knife";

    if ( var_1 )
    {
        var_2 = self getplayerdata( "mp", "playerStats", "lethalStats", var_0, "uses" );
        self setplayerdata( "mp", "playerStats", "lethalStats", var_0, "uses", var_2 + 1 );
    }
    else
    {
        var_2 = self getplayerdata( "mp", "playerStats", "tacticalStats", var_0, "uses" );
        self setplayerdata( "mp", "playerStats", "tacticalStats", var_0, "uses", var_2 + 1 );
    }
}

combatrecordlethalkill( var_0 )
{
    if ( !scripts\mp\utility\stats::canrecordcombatrecordstats() )
        return;

    var_1 = self getplayerdata( "mp", "playerStats", "lethalStats", var_0, "kills" );
    self setplayerdata( "mp", "playerStats", "lethalStats", var_0, "kills", var_1 + 1 );
}

combatrecordtacticalstat( var_0, var_1 )
{
    if ( !scripts\mp\utility\stats::canrecordcombatrecordstats() || !isplayer( self ) )
        return;

    if ( !isdefined( var_1 ) )
        var_1 = 1;

    var_2 = self getplayerdata( "mp", "playerStats", "tacticalStats", var_0, "extraStat1" );
    self setplayerdata( "mp", "playerStats", "tacticalStats", var_0, "extraStat1", var_2 + var_1 );
}

combatrecordkillstreakstat( var_0 )
{
    if ( !scripts\mp\utility\stats::canrecordcombatrecordstats() )
        return;

    var_1 = scripts\mp\utility\stats::getstreakrecordtype( var_0 );

    if ( !isdefined( var_1 ) )
        return;

    var_2 = self getplayerdata( "mp", "playerStats", var_1, var_0, "extraStat1" );
    self setplayerdata( "mp", "playerStats", var_1, var_0, "extraStat1", var_2 + 1 );
}

enqueuecorpsetablefunc( var_0, var_1 )
{
    if ( !isdefined( self.corpsetablefuncs ) )
    {
        self.corpsetablefuncs = [];
        self.corpsetablefunccounts = [];
    }

    if ( !isdefined( self.corpsetablefuncs[var_0] ) )
    {
        self.corpsetablefuncs[var_0] = var_1;
        self.corpsetablefunccounts[var_0] = 0;
    }

    self.corpsetablefunccounts[var_0]++;
}

dequeuecorpsetablefunc( var_0 )
{
    if ( !isdefined( self.corpsetablefuncs ) )
        return;

    if ( !isdefined( self.corpsetablefuncs[var_0] ) )
        return;

    self.corpsetablefunccounts[var_0]--;

    if ( self.corpsetablefunccounts[var_0] <= 0 )
    {
        self.corpsetablefuncs[var_0] = undefined;
        self.corpsetablefunccounts[var_0] = undefined;
    }
}

callcorpsetablefuncs()
{
    if ( !isdefined( self.corpsetablefuncs ) )
        return;

    var_0 = self.body;

    foreach ( var_2 in self.corpsetablefuncs )
        self thread [[ var_2 ]]( var_0 );

    thread clearcorpsetablefuncs();
}

clearcorpsetablefuncs()
{
    self notify( "clearCorpsetableFuncs" );
    self.corpsetablefuncs = undefined;
    self.corpsetablefunccounts = undefined;
}

enqueueweapononkillcorpsetablefuncs( var_0, var_1, var_2, var_3, var_4 )
{
    if ( scripts\mp\weapons::quarry_fight_across( var_3 ) )
        enqueuecorpsetablefunc( "8bitDeath", scripts\mp\weapons::spawn_module_intro3 );
    else if ( scripts\mp\weapons::quarry_fight_across_internal( var_3 ) )
        enqueuecorpsetablefunc( "teslaDeath", scripts\mp\weapons::spawn_module_intro4 );
}

startcopycatoption( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "stop_copy_cat_option" );

    if ( !isdefined( var_0 ) || !isplayer( var_0 ) || isbot( self ) )
        return;

    while ( self copyloadoutbuttonpressed() )
        waitframe();

    while ( !self copyloadoutbuttonpressed() )
        waitframe();

    scripts\mp\class::copyclassfornextlife( var_0 );
}

stopcopycatoption()
{
    self notify( "stop_copy_cat_option" );
}

propmoveunlock( var_0 )
{
    var_1 = 0;

    if ( isdefined( var_0 ) && isdefined( var_0.code_classname ) && var_0.code_classname == "scriptable" )
    {
        switch ( var_0.classname )
        {
            case "scriptable_rp_propane_tank_long_01":
                var_1 = 1;
                break;
        }
    }

    return var_1;
}

_id_12018( var_0 )
{
    if ( istrue( level.getwincost ) )
        return 0;

    if ( isdefined( level.getxmike109ammotype ) && ![[ level.getxmike109ammotype ]]( var_0 ) )
        return 0;

    return 1;
}

scriptedspawns( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( var_0 ) || !isdefined( var_1 ) || !isdefined( var_3 ) )
        return;

    var_4 = var_2 >= var_0.health;
    var_1 scripts\common\utility::_id_12965( level.set_up_rear_minigun, scripts\mp\utility\weapon::getweaponrootname( var_1.currentweapon ), "friendly_fire_damage", int( min( var_2, var_0.health ) ), -1, var_1.currentweapon );
    var_0 dlog_recordplayerevent( "dlog_event_friendly_fire", [ "attacker", var_1, "damage", var_2, "is_fatal_damage", var_4, "damage_method", var_3 ] );
}

raid_umike_unload_func( var_0 )
{
    if ( !isscriptedagent( var_0 ) )
        return 0;

    return 1;
}

_id_11D04( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0.unittype ) || var_2 == "MOD_MELEE " )
        return var_1;

    switch ( var_0.unittype )
    {
        case "juggernaut":
            return int( var_1 * 0.3 );
        case "soldier":
            return int( var_1 * 0.4 );
    }

    return var_1;
}
