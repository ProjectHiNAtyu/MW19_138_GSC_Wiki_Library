// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    setdvarifuninitialized( "scr_ascender_speed", 360.0 );
    setdvarifuninitialized( "scr_descender_speed", 460.0 );
    setdvarifuninitialized( "scr_descender_speed_cp", 540.0 );
    level.ascendstarts = scripts\engine\utility::getstructarray( "ascend_begin", "script_noteworthy" );
    level.descendstarts = scripts\engine\utility::getstructarray( "descend_begin", "script_noteworthy" );
    level.ascendstructs = [];

    foreach ( var_1 in level.ascendstarts )
        markupascenderstruct( var_1, 1 );

    foreach ( var_1 in level.descendstarts )
        markupascenderstruct( var_1, 0 );

    initanimtree();
    scripts\engine\scriptable::_id_11CDB( "ascender", ::ascenderscriptableused );
}

lootcachesopened()
{
    return 360.0;
}

lootchopper_cleanup()
{
    return 460.0;
}

lootchopper_createobjective()
{
    return 540.0;
}

lootcachesearchparams()
{
    return 0.4;
}

lootcachespawncontents()
{
    return 0.15;
}

lootchopper_finddroplocation()
{
    return 12100;
}

lootchopper_droploot()
{
    return 72;
}

#using_animtree("script_model");

initanimtree()
{
    level.scr_animtree["player"] = #animtree;
    level.scr_anim["player"]["ascender_up_in"] = %vm_eq_ascender_up_get_on_plr;
    level.scr_animname["player"]["ascender_up_in"] = "vm_eq_ascender_up_get_on_plr";
    level.scr_eventanim["player"]["ascender_up_in"] = "ascender_up_in";
    level.scr_anim["player"]["ascender_up_loop"] = %vm_eq_ascender_up_loop_plr;
    level.scr_animname["player"]["ascender_up_loop"] = "vm_eq_ascender_up_loop_plr";
    level.scr_eventanim["player"]["ascender_up_loop"] = "ascender_up_loop";
    level.scr_anim["player"]["ascender_up_out"] = %vm_eq_ascender_up_get_off_plr;
    level.scr_animname["player"]["ascender_up_out"] = "vm_eq_ascender_up_get_off_plr";
    level.scr_eventanim["player"]["ascender_up_out"] = "ascender_up_out";
    level.scr_anim["player"]["ascender_down_in"] = %vm_eq_ascender_down_get_on_plr;
    level.scr_animname["player"]["ascender_down_in"] = "vm_eq_ascender_down_get_on_plr";
    level.scr_eventanim["player"]["ascender_down_in"] = "ascender_down_in";
    level.scr_anim["player"]["ascender_down_loop"] = %vm_eq_ascender_down_loop_plr;
    level.scr_animname["player"]["ascender_down_loop"] = "vm_eq_ascender_down_loop_plr";
    level.scr_eventanim["player"]["ascender_down_loop"] = "ascender_down_loop";
    level.scr_anim["player"]["ascender_down_out"] = %vm_eq_ascender_down_get_off_plr;
    level.scr_animname["player"]["ascender_down_out"] = "vm_eq_ascender_down_get_off_plr";
    level.scr_eventanim["player"]["ascender_down_out"] = "ascender_down_out";
    level.scr_animtree["device"] = #animtree;
    level.scr_anim["device"]["ascender_up_in"] = %vm_eq_ascender_up_get_on_ascender;
    level.scr_animname["device"]["ascender_up_in"] = "vm_eq_ascender_up_get_on_ascender";
    level.scr_eventanim["device"]["ascender_up_in"] = "ascender_up_in";
    level.scr_anim["device"]["ascender_up_loop"] = %vm_eq_ascender_up_loop_ascender;
    level.scr_animname["device"]["ascender_up_loop"] = "vm_eq_ascender_up_loop_ascender";
    level.scr_eventanim["device"]["ascender_up_loop"] = "ascender_up_loop";
    level.scr_anim["device"]["ascender_up_out"] = %vm_eq_ascender_up_get_off_ascender;
    level.scr_animname["device"]["ascender_up_out"] = "vm_eq_ascender_up_get_off_ascender";
    level.scr_eventanim["device"]["ascender_up_out"] = "ascender_up_out";
    level.scr_anim["device"]["ascender_down_in"] = %vm_eq_ascender_down_get_on_ascender;
    level.scr_animname["device"]["ascender_down_in"] = "vm_eq_ascender_down_get_on_ascender";
    level.scr_eventanim["device"]["ascender_down_in"] = "ascender_down_in";
    level.scr_anim["device"]["ascender_down_loop"] = %vm_eq_ascender_down_loop_ascender;
    level.scr_animname["device"]["ascender_down_loop"] = "vm_eq_ascender_down_loop_ascender";
    level.scr_eventanim["device"]["ascender_down_loop"] = "ascender_down_loop";
    level.scr_anim["device"]["ascender_down_out"] = %vm_eq_ascender_down_get_off_ascender;
    level.scr_animname["device"]["ascender_down_out"] = "vm_eq_ascender_down_get_off_ascender";
    level.scr_eventanim["device"]["ascender_down_out"] = "ascender_down_out";
    level.scr_animtree["device"] = #animtree;
    level.scr_anim["device"]["ascender_up_in_wm"] = %wm_eq_ascender_up_get_on_ascender;
    level.scr_animname["device"]["ascender_up_in_wm"] = "wm_eq_ascender_up_get_on_ascender";
    level.scr_eventanim["device"]["ascender_up_in_wm"] = "ascender_up_in";
    level.scr_anim["device"]["ascender_up_loop_wm"] = %wm_eq_ascender_up_loop_ascender;
    level.scr_animname["device"]["ascender_up_loop_wm"] = "wm_eq_ascender_up_loop_ascender";
    level.scr_eventanim["device"]["ascender_up_loop_wm"] = "ascender_up_loop";
    level.scr_anim["device"]["ascender_up_out_wm"] = %wm_eq_ascender_up_get_off_ascender;
    level.scr_animname["device"]["ascender_up_out_wm"] = "wm_eq_ascender_up_get_off_ascender";
    level.scr_eventanim["device"]["ascender_up_out_wm"] = "ascender_up_out";
    level.scr_anim["device"]["ascender_down_in_wm"] = %wm_eq_ascender_down_get_on_ascender;
    level.scr_animname["device"]["ascender_down_in_wm"] = "wm_eq_ascender_down_get_on_ascender";
    level.scr_eventanim["device"]["ascender_down_in_wm"] = "ascender_down_in";
    level.scr_anim["device"]["ascender_down_loop_wm"] = %wm_eq_ascender_down_loop_ascender;
    level.scr_animname["device"]["ascender_down_loop_wm"] = "wm_eq_ascender_down_loop_ascender";
    level.scr_eventanim["device"]["ascender_down_loop_wm"] = "ascender_down_loop";
    level.scr_anim["device"]["ascender_down_out_wm"] = %wm_eq_ascender_down_get_off_ascender;
    level.scr_animname["device"]["ascender_down_out_wm"] = "wm_eq_ascender_down_get_off_ascender";
    level.scr_eventanim["device"]["ascender_down_out_wm"] = "ascender_down_out";
}

markupascenderstruct( var_0, var_1 )
{
    var_2 = scripts\engine\utility::getstruct( var_0.target, "targetname" );
    var_3 = scripts\engine\utility::getstruct( var_2.target, "targetname" );
    level.ascendstructs[var_0.targetname] = var_0;
    var_0.ascendstructend = var_2;
    var_0.ascendstructout = var_3;
    var_0.inuse = 0;
    var_0.exitangle = var_0.angles + ( 0, 180, 0 );
    var_0.startangle = var_0.angles;
    var_0.dir = var_1;

    if ( var_0.targetname == "pf57045_auto38" || var_0.targetname == "pf57045_auto41" )
    {
        var_0.origin = var_0.origin + ( 0, 0, 8 );
        var_2.origin = var_2.origin + ( 0, 0, 8 );
        var_3.origin = var_3.origin + ( 0, 0, 8 );
    }
}

ascenderscriptableused( var_0, var_1, var_2, var_3, var_4 )
{
    if ( var_2 != "off" )
    {
        if ( istrue( var_3.usingascender ) )
            return;

        thread ascenderuse( var_0, var_3 );
    }
}

getdropposition()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self notify( "denyAscendMessage" );
    self endon( "denyAscendMessage" );
    self playsoundtoplayer( "ui_select_purchase_deny", self );

    if ( isdefined( level.bot_modify_behavior_from_loadout ) )
        self [[ level.bot_modify_behavior_from_loadout ]]( "ascender_blocked_generic", 4 );
    else
    {
        scripts\mp\utility\lower_message::setlowermessageomnvar( 80 );
        wait 4;
        scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
    }
}

getexpectednumberofteams()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self notify( "denyAscendMessageLastStand" );
    self endon( "denyAscendMessageLastStand" );
    self playsoundtoplayer( "ui_select_purchase_deny", self );

    if ( isdefined( level.bot_modify_behavior_from_loadout ) )
        self [[ level.bot_modify_behavior_from_loadout ]]( "ascender_blocked_laststand", 4 );
    else
    {
        scripts\mp\utility\lower_message::setlowermessageomnvar( 55 );
        wait 4;
        scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
    }
}

denyascendmessage()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self notify( "denyAscendMessage" );
    self endon( "denyAscendMessage" );
    self playsoundtoplayer( "ui_select_purchase_deny", self );

    if ( isdefined( level.bot_modify_behavior_from_loadout ) )
        self [[ level.bot_modify_behavior_from_loadout ]]( "ascender_blocked", 4 );
    else
    {
        scripts\mp\utility\lower_message::setlowermessageomnvar( 43 );
        wait 4;
        scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
    }
}

ascenddeathlistener( var_0 )
{
    level endon( "game_ended" );
    self endon( "ascend_complete" );
    self endon( "ascend_solo_complete" );
    self endon( "ascender_cancel" );
    self waittill( "death_or_disconnect" );

    if ( isdefined( self ) )
        self stopanimscriptsceneevent();

    var_0 cleanupascenduse( self );
}

endascenderanim( var_0, var_1, var_2, var_3 )
{
    var_0 endon( "death_or_disconnect" );
    var_0 endon( "ascender_cancel" );

    if ( var_1 )
        var_4 = "ascender_up_out";
    else
        var_4 = "ascender_down_out";

    thread scripts\mp\anim::anim_player_solo( var_0, var_0.player_rig, var_4 );
    scripts\common\anim::anim_single_solo( var_3, var_4 + "_wm" );
}

startascenderanim( var_0, var_1, var_2, var_3 )
{
    var_0 endon( "death_or_disconnect" );
    var_0 endon( "ascender_cancel" );
    var_0 thread scripts\mp\utility\infilexfil::infil_player_rig_updated( "player", var_0.origin, var_0.angles );
    var_2.animname = "device";
    var_2 scripts\common\anim::setanimtree();
    var_3.animname = "device";
    var_3 scripts\common\anim::setanimtree();
    var_3 hide();
    var_4 = ( 1, 0, 0 );

    if ( var_1 )
    {
        var_5 = "TAG_ACCESSORY_RIGHT";
        var_6 = "ascender_up_in";
        var_4 = rotatevector( ( -40.9464, 22.9807, 0 ), self.angles );
    }
    else
    {
        var_5 = "TAG_ACCESSORY_LEFT";
        var_6 = "ascender_down_in";
        var_4 = rotatevector( ( -42.2388, -23.4915, 0 ), self.angles );
    }

    var_0.player_rig moveto( self.origin + var_4, 0.4, 0.1, 0.1 );
    var_7 = vectornormalize( var_4 * -1 );
    var_8 = vectortoanglessafe( var_7, ( 0, 0, 1 ) );
    var_0.player_rig rotateto( var_8, 0.4, 0.1, 0.1 );
    var_9 = gettime();
    var_0 scripts\mp\utility\infilexfil::givegunless();
    var_10 = gettime();
    var_11 = 0.4 - ( var_10 - var_9 ) / 1000.0;
    var_12 = max( 0, var_11 );
    wait( var_12 );
    var_3 show();
    var_3 hidefromplayer( var_0 );
    var_0.player_rig linkto( self, "tag_origin", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    var_2 linkto( var_0.player_rig, var_5, ( 0, 0, 0 ), ( 0, 0, 0 ) );
    var_3 linkto( self, "tag_origin", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    var_0.player_rig showonlytoplayer( var_0 );
    scripts\common\anim::anim_first_frame_solo( var_0.player_rig, var_6 );
    thread scripts\mp\anim::anim_player_solo( var_0, var_0.player_rig, var_6 );
    thread scripts\common\anim::anim_single_solo( var_3, var_6 + "_wm" );
    var_13 = getanimlength( level.scr_anim["player"][var_6] );
    wait( var_13 );
}

loopwaitanim( var_0, var_1, var_2, var_3 )
{
    self endon( "death_or_disconnect" );
    self endon( "ascender_loop_done" );
    self endon( "ascender_cancel" );

    if ( var_3 )
        var_4 = "ascender_up_loop";
    else
        var_4 = "ascender_down_loop";

    var_5 = getanimlength( level.scr_anim["player"][var_4] );

    for (;;)
    {
        if ( !isdefined( self ) )
            break;

        var_0 thread scripts\mp\anim::anim_player_solo( self, self.player_rig, var_4 );
        var_0 scripts\common\anim::anim_single_solo( var_2, var_4 + "_wm" );

        if ( !isdefined( var_5 ) || var_5 == 0 )
            break;

        wait( var_5 );
    }
}

delay_delete_tv_station_boss_icon( var_0, var_1 )
{
    if ( var_1 isswitchingweapon() )
    {
        var_1 thread getdropposition();
        return 0;
    }

    if ( var_1 scripts\cp_mp\utility\player_utility::isinvehicle() )
    {
        var_1 thread getdropposition();
        return 0;
    }

    if ( istrue( var_1.playlandingbreath ) )
    {
        var_1 thread getdropposition();
        return 0;
    }

    if ( istrue( var_1.inlaststand ) )
    {
        var_1 thread getexpectednumberofteams();
        return 0;
    }

    if ( istrue( var_1.isreviving ) )
        return 0;

    if ( isdefined( level.cleanupswaploadoutflags ) && isdefined( level.cleanupswaploadoutflags.name ) && getdvarint( "scr_br_alt_mode_zxp", 0 ) )
    {
        var_2 = istrue( var_1.iszombie ) && isdefined( var_1.registerpuzzleinteractions );
        var_3 = var_1 isgestureplaying( "ges_zombie_superjumpcharge" ) || var_1 isgestureplaying( "ges_zombie_superjump" );

        if ( var_2 || var_3 )
        {
            var_1 thread getdropposition();
            return 0;
        }
    }

    if ( !var_1 scripts\common\utility::plunderrepositories() )
    {
        var_1 thread getdropposition();
        return 0;
    }

    if ( var_1 isskydiving() )
        return 0;

    var_4 = level.ascendstructs[var_0.target];

    if ( !isdefined( var_4 ) )
        return 0;

    if ( var_4.inuse )
    {
        var_1 thread denyascendmessage();
        return 0;
    }

    if ( isdefined( var_4._id_12169 ) && istrue( var_4._id_12169.inuse ) )
    {
        var_1 thread denyascendmessage();
        return 0;
    }

    return 1;
}

ascenderuse( var_0, var_1 )
{
    level endon( "game_ended" );
    var_1 endon( "death_or_disconnect" );
    var_1 endon( "ascender_cancel" );

    if ( !delay_delete_tv_station_boss_icon( var_0, var_1 ) )
        return;

    var_2 = level.ascendstructs[var_0.target];
    var_1.shouldskiplaststand = 1;
    var_2.ascender = spawn( "script_model", var_2.origin );
    var_2.ascender setmodel( "tag_origin" );
    var_2.scriptable = var_0;

    if ( var_1 getstance() != "stand" )
        var_1 setstance( "stand" );

    var_1 scripts\common\utility::allow_execution_victim( 0 );
    var_1 allowmelee( 0 );
    var_1 allowads( 0 );
    var_1 allowfire( 0 );

    if ( istrue( var_1.isjuggernaut ) )
    {
        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "juggernaut", "canUseWeaponPickups" ) )
        {
            var_3 = var_1 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "juggernaut", "canUseWeaponPickups" ) ]]();

            if ( istrue( var_3 ) )
                var_1 disableweaponswitch();
        }
    }
    else
    {
        var_1 disableoffhandweapons();
        var_1 scripts\common\utility::allow_killstreaks( 0 );
        var_1 disableweaponswitch();
    }

    var_2.ascender scripts\cp_mp\ent_manager::registerspawncount( 2 );
    var_2.inuse = 1;
    var_1.usingascender = 1;
    var_1 scripts\common\utility::allow_usability( 0 );
    var_4 = var_2.ascendstructend;
    var_5 = var_2.ascendstructout;
    var_2.ascender dontinterpolate();
    var_2.ascender.origin = var_2.origin;
    var_2.ascender.angles = var_2.angles;
    var_6 = spawn( "script_model", var_2.origin );
    var_6 setmodel( "misc_wm_ascender" );
    var_6 showonlytoplayer( var_1 );
    var_7 = spawn( "script_model", var_2.origin );
    var_7 setmodel( "misc_wm_ascender" );
    var_7 hidefromplayer( var_1 );
    var_1.bot_nags = var_2;
    var_1.bot_loadout_team = var_6;
    var_1.bot_match_rules_invalidate_loadout = var_7;
    var_1 thread ascenddeathlistener( var_2 );
    var_2.ascender startascenderanim( var_1, var_2.dir, var_6, var_7 );
    var_2.ascender playloopsound( "br_auto_ascender_device_lp_npc" );
    var_1 thread loopwaitanim( var_2.ascender, var_6, var_7, var_2.dir );
    var_8 = distance( var_4.origin, var_2.origin );

    if ( !var_2.dir )
    {
        if ( scripts\common\utility::iscp() )
            var_9 = getdvarfloat( "scr_descender_speed_cp", lootchopper_createobjective() );
        else
            var_9 = getdvarfloat( "scr_descender_speed", lootchopper_cleanup() );
    }
    else
        var_9 = getdvarfloat( "scr_ascender_speed", lootcachesopened() );

    var_10 = var_8 / var_9;
    var_11 = lootcachesearchparams() * var_10;
    var_12 = lootcachespawncontents() * var_10;
    var_2.ascender moveto( var_4.origin, var_10, var_11, var_12 );
    wait( var_10 );
    var_2.ascender stoploopsound( "br_auto_ascender_device_lp_npc" );
    var_1 notify( "ascender_loop_done" );
    var_2.ascender endascenderanim( var_1, var_2.dir, var_6, var_7 );
    var_2 cleanupascenduse( var_1 );
    var_1 notify( "ascend_complete" );
}

cleanupascenduse( var_0 )
{
    self.inuse = 0;

    if ( isdefined( var_0 ) )
    {
        var_0.usingascender = 0;
        var_0.reset_wave_loadout = gettime();
        var_0 scripts\common\utility::allow_usability( 1 );
        var_0.shouldskiplaststand = undefined;
        var_0 scripts\common\utility::allow_execution_victim( 1 );
        var_0 allowmelee( 1 );
        var_0 allowads( 1 );
        var_0 allowfire( 1 );

        if ( istrue( var_0.isjuggernaut ) )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "juggernaut", "canUseWeaponPickups" ) )
            {
                var_1 = var_0 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "juggernaut", "canUseWeaponPickups" ) ]]();

                if ( istrue( var_1 ) )
                    var_0 enableweaponswitch();
            }
        }
        else if ( !istrue( var_0.inlaststand ) )
        {
            var_0 enableoffhandweapons();
            var_0 enableweaponswitch();
            var_0 scripts\common\utility::allow_killstreaks( 1 );
        }
        else
            var_0 thread respawntagsfreed();

        if ( isdefined( var_0.bot_loadout_team ) )
        {
            var_0.bot_loadout_team unlink();
            var_0.bot_loadout_team delete();
        }

        if ( isdefined( var_0.bot_match_rules_invalidate_loadout ) )
        {
            var_0.bot_match_rules_invalidate_loadout unlink();
            var_0.bot_match_rules_invalidate_loadout delete();
        }
    }

    if ( isdefined( self.ascender ) )
    {
        self.ascender.angles = self.startangle;
        self.ascender scripts\cp_mp\ent_manager::deregisterspawn();
        self.ascender delete();
    }

    if ( isdefined( self.scriptable ) )
    {
        var_2 = "on";

        if ( isdefined( self.scriptable.script_noteworthy ) )
            var_2 = self.scriptable.script_noteworthy;

        if ( isdefined( self._id_12169 ) )
            self.scriptable setscriptablepartstate( "ascender_solo", var_2 );
        else
            self.scriptable setscriptablepartstate( "ascender", var_2 );
    }

    if ( isdefined( var_0 ) )
    {
        var_0.bot_nags = undefined;
        var_0.bot_loadout_team = undefined;
        var_0.bot_match_rules_invalidate_loadout = undefined;
        var_0.player_rig unlink();
    }

    waitframe();

    if ( isdefined( var_0 ) )
    {
        var_0 thread scripts\mp\utility\infilexfil::takegunless();
        var_0 notify( "remove_rig" );
    }
}

respawntagsfreed()
{
    level endon( "game_ended" );
    var_0 = self;
    var_0 scripts\engine\utility::_id_12E3F( "death_or_disconnect", "last_stand_finished" );
    var_0 enableoffhandweapons();
    var_0 enableweaponswitch();
    var_0 scripts\common\utility::allow_killstreaks( 1 );
    var_0 thread scripts\mp\utility\infilexfil::takegunless();
}

bot_loadout_choose_from_custom_default_class()
{
    var_0 = self;

    if ( !istrue( var_0.usingascender ) )
        return;

    var_1 = var_0.bot_nags.ascendstructout.origin;
    var_2 = var_0.bot_nags.ascendstructout.angles;
    var_0.bot_nags cleanupascenduse( var_0 );
    var_0 setorigin( var_1 );
    var_0 setplayerangles( var_2 );
    var_0 notify( "ascender_cancel" );
    var_0 notify( "ascender_solo_cancel" );
    var_0 stopanimscriptsceneevent();
}

vectortoanglessafe( var_0, var_1 )
{
    var_2 = vectorcross( var_0, var_1 );
    var_1 = vectorcross( var_2, var_0 );
    var_3 = axistoangles( var_0, var_2, var_1 );
    return var_3;
}

race_calculate_stars( var_0 )
{
    foreach ( var_2 in level.ascendstructs )
    {
        if ( distance2dsquared( var_2.origin, var_0 ) < lootchopper_finddroplocation() )
        {
            if ( abs( var_0[2] - var_2.origin[2] ) < lootchopper_droploot() )
                return 1;
        }
    }

    return 0;
}
