// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

tv_station_infil_enemy_combat_logic()
{
    var_0 = self getmovingplatformparent();

    if ( isdefined( var_0 ) )
    {
        if ( pressure_overload_threshold( var_0 ) )
            return 1;
    }

    return 0;
}

pressure_overload_threshold( var_0 )
{
    if ( isdefined( level._id_1303C ) )
    {
        foreach ( var_2 in level._id_1303C._id_12810 )
        {
            if ( var_2 == var_0 )
                return 1;
            else if ( isdefined( var_2.runplunderextractsitetimer ) && var_2.runplunderextractsitetimer == var_0 )
                return 1;
        }
    }

    return 0;
}

prepare_mission_failed_text( var_0 )
{
    if ( isdefined( level._id_12561 ) )
    {
        foreach ( var_2 in level._id_12561 )
        {
            if ( isdefined( var_2 ) )
            {
                if ( var_2 == var_0 )
                    return 1;
                else if ( isdefined( var_2.delete_bad_trucks ) && var_2.delete_bad_trucks == var_0 )
                    return 1;
            }
        }
    }

    return 0;
}

postupdategameevents( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( isdefined( level._id_1303C ) )
    {
        foreach ( var_2 in level._id_1303C._id_12810 )
        {
            if ( var_2 == var_0 )
                return 1;
        }
    }

    return 0;
}

handle_respawn_via_c130( var_0 )
{
    if ( isdefined( level._id_1303C ) )
    {
        if ( isdefined( var_0 ) && isdefined( var_0.tablet ) && istrue( var_0.tablet.stimmodelattached ) )
            level._id_1303C notify( "train_dom_contract_complete", var_0 );
    }
}

bomb_vest_timer_frozen( var_0, var_1 )
{
    var_2 = 0;

    if ( var_0 > 5 )
        var_2 = 5;

    var_3 = 10;

    if ( isdefined( var_1 ) )
        var_3 = var_1;

    for ( var_4 = var_2; var_4 < var_0; var_4 = var_4 + var_3 )
    {
        if ( bomb_vest_success_fail_think( var_4 ) )
            return 1;
    }

    return 0;
}

bomb_vest_success_fail_think( var_0 )
{
    for ( var_1 = 0; var_1 < level._id_1303C.animents.size; var_1++ )
    {
        var_2 = level.scr_anim["br_cargo_train_anim"][level._id_1303C.animents[var_1].blueprintextract_trygetreward][0];

        if ( !isdefined( var_2 ) )
            return;

        var_3 = getanimlength( var_2 );
        var_4 = level._id_1303C.animents[var_1] getanimtime( var_2 );
        var_5 = var_4 * var_3;

        if ( var_5 + var_0 > var_3 )
        {
            var_6 = var_5 + var_0 - var_3;
            var_7 = var_3 / var_6;
            var_8 = getanglesforanimtime( ( -9661, -9119, -299.007 ), ( 0, 0, 0 ), var_2, var_7 );
        }
        else
        {
            var_9 = var_5 + var_0;
            var_10 = var_9 / var_3;
            var_8 = getanglesforanimtime( ( -9661, -9119, -299.007 ), ( 0, 0, 0 ), var_2, var_10 );
        }

        if ( !isdefined( var_8 ) || !isvector( var_8 ) )
            return 0;

        if ( vehicles_spawned( var_8 ) )
            return 1;
    }

    return 0;
}

bomb_vest_explodes()
{
    if ( isdefined( level._id_1303C ) && isdefined( level._id_1303C._id_12810 ) )
    {
        foreach ( var_1 in level._id_1303C._id_12810 )
        {
            if ( vehicles_spawned( var_1.origin ) )
                return 1;
        }
    }

    return 0;
}

vehicles_spawned( var_0, var_1 )
{
    if ( istrue( level.br_circle_disabled ) )
        return 0;

    var_2 = actorropeplayscene();
    var_3 = actorthinkpath_default();

    if ( istrue( var_1 ) && istrue( level.dropminigunondeath ) )
    {
        var_2 = add_module_ai_spawn_func_to_module();
        var_3 = add_neurotoxin_damage_area();
    }

    if ( !precomputeddropbagpos( var_0, var_2, var_3 ) )
        return 1;

    return 0;
}

precomputeddropbagpos( var_0, var_1, var_2 )
{
    if ( squared( var_0[0] - var_1[0] ) + squared( var_0[1] - var_1[1] ) <= squared( var_2 ) )
        return 1;

    return 0;
}

add_module_ai_spawn_func_to_module()
{
    if ( isdefined( level.br_circle ) && isdefined( level.br_circle.safecircleent ) )
        return ( level.br_circle.safecircleent.origin[0], level.br_circle.safecircleent.origin[1], 0 );
    else
        return ( 0, 0, 0 );
}

add_neurotoxin_damage_area()
{
    if ( isdefined( level.br_circle ) && isdefined( level.br_circle.safecircleent ) )
        return level.br_circle.safecircleent.origin[2];
    else
        return 0;
}

actorropeplayscene()
{
    if ( isdefined( level.br_circle ) && isdefined( level.br_circle.dangercircleent ) )
        return ( level.br_circle.dangercircleent.origin[0], level.br_circle.dangercircleent.origin[1], 0 );
    else
        return ( 0, 0, 0 );
}

actorthinkpath_default()
{
    if ( isdefined( level.br_circle ) && isdefined( level.br_circle.dangercircleent ) )
        return level.br_circle.dangercircleent.origin[2];
    else
        return 0;
}

quickdropaddtocache( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 )
{
    var_9 = force_dismount( var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 );
    return queued_up_to_respawn( var_0, var_9 );
}

queued_up_to_respawn( var_0, var_1 )
{
    var_2 = var_1._id_13158;
    var_3 = var_0.origin - var_2;
    var_4 = vectordot( var_3, var_1.x1opsnpcweaponmagmodel );

    if ( var_4 > var_1.halflength )
        return 0;

    if ( var_4 < var_1.halflength * -1 )
        return 0;

    var_5 = vectordot( var_3, var_1.x1opsnpcweaponreceivermodel );

    if ( var_5 > var_1.halfwidth )
        return 0;

    if ( var_5 < var_1.halfwidth * -1 )
        return 0;

    var_6 = vectordot( var_3, var_1.x1opsnpcweaponstockmodel );

    if ( var_6 > var_1.nextplayertospectate )
        return 0;

    if ( var_6 < var_1.nextplayertospectate * -1 )
        return 0;

    return 1;
}

force_dismount( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = spawnstruct();
    var_8.x1opsnpcweaponmagmodel = anglestoforward( var_0.angles );
    var_8.x1opsnpcweaponreceivermodel = anglestoright( var_0.angles );
    var_8.x1opsnpcweaponstockmodel = anglestoup( var_0.angles );
    var_9 = var_0 gettagorigin( var_1 );
    var_8._id_13158 = var_9 + var_8.x1opsnpcweaponmagmodel * var_2 + var_8.x1opsnpcweaponreceivermodel * var_3 + var_8.x1opsnpcweaponstockmodel * var_4;
    var_10 = [];
    var_8.halflength = var_5 / 2;
    var_8.halfwidth = var_6 / 2;
    var_8.nextplayertospectate = var_7 / 2;
    return var_8;
}

tutorial_tacmap( var_0, var_1 )
{
    return quickdropaddtocache( var_1, var_0, "tag_origin", 0, 0, 88, 760, 112, 124 );
}

queue_spawn()
{
    var_0 = 0;

    if ( level.gametype == "br" )
    {
        if ( isdefined( level._id_12561 ) )
        {
            foreach ( var_2 in level._id_12561 )
            {
                if ( !isdefined( var_2 ) )
                    continue;

                if ( tutorial_tacmap( var_2, self ) )
                {
                    var_0 = 1;
                    break;
                }
            }
        }
    }

    return var_0;
}
