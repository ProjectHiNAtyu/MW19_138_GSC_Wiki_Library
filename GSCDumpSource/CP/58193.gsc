// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

sandbox_safe_area_count()
{
    scripts\engine\utility::create_func_ref( "little_bird_mg", ::_id_1218E );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "little_bird_mg", "create", ::sandbox_combat_area_bits );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "little_bird_mg", "initLate", ::sandboxprintlinebold );
    scripts\cp_mp\utility\script_utility::registersharedfunc( "little_bird_mg", "spawnCallback", ::sat_adjust_think );
    scripts\cp\vehicles\vehicle_oob_cp::vehicle_oob_cp_registeroutoftimecallback( "little_bird_mg", scripts\asm\soldier\mp\melee::sat_piece_think );
}

sandbox_combat_area_bits( var_0 )
{
    var_0.maxhealth = 2500;
    var_0.health = var_0.maxhealth;
    var_0.vehicle_specific_onentervehicle = ::sappliedstages;
    var_0.vehicle_specific_onexitvehicle = ::sat_activate;
    var_1 = var_0 getentitynumber();
    var_0 anim_pause_fracs( var_1 );
    var_0 thread _id_11A1C( var_1 );
}

sandboxprintlinebold()
{
    if ( 1 )
        return;

    level.saw_origin = [];
    var_0 = scripts\engine\utility::getstructarray( "littlebirdMG_spawn", "targetname" );
    thread sandbox_safe_area( var_0, 3 );
}

sandbox_safe_area( var_0, var_1 )
{
    wait( var_1 );
    var_2 = getdvarint( "LLQQOPKTKM", 0 ) == 0;

    if ( var_2 )
    {
        foreach ( var_4 in var_0 )
        {
            var_5 = spawnstruct();
            var_5.origin = var_4.origin;
            var_5.angles = var_4.angles;
            var_6 = scripts\asm\soldier\mp\melee::sat_computer_think_new( var_5 );

            if ( isdefined( var_6 ) )
                level.littlebirds = scripts\engine\utility::array_add( level.littlebirds, var_6 );
        }
    }

    level notify( "little_birds_mg_done_spawning" );
}

_id_12208( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\asm\soldier\mp\melee::sat_computer_think_new( var_0, var_1, undefined, var_2 );

    if ( istrue( var_3 ) )
        return var_4;
}

_id_1218E( var_0 )
{
    var_1 = spawnstruct();
    var_1.origin = var_0.origin + ( 0, 0, 100 );
    var_1.angles = var_0.angles * ( 0, 1, 0 );
    var_1.owner = var_0;
    var_2 = scripts\asm\soldier\mp\melee::sat_computer_think_new( var_1 );

    if ( isdefined( var_2 ) )
        thread scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_enter( var_2, "pilot", var_0, undefined, 1 );
}

sappliedstages( var_0, var_1, var_2, var_3 )
{

}

sat_activate( var_0, var_1, var_2, var_3 )
{

}

anim_pause_fracs( var_0 )
{
    if ( !isdefined( level.saw_origin ) )
        level.saw_origin = [];

    level.saw_origin[var_0] = self;
}

_id_11A1C( var_0 )
{
    self waittill( "death" );
    level.saw_origin[var_0] = undefined;
}

sat_adjust_think( var_0, var_1 )
{
    if ( 1 )
        return;

    var_2 = scripts\asm\soldier\mp\melee::sat_computer_think_new( var_0, var_1 );

    if ( isdefined( var_2 ) && scripts\cp\vehicles\vehicle_spawn_cp::vehicle_spawn_cp_gamemodesupportsrespawn() )
        var_2.ondeathrespawn = ::sandboxprintlineboldwait;

    return var_2;
}

sandboxprintlineboldwait()
{
    thread sat_choose_missing_piece();
}

sat_choose_missing_piece()
{
    var_0 = spawnstruct();
    scripts\cp_mp\vehicles\vehicle_tracking::copyvehiclespawndata( scripts\cp_mp\vehicles\vehicle_tracking::getvehiclespawndata( self ), var_0 );
    var_1 = spawnstruct();

    for (;;)
    {
        wait 60;

        if ( scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_canspawnvehicle( "little_bird_mg" ) )
        {
            var_2 = scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_spawnvehicle( "little_bird_mg", var_0, var_1 );

            if ( !isdefined( var_2 ) )
                continue;

            break;
        }
    }
}
