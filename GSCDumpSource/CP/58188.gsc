// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

zombiepower( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 )
{
    if ( !isdefined( level.extractlocale_removelocaleinstance ) )
        level.extractlocale_removelocaleinstance = [];

    if ( !isdefined( level.extractmissionhelipadmodel ) )
        level.extractmissionhelipadmodel = [];

    if ( istrue( var_7 ) )
    {
        if ( !isbuiltinmethod( var_1 ) && !isanimation( var_1 ) )
            return;
    }
    else if ( !isbuiltinfunction( var_1 ) )
        return;

    level.extractlocale_removelocaleinstance[var_0] = spawnstruct();
    level.extractlocale_removelocaleinstance[var_0].init_mine_caves = var_1;
    level.extractlocale_removelocaleinstance[var_0].calculatehelispawndata = var_4;
    level.extractlocale_removelocaleinstance[var_0].calculateandvalidatefuelstability = var_5;
    level.extractlocale_removelocaleinstance[var_0].calculateaveragevelocities = var_7;
    level.extractlocale_removelocaleinstance[var_0].calloutmarkerpingvo_debouncegarbagecollector = var_8;
    level.extractlocale_removelocaleinstance[var_0].timeout = var_2;
    level.extractlocale_removelocaleinstance[var_0].init_hack_console = var_3;
}

_id_11BEA( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 )
{
    if ( !isdefined( level.extractlocale_removelocaleinstance[var_0] ) )
        return;

    var_9 = level.extractlocale_removelocaleinstance[var_0].init_mine_caves;
    var_10 = ::init_global_cp_script_funcs;
    var_11 = 1;

    if ( isdefined( var_8 ) )
        var_11 = [[ var_10 ]]( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 );
    else if ( isdefined( var_7 ) )
        var_11 = [[ var_10 ]]( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 );
    else if ( isdefined( var_6 ) )
        var_11 = [[ var_10 ]]( var_0, var_1, var_2, var_3, var_4, var_5, var_6 );
    else if ( isdefined( var_5 ) )
        var_11 = [[ var_10 ]]( var_0, var_1, var_2, var_3, var_4, var_5 );
    else if ( isdefined( var_4 ) )
        var_11 = [[ var_10 ]]( var_0, var_1, var_2, var_3, var_4 );
    else if ( isdefined( var_3 ) )
        var_11 = [[ var_10 ]]( var_0, var_1, var_2, var_3 );
    else if ( isdefined( var_2 ) )
        var_11 = [[ var_10 ]]( var_0, var_1, var_2 );
    else if ( isdefined( var_1 ) )
        var_11 = [[ var_10 ]]( var_0, var_1 );
    else
        var_11 = [[ var_10 ]]( var_0 );

    if ( var_11 )
    {
        thread set_focus_fire_params( var_0 );

        if ( istrue( level.extractlocale_removelocaleinstance[var_0].calculateaveragevelocities ) )
        {
            if ( istrue( level.extractlocale_removelocaleinstance[var_0].calloutmarkerpingvo_debouncegarbagecollector ) )
            {
                if ( isdefined( var_8 ) )
                {
                    if ( isbuiltinmethod( var_9 ) || isanimation( var_9 ) )
                        call [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 );
                    else
                        [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 );

                    return;
                }

                if ( isdefined( var_7 ) )
                {
                    if ( isbuiltinmethod( var_9 ) || isanimation( var_9 ) )
                        call [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5, var_6, var_7 );
                    else
                        [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5, var_6, var_7 );

                    return;
                }

                if ( isdefined( var_6 ) )
                {
                    if ( isbuiltinmethod( var_9 ) || isanimation( var_9 ) )
                        call [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5, var_6 );
                    else
                        [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5, var_6 );

                    return;
                }

                if ( isdefined( var_5 ) )
                {
                    if ( isbuiltinmethod( var_9 ) || isanimation( var_9 ) )
                        call [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5 );
                    else
                        [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5 );

                    return;
                }

                if ( isdefined( var_4 ) )
                {
                    if ( isbuiltinmethod( var_9 ) || isanimation( var_9 ) )
                        call [[ var_9 ]]( var_1, var_2, var_3, var_4 );
                    else
                        [[ var_9 ]]( var_1, var_2, var_3, var_4 );

                    return;
                }

                if ( isdefined( var_3 ) )
                {
                    if ( isbuiltinmethod( var_9 ) || isanimation( var_9 ) )
                        call [[ var_9 ]]( var_1, var_2, var_3 );
                    else
                        [[ var_9 ]]( var_1, var_2, var_3 );

                    return;
                }

                if ( isdefined( var_2 ) )
                {
                    if ( isbuiltinmethod( var_9 ) || isanimation( var_9 ) )
                        call [[ var_9 ]]( var_1, var_2 );
                    else
                        [[ var_9 ]]( var_1, var_2 );

                    return;
                }

                if ( isdefined( var_1 ) )
                {
                    if ( isbuiltinmethod( var_9 ) || isanimation( var_9 ) )
                        call [[ var_9 ]]( var_1 );
                    else
                        [[ var_9 ]]( var_1 );

                    return;
                }

                if ( isbuiltinmethod( var_9 ) || isanimation( var_9 ) )
                    call [[ var_9 ]]();
                else
                    [[ var_9 ]]();

                return;
            }
            else
            {
                if ( isdefined( var_8 ) )
                {
                    if ( isbuiltinmethod( var_9 ) || isanimation( var_9 ) )
                        self call [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 );
                    else
                        self [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 );

                    return;
                }

                if ( isdefined( var_7 ) )
                {
                    if ( isbuiltinmethod( var_9 ) || isanimation( var_9 ) )
                        self call [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5, var_6, var_7 );
                    else
                        self [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5, var_6, var_7 );

                    return;
                }

                if ( isdefined( var_6 ) )
                {
                    if ( isbuiltinmethod( var_9 ) || isanimation( var_9 ) )
                        self call [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5, var_6 );
                    else
                        self [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5, var_6 );

                    return;
                }

                if ( isdefined( var_5 ) )
                {
                    if ( isbuiltinmethod( var_9 ) || isanimation( var_9 ) )
                        self call [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5 );
                    else
                        self [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5 );

                    return;
                }

                if ( isdefined( var_4 ) )
                {
                    if ( isbuiltinmethod( var_9 ) || isanimation( var_9 ) )
                        self call [[ var_9 ]]( var_1, var_2, var_3, var_4 );
                    else
                        self [[ var_9 ]]( var_1, var_2, var_3, var_4 );

                    return;
                }

                if ( isdefined( var_3 ) )
                {
                    if ( isbuiltinmethod( var_9 ) || isanimation( var_9 ) )
                        self call [[ var_9 ]]( var_1, var_2, var_3 );
                    else
                        self [[ var_9 ]]( var_1, var_2, var_3 );

                    return;
                }

                if ( isdefined( var_2 ) )
                {
                    if ( isbuiltinmethod( var_9 ) || isanimation( var_9 ) )
                        self call [[ var_9 ]]( var_1, var_2 );
                    else
                        self [[ var_9 ]]( var_1, var_2 );

                    return;
                }

                if ( isdefined( var_1 ) )
                {
                    if ( isbuiltinmethod( var_9 ) || isanimation( var_9 ) )
                        self call [[ var_9 ]]( var_1 );
                    else
                        self [[ var_9 ]]( var_1 );

                    return;
                }

                if ( isbuiltinmethod( var_9 ) || isanimation( var_9 ) )
                    self call [[ var_9 ]]();
                else
                    self [[ var_9 ]]();

                return;
            }
        }

        if ( istrue( level.extractlocale_removelocaleinstance[var_0].calculatehelispawndata ) )
        {
            if ( isdefined( var_8 ) )
            {
                self thread [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 );
                return;
            }

            if ( isdefined( var_7 ) )
            {
                self thread [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5, var_6, var_7 );
                return;
            }

            if ( isdefined( var_6 ) )
            {
                self thread [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5, var_6 );
                return;
            }

            if ( isdefined( var_5 ) )
            {
                self thread [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5 );
                return;
            }

            if ( isdefined( var_4 ) )
            {
                self thread [[ var_9 ]]( var_1, var_2, var_3, var_4 );
                return;
            }

            if ( isdefined( var_3 ) )
            {
                self thread [[ var_9 ]]( var_1, var_2, var_3 );
                return;
            }

            if ( isdefined( var_2 ) )
            {
                self thread [[ var_9 ]]( var_1, var_2 );
                return;
            }

            if ( isdefined( var_1 ) )
            {
                self thread [[ var_9 ]]( var_1 );
                return;
            }

            self thread [[ var_9 ]]();
            return;
        }

        if ( istrue( level.extractlocale_removelocaleinstance[var_0].calculateandvalidatefuelstability ) )
        {
            if ( isdefined( var_8 ) )
            {
                self childthread [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 );
                return;
            }

            if ( isdefined( var_7 ) )
            {
                self childthread [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5, var_6, var_7 );
                return;
            }

            if ( isdefined( var_6 ) )
            {
                self childthread [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5, var_6 );
                return;
            }

            if ( isdefined( var_5 ) )
            {
                self childthread [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5 );
                return;
            }

            if ( isdefined( var_4 ) )
            {
                self childthread [[ var_9 ]]( var_1, var_2, var_3, var_4 );
                return;
            }

            if ( isdefined( var_3 ) )
            {
                self childthread [[ var_9 ]]( var_1, var_2, var_3 );
                return;
            }

            if ( isdefined( var_2 ) )
            {
                self childthread [[ var_9 ]]( var_1, var_2 );
                return;
            }

            if ( isdefined( var_1 ) )
            {
                self childthread [[ var_9 ]]( var_1 );
                return;
            }

            self childthread [[ var_9 ]]();
            return;
        }

        if ( isdefined( var_8 ) )
        {
            self [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 );
            return;
        }

        if ( isdefined( var_7 ) )
        {
            self [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5, var_6, var_7 );
            return;
        }

        if ( isdefined( var_6 ) )
        {
            self [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5, var_6 );
            return;
        }

        if ( isdefined( var_5 ) )
        {
            self [[ var_9 ]]( var_1, var_2, var_3, var_4, var_5 );
            return;
        }

        if ( isdefined( var_4 ) )
        {
            self [[ var_9 ]]( var_1, var_2, var_3, var_4 );
            return;
        }

        if ( isdefined( var_3 ) )
        {
            self [[ var_9 ]]( var_1, var_2, var_3 );
            return;
        }

        if ( isdefined( var_2 ) )
        {
            self [[ var_9 ]]( var_1, var_2 );
            return;
        }

        if ( isdefined( var_1 ) )
        {
            self [[ var_9 ]]( var_1 );
            return;
        }

        self [[ var_9 ]]();
    }
    else
    {

    }
}

init_global_cp_script_funcs( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 )
{
    if ( scripts\engine\utility::array_contains( level.extractmissionhelipadmodel, var_0 ) )
        return 0;

    if ( isdefined( level.extractlocale_removelocaleinstance[var_0].init_hack_console ) )
    {
        if ( isdefined( var_8 ) )
            return [[ level.extractlocale_removelocaleinstance[var_0].init_hack_console ]]( var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 );

        if ( isdefined( var_7 ) )
            return [[ level.extractlocale_removelocaleinstance[var_0].init_hack_console ]]( var_1, var_2, var_3, var_4, var_5, var_6, var_7 );

        if ( isdefined( var_6 ) )
            return [[ level.extractlocale_removelocaleinstance[var_0].init_hack_console ]]( var_1, var_2, var_3, var_4, var_5, var_6 );

        if ( isdefined( var_5 ) )
            return [[ level.extractlocale_removelocaleinstance[var_0].init_hack_console ]]( var_1, var_2, var_3, var_4, var_5 );

        if ( isdefined( var_4 ) )
            return [[ level.extractlocale_removelocaleinstance[var_0].init_hack_console ]]( var_1, var_2, var_3, var_4 );

        if ( isdefined( var_3 ) )
            return [[ level.extractlocale_removelocaleinstance[var_0].init_hack_console ]]( var_1, var_2, var_3 );

        if ( isdefined( var_2 ) )
            return [[ level.extractlocale_removelocaleinstance[var_0].init_hack_console ]]( var_1, var_2 );

        if ( isdefined( var_1 ) )
            return [[ level.extractlocale_removelocaleinstance[var_0].init_hack_console ]]( var_1 );

        return [[ level.extractlocale_removelocaleinstance[var_0].init_hack_console ]]();
    }

    return 1;
}

set_focus_fire_params( var_0 )
{
    level endon( "game_ended" );
    var_1 = 0.05;
    level.extractmissionhelipadmodel = scripts\engine\utility::array_add_safe( level.extractmissionhelipadmodel, var_0 );

    if ( isdefined( level.extractlocale_removelocaleinstance[var_0].timeout ) )
        var_1 = level.extractlocale_removelocaleinstance[var_0].timeout;

    wait( var_1 );
    level.extractmissionhelipadmodel = scripts\engine\utility::array_remove( level.extractmissionhelipadmodel, var_0 );
}
