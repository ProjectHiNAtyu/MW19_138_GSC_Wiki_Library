// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{

}

jugg_makejuggernaut( var_0, var_1 )
{
    if ( !jugg_canresolvestance( var_0 ) )
        return 0;

    self.isjuggernaut = 1;
    self.can_revive = 0;
    self.streakinfo = var_1;
    var_2 = scripts\cp\survival\survival_loadout::getoperatorcustomization();
    var_3 = spawnstruct();
    var_3.juggconfig = var_0;
    var_3.prevhealth = self.health;
    var_3.prevmaxhealth = self.maxhealth;
    var_3.prevclothtype = self.clothtype;
    var_3.prevbody = var_2[0];
    var_3.prevhead = var_2[1];
    var_3.prevviewmodel = self getcustomizationviewmodel();
    var_3.prevspeedscale = self.playerstreakspeedscale;
    var_3.prevsuit = self.suit;
    var_3.prevstartingweap = scripts\cp\utility::getvalidtakeweapon();
    var_3.maskomnvar = "ui_gas_mask_juggernaut";
    self.disabletakecoverwarning = 1;
    self.jugg_health = var_0.maxhealth - var_3.prevmaxhealth;
    self.maxhealth = var_0.maxhealth;
    self.health = self.maxhealth;

    if ( istrue( level._id_119CB ) || istrue( level._id_11997 ) )
    {
        var_4 = self getentitynumber();
        scripts\cp\cp_persistence::setcoopplayerdata_for_everyone( "EoGPlayer", var_4, "tickettotal", self.maxhealth );
    }

    jugg_handlestancechange( var_0 );

    if ( isdefined( var_0.classstruct ) )
    {
        register_sequence_3_objectives( self, var_3 );
        scripts\cp\cp_loadout::botloadoutfavoritecamosecondary( self, var_0.classstruct );
        self giveweapon( self.starting_weapon );
        self setweaponammoclip( self.starting_weapon, weaponclipsize( self.starting_weapon ) );
        self setweaponammostock( self.starting_weapon, weaponmaxammo( self.starting_weapon ) );
        scripts\cp_mp\utility\inventory_utility::_switchtoweapon( self.starting_weapon );
    }

    jugg_toggleallows( var_0.allows, 0 );
    self skydive_setbasejumpingstatus( 0 );
    scripts\cp_mp\killstreaks\white_phosphorus::enableloopingcoughaudiosupression();
    jugg_setmodel();
    self.playerstreakspeedscale = var_0.movespeedscalar;
    scripts\cp\survival\survival_loadout::updatemovespeedscale();
    self setsuit( var_0.suit );
    self.suit = var_0.suit;
    self setclothtype( var_0.clothtype );
    jugg_enableoverlay( var_3 );

    if ( var_0.infiniteammo )
        thread infiniteammothread( var_0.infiniteammoupdaterate );

    self.juggcontext = var_3;
    self notify( "juggernaut_start" );
    self notify( "munitions_used", "juggernaut" );
    thread detonatedripfx();
    thread jugg_watchmusictoggle();
    thread jugg_watchfordeath();
    thread jugg_watchforgameend();
    thread jugg_watchfordisconnect();
    thread register_trap_room_objectives();
    thread jugg_watchfordamage();
    thread register_subway_track();
    thread register_techo_seat_data();
    scripts\cp\cp_kidnapper::setimmunetokidnapper( 1 );
    return 1;
}

detonatedripfx()
{
    waittillframeend;

    if ( isdefined( self.carryobject ) )
        self switchtoweapon( "iw8_minigunksjugg_mp" );
}

register_sequence_3_objectives( var_0, var_1 )
{
    var_0 scripts\cp\utility::store_weapons_status();
    var_0 scripts\cp\cp_accessories::clearplayeraccessory();
    var_0 takeallweapons();
}

jugg_watchmusictoggle()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "juggernaut_end" );
    var_0 = 0;
    self notifyonplayercommand( "toggle_music", "+actionslot 3" );
    self notifyonplayercommand( "toggle_music", "killstreak_wheel" );
    var_1 = getcompleteweaponname( "ks_gesture_jugg_music_mp" );
    var_2 = weaponfiretime( var_1 );

    if ( !isdefined( self.musicplaying ) )
    {
        var_3 = self getjuggdefaultmusicenabled();
        self.musicplaying = var_3;
    }

    if ( !istrue( self.musicplaying ) )
        self setscriptablepartstate( "juggernaut", "neutral", 0 );
    else
        self setscriptablepartstate( "juggernaut", "music", 0 );

    for (;;)
    {
        self waittill( "toggle_music" );

        if ( self isonladder() || self ismantling() )
            continue;

        self giveandfireoffhand( var_1 );
        self playsoundonmovingent( "mp_jugg_mus_toggle_foley" );
        self playlocalsound( "mp_jugg_mus_toggle_button" );
        var_4 = 0.2;

        if ( istrue( self.musicplaying ) )
            var_4 = 0.65;

        scripts\cp_mp\hostmigration::hostmigration_waitlongdurationwithpause( var_4 );

        if ( istrue( self.musicplaying ) )
        {
            self.musicplaying = 0;
            self setscriptablepartstate( "juggernaut", "neutral", 0 );
        }
        else
        {
            self.musicplaying = 1;
            self setscriptablepartstate( "juggernaut", "music", 0 );
        }

        scripts\cp_mp\hostmigration::hostmigration_waitlongdurationwithpause( 1.5 );
    }
}

jugg_watchforgameend()
{
    self endon( "juggernaut_end" );
    var_0 = self.juggcontext;
    level waittill( "game_ended" );
    self.maxhealth = var_0.prevmaxhealth;
    self.health = var_0.prevhealth;
    jugg_disableoverlay( var_0 );
}

jugg_watchfordisconnect()
{
    self endon( "juggernaut_end" );
    var_0 = self.juggcontext;
    self waittill( "disconnect" );

    if ( isdefined( self ) )
    {
        self.maxhealth = var_0.prevmaxhealth;
        self.health = var_0.prevhealth;
    }
}

register_trap_room_objectives()
{
    self endon( "juggernaut_end" );

    for (;;)
    {
        self waittill( "weapon_fired" );
        self.streakinfo.shots_fired++;
    }
}

jugg_removejuggernaut()
{
    var_0 = self.juggcontext;
    var_1 = var_0.juggconfig;
    self.musicplaying = undefined;
    self notify( "juggernaut_end_damage" );

    if ( scripts\cp_mp\utility\player_utility::_isalive() )
    {
        self.maxhealth = var_0.prevmaxhealth;
        self.health = var_0.prevhealth;

        if ( istrue( level._id_119CB ) || istrue( level._id_11997 ) )
        {
            var_2 = self getentitynumber();
            scripts\cp\cp_persistence::setcoopplayerdata_for_everyone( "EoGPlayer", var_2, "tickettotal", self.maxhealth );
        }

        scripts\cp_mp\killstreaks\white_phosphorus::disableloopingcoughaudiosupression();
        jugg_toggleallows( var_1.allows, 1 );

        if ( isdefined( var_1.classstruct ) )
            scripts\cp\survival\survival_loadout::respawnitems_assignrespawnitems( var_0.respawnitems );

        foreach ( var_5, var_4 in var_1.perks )
            scripts\cp\utility::_unsetperk( var_5 );

        if ( var_1.infiniteammo )
            stopinfiniteammothread();
    }
    else
    {

    }

    jugg_restoremodel( var_0 );
    self.playerstreakspeedscale = var_0.prevspeedscale;
    scripts\cp\survival\survival_loadout::updatemovespeedscale();
    self setsuit( var_0.prevsuit );
    self.suit = var_0.prevsuit;

    if ( isdefined( self.prevclothtype ) )
        self setclothtype( var_0.prevclothtype );

    self takeallweapons();
    scripts\cp\utility::restore_weapons_status();

    if ( isdefined( self.operatorcustomization ) && isdefined( self.operatorcustomization.execution ) )
        scripts\cp_mp\execution::_giveexecution( self.operatorcustomization.execution );

    if ( scripts\cp\utility::prematchintiallandingcomplete() )
    {
        if ( isdefined( self.loadoutaccessorydata ) && isdefined( self.loadoutaccessoryweapon ) && self.loadoutaccessoryweapon != "none" )
            scripts\cp\cp_accessories::giveplayeraccessory( self.loadoutaccessorydata, self.loadoutaccessoryweapon, self.loadoutaccessorylogic );
    }
    else if ( isdefined( self.classstruct.loadoutaccessorydata ) && isdefined( self.classstruct.loadoutaccessoryweapon ) && self.classstruct.loadoutaccessoryweapon != "none" )
        scripts\cp\cp_accessories::giveplayeraccessory( self.classstruct.loadoutaccessorydata, self.classstruct.loadoutaccessoryweapon, self.classstruct.loadoutaccessorylogic );

    jugg_disableoverlay( var_0 );
    self setscriptablepartstate( "juggernaut", "neutral", 0 );

    if ( !scripts\cp\utility::preventleave() && !scripts\cp\utility::prematchintiallandingcomplete() )
        self skydive_setbasejumpingstatus( 1 );

    self.damageshieldexpiretime = gettime() + 3000;
    self.isjuggernaut = 0;
    self.can_revive = 1;
    self.juggcontext = undefined;
    self.disabletakecoverwarning = undefined;
    self.jugg_health = undefined;
    thread start_regen_early();
    scripts\cp\cp_kidnapper::setimmunetokidnapper( 0 );
    self notify( "stop_hostagecarrier_watching_for_doors" );
    self notify( "juggernaut_end" );
}

start_regen_early()
{
    wait 0.1;
    self notify( "force_regeneration" );
}

infiniteammothread( var_0, var_1 )
{
    self endon( "death_or_disconnect" );
    self endon( "stop_infinite_ammo_thread" );

    if ( !isdefined( var_0 ) )
        var_0 = level.framedurationseconds;

    for (;;)
    {
        if ( !scripts\cp\cp_weapon::turn_on_search_light( self ) )
        {
            wait( var_0 );
            continue;
        }

        if ( !isdefined( var_1 ) )
            var_1 = self.equippedweapons;

        foreach ( var_3 in var_1 )
        {
            self givemaxammo( var_3 );
            self setweaponammoclip( var_3, weaponclipsize( var_3 ) );
        }

        wait( var_0 );
    }
}

stopinfiniteammothread()
{
    self notify( "stop_infinite_ammo_thread" );
}

jugg_createconfig( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2.maxhealth = 3000;
    var_2.startinghealth = var_2.maxhealth;
    var_2.movespeedscalar = -0.2;
    var_2.forcetostand = 1;
    var_2.suit = "iw8_juggernaut_mp";
    var_2.infiniteammo = 1;
    var_2.infiniteammoupdaterate = undefined;
    var_2.classstruct = jugg_getdefaultclassstruct();
    var_2.allows = [];
    var_2.allows["stick_kill"] = 1;
    var_2.allows["health_regen"] = 1;
    var_2.allows["one_hit_melee_victim"] = 1;
    var_2.allows["flashed"] = 1;
    var_2.allows["stunned"] = 1;
    var_2.allows["prone"] = 1;
    var_2.allows["usability"] = 1;
    var_2.allows["supers"] = 1;
    var_2.allows["killstreaks"] = 1;
    var_2.allows["slide"] = 1;
    var_2.allows["reload"] = 1;
    var_2.allows["weapon_pickup"] = 1;
    var_2.allows["execution_victim"] = 0;
    var_2.perks = [];
    return var_2;
}

jugg_toggleallows( var_0, var_1 )
{
    foreach ( var_4, var_3 in var_0 )
    {
        if ( var_3 )
        {
            var_4 = tolower( var_4 );
            self thread [[ level.allow_funcs[var_4] ]]( var_1, "juggernaut" );
        }
    }

    if ( !istrue( level.give_killstreak_cluster ) )
    {
        scripts\common\utility::allow_mount_top( var_1, "juggernaut" );
        scripts\common\utility::allow_mount_side( var_1, "juggernaut" );
    }

    scripts\common\utility::allow_weapon_switch( var_1 );
    scripts\common\utility::allow_vehicle_use( var_1 );
}

jugg_getdefaultclassstruct()
{
    var_0 = scripts\cp\cp_loadout::loadout_getclassstruct();
    var_0.loadoutarchetype = "archetype_assault";
    var_0.loadoutprimary = "iw8_minigunksjugg_mp";
    var_0.loadoutsecondary = "none";
    return var_0;
}

jugg_watchfordeath()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "juggernaut_end" );
    self waittill( "last_stand" );
    jugg_removejuggernaut();
}

jugg_watchfordamage()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "juggernaut_end" );
    self waittill( "juggernaut_end_damage" );
    jugg_removejuggernaut();
}

register_subway_track()
{
    self endon( "disconnect" );
    self endon( "juggernaut_end" );
    self.owner = self;
    thread scripts\cp\utility::allowridekillstreakplayerexit();
    self waittill( "killstreakExit" );

    if ( istrue( self.spawnglobalscriptabledelayed ) )
        thread register_subway_track();
    else
        jugg_removejuggernaut();
}

register_techo_seat_data()
{
    self endon( "disconnect" );
    self endon( "juggernaut_end" );
    self endon( "stop_hostagecarrier_watching_for_doors" );
    self.owner = self;
    scripts\cp\utility::_id_12ECF();
}

jugg_getjuggmodels()
{
    var_0 = [];
    var_0["body"] = "body_opforce_juggernaut_mp_lod1";
    var_0["head"] = "head_opforce_juggernaut";
    var_0["view"] = "viewhands_opforce_juggernaut";
    return var_0;
}

jugg_setmodel()
{
    var_0 = jugg_getjuggmodels();
    var_1 = var_0["body"];
    var_2 = var_0["head"];
    var_3 = var_0["view"];
    scripts\cp\survival\survival_loadout::setcharactermodels( var_1, var_2, var_3 );
}

jugg_restoremodel( var_0 )
{
    if ( scripts\cp_mp\utility\player_utility::_isalive() )
    {
        self setcustomization( var_0.prevbody, var_0.prevhead );
        var_1 = self getcustomizationbody();
        var_2 = self getcustomizationhead();
        var_3 = self getcustomizationviewmodel();
        scripts\cp\survival\survival_loadout::setcharactermodels( var_1, var_2, var_3 );
    }
}

jugg_needtochangestance( var_0 )
{
    var_1 = 0;
    var_2 = self getstance();

    switch ( var_2 )
    {
        case "stand":
            var_1 = 0;
            break;
        case "crouch":
            if ( var_0.forcetostand || !var_0.allowcrouch )
            {
                var_1 = 1;
                break;
            }

            break;
        case "prone":
            if ( var_0.forcetostand || !var_0.allowprone )
            {
                var_1 = 1;
                break;
            }

            break;
    }

    return var_1;
}

jugg_canresolvestance( var_0 )
{
    return 1;
}

jugg_handlestancechange( var_0 )
{
    if ( jugg_needtochangestance( var_0 ) )
        self setstance( "stand" );
}

jugg_enableoverlay( var_0 )
{
    scripts\cp_mp\utility\killstreak_utility::_setvisibiilityomnvarforkillstreak( "juggernaut", "mask_on" );
    self setclientomnvar( var_0.maskomnvar, 1 );
    self.juggoverlaystatelabel = "mask_on";
    self.juggoverlaystate = 1;
    thread jugg_watchoverlaydamagestates( var_0 );
    thread jugg_watchforoverlayexecutiontoggle( var_0 );
}

jugg_watchoverlaydamagestates( var_0 )
{
    self endon( "death" );
    self endon( "disconnect" );
    level endon( "game_ended" );
    self endon( "juggernaut_end_damage" );
    var_1 = self.health;
    var_2 = var_0.prevmaxhealth;
    var_3 = var_1 - var_2;
    var_4 = var_1 - var_3 * 0.1;
    var_5 = var_1 - var_3 * 0.35;
    var_6 = var_1 - var_3 * 0.6;
    var_7 = var_1 - var_3 * 0.85;
    var_8 = 1;
    var_9 = var_8;
    var_10 = "mask_on";

    for (;;)
    {
        self waittill( "damage" );

        if ( self.health <= 0 )
            continue;

        if ( self.health <= var_7 )
        {
            var_10 = "mask_damage_critical";
            var_8 = 5;
        }
        else if ( self.health <= var_6 )
        {
            var_10 = "mask_damage_high";
            var_8 = 4;
        }
        else if ( self.health <= var_5 )
        {
            var_10 = "mask_damage_med";
            var_8 = 3;
        }
        else if ( self.health <= var_4 )
        {
            var_10 = "mask_damage_low";
            var_8 = 2;
        }

        if ( var_9 != var_8 )
        {
            scripts\cp_mp\utility\killstreak_utility::_setvisibiilityomnvarforkillstreak( "juggernaut", var_10 );
            self setclientomnvar( var_0.maskomnvar, var_8 );
            var_9 = var_8;
            self.juggoverlaystatelabel = var_10;
            self.juggoverlaystate = var_8;
        }
    }
}

jugg_watchforoverlayexecutiontoggle( var_0 )
{
    self endon( "death" );
    self endon( "disconnect" );
    level endon( "game_ended" );
    self endon( "juggernaut_end" );
    var_1 = 0;

    for (;;)
    {
        if ( !self isinexecutionattack() )
        {
            if ( istrue( var_1 ) )
            {
                scripts\cp_mp\utility\killstreak_utility::_setvisibiilityomnvarforkillstreak( "juggernaut", self.juggoverlaystatelabel );
                self setclientomnvar( var_0.maskomnvar, self.juggoverlaystate );
                var_1 = 0;
            }

            waitframe();
            continue;
        }

        if ( !istrue( var_1 ) )
        {
            scripts\cp_mp\utility\killstreak_utility::_setvisibiilityomnvarforkillstreak( "juggernaut", "off" );
            self setclientomnvar( var_0.maskomnvar, 0 );
            var_1 = 1;
        }

        waitframe();
    }
}

jugg_disableoverlay( var_0 )
{
    scripts\cp_mp\utility\killstreak_utility::_setvisibiilityomnvarforkillstreak( "juggernaut", "off" );
    self setclientomnvar( var_0.maskomnvar, 0 );
    self.juggoverlaystatelabel = undefined;
    self.juggoverlaystate = undefined;
}

jugg_getmovespeedscalar()
{
    return -0.2;
}
