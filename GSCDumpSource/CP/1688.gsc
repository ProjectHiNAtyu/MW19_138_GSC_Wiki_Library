// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

playersleftloop()
{
    player_equipment_use_stop();
}

player_equipment_use_stop( var_0 )
{
    if ( isdefined( level.scripted_spawner_func ) )
        return;

    level.threadedscriptspawners = istrue( var_0 );
    level.create_script_file_ids = [];
    level.cs_scripted_spawners = [];
    level.scripted_spawners = [];
    level.cs_scripted_spawners_triggers = [];
    level.scripted_spawners_triggers = [];
    level.cs_scripted_spawners_models = [];
    level.scripted_spawners_models = [];
    level.createscriptfilesinitialized = 0;
    level.scripted_spawner_func_strings = [];
    level.scripted_spawner_map_strings = [];
    level.scripted_spawner_func = [];
}

playerspawnexfilchopper()
{
    if ( isdefined( level.scripted_spawner_func ) )
    {
        level.cs_creation_counter = 0;

        if ( isarray( level.scripted_spawner_func ) )
        {
            for ( var_0 = 0; var_0 < level.scripted_spawner_func.size; var_0++ )
                [[ level.scripted_spawner_func[var_0] ]]( 1, "cs" + var_0 );
        }
        else if ( istrue( level.threadedscriptspawners ) )
            [[ level.scripted_spawner_func ]]( 1 );
        else
            [[ level.scripted_spawner_func ]]();
    }
}

register_create_script_arrays( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( var_3 ) )
        level.scripted_spawner_func[level.scripted_spawner_func.size] = var_3;

    if ( isdefined( var_0 ) )
        level.scripted_spawner_func_strings[level.scripted_spawner_func_strings.size] = var_0;

    if ( isdefined( var_1 ) )
        level.scripted_spawner_map_strings[level.scripted_spawner_func_strings.size] = var_1;

    if ( isdefined( var_2 ) )
        level.create_script_file_ids[var_0] = "cs" + var_2;
}

playerspawn( var_0 )
{
    if ( scripts\engine\utility::flag_exist( var_0 ) )
    {
        scripts\engine\utility::flag_set( var_0 );

        if ( scripts\engine\utility::flag_exist( var_0 + "_completed" ) )
        {
            level endon( "game_ended" );
            scripts\engine\utility::flag_wait( var_0 + "_completed" );
        }
    }
}

zombiehud( var_0 )
{
    if ( !isdefined( level.binoculars_getpendingendtime ) )
        level.binoculars_getpendingendtime = [];

    level.binoculars_getpendingendtime = scripts\engine\utility::array_add( level.binoculars_getpendingendtime, var_0 );
}

zombieingas( var_0 )
{
    if ( !isdefined( level.binoculars_getpendingtime ) )
        level.binoculars_getpendingtime = [];

    level.binoculars_getpendingtime = scripts\engine\utility::array_add( level.binoculars_getpendingtime, var_0 );
}

strike_setup_arrays( var_0, var_1 )
{
    if ( !isdefined( level.scripted_spawners ) )
        level.scripted_spawners = [];

    if ( !isdefined( level.scripted_spawners_triggers ) )
        level.scripted_spawners_triggers = [];

    if ( !isdefined( level.scripted_spawners_models ) )
        level.scripted_spawners_models = [];

    if ( !isdefined( level.cs_origin_offset ) )
        level.cs_origin_offset = [];

    if ( !isdefined( level.cs_angle_offset ) )
        level.cs_angle_offset = [];

    if ( !isdefined( level.cs_scripted_spawners ) )
        level.cs_scripted_spawners = [];

    if ( !isdefined( level.cs_scripted_spawners_triggers ) )
        level.cs_scripted_spawners_triggers = [];

    if ( !isdefined( level.cs_scripted_spawners_models ) )
        level.cs_scripted_spawners_models = [];

    if ( isdefined( var_0 ) && !isdefined( level.scripted_spawners[var_0] ) )
        level.scripted_spawners[var_0] = [];

    if ( isdefined( var_0 ) && !isdefined( level.scripted_spawners_triggers[var_0] ) )
        level.scripted_spawners_triggers[var_0] = [];

    if ( isdefined( var_0 ) && !isdefined( level.scripted_spawners_models[var_0] ) )
        level.scripted_spawners_models[var_0] = [];

    if ( isdefined( var_0 ) && !isdefined( level.cs_scripted_spawners[var_0] ) )
        level.cs_scripted_spawners[var_0] = [];

    if ( isdefined( var_0 ) && !isdefined( level.cs_scripted_spawners_triggers[var_0] ) )
        level.cs_scripted_spawners_triggers[var_0] = [];

    if ( isdefined( var_0 ) && !isdefined( level.cs_scripted_spawners_models[var_0] ) )
        level.cs_scripted_spawners_models[var_0] = [];

    if ( !isdefined( level.cs_object_container ) )
        level.cs_object_container = [];

    if ( isdefined( var_1 ) && !isdefined( level.cs_object_container[var_1] ) )
        level.cs_object_container[var_1] = self;
}

strike_additem( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13, var_14, var_15 )
{
    level endon( "game_ended" );

    if ( !var_0 start_static_klaxon_lights() )
        return;

    if ( isdefined( level.cs_creation_counter ) && !cs_is_starttime() )
    {
        level.cs_creation_counter++;

        if ( level.cs_creation_counter % 25 == 0 )
            waitframe();
    }

    if ( isdefined( var_3 ) )
        var_0.origin = var_3;

    if ( isdefined( var_4 ) )
        var_0.angles = var_4;
    else if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, 0, 0 );

    if ( isdefined( var_5 ) )
        var_0.targetname = var_5;

    if ( isdefined( var_6 ) )
        var_0.target = var_6;

    if ( isdefined( var_7 ) )
        var_0.script_noteworthy = var_7;

    if ( isdefined( var_8 ) )
        var_0.script_linkto = var_8;

    if ( isdefined( var_9 ) )
        var_0.script_linkname = var_9;

    if ( isdefined( var_13 ) )
        var_0.speed = var_13;

    if ( isdefined( var_12 ) )
        var_0.radius = var_12;

    if ( isdefined( var_14 ) )
        var_0.spawnflags = int( var_14 );

    if ( isdefined( var_15 ) )
        var_0.script_unload = var_15;

    translate_position_with_offset_data( var_2, var_0, var_10, var_11 );

    if ( !isdefined( var_1 ) )
        var_1 = "_";

    strike_fixautokvps( var_0, var_1 );
    typecast_kvps( var_0 );

    if ( isdefined( self.objects ) )
        self.objects[self.objects.size] = var_0;

    if ( isdefined( var_0.model ) )
    {
        if ( istrue( var_0.is_cs_model ) )
            var_0.is_cs_model = undefined;

        strike_modelcreate( var_0, var_1 );
    }
    else
    {
        if ( isdefined( var_0.targetname ) )
        {
            if ( istrue( var_0.is_cs_trigger ) )
            {
                var_0.is_cs_trigger = undefined;
                strike_triggercreate( var_0, var_1, 1 );
                return;
            }

            if ( istrue( var_0.is_cs_model ) )
            {
                strike_modelcreate( var_0, var_1 );
                var_0.is_cs_model = undefined;
                return;
            }

            if ( istrue( var_0.pointblank_tomahawk ) )
            {
                var_0.pointblank_tomahawk = undefined;
                _id_1253B( var_0, var_1 );
                return;
            }

            switch ( var_0.targetname )
            {
                case "trigger_spawn":
                    strike_triggercreate( var_0, var_1 );
                    break;
                case "trigger_fallback":
                    strike_triggercreate( var_0, var_1 );
                    break;
                case "module_update":
                    strike_triggercreate( var_0, var_1, 1 );
                    break;
                case "cs_trigger":
                    strike_triggercreate( var_0, var_1, 1 );
                    break;
                case "interaction":
                    strike_interactioncreate( var_0, var_1 );
                    break;
                case "trigger_kill_floodspawner":
                    strike_triggercreate( var_0, var_1, 1 );
                    break;
                default:
                    strike_addstructtolevel( var_0, 0, var_1 );
                    break;
            }

            return;
            return;
            return;
            return;
        }

        strike_addstructtolevel( var_0, 0, var_1 );
    }
}

start_static_klaxon_lights()
{
    var_0 = 0;
    var_1 = 0;

    if ( isdefined( level.binoculars_getpendingendtime ) )
    {
        if ( isdefined( self.script_gameobjectname ) )
        {
            for ( var_2 = 0; var_2 < level.binoculars_getpendingendtime.size; var_2++ )
            {
                if ( getsubstr( level.binoculars_getpendingendtime[var_2], 0, 1 ) == "!" )
                    var_3 = 1;
                else
                    var_3 = 0;

                if ( power_wave_mode_reset_playerdata( self.script_gameobjectname, level.binoculars_getpendingendtime[var_2] ) != var_3 )
                {
                    var_0 = 1;
                    break;
                }
            }
        }
        else
            var_0 = 1;
    }
    else
        var_0 = 1;

    if ( isdefined( level.binoculars_getpendingtime ) )
    {
        if ( isdefined( self.script_gameobjectname ) )
        {
            for ( var_2 = 0; var_2 < level.binoculars_getpendingtime.size; var_2++ )
            {
                if ( getsubstr( level.binoculars_getpendingtime[var_2], 0, 1 ) == "!" )
                    var_3 = 1;
                else
                    var_3 = 0;

                if ( power_wave_mode_reset_playerdata( self.script_gameobjectname, level.binoculars_getpendingtime[var_2] ) != var_3 )
                {
                    var_1 = 1;
                    break;
                }
            }
        }
        else
            var_1 = 1;
    }
    else
        var_1 = 1;

    return istrue( var_0 && var_1 );
}

power_wave_mode_reset_playerdata( var_0, var_1 )
{
    if ( !isdefined( var_0 ) || var_0 == "" || !isdefined( var_1 ) || var_1 == "" )
        return 0;

    return issubstr( var_0, var_1 );
}

translate_position_with_offset_data( var_0, var_1, var_2, var_3 )
{
    _id_12866( var_0, var_1 );

    if ( isdefined( var_2 ) )
    {
        if ( !isdefined( var_3 ) )
            var_3 = ( 0, 0, 0 );

        var_4 = ( 0, 0, 0 );

        if ( isdefined( var_1.angles ) )
            var_4 = var_1.angles;

        var_5 = var_1.origin;
        var_1.origin = var_2 + rotatevector( var_5, var_3 );

        if ( isdefined( var_1.script_origin_other ) )
            var_1.script_origin_other = var_2 + rotatevector( var_1.script_origin_other, var_3 );

        var_6 = combineangles( var_3, var_4 );
        var_1.angles = var_6;
    }
}

_id_12866( var_0, var_1 )
{
    if ( isdefined( var_0 ) && isdefined( level.cs_origin_offset ) && isdefined( level.cs_angle_offset[var_0] ) )
    {
        var_2 = level.cs_angle_offset[var_0];
        var_3 = level.cs_origin_offset[var_0];
        var_4 = ( 0, 0, 0 );

        if ( isdefined( var_1.angles ) )
            var_4 = var_1.angles;

        var_5 = var_1.origin;
        var_1.origin = var_3 + rotatevector( var_5, var_2 );

        if ( isdefined( var_1.script_origin_other ) )
            var_1.script_origin_other = var_3 + rotatevector( var_1.script_origin_other, var_2 );

        var_6 = combineangles( var_2, var_4 );
        var_1.angles = var_6;
    }
}

strike_add_to_cs_arrays( var_0, var_1, var_2 )
{
    if ( !getdvarint( "scr_enable_create_script", 0 ) )
        return;

    if ( var_0 == "struct" )
        level.scripted_spawners[var_2][level.scripted_spawners[var_2].size] = var_1;
    else if ( var_0 == "trigger" )
        level.scripted_spawners_triggers[var_2][level.scripted_spawners_triggers[var_2].size] = var_1;
    else if ( var_0 == "model" )
        level.scripted_spawners_models[var_2][level.scripted_spawners_models[var_2].size] = var_1;
}

strike_interactioncreate( var_0, var_1 )
{
    strike_addstructtolevel( var_0, 1, var_1 );
}

_id_1253B( var_0, var_1 )
{
    var_2 = spawn( "script_origin", var_0.origin );

    if ( !isdefined( var_0.angles ) )
        var_2.angles = ( 0, 0, 0 );
    else
        var_2.angles = var_0.angles;

    if ( isdefined( var_0.model ) )
        var_2 setmodel( var_0.model );

    if ( isdefined( var_0.targetname ) )
        var_2.targetname = var_0.targetname;

    if ( isdefined( var_0.script_noteworthy ) )
        var_2.script_noteworthy = var_0.script_noteworthy;

    if ( isdefined( var_0.script_linkto ) )
        var_2.script_linkto = var_0.script_linkto;

    if ( isdefined( var_0.script_linkname ) )
        var_2.script_linkname = var_0.script_linkname;

    if ( isdefined( var_0.target ) )
        var_2.target = var_0.target;

    var_2.struct = var_0;

    if ( isdefined( self.objects ) )
        self.objects[self.objects.size] = var_2;
}

strike_modelcreate( var_0, var_1 )
{
    strike_add_to_cs_arrays( "model", var_0, var_1 );
    var_2 = spawn( "script_model", var_0.origin );

    if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, 0, 0 );

    var_2.angles = var_0.angles;
    var_2 setmodel( var_0.model );

    if ( isdefined( var_0.targetname ) )
        var_2.targetname = var_0.targetname;

    if ( isdefined( var_0.script_noteworthy ) )
        var_2.script_noteworthy = var_0.script_noteworthy;

    if ( isdefined( var_0.script_linkto ) )
        var_2.script_linkto = var_0.script_linkto;

    if ( isdefined( var_0.script_linkname ) )
        var_2.script_linkname = var_0.script_linkname;

    if ( isdefined( var_0.target ) )
        var_2.target = var_0.target;

    if ( isdefined( var_0.name ) )
        var_2.name = var_0.name;

    var_2.struct = var_0;

    if ( isdefined( self.objects ) )
        self.objects[self.objects.size] = var_2;
}

strike_triggercreate( var_0, var_1, var_2 )
{
    strike_add_to_cs_arrays( "trigger", var_0, var_1 );
    var_3 = spawn( "trigger_rotatable_radius", var_0.origin, 0, int( var_0.radius ), int( var_0.height ) );

    if ( isdefined( var_0.angles ) && var_0.angles != ( 0, 0, 0 ) )
    {
        if ( istrue( var_2 ) )
            var_3.angles = var_0.angles;
        else
            var_3.angles = ( -90, 0, 0 ) + var_0.angles;
    }

    var_3.struct = var_0;

    if ( isdefined( self.objects ) )
        self.objects[self.objects.size] = var_3;

    var_3 strike_triggerassignvalues( var_0 );
}

strike_triggerassignvalues( var_0 )
{
    if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, 0, 0 );

    if ( isdefined( var_0.script_label ) )
        self.script_label = var_0.script_label;

    if ( isdefined( var_0.script_function ) )
        self.script_function = var_0.script_function;

    if ( isdefined( var_0.script_noteworthy ) )
        self.script_noteworthy = var_0.script_noteworthy;

    if ( isdefined( var_0.script_gesture ) )
        self.script_gesture = var_0.script_gesture;

    if ( isdefined( var_0.target ) )
        self.target = var_0.target;

    if ( isdefined( var_0.script_wtf ) )
        self.script_wtf = var_0.script_wtf;

    if ( isdefined( var_0.script_flag ) )
        self.script_flag = var_0.script_flag;

    if ( isdefined( var_0.script_linkto ) )
        self.script_linkto = var_0.script_linkto;

    if ( isdefined( var_0.script_linkname ) )
        self.script_linkname = var_0.script_linkname;

    if ( isdefined( var_0.groupname ) )
        self.groupname = var_0.groupname;

    if ( isdefined( var_0.script_count ) )
        self.script_count = var_0.script_count;

    if ( isdefined( var_0.script_count_min ) )
        self.script_count_min = var_0.script_count_min;

    if ( isdefined( var_0.script_count_max ) )
        self.script_count_max = var_0.script_count_max;

    if ( isdefined( var_0.script_maxdist ) )
        self.script_maxdist = var_0.script_maxdist;

    self.targetname = var_0.targetname;
}

strike_addstructtolevel( var_0, var_1, var_2 )
{
    if ( isdefined( var_0.target ) )
        frag_crate_use( "target", var_0.target, var_0 );

    if ( isdefined( var_0.script_linkname ) )
        frag_crate_use( "script_linkname", var_0.script_linkname, var_0 );

    if ( isdefined( var_0.targetname ) )
        frag_crate_use( "targetname", var_0.targetname, var_0 );

    if ( isdefined( var_0.script_noteworthy ) )
        frag_crate_use( "script_noteworthy", var_0.script_noteworthy, var_0 );
}

frag_crate_use( var_0, var_1, var_2 )
{
    if ( !isdefined( level.struct_class_names[var_0][var_1] ) )
        level.struct_class_names[var_0][var_1] = [];

    level.struct_class_names[var_0][var_1][level.struct_class_names[var_0][var_1].size] = var_2;
}

strike_fixautokvps( var_0, var_1 )
{
    if ( isdefined( var_0.target ) && issubstr( var_0.target, "auto" ) )
        var_0.target = "CS|" + var_1 + var_0.target;

    if ( isdefined( var_0.targetname ) && issubstr( var_0.targetname, "auto" ) )
        var_0.targetname = "CS|" + var_1 + var_0.targetname;

    if ( isdefined( var_0.script_linkto ) )
    {
        var_2 = "";
        var_3 = strtok( var_0.script_linkto, " " );

        foreach ( var_6, var_5 in var_3 )
        {
            if ( var_6 != 0 )
            {
                if ( int( var_0.script_linkto ) == 0 )
                    var_2 = var_2 + " " + var_5;
                else
                    var_2 = var_2 + " " + "CS|" + var_1 + var_5;

                continue;
            }

            if ( int( var_0.script_linkto ) == 0 )
            {
                var_2 = var_2 + var_5;
                continue;
            }

            var_2 = var_2 + "CS|" + var_1 + var_5;
        }

        var_0.script_linkto = var_2;
    }

    if ( isdefined( var_0.script_linkname ) )
    {
        if ( int( var_0.script_linkname ) != 0 )
            var_0.script_linkname = "CS|" + var_1 + var_0.script_linkname;
    }
}

typecast_kvps( var_0 )
{
    if ( istrue( var_0.ishelistruct ) )
    {
        if ( isdefined( var_0.script_unload ) )
            var_0.script_unload = int( var_0.script_unload );
    }

    if ( isdefined( var_0.script_wait_min ) )
        var_0.script_wait_min = float( var_0.script_wait_min );

    if ( isdefined( var_0.script_wait_max ) )
        var_0.script_wait_max = float( var_0.script_wait_max );

    if ( isdefined( var_0.script_wait_add ) )
        var_0.script_wait_add = float( var_0.script_wait_add );

    if ( isdefined( var_0.script_brake ) )
        var_0.script_brake = float( var_0.script_brake );

    if ( isdefined( var_0.lookahead ) )
        var_0.lookahead = int( var_0.lookahead );

    if ( isdefined( var_0.speed ) )
        var_0.speed = int( var_0.speed );

    if ( isdefined( var_0.script_accel ) )
        var_0.script_accel = int( var_0.script_accel );

    if ( isdefined( var_0.script_decel ) )
        var_0.script_decel = int( var_0.script_decel );

    if ( isdefined( var_0.script_speed ) )
        var_0.script_speed = int( var_0.script_speed );

    if ( isdefined( var_0.script_goalyaw ) )
    {
        if ( var_0.script_goalyaw == "true" || var_0.script_goalyaw == "1" )
            var_0.script_goalyaw = 1;
        else
            var_0.script_goalyaw = undefined;
    }

    if ( isdefined( var_0.script_anglevehicle ) )
    {
        if ( var_0.script_anglevehicle == "true" || var_0.script_anglevehicle == "1" )
            var_0.script_goalyaw = 1;
        else
            var_0.script_goalyaw = undefined;
    }

    if ( isdefined( var_0.script_delay ) )
        var_0.script_delay = float( var_0.script_delay );

    if ( isdefined( var_0.script_ignoreme ) )
        var_0.script_ignoreme = int( var_0.script_ignoreme );

    if ( isdefined( var_0.script_ignoreall ) )
        var_0.script_ignoreall = int( var_0.script_ignoreall );

    if ( isdefined( var_0.script_death ) )
        var_0.script_death = int( var_0.script_death );

    if ( isdefined( var_0.script_wait ) )
        var_0.script_wait = float( var_0.script_wait );

    if ( isdefined( var_0.script_forcespawn ) )
        var_0.script_forcespawn = int( var_0.script_forcespawn );

    if ( isdefined( var_0.script_timer ) )
        var_0.script_timer = int( var_0.script_timer );

    if ( isdefined( var_0.script_dist_only ) )
        var_0.script_dist_only = int( var_0.script_dist_only ) * int( var_0.script_dist_only );

    if ( isdefined( var_0.script_speed ) )
        var_0.script_speed = int( var_0.script_speed );

    if ( isdefined( var_0.script_count ) )
        var_0.script_count = int( var_0.script_count );

    if ( isdefined( var_0.script_radius ) )
        var_0.script_radius = int( var_0.script_radius );

    if ( isdefined( var_0.script_delay_min ) )
        var_0.script_delay_min = float( var_0.script_delay_min );

    if ( isdefined( var_0.script_delay_max ) )
        var_0.script_delay_max = float( var_0.script_delay_max );

    if ( isdefined( var_0.script_escalation_level ) )
        var_0.script_escalation_level = int( var_0.script_escalation_level );

    if ( isdefined( var_0.script_goalheight ) )
        var_0.script_goalheight = int( var_0.script_goalheight );

    if ( isdefined( var_0.script_timeout ) )
        var_0.script_timeout = float( var_0.script_timeout );

    if ( isdefined( var_0.script_pacifist ) )
        var_0.script_pacifist = int( var_0.script_pacifist );

    if ( isdefined( var_0.script_forcespawn ) )
        var_0.script_forcespawn = int( var_0.script_forcespawn );

    if ( isdefined( var_0.dontkilloff ) )
        var_0.dontkilloff = int( var_0.dontkilloff );

    if ( isdefined( var_0.script_origin_other ) )
        var_0.script_origin_other = var_0.script_origin_other;

    if ( isdefined( var_0.script_dot ) )
        var_0.script_dot = int( var_0.script_dot );

    if ( isdefined( var_0.script_ignoreall ) )
        var_0.script_ignoreall = int( var_0.script_ignoreall );
}

cs_is_starttime()
{
    if ( scripts\common\utility::iscp() )
        return gettime() <= level.starttime + 250;
    else
        return gettime() <= level.starttimeutcseconds + 250;
}

cs_init_flags( var_0 )
{
    if ( !scripts\engine\utility::flag_exist( "strike_init_done" ) )
        scripts\engine\utility::flag_init( "strike_init_done" );

    if ( !scripts\engine\utility::flag_exist( "create_script_initialized" ) )
        scripts\engine\utility::flag_init( "create_script_initialized" );

    var_0.objects = [];
    var_0 scripts\engine\utility::ent_flag_init( "cs_structs_complete" );
    var_0 scripts\engine\utility::ent_flag_init( "cs_models_complete" );
    var_0 scripts\engine\utility::ent_flag_init( "cs_triggers_complete" );
}

free_landing_spots( var_0 )
{
    if ( !scripts\engine\utility::flag_exist( "strike_init_done" ) )
        scripts\engine\utility::flag_init( "strike_init_done" );

    if ( !scripts\engine\utility::flag_exist( "create_script_initialized" ) )
        scripts\engine\utility::flag_init( "create_script_initialized" );

    var_0.objects = [];
    var_0 scripts\engine\utility::ent_flag_init( "cs_structs_complete" );
}

wait_for_flags( var_0, var_1 )
{
    if ( var_0 scripts\engine\utility::ent_flag_exist( "cs_structs_complete" ) )
        var_0 scripts\engine\utility::ent_flag_wait( "cs_structs_complete" );

    if ( var_0 scripts\engine\utility::ent_flag_exist( "cs_models_complete" ) )
        var_0 scripts\engine\utility::ent_flag_wait( "cs_models_complete" );

    if ( var_0 scripts\engine\utility::ent_flag_exist( "cs_triggers_complete" ) )
        var_0 scripts\engine\utility::ent_flag_wait( "cs_triggers_complete" );

    scripts\engine\utility::flag_set( var_1 + "_completed" );

    if ( cs_is_starttime() )
        endcreatescript( var_0 );
}

endcreatescript( var_0 )
{
    if ( isdefined( level.createscriptfilesinitialized ) )
    {
        level.createscriptfilesinitialized++;

        if ( level.createscriptfilesinitialized >= level.scripted_spawner_func.size )
        {
            scripts\engine\utility::flag_set( "strike_init_done" );
            scripts\engine\utility::flag_set( "create_script_initialized" );
        }
    }
    else
    {
        scripts\engine\utility::flag_set( "strike_init_done" );
        scripts\engine\utility::flag_set( "create_script_initialized" );
    }
}

wait_for_cs_flag( var_0 )
{
    level endon( "game_ended" );
    scripts\engine\utility::flag_init( var_0 + "_completed" );

    if ( !should_wait_for_cs_flag( var_0 ) )
    {
        endcreatescript();
        scripts\engine\utility::flag_wait( var_0 );
    }
}

should_wait_for_cs_flag( var_0 )
{
    var_1 = strtok( getdvar( "scr_init_cs_files", "" ), " " );
    var_1 = scripts\engine\utility::array_combine( var_1, level.allammoboxes );

    if ( var_1.size < 1 )
        return 1;

    for ( var_2 = 0; var_2 < var_1.size; var_2++ )
    {
        var_3 = var_1[var_2];

        if ( var_3 == "all" )
            return 1;

        if ( var_0 == var_3 )
            return 1;
    }

    return 0;
}

register_cs_offsets( var_0, var_1, var_2 )
{
    if ( isdefined( var_1 ) )
        level.cs_origin_offset[var_0] = var_1;

    if ( isdefined( var_2 ) )
        level.cs_angle_offset[var_0] = var_2;
}

set_cs_file_dvar( var_0 )
{
    level.allammoboxes[level.allammoboxes.size] = var_0;
}

cleanup_cs_file_objects( var_0 )
{
    scripts\engine\utility::flag_clear( var_0 + "_completed" );
    scripts\engine\utility::flag_clear( var_0 );

    if ( isdefined( level.cs_object_container[var_0] ) && isdefined( level.cs_object_container[var_0].objects ) )
    {
        var_1 = level.cs_object_container[var_0].objects;

        for ( var_2 = 0; var_2 < var_1.size; var_2++ )
        {
            var_3 = var_1[var_2];
            level.cs_object_container[var_0].objects[var_2] = undefined;

            if ( isstruct( var_3 ) )
                scripts\engine\utility::deletestruct_ref( var_3 );

            if ( isent( var_3 ) )
                var_3 delete();
        }
    }
}

s()
{
    return spawnstruct();
}

_id_121B8( var_0 )
{
    var_1 = scripts\engine\utility::getstructarray( var_0, "targetname" );

    foreach ( var_3 in var_1 )
    {
        if ( !isdefined( var_3.angles ) )
            var_3.angles = ( 0, 0, 0 );

        var_4 = "Cover Stand";

        switch ( var_3.spawnposition )
        {
            case "cover_left":
                var_4 = "Cover Left";
                break;
            case "cover_right":
                var_4 = "Cover Right";
                break;
            case "cover_crouch":
                var_4 = "Cover Crouch";
                break;
            case "cover_stand":
                var_4 = "Cover Stand";
                break;
            case "cover_crouch_window":
                var_4 = "Cover Crouch Window";
                break;
            case "conceal_crouch":
                var_4 = "Conceal Crouch";
                break;
            case "cover_exposed":
                var_4 = "Exposed";
            case "turret":
                var_4 = "Turret";
                break;
        }

        var_5 = undefined;

        if ( isdefined( var_3.spawnpoint_setspawnpoint ) )
            var_5 = var_3.spawnpoint_setspawnpoint;

        var_6 = 0;

        if ( isdefined( var_3.spawnwalltriggers ) && int( var_3.spawnwalltriggers ) != 0 && var_3.spawnwalltriggers != "false" )
            var_6 = 4;

        if ( isdefined( var_3.spawninsafehouse ) && int( var_3.spawninsafehouse ) != 0 && var_3.spawninsafehouse != "false" )
            var_6 = var_6 + 8;

        if ( isdefined( var_3.spawnsystem_init ) && int( var_3.spawnsystem_init ) != 0 && var_3.spawnsystem_init != "false" )
            var_6 = var_6 + 16;

        var_3.covernode = spawncovernode( var_3.origin, var_3.angles, var_4, var_6, var_5 );

        if ( isdefined( var_3.radius ) )
            var_3.covernode.radius = var_3.radius;
    }

    return var_1;
}

get_wave_cur_count( var_0 )
{
    var_1 = scripts\engine\utility::getstructarray( var_0, "targetname" );

    foreach ( var_3 in var_1 )
    {
        if ( isdefined( var_3.covernode ) )
        {
            despawncovernode( var_3.covernode );
            var_3.covernode = undefined;
        }
    }
}
