// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

assignpersonalmodelents( var_0 )
{
    if ( getdvarint( "scr_use_personal_ents", 1 ) )
    {
        if ( !isdefined( var_0.personalents ) || var_0.personalents.size < 1 )
        {
            var_0.personalents = [];
            var_0 scripts\engine\utility::ent_flag_init( "personal_ents_updating" );

            for ( var_1 = 0; var_1 < 20; var_1++ )
            {
                var_2 = spawn( "script_model", ( 0, 0, -5000 ) );
                var_2.ogorigin = ( 0, 0, -5000 );
                var_2 setmodel( "tag_origin" );
                var_2.claimed = 0;
                var_2.used = 0;
                adjustmodelvis( var_0, var_2 );
                var_0.personalents[var_0.personalents.size] = var_2;
            }
        }

        give_scout_drone( var_0 );
        level thread deletepentsondisconnect( var_0 );
        level thread deletepentsonrespawn( var_0 );
    }
}

deletepentsonrespawn( var_0 )
{
    var_0 notify( "deletePEntsOnRespawn" );
    var_0 endon( "deletePEntsOnRespawn" );
    var_0 endon( "disconnect" );
    level endon( "game_ended" );
    var_0 waittill( "respawn_player", var_1 );

    if ( !isdefined( var_0 ) )
        return;

    if ( !isdefined( var_0.personalents ) )
        return;

    for ( var_2 = 0; var_2 < var_0.personalents.size; var_2++ )
    {
        if ( isdefined( var_0.personalents[var_2] ) )
            var_0.personalents[var_2] delete();
    }

    var_0.personalents = [];
}

deletepentsondisconnect( var_0 )
{
    level endon( "game_ended" );
    var_0 notify( "deletePEntsOnDisconnect" );
    var_0 endon( "deletePEntsOnDisconnect" );
    var_0 waittill( "disconnect" );

    if ( !isdefined( var_0.personalents ) )
        return;

    for ( var_1 = 0; var_1 < var_0.personalents.size; var_1++ )
    {
        if ( isdefined( var_0.personalents[var_1] ) )
            var_0.personalents[var_1] delete();
    }
}

registerpentparams( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 )
{
    var_11 = spawnstruct();
    var_11.type = var_1;
    var_11.icon = var_2;
    var_11.hintstring = var_3;
    var_11.priority = var_4;
    var_11.duration = var_5;
    var_11.onobstruction = var_6;
    var_11.hintdist = var_7;
    var_11.hintfov = var_8;
    var_11.usedist = var_9;
    var_11.usefov = var_10;
    var_11.hint_func = level.interactions[var_0].hint_func;
    var_11.activation_func = level.interactions[var_0].activation_func;
    level.pentparams[var_0] = var_11;
    level.interactions[var_0].hint_func = undefined;
    level.interactions[var_0].activation_func = undefined;
}

pentparamsdefined( var_0 )
{
    return isdefined( level.pentparams[var_0] );
}

getpentparams( var_0 )
{
    return level.pentparams[var_0];
}

createpenthintobj( var_0, var_1, var_2 )
{
    var_3 = scripts\cp\utility::createhintobject( var_1.origin, var_0.type, var_0.icon, var_0.hintstring, var_0.priority, var_0.duration, var_0.onobstruction, var_0.hintdist, var_0.hintfov, var_0.usedist, var_0.usefov );
    return var_3;
}

addtopersonalinteractionlist( var_0 )
{
    var_0 notify( "addToPersonalInteractionList" );

    if ( !scripts\engine\utility::array_contains( level.current_personal_interaction_structs, var_0 ) )
    {
        level.current_personal_interaction_structs = scripts\engine\utility::array_add( level.current_personal_interaction_structs, var_0 );

        if ( scripts\engine\utility::flag_exist( "personal_ent_zones_initialized" ) && scripts\engine\utility::flag( "personal_ent_zones_initialized" ) )
        {
            if ( isdefined( level.personal_ent_zones ) && level.personal_ent_zones.size > 0 )
            {
                foreach ( var_2 in level.personal_ent_zones )
                {
                    if ( !isdefined( var_2.attached_pents ) )
                        continue;

                    if ( !isdefined( var_0.p_ent_zones ) )
                        continue;

                    if ( ispointinvolume( var_0.origin, var_2 ) )
                    {
                        var_2.attached_pents[var_2.attached_pents.size] = var_0;
                        var_0.p_ent_zones[var_0.p_ent_zones.size] = var_2;
                        var_2.attached_pents = scripts\engine\utility::array_remove_duplicates( var_2.attached_pents );
                    }
                }
            }
        }
    }

    update_special_mode_for_all_players( 1 );
}

removefrompersonalinteractionlist( var_0 )
{
    var_0 notify( "removeFromPersonalInteractionList" );

    if ( scripts\engine\utility::array_contains( level.current_personal_interaction_structs, var_0 ) )
    {
        level.current_personal_interaction_structs = scripts\engine\utility::array_remove( level.current_personal_interaction_structs, var_0 );

        if ( scripts\engine\utility::flag_exist( "personal_ent_zones_initialized" ) && scripts\engine\utility::flag( "personal_ent_zones_initialized" ) )
        {
            if ( isdefined( var_0.p_ent_zones ) )
            {
                foreach ( var_2 in var_0.p_ent_zones )
                {
                    var_2.attached_pents = scripts\engine\utility::array_remove( var_2.attached_pents, var_0 );
                    var_2.attached_pents = scripts\engine\utility::array_remove_duplicates( var_2.attached_pents );
                }
            }
        }
    }

    update_special_mode_for_all_players( 1 );
}

delayed_remove_peent_interaction( var_0 )
{
    wait 0.25;
    removefrompersonalinteractionlist( var_0 );
    scripts\cp\cp_interaction::remove_from_current_interaction_list( var_0 );
}

movepentstostructs( var_0 )
{
    var_0 endon( "disconnect" );
    var_0 notify( "movePEntsToStructs" );
    var_0 endon( "movePEntsToStructs" );

    if ( !scripts\engine\utility::flag( "init_interaction_done" ) )
        scripts\engine\utility::flag_wait( "init_interaction_done" );

    for (;;)
    {
        if ( var_0 scripts\engine\utility::ent_flag_exist( "personal_ents_updating" ) )
            var_0 scripts\engine\utility::ent_flag_set( "personal_ents_updating" );

        var_6 = 0;
        var_7 = 0;

        if ( isdefined( var_0.all_available_pents ) )
            var_8 = var_0.all_available_pents;
        else
            var_8 = scripts\engine\utility::get_array_of_closest( var_0.origin, level.current_personal_interaction_structs, undefined, 100 );

        if ( var_8.size > 0 )
        {
            var_8 = removeinvalidstructs( var_8, var_0 );
            var_0 resetents( var_0, var_8 );

            foreach ( var_10 in var_8 )
            {
                var_11 = undefined;

                if ( isdefined( var_10.target ) )
                    var_11 = scripts\engine\utility::getstruct( var_10.target, "targetname" );

                if ( var_10 hasplayerentattached( var_0, var_10 ) )
                {
                    var_12 = getattachedpersonalent( var_0, var_10 );

                    if ( isdefined( var_12 ) )
                    {
                        if ( isdefined( var_10.pentmodel ) && var_10.pentmodel != var_12.model )
                            var_12 setmodel( var_10.pentmodel );

                        if ( istrue( var_0.force_p_ent_reset ) )
                        {
                            if ( struct_has_advanced_settings( var_10 ) )
                                var_12 thread pentadvancedoptions( 0, var_10, var_12, var_0, var_11 );
                        }
                    }

                    continue;
                }

                var_12 = getunclaimedpersonalent( var_0, var_8 );

                if ( isdefined( var_12 ) )
                {
                    if ( player_can_see_p_ent( var_10, var_0 ) )
                        continue;

                    var_10.awaitingpent = 1;
                    var_12 dontinterpolate();

                    if ( isdefined( var_11 ) )
                    {
                        var_12.origin = var_11.origin;

                        if ( isdefined( var_11.angles ) )
                            var_12.angles = var_11.angles;
                        else
                            var_12.angles = ( 0, 0, 0 );
                    }
                    else
                    {
                        var_12.origin = var_10.origin;

                        if ( isdefined( var_10.angles ) )
                            var_12.angles = var_10.angles;
                        else
                            var_12.angles = ( 0, 0, 0 );
                    }

                    if ( isdefined( var_10.pentmodel ) )
                        thread pentdelaysetmodel( var_0, var_12, var_10 );
                    else
                    {

                    }

                    if ( struct_has_advanced_settings( var_10 ) )
                        var_12 thread pentadvancedoptions( 0, var_10, var_12, var_0, var_11 );
                }
            }
        }

        var_0.force_p_ent_reset = undefined;
        wait 0.25;

        if ( var_0 scripts\engine\utility::ent_flag_exist( "personal_ents_updating" ) )
            var_0 scripts\engine\utility::ent_flag_clear( "personal_ents_updating" );

        var_0 notify( "pEntsUpdated" );
        var_0 scripts\engine\utility::waittill_any_in_array_return_no_endon_death( [ "zone_change", "updatePEnts" ] );
    }
}

player_can_see_p_ent( var_0, var_1 )
{
    if ( istrue( var_0.p_ent_skip_fov ) )
        return 0;
    else if ( isdefined( level.pentskipfov ) && istrue( level.pentskipfov[var_0.script_noteworthy] ) )
        return 0;
    else
    {
        var_2 = scripts\engine\utility::within_fov( var_1 geteye(), var_1 getplayerangles(), var_0.origin, cos( 65 ) );

        if ( var_2 )
        {
            var_3 = scripts\engine\trace::ray_trace_passed( var_1 geteye(), var_0.origin, scripts\engine\utility::array_combine( level.players, var_1.personalents ) );

            if ( var_3 )
            {
                return 1;
                return;
            }

            return 0;
            return;
        }
        else
            return 0;
    }
}

struct_has_advanced_settings( var_0 )
{
    if ( isdefined( var_0.script_noteworthy ) )
        var_1 = var_0.script_noteworthy;
    else
        return 0;

    if ( istrue( var_0.pentadvanced ) )
        return 1;
    else if ( isdefined( level.normal_mode_activation_funcs[var_1] ) )
        return 1;
    else if ( isdefined( level.special_mode_activation_funcs[var_1] ) )
        return 1;
    else if ( pentparamsdefined( var_0.script_noteworthy ) )
        return 1;
    else
        return 0;
}

pentdelaysetmodel( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_1 endon( "p_ent_reset" );
    var_1.claimed = 1;
    var_1.parentstruct = var_2;

    if ( !isdefined( var_2.linkedpents ) )
        var_2.linkedpents = [];

    var_2.linkedpents[var_2.linkedpents.size] = var_1;
    var_1.used = 1;

    if ( player_can_see_p_ent( var_2, var_0 ) )
    {
        var_1 resetpersonalent( var_1, var_0 );
        return;
    }

    wait 0.1;
    var_1 setmodel( var_2.pentmodel );

    if ( isdefined( var_2.expectedstate ) )
        var_1 setscriptablepartstate( var_2.expectedstate[0], var_2.expectedstate[1], 1 );

    var_2.awaitingpent = undefined;
}

update_special_mode_for_player( var_0, var_1 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_0 notify( "update_special_mode_for_player" );
    var_0 endon( "update_special_mode_for_player" );

    if ( istrue( var_1 ) )
    {

    }

    if ( var_0 scripts\engine\utility::ent_flag_exist( "personal_ents_updating" ) && var_0 scripts\engine\utility::ent_flag( "personal_ents_updating" ) )
        var_0 scripts\engine\utility::ent_flag_waitopen( "personal_ents_updating" );

    var_0 notify( "updatePEnts" );
}

update_special_mode_for_all_players( var_0 )
{
    level endon( "game_ended" );

    foreach ( var_2 in level.players )
        thread update_special_mode_for_player( var_2, var_0 );
}

resetents( var_0, var_1 )
{
    var_2 = [];
    var_3 = undefined;
    var_4 = undefined;

    foreach ( var_6 in var_0.personalents )
    {
        if ( !isent( var_6 ) )
            continue;

        var_7 = 0;

        foreach ( var_4 in var_1 )
        {
            if ( isdefined( var_4.playeroffset ) && isdefined( var_4.playeroffset[var_0.name] ) )
            {
                if ( var_6.origin == var_4.playeroffset[var_0.name] )
                {
                    var_3 = var_4.script_noteworthy;
                    var_7 = 1;
                    break;
                }
            }

            if ( isdefined( var_4.target ) )
            {
                var_9 = scripts\engine\utility::getstruct( var_4.target, "targetname" );

                if ( isdefined( var_9 ) && var_6.origin == var_9.origin )
                {
                    var_3 = var_4.script_noteworthy;
                    var_7 = 1;
                    break;
                }
                else if ( var_6.origin == var_4.origin )
                {
                    var_3 = var_4.script_noteworthy;
                    var_7 = 1;
                    break;
                }

                continue;
            }

            if ( var_6.origin == var_4.origin )
            {
                var_3 = var_4.script_noteworthy;
                var_7 = 1;
                break;
            }
        }

        if ( !var_7 )
        {
            if ( isdefined( var_4 ) && player_can_see_p_ent( var_4, var_0 ) )
                continue;

            var_6 resetpersonalent( var_6, var_0 );
        }
    }

    wait 0.1;
}

removeinvalidstructs( var_0, var_1 )
{
    var_2 = [];
    var_0 = sortbydistance( var_0, var_1.origin );

    foreach ( var_4 in var_0 )
    {
        if ( isdefined( var_1.disabled_interactions ) && scripts\engine\utility::array_contains( var_1.disabled_interactions, var_4 ) )
            continue;

        if ( isdefined( var_4.in_array ) )
        {
            if ( !istrue( var_4.in_array ) )
                continue;
        }
        else if ( isdefined( level.current_interaction_structs ) && !scripts\engine\utility::array_contains( level.current_interaction_structs, var_4 ) )
            continue;

        if ( isdefined( var_4.target ) )
        {
            var_5 = scripts\engine\utility::getstructarray( var_4.targetname, "targetname" );

            foreach ( var_7 in var_5 )
            {
                if ( isdefined( var_7.target ) && var_7.target == var_4.target )
                    var_0 = scripts\engine\utility::array_remove( var_0, var_7 );
            }

            var_2[var_2.size] = var_4;

            if ( var_2.size >= 20 )
                break;

            continue;
        }

        var_2[var_2.size] = var_4;

        if ( var_2.size >= 20 )
            break;
    }

    return var_2;
}

hasplayerentattached( var_0, var_1 )
{
    foreach ( var_3 in var_0.personalents )
    {
        if ( isdefined( var_1.playeroffset ) && isdefined( var_1.playeroffset[var_0.name] ) )
        {
            if ( var_3.origin == var_1.playeroffset[var_0.name] )
            {
                var_3.used = 1;
                return 1;
            }
        }

        if ( isdefined( var_1.target ) )
        {
            var_4 = scripts\engine\utility::getstruct( var_1.target, "targetname" );

            if ( isdefined( var_4 ) && var_3.origin == var_4.origin )
            {
                var_3.used = 1;
                return 1;
            }
        }

        if ( var_3.origin == var_1.origin )
        {
            var_3.used = 1;
            return 1;
        }
    }

    return 0;
}

adjustmodelvis( var_0, var_1 )
{
    foreach ( var_3 in level.players )
    {
        if ( var_3 == var_0 )
        {
            var_1 showtoplayer( var_3 );
            continue;
        }

        var_1 hidefromplayer( var_3 );
    }
}

resetpersonalent( var_0, var_1 )
{
    var_0 setmodel( "tag_origin" );
    var_0.claimed = 0;
    var_0.used = 0;
    var_0 dontinterpolate();
    var_0.origin = var_0.ogorigin;

    if ( isdefined( var_0.parentstruct ) )
    {
        if ( isdefined( var_0.parentstruct.linkedpents ) )
        {
            if ( scripts\engine\utility::array_contains( var_0.parentstruct.linkedpents, var_0 ) )
                var_0.parentstruct.linkedpents = scripts\engine\utility::array_remove( var_0.parentstruct.linkedpents, var_0 );
        }

        var_0.parentstruct notify( "p_ents_updated" );
        var_0.parentstruct = undefined;
    }

    var_0 notify( "p_ent_reset" );
}

getattachedpersonalent( var_0, var_1 )
{
    var_2 = [];

    foreach ( var_4 in var_0.personalents )
    {
        if ( isdefined( var_1.playeroffset ) && isdefined( var_1.playeroffset[var_0.name] ) )
        {
            if ( var_4.origin == var_1.playeroffset[var_0.name] )
                return var_4;
        }

        if ( isdefined( var_1.target ) )
        {
            var_5 = scripts\engine\utility::getstruct( var_1.target, "targetname" );

            if ( isdefined( var_5 ) && var_4.origin == var_5.origin )
                return var_4;
        }

        if ( var_4.origin == var_1.origin )
            return var_4;
    }

    return undefined;
}

getunclaimedpersonalent( var_0, var_1 )
{
    var_2 = [];

    foreach ( var_4 in var_0.personalents )
    {
        var_5 = 0;

        foreach ( var_7 in var_1 )
        {
            if ( isdefined( var_7.playeroffset ) && isdefined( var_7.playeroffset[var_0.name] ) )
            {
                if ( var_4.origin == var_7.playeroffset[var_0.name] )
                {
                    var_5 = 1;
                    break;
                }
            }

            if ( isdefined( var_7.target ) )
            {
                var_8 = scripts\engine\utility::getstruct( var_7.target, "targetname" );

                if ( isdefined( var_8 ) && var_4.origin == var_8.origin )
                {
                    var_5 = 1;
                    break;
                }
            }

            if ( var_4.origin == var_7.origin )
            {
                var_5 = 1;
                break;
            }
        }

        if ( !var_5 )
            return var_4;
    }

    return undefined;
}

watchforplayerzonechange( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    scripts\engine\utility::flag_wait( "init_interaction_done" );
    var_1 = getent( "zone_change", "targetname" );

    if ( isdefined( var_1 ) )
    {
        for (;;)
        {
            if ( var_0 istouching( var_1 ) )
            {
                var_0 notify( "rave_status_changed" );
                wait 1;
                continue;
            }
            else
                wait 0.1;
        }
    }
}

pentadvancedoptions( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = scripts\engine\utility::ter_op( isdefined( var_1.name ), var_1.name, var_1.script_noteworthy );

    if ( isdefined( level.normal_mode_activation_funcs[var_5] ) )
    {
        if ( isdefined( var_4 ) )
            var_2 [[ level.normal_mode_activation_funcs[var_5] ]]( var_2, var_4, 0, var_3 );
        else
            var_2 thread [[ level.normal_mode_activation_funcs[var_5] ]]( var_2, var_1, 0, var_3 );
    }

    if ( pentparamsdefined( var_1.script_noteworthy ) )
    {
        var_6 = createpenthintobj( getpentparams( var_1.script_noteworthy ), var_1, undefined );
        var_2.hintobj = var_6;

        foreach ( var_8 in level.players )
        {
            if ( var_8 == var_3 )
            {
                var_6 enableplayeruse( var_3 );
                continue;
            }

            var_6 disableplayeruse( var_8 );
        }

        thread watch_for_player_trigger( var_2, var_1, var_3, var_6 );
        thread reset_struct_when_pent_moves( var_2, var_1, var_3, var_6 );
        thread watch_for_hintstring_updates( var_2, var_1, var_3, var_6 );
    }
}

reset_struct_when_pent_moves( var_0, var_1, var_2, var_3 )
{
    var_0 notify( "reset_struct_when_pent_moves" );
    var_0 endon( "reset_struct_when_pent_moves" );
    var_1 notify( "reset_struct_when_pent_moves_" + var_2.name );
    var_1 endon( "reset_struct_when_pent_moves_" + var_2.name );
    level endon( "game_ended" );
    scripts\engine\utility::waittill_any_ents( var_0, "p_ent_reset", var_1, "remove_from_current_interaction_list", var_2, "remove_from_current_interaction_list_for_player_" + var_2.name );

    if ( isdefined( var_3 ) && var_3 != var_0 )
        var_3 delete();
    else if ( isdefined( var_3 ) )
        var_3 scripts\cp\utility::clearhintobject( var_3 );

    if ( isdefined( var_0.hintobj ) )
        var_0.hintobj = undefined;

    if ( isdefined( var_0.collision ) )
        var_0.collision delete();

    if ( isdefined( var_1.collision ) )
        var_1.collision delete();

    scripts\cp\cp_interaction::add_to_current_interaction_list_for_player( var_1, var_2 );
    update_special_mode_for_all_players( 1 );
}

give_scout_drone( var_0 )
{
    foreach ( var_2 in level.players )
    {
        if ( var_2 == var_0 )
            continue;

        if ( isdefined( var_2.personalents ) )
        {
            for ( var_3 = 0; var_3 < var_2.personalents.size; var_3++ )
            {
                if ( isdefined( var_2.personalents[var_3] ) )
                {
                    var_2.personalents[var_3] disableplayeruse( var_0 );

                    if ( isdefined( var_2.personalents[var_3].hintobj ) )
                        var_2.personalents[var_3].hintobj disableplayeruse( var_0 );
                }
            }
        }
    }
}

watch_for_player_trigger( var_0, var_1, var_2, var_3 )
{
    var_1 notify( "watch_for_player_trigger_" + var_2.name );
    var_1 endon( "watch_for_player_trigger_" + var_2.name );
    var_0 notify( "watch_for_player_trigger" );
    var_0 endon( "watch_for_player_trigger" );
    var_0 endon( "p_ent_reset" );
    var_4 = getpentinteractionusefunc( var_1 );
    var_0.hintobj = var_3;

    if ( isdefined( var_4 ) )
    {
        for (;;)
        {
            var_3 makeusable();

            foreach ( var_6 in level.players )
            {
                if ( var_6 == var_2 )
                {
                    var_3 enableplayeruse( var_2 );
                    continue;
                }

                var_3 disableplayeruse( var_6 );
            }

            var_3 waittill( "trigger", var_8 );

            if ( isplayer( var_8 ) )
                level thread [[ var_4 ]]( var_1, var_2 );
        }
    }
}

getpentinteractionusefunc( var_0 )
{
    if ( isdefined( level.pentparams[var_0.script_noteworthy].activation_func ) )
        return level.pentparams[var_0.script_noteworthy].activation_func;
    else if ( isdefined( level.interactions[var_0.script_noteworthy].activation_func ) )
        return level.interactions[var_0.script_noteworthy].activation_func;
    else
        return undefined;
}

update_pent_hintstring( var_0, var_1 )
{
    var_0.hintstring = var_1;
    var_0 notify( "pent_update_hint", var_1 );
}

watch_for_hintstring_updates( var_0, var_1, var_2, var_3 )
{
    var_1 endon( "watch_for_player_trigger_" + var_2.name );
    var_0 endon( "watch_for_player_trigger" );
    var_0 endon( "p_ent_reset" );

    for (;;)
    {
        var_1 waittill( "pent_update_hint", var_4 );

        if ( !hasplayerentattached( var_2, var_1 ) )
            return;

        var_3 sethintstring( var_4 );
    }
}

player_run_pent_updates( var_0 )
{
    if ( isdefined( level.personal_ent_zones ) )
        thread update_pents_from_volumes( var_0 );
    else
        thread update_pents_global( var_0 );
}

update_pents_from_volumes( var_0 )
{
    level endon( "game_ended" );
    var_0 notify( "update_pents_from_volumes" );
    var_0 endon( "update_pents_from_volumes" );
    var_0 endon( "disconnect" );

    if ( !scripts\engine\utility::flag_exist( "personal_ent_zones_initialized" ) )
        return;
    else
        scripts\engine\utility::flag_wait( "personal_ent_zones_initialized" );

    for (;;)
    {
        var_0.all_available_pents = [];

        foreach ( var_2 in level.personal_ent_zones )
        {
            if ( ispointinvolume( var_0.origin, var_2 ) )
                var_0.all_available_pents = scripts\engine\utility::array_combine( var_0.all_available_pents, var_2.attached_pents );
        }

        wait 1;
        update_special_mode_for_player( var_0 );
    }
}

update_pents_global( var_0 )
{
    level endon( "game_ended" );
    var_0 notify( "update_pents_from_volumes" );
    var_0 endon( "update_pents_from_volumes" );
    var_0 endon( "disconnect" );

    if ( !scripts\engine\utility::flag_exist( "personal_ent_zones_initialized" ) )
        return;
    else
        scripts\engine\utility::flag_wait( "personal_ent_zones_initialized" );

    for (;;)
    {
        wait 1;
        update_special_mode_for_player( var_0 );
    }
}

init_personal_ent_zones()
{
    var_0 = level.current_personal_interaction_structs;
    var_1 = getentarray( "p_ent_zone", "targetname" );

    foreach ( var_3 in var_1 )
    {
        var_3.attached_pents = [];

        foreach ( var_5 in var_0 )
        {
            if ( !isdefined( var_5.p_ent_zones ) )
                var_5.p_ent_zones = [];

            if ( ispointinvolume( var_5.origin, var_3 ) )
            {
                var_3.attached_pents[var_3.attached_pents.size] = var_5;
                var_5.p_ent_zones[var_5.p_ent_zones.size] = var_3;
            }
        }
    }

    if ( var_1.size > 0 )
        level.personal_ent_zones = var_1;

    scripts\engine\utility::flag_set( "personal_ent_zones_initialized" );
}
