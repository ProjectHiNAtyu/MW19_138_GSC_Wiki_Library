// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

givestreakpointswithtext( var_0, var_1, var_2 )
{
    if ( isdefined( level.ignorescoring ) )
        return;

    if ( isdefined( var_2 ) )
        var_3 = var_2;
    else
        var_3 = scripts\mp\calloutmarkerping_mp::getscoreinfovalue( var_0 );

    var_3 = modifyunifiedpoints( var_0, var_3, var_1 );
    displayscoreeventpoints( var_3, var_0 );
}

giveunifiedpoints( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( isdefined( level.ignorescoring ) && !issubstr( var_0, "assist" ) )
        return;

    if ( isdefined( var_2 ) )
        var_6 = var_2;
    else
        var_6 = scripts\mp\calloutmarkerping_mp::getscoreinfovalue( var_0 );

    var_6 = modifyunifiedpoints( var_0, var_6, var_1 );
    var_7 = var_0 == "kill";
    var_8 = 0;
    var_9 = 0;
    var_10 = istrue( self.isjuggernaut );
    var_11 = quarry_mortar_guys( var_1 );
    var_12 = scripts\cp\utility::_hasperk( "specialty_killstreak_to_scorestreak" );
    var_13 = var_9 && scripts\cp\utility::_hasperk( "specialty_chain_killstreaks" ) && istrue( var_5 );

    if ( isdefined( var_4 ) )
    {
        if ( isdefined( self.search_target_think ) && self.search_target_think.size > 0 )
        {
            if ( istrue( self.search_target_think[var_4 getentitynumber()] ) )
            {
                self.search_target_think[var_4 getentitynumber()] = undefined;
                return;
            }
        }
    }

    if ( ( var_7 || var_8 || var_13 || var_12 ) && ( !var_10 || var_13 || var_12 ) && ( !var_11 || var_12 ) )
    {

    }

    if ( level.gametype == "cp_survival" )
    {
        if ( !isdefined( var_1 ) )
            thread molotov_clear_fx( var_6 );
    }

    if ( !istrue( var_3 ) )
        thread scripts\mp\calloutmarkerping_mp::giverankxp( var_0, var_6, var_1 );
}

molotov_clear_fx( var_0 )
{
    var_1 = scripts\cp\cp_persistence::link_active();
    var_0 = scripts\cp\cp_gamescore::round_up_to_nearest( var_0, 5 );

    if ( isdefined( self._id_1278E ) && isdefined( self.setchecklistsubversion ) )
    {
        if ( self._id_1278E > self.setchecklistsubversion )
            var_0 = 0;
        else
            self._id_1278E = self._id_1278E + var_0;
    }

    var_2 = scripts\cp\cp_persistence::get_player_max_currency();
    var_3 = var_1 + var_0;
    var_3 = min( var_3, var_2 );
    scripts\cp\cp_persistence::_id_11E0F( var_3 );
}

modifyunifiedpoints( var_0, var_1, var_2 )
{
    switch ( var_0 )
    {
        case "damage":
            return 0;
        default:
            break;
    }

    var_3 = 0;

    if ( var_0 == "kill" && var_2 hasattachment( "gunperk_xp" ) )
        var_3 = var_3 + 20;

    var_1 = var_1 + var_3;

    if ( isdefined( level.modifyunifiedpointscallback ) )
        var_1 = [[ level.modifyunifiedpointscallback ]]( var_1, var_0, self, var_2 );

    return int( var_1 );
}

displayscoreeventpoints( var_0, var_1 )
{
    if ( getdvarint( "scr_disableScoreSplash", 0 ) == 1 )
        return;

    if ( scripts\cp\utility::preventleave() )
        return;
    else if ( isdefined( self.totalxpearned ) && isdefined( self.sethistorydestination ) )
    {
        if ( self.totalxpearned >= self.sethistorydestination )
            return;
    }

    if ( level.codcasterenabled )
    {
        foreach ( var_3 in level.players )
        {
            if ( var_3 ismlgspectator() )
            {
                var_4 = var_3 getspectatingplayer();

                if ( isdefined( var_4 ) )
                {
                    var_5 = var_4 getentitynumber();
                    var_6 = self getentitynumber();

                    if ( var_5 == var_6 )
                    {
                        var_3 thread scripts\mp\calloutmarkerping_mp::scorepointspopup( var_0 );
                        var_3 thread scripts\mp\calloutmarkerping_mp::scoreeventpopup( var_1 );
                    }
                }
            }
        }
    }

    if ( !isdefined( level.skippointdisplayxp ) )
    {
        var_8 = 0;

        if ( scripts\cp\utility::issimultaneouskillenabled() )
            var_8 = var_1 == "kill";

        thread scripts\mp\calloutmarkerping_mp::scorepointspopup( var_0, var_8 );
    }
}

quarry_mortar_guys( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( isstring( var_0 ) )
        var_0 = getcompleteweaponname( var_0 );

    switch ( var_0.basename )
    {
        case "bradley_tow_proj_mp":
        case "lighttank_tur_mp":
        case "tur_apc_rus_mp":
            return 1;
    }

    return 0;
}

propspectatekeys( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( isstring( var_0 ) )
        var_0 = getcompleteweaponname( var_0 );

    switch ( var_0.basename )
    {
        case "deploy_juggernaut_mp":
        case "deploy_airdrop_mp":
        case "iw8_green_beam_mp":
        case "iw8_spotter_scope_mp":
            return 1;
    }

    return 0;
}

calculatematchbonus( var_0, var_1 )
{
    var_2 = 250;
    var_3 = var_1 / 60;
    var_4 = scripts\mp\calloutmarkerping_mp::getscoreinfovalue( var_0 );
    var_5 = self.timeplayed["total"] / var_1;

    if ( scripts\cp\utility::preventleave() )
    {
        var_3 = 1;
        var_5 = 1;
    }

    var_6 = scripts\mp\calloutmarkerping_mp::getgametypexpmultiplier();
    var_7 = int( var_2 * var_4 * var_3 * var_5 * var_6 );
    return var_7;
}

updatematchbonusscores( var_0 )
{
    if ( istrue( level.forcedend ) )
    {
        var_1 = scripts\cp\cp_endgame::get_play_time() / 1000;
        var_1 = min( var_1, 1200 );
    }
    else
        var_1 = scripts\cp\cp_endgame::get_play_time() / 1000;

    if ( level.teambased )
    {
        if ( var_0 != "tie" )
            setwinningteam( var_0 );

        foreach ( var_3 in level.players )
        {
            if ( isdefined( var_3.connectedpostgame ) )
                continue;

            if ( var_3.timeplayed["total"] < 1 || var_3.pers["participation"] < 1 )
                continue;

            if ( istrue( level.hostforcedend ) && var_3 ishost() )
                continue;

            if ( !istrue( var_3.pers["hasDoneAnyCombat"] ) )
                continue;

            if ( var_0 == "tie" )
            {
                var_4 = var_3 calculatematchbonus( "tie", var_1 );
                var_3 thread givematchbonus( "tie", var_4 );
                var_3.matchbonus = var_4;
            }
            else if ( isdefined( var_3.pers["team"] ) && var_3.pers["team"] == var_0 )
            {
                var_4 = var_3 calculatematchbonus( "win", var_1 );
                var_3 thread givematchbonus( "win", var_4 );
                var_3.matchbonus = var_4;
            }
            else if ( isdefined( var_3.pers["team"] ) && var_3.pers["team"] != var_0 )
            {
                var_4 = var_3 calculatematchbonus( "loss", var_1 );
                var_3 thread givematchbonus( "loss", var_4 );
                var_3.matchbonus = var_4;
            }

            var_3 datakey( var_1 );
        }
    }
    else
    {
        var_6 = "win";
        var_7 = "loss";

        if ( !isdefined( var_0 ) )
        {
            var_6 = "tie";
            var_7 = "tie";
        }

        foreach ( var_3 in level.players )
        {
            if ( isdefined( var_3.connectedpostgame ) )
                continue;

            if ( var_3.timeplayed["total"] < 1 || var_3.pers["participation"] < 1 )
                continue;

            if ( !istrue( var_3.pers["hasDoneAnyCombat"] ) )
                continue;

            var_9 = 0;

            for ( var_10 = 0; var_10 < min( level.placement["all"].size, 3 ); var_10++ )
            {
                if ( level.placement["all"][var_10] != var_3 )
                    continue;

                var_9 = 1;
            }

            if ( var_9 )
            {
                var_4 = var_3 calculatematchbonus( var_6, var_1 );
                var_3 thread givematchbonus( "win", var_4 );
                var_3.matchbonus = var_4;
            }
            else
            {
                var_4 = var_3 calculatematchbonus( var_7, var_1 );
                var_3 thread givematchbonus( "loss", var_4 );
                var_3.matchbonus = var_4;
            }

            var_3 datakey( var_1 );
        }
    }
}

givematchbonus( var_0, var_1 )
{
    self endon( "disconnect" );
    level waittill( "give_match_bonus" );
    scripts\mp\calloutmarkerping_mp::giverankxp( var_0, var_1 );

    if ( var_0 == "win" )
        thread scripts\cp\so_laststand::givemidmatchaward( "match_complete_win" );
    else
        thread scripts\cp\so_laststand::givemidmatchaward( "match_complete" );
}

datakey( var_0 )
{
    var_0 = 600;

    if ( istrue( self.pers["ignoreWeaponMatchBonus"] ) || !isdefined( self.pers["killsPerWeapon"] ) )
        return;

    var_1 = scripts\cp\cp_weaponrank::manageafktracking() / 60;
    var_2 = var_0 / 60;
    var_3 = int( var_1 * var_2 );
    var_4 = int( 50.0 );
    var_5 = self.timeplayed["total"] / var_0;
    var_6 = var_4 * var_5;
    var_7 = int( var_3 * var_6 );
    var_7 = var_7 - int( self.pers["weaponMatchBonusKills"] * var_6 );

    if ( var_7 <= 0 )
        return;

    var_8 = 0;

    foreach ( var_10 in self.pers["killsPerWeapon"] )
        var_8 = var_8 + ( var_3 - var_10.killcount );

    if ( var_8 <= 0 )
        return;

    foreach ( var_19, var_10 in self.pers["killsPerWeapon"] )
    {
        var_13 = ( var_3 - var_10.killcount ) / var_8;
        var_14 = int( var_7 * var_13 );
        scripts\mp\calloutmarkerping_mp::incrankxp( 0, var_10, var_14 );

        foreach ( var_18, var_16 in self.pers["matchdataWeaponStats"] )
        {
            if ( issubstr( var_18, var_19 ) )
            {
                if ( isdefined( var_16.stats["kills"] ) && var_10.killcount > 0 )
                {
                    var_17 = var_13 * ( var_16.stats["kills"] / var_10.killcount );
                    var_14 = int( var_7 * var_17 );

                    if ( isdefined( var_16.stats["xp_earned"] ) )
                        var_16.stats["xp_earned"] = var_16.stats["xp_earned"] + var_14;
                    else
                        var_16.stats["xp_earned"] = var_14;
                }
            }
        }
    }
}

sethasdonecombat( var_0, var_1 )
{
    if ( var_1 && !istrue( var_0.hasdonecombat ) )
    {

    }

    var_0.hasdonecombat = var_1;

    if ( var_1 && !istrue( var_0.pers["hasDoneAnyCombat"] ) )
        var_0.pers["hasDoneAnyCombat"] = 1;
}
