// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

spawner_scoring_init()
{
    scripts\engine\utility::flag_init( "spawn_point_score_data_init_done" );
    level.current_spawn_scoring_index = 0;
    level.spawn_scoring_array = [];
    level.total_cluster_spawn_score = 13;
    level.total_veh_spawn_score = 3;
    level.total_spawn_score = 18;
    level.spawner_scoring_funcs = [];
    level.spawner_scoring_funcs["vehicle_spawner"] = ::vehicle_spawnpoint_scoring;
    level.spawner_scoring_funcs["cluster_spawner"] = ::cluster_spawnpoint_scoring;
    level.spawner_scoring_funcs["standard_spawner"] = ::standard_spawnpoint_scoring;
    level._id_122B9["cluster_spawner"] = 0;
    level.spawner_scoring_critical_factors = [];
    level.spawner_scoring_critical_factors["vehicle_spawner"] = ::vehicle_spawnpoint_valid;
    level.spawner_scoring_critical_factors["cluster_spawner"] = ::cluster_spawnpoint_valid;
    level.spawner_scoring_critical_factors["standard_spawner"] = ::standard_spawnpoint_valid;
    level.delayeventfired = scripts\engine\trace::create_solid_ai_contents();
}

vehicle_spawnpoint_scoring( var_0, var_1, var_2, var_3 )
{
    if ( calculate_ai_veh_spawner_score( var_0, level.current_spawn_scoring_index ) )
        return var_0;
    else
        return undefined;
}

vehicle_spawnpoint_valid( var_0, var_1 )
{
    if ( istrue( var_1 ) )
        return 0;
    else if ( scripts\engine\utility::flag_exist( "disable_vehicle_spawning" ) && scripts\engine\utility::flag( "disable_vehicle_spawning" ) )
        return 0;
    else if ( isdefined( var_0.vehicle ) && isdefined( var_0.vehicle.attachedguys ) && isdefined( var_0.vehicle.usedpositions ) )
    {
        var_2 = var_0.vehicle.usedpositions.size;
        var_3 = scripts\cp\cp_vehicles::level_carepackage_give_player_killstreak( self, var_0.vehicle.play_train_sequence );

        if ( isdefined( var_3 ) )
            var_2 = var_3;

        if ( var_0.vehicle.attachedguys.size >= var_2 )
        {
            return 0;
            return;
        }

        return 1;
        return;
    }
    else
        return 1;
}

enemygunship_watchplanedistance( var_0, var_1, var_2 )
{
    if ( isdefined( var_0.child_spawners ) && var_0.child_spawners.size > 0 )
        var_3 = var_0.child_spawners;
    else
        var_3 = getnodesinradiussorted( var_0.origin, 2048, 0, 256, "cover" );

    var_4 = 1;
    var_5 = undefined;

    if ( var_4 )
    {
        var_5 = score_ai_spawns( var_3, undefined, 1, var_2, 1 );
        self.vehomn_fadeoutcontrolsforclient = undefined;
    }

    var_0 scripts\cp\cp_modular_spawning::set_default_spawner_values();
    var_0.totalscore = undefined;
    var_0.isnearajuggdrop = undefined;

    if ( isdefined( var_5 ) )
    {
        _id_11DDD( var_0 );
        var_0 thread scripts\cp\cp_modular_spawning::parent_spawner_disable_after_count( self, var_5 );
    }

    return var_5;
}

cluster_spawnpoint_scoring( var_0, var_1, var_2, var_3 )
{
    if ( calculate_ai_cluster_spawner_score( var_0, level.current_spawn_scoring_index ) )
        return var_0;
    else
        return undefined;
}

cluster_spawnpoint_valid( var_0, var_1 )
{
    if ( istrue( var_1 ) )
        return 0;
    else
        return 1;
}

standard_spawnpoint_scoring( var_0, var_1, var_2, var_3 )
{
    if ( calculate_ai_spawner_score( var_0, level.current_spawn_scoring_index, var_1, var_3 ) )
        return var_0;

    return undefined;
}

linked_model()
{
    if ( isdefined( self._id_12D3D ) && self._id_12D3D.size > 0 )
        return self._id_12D3D;

    return [];
}

standard_spawnpoint_valid( var_0, var_1 )
{
    if ( !var_0 scripts\cp\cp_modular_spawning::spawner_flags_check( 32 ) )
    {
        var_2 = var_0.origin + ( 0, 0, 6 );
        var_3 = scripts\engine\trace::capsule_trace_get_all_results( var_2, var_2 + ( 0, 0, 1 ), 16, 32, undefined, undefined, level.delayeventfired );
        var_0 scripts\cp\cp_modular_spawning::add_to_spawner_flags( 32 );

        if ( isdefined( var_3 ) && isdefined( var_3[0] ) )
        {
            for ( var_4 = 0; var_4 < var_3.size; var_4++ )
            {
                if ( isdefined( var_3[var_4] ) )
                {
                    var_5 = var_3[var_4];

                    if ( scripts\engine\utility::is_equal( var_5["hittype"], "hittype_world" ) )
                    {
                        var_0 scripts\cp\cp_modular_spawning::getterminalhint();
                        return 0;
                    }
                }
            }
        }
    }

    var_6 = undefined;
    var_7 = undefined;
    var_8 = undefined;
    var_9 = 0;

    if ( isnode( var_0 ) && !var_0 nodeisactivated() )
    {
        alternatebrcircle( var_8, "^1CRITICAL^0: Node Spawner disconnected", undefined, undefined, 1, var_0 );
        var_0 scripts\cp\cp_modular_spawning::getterminalhint();
        return 0;
    }

    var_0 scripts\cp\cp_modular_spawning::spawner_init();

    if ( !_id_122B5( var_0 ) )
        return 0;

    if ( scripts\cp\cp_spawn_factor::critical_factor( ::nvidiaansel_overridecollisionradius, var_0 ) )
    {
        var_10 = 0;

        if ( !var_10 )
        {
            var_0 scripts\cp\cp_modular_spawning::add_to_spawner_flags( 64 );
            var_0.lastspawntime = self.current_time + 10000;
        }
    }
    else
        var_0 scripts\cp\cp_modular_spawning::remove_from_spawner_flags( 64 );

    if ( getdvarint( "scr_standard_scoring_aabb", 1 ) && !istrue( var_0.script_forcespawn ) )
    {
        var_11 = get_close_distance_var();

        if ( !isdefined( var_0.script_parent ) )
        {
            if ( isdefined( var_0.script_dist_only ) )
                var_11 = var_0.script_dist_only;
        }

        var_12 = scripts\common\utility::playersincylinder( var_0.origin, var_11 );

        if ( var_12.size > 0 )
        {
            if ( isdefined( var_0.script_dist_only ) )
                var_0 thread scripts\cp\cp_modular_spawning::disable_spawn_point( var_0, undefined, self );
            else
                var_0.lastspawntime = self.current_time;

            return 0;
        }
    }

    if ( isdefined( level._id_122B7 ) && level._id_122B7.size > 0 )
    {
        var_13 = incrementpersistentstat( level._id_122B7, var_0.origin, 5000 );

        for ( var_4 = 0; var_4 < var_13.size; var_4++ )
        {
            if ( distance2dsquared( var_0.origin, var_13[var_4].origin ) < squared( var_13[var_4].radius ) )
            {
                alternatebrcircle( var_8, "^1CRITICAL^0: Poisoned", undefined, undefined, 1, var_0 );
                return 0;
            }
        }
    }

    if ( isdefined( self.vehomn_fadeoutcontrolsforclient ) )
    {
        var_14 = loadoutdefaultfiresalediscount( var_0 );
        var_15 = distancesquared( self.vehomn_fadeoutcontrolsforclient, var_0.origin );
        var_11 = undefined;

        if ( var_15 >= var_14 )
        {
            alternatebrcircle( var_8, "^1CRITICAL^0: Too Far", undefined, undefined, 1, var_0 );
            return 0;
        }
        else
            var_0.go_to_combat = var_15;
    }

    return 1;
}

spawner_critical_factors( var_0, var_1, var_2 )
{
    var_3 = undefined;
    var_4 = undefined;
    var_5 = undefined;
    var_6 = 0;

    if ( istrue( level.pause_spawner_scoring ) )
        return 0;
    else if ( scripts\cp\cp_spawn_factor::critical_factor( ::is_spawner_disabled, var_0 ) )
        return 0;

    if ( istrue( var_1 ) )
    {
        if ( scripts\cp\cp_spawn_factor::critical_factor( ::plundereventtotal, var_0 ) )
            return 0;
        else if ( istrue( var_0.is_on_platform ) || isdefined( var_0.noteleport ) )
        {
            if ( istrue( var_0.is_on_platform ) )
            {

            }
            else if ( isdefined( var_0.noteleport ) )
            {

            }

            return 0;
        }
        else if ( scripts\cp\cp_spawn_factor::critical_factor( ::is_valid_respawn_spawnpoint, var_0 ) )
            return 0;
    }

    if ( scripts\cp\cp_spawn_factor::critical_factor( ::is_level_escalation_sufficient, var_0 ) )
        return 0;
    else if ( scripts\cp\cp_spawn_factor::critical_factor( ::are_weapons_free, var_0 ) )
        return 0;
    else if ( !scripts\cp\cp_spawn_factor::critical_factor( scripts\cp\cp_spawn_factor::avoidtelefrag, var_0 ) )
        return 0;
    else if ( !scripts\cp\cp_spawn_factor::critical_factor( level.spawner_scoring_critical_factors[var_0 get_spawn_scoring_type()], var_0 ) )
        return 0;
    else
        return 1;
}

get_spawn_scoring_type()
{
    if ( isdefined( self.spawner_flags ) )
    {
        if ( self.spawner_flags & 2 )
            return "vehicle_spawner";
        else if ( self.spawner_flags & 4 )
            return "cluster_spawner";
        else
            return "standard_spawner";
    }
    else
        return "standard_spawner";
}

is_valid_respawn_spawnpoint( var_0 )
{
    var_1 = var_0 get_spawn_scoring_type();

    if ( isdefined( var_1 ) )
    {
        switch ( var_1 )
        {
            case "vehicle_spawner":
                return 1;
            case "cluster_spawner":
                return 0;
            case "standard_spawner":
                return 0;
        }
    }

    return 0;
}

defcon_alarms_stop( var_0 )
{
    if ( isdefined( self.group ) && isdefined( self.group.vehomn_fadeoutcontrolsforclient ) )
    {
        if ( !self maymovefrompointtopoint( var_0.origin, self.group.vehomn_fadeoutcontrolsforclient ) )
        {
            level thread scripts\engine\utility::draw_capsule( var_0.origin, 16, 32, undefined, ( 1, 0, 0 ), undefined, 1000 );
            var_0 scripts\cp\cp_modular_spawning::add_to_spawner_flags( 512 );
            return 0;
        }
        else
            return 1;
    }
    else
        return 1;
}

nvidiaansel_overridecollisionradius( var_0 )
{
    if ( !istrue( var_0.script_forcespawn ) )
    {
        for ( var_1 = 0; var_1 < level.players.size; var_1++ )
        {
            if ( level.players[var_1] hastacvis( var_0.origin, 0, 64, 1 ) )
                return 1;
        }
    }

    return 0;
}

is_level_escalation_sufficient( var_0 )
{
    if ( isdefined( var_0.script_escalation_level ) && isdefined( level.escalation_level ) )
    {
        if ( int( var_0.script_escalation_level ) > int( level.escalation_level ) )
            return 1;
        else
            return 0;
    }
    else
        return 0;
}

are_weapons_free( var_0 )
{
    if ( scripts\engine\utility::ent_flag_exist( "weapons_free" ) && scripts\engine\utility::ent_flag( "weapons_free" ) )
    {
        if ( isdefined( var_0.script_animation_type ) )
            return 1;
    }

    return 0;
}

plundereventtotal( var_0 )
{
    if ( var_0 scripts\cp\cp_modular_spawning::spawner_flags_check( 512 ) )
        return 1;

    if ( istrue( var_0.is_on_platform ) )
    {
        var_0 scripts\cp\cp_modular_spawning::add_to_spawner_flags( 512 );
        return 1;
    }

    var_1 = self.vehomn_fadeoutcontrolsforclient;

    if ( !isvector( var_1 ) )
        var_1 = self.vehomn_fadeoutcontrolsforclient.origin;

    if ( !navtrace( var_0.origin, var_1 ) )
    {
        var_0 scripts\cp\cp_modular_spawning::add_to_spawner_flags( 512 );
        return 1;
    }

    return 0;
}

is_spawner_disabled( var_0 )
{
    if ( var_0 scripts\cp\cp_modular_spawning::spawner_flags_check( 1024 ) )
        return 1;
    else
        return 0;
}

score_factor_ai( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( isdefined( var_4 ) )
        var_6 = [[ var_1 ]]( var_2, var_3, var_4 );
    else if ( isdefined( var_3 ) )
        var_6 = [[ var_1 ]]( var_2, var_3 );
    else
        var_6 = [[ var_1 ]]( var_2 );

    if ( !isdefined( var_6 ) )
        return undefined;

    if ( !isdefined( var_5 ) )
        var_5 = 1000;

    var_7 = var_5 * var_0;
    var_6 = clamp( var_6 * var_0, 0, var_7 );
    return var_6;
}

get_best_scoring_target( var_0 )
{
    var_1 = get_spawn_scoring_array();
    var_2 = get_current_spawn_score_player_index( var_1, var_0 );
    level.current_spawn_scoring_index = var_2;

    if ( isdefined( level.current_spawn_scoring_index ) )
        return var_1[level.current_spawn_scoring_index];
    else
        return level.current_spawn_scoring_index;
}

get_score_target_override( var_0 )
{
    if ( isdefined( level.play_cinderblock_broken_fx ) )
    {
        if ( scripts\engine\utility::array_contains( level.play_cinderblock_broken_fx, self.group_name ) )
            return undefined;
    }

    if ( isdefined( level.spawn_scoring_pois ) && level.spawn_scoring_pois.size > 0 )
    {
        var_1 = undefined;

        if ( level.spawn_scoring_pois.size > 1 )
            var_2 = sortbydistance( level.spawn_scoring_pois, var_0 );
        else
            var_2 = level.spawn_scoring_pois;

        for ( var_3 = 0; var_3 < var_2.size; var_3++ )
        {
            if ( distance2dsquared( var_0, var_2[var_3].origin ) < var_2[var_3].activation_radius_sq )
                return var_2[var_3];
        }
    }

    return undefined;
}

get_score_target_pos( var_0 )
{
    if ( isplayer( var_0 ) )
    {
        if ( isdefined( var_0.velo_forward ) && var_0 _id_11FE9() )
            var_1 = var_0.velo_forward;
        else
        {
            var_2 = anglestoforward( var_0.angles );
            var_1 = var_0.origin + var_2 * 1024;
        }
    }
    else
        var_1 = var_0.origin;

    return var_1;
}

laststand_hack( var_0, var_1, var_2 )
{
    if ( !isarray( var_1 ) )
        return var_1;

    if ( isdefined( var_2 ) )
        return incrementpersistentstat( var_1, var_0, var_2 );

    return sortbydistance( var_1, var_0 );
}

get_array_of_valid_spawnpoints( var_0, var_1, var_2, var_3 )
{
    var_4 = [];
    var_5 = 10;

    if ( isarray( var_0 ) )
    {
        self.vehomn_fadeoutcontrolsforclient = self.spawn_ref_point;
        var_0 = laststand_hack( self.vehomn_fadeoutcontrolsforclient, var_0 );

        for ( var_6 = 0; var_6 < var_0.size; var_6++ )
        {
            var_7 = var_0[var_6];
            var_7 scripts\cp\cp_modular_spawning::spawner_init();

            if ( spawner_critical_factors( var_7, var_1, var_3 ) )
                var_4[var_4.size] = var_7;

            if ( var_4.size >= var_5 )
                break;
        }
    }
    else
        var_4[0] = var_0;

    return var_4;
}

get_current_spawn_score_player_index( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        var_0 = get_spawn_scoring_array();

    var_2 = var_0.size;

    if ( var_2 <= 1 )
        return 0;

    var_3 = undefined;
    var_4 = scripts\engine\utility::array_sort_with_func( var_0, ::_id_1216E );

    for ( var_5 = 0; var_5 < var_4.size; var_5++ )
    {
        var_6 = var_4[var_5];

        for ( var_7 = 0; var_7 < 2; var_7++ )
        {
            if ( var_7 || istrue( var_6.spectating ) && !istrue( var_6.inlaststand ) && !istrue( var_6.ignoreme ) )
            {
                for ( var_8 = 0; var_8 < var_0.size; var_8++ )
                {
                    if ( var_0[var_8] == var_6 )
                    {
                        var_3 = var_8;

                        if ( isplayer( var_6 ) )
                            self.box_used_common_setup = var_3;
                        else
                            self.box_used_common_setup = undefined;

                        break;
                    }
                }

                if ( isdefined( var_3 ) )
                    break;
            }
        }

        if ( isdefined( var_3 ) )
            break;
    }

    if ( !isdefined( var_3 ) )
        return randomint( level.players.size );
    else
        return var_3;
}

get_next_player_index( var_0, var_1 )
{
    var_2 = get_spawn_scoring_array();
    var_3 = var_0;

    if ( !istrue( var_1 ) )
        var_3 = var_0 + 1;

    if ( isdefined( var_2[var_3] ) )
        return var_3;
    else
    {
        var_3++;

        for ( var_4 = 0; var_4 < var_2.size; var_4++ )
        {
            if ( isdefined( var_2[var_3] ) )
                return var_3;

            if ( var_3 >= var_2.size )
            {
                var_3 = 0;
                continue;
            }

            var_3++;
        }

        return 0;
    }
}

score_ai_spawns( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = undefined;
    var_6 = get_best_scoring_target( var_4 );
    self._id_12098 = undefined;

    if ( !isdefined( var_6 ) )
        return undefined;

    if ( istrue( self._id_12B63 ) )
        var_1 = 1;

    self.current_time = gettime();
    var_7 = get_score_target_pos( var_6 );
    var_8 = get_score_target_override( var_7 );
    self.spawn_ref_point = var_7;
    self.spawn_ref_point_override = var_8;
    var_9 = get_array_of_valid_spawnpoints( var_0, var_1, undefined, var_3 );

    if ( var_9.size < 1 )
        return undefined;

    self.current_time = gettime();
    var_10 = 1;

    if ( var_10 )
        var_11 = score_valid_spawnpoints( var_9, var_2, var_3, var_0 );
    else
        var_11 = [ var_9[0] ];

    if ( var_11.size < 1 )
        return undefined;

    var_12 = undefined;

    if ( var_11.size > 0 )
        var_5 = var_11[randomint( var_11.size )];

    if ( isdefined( var_5 ) )
    {
        if ( var_5 passes_forward_check( self ) && var_5 teammatereviveweaponwaitputaway() && brgetloadoutammomax( var_5 ) )
        {
            for ( var_13 = 0; var_13 < var_9.size; var_13++ )
            {
                if ( var_5 != var_9[var_13] )
                    var_9[var_13] thread set_spawner_chosen_nearby();
            }

            return var_5;
        }
        else
        {
            var_14 = 10000;

            if ( isdefined( level._id_11D3F ) )
                var_14 = level._id_11D3F;

            var_5.lastspawntime = self.current_time + var_14;
            level notify( "update_spawnpoint_debug_prints" );
            return undefined;
        }
    }
    else
    {
        level notify( "update_spawnpoint_debug_prints" );
        return undefined;
    }
}

teammatereviveweaponwaitputaway()
{
    return capsuletracepassed( self.origin + ( 0, 0, 6 ), 16, 32, undefined, 1, 1 );
}

brgetloadoutammomax( var_0 )
{
    if ( istrue( level._id_1209D ) )
        return 1;

    var_1 = undefined;
    var_2 = undefined;
    var_3 = undefined;

    for ( var_4 = 0; var_4 < level.players.size; var_4++ )
    {
        var_5 = level.players[var_4] linked_model();

        if ( isdefined( var_5 ) && var_5.size > 0 )
        {
            for ( var_6 = 0; var_6 < var_5.size; var_6++ )
            {
                if ( distance2dsquared( var_5[var_6], var_0.origin ) <= 65536 )
                {
                    alternatebrcircle( var_3, "Player Cleared", undefined, undefined, 1, var_0 );
                    return 0;
                }
            }
        }
    }

    return 1;
}

set_spawner_chosen_nearby()
{
    self.spawner_chosen_nearby = 1;
    wait 2.5;
    self.spawner_chosen_nearby = undefined;
}

score_valid_spawnpoints( var_0, var_1, var_2, var_3 )
{
    var_4 = [];
    var_5 = undefined;
    var_6 = 0;
    var_7 = [];
    var_8 = 0;
    var_9 = 1;

    for ( var_10 = 0; var_10 < var_0.size; var_10++ )
    {
        var_11 = var_0[var_10] get_spawn_scoring_type();

        if ( isdefined( level._id_122B9[var_11] ) && !level._id_122B9[var_11] )
        {
            var_9 = 0;
            break;
        }
    }

    for ( var_10 = 0; var_10 < var_0.size; var_10++ )
    {
        var_11 = var_0[var_10] get_spawn_scoring_type();
        var_12 = [[ level.spawner_scoring_funcs[var_11] ]]( var_0[var_10], undefined, var_2, var_3 );

        if ( isdefined( var_12 ) )
        {
            if ( !isdefined( var_5 ) || isdefined( var_6 ) && isdefined( var_12.totalscore ) && var_12.totalscore > var_6 )
            {
                var_5 = var_12;
                var_6 = var_12.totalscore;
            }

            var_8 = isdefined( var_12.isnearajuggdrop );

            if ( var_8 )
                var_7[var_7.size] = var_12;

            if ( var_9 && var_12.totalscore >= 950.0 )
            {
                if ( !istrue( var_1 ) )
                    var_12.totalscore = undefined;

                return [ var_12 ];
            }
            else if ( var_12.totalscore > 500.0 )
            {
                if ( !var_8 )
                    var_4[var_4.size] = var_12;

                if ( var_9 )
                {
                    if ( istrue( var_1 ) )
                    {
                        if ( var_4.size >= 5 )
                            return var_4;
                    }
                    else
                        var_12.totalscore = undefined;
                }
            }
        }
    }

    if ( var_7.size > 0 )
    {
        var_13 = undefined;
        var_14 = -99999;
        var_15 = undefined;

        for ( var_10 = 0; var_10 < var_7.size; var_10++ )
        {
            var_16 = var_7[var_10];

            if ( isdefined( var_16.totalscore ) && var_16.totalscore > var_14 )
            {
                var_14 = var_16.totalscore;
                var_13 = var_16;
                var_15 = var_16.isnearajuggdrop;
            }

            if ( !istrue( var_1 ) )
            {
                var_16.totalscore = undefined;
                var_16.isnearajuggdrop = undefined;
            }
        }

        if ( isdefined( var_13 ) )
        {
            var_17 = [[ var_15 ]]( var_13, undefined, var_2 );

            if ( isdefined( var_17 ) )
            {
                if ( isarray( var_17 ) )
                {
                    for ( var_18 = 0; var_18 < var_17.size; var_18++ )
                    {
                        if ( var_17[var_18].totalscore > 500.0 )
                            var_4[var_4.size] = var_17[var_18];
                    }
                }
                else if ( var_17.totalscore > 500.0 )
                    var_4[var_4.size] = var_17;
            }
        }
    }

    if ( var_4.size > 0 )
        return var_4;
    else if ( isdefined( var_5 ) )
    {
        var_11 = var_5 get_spawn_scoring_type();

        if ( var_11 == "cluster_spawner" )
            return [];
        else
            return [ var_5 ];
    }
    else
        return [];
}

print_spawnpoint_debug( var_0, var_1, var_2 )
{
    self notify( "print_spawnpoint_debug" );
    self endon( "print_spawnpoint_debug" );
    var_3 = 16;
    var_4 = 16;
    var_5 = get_spawn_scoring_type();

    if ( var_5 == "vehicle_spawner" )
    {
        var_3 = 48;
        var_4 = 48;
    }

    if ( istrue( level.spawnpoint_debug ) )
    {
        if ( isdefined( var_2 ) )
            level waittill( var_2 );

        level endon( "update_spawnpoint_debug_prints" );
        level endon( "end_spawnpoint_debug" );

        for (;;)
        {
            thread scripts\engine\utility::draw_capsule( self.origin, var_3, var_4, ( 0, 0, 0 ), var_1, 0, 1 );
            waitframe();
        }
    }
}

passes_forward_check( var_0 )
{
    if ( isdefined( self ) && !isvector( self ) )
    {
        if ( isdefined( self.script_dot ) )
        {
            var_1 = int( self.script_dot ) == 1;

            for ( var_2 = 0; var_2 < level.players.size; var_2++ )
            {
                if ( scripts\cp\cp_spawning_util::fake_digit_pool( level.players[var_2].origin ) == var_1 )
                {
                    if ( isdefined( self.script_dist_only ) )
                    {
                        if ( distancesquared( level.players[var_2].origin, self.origin ) <= int( self.script_dist_only ) )
                        {
                            thread scripts\cp\cp_modular_spawning::disable_spawn_point( self, undefined, var_0 );
                            return 0;
                        }
                    }
                    else
                    {
                        thread scripts\cp\cp_modular_spawning::disable_spawn_point( self, undefined, var_0 );
                        return 0;
                    }
                }
            }
        }
        else if ( isdefined( self.script_dist_only ) )
        {
            for ( var_3 = 0; var_3 < level.players.size; var_3++ )
            {
                if ( distancesquared( level.players[var_3].origin, self.origin ) <= int( self.script_dist_only ) )
                {
                    thread scripts\cp\cp_modular_spawning::disable_spawn_point( self, undefined, var_0 );
                    return 0;
                }
            }
        }
    }

    return 1;
}

calculate_ai_cluster_spawner_score( var_0, var_1 )
{
    var_2 = undefined;
    var_3 = undefined;
    var_4 = undefined;
    var_5 = level.total_cluster_spawn_score;
    var_6 = 0;
    var_7 = 8;
    var_8 = score_factor_ai( var_7 / var_5, ::is_cluster_spawner_ideal_distance, var_0, var_1 );

    if ( !isdefined( var_8 ) )
        return 0;

    var_6 = var_6 + var_8;
    var_9 = 5;
    var_10 = score_factor_ai( var_9 / var_5, ::is_spawner_towards_objective, var_0, var_1 );

    if ( !isdefined( var_10 ) )
        return 0;

    var_6 = var_6 + var_10;
    var_0.totalscore = int( var_6 );
    var_0.isnearajuggdrop = ::enemygunship_watchplanedistance;
    return 1;
}

calculate_ai_veh_spawner_score( var_0, var_1 )
{
    var_2 = undefined;
    var_3 = undefined;
    var_4 = undefined;
    var_5 = level.total_veh_spawn_score;
    var_6 = 0;
    var_7 = 2;
    var_8 = score_factor_ai( var_7 / var_5, ::is_vehicle_spawner_ideal_distance, var_0, var_1, undefined, 1250 );

    if ( !isdefined( var_8 ) )
        return 0;

    var_6 = var_6 + var_8;
    var_7 = 1;
    var_8 = score_factor_ai( var_7 / var_5, ::is_spawner_towards_objective, var_0, var_1 );

    if ( !isdefined( var_8 ) )
        return 0;

    var_6 = var_6 + var_8;
    var_0.totalscore = int( var_6 );
    return 1;
}

calculate_ai_spawner_score( var_0, var_1, var_2, var_3 )
{
    var_4 = undefined;
    var_5 = undefined;
    var_6 = undefined;
    var_7 = level.total_spawn_score;
    var_8 = 0;
    var_9 = scripts\engine\utility::ter_op( level.gametype == "cp_pvpve", 5, 4 );
    var_10 = score_factor_ai( var_9 / var_7, ::is_spawner_ideal_distance, var_0, var_1 );

    if ( !isdefined( var_10 ) )
    {
        if ( istrue( var_2 ) )
            var_10 = -10000;
        else
            return 0;
    }

    var_8 = var_8 + var_10;
    var_9 = scripts\engine\utility::ter_op( level.gametype == "cp_pvpve", 10, 4 );
    var_10 = score_factor_ai( var_9 / var_7, ::avoid_recently_used_spawns, var_0 );

    if ( !isdefined( var_10 ) )
    {
        if ( istrue( var_2 ) )
            var_10 = -10000;
        else
            return 0;
    }

    var_8 = var_8 + var_10;
    var_9 = scripts\engine\utility::ter_op( level.gametype == "cp_pvpve", 10, 0 );
    var_10 = score_factor_ai( var_9 / var_7, ::avoid_players_vision, var_0 );

    if ( !isdefined( var_10 ) )
    {
        if ( istrue( var_2 ) )
            var_10 = -10000;
        else
            return 0;
    }

    var_8 = var_8 + var_10;
    var_9 = 5;
    var_10 = score_factor_ai( var_9 / var_7, ::is_spawner_towards_objective, var_0, var_1 );

    if ( !isdefined( var_10 ) )
    {
        if ( istrue( var_2 ) )
            var_10 = -10000;
        else
            return 0;
    }

    var_8 = var_8 + var_10;
    var_9 = 5;
    var_10 = score_factor_ai( var_9 / var_7, ::_id_12FFB, var_0 );

    if ( !isdefined( var_10 ) )
        return 0;

    var_8 = var_8 + var_10;
    var_9 = 5;
    var_10 = score_factor_ai( var_9 / var_7, ::has_spawner_chosen_nearby_flag, var_0 );

    if ( !isdefined( var_10 ) )
    {
        if ( istrue( var_2 ) )
            var_10 = -10000;
        else
            return 0;
    }

    var_8 = var_8 + var_10;
    var_9 = 2;
    var_10 = score_factor_ai( var_9 / var_7, ::is_close_to_player_z, var_0, var_1 );

    if ( !isdefined( var_10 ) )
    {
        if ( istrue( var_2 ) )
            var_10 = -10000;
        else
            return 0;
    }

    var_8 = var_8 + var_10;
    var_0.totalscore = int( var_8 );
    return 1;
}

is_close_to_player_z( var_0, var_1 )
{
    var_2 = level.players[var_1];

    if ( isdefined( self.spawn_ref_point ) )
        var_3 = self.spawn_ref_point[2];
    else
        var_3 = var_2.origin[2];

    if ( isvector( var_0 ) )
        var_4 = int( abs( var_0[2] - var_3 ) );
    else
        var_4 = int( abs( var_0.origin[2] - var_3 ) );

    if ( var_4 <= 128 )
        return 1000;
    else
        return 1000 / int( var_4 / 32 );
}

_id_11CAF( var_0, var_1, var_2, var_3 )
{
    var_4 = 1000;
    var_5 = 0.707;
    var_6 = -0.5;
    var_7 = var_4 * 0.5;
    var_8 = 0;
    var_9 = 1024;
    var_10 = 262144;
    var_11 = var_1 - var_0;
    var_11 = ( var_11[0], var_11[1], 0 );
    var_12 = length( var_11 );

    if ( var_12 > 0 )
        var_11 = var_11 / var_12;

    var_13 = vectordot( var_2, var_11 );

    if ( var_12 > var_9 )
    {
        self.binoculars_addheadicon = 1;

        if ( var_13 < var_8 )
            return 0;
        else if ( var_13 * var_3 > var_12 )
            return 0;
        else if ( var_13 < var_5 )
        {
            var_14 = 1 - ( var_5 - var_13 ) / ( var_5 - var_8 );
            return var_4 * var_14;
        }
        else
            return var_4;
    }
    else
    {
        self.binoculars_addheadicon = 0;

        if ( var_13 > var_8 )
            return 0;
        else if ( var_13 > var_6 )
        {
            var_14 = 1 - ( var_6 - var_13 ) / ( var_6 - var_8 );
            return var_4 * var_14;
        }
        else
            return var_4;
    }

    return 0;
}

is_spawner_towards_objective( var_0, var_1 )
{
    if ( !isdefined( level.activequests ) || level.activequests.size < 1 )
    {
        self._id_12098 = undefined;
        return 1000;
    }
    else
    {
        var_2 = level.players[var_1];
        var_3 = var_2.origin;
        var_4 = var_0.origin;
        var_5 = var_4 - var_3;
        var_5 = ( var_5[0], var_5[1], 0 );
        var_6 = length( var_5 );

        if ( var_6 > 0 )
            var_5 = var_5 / var_6;

        var_7 = undefined;

        for ( var_8 = 0; var_8 < level.activequests.size; var_8++ )
        {
            var_9 = level.activequests[var_8];

            if ( isdefined( var_9.start_with_nvgs ) && var_9.start_with_nvgs.size > 0 )
            {
                for ( var_10 = 0; var_10 < var_9.start_with_nvgs.size; var_10++ )
                {
                    var_11 = var_9.start_with_nvgs[var_10];
                    var_12 = _id_11CAF( var_3, var_11, var_5, var_6 );

                    if ( !isdefined( var_7 ) || var_12 > var_7 )
                    {
                        if ( istrue( self.binoculars_addheadicon ) )
                            self._id_12098 = 1;
                        else
                            self._id_12098 = undefined;

                        var_7 = var_12;
                    }

                    self.binoculars_addheadicon = undefined;
                }
            }
        }

        if ( isdefined( var_7 ) )
            return var_7;
    }

    self._id_12098 = undefined;
    return 1000;
}

has_spawner_chosen_nearby_flag( var_0 )
{
    if ( istrue( var_0.spawner_chosen_nearby ) )
        return 1000;
    else
        return 0;
}

avoid_players_vision( var_0 )
{
    if ( isdefined( var_0.script_parent ) || istrue( var_0.script_forcespawn ) || istrue( var_0 scripts\cp\cp_vehicles::is_vehicle_spawnpoint() ) || !isdefined( level.players ) || level.players.size < 1 )
        return 1000;

    var_1 = 1000 / level.players.size;
    var_2 = undefined;
    var_3 = lightscriptable();

    if ( _id_11BC3( ::_id_122E3, 1, var_0 ) )
    {
        var_0.lastspawntime = self.current_time;
        return undefined;
    }
    else
        return var_1;
}

_id_11FE9()
{
    var_0 = self.velo_forward - self.origin;
    var_0 = ( var_0[0], var_0[1], 0 );
    var_1 = length( var_0 );

    if ( var_1 > 0 )
        return 1;
    else
        return 0;
}

_id_12FFB( var_0, var_1 )
{
    var_2 = 1000;

    if ( isdefined( var_0.script_parent ) || istrue( var_0.script_forcespawn ) || istrue( var_0 scripts\cp\cp_vehicles::is_vehicle_spawnpoint() ) || !isdefined( level.players ) || istrue( self._id_12098 ) || level.players.size < 1 )
        return var_2;

    var_3 = 0;
    var_4 = 0;
    var_5 = 0;
    var_6 = lightscriptable();

    for ( var_7 = 0; var_7 < var_6.size; var_7++ )
    {
        if ( isplayer( var_6[var_7] ) )
        {
            var_8 = var_6[var_7] getplayerangles();

            if ( isdefined( var_6[var_7].velo_forward ) && var_6[var_7] _id_11FE9() )
                var_8 = vectortoangles( var_6[var_7].velo_forward - var_6[var_7].origin );

            var_3 = var_3 + scripts\engine\math::get_dot( var_6[var_7].origin, var_8, var_0.origin );
        }
        else
        {
            var_8 = var_6[var_7].angles;
            var_3 = var_3 + scripts\engine\math::get_dot( var_6[var_7].origin, var_8, var_0.origin );
        }

        var_5++;
    }

    if ( var_5 == 0 )
        return var_2;
    else
    {
        var_4 = var_3 / var_5;
        return var_2 * var_4;
    }
}

_id_11BC3( var_0, var_1, var_2, var_3 )
{
    for ( var_4 = 0; var_4 < level.players.size; var_4++ )
    {
        var_5 = level.players[var_4] [[ var_0 ]]( var_2, var_3 );

        if ( isdefined( var_1 ) && isdefined( var_5 ) && scripts\engine\utility::is_equal( var_1, var_5 ) )
            return 1;
    }

    return 0;
}

_id_122E3( var_0, var_1 )
{
    if ( isplayer( self ) && !scripts\cp\utility::is_valid_player( 1 ) )
        return 0;

    var_2 = logplayermatchend();
    var_3 = self geteye();
    var_4 = var_0.origin + ( 0, 0, 56 );
    var_5 = scripts\engine\utility::within_fov( var_3, var_2, var_4, cos( 65 ) ) && sighttracepassed( var_3, var_4, 0, undefined, 1 );
    return var_5;
}

_id_11A61( var_0, var_1, var_2 )
{
    for ( var_3 = 0; var_3 < var_1.size; var_3++ )
        var_1[var_3].lastspawntime = var_2;
}

logplayermatchend()
{
    return self getplayerangles();
}

is_vehicle_spawner_ideal_distance( var_0, var_1 )
{
    var_2 = level.players;
    var_3 = level.players[var_1];
    var_4 = var_3.origin;
    var_5 = 0;
    var_6 = 1250;
    var_7 = 1250;
    var_8 = 1562500;
    var_9 = 4000;
    var_10 = 16000000;
    var_11 = 30000;
    var_12 = 900000000;
    var_13 = 0.25;

    if ( isdefined( var_0.script_maxdist ) )
    {
        var_11 = int( var_0.script_maxdist );
        var_12 = squared( var_11 );
    }

    var_14 = distancesquared( var_4, var_0.origin );

    if ( var_14 >= var_12 )
        return undefined;

    if ( var_14 <= var_8 )
        return var_6;
    else if ( var_14 <= var_10 )
    {
        var_15 = var_9 - var_7;
        var_16 = sqrt( var_14 ) - var_7;
        var_17 = 1 - var_16 / var_15;
        return var_6 * var_17;
    }
    else if ( var_14 >= var_10 )
    {
        var_15 = var_11 - var_9;
        var_16 = sqrt( var_14 ) - var_9;
        var_17 = 1 - var_16 / var_15;
        return var_6 * var_17 * var_13;
    }

    return var_5;
}

is_cluster_spawner_ideal_distance( var_0, var_1 )
{
    var_2 = level.players;

    if ( isdefined( self.spawn_ref_point ) )
        var_3 = self.spawn_ref_point;
    else
        var_3 = scripts\cp\utility::get_center_point_of_array( var_2 );

    var_4 = undefined;
    var_5 = 1024;
    var_6 = 1048576;
    var_7 = 0;
    var_8 = 1000 / level.players.size;
    var_9 = 20;
    var_10 = 4194304;
    var_11 = 2048;
    var_12 = 4096;
    var_13 = 16777216;

    if ( isdefined( level.spawn_scoring_overrides ) )
    {
        var_14 = level.spawn_scoring_overrides;
        var_5 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_14.close_dist, var_5 );
        var_6 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_14.close_dist_sq, var_6 );
        var_9 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_14.far_score, var_9 );
        var_10 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_14.far_dist_sq, var_10 );
        var_11 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_14.far_dist, var_11 );
        var_12 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_14._id_1277A, var_12 );
        var_13 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_14.too_far_dist_sq, var_13 );
    }

    if ( isdefined( self.spawn_scoring_overrides ) )
    {
        var_14 = self.spawn_scoring_overrides;
        var_5 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_14.close_dist, var_5 );
        var_6 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_14.close_dist_sq, var_6 );
        var_9 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_14.far_score, var_9 );
        var_10 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_14.far_dist_sq, var_10 );
        var_11 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_14.far_dist, var_11 );
        var_12 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_14._id_1277A, var_12 );
        var_13 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_14.too_far_dist_sq, var_13 );
    }

    var_15 = 0.5;

    if ( isdefined( var_0.script_maxdist ) )
    {
        var_12 = int( var_0.script_maxdist );
        var_13 = squared( var_12 );
    }

    var_16 = distance2dsquared( var_3, var_0.origin );

    if ( var_16 >= var_13 )
        return undefined;
    else if ( var_16 <= var_10 && var_16 >= var_6 )
        var_4 = var_8;
    else if ( var_16 >= var_10 )
    {
        var_17 = 1 + var_16 / var_10;
        var_18 = var_9 / var_17;
        var_4 = var_18;
    }
    else
    {
        var_18 = var_8 * var_15;
        var_4 = var_18;
    }

    return var_4;
}

is_spawner_ideal_distance( var_0, var_1 )
{
    if ( istrue( var_0.script_forcespawn ) )
        return 1000;

    var_2 = level.players;

    if ( isdefined( self.spawn_ref_point ) )
        var_3 = self.spawn_ref_point;
    else
        var_3 = scripts\cp\utility::get_center_point_of_array( var_2 );

    var_4 = level.players[var_1];
    var_5 = undefined;
    var_6 = 1024;
    var_7 = 1048576;
    var_8 = 0;
    var_9 = 1000 / level.players.size;
    var_10 = 20;
    var_11 = 4194304;
    var_12 = 2048;
    var_13 = 4096;
    var_14 = 16777216;

    if ( isdefined( level.spawn_scoring_overrides ) )
    {
        var_15 = level.spawn_scoring_overrides;
        var_6 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_15.close_dist, var_6 );
        var_7 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_15.close_dist_sq, var_7 );
        var_10 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_15.far_score, var_10 );
        var_11 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_15.far_dist_sq, var_11 );
        var_12 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_15.far_dist, var_12 );
        var_13 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_15._id_1277A, var_13 );
        var_14 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_15.too_far_dist_sq, var_14 );
    }

    if ( isdefined( self.spawn_scoring_overrides ) )
    {
        var_15 = self.spawn_scoring_overrides;
        var_6 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_15.close_dist, var_6 );
        var_7 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_15.close_dist_sq, var_7 );
        var_10 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_15.far_score, var_10 );
        var_11 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_15.far_dist_sq, var_11 );
        var_12 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_15.far_dist, var_12 );
        var_13 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_15._id_1277A, var_13 );
        var_14 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_15.too_far_dist_sq, var_14 );
    }

    var_16 = 0.5;

    if ( isdefined( var_0.script_maxdist ) )
    {
        var_13 = int( var_0.script_maxdist );
        var_14 = squared( var_13 );
    }

    if ( isdefined( var_13 ) && isdefined( var_0 ) )
    {
        var_17 = 0;

        if ( isvector( var_0 ) )
            var_17 = scripts\common\utility::playersnear( var_0, var_13 );
        else
            var_17 = scripts\common\utility::playersnear( var_0.origin, var_13 );

        if ( var_17.size < 1 )
            return undefined;
    }

    if ( isdefined( var_0.ideal_dist ) )
    {
        var_18 = var_0.ideal_dist;
        var_19 = var_0.ideal_dist * var_0.ideal_dist;
    }
    else
    {
        var_18 = ( var_12 + var_6 ) / 2;
        var_19 = var_18 * var_18;
    }

    if ( isdefined( var_0.go_to_combat ) )
    {
        var_20 = var_0.go_to_combat;
        var_0.go_to_combat = undefined;
    }
    else
        var_20 = distancesquared( var_3, var_0.origin );

    if ( var_20 <= var_11 && var_20 >= var_7 )
        return var_9;
    else if ( var_20 >= var_11 )
    {
        var_21 = 1 + var_20 / var_11;
        var_22 = var_10 / var_21;
        return var_22;
    }
    else
    {
        var_22 = var_9 * var_16;
        return var_22;
    }

    return var_8;
}

avoid_recently_used_spawns( var_0 )
{
    var_1 = 1000;

    if ( isdefined( var_0.lastspawntime ) )
    {
        var_2 = self.current_time - var_0.lastspawntime;
        var_3 = little_bird_mg_creategunnerturret();

        if ( var_2 > var_3 )
            return var_1;

        var_4 = var_2 / var_3;
        return int( var_4 * var_1 );
    }

    return var_1;
}

_id_122B5( var_0, var_1 )
{
    if ( !isdefined( var_0.lastspawntime ) )
    {
        var_0.lastspawntime = self.current_time;
        return 1;
    }

    var_1 = self.current_time - var_0.lastspawntime;
    var_2 = little_bird_mg_creategunnerturret();
    var_3 = var_1 / var_2;

    if ( var_3 <= 0.5 )
        return 0;
    else
        return 1;
}

little_bird_mg_creategunnerturret()
{
    if ( isdefined( self.wires_on_bombs ) )
        return self.wires_on_bombs;
    else
        return 20000;
}

_id_1216E( var_0, var_1 )
{
    if ( isdefined( var_0.boundary ) && isdefined( var_1.boundary ) )
        return var_0.boundary < var_1.boundary;
    else
        return 0;
}

get_spawn_scoring_array()
{
    if ( isdefined( level.players ) && level.players.size > 0 )
        return scripts\cp\utility::get_array_of_valid_players();
    else
        return [];
}

get_close_distance_var( var_0 )
{
    var_1 = 1024;
    var_2 = 1048576;

    if ( isdefined( self.spawn_scoring_overrides ) )
    {
        if ( istrue( var_0 ) )
            return scripts\cp\cp_modular_spawning::define_var_if_undefined( self.spawn_scoring_overrides.close_dist_sq, var_2 );
        else
            return scripts\cp\cp_modular_spawning::define_var_if_undefined( self.spawn_scoring_overrides.close_dist, var_1 );
    }
    else if ( isdefined( level.spawn_scoring_overrides ) )
    {
        if ( istrue( var_0 ) )
            return scripts\cp\cp_modular_spawning::define_var_if_undefined( level.spawn_scoring_overrides.close_dist_sq, var_2 );
        else
            return scripts\cp\cp_modular_spawning::define_var_if_undefined( level.spawn_scoring_overrides.close_dist, var_1 );
    }
    else if ( istrue( self.cqb_module ) )
    {
        if ( istrue( var_0 ) )
            return 110889;
        else
            return 333;
    }
    else if ( istrue( var_0 ) )
        return var_2;
    else
        return var_1;
}

lightscriptable()
{
    var_0 = level.players;
    return var_0;
}

wait_for_tank_death( var_0 )
{
    self._id_11CAD = undefined;
}

finish( var_0, var_1 )
{
    if ( getdvarint( "scr_spawner_score_show_models" ) )
    {
        var_2 = get_spawn_scoring_type();

        if ( var_2 == "vehicle_spawner" )
            return;

        var_3 = spawn( "script_model", self.origin );

        if ( !isdefined( var_0._id_122B2 ) )
            var_0._id_122B2 = [];

        var_0._id_122B2[var_0._id_122B2.size] = var_3;

        if ( isdefined( self.angles ) )
            var_3.angles = self.angles;

        switch ( var_2 )
        {
            case "cluster_spawner":
                var_3 setmodel( "com_teddy_bear" );
                break;
            default:
                var_3 setmodel( "british_pilot_fullbody" );
                break;
        }

        scripts\cp\cp_outline::enable_outline_for_players( var_3, level.players, var_1 );
    }
}

alternatebrcircle( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( getdvarint( "scr_print_spawner_score_info", 0 ) )
    {
        if ( isdefined( var_5 ) )
        {
            if ( !isdefined( var_5._id_12A37 ) )
                last_unresolved_collision_time( var_5 );

            var_6 = var_5._id_12A37;
        }
        else
            var_6 = last_unresolved_collision_time();

        if ( !isdefined( self._id_11CAD ) )
            fixuptrigspostship();

        self._id_11CAE[var_6] = var_5;

        if ( istrue( var_3 ) || !isdefined( var_0 ) )
            var_0 = "";

        if ( !isdefined( var_2 ) )
            var_2 = "";

        if ( !isdefined( var_1 ) )
            var_1 = "";

        if ( var_0.size > 0 || var_1.size > 0 )
            var_1 = "|" + var_1;

        var_1 = var_0 + "^0" + var_1 + "^5" + var_2;

        if ( istrue( var_4 ) )
            self._id_11CAD[var_6] = var_1;

        return var_1;
    }
}

fixuptrigspostship()
{
    if ( getdvarint( "scr_print_spawner_score_info", 0 ) )
    {
        self._id_11CAD = [];
        self._id_11CAE = [];
        var_0 = self.group_name;

        if ( !isdefined( var_0 ) )
            var_0 = "";

        var_1 = "^7#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#^0" + var_0 + "^7#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#";
        alternatebrcircle( undefined, var_1, undefined, undefined, 1 );
    }
}

last_unresolved_collision_time( var_0 )
{
    if ( !isdefined( self.current_uid ) )
        self.current_uid = 0;

    if ( isdefined( var_0 ) )
        var_0._id_12A37 = self.current_uid;

    var_1 = self.current_uid;
    self.current_uid++;
    return var_1;
}

lock_player_stance()
{
    if ( isdefined( self._id_12A37 ) )
        return self._id_12A37;
    else
        return undefined;
}

_id_11DDD( var_0 )
{
    if ( getdvarint( "scr_print_spawner_score_info", 0 ) )
    {
        var_1 = var_0 lock_player_stance();
        var_0.dropbrprimaryweapons = 1;

        if ( isdefined( var_1 ) )
        {
            var_2 = self._id_11CAD[var_1];

            if ( isdefined( var_2 ) )
            {
                var_2 = "^5CHOSEN: " + var_2;
                self._id_11CAD[var_1] = var_2;
            }
        }
    }
}

loadoutdefaultfiresalediscount( var_0 )
{
    var_1 = 16777216;

    if ( isdefined( level.spawn_scoring_overrides ) )
    {
        var_2 = level.spawn_scoring_overrides;
        var_1 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_2.too_far_dist_sq, var_1 );
    }
    else if ( isdefined( self.spawn_scoring_overrides ) )
    {
        var_2 = self.spawn_scoring_overrides;
        var_1 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_2.too_far_dist_sq, var_1 );
    }

    if ( isdefined( var_0.script_maxdist ) )
    {
        var_3 = int( var_0.script_maxdist );
        var_1 = squared( var_3 );
    }

    return var_1;
}
