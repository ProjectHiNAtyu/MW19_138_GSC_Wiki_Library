// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    loadweaponranktable();
    var_0 = getdvarint( "PMORNPNTK", 1 );
    addglobalweaponrankxpmultiplier( var_0, "online_mp_weapon_xpscale" );
    level thread onplayerconnect();
}

onplayerconnect()
{
    for (;;)
    {
        level waittill( "connected", var_0 );

        if ( !isai( var_0 ) )
        {
            if ( level.weaponxpenabled )
            {
                var_1 = getdvarint( "LNQMMNNPSR" );
                var_2 = var_0 getprivatepartysize() > 1;

                if ( var_2 )
                    var_0 addweaponrankxpmultiplier( var_1, "online_mp_party_weapon_xpscale" );

                var_3 = getdvarint( "scr_weaponxp_limit", 40000 );
                var_0.setherodropscriptable = var_3;
                var_0._id_12794 = 0;
                var_0._id_130AD = [];

                foreach ( var_5, var_3 in level.weaponranktable.maxweaponranks )
                    var_0._id_130AD[var_5 + "_mp"] = 0;
            }
        }
    }
}

loadweaponranktable()
{
    level.weaponranktable = spawnstruct();
    level.weaponranktable.rankinfo = [];
    var_0 = 0;

    for (;;)
    {
        var_1 = int( tablelookuprownum( "mp/weaponRankTable.csv", 0, var_0 ) );

        if ( !isdefined( var_1 ) || var_1 < 0 )
            break;

        var_2 = spawnstruct();
        level.weaponranktable.rankinfo[var_0] = var_2;
        var_2.minxp = int( tablelookupbyrow( "mp/weaponRankTable.csv", var_0, 1 ) );
        var_2.xptonextrank = int( tablelookupbyrow( "mp/weaponRankTable.csv", var_0, 2 ) );
        var_2.maxxp = int( tablelookupbyrow( "mp/weaponRankTable.csv", var_0, 3 ) );
        var_0++;
    }

    level.weaponranktable.maxrank = var_0 - 1;
    level.weaponranktable.maxweaponranks = [];
    var_3 = 1;

    for (;;)
    {
        var_1 = int( tablelookuprownum( "mp/statstable.csv", 0, var_3 ) );

        if ( !isdefined( var_1 ) || var_1 < 0 )
            break;

        var_4 = tablelookupbyrow( "mp/statstable.csv", var_1, 4 );
        var_5 = tablelookupbyrow( "mp/statstable.csv", var_1, 42 );

        if ( !isdefined( var_4 ) || var_4 == "" || !isdefined( var_5 ) || var_5 == "" )
        {

        }
        else
        {
            var_5 = int( var_5 );
            level.weaponranktable.maxweaponranks[var_4] = var_5;
        }

        var_3++;
    }
}

getplayerweaponrank( var_0 )
{
    var_1 = getplayerweaponrankxp( var_0 );
    var_2 = getweaponrankforxp( var_1 );
    return var_2;
}

getplayerweaponrankxp( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = "all";

    switch ( var_1 )
    {
        case "mp":
            var_2 = self getplayerdata( "common", "sharedProgression", "weaponLevel", var_0, "mpXP" );
            return var_2;
        case "cp":
            var_3 = self getplayerdata( "common", "sharedProgression", "weaponLevel", var_0, "cpXP" );
            return var_3;
        case "all":
            var_2 = self getplayerdata( "common", "sharedProgression", "weaponLevel", var_0, "mpXP" );
            var_3 = self getplayerdata( "common", "sharedProgression", "weaponLevel", var_0, "cpXP" );
            return var_2 + var_3;
    }
}

isplayerweaponatmaxxp( var_0 )
{
    var_1 = getplayerweaponrankxp( var_0 );
    var_2 = getweaponmaxrankxp( var_0 );
    return var_1 >= var_2;
}

weaponshouldgetxp( var_0 )
{
    if ( self.pers["rank"] < 3 && !getdvarint( "OSPNSPSKL" ) )
        return 0;

    var_1 = scripts\cp\utility::getweaponrootname( var_0 );
    return weaponhasranks( var_1 );
}

weaponhasranks( var_0 )
{
    if ( !isdefined( level.weaponranktable.maxweaponranks[var_0] ) )
        return 0;

    var_1 = level.weaponranktable.maxweaponranks[var_0] > 0;
    return var_1;
}

getweaponmaxrankxp( var_0 )
{
    var_1 = getmaxweaponrankforrootweapon( var_0 );
    return getweaponrankinfomaxxp( var_1 );
}

getweaponrankforxp( var_0 )
{
    if ( var_0 == 0 )
        return 0;

    for ( var_1 = getmaxweaponrank() - 1; var_1 >= 0; var_1-- )
    {
        if ( var_0 >= getweaponrankinfominxp( var_1 ) )
            return var_1;
    }

    return var_1;
}

getmaxweaponrankforrootweapon( var_0 )
{
    return level.weaponranktable.maxweaponranks[var_0];
}

getmaxweaponrank()
{
    return level.weaponranktable.maxrank;
}

getweaponrankinfominxp( var_0 )
{
    return level.weaponranktable.rankinfo[var_0].minxp;
}

getweaponrankinfoxptonextrank( var_0 )
{
    return level.weaponranktable.rankinfo[var_0].xptonextrank;
}

getweaponrankinfomaxxp( var_0 )
{
    return level.weaponranktable.rankinfo[var_0].maxxp;
}

giveplayerweaponxp( var_0, var_1, var_2 )
{
    if ( isai( self ) || !isplayer( self ) || !isdefined( var_2 ) || var_2 == 0 || !level.weaponxpenabled )
        return;

    var_3 = scripts\cp\utility::getweaponrootname( var_0.basename );

    if ( !self isitemunlocked( var_3, "weapon" ) )
        return;

    if ( !weaponhasranks( var_3 ) )
        return;

    var_4 = remapscoreeventforweapon( var_1 );

    if ( var_4 != var_1 )
    {
        var_1 = var_4;
        var_2 = scripts\mp\calloutmarkerping_mp::getscoreinfovalue( var_1 );
    }

    if ( var_2 < 0 )
        return;

    var_5 = var_2;
    var_2 = var_2 * getweaponrankxpmultipliertotal();
    var_2 = int( var_2 );
    var_6 = getplayerweaponrankxp( var_3, "mp" );
    var_7 = getplayerweaponrankxp( var_3, "cp" );
    var_8 = var_6 + var_7;
    var_9 = getweaponrankforxp( var_8 );
    var_10 = getweaponmaxrankxp( var_3 );
    var_11 = var_10 - var_7;
    var_12 = var_6 + var_2;

    if ( var_12 > var_11 )
        var_12 = var_11;

    var_13 = var_12 + var_7;
    var_14 = getmaxweaponrankforrootweapon( var_3 );
    var_15 = self getplayerdata( "common", "sharedProgression", "weaponLevel", var_3, "prestige" );
    var_16 = int( min( getweaponrankforxp( var_13 ), var_14 ) );
    scripts\cp\cp_analytics::scriptablesmax( var_0, var_15, var_16, var_2, var_1 );

    if ( var_9 < var_16 )
    {
        var_17 = "weapon_rank_up_0_4";

        if ( var_16 >= 15 )
            var_17 = "weapon_rank_up_15_plus";
        else if ( var_16 >= 10 )
            var_17 = "weapon_rank_up_10_14";
        else if ( var_16 >= 5 )
            var_17 = "weapon_rank_up_5_9";

        var_18 = scripts\mp\calloutmarkerping_mp::getscoreinfovalue( var_17 );
        scripts\mp\calloutmarkerping_mp::giverankxp( var_17, var_18 );
    }

    return var_2;
}

remapscoreeventforweapon( var_0 )
{
    switch ( var_0 )
    {
        case "kill":
            var_0 = "kill_weapon";
            break;
        case "challenge":
            var_0 = "weapon_challenge";
            break;
    }

    return var_0;
}

addglobalweaponrankxpmultiplier( var_0, var_1 )
{
    level addweaponrankxpmultiplier( var_0, var_1 );
}

getglobalweaponrankxpmultiplier()
{
    return level getweaponrankxpmultiplier();
}

mid_air_explode()
{
    if ( self isbnetigrplayer() )
        return sortbydistancecullbyradius();

    return 1.0;
}

addweaponrankxpmultiplier( var_0, var_1 )
{
    if ( !isdefined( self.weaponrankxpmultipliers ) )
        self.weaponrankxpmultipliers = [];

    if ( isdefined( self.weaponrankxpmultipliers[var_1] ) )
        self.weaponrankxpmultipliers[var_1] = max( self.weaponrankxpmultipliers[var_1], var_0 );
    else
        self.weaponrankxpmultipliers[var_1] = var_0;
}

getweaponrankxpmultiplier()
{
    if ( !isdefined( self.weaponrankxpmultipliers ) )
        return 1.0;

    var_0 = 1.0;

    foreach ( var_2 in self.weaponrankxpmultipliers )
    {
        if ( !isdefined( var_2 ) )
            continue;

        var_0 = var_0 * var_2;
    }

    return var_0;
}

removeglobalweaponrankxpmultiplier( var_0 )
{
    level removeweaponrankxpmultiplier( var_0 );
}

removeweaponrankxpmultiplier( var_0 )
{
    if ( !isdefined( self.weaponrankxpmultipliers ) )
        return;

    if ( !isdefined( self.weaponrankxpmultipliers[var_0] ) )
        return;

    self.rankxpmultipliers[var_0] = undefined;
}

getweaponrankxpmultipliertotal()
{
    var_0 = getweaponrankxpmultiplier();
    var_1 = getglobalweaponrankxpmultiplier();
    var_2 = managejumpmasterinfodisplay();
    var_3 = mid_air_explode();
    var_4 = getdvarfloat( "scr_weaponxp_scalar", 1 );
    return var_0 * var_1 * var_2 * var_4 * var_3;
}

managejumpmasterinfodisplay()
{
    if ( !isdefined( level.kickplayer ) )
        level.kickplayer = float( tablelookup( "mp/gametypesTable.csv", 0, scripts\cp\utility::getgametype(), 19 ) );

    return level.kickplayer;
}

manageafktracking()
{
    if ( !isdefined( level.keypadkeys ) )
        level.keypadkeys = int( tablelookup( "mp/gametypesTable.csv", 0, scripts\cp\utility::getgametype(), 20 ) );

    return level.keypadkeys;
}

managecontrolledcallbacktimeout()
{
    if ( !isdefined( level.keypadscriptableused ) )
    {
        var_0 = getdvarint( "scr_" + scripts\cp\utility::getgametype() + "_timelimit" );

        if ( var_0 == 0 )
            var_0 = 900;

        var_1 = getdvarint( "scr_" + scripts\cp\utility::getgametype() + "_winlimit" );

        if ( var_1 > 0 )
            var_0 = var_0 * ( var_1 * 2 - 1 );

        level.keypadscriptableused = manageafktracking() / 60 * ( var_0 / 60 );
    }

    return level.keypadscriptableused;
}
