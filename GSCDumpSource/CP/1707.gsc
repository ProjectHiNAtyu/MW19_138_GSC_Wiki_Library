// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level.struct_filter = ::cp_struct_filter;
    level._id_11B5D = "vfx/iw8/core/blima/vfx_blima_explosion.vfx";
    scripts\engine\utility::init_struct_class();
    clean_up_structs();
    delete_on_load();
    setdefaultleveldata();
    setdefaultdvars();
    setupcallbacks();
    scripts\cp\utility::initgameflags();
    scripts\cp\utility::initlevelflags();
    init_global_cp_flags();
    player_has_respawn_munition();
    setupexplodertriggers();
    setdefaultgameparameters();
    setdefaultvisionset();
    setdefaultjiprules();
    loadglobalfx();
    specialentitymonitor();
    initdestructables();
    scripts\cp\scriptable::scriptable_cpglobalcallback();
    scripts\common\exploder::setupexploders();
    shellshock_init();
    inithud();
    initkilltriggerspawn();
    animscripted_loop_earlyend();
    scripts\common\fx::initfx();
    scripts\mp\callbacksetup::setupdamageflags();
    scripts\cp\cp_damagefeedback::init();
    scripts\cp\cp_movers::init();
    scripts\cp\coop_fx::main();
    scripts\cp\cp_merits::buildmeritinfo();
    scripts\cp\cp_endgame::init();
    scripts\cp\cp_laststand::init_laststand();
    scripts\cp\cp_loadout::init();
    scripts\cp\cp_create_script_utility::playersleftloop();
    thread scripts\cp\cp_equipment::player_get_carepackage_sentry();

    if ( shouldverifydedicatedconfig() )
        level thread verifydedicatedconfiguration();

    level.leanthread = getdvarint( "scr_runlean_playerthread_count", 0 ) == 1;
    level.script = tolower( getdvar( "mapname" ) );
    level.gametype = tolower( getdvar( "NKTMKRMSKR" ) );
    level.codcasterenabled = getdvarint( "MOSNOQPOSS", 0 ) == 1;
    level.systemlink = getdvarint( "LPSPMQSNPQ", 0 ) == 1;
    level.useperbullethitmarkers = getdvarint( "OMRLPMMPRL", 0 ) == 1;
    level.splitscreen = issplitscreen();
    level.onlinegame = getdvarint( "LTSNLQNRKO" );
    level.rankedmatch = level.onlinegame || getdvarint( "OSPNSPSKL" );
    level.matchmakingmatch = level.onlinegame && !getdvarint( "LSTLQTSSRM" );
    level.playerxpenabled = level.matchmakingmatch || getdvarint( "OSPNSPSKL" );
    level.weaponxpenabled = level.playerxpenabled;
    level.challengesallowed = level.matchmakingmatch || getdvarint( "OSPNSPSKL" ) || getdvarint( "debug_challenges" );
    level.enforceantiboosting = level.playerxpenabled || level.weaponxpenabled || level.challengesallowed;
    level.onlinestatsenabled = level.rankedmatch;
    level.starttimeutcseconds = getsystemtime();
    level.train_lootcrates_save_offsets = getdvarint( "LOPLPOKTOP", 0 );
    level.current_personal_interaction_structs = [];
    level.allammoboxes = [];
    level.weapon_drop_cooldown = [];
    level.grenade_drop_cooldown = [];
    level.tacticalmode = 0;
    level.teamnamelist = [ "axis", "allies" ];
    level.func["scriptModelPlayAnim"] = ::scriptmodelplayanim;
    level.func["precacheMpAnim"] = ::precachempanim;
    level.func["scriptModelClearAnim"] = ::scriptmodelclearanim;
    level.vehiclefriendlydamage = getdvarint( "scr_vehicleFriendlyDamage", 0 ) > 0;
    scripts\cp\cp_anim::init();
    level.framedurationseconds = level.frameduration / 1000;
    waypoint_init();
    level.mapcenter = findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );
    level thread scripts\cp\cp_visionsets::vision_set_management();
    level thread scripts\cp\init_cp_mp::init();
    level.lastslowprocessframe = 0;
    scripts\cp\utility::gameflaginit( "prematch_done", 0 );
    scripts\cp\utility::gameflaginit( "infil_setup_complete", 0 );
    scripts\cp\utility::gameflaginit( "infil_will_run", 0 );
    scripts\cp\utility::gameflaginit( "infil_started", 0 );
    level thread scripts\cp\utility\spawn_event_aggregator::init();
    scripts\cp\utility\lui_game_event_aggregator::init();
    level thread scripts\cp\utility\disconnect_event_aggregator::init();
    level thread scripts\cp\utility\player_frame_update_aggregator::init();
    level scripts\cp_mp\utility\game_utility::game_utility_init();
    level thread scripts\cp_mp\utility\shellshock_utility::shellshock_utility_init();
    level thread scripts\cp\cp_destruction::init_destruction();
    level thread scripts\cp\crafting_system::init_craftingsystem( 1 );
    level thread scripts\cp\cp_munitions::init_munitions();
    level thread scripts\cp\cp_outline_utility::init();
    level thread scripts\cp\inventory\cp_ac130::init();
    level thread scripts\cp\cp_deployablebox::init();
    level thread scripts\cp\drone\scout_drone::init();
    level thread scripts\cp_mp\targetmarkergroups::init();
    level thread scripts\mp\objidpoolmanager::init();
    level thread scripts\mp\playeractions::init();
    thread scripts\cp\cp_analytics::initsegmentstats();
    level thread scripts\cp\cp_analytics::grab_entities_inside();
    thread scripts\cp\so_laststand::init();
    level thread trackplayedtime();

    if ( getdvarint( "LLQQOPKTKM" ) != 1 )
        level thread scripts\mp\calloutmarkerping_mp::init();

    thread scripts\cp_mp\challenges::init();
    thread scripts\cp\so_trigger::init();
    scripts\mp\playeractions::addaction( "mantle", scripts\common\utility::allow_mantle );
    scripts\mp\playeractions::addaction( "weapon_pickup", scripts\common\utility::allow_weapon_pickup );
    level thread scripts\mp\sentientpoolmanager::init();
    level thread scripts\cp\cp_relics::init();
    level thread scripts\cp\cp_player_battlechatter::init();
    scripts\mp\vehicles\cargo_truck_mg_mp::_id_12676();
    level thread scripts\cp_mp\vehicles\vehicle::vehicle_init();
    scripts\cp_mp\utility\player_utility::playersetattractionbestplayer();
    scripts\cp_mp\entityheadicons::init();
    level thread scripts\cp_mp\killstreaks\init::init();
    level thread scripts\cp_mp\emp_debuff::emp_debuff_init();
    level thread scripts\engine\scriptable_door::system_init();
    thread scripts\cp_mp\gestures::init();
    thread scripts\cp\gestures_cp::init_cp();

    if ( !scripts\cp\pvpe\pvpe::pvpe_enabled() )
        level thread scripts\cp\respawn\cp_respawn::main();

    level thread scripts\cp\extraction\cp_extraction::main();
    level thread scripts\cp_mp\execution::execution_init();
    level thread scripts\mp\mp_agent_damage::player_equip_secondary();

    if ( getdvarint( "scr_dogtag_revive", 0 ) != 0 )
        level.dogtag_revive = 1;

    level thread watchslowmo();
    scripts\common\utility::allow_add( "gesture", scripts\cp\utility\player::allow_gesture );
    scripts\common\utility::allow_add( "supers", scripts\common\utility::allow_supers );
    scripts\common\utility::allow_add( "health_regen", scripts\cp\utility\player::allow_health_regen );
    scripts\common\utility::allow_add( "one_hit_melee_victim", scripts\cp\utility\player::allow_one_hit_melee_victim );
    scripts\common\utility::allow_add( "flashed", scripts\cp\utility\player::allow_flashed );
    scripts\common\utility::allow_add( "stunned", scripts\cp\utility\player::allow_stunned );
    scripts\common\utility::allow_add( "stick_kill", scripts\cp\utility\player::allow_stick_kill );
    level.ghostridewhip = 1;
    scripts\common\utility::_id_1229A();
}

trackplayedtime()
{
    level endon( "game_ended" );
    scripts\cp\utility::gameflagwait( "prematch_done" );

    while ( !level.gameended )
    {
        wait 1.0;

        foreach ( var_1 in level.players )
            var_1 trackplayedtimeupdate();
    }
}

trackplayedtimeupdate()
{
    if ( isdefined( self.timeplayed ) )
    {
        var_0 = self.sessionteam;

        if ( !isdefined( self.timeplayed[var_0] ) )
            self.timeplayed[var_0] = 0;
        else
            self.timeplayed[var_0]++;

        if ( var_0 != "spectator" && var_0 != "follower" )
        {
            self.timeplayed["total"]++;
            self.timeplayed["missionTeam"]++;

            if ( !scripts\cp\utility\player::isreallyalive( self ) )
                self.timeplayed["timeDead"]++;
        }
    }
}

cp_struct_filter( var_0 )
{
    if ( !isdefined( level.struct_filter_kvps ) )
        level.struct_filter_kvps = [];

    switch ( var_0.targetname )
    {
        case "lighttank_drop":
            return 0;
    }

    level.struct_filter_kvps[var_0.targetname] = var_0.targetname;
    return 1;
}

clean_up_structs()
{
    if ( getdvar( "NSQLTTMRMP" ) == "cp_landlord_2" )
    {
        var_0 = scripts\engine\utility::getstructarray( "default_player_start", "targetname" );
        var_0[0].origin = ( 4143.57, 61393.6, 774.27 );
        var_0[0].angles = ( 0, 181.31, 0 );
        var_0[1].origin = ( 4134.67, 61466.8, 774.54 );
        var_0[1].angles = ( 0, 181.31, 0 );
        var_0[2].origin = ( 4140.57, 61429.5, 774.09 );
        var_0[2].angles = ( 0, 181.31, 0 );
        var_0[3].origin = ( 4144.67, 61338.1, 775.37 );
        var_0[3].angles = ( 0, 181.31, 0 );
    }

    if ( isdefined( level.struct_filter_kvps ) )
        level.struct_filter_kvps = undefined;

    var_1 = level.struct;
    level.struct = [];

    for ( var_2 = 0; var_2 < var_1.size; var_2++ )
    {
        if ( isdefined( var_1[var_2] ) )
            level.struct[level.struct.size] = var_1[var_2];
    }
}

_id_1303A( var_0, var_1, var_2 )
{
    getentitylessscriptablearray( "dlog_event_cp_runtime_struct_data", [ "key", var_0, "pair", var_1, "count", var_2 ] );
}

waypoint_init()
{
    if ( level.splitscreen )
        level.waypoint_size = 15;
    else
        level.waypoint_size = 8;

    level.waypoint_alpha = 0.75;
    level.waypoint_index = 0;
}

findboxcenter( var_0, var_1 )
{
    var_2 = ( 0, 0, 0 );
    var_2 = var_1 - var_0;
    var_2 = ( var_2[0] / 2, var_2[1] / 2, var_2[2] / 2 ) + var_0;
    return var_2;
}

init_global_cp_flags()
{
    scripts\engine\utility::flag_init( "level_stealth_initialized" );
    scripts\engine\utility::flag_init( "strike_init_done" );
    scripts\engine\utility::flag_init( "infil_complete" );
    scripts\engine\utility::flag_init( "introscreen_over" );
    scripts\engine\utility::flag_init( "interactions_initialized" );
    scripts\engine\utility::flag_init( "level_ready_for_script" );
    scripts\engine\utility::flag_init( "player_spawned_with_loadout" );
    scripts\engine\utility::flag_init( "ready_for_devgui" );
    level thread _id_11E51();
}

player_has_respawn_munition()
{
    scripts\engine\utility::create_func_ref( "create_script_init", ::flag0 );
}

_id_11E51()
{
    level endon( "game_ended" );
    scripts\engine\utility::flag_wait_all( "strike_init_done", "infil_complete", "introscreen_over", "interactions_initialized" );
    scripts\engine\utility::flag_set( "level_ready_for_script" );
}

setdefaultleveldata()
{
    level.splitscreen = issplitscreen();
    level.onlinegame = getdvarint( "LTSNLQNRKO" );
    level.playerxpenabled = level.onlinegame;
    level.rankedmatch = level.onlinegame && !getdvarint( "LSTLQTSSRM" ) || getdvarint( "OSPNSPSKL" );
    level.script = tolower( getdvar( "mapname" ) );
    level.mapname = scripts\cp_mp\utility\game_utility::getmapname();
    level.gametype = tolower( getdvar( "MOLPOSLOMO" ) );
    level.otherteam["allies"] = "axis";
    level.otherteam["axis"] = "allies";
    level.multiteambased = 0;
    level.teambased = 1;
    level.func = [];
    level.createfx_enabled = getdvar( "LSTTOTKPNP" ) != "";
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    level.hardcoremode = 0;
    level.numgametypereservedobjectives = 0;
    level.reclaimedreservedobjectives = [];
    level.date = scripts\cp\utility::get_actual_time_from_civil( 8 );
    level.default_goalradius = 2048;
    level.path_node_table = "cp/cp_path_node_table.csv";
    init_create_script();
}

setdefaultdvars()
{
    setdvar( "ui_inhostmigration", 0 );
    setdvar( "NOSLRNTRKL", getdvarint( "scr_thirdPerson" ) );
    setdvar( "MPOKQNLPRM", getdvar( "scr_game_forceuav" ) );
    setdvar( "isMatchMakingGame", scripts\cp\utility::matchmakinggame() );
    setdvar( "ui_overtime", 0 );
    setdvar( "ui_allow_teamchange", 1 );
    setdvar( "SLLNLPRON", 1 );
    setdvar( "MSKKKKOPKS", 5 );
    setdvar( "ui_friendlyfire", 0 );
    setdvar( "LMQOKPRSML", 0 );
    setdvar( "LOPKSRNTTS", scripts\engine\utility::ter_op( level.hardcoremode == 1, 0, 1 ) );
    setdvar( "LROTSRRQMQ", 1 );
    setdvar( "NKMOPQSPMO", 0 );
    setdvar( "scr_print_dialogue_alias", 0 );
    setdvar( "scr_init_cs_files", "" );
    setdvar( "LSQQNTRKKL", defaultplayermaxhealth() );
    setdvarifuninitialized( "scr_slowmo", "" );
}

setupcallbacks()
{
    level.callbackstartgametype = ::coopstartgametype;
    level.deactivategastrap = ::blank;
    level.callbackplayerconnect = ::defaultplayerconnect;
    level.callbackplayerdisconnect = ::defaultplayerdisconnect;
    level.callbackplayerdamage = ::defaultplayerdamage;
    level.callbackplayerimpaled = ::callback_agent_impaled;
    level.callbackplayerkilled = ::defaultplayerkilled;
    level.callbackplayermigrated = ::defaultplayermigrated;
    level.callbackhostmigration = ::defaulthostmigration;
    level.getspawnpoint = ::defaultgetspawnpoint;
    level.onspawnplayer = ::blank;
    level.onprecachegametype = ::blank;
    level.onstartgametype = ::blank;
    level.playermaxhealth = ::defaultplayermaxhealth;
    level.playerinitinvulnerability = ::player_init_invulnerability;
    level.spawnplayerfunc = ::spawnplayer;
    level.enterspectatorfunc = ::enterspectator;
    level.intermissionfunc = ::spawnintermission;
    level.getkilltriggerspawnloc = ::getkilltriggerspawnloc;
    level.initagentscriptvariables = scripts\cp\cp_agent_utils::initagentscriptvariables;
    level.setagentteam = scripts\cp\cp_agent_utils::set_agent_team;
    level.agentvalidateattacker = scripts\cp\cp_agent_utils::validateattacker;
    level.agentfunc = scripts\cp\cp_agent_utils::agentfunc;
    level.getfreeagent = scripts\cp\cp_agent_utils::getfreeagent;
    level.addtocharactersarray = scripts\cp\cp_agent_utils::addtocharactersarray;
    level.callbackplayerlaststand = scripts\cp\cp_laststand::callback_defaultplayerlaststand;
    level.endgame = scripts\cp\cp_endgame::endgame;
    level.forceendgame = scripts\cp\cp_endgame::forceendgame;

    if ( getdvar( "MOLPOSLOMO" ) == "cp_survival" )
        level.intermissionfunc = ::spawnintermission;
}

loadglobalfx()
{
    level._effect["slide_dust"] = loadfx( "vfx/core/screen/vfx_scrnfx_tocam_slidedust_m" );
}

defaultplayerdamage( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11 )
{

}

defaultplayerkilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{

}

watchslowmo()
{
    var_0 = "";

    for (;;)
    {
        if ( getdvar( "scr_slowmo", var_0 ) != var_0 )
            break;

        wait 1;
    }

    var_1 = getdvarfloat( "scr_slowmo" );
    setslowmotion( var_1, var_1, 0.0 );
    thread watchslowmo();
}

callback_agent_impaled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    thread impale( var_0, self, var_1, var_2, var_3, var_4, var_5, var_6, var_7 );
}

impale( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 )
{
    if ( isdefined( level.harpoon_impale_additional_func ) )
        [[ level.harpoon_impale_additional_func ]]( var_2, var_0, var_1, var_4, var_5, var_6, var_7, var_8 );
    else
    {
        var_1 startragdoll();
        var_9 = physics_createcontents( [ "physicscontents_solid", "physicscontents_glass", "physicscontents_missileclip", "physicscontents_vehicle", "physicscontents_item" ] );
        var_10 = var_4 + var_5 * 4096;
        var_11 = scripts\engine\trace::ray_trace_detail( var_4, var_10, undefined, var_9, undefined, 1 );
        var_10 = var_11["position"] - var_5 * 12;
        var_12 = length( var_10 - var_4 );
        var_13 = var_12 / 1250;
        var_13 = clamp( var_13, 0.05, 1 );
        wait 0.05;
        var_14 = var_5;
        var_15 = anglestoup( var_0.angles );
        var_16 = vectorcross( var_14, var_15 );
        var_17 = scripts\engine\utility::spawn_tag_origin( var_4, axistoangles( var_14, var_16, var_15 ) );
        var_17 moveto( var_10, var_13 );
        var_18 = spawnragdollconstraint( var_1, var_6, var_7, var_8 );
        var_18.origin = var_17.origin;
        var_18.angles = var_17.angles;
        var_18 linkto( var_17 );
        thread impale_cleanup( var_1, var_17, var_13 + 0.05, var_18 );
    }
}

impale_cleanup( var_0, var_1, var_2, var_3 )
{
    var_0 scripts\engine\utility::_id_12E54( var_2, "death", "disconnect" );
    var_3 delete();
    var_1 delete();
}

setupexplodertriggers()
{
    var_0 = [ "trigger_multiple", "trigger_once", "trigger_use", "trigger_radius", "trigger_lookat", "trigger_damage" ];

    foreach ( var_2 in var_0 )
    {
        var_3 = getentarray( var_2, "classname" );

        for ( var_4 = 0; var_4 < var_3.size; var_4++ )
        {
            if ( isdefined( var_3[var_4].script_prefab_exploder ) )
                var_3[var_4].script_exploder = var_3[var_4].script_prefab_exploder;

            if ( isdefined( var_3[var_4].script_exploder ) )
                level thread exploder_load( var_3[var_4] );
        }
    }
}

specialentitymonitor()
{
    level thread trackgrenades();
    level thread trackmissiles();
    level thread trackcarepackages();
}

trackgrenades()
{
    for (;;)
    {
        level.grenades = getentarray( "grenade", "classname" );
        wait 0.05;
    }
}

trackmissiles()
{
    for (;;)
    {
        level.missiles = getentarray( "rocket", "classname" );
        wait 0.05;
    }
}

trackcarepackages()
{
    for (;;)
    {
        level.carepackages = getentarray( "care_package", "targetname" );
        wait 0.05;
    }
}

defaultplayermaxhealth()
{
    if ( istrue( self.keep_perks ) )
    {
        if ( scripts\cp\utility::has_zombie_perk( "perk_machine_tough" ) )
            return 200;
        else
            return 180;
    }
    else
        return 180;
}

setdefaultgameparameters()
{
    game["thermal_vision"] = "thermal_mp";
    game["attackers"] = "allies";
    game["defenders"] = "axis";
    game["clientid"] = 0;
    game["state"] = "playing";
    game["status"] = "normal";
}

setdefaultvisionset()
{
    visionsetnaked( "", 0 );
    visionsetnight( "default_night_mp" );
    visionsetmissilecam( "missilecam" );
    visionsetthermal( game["thermal_vision"] );

    if ( scripts\cp_mp\utility\game_utility::isnightmap() )
        visionsetpain( "pain_mp_night", 0 );
    else
        visionsetpain( "pain_mp", 0 );
}

setdefaultjiprules()
{
    setnojipscore( 0, 1 );
    setnojiptime( 0, 1 );
}

defaultgetspawnpoint()
{
    return getassignedspawnpoint( scripts\engine\utility::getstructarray( "default_player_start", "targetname" ) );
}

getassignedspawnpoint( var_0 )
{
    var_1 = self getentitynumber();
    return var_0[var_1];
}

defaultendgame()
{
    level.gameended = 1;
    setomnvar( "allow_server_pause", 0 );
    level notify( "game_ended", "allies" );
    wait 0.05;
    exitlevel( 0 );
}

coopstartgametype()
{
    [[ level.onprecachegametype ]]();
    level thread monitor_num_players();
    resetlevelflags();
    resetlevelarrays();
    scripts\cp\cp_create_script_utility::playerspawnexfilchopper();
    scripts\cp\cp_analytics::scripted_fov();
    scripts\cp\perks\cp_perks::initperks();
    scripts\cp\cp_weaponrank::init();
    thread scripts\cp\cp_powers::init();
    scripts\cp\cp_merits::init();
    level thread runprematch();
    level thread graceperiodmonitor();
    scripts\cp\cp_aiparachute::player_equip_regen();
    sysprint( "Ready for Compass" );
    scripts\mp\flags::levelflaginit( "game_over", 0 );
    level thread startgame();
    level thread scripts\mp\mp_agent::init_spawn_times();
    level thread scripts\cp\cp_mapselect::init();
    level thread scripts\cp\cp_vehicles::coopvehicles_init();
    level scripts\cp\utility\player_frame_update_aggregator::registerplayerframeupdatecallback( ::disable_recent_area_memory );

    if ( !istrue( level.dev_build ) )
    {
        scripts\cp\utility::add_demo_button_combo( [ "touchpad", "swap_weapon_release" ], ::demo_toggle_infiniteammo, undefined, 1 );
        scripts\cp\utility::add_demo_button_combo( [ "touchpad", "swap_weapon", "swap_weapon_release" ], ::demo_toggle_infiniteammo, undefined, 1 );
        scripts\cp\utility::add_demo_button_combo( [ "touchpad", "stance_release" ], ::demo_toggle_ufo, undefined, 1 );
        scripts\cp\utility::add_demo_button_combo( [ "touchpad", "stance", "stance_release" ], ::demo_toggle_ufo, undefined, 1 );
        scripts\cp\utility::add_demo_button_combo( [ "touchpad", "use_release" ], ::demo_toggle_godmode, undefined, 1 );
        scripts\cp\utility::add_demo_button_combo( [ "touchpad", "use", "use_release" ], ::demo_toggle_godmode, undefined, 1 );
    }
    else
        scripts\cp\utility::add_demo_button_combo( [ "ads", "use", "A", "use_release", "A_release" ], scripts\cp\cp_modular_spawning::print_active_modules_to_screen, "Show Active Modules", 2 );

    game["gamestarted"] = 1;
    level thread wait_for_strike_init_complete();
    scripts\cp\cp_agent_damage::register_ai_damage_callbacks();
    scripts\cp\cp_agent_damage::register_ai_drop_funcs();
    level.registerarmsracevfx = ::registeraccesscardlocs;
}

registeraccesscardlocs()
{

}

flag0()
{
    level endon( "game_ended" );
    scripts\engine\utility::flag_wait( "level_ready_for_script" );
}

init_create_script()
{
    level.threadedscriptspawners = 1;
    level.create_script_file_ids = [];
    level.cs_scripted_spawners = [];
    level.scripted_spawners = [];
    level.cs_scripted_spawners_triggers = [];
    level.scripted_spawners_triggers = [];
    level.cs_scripted_spawners_models = [];
    level.scripted_spawners_models = [];
    level.createscriptfilesinitialized = 0;
    level.scripted_spawner_func_strings = [];
    level.scripted_spawner_map_strings = [];
    level.scripted_spawner_func = [];
}

wait_for_strike_init_complete()
{
    if ( scripts\engine\utility::flag_exist( "strike_init_done" ) )
    {
        level endon( "game_ended" );
        scripts\engine\utility::flag_wait( "strike_init_done" );
    }

    if ( scripts\cp\coop_stealth::run_blima_exfil_sequence() )
    {
        scripts\mp\trials\mp_trials_patches_petrograd::main();
        scripts\engine\utility::flag_set( "level_stealth_initialized" );
    }
}

resetlevelflags()
{
    level.fauxvehiclecount = 0;
    level.gameended = 0;
    level.graceperiod = 10;
    level.ingraceperiod = level.graceperiod;
    level.noragdollents = getentarray( "noragdoll", "targetname" );
    level.friendlyfire = 0;
    level.starttime = gettime();
}

resetlevelarrays()
{
    level.players = [];
    level.participants = [];
    level.characters = [];
    level.helis = [];
    level.turrets = [];
    level.ims = [];
    level.ugvs = [];
    level.balldrones = [];
    level.fake_players = [];
    level.demo_button_combos = [];
    thread scripts\common\utility::allow_init();
}

runprematch()
{
    level notify( "coop_pre_match" );
    level endon( "coop_pre_match" );
    level endon( "game_ended" );
    setomnvar( "ui_prematch_period", 1 );

    if ( isdefined( level.prematchfunc ) )
        [[ level.prematchfunc ]]();

    scripts\cp\utility::gameflagset( "prematch_done" );
    setomnvar( "ui_prematch_period", 0 );
}

graceperiodmonitor()
{
    level notify( "coop_grace_period" );
    level endon( "game_ended" );
    level endon( "coop_grace_period" );

    while ( getactiveclientcount() == 0 )
        wait 0.05;

    while ( level.ingraceperiod > 0 )
    {
        wait 1.0;
        level.ingraceperiod--;
    }

    level.ingraceperiod = 0;
}

startgame()
{
    [[ level.onstartgametype ]]();
}

shouldverifydedicatedconfig()
{
    return getdvar( "dedicated" ) == "dedicated LAN server" || getdvar( "dedicated" ) == "dedicated internet server";
}

verifydedicatedconfiguration()
{
    for (;;)
    {
        if ( level.rankedmatch )
            exitlevel( 0 );

        if ( !getdvarint( "LSTLQTSSRM" ) )
            exitlevel( 0 );

        if ( getdvar( "dedicated" ) != "dedicated LAN server" && getdvar( "dedicated" ) != "dedicated internet server" )
            exitlevel( 0 );

        wait 5;
    }
}

refreshuimatchinprogressomnvarvalue()
{
    var_0 = 0;

    if ( level.players.size > 1 )
        var_0 = 1;

    foreach ( var_2 in level.players )
        var_2 setclientomnvar( "ui_match_in_progress", var_0 );
}

defaultplayerconnect()
{
    self endon( "disconnect" );
    self.statusicon = "hud_status_connecting";
    self waittill( "begin" );
    self.statusicon = "";
    var_0 = gettime();
    level notify( "connected", self );
    initplayersessionstats();
    setplayerconnectscriptfields();
    initclientdvars();
    setupsavedactionslots();
    initplayerperks();
    initlaststand();
    scripts\cp\cp_armor::armorinit( self );
    scripts\cp\perks\cp_prestige::initplayerprestige();
    scripts\cp\perks\cp_perks::init_each_perk();
    scripts\cp\cp_damage::initplayerdamagefunctions();
    self.no_team_outlines = 0;
    self.no_outline = 0;
    self.enemy_list = [];
    self.boundary = 0;
    thread _id_11F32();

    if ( scripts\cp\utility::coop_mode_has( "outline" ) )
        thread scripts\cp\cp_outline::playeroutlinemonitor();

    thread demo_allowed_debug_outline();
    thread scripts\cp\cp_vo::initandstartvosystem();
    thread scripts\cp\cp_merits::updatemerits();
    thread scripts\cp\agents\gametype_cp_wave_sv::_id_1300E();
    thread track_forward_velocity();
    self.pers["matchdataWeaponStats"] = [];
    self setclientomnvar( "ui_scoreboard_freeze", 0 );

    if ( self ishost() )
        level.player = self;

    waittillframeend;
    addplayertolevelarrays( self );

    if ( game["state"] == "postgame" )
    {
        self.connectedpostgame = 1;
        self setclientdvars( "cg_drawSpectatorMessages", 0 );
        spawnintermission();
        return;
    }

    if ( isai( self ) && isdefined( level.bot_funcs ) && isdefined( level.bot_funcs["think"] ) )
        self thread [[ level.bot_funcs["think"] ]]();

    level endon( "game_ended" );

    if ( isdefined( level.hostmigrationtimer ) )
        thread scripts\cp\cp_hostmigration::hostmigrationtimerthink();

    if ( isdefined( level.onplayerconnectaudioinit ) )
        [[ level.onplayerconnectaudioinit ]]();

    if ( !isai( self ) )
        playermonitor();

    if ( getdvarint( "scr_playtest_munitions", 0 ) )
        thread give_playtest_munitions();

    scripts\cp_mp\utility\game_utility::startkeyearning();
    spawnplayer();
}

disable_recent_area_memory()
{
    if ( !isalive( self ) )
        scripts\cp_mp\execution::disableexecutionattackwrapper();
    else if ( istrue( self.inlaststand ) )
        scripts\cp_mp\execution::disableexecutionattackwrapper();
    else if ( istrue( self.being_revived ) )
        scripts\cp_mp\execution::disableexecutionattackwrapper();
    else if ( istrue( self.isreviving ) )
        scripts\cp_mp\execution::disableexecutionattackwrapper();
    else if ( self isreloading() )
        scripts\cp_mp\execution::disableexecutionattackwrapper();
    else if ( istrue( self.binvehicle ) )
        scripts\cp_mp\execution::disableexecutionattackwrapper();
    else if ( self isonladder() )
        scripts\cp_mp\execution::disableexecutionattackwrapper();
    else if ( self issprintsliding() )
        scripts\cp_mp\execution::disableexecutionattackwrapper();
    else if ( self issupersprinting() )
        scripts\cp_mp\execution::disableexecutionattackwrapper();
    else if ( self isjumping() )
        scripts\cp_mp\execution::disableexecutionattackwrapper();
    else if ( self isgestureplaying() )
        scripts\cp_mp\execution::disableexecutionattackwrapper();
    else if ( self isviewmodelanimplaying() )
        scripts\cp_mp\execution::disableexecutionattackwrapper();
    else if ( self isthrowinggrenade() )
        scripts\cp_mp\execution::disableexecutionattackwrapper();
    else if ( self isparachuting() )
        scripts\cp_mp\execution::disableexecutionattackwrapper();
    else if ( self isinfreefall() )
        scripts\cp_mp\execution::disableexecutionattackwrapper();
    else if ( istrue( self.isjuggernaut ) )
        scripts\cp_mp\execution::disableexecutionattackwrapper();
    else if ( self islinked() )
        scripts\cp_mp\execution::disableexecutionattackwrapper();
    else if ( !self isonground() )
        scripts\cp_mp\execution::disableexecutionattackwrapper();
    else
        scripts\cp_mp\execution::enableexecutionattackwrapper();
}

demo_allowed_debug_outline()
{
    self endon( "disconnect" );
    thread demo_debug_outline_button_watcher();

    for (;;)
    {
        self waittill( "demo_debug_outline" );

        if ( getdvarint( "scr_demo_debug", 0 ) )
        {
            if ( isdefined( level.debug_outline ) )
            {
                setdvar( "scr_show_teleport_reason", 0 );
                level.debug_outline = undefined;
                scripts\cp\cp_outline::unset_outline();
                scripts\cp\cp_outline::restore_outline_settings();
                announcement( "DEBUG - Outline Turned Off!" );
                iprintln( "DEBUG - Outline Turned Off!" );
            }
            else
            {
                setdvar( "scr_show_teleport_reason", 1 );
                level.debug_outline = 1;
                scripts\cp\cp_outline::save_outline_settings();
                demo_debug_outline_settings();
                level thread scripts\cp\cp_outline::set_outline( "outline_nodepth_red" );
                announcement( "DEBUG - Outline Turned On!" );
                iprintln( "DEBUG - Outline Turned On!" );
            }

            wait 0.1;
            continue;
        }

        wait 1;
    }
}

demo_toggle_godmode()
{

}

demo_toggle_ufo()
{

}

demo_toggle_infiniteammo()
{
    var_0 = getdvarint( "player_sustainAmmo", 0 );

    if ( var_0 == 0 )
    {
        announcement( "Infinite Ammo - On" );
        var_0 = 1;
    }
    else
    {
        announcement( "Infinite Ammo - Off" );
        var_0 = 0;
    }

    setdvar( "player_sustainAmmo", var_0 );
}

getdomplateradius()
{
    var_0 = getaiarray( "axis" );

    for ( var_1 = 0; var_1 < var_0.size; var_1++ )
        var_0[var_1] kill( level.players[0].origin, level.players[0] );
}

demo_debug_outline_button_watcher()
{
    self endon( "disconnect" );
    self notifyonplayercommand( "first", "-actionslot 1" );
    self notifyonplayercommand( "second", "-actionslot 2" );
    self notifyonplayercommand( "third", "+usereload" );

    for (;;)
    {
        var_0 = scripts\engine\utility::_id_12E59( 2, "first" );

        if ( var_0 == "timeout" )
            continue;

        var_0 = scripts\engine\utility::_id_12E59( 2, "second" );

        if ( var_0 == "timeout" )
            continue;

        var_0 = scripts\engine\utility::_id_12E59( 2, "first" );

        if ( var_0 == "timeout" )
            continue;

        var_0 = scripts\engine\utility::_id_12E59( 2, "second" );

        if ( var_0 == "timeout" )
            continue;

        var_0 = scripts\engine\utility::_id_12E59( 2, "third" );

        if ( var_0 == "timeout" )
            continue;

        self notify( "demo_debug_outline" );
        waitframe();
    }
}

demo_debug_outline_settings()
{
    setdvar( "LRMPROLMKN", ".5 .5 .5 1" );
    setdvar( "NTOSKSTKQQ", "1 1 1 .2" );
    setdvar( "NSNOLMTLLL", "1 .25 .25 1" );
    setdvar( "LSRTPRNOLS", ".7 .7 .7 1" );
    setdvar( "LNNOSQKRTP", "1 0 0 1" );
    setdvar( "RKSQOKQNK", 1 );
}

_id_11F32()
{
    self notify( "setup_player_stealth" );
    self endon( "setup_player_stealth" );
    self endon( "disconnect" );
    self waittill( "spawned_player" );

    if ( scripts\cp\coop_stealth::run_blima_exfil_sequence() )
    {
        scripts\engine\utility::flag_wait( "level_stealth_initialized" );
        scripts\stealth\player::main();
        scripts\engine\utility::ent_flag_clear( "stealth_use_real_lighting" );
        thread scripts\cp\coop_stealth::_id_125B4();
        thread scripts\cp\coop_stealth::_id_126F6();
    }
}

track_forward_velocity()
{
    self notify( "track_forward_velocity" );
    self endon( "track_forward_velocity" );
    self endon( "disconnect" );
    self waittill( "spawned_player" );
    self.velo_array = [];
    self.average_velo = ( 0, 0, 0 );
    self.mag_array = [];
    self.average_mag = 0;
    self.velo_forward = self.origin;
    self._id_12D3D = [];
    var_0 = 0;
    var_1 = 0;
    var_2 = 0;
    var_3 = 0;
    var_4 = undefined;

    for (;;)
    {
        var_5 = self getvelocity();
        var_6 = [];
        var_7 = [ 1024 * min( length( var_5 ) / 240, 1 ) ];
        var_8 = [];

        if ( var_5 != ( 0, 0, 0 ) )
        {
            if ( !isdefined( var_4 ) || distance2dsquared( self.origin, var_4 ) >= 62500 )
            {
                var_0 = 1;
                var_1 = 1;
                var_2 = 0;
                var_3 = 0;
                var_8[var_8.size] = self.origin;
                var_6[var_6.size] = var_5;
                var_4 = self.origin;
            }
            else
            {
                var_2++;
                var_3++;

                if ( var_2 >= 12 )
                {
                    var_2 = 0;
                    var_0 = 0;
                }

                if ( var_3 >= 5 )
                {
                    var_3 = 0;
                    var_1 = 0;
                }
            }
        }
        else
        {
            var_2++;
            var_3++;

            if ( var_2 >= 12 )
            {
                var_2 = 0;
                var_0 = 0;
            }

            if ( var_3 >= 5 )
            {
                var_3 = 0;
                var_1 = 0;
            }
        }

        var_9 = var_7[0];
        var_10 = int( min( 20, self.velo_array.size ) );

        for ( var_11 = 0; var_11 < var_10; var_11++ )
        {
            if ( !var_0 && var_11 + 1 >= var_10 )
            {
                var_0 = 1;
                break;
            }

            var_6[var_6.size] = self.velo_array[var_11];
            var_7[var_7.size] = self.mag_array[var_11];
            var_9 = var_9 + self.mag_array[var_11];
        }

        var_12 = 5;

        if ( isdefined( level.getteamspawnbots ) )
            var_12 = level.getteamspawnbots;

        var_10 = int( min( var_12, self._id_12D3D.size ) );

        for ( var_11 = 0; var_11 < var_10; var_11++ )
        {
            if ( !var_1 && var_11 + 1 >= var_10 )
            {
                var_1 = 1;
                break;
            }

            var_13 = var_8.size;
            var_8[var_13] = self._id_12D3D[var_11];
        }

        self._id_12D3D = var_8;
        self.velo_array = var_6;

        if ( self.velo_array.size > 0 )
            self.average_velo = calculate_average_velocity( self.velo_array );

        self.mag_array = var_7;
        self.average_mag = var_9 / self.mag_array.size;
        self.velo_forward = self.origin + vectornormalize( self.average_velo ) * self.average_mag;
        wait 0.5;
    }
}

calculate_average_velocity( var_0 )
{
    if ( var_0.size == 1 )
        return var_0[0];

    var_1 = var_0[0];

    for ( var_2 = 1; var_2 < var_0.size; var_2++ )
        var_1 = var_1 + var_0[var_2];

    return var_1 / var_0.size;
}

give_playtest_munitions()
{
    self endon( "disconnect" );
    self waittill( "spawned_player" );
    wait 2;
    self.munition_splash_supress = 1;

    if ( allow_munitions( self ) )
    {
        scripts\cp\cp_munitions::give_munition_to_slot( "ammo_crate", 1 );
        scripts\cp\cp_munitions::give_munition_to_slot( "armor", 2 );
        scripts\cp\cp_munitions::give_munition_to_slot( "grenade_crate", 3 );
    }

    self.munition_splash_supress = undefined;
}

allow_munitions( var_0 )
{
    if ( isdefined( level.allow_munitions ) )
        return [[ level.allow_munitions ]]( var_0 );

    return 1;
}

playermonitor()
{
    thread slidemonitor();
    thread forceendmonitor();
    setup_button_notifys();
    thread scripts\cp\cp_munitions::givemunitionfromluinotify();
    thread truckcollision( self );
    thread scripts\cp\cp_loadout::change_loadout_watcher( self );
}

setplayerconnectscriptfields()
{
    self.guid = scripts\cp\utility::getuniqueid();
    self.clientid = game["clientid"];
    game["clientid"]++;
    self.usingonlinedataoffline = self isusingonlinedataoffline();
    self.connected = 1;
    self.waitingtospawn = 0;
    self.movespeedscaler = 1;
    self.objectivescaler = 1;
    self.inlaststand = 0;
}

initclientdvars()
{
    initclientdvarssplitscreenspecific();
    self setclientdvars( "cg_drawSpectatorMessages", 1, "QKMSSSLPK", 0, "SKNSKQTQR", 1, "OLKRNORMOQ", 1, "LTLQSKRKQM", 0, "ui_altscene", 0 );

    if ( level.teambased )
        self setclientdvar( "LQKPQMPRQN", 0 );
}

initclientdvarssplitscreenspecific()
{
    if ( level.splitscreen || self issplitscreenplayer() )
    {
        self setclientdvars( "NSSLSNKPN", "0.75" );
        setdvar( "r_materialBloomHQScriptMasterEnable", 0 );
    }
    else
        self setclientdvars( "NSSLSNKPN", "1" );
}

setupsavedactionslots()
{
    self.saved_actionslotdata = [];

    for ( var_0 = 1; var_0 <= 4; var_0++ )
    {
        self.saved_actionslotdata[var_0] = spawnstruct();
        self.saved_actionslotdata[var_0].type = "";
        self.saved_actionslotdata[var_0].item = undefined;
    }

    if ( !self isconsoleplayer() )
    {
        for ( var_0 = 5; var_0 <= 8; var_0++ )
        {
            self.saved_actionslotdata[var_0] = spawnstruct();
            self.saved_actionslotdata[var_0].type = "";
            self.saved_actionslotdata[var_0].item = undefined;
        }
    }
}

initplayerperks()
{
    self.perks = [];
    self.perksperkname = [];
}

slidemonitor()
{
    self endon( "disconnect" );

    for (;;)
    {
        self waittill( "sprint_slide_begin" );
        self playfx( level._effect["slide_dust"], self geteye() );
    }
}

forceendmonitor()
{
    self endon( "disconnect" );
    level endon( "game_ended" );

    for (;;)
    {
        self waittill( "luinotifyserver", var_0, var_1 );

        if ( var_0 == "arcade_off" )
            self notify( "adjustedStance" );

        if ( var_0 == "end_game" )
        {
            level thread [[ level.forceendgame ]]();
            self notify( "disconnect" );
        }
    }
}

setup_button_notifys()
{
    self setactionslot( 1, "" );

    if ( istrue( level.disable_nvg ) )
        self setactionslot( 2, "" );

    self setactionslot( 3, "" );
    self setactionslot( 4, "" );
    self notifyonplayercommand( "D_pad_up", "+actionslot 1" );
    self notifyonplayercommand( "D_pad_down", "+actionslot 2" );
    self notifyonplayercommand( "D_pad_left", "+actionslot 3" );
    self notifyonplayercommand( "D_pad_right", "+actionslot 4" );
}

spawnintermission( var_0 )
{
    self endon( "disconnect" );
    setglobalintermissionspawninfo();
    var_1 = self.forcespawnangles;
    self predictstreampos( self.forcespawnorigin, 1 );
    wait 2;

    while ( !self ispredictedstreamposready() )
        wait 0.5;

    spawnplayer();
    self setclientdvar( "LQKPQMPRQN", 1 );
    self setdepthoffield( 0, 128, 512, 4000, 6, 1.8 );

    if ( self isconsoleplayer() )
        self setclientdvar( "QTSPTNLOL", "90" );

    scripts\cp\utility::updatesessionstate( "intermission" );
}

_id_122CF( var_0 )
{
    self visionsetnakedforplayer( "flir_0_black_to_white", 0 );
    self setclientdvar( "LQKPQMPRQN", 1 );
    scripts\cp\utility::updatesessionstate( "intermission" );
}

setglobalintermissionspawninfo()
{
    var_0 = getglobalintermissionpoint();
    setforcespawninfo( var_0.origin, var_0.angles );
}

setforcespawninfo( var_0, var_1 )
{
    self.forcespawnorigin = var_0;
    self.forcespawnangles = var_1;
}

getglobalintermissionpoint()
{
    var_0 = getentarray( "mp_global_intermission", "classname" );
    return var_0[0];
}

spawnplayer( var_0 )
{
    thread spawnplayer_internal( var_0 );
}

spawnplayer_internal( var_0 )
{
    level endon( "game_ended" );
    self notify( "spawnPlayer_internal" );
    self endon( "spawnPlayer_internal" );
    self endon( "disconnect" );
    self endon( "joined_spectators" );

    if ( self.waitingtospawn )
        return;

    waitforspawn();
    spawnplayer_actual( var_0 );
}

waitforspawn()
{
    self.waitingtospawn = 1;

    if ( scripts\cp\utility::isusingremote() )
        self waittill( "stopped_using_remote" );

    self.waitingtospawn = 0;
}

clearmatchhasmorethan1playervariablesonroundend()
{
    game["numPlayersConsideredPlaying"] = 0;
    game["matchHasMoreThan1Player"] = 0;
}

updatematchhasmorethan1playeromnvaronplayersfirstspawn()
{
    if ( !isdefined( game["numPlayersConsideredPlaying"] ) )
        clearmatchhasmorethan1playervariablesonroundend();

    var_0 = game["matchHasMoreThan1Player"];
    game["numPlayersConsideredPlaying"]++;

    if ( !game["matchHasMoreThan1Player"] )
    {
        if ( game["numPlayersConsideredPlaying"] > 1 )
            game["matchHasMoreThan1Player"] = 1;
    }

    if ( game["matchHasMoreThan1Player"] )
    {
        if ( !var_0 )
        {
            for ( var_1 = 0; var_1 < level.players.size; var_1++ )
                level.players[var_1] setclientomnvar( "match_has_more_than_1_player", 1 );
        }
        else
            self setclientomnvar( "match_has_more_than_1_player", 1 );
    }

    self.set_subway_car_deployed = 1;
}

updatematchhasmorethan1playeromnvaronplayerdisconnect()
{
    if ( istrue( self.set_subway_car_deployed ) )
    {
        var_0 = game["matchHasMoreThan1Player"];
        game["numPlayersConsideredPlaying"]--;

        if ( game["matchHasMoreThan1Player"] )
        {
            if ( game["numPlayersConsideredPlaying"] <= 1 )
                game["matchHasMoreThan1Player"] = 0;
        }

        if ( !game["matchHasMoreThan1Player"] )
        {
            if ( var_0 )
            {
                for ( var_1 = 0; var_1 < level.players.size; var_1++ )
                    level.players[var_1] setclientomnvar( "match_has_more_than_1_player", 0 );
            }
        }

        self.set_subway_car_deployed = 0;
    }
}

spawnplayer_actual( var_0 )
{
    self notify( "spawned" );
    self notify( "started_spawnPlayer" );
    var_1 = getdvar( "restart_checkpoint" );

    if ( var_1 != "" )
    {
        var_2 = scripts\cp\so_utility::distort_fx( var_1, "player_spawn" );
        self.forcespawnorigin = var_2.origin;
        self.do_func = var_2;

        if ( !isdefined( var_2.angles ) )
            var_2.angles = ( 0, 0, 0 );

        self.forcespawnangles = var_2.angles;
        var_2 thread scripts\cp\so_utility::dmzminextractcost( self );
    }

    if ( istrue( var_0 ) )
    {
        if ( level.gameended )
            self spawn( getspawnorigin( self, 1 ), getspawnangles( self ) );
        else
        {
            self playerhide();
            self dontinterpolate();
            self.forcespawnangles = level.br_ac130.angles;
            thread scripts\cp\respawn\cp_respawn::vehicle_isenemytoteam( 0.0, 1.5, 1, "black" );
            self setadditionalstreampos( level.br_ac130.origin );
            self cameraset( "cam_orbit_br_ac130" );
            self spawn( level.br_ac130.origin, level.br_ac130.teleport_text_updated.angle );
            self playerhide();
            var_0 = undefined;
            scripts\cp\respawn\cp_respawn::camera_setup_for_lerping( self, level.br_ac130 );
        }
    }
    else if ( level.gameended )
        self spawn( getspawnorigin( self, 1 ), getspawnangles( self ) );
    else
        self spawn( getspawnorigin( self ), getspawnangles( self ) );

    resetplayerspawneffects();
    resetplayerspawnscriptfields();
    resetplayerdamagemodifiers();
    var_0 = scripts\engine\utility::ter_op( isdefined( var_0 ), var_0, 0 );

    if ( !var_0 )
        nonfauxspawnsetup();

    if ( level.gametype == "cp_survival" && !scripts\cp\utility::precomputedropbagpositions() && !istrue( level.dogtag_revive ) )
    {
        if ( !var_0 && !istrue( self.bspawningviaac130 ) )
            self setclientomnvar( "ui_session_state", "spectator" );
    }

    if ( isai( self ) )
        spawnaihandler( var_0 );

    [[ level.onspawnplayer ]]( var_0 );

    if ( !var_0 )
        scripts\cp\cp_visionsets::create_visionset_stack( self );

    self [[ level.custom_giveloadout ]]( var_0, undefined, self.get_player_who_most_likely_broke_stealth );

    if ( getdvarint( "NOSLRNTRKL" ) )
        scripts\cp\utility::setthirdpersondof( 1 );

    scripts\cp\utility::giveperk( "specialty_pistoldeath" );
    self painvisionon();

    if ( istrue( level.disable_nvg ) )
        self setactionslot( 2, "" );

    self setactionslot( 3, "altmode" );
    self setclientomnvar( "ui_hide_objectives", 0 );
    waittillframeend;

    if ( var_0 )
    {
        self playerhide();
        scripts\cp\utility::allow_player_ignore_me( 1 );
    }

    if ( scripts\cp\utility::preventleave() )
    {
        if ( !istrue( self.set_subway_car_deployed ) )
            updatematchhasmorethan1playeromnvaronplayersfirstspawn();
    }

    self notify( "spawned_player" );
    level notify( "player_spawned", self );
    thread hudbooted();
    thread watch_target_health();
    thread allow_dvar_infammo();

    if ( !scripts\cp\pvpe\pvpe::pvpe_enabled() || !istrue( level.dogtag_revive ) )
    {
        if ( !var_0 )
        {

        }
    }

    thread scripts\cp_mp\vehicles\vehicle_interact::vehicle_interact_monitorplayerusability( self );
    thread _goto_goal_and_snipe::brmini_createc130pathstruct( self );
    thread scripts\cp\perks\cp_perks::markedentities_think();

    if ( scripts\cp\utility::preventleave() )
        self.disable_super = 1;

    self.no_outline = 0;
    self.no_team_outlines = 0;
    scripts\cp\utility::_unsetperk( "specialty_spygame" );
    scripts\cp\utility::_unsetperk( "specialty_coldblooded" );
    scripts\cp\utility::_unsetperk( "specialty_noscopeoutline" );
    scripts\cp\utility::_unsetperk( "specialty_heartbreaker" );

    if ( istrue( self.bspawningviaac130 ) )
        scripts\cp\cp_laststand::give_fists_if_no_real_weapon( self );
    else if ( !scripts\cp\cp_endgame::gamealreadyended() && !istrue( var_0 ) )
    {
        if ( !scripts\cp\utility::preventleave() && !istrue( self.propwhistletime ) )
        {
            thread open_loadout_menu();
            scripts\engine\utility::_id_12E3F( "loadout_given", "start_hotjoining_via_c130" );

            if ( !istrue( self.set_subway_car_deployed ) )
                updatematchhasmorethan1playeromnvaronplayersfirstspawn();

            if ( isdefined( level.vehomn_updateomnvarsperframe ) )
                self thread [[ level.vehomn_updateomnvarsperframe ]]();

            if ( level.gametype == "cp_survival" )
                self setclientomnvar( "ui_session_state", "playing" );
        }
    }
}

respawn_on()
{
    if ( !isdefined( self.respawn_active ) )
    {
        self.respawn_active = 1;
        self setclientomnvar( "cp_team_respawn_display", 1 );
        thread scripts\cp\respawn\cp_respawn::disable_spawner();
    }
}

override_nvg_with_extraction_on_dpad()
{
    self.extraction_active = 1;
    thread scripts\cp\extraction\cp_extraction::extraction_function_toggle();
}

hudbooted()
{
    self endon( "disconnect" );
    resetplayerspawnomnvar();
}

open_loadout_menu()
{
    if ( !scripts\cp\utility::preventleave() )
    {
        self waittill( "open_loadout_menu" );
        self setclientomnvar( "ui_options_menu", 2 );
    }
}

resetplayerspawnomnvar()
{
    self setclientomnvar( "ui_hud_shake", 0 );
    self setclientomnvar( "ui_refresh_hud", 1 );
    self setclientomnvar( "zm_ui_player_in_laststand", 0 );
    self setclientomnvar( "cp_super_fired", 0 );
    var_0 = self getentitynumber();
    setomnvar( "cp_team_oriented_super_ended", var_0 );

    if ( scripts\cp\utility::preventleave() )
        self setclientomnvar( "ui_hide_minimap", 0 );
    else
        self setclientomnvar( "ui_hide_minimap", 1 );

    scripts\cp\utility::init_vehicle_omnvars();
}

resetplayerspawneffects()
{
    self stopshellshock();
    self stoprumble( "damage_heavy" );
    self setdepthoffield( 0, 0, 512, 512, 4, 0 );

    if ( self isconsoleplayer() )
        self setclientdvar( "QTSPTNLOL", "65" );
}

resetplayerdamagemodifiers()
{
    if ( isdefined( self.additivedamagemodifiers ) )
    {
        var_0 = getarraykeys( self.additivedamagemodifiers );

        foreach ( var_2 in var_0 )
            scripts\cp\utility::removedamagemodifier( var_2, 1 );
    }

    if ( isdefined( self.multiplicativedamagemodifiers ) )
    {
        var_0 = getarraykeys( self.multiplicativedamagemodifiers );

        foreach ( var_2 in var_0 )
            scripts\cp\utility::removedamagemodifier( var_2, 0 );
    }
}

resetplayerspawnscriptfields()
{
    var_0 = getspawnteamassignment();
    self.team = var_0;
    self.sessionteam = getspawnsessionteamassignment( var_0 );
    self.pers["team"] = var_0;
    self.fauxdead = undefined;
    self.movespeedscaler = 1;
    scripts\common\input_allow::clear_allow_info( "weapon" );
    scripts\common\input_allow::clear_allow_info( "offhandWeaps" );
    self.hasriotshieldequipped = 0;
    self.hasriotshield = 0;
}

getspawnsessionteamassignment( var_0 )
{
    if ( isdefined( level.playerspawnsessionteamassignmentfunc ) )
        return [[ level.playerspawnsessionteamassignmentfunc ]]( self, var_0 );

    return var_0;
}

getspawnteamassignment()
{
    if ( isdefined( level.playerspawnteamassignmentfunc ) )
        return [[ level.playerspawnteamassignmentfunc ]]( self );

    return "allies";
}

nonfauxspawnsetup()
{
    resetnonfauxspawnscriptfields();
    scripts\cp\utility::updatesessionstate( "playing" );
}

resetnonfauxspawnscriptfields()
{
    self.maxhealth = self [[ level.playermaxhealth ]]();
    self.health = self.maxhealth;
    self.avoidkillstreakonspawntimer = 5.0;
    self.friendlydamage = undefined;
    self.hasspawned = 1;
    self.spawntime = gettime();
    self.objectivescaler = 1;
}

spawnaihandler( var_0 )
{
    if ( !var_0 )
    {
        if ( isdefined( level.bot_funcs ) && isdefined( level.bot_funcs["player_spawned"] ) )
            self [[ level.bot_funcs["player_spawned"] ]]();
    }
}

getspawnorigin( var_0, var_1 )
{
    var_2 = undefined;
    var_3 = istrue( level.skip_nav_check_on_spectate_respawn );

    if ( isdefined( var_0.forcespawnorigin ) )
    {
        var_2 = var_0.forcespawnorigin;

        if ( !var_3 )
            var_2 = getclosestpointonnavmesh( var_2 );

        if ( isdefined( var_1 ) )
            var_2 = var_0.forcespawnorigin;

        var_0.forcespawnorigin = undefined;
    }
    else
    {
        var_4 = var_0 [[ level.getspawnpoint ]]();
        var_2 = scripts\engine\utility::ter_op( istrue( level.disable_start_spawn_on_navmesh ), scripts\engine\utility::drop_to_ground( var_4.origin, 32, -100 ), getclosestpointonnavmesh( var_4.origin ) );

        if ( isdefined( var_1 ) )
            var_2 = var_4;
    }

    return var_2;
}

getspawnangles( var_0 )
{
    var_1 = undefined;

    if ( isdefined( var_0.forcespawnangles ) )
    {
        var_1 = var_0.forcespawnangles;
        var_0.forcespawnangles = undefined;
    }
    else
    {
        var_2 = var_0 [[ level.getspawnpoint ]]();
        var_1 = scripts\engine\utility::ter_op( isdefined( var_2.angles ), var_2.angles, ( 0, 0, 0 ) );
    }

    return var_1;
}

shouldfreezeplayercontrolatspawn()
{
    if ( game["state"] == "postgame" )
        return 1;

    return 0;
}

enterspectator()
{
    var_0 = getglobalintermissionpoint();
    self setspectatedefaults( var_0.origin, var_0.angles );
    setforcespawninfo( var_0.origin, var_0.angles );
    setspectaterules();
    scripts\cp\utility::updatesessionstate( "spectator" );
}

setspectaterules()
{
    if ( isdefined( level.spectaterulesfunc ) )
        [[ level.spectaterulesfunc ]]( self );
    else
        defaultspectaterules( self );
}

defaultspectaterules( var_0 )
{
    var_0 allowspectateteam( "allies", 1 );
    var_0 allowspectateteam( "axis", 1 );
    var_0 allowspectateteam( "freelook", 0 );
    var_0 allowspectateteam( "none", 1 );
}

defaultplayerdisconnect( var_0 )
{
    if ( !isdefined( self.connected ) )
        return;

    scripts\cp\cp_analytics::on_player_disconnect( var_0 );
    removeplayerfromlevelarrays( self );

    if ( disconnectshouldforceend() )
    {
        _id_11A5E();

        if ( level.players.size == 0 )
            level thread scripts\cp\cp_endgame::endgame( "axis", scripts\cp\cp_endgame::get_end_game_string_index( "host_end" ) );
        else
            level thread scripts\cp\cp_endgame::endgame( "axis", scripts\cp\cp_endgame::get_end_game_string_index( "kia" ) );
    }

    if ( isdefined( level.onplayerdisconnect ) )
        level thread [[ level.onplayerdisconnect ]]( self, var_0 );

    updatematchhasmorethan1playeromnvaronplayerdisconnect();
    level notify( "player_disconnect" );
}

disconnectshouldforceend()
{
    if ( level.splitscreen )
        return level.players.size <= 1;

    if ( level.players.size < 1 )
        return 1;

    var_0 = 0;

    foreach ( var_2 in level.players )
    {
        if ( scripts\cp\cp_laststand::player_in_laststand( var_2 ) )
            var_0 = scripts\cp\cp_laststand::gameshouldend( var_2 );
    }

    return var_0;
}

addplayertolevelarrays( var_0 )
{
    level.players[level.players.size] = var_0;
    level.participants[level.participants.size] = var_0;
    level.characters[level.characters.size] = var_0;
}

removeplayerfromlevelarrays( var_0 )
{
    level.players = scripts\engine\utility::array_remove( level.players, var_0 );
    level.participants = scripts\engine\utility::array_remove( level.participants, var_0 );
    level.characters = scripts\engine\utility::array_remove( level.characters, var_0 );
}

defaultplayermigrated()
{
    if ( self ishost() )
        initclientdvarssplitscreenspecific();

    if ( ishumanplayer( self ) )
    {
        var_0 = 0;

        foreach ( var_2 in level.players )
        {
            if ( ishumanplayer( var_2 ) )
                var_0++;
        }

        level.hostmigrationreturnedplayercount++;

        if ( level.hostmigrationreturnedplayercount >= var_0 * 2 / 3 )
            level notify( "hostmigration_enoughplayers" );
    }
}

ishumanplayer( var_0 )
{
    return !isbot( var_0 ) && !initmaxspeedforpathlengthtable( var_0 );
}

defaulthostmigration()
{
    if ( level.gameended )
        return;

    level.hostmigrationreturnedplayercount = 0;

    foreach ( var_1 in level.characters )
        var_1.hostmigrationcontrolsfrozen = 0;

    level.hostmigrationtimer = 1;
    setdvar( "ui_inhostmigration", 1 );
    level notify( "host_migration_begin" );

    foreach ( var_1 in level.characters )
    {
        if ( isdefined( var_1 ) )
            var_1 thread scripts\cp\cp_hostmigration::hostmigrationtimerthink();

        if ( isplayer( var_1 ) )
            var_1 setclientomnvar( "ui_session_state", var_1.sessionstate );
    }

    setdvar( "ui_game_state", game["state"] );
    level endon( "host_migration_begin" );
    scripts\cp\cp_hostmigration::hostmigrationwait();
    level.hostmigrationtimer = undefined;
    setdvar( "ui_inhostmigration", 0 );

    if ( isdefined( level.hostmigrationend ) )
        level thread [[ level.hostmigrationend ]]();

    level notify( "host_migration_end" );
}

initdestructables()
{
    var_0 = getentarray( "destructable", "targetname" );

    if ( getdvar( "scr_destructables" ) == "0" )
    {
        for ( var_1 = 0; var_1 < var_0.size; var_1++ )
            var_0[var_1] delete();
    }
    else
    {
        for ( var_1 = 0; var_1 < var_0.size; var_1++ )
            var_0[var_1] thread destructable_think();
    }
}

destructable_think()
{
    var_0 = 40;
    var_1 = 0;

    if ( isdefined( self.script_accumulate ) )
        var_0 = self.script_accumulate;

    if ( isdefined( self.script_threshold ) )
        var_1 = self.script_threshold;

    if ( isdefined( self.script_fxid ) )
        self.fx = loadfx( self.script_fxid );

    var_2 = 0;
    self setcandamage( 1 );

    for (;;)
    {
        self waittill( "damage", var_3, var_4 );

        if ( var_3 >= var_1 )
        {
            var_2 = var_2 + var_3;

            if ( var_2 >= var_0 )
            {
                thread destructable_destruct();
                return;
            }
        }
    }
}

destructable_destruct()
{
    var_0 = self;

    if ( isdefined( var_0.fx ) )
        playfx( var_0.fx, var_0.origin + ( 0, 0, 6 ) );

    var_0 delete();
}

inithud()
{
    level.uiparent = spawnstruct();
    level.uiparent.horzalign = "left";
    level.uiparent.vertalign = "top";
    level.uiparent.alignx = "left";
    level.uiparent.aligny = "top";
    level.uiparent.x = 0;
    level.uiparent.y = 0;
    level.uiparent.width = 0;
    level.uiparent.height = 0;
    level.uiparent.children = [];
    level.fontheight = 12;
    level.hud["allies"] = spawnstruct();
    level.hud["axis"] = spawnstruct();
    level.primaryprogressbary = -61;
    level.primaryprogressbarx = 0;
    level.primaryprogressbarheight = 9;
    level.primaryprogressbarwidth = 120;
    level.primaryprogressbartexty = -75;
    level.primaryprogressbartextx = 0;
    level.primaryprogressbarfontsize = 1.2;
    level.teamprogressbary = 32;
    level.teamprogressbarheight = 14;
    level.teamprogressbarwidth = 192;
    level.teamprogressbartexty = 8;
    level.teamprogressbarfontsize = 1.65;
    level.lowertextyalign = "BOTTOM";
    level.lowertexty = -140;
    level.lowertextfontsize = 1.2;
}

exploder_load( var_0 )
{
    level endon( "killexplodertridgers" + var_0.script_exploder );
    var_0 waittill( "trigger" );

    if ( isdefined( var_0.script_chance ) && randomfloat( 1 ) > var_0.script_chance )
    {
        if ( isdefined( var_0.script_delay ) )
            wait( var_0.script_delay );
        else
            wait 4;

        level thread exploder_load( var_0 );
        return;
    }

    scripts\engine\utility::exploder( var_0.script_exploder );
    level notify( "killexplodertridgers" + var_0.script_exploder );
}

player_init_health_regen()
{
    self.regenduration = 1;
}

player_init_invulnerability()
{
    self.haveinvulnerabilityavailable = 1;
}

player_init_damageshield()
{
    self.damageshieldexpiretime = gettime();
}

blank( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{

}

initplayersessionstats()
{
    self setplayerdata( "cp", "alienSession", "team_shots", 0 );
    self setplayerdata( "cp", "alienSession", "team_kills", 0 );
    self setplayerdata( "cp", "alienSession", "team_hives", 0 );
    self setplayerdata( "cp", "alienSession", "downed", 0 );
    self setplayerdata( "cp", "alienSession", "hivesDestroyed", 0 );
    self setplayerdata( "cp", "alienSession", "prestigenerfs", 0 );
    self setplayerdata( "cp", "alienSession", "repairs", 0 );
    self setplayerdata( "cp", "alienSession", "drillPlants", 0 );
    self setplayerdata( "cp", "alienSession", "deployables", 0 );
    self setplayerdata( "cp", "alienSession", "challengesCompleted", 0 );
    self setplayerdata( "cp", "alienSession", "challengesAttempted", 0 );
    self setplayerdata( "cp", "alienSession", "trapKills", 0 );
    self setplayerdata( "cp", "alienSession", "currencyTotal", 0 );
    self setplayerdata( "cp", "alienSession", "currencySpent", 0 );
    self setplayerdata( "cp", "alienSession", "currency", 0 );
    self setplayerdata( "cp", "alienSession", "kills", 0 );
    self setplayerdata( "cp", "alienSession", "revives", 0 );
    self setplayerdata( "cp", "alienSession", "time", 0 );
    self setplayerdata( "cp", "alienSession", "score", 0 );
    self setplayerdata( "cp", "alienSession", "shots", 0 );
    self setplayerdata( "cp", "alienSession", "last_stand_count", 0 );
    self setplayerdata( "cp", "alienSession", "deaths", 0 );
    self setplayerdata( "cp", "alienSession", "headShots", 0 );
    self setplayerdata( "cp", "alienSession", "hits", 0 );
    self setplayerdata( "cp", "alienSession", "resources", 0 );
    self setplayerdata( "cp", "alienSession", "waveNum", 0 );
}

initlaststand()
{
    if ( isdefined( level.player_init_laststand_func ) )
        [[ level.player_init_laststand_func ]]();
    else
        scripts\cp\cp_laststand::default_player_init_laststand();
}

initkilltriggerspawn()
{
    level.killtriggerspawnlocs = scripts\engine\utility::getstructarray( "respawn_edge", "targetname" );
}

getkilltriggerspawnloc()
{
    return scripts\engine\utility::getclosest( self.origin, level.killtriggerspawnlocs );
}

startagentstealth()
{
    if ( scripts\engine\utility::flag_exist( "interactions_initialized" ) )
        scripts\engine\utility::flag_wait( "interactions_initialized" );
    else
        wait 0.2;
}

luinotifywatcherforcpsystems()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self notify( "stop_watch_for_LUINotifies" );
    self endon( "stop_watch_for_LUINotifies" );
    var_0 = 0;

    for (;;)
    {
        self waittill( "luinotifyserver", var_1, var_2 );

        if ( isdefined( var_1 ) )
        {
            switch ( var_1 )
            {
                case "disable_player_view":
                    break;
                case "enable_player_view":
                    break;
                case "skill_updated":
                    scripts\cp\classes\cp_class_progression::giveskillpointsthruluinotify( var_2 );
                    break;
                case "dpad_slot_up":
                    break;
                case "dpad_slot_right":
                    scripts\cp\crafting_system::givecrafteditemthruluinotify( var_2 );
                    break;
            }
        }
    }
}

playgestureforcraftingandskillpointstablet( var_0 )
{
    self endon( "disconnect" );

    if ( !isdefined( var_0 ) )
        return;

    switch ( var_0 )
    {
        case 1:
            self forceplaygestureviewmodel( "ges_hack_loop_end" );
            break;
        case 0:
            self forceplaygestureviewmodel( "ges_hack_loop" );
            break;
    }

    scripts\common\utility::allow_fire( var_0 );
    scripts\common\utility::allow_melee( var_0 );
    scripts\common\utility::allow_weapon_switch( var_0 );
    scripts\common\utility::allow_usability( var_0 );
    scripts\common\utility::allow_ads( var_0 );
}

truckcollision( var_0 )
{
    var_0 endon( "disconnect" );
    level endon( "game_ended" );
    wait 1;
    var_1 = 0;
    var_2 = 120;

    if ( scripts\cp\utility::preventleave() )
        colmaps( var_0 );

    broadcast_status( var_0, 0 );
    broadcast_role( var_0 );
    var_3 = scripts\cp\utility::preventleave();
    var_4 = scripts\cp\utility::plundervar();

    for (;;)
    {
        waitframe();
        var_1 = var_1 + 1;

        if ( var_1 == var_2 )
        {
            var_1 = 0;
            broadcast_role( var_0 );

            if ( var_3 )
            {
                waitframe();
                colmaps( var_0 );
                continue;
            }

            if ( var_4 )
            {
                waitframe();
                collorigin2( var_0 );
            }
        }
    }
}

colmaps( var_0 )
{
    var_1 = var_0 getentitynumber();
    var_2 = var_0 getplayerdata( "cp", "alienSession", "currency" );
    scripts\cp\cp_persistence::setcoopplayerdata_for_everyone( "EoGPlayer", var_1, "currency", var_2 );
}

broadcast_role( var_0 )
{
    var_1 = var_0 getentitynumber();
    var_2 = var_0 getplayerdata( level.loadoutsgroup, "squadMembers", "cpFieldUpgrade" );
    scripts\cp\cp_persistence::setcoopplayerdata_for_everyone( "EoGPlayer", var_1, "playerRole", var_2 );
}

collorigin2( var_0 )
{
    var_1 = var_0 getentitynumber();

    if ( !isdefined( var_0.determinewinnertype ) )
        var_0.determinewinnertype = 0;

    if ( !isdefined( var_0.determinetrackingcircleoffset ) )
        var_0.determinetrackingcircleoffset = 0;

    scripts\cp\cp_persistence::setcoopplayerdata_for_everyone( "EoGPlayer", var_1, "carryItem2", var_0.determinetrackingcircleoffset );
    scripts\cp\cp_persistence::setcoopplayerdata_for_everyone( "EoGPlayer", var_1, "carryItem", var_0.determinewinnertype );
}

broadcast_status( var_0, var_1 )
{
    var_2 = var_0 getentitynumber();
    scripts\cp\cp_persistence::setcoopplayerdata_for_everyone( "EoGPlayer", var_2, "playerStatus", var_1 );
}

watch_target_health()
{
    self endon( "death" );
    self endon( "disconnect" );
    self.targethealthinfo = [];

    for (;;)
    {
        var_0 = getdvarint( "scr_enemy_healthbars", 0 );

        if ( var_0 == 1 )
        {
            if ( self adsbuttonpressed() )
            {
                var_1 = self geteye();
                var_2 = self getplayerangles();
                var_3 = anglestoforward( var_2 );
                var_4 = var_1 + var_3 * 10000;
                var_5 = scripts\engine\trace::_bullet_trace( var_1, var_4, 1, self, 0, 0, 0, 0, 0 );
                var_6 = var_5["entity"];

                if ( isdefined( var_6 ) && issentient( var_6 ) && !isplayer( var_6 ) )
                {
                    if ( isdefined( var_6.team ) && var_6.team == self.team )
                    {
                        wait 0.1;
                        continue;
                    }

                    update_target_health_variable( "ui_target_health", var_6.health );
                    update_target_health_variable( "ui_target_max_health", var_6.maxhealth );
                    update_target_health_variable( "ui_target_entity_num", var_6 getentitynumber() );
                }
                else
                    update_target_health_variable( "ui_target_entity_num", -1 );
            }
            else
                update_target_health_variable( "ui_target_entity_num", -1 );
        }

        wait 0.1;
    }
}

update_target_health_variable( var_0, var_1 )
{
    wait 0.05;

    if ( !isdefined( var_1 ) )
        return;

    if ( !isdefined( self.targethealthinfo[var_0] ) || var_1 != self.targethealthinfo[var_0] )
    {
        self setclientomnvar( var_0, var_1 );
        self.targethealthinfo[var_0] = var_1;
    }
}

allow_dvar_infammo()
{
    wait 5;

    if ( getdvarint( "scr_player_infammo", 0 ) == 0 )
        return;

    var_0 = 0;

    while ( var_0 < 30 )
    {
        var_0++;

        if ( !isdefined( level.infil_in_progress_buffer ) )
            break;

        wait 2;
    }

    scripts\cp\coop_super::team_unlimited_ammo();
}

monitor_num_players()
{
    scripts\engine\utility::flag_init( "player_count_determined" );
    var_0 = getdvar( "NKSQNMMRRQ" );

    if ( var_0 != "1" )
    {
        level.only_one_player = 0;
        scripts\engine\utility::flag_set( "player_count_determined" );
        return;
    }

    level.only_one_player = 1;
    scripts\engine\utility::flag_set( "player_count_determined" );

    while ( !isdefined( level.players ) )
        wait 0.1;

    for (;;)
    {
        if ( level.players.size > 1 )
            break;

        wait 1;
    }

    level.only_one_player = 0;
    level notify( "multiple_players" );
}

shellshock_init()
{
    scripts\cp_mp\utility\script_utility::registersharedfunc( "shellshock", "gasInterruptDelayFunc", ::gas_getblurinterruptdelayms );
}

gas_getblurinterruptdelayms( var_0 )
{
    return 200.0;
}

delete_on_load()
{
    scripts\engine\utility::array_delete( getentarray( "delete_on_load", "targetname" ) );
    scripts\engine\utility::delaythread( 0.05, scripts\engine\utility::array_delete, getentarray( "delete_on_firstframeend", "targetname" ) );
}

_id_11A5E()
{
    setdvar( "restart_checkpoint", "" );
    setdvar( "cp_landlord_start_obj", "" );
    setdvar( "cp_arms_dealer_start_obj", "" );
    setdvar( "cp_smuggler_start_obj", "" );
    setdvar( "cp_dwn_twn_2_start_obj", "" );
    setdvar( "intro_vo", "" );
}

animscripted_loop_earlyend()
{
    setdvar( "heartbeatSensorEnemyDistanceWarningThreshold", 1500 );
    setdvar( "heartbeatSensorMaxDrawRange", 1800 );
    setdvar( "NLLRSSOQMQ", 1800 );
    setdvar( "NSKNMSMOLP", 1000 );
    setdvar( "NOQKLLMRO", 1800 );
    setdvar( "heartbeatSensorTabletSweepRadius", 500 );
    setdvar( "heartbeatSensorTabletIconSize", 60 );
    setdvar( "hearbeatSensorUseCurrentOrientation", 0 );
}
