// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    if ( getdvarint( "TLRPKRKMS" ) != 0 && !isdefined( game["gamestarted"] ) )
    {
        setmatchdata( "commonMatchData", "map", level.script );

        if ( level.hardcoremode )
        {
            var_0 = scripts\cp\utility::getgametype() + " hc";
            setmatchdata( "commonMatchData", "gametype", var_0 );
        }
        else
            setmatchdata( "commonMatchData", "gametype", scripts\cp\utility::getgametype() );

        setmatchdata( "commonMatchData", "build_version", getbuildversion() );
        setmatchdata( "commonMatchData", "build_number", getbuildnumber() );
        setmatchdata( "commonMatchData", "is_private_match", scripts\cp\utility::privatematch() );
    }

    if ( getdvarint( "TLRPKRKMS" ) != 0 )
        level.maxlogclients = 30;
    else
        level.maxlogclients = 0;

    level.maxlives = 475;
    level.maxnamelength = 26;
    level.maxgameevents = 250;
    level.maxkillstreaks = 64;
    level.maxkillstreaksavailable = 64;
    level.maxnumchallengesperplayer = 10;
    level.maxnumawardsperplayer = 10;
    level.maxsupersavailable = 50;
    level.maxsupersactivated = 50;
    level.maxsupersexpired = 50;
    level.matchdataattachmentstatsenabled = 0;
    level thread endofgamesummarylogger();
}

onmatchstart()
{
    setmatchdata( "commonMatchData", "utc_start_time_s", getsystemtime() );
    setmatchdata( "commonMatchData", "player_count_start", level.players.size );
    var_0 = scripts\cp\utility::getgametype();

    if ( level.hardcoremode )
        var_0 = var_0 + " hc";

    var_1 = _func_429();
    getentitylessscriptablearray( "dlog_event_server_match_start", [ "map", level.script, "game_type", var_0, "is_playtest", getdvarint( "dlog_is_playtest" ), "MQQPLSSSLQ", getdvar( "MQQPLSSSLQ" ), "NOQRRQMOON", var_1 ] );
    onmatchend();
}

onroundend()
{
    level.endtimeutcseconds = getsystemtime();
    setmatchdata( "commonMatchData", "utc_end_time_s", level.endtimeutcseconds );
    setmatchdata( "commonMatchData", "player_count_end", level.players.size );
    setmatchdata( "globalPlayerXpModifier", int( scripts\mp\calloutmarkerping_mp::getglobalrankxpmultiplier() ) );
    setmatchdata( "globalWeaponXpModifier", int( scripts\cp\cp_weaponrank::getglobalweaponrankxpmultiplier() ) );
}

getmatchstarttimeutc()
{
    if ( getdvarint( "TLRPKRKMS" ) == 0 )
        return level.starttimeutcseconds;

    return getmatchdata( "commonMatchData", "utc_start_time_s" );
}

getmatchendtimeutc()
{
    if ( getdvarint( "TLRPKRKMS" ) == 0 )
        return level.endtimeutcseconds;

    return getmatchdata( "commonMatchData", "utc_end_time_s" );
}

gettimefrommatchstart( var_0 )
{
    var_1 = var_0;

    if ( isdefined( level.starttimefrommatchstart ) )
    {
        var_1 = var_1 - level.starttimefrommatchstart;

        if ( var_1 < 0 )
            var_1 = 0;
    }
    else
        var_1 = 0;

    return var_1;
}

logkillstreakevent( var_0, var_1 )
{

}

loggameevent( var_0, var_1 )
{
    var_2 = undefined;
    var_3 = -1;

    if ( isvalidclient( self ) && scripts\cp\utility\entity::isgameparticipant( self ) )
    {
        var_2 = self;

        if ( isdefined( self.matchdatalifeindex ) )
            var_3 = self.matchdatalifeindex;
    }

    var_4 = getmatchdata( "gameEventCount" );
    var_5 = var_4 + 1;
    setmatchdata( "gameEventCount", var_5 );
    var_6 = gettimefrommatchstart( gettime() );
    getentitylessscriptablearray( "dlog_event_game_event", [ "event_player", var_2, "event_name", var_0, "time_from_match_start_ms", var_6, "player_life_index", var_3, "pos_x", var_1[0], "pos_y", var_1[1], "pos_z", var_1[2] ] );
}

logattackerkillevent( var_0, var_1 )
{

}

logvictimkillevent( var_0, var_1 )
{

}

logmultikill( var_0, var_1 )
{

}

logplayerlife()
{
    if ( !isvalidclient( self ) )
        return -1;

    var_0 = 0;
    var_1 = ( 0, 0, 0 );
    var_2 = 0;

    if ( isdefined( self.spawntime ) )
        var_0 = self.spawntime;

    if ( isdefined( self.spawnpos ) )
        var_1 = self.spawnpos;

    if ( isdefined( self.wasti ) )
        var_2 = self.wasti;

    var_3 = gettimefrommatchstart( var_0 );
    var_4 = game["life_count"];
    game["life_count"]++;
    self dlog_recordplayerevent( "dlog_event_life_spawn", [ "spawn_time_from_match_start_ms", var_3, "life_index", var_4, "spawn_pos_x", var_1[0], "spawn_pos_y", var_1[1], "spawn_pos_z", var_1[2], "team", self.team, "is_host", self ishost(), "was_tactical_insertion", var_2 ] );
    thread monitorweaponfire();
    return var_4;
}

monitorweaponfire()
{
    self endon( "death_or_disconnect" );

    for (;;)
    {
        self waittill( "begin_firing" );
        thread smoke_enemy_think();
        var_0 = self.lastdroppableweaponobj;
        var_0 = scripts\cp\cp_weapon::mapweapon( var_0 );
        var_1 = createheadicon( var_0 );
        thread threadedsetweaponstatbyname( var_1, 1, "trigger_pulls" );
    }
}

threadedsetweaponstatbyname( var_0, var_1, var_2 )
{
    self endon( "disconnect" );
    waittillframeend;
    setweaponstat( var_0, var_1, var_2 );
}

setweaponstat( var_0, var_1, var_2 )
{
    if ( !var_1 )
        return;

    var_3 = undefined;

    if ( issameweapon( var_0 ) )
        var_3 = var_0;
    else
        var_3 = asmdevgetallstates( var_0 );

    if ( scripts\cp\cp_weapon::ispickedupweapon( var_3 ) )
        return;

    var_4 = var_3.basename;
    var_5 = scripts\cp\cp_weapon::getweapongroup( var_3 );
    var_6 = getweaponvariantindex( var_3 );

    if ( var_5 == "killstreak" || var_5 == "other" && var_4 != "trophy_mp" || var_5 == "other" && var_4 != "player_trophy_system_mp" || var_5 == "other" && var_4 != "super_trophy_mp" )
        return;

    if ( scripts\cp\utility::isenvironmentweapon( var_3 ) )
        return;

    if ( var_5 == "weapon_grenade" || var_5 == "weapon_explosive" || var_4 == "trophy_mp" || var_4 == "forcepush_mp" )
    {
        var_4 = scripts\cp\utility::strip_suffix( var_4, "_mp" );
        return;
    }

    if ( !isdefined( self.trackingweapon ) )
        self.trackingweapon = var_3;

    if ( var_3 != self.trackingweapon )
        self.trackingweapon = var_3;

    switch ( var_2 )
    {
        case "shots":
            self.trackingweaponshots++;
            break;
        case "hits":
            self.trackingweaponhits++;
            break;
        case "headShots":
            self.trackingweaponheadshots++;
            break;
        case "kills":
            self.trackingweaponkills++;
            break;
    }

    if ( var_2 == "deaths" )
    {
        var_7 = undefined;
        var_8 = scripts\cp\utility::getweaponrootname( var_3 );

        if ( !scripts\cp\cp_weapon::iscacprimaryweapon( var_8 ) && !scripts\cp\cp_weapon::iscacsecondaryweapon( var_8 ) )
            return;

        var_9 = scripts\cp\utility::getweaponattachmentsbasenames( var_3 );

        foreach ( var_11 in var_9 )
        {

        }
    }
}

smoke_enemy_think()
{
    self endon( "disconnect" );
    self.revivent_watchfordeath_safety = gettime();
    self notify( "monitorWeaponFireTime" );
    self endon( "monitorWeaponFireTime" );
    scripts\engine\utility::waittill_either( "end_firing", "death" );
    self.revive_wounded_out_handlerr = gettime();
}

spawn_and_enter_cargo_truck_mg()
{
    var_0 = self playermounttype();

    if ( isdefined( var_0 ) )
    {
        switch ( var_0 )
        {
            case "mount_left":
                return "MOUNT_LEFT";
            case "mount_right":
                return "MOUNT_RIGHT";
            case "mount_top":
                return "MOUNT_TOP";
        }
    }

    return "MOUNT_NONE";
}

logplayerdeath( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    if ( !isvalidclient( self ) )
        return;

    if ( var_4 == "agent_mp" )
        var_7 = [];
    else
    {
        var_7 = scripts\cp\utility::getweaponattachmentsbasenames( var_4 );
        var_7 = scripts\cp\cp_weapon::attachmentsfilterforstats( var_7, var_4 );
    }

    var_8 = gettimefrommatchstart( gettime() );
    var_9 = -1;
    var_10 = -1;
    var_11 = [];

    if ( isvalidclient( var_1 ) )
    {
        var_12 = getweaponbasename( var_4 );
        var_13 = var_1;
        var_14 = var_1 scripts\cp\cp_weapon::ispickedupweapon( var_4 );
        var_15 = var_1 isalternatemode( var_4 );

        if ( scripts\cp\cp_weapon::iscacprimaryweapon( var_4 ) || scripts\cp\cp_weapon::iscacsecondaryweapon( var_4 ) )
            var_16 = var_1 playerads();
        else
            var_16 = 0.0;

        var_17 = 0.4226;
        var_18 = scripts\engine\utility::within_fov( self.origin, self.angles, var_1.origin, var_17 );
        var_19 = scripts\engine\utility::within_fov( var_1.origin, var_1.angles, self.origin, var_17 );
        var_20 = var_1 spawn_and_enter_cargo_truck_mg();
        var_21 = var_1.origin;
        var_22 = var_1.angles;

        if ( isdefined( var_1.matchdatalifeindex ) )
            var_9 = var_1.matchdatalifeindex;

        if ( isdefined( var_1.loadoutindex ) )
            var_10 = var_1.loadoutindex;

        var_23 = var_1 getplayerbuffs();

        if ( istrue( var_23[0] ) )
            var_11[var_11.size] = "UAV_ACTIVE";

        if ( istrue( var_23[1] ) )
            var_11[var_11.size] = "DEADSILENCE_ACTIVE";

        if ( istrue( var_23[2] ) )
            var_11[var_11.size] = "HAS_STOPPING_POWER";

        var_24 = var_1 getplayerdebuffs();

        if ( istrue( var_24[0] ) )
            var_11[var_11.size] = "CUAV_ACTIVE";

        if ( istrue( var_24[1] ) )
            var_11[var_11.size] = "IS_MARKED";

        if ( istrue( var_24[2] ) )
            var_11[var_11.size] = "IS_FLASHED";

        if ( istrue( var_24[3] ) )
            var_11[var_11.size] = "IS_STUNNED";

        if ( istrue( var_24[4] ) )
            var_11[var_11.size] = "IN_GAS";

        if ( istrue( var_24[5] ) )
            var_11[var_11.size] = "IN_BURNING";

        if ( istrue( var_24[6] ) )
            var_11[var_11.size] = "IS_SNAPSHOTTED";

        if ( istrue( var_24[7] ) )
            var_11[var_11.size] = "IN_SMOKE";

        if ( istrue( var_24[8] ) )
            var_11[var_11.size] = "IS_EMPED";

        if ( istrue( var_24[9] ) )
            var_11[var_11.size] = "IN_WHITE_PHOSPHOROUS";

        if ( var_1 isnightvisionon() )
            var_11[var_11.size] = "NVG_ENABLED";

        if ( isdefined( var_1.modifiers ) )
        {
            if ( isdefined( var_1.modifiers["headshot"] ) && istrue( var_1.modifiers["headshot"] ) )
                var_11[var_11.size] = "HEADSHOT";

            if ( isdefined( var_1.modifiers["avenger"] ) && istrue( var_1.modifiers["avenger"] ) )
                var_11[var_11.size] = "AVENGER";

            if ( isdefined( var_1.modifiers["defender"] ) && istrue( var_1.modifiers["defender"] ) )
                var_11[var_11.size] = "DEFENDER";

            if ( isdefined( var_1.modifiers["posthumous"] ) && istrue( var_1.modifiers["posthumous"] ) )
                var_11[var_11.size] = "POSTHUMOUS";

            if ( isdefined( var_1.modifiers["revenge"] ) && istrue( var_1.modifiers["revenge"] ) )
                var_11[var_11.size] = "REVENGE";

            if ( isdefined( var_1.modifiers["buzzkill"] ) && istrue( var_1.modifiers["buzzkill"] ) )
                var_11[var_11.size] = "BUZZKILL";

            if ( isdefined( var_1.modifiers["firstblood"] ) && istrue( var_1.modifiers["firstblood"] ) )
                var_11[var_11.size] = "FIRSTBLOOD";

            if ( isdefined( var_1.modifiers["comeback"] ) && istrue( var_1.modifiers["comeback"] ) )
                var_11[var_11.size] = "COMEBACK";

            if ( isdefined( var_1.modifiers["longshot"] ) && istrue( var_1.modifiers["longshot"] ) )
                var_11[var_11.size] = "LONGSHOT";

            if ( isdefined( var_1.modifiers["pointblank"] ) && istrue( var_1.modifiers["pointblank"] ) )
                var_11[var_11.size] = "POINTBLANK";

            if ( isdefined( var_1.modifiers["assistedsuicide"] ) && istrue( var_1.modifiers["assistedsuicide"] ) )
                var_11[var_11.size] = "ASSISTED_SUICIDE";
        }

        if ( scripts\cp\utility::iskillstreakweapon( var_12 ) )
            var_11[var_11.size] = "KILLSTREAK";
    }
    else
    {
        var_13 = undefined;
        var_12 = "";
        var_14 = 0;
        var_15 = 0;
        var_16 = 0.0;
        var_18 = 0;
        var_19 = 0;
        var_20 = "MOUNT_NONE";
        var_21 = [];
        var_21[0] = 0.0;
        var_21[1] = 0.0;
        var_21[2] = 0.0;
        var_22 = [];
        var_22[0] = 0.0;
        var_22[1] = 0.0;
        var_22[2] = 0.0;
    }

    var_25 = [];
    var_26 = getplayerbuffs();

    if ( istrue( var_26[0] ) )
        var_25[var_25.size] = "UAV_ACTIVE";

    if ( istrue( var_26[1] ) )
        var_25[var_25.size] = "DEADSILENCE_ACTIVE";

    if ( istrue( var_26[2] ) )
        var_25[var_25.size] = "HAS_STOPPING_POWER";

    var_27 = getplayerdebuffs();

    if ( istrue( var_27[0] ) )
        var_25[var_25.size] = "CUAV_ACTIVE";

    if ( istrue( var_27[1] ) )
        var_25[var_25.size] = "IS_MARKED";

    if ( istrue( var_27[2] ) )
        var_25[var_25.size] = "IS_FLASHED";

    if ( istrue( var_27[3] ) )
        var_25[var_25.size] = "IS_STUNNED";

    if ( istrue( var_27[4] ) )
        var_25[var_25.size] = "IN_GAS";

    if ( istrue( var_27[5] ) )
        var_25[var_25.size] = "IN_BURNING";

    if ( istrue( var_27[6] ) )
        var_25[var_25.size] = "IS_SNAPSHOTTED";

    if ( istrue( var_27[7] ) )
        var_25[var_25.size] = "IN_SMOKE";

    if ( istrue( var_27[8] ) )
        var_25[var_25.size] = "IS_EMPED";

    if ( istrue( var_27[9] ) )
        var_25[var_25.size] = "IN_WHITE_PHOSPHOROUS";

    if ( self isnightvisionon() )
        var_25[var_25.size] = "NVG_ENABLED";

    if ( isdefined( self.modifiers ) )
    {
        if ( isdefined( self.modifiers["headshot"] ) && istrue( self.modifiers["headshot"] ) )
            var_25[var_25.size] = "HEADSHOT";

        if ( isdefined( self.modifiers["avenger"] ) && istrue( self.modifiers["avenger"] ) )
            var_25[var_25.size] = "AVENGER";

        if ( isdefined( self.modifiers["defender"] ) && istrue( self.modifiers["defender"] ) )
            var_25[var_25.size] = "DEFENDER";

        if ( isdefined( self.modifiers["posthumous"] ) && istrue( self.modifiers["posthumous"] ) )
            var_25[var_25.size] = "POSTHUMOUS";

        if ( isdefined( self.modifiers["revenge"] ) && istrue( self.modifiers["revenge"] ) )
            var_25[var_25.size] = "REVENGE";

        if ( isdefined( self.modifiers["buzzkill"] ) && istrue( self.modifiers["buzzkill"] ) )
            var_25[var_25.size] = "BUZZKILL";

        if ( isdefined( self.modifiers["firstblood"] ) && istrue( self.modifiers["firstblood"] ) )
            var_25[var_25.size] = "FIRSTBLOOD";

        if ( isdefined( self.modifiers["comeback"] ) && istrue( self.modifiers["comeback"] ) )
            var_25[var_25.size] = "COMEBACK";

        if ( isdefined( self.modifiers["longshot"] ) && istrue( self.modifiers["longshot"] ) )
            var_25[var_25.size] = "LONGSHOT";

        if ( isdefined( self.modifiers["pointblank"] ) && istrue( self.modifiers["pointblank"] ) )
            var_25[var_25.size] = "POINTBLANK";

        if ( isdefined( self.modifiers["assistedsuicide"] ) && istrue( self.modifiers["assistedsuicide"] ) )
            var_25[var_25.size] = "ASSISTED_SUICIDE";
    }

    var_28 = undefined;
    var_29 = [];
    var_30 = "";

    if ( isdefined( self.lastweaponused ) )
    {
        var_28 = self.lastweaponused;
        var_29 = scripts\cp\utility::getweaponattachmentsbasenames( var_28 );
        var_29 = scripts\cp\cp_weapon::attachmentsfilterforstats( var_29, var_28 );
        var_30 = getweaponbasename( var_28 );
        var_31 = scripts\cp\cp_weapon::ispickedupweapon( var_28 );
        var_32 = self isalternatemode( var_28 );
        var_33 = self playerads();
    }
    else
    {
        var_31 = 0;
        var_32 = 0;
        var_33 = 0.0;
    }

    if ( scripts\cp\utility::iskillstreakweapon( var_30 ) )
        var_25[var_25.size] = "KILLSTREAK";

    var_34 = spawn_and_enter_cargo_truck_mg();
    var_35 = -1;

    if ( isdefined( self.loadoutindex ) )
        var_35 = self.loadoutindex;

    var_36 = 0;

    if ( isdefined( self.pers["summary"]["xp"] ) )
    {
        var_37 = self.pers["summary"]["xp"];
        var_36 = var_37 - self.pers["xpAtLastDeath"];
        self.pers["xpAtLastDeath"] = var_37;
    }

    var_38 = self.score - self.pers["scoreAtLastDeath"];
    self.pers["scoreAtLastDeath"] = self.score;
    var_39 = -1;
    self dlog_recordplayerevent( "dlog_event_life_death", [ "attacker", var_13, "death_time_from_match_start_ms", var_8, "victim_weapon", var_30, "victim_weapon_attachments", var_29, "attacker_weapon", var_12, "attacker_weapon_attachments", var_7, "victim_death_modifiers", var_25, "attacker_death_modifiers", var_11, "victim_pos_x", self.origin[0], "victim_pos_y", self.origin[1], "victim_pos_z", self.origin[2], "victim_angle_x", self.angles[0], "victim_angle_y", self.angles[1], "victim_angle_z", self.angles[2], "attacker_pos_x", var_21[0], "attacker_pos_y", var_21[1], "attacker_pos_z", var_21[2], "attacker_angle_x", var_22[0], "attacker_angle_y", var_22[1], "attacker_angle_z", var_22[2], "means_of_death", var_3, "attacker_weapon_alt_mode", var_15, "attacker_weapon_picked_up", var_14, "victim_weapon_alt_mode", var_32, "victim_weapon_picked_up", var_31, "attacker_ads_value", var_16, "victim_ads_value", var_33, "attacker_was_in_victim_fov", var_18, "victim_was_in_attacker_fov", var_19, "attacker_mount_type", var_20, "victim_mount_type", var_34, "xp_earned", var_36, "score_earned", var_38, "victim_life_index", var_0, "victim_loadout_index", var_35, "attacker_life_index", var_9, "attacker_loadout_index", var_10, "victim_was_reloading", self isreloading(), "round", var_39 ] );

    if ( isvalidclient( var_1 ) )
    {
        updatetournamentroundtime( self getxuid(), var_1 getxuid(), var_4, var_3 == "MOD_HEAD_SHOT" );

        if ( isdefined( level.matchrecording_logevent ) )
        {
            var_40 = gettime();
            [[ level.matchrecording_logevent ]]( self.clientid, self.team, "DEATH", self.origin[0], self.origin[1], var_40 );

            if ( issubstr( tolower( var_3 ), "bullet" ) && isdefined( var_4 ) && !scripts\cp\utility::iskillstreakweapon( var_4 ) )
                [[ level.matchrecording_logevent ]]( var_1.clientid, var_1.team, "BULLET", var_1.origin[0], var_1.origin[1], var_40, undefined, self.origin[0], self.origin[1] );
        }
    }
}

getplayerbuffs()
{
    var_0 = [];
    var_0[0] = scripts\cp_mp\utility\killstreak_utility::teamhasuav( self.team );
    var_0[1] = scripts\cp\utility::_hasperk( "specialty_quieter" );
    var_0[2] = scripts\cp\utility::_hasperk( "specialty_bulletdamage" );
    return var_0;
}

getplayerdebuffs()
{
    var_0 = [];
    var_0[0] = scripts\cp_mp\utility\killstreak_utility::enemyhascuav( self.team );
    var_0[1] = scripts\cp_mp\killstreaks\helper_drone::istargetmarked();
    var_0[2] = istrue( self.flashbanged );
    var_0[3] = istrue( self.concussiongrenadefx );
    var_0[4] = isdefined( self.gastriggerstouching ) && self.gastriggerstouching.size > 0 || isdefined( self.lastgastouchtime ) && self.lastgastouchtime + 5000 > gettime();
    var_0[5] = isdefined( self.burninginfo ) || isdefined( self.lastburntime ) && self.lastburntime + 5000 > gettime();
    var_0[6] = isdefined( self.lastsnapshotgrenadetime ) && self.lastsnapshotgrenadetime + 5000 > gettime();
    var_0[7] = isdefined( self.lastinsmoketime ) && self.lastinsmoketime + 5000 > gettime();
    var_0[8] = istrue( self.empcount );
    var_0[9] = istrue( self.wphealthblock );
    return var_0;
}

logplayerdata( var_0 )
{
    if ( !isvalidclient( self ) )
        return;

    scripts\cp\cp_analytics::scriptmover_utils( var_0 );
    self sendclientnetworktelemetry();
    var_1 = 0;
    var_2 = 0;

    if ( !isdefined( self.pers["matchdataWeaponStats"] ) )
        return;

    foreach ( var_15, var_4 in self.pers["matchdataWeaponStats"] )
    {
        var_5 = 0;
        var_6 = 0;
        var_7 = 0;
        var_8 = 0;
        var_9 = 0;
        var_10 = 0;
        var_11 = 0;

        if ( scripts\cp\utility::getgametype() != "br" )
        {
            if ( isenumvaluevalid( "common", "LoadoutWeapon", var_4.weapon ) )
                var_5 = self getplayerdata( "rankedloadouts", "squadMembers", "weapon_xp", var_4.weapon );
        }

        foreach ( var_14, var_13 in var_4.stats )
        {
            if ( var_14 == "deaths" )
                var_7 = var_7 + var_13;

            if ( var_14 == "headshots" )
                var_8 = var_8 + var_13;

            if ( var_14 == "hits" )
            {
                var_9 = var_9 + var_13;
                var_2 = var_2 + var_13;
            }

            if ( var_14 == "kills" )
                var_10 = var_10 + var_13;

            if ( var_14 == "shots" )
            {
                var_11 = var_11 + var_13;
                var_1 = var_1 + var_13;
            }

            if ( var_14 == "xp_earned" )
                var_6 = var_6 + var_13;
        }

        if ( scripts\cp\utility::getgametype() != "br" )
            self dlog_recordplayerevent( "dlog_event_player_weapon_stats", [ "weapon", var_4.weapon, "variant_id", var_4.variantid, "loadout_index", var_4.loadoutindex, "starting_weapon_xp", var_5, "xp_earned", var_6, "deaths", var_7, "headshots", var_8, "hits", var_9, "kills", var_10, "shots", var_11 ] );
    }
}

logscoreevent( var_0 )
{
    if ( scripts\cp\utility\entity::isgameparticipant( self ) == 0 )
        return;

    if ( !isvalidclient( self ) )
        return;

    if ( isbot( self ) || initmaxspeedforpathlengthtable( self ) || isai( self ) )
        return;

    var_1 = gettimefrommatchstart( gettime() );
    self dlog_recordplayerevent( "dlog_event_player_score_event", [ "time_ms_from_match_start", var_1, "score_event", var_0 ] );
}

endofgamesummarylogger()
{
    level waittill( "game_ended" );

    foreach ( var_1 in level.players )
    {
        wait 0.05;

        if ( !isdefined( var_1 ) )
            continue;

        var_1 scripts\cp_mp\utility\game_utility::stopkeyearning();

        if ( isdefined( var_1.weaponsused ) )
        {
            var_1 doublebubblesort();
            var_2 = 0;

            if ( var_1.weaponsused.size > 3 )
            {
                for ( var_3 = var_1.weaponsused.size - 1; var_3 > var_1.weaponsused.size - 3; var_3-- )
                {
                    var_1 setplayerdata( "common", "round", "weaponsUsed", var_2, var_1.weaponsused[var_3] );
                    var_1 setplayerdata( "common", "round", "weaponXpEarned", var_2, var_1.weaponxpearned[var_3] );
                    var_2++;
                }
            }
            else
            {
                for ( var_3 = var_1.weaponsused.size - 1; var_3 >= 0; var_3-- )
                {
                    var_1 setplayerdata( "common", "round", "weaponsUsed", var_2, var_1.weaponsused[var_3] );
                    var_1 setplayerdata( "common", "round", "weaponXpEarned", var_2, var_1.weaponxpearned[var_3] );
                    var_2++;
                }
            }
        }
        else
        {
            var_1 setplayerdata( "common", "round", "weaponsUsed", 0, "none" );
            var_1 setplayerdata( "common", "round", "weaponsUsed", 1, "none" );
            var_1 setplayerdata( "common", "round", "weaponsUsed", 2, "none" );
            var_1 setplayerdata( "common", "round", "weaponXpEarned", 0, 0 );
            var_1 setplayerdata( "common", "round", "weaponXpEarned", 1, 0 );
            var_1 setplayerdata( "common", "round", "weaponXpEarned", 2, 0 );
        }

        if ( isdefined( var_1.challengescompleted ) )
            var_1 setplayerdata( "common", "round", "challengeNumCompleted", var_1.challengescompleted.size );
        else
            var_1 setplayerdata( "common", "round", "challengeNumCompleted", 0 );

        for ( var_3 = 0; var_3 < 20; var_3++ )
        {
            if ( isdefined( var_1.challengescompleted ) && isdefined( var_1.challengescompleted[var_3] ) && var_1.challengescompleted[var_3] != "ch_prestige" && !issubstr( var_1.challengescompleted[var_3], "_daily" ) && !issubstr( var_1.challengescompleted[var_3], "_weekly" ) )
            {
                var_1 setplayerdata( "common", "round", "challengesCompleted", var_3, var_1.challengescompleted[var_3] );
                continue;
            }

            var_1 setplayerdata( "common", "round", "challengesCompleted", var_3, "ch_none" );
        }

        var_4 = tolower( getdvar( "mapname" ) );
        var_1 setplayerdata( "common", "round", "gameMode", scripts\cp\utility::getgametype() );
        var_1 setplayerdata( "common", "round", "map", var_4 );

        if ( istrue( level.matchmakingmatch ) )
        {
            var_5 = 0;
            var_6 = 0;

            for ( var_3 = 0; var_3 < 5; var_3++ )
            {
                var_7 = var_1 getplayerdata( "mp", "mapsPlayed", var_3 );

                if ( var_7 == "" )
                {
                    var_5 = var_3;
                    var_6 = 1;
                    break;
                }

                if ( var_7 == var_4 )
                {
                    var_5 = var_3;
                    var_6 = 0;
                    break;
                }
            }

            if ( var_6 == 1 )
                var_1 setplayerdata( "mp", "mapsPlayed", var_5, var_4 );
            else
            {
                var_8 = var_5;

                for ( var_3 = var_5; var_3 < 4; var_3++ )
                {
                    var_8 = var_3 + 1;
                    var_7 = var_1 getplayerdata( "mp", "mapsPlayed", var_3 + 1 );
                    var_1 setplayerdata( "mp", "mapsPlayed", var_3, var_7 );

                    if ( var_7 == "" )
                    {
                        var_8 = var_3;
                        break;
                    }
                }

                var_1 setplayerdata( "mp", "mapsPlayed", var_8, var_4 );
            }
        }
    }
}

doublebubblesort()
{
    var_0 = self.weaponxpearned;
    var_1 = self.weaponxpearned.size;

    for ( var_2 = var_1 - 1; var_2 > 0; var_2-- )
    {
        for ( var_3 = 1; var_3 <= var_2; var_3++ )
        {
            if ( var_0[var_3 - 1] < var_0[var_3] )
            {
                var_4 = self.weaponsused[var_3];
                self.weaponsused[var_3] = self.weaponsused[var_3 - 1];
                self.weaponsused[var_3 - 1] = var_4;
                var_5 = self.weaponxpearned[var_3];
                self.weaponxpearned[var_3] = self.weaponxpearned[var_3 - 1];
                self.weaponxpearned[var_3 - 1] = var_5;
                var_0 = self.weaponxpearned;
            }
        }
    }
}

isvalidclient( var_0 )
{
    if ( istrue( game["isLaunchChunk"] ) )
        return 0;

    if ( !isdefined( var_0 ) )
        return 0;
    else if ( isagent( var_0 ) )
        return 0;
    else if ( !isplayer( var_0 ) )
        return 0;

    return 1;
}

canlogclient( var_0 )
{
    if ( isvalidclient( var_0 ) )
        return var_0.clientid < level.maxlogclients;
    else
        return 0;
}

canloglife( var_0 )
{
    return var_0 < level.maxlives;
}

logweaponstat( var_0, var_1, var_2, var_3 )
{
    if ( scripts\cp\utility::iskillstreakweapon( var_0 ) || scripts\cp\cp_weapon::isvehicleweapon( var_0 ) )
        return;

    if ( scripts\cp\utility::getgametype() == "br" )
        return;

    var_4 = var_0;

    if ( isdefined( self.loadoutindex ) )
        var_4 = var_4 + "+loadoutIndex" + self.loadoutindex;
    else
        return;

    if ( !isdefined( self.pers["matchdataWeaponStats"][var_4] ) )
    {
        self.pers["matchdataWeaponStats"][var_4] = spawnstruct();
        self.pers["matchdataWeaponStats"][var_4].stats = [];
        self.pers["matchdataWeaponStats"][var_4].weapon = var_0;
        self.pers["matchdataWeaponStats"][var_4].loadoutindex = self.loadoutindex;

        if ( isdefined( var_3 ) )
            self.pers["matchdataWeaponStats"][var_4].variantid = var_3;
        else
            self.pers["matchdataWeaponStats"][var_4].variantid = -1;
    }

    if ( !isdefined( self.pers["matchdataWeaponStats"][var_4].stats[var_1] ) )
        self.pers["matchdataWeaponStats"][var_4].stats[var_1] = var_2;
    else
        self.pers["matchdataWeaponStats"][var_4].stats[var_1] = self.pers["matchdataWeaponStats"][var_4].stats[var_1] + var_2;
}

logattachmentstat( var_0, var_1, var_2, var_3 )
{
    if ( !level.matchdataattachmentstatsenabled )
        return;
}

buildweaponrootlist()
{
    var_0 = [];
    var_1 = 149;

    for ( var_2 = 0; var_2 <= var_1; var_2++ )
    {
        var_3 = tablelookup( "mp/statstable.csv", 0, var_2, 4 );
        var_4 = tablelookup( "mp/statstable.csv", 0, var_2, 2 );

        if ( !issubstr( var_4, "weapon_" ) )
            continue;

        if ( var_4 == "weapon_other" )
            continue;

        var_0[var_0.size] = var_3;
    }

    return var_0;
}

logchallenge( var_0, var_1 )
{

}

logaward( var_0 )
{
    if ( !isvalidclient( self ) )
        return;

    if ( isbot( self ) || initmaxspeedforpathlengthtable( self ) || isai( self ) )
        return;

    var_1 = gettimefrommatchstart( gettime() );
    self dlog_recordplayerevent( "dlog_event_player_award", [ "time_ms_from_match_start", var_1, "award", var_0 ] );
}

initpersstat( var_0 )
{
    if ( !isdefined( self.pers[var_0] ) )
        self.pers[var_0] = 0;
}

getpersstat( var_0 )
{
    return self.pers[var_0];
}

incpersstat( var_0, var_1 )
{
    if ( istrue( game["practiceRound"] ) )
        return;

    if ( isdefined( self ) && isdefined( self.pers ) && isdefined( self.pers[var_0] ) )
        self.pers[var_0] = self.pers[var_0] + var_1;
}

setextrascore0( var_0 )
{
    if ( istrue( game["practiceRound"] ) )
        return;

    self.extrascore0 = var_0;
    self.pers["extrascore0"] = var_0;
}

setextrascore1( var_0 )
{
    if ( istrue( game["practiceRound"] ) )
        return;

    self.extrascore1 = var_0;
    self.pers["extrascore1"] = var_0;
}

setextrascore2( var_0 )
{
    if ( istrue( game["practiceRound"] ) )
        return;

    self.extrascore2 = var_0;
    self.pers["extrascore2"] = var_0;
}

setextrascore3( var_0 )
{
    if ( istrue( game["practiceRound"] ) )
        return;

    self.extrascore3 = var_0;
    self.pers["extrascore3"] = var_0;
}

getplayerdataloadoutgroup()
{
    if ( level.rankedmatch )
        return "rankedloadouts";

    return "privateloadouts";
}

setplayerdatagroups()
{
    level.loadoutsgroup = getplayerdataloadoutgroup();
}

canrecordcombatrecordstats()
{
    return level.rankedmatch && !istrue( level.ignorescoring ) && scripts\cp\utility::getgametype() != "infect";
}

getstreakrecordtype( var_0 )
{
    if ( isenumvaluevalid( "mp", "LethalScorestreakStatItems", var_0 ) )
        return "lethalScorestreakStats";

    if ( isenumvaluevalid( "mp", "SupportScorestreakStatItems", var_0 ) )
        return "supportScorestreakStats";

    return undefined;
}
