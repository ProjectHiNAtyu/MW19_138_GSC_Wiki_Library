// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

coopvehicles_init()
{
    if ( isdefined( level.vehicles_init ) )
        [[ level.vehicles_init ]]();

    if ( !isdefined( level.unloading_func ) )
        level.unloading_func = [];

    if ( !isdefined( level.unloaded_func ) )
        level.unloaded_func = [];

    if ( !isdefined( level.vehicle_builds ) )
        level.vehicle_builds = [];

    setdvar( "scr_struct_spline_path", 1 );
    level thread init_vehicle_spawning();
    scripts\engine\utility::create_func_ref( "vehicle_damage_modifier", ::fake_trigger_think );
    level._effect["helidown_rpghit"] = loadfx( "vfx/iw8_cp/chopper/vfx_chopper_air_explosion.vfx" );
    level._effect["helidown_tailfire"] = loadfx( "vfx/iw8_cp/chopper/vfx_cp_fire_fire_trail.vfx" );
    level._effect["helidown_groundexp"] = loadfx( "vfx/iw8_cp/chopper/vfx_cp_chopper_ground_exp.vfx" );
}

_id_12A5F()
{
    if ( isdefined( level.vehicle ) )
    {
        if ( isdefined( level.vehicle.templates ) )
        {
            if ( isdefined( level.vehicle.templates.bullet_shield ) )
            {
                var_0 = getarraykeys( level.vehicle.templates.bullet_shield );

                for ( var_1 = 0; var_1 < var_0.size; var_1++ )
                    level.vehicle.templates.bullet_shield[var_0[var_1]] = 0;
            }
        }
    }
}

fix_collision()
{
    if ( isdefined( level.vehicle ) )
    {
        if ( isdefined( level.vehicle.templates ) )
        {
            if ( isdefined( level.vehicle.templates.unloadgroups ) )
            {
                var_0 = getarraykeys( level.vehicle.templates.unloadgroups );

                for ( var_1 = 0; var_1 < var_0.size; var_1++ )
                {
                    var_2 = var_0[var_1];
                    var_3 = level.vehicle.templates.aianims[var_0[var_1]].size;

                    if ( !isdefined( level.vehicle.templates.unloadgroups[var_2] ) )
                        level.vehicle.templates.unloadgroups[var_2] = [];

                    if ( isdefined( level.vehicle.templates.unloadgroups[var_2]["passengers"] ) )
                        continue;

                    if ( var_3 > 1 )
                    {
                        for ( var_4 = 1; var_4 < var_3; var_4++ )
                        {
                            if ( isdefined( level.vehicle.templates.aianims[var_2][var_4] ) )
                            {
                                var_5 = level.vehicle.templates.aianims[var_2][var_4];

                                if ( isdefined( var_5.getout ) )
                                {
                                    if ( !isdefined( level.vehicle.templates.unloadgroups[var_2]["passengers"] ) )
                                        level.vehicle.templates.unloadgroups[var_2]["passengers"] = [];

                                    level.vehicle.templates.unloadgroups[var_2]["passengers"][level.vehicle.templates.unloadgroups[var_2]["passengers"].size] = var_4;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

_id_11E7B()
{
    if ( isdefined( level.vehicle ) )
    {
        if ( isdefined( level.vehicle.templates ) )
        {
            if ( isdefined( level.vehicle.templates.team ) )
            {
                var_0 = getarraykeys( level.vehicle.templates.team );

                for ( var_1 = 0; var_1 < var_0.size; var_1++ )
                    level.vehicle.templates.team[var_0[var_1]] = "axis";
            }
        }
    }
}

_id_11E7A( var_0, var_1 )
{
    level.vehicle.templates.bullet_shield[var_1] = var_0;
}

registervehicleinteractions()
{
    level endon( "game_ended" );

    if ( scripts\engine\utility::flag_exist( "interactions_init_started" ) )
        scripts\engine\utility::flag_wait( "interactions_init_started" );

    level.interaction_hintstrings["drive_vehicle"] = &"CP_VEHICLES/ENTER_VEHICLE";
    level.interaction_hintstrings["tank_use"] = &"KILLSTREAKS_HINTS/BRADLEY_DRIVER_ENTER";
    scripts\cp\cp_interaction::registerinteraction( "drive_vehicle", ::vehiclehint, ::usevehicle );
    scripts\cp\cp_interaction::registerinteraction( "tank_use", ::vehiclehint, ::usevehicle );
}

vehiclehint( var_0, var_1 )
{
    if ( getdvarint( "scr_allow_drivable_vehicles", 0 ) == 1 )
        return &"CP_VEHICLES/ENTER_VEHICLE";
    else
        return "";
}

usevehicle( var_0, var_1 )
{
    if ( getdvarint( "scr_allow_drivable_vehicles", 0 ) == 1 )
    {
        var_2 = var_0.vehicle;
        var_2.ownerid = var_1 getentitynumber();
        var_2.originalowner = var_1;
        var_2.driver = var_1;
        var_1.vehicle = var_2;
        var_2 setcandamage( 0 );
        var_1 setplayerangles( var_2.angles );
        var_1.vehicle setotherent( var_1 );
        var_1 controlslinkto( var_2 );
        var_1 playerlinktodelta( var_2, "tag_driver" );
        var_1.vehicle setentityowner( var_1 );
        var_1 playerhide();

        foreach ( var_0 in var_2.interactions )
            scripts\cp\cp_interaction::remove_from_current_interaction_list( var_0 );

        thread watchforplayerexit( var_2, var_1 );
        thread vehiclewatchforflip( var_2, var_1 );
    }
}

watchforplayerexit( var_0, var_1 )
{
    var_1 endon( "game_ended" );
    var_1 notifyonplayercommand( "exit_vehicle", "+usereload" );
    var_1 waittill( "exit_vehicle" );
    exitvehicle( var_0, var_1 );
}

exitvehicle( var_0, var_1, var_2 )
{
    var_1 unlink( 1 );
    var_1 controlsunlink();
    var_1.vehicle setotherent( undefined );
    var_1.vehicle setentityowner( undefined );
    var_1.vehicle = undefined;
    var_1 setorigin( scripts\engine\utility::random( var_0.interactions ).origin );

    if ( istrue( var_2 ) )
        var_0 delete();
    else
    {
        foreach ( var_4 in var_0.interactions )
            scripts\cp\cp_interaction::add_to_current_interaction_list( var_4 );
    }

    waitframe();
    var_1 playershow();
}

vehiclewatchforflip( var_0, var_1 )
{
    var_0 endon( "death" );
    var_2 = 0;

    for (;;)
    {
        if ( var_2 >= 4 )
            break;

        var_3 = vectordot( anglestoup( var_0.angles ), ( 0, 0, 1 ) );

        if ( var_3 < 0.707 )
            var_2 = var_2 + 0.05;
        else
            var_2 = 0;

        waitframe();
    }

    exitvehicle( var_0, var_1, 1 );
}

updateinteractionstructpositions( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "death" );
    var_1 = spawnstruct();
    var_2 = spawnstruct();
    var_3 = spawnstruct();
    var_4 = spawnstruct();
    createvehicleinteraction( var_1, var_0 );
    createvehicleinteraction( var_2, var_0 );
    createvehicleinteraction( var_3, var_0 );
    createvehicleinteraction( var_4, var_0 );

    for (;;)
    {
        var_5 = anglestoforward( var_0.angles );
        var_6 = -1 * var_5;
        var_7 = anglestoleft( var_0.angles );
        var_8 = anglestoright( var_0.angles );
        var_5 = var_5 * 145;
        var_6 = var_6 * 145;
        var_7 = var_7 * 90;
        var_8 = var_8 * 90;
        var_9 = var_0.origin + var_5;
        var_10 = var_0.origin + var_6;
        var_11 = var_0.origin + var_7;
        var_12 = var_0.origin + var_8;
        var_1.origin = var_9 + ( 0, 0, 12 );
        var_2.origin = var_10 + ( 0, 0, 12 );
        var_3.origin = var_11 + ( 0, 0, 12 );
        var_4.origin = var_12 + ( 0, 0, 12 );
        wait 0.25;
    }
}

_spawnvehicle( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = spawnvehicle( var_0, var_1, var_2, var_3, var_4 );
    var_7.interactions = [];
    var_7 thread updateinteractionstructpositions( var_7 );
    return var_7;
}

createvehicleinteraction( var_0, var_1 )
{
    var_0.script_noteworthy = "drive_vehicle";
    var_0.requires_power = 0;
    var_0.powered_on = 1;
    var_0.script_parameters = "default";
    var_0.cost = 0;
    var_0.spend_type = "null";
    var_0.targetname = "interaction";
    var_0.vehicle = var_1;
    var_1.interactions[var_1.interactions.size] = var_0;
    scripts\cp\utility::addtostructarray( "targetname", "interaction", var_0 );
    scripts\cp\utility::addtostructarray( "script_noteworthy", "tank_use", var_0 );
    scripts\cp\cp_interaction::add_to_current_interaction_list( var_0 );
}

create_simple_vehicle_path_from_struct( var_0 )
{
    self.pathing_array = [];
    self.pathing_array[self.pathing_array.size] = var_0;
    var_0.pathing_index = self.pathing_array.size;

    for ( var_1 = var_0; isdefined( var_1.target ); self.pathing_array[self.pathing_array.size] = var_1 )
    {
        var_2 = scripts\engine\utility::getstructarray( var_1.target, "targetname" );

        if ( var_2.size < 1 )
            break;

        if ( var_2.size > 1 )
        {
            var_3 = 1;
            var_4 = var_2;
            var_2 = [];

            for ( var_5 = 0; var_5 < var_4.size; var_5++ )
            {
                if ( var_4[var_5] == var_1 )
                {
                    var_3 = 0;
                    continue;
                }

                var_2[var_2.size] = var_4[var_5];
            }
        }

        var_1 = var_2[0];
        var_1.pathing_index = self.pathing_array.size;
    }
}

vehiclefollowpathgeneric( var_0, var_1 )
{
    if ( istrue( var_1 ) )
        create_simple_vehicle_path_from_struct( var_0 );

    if ( isstruct( var_0 ) )
        thread vehiclefollowstructpath( var_0 );
    else
        thread vehiclefollowpath( var_0 );
}

getvehiclepath( var_0 )
{
    var_1 = getvehiclenode( var_0, "targetname" );

    if ( !isdefined( var_1 ) )
        var_1 = scripts\engine\utility::getstruct( var_0, "targetname" );

    return var_1;
}

vehiclefollowstructpathsplines( var_0, var_1, var_2 )
{
    self endon( "death" );
    self endon( "stop_follow_path" );
    self endon( "reset_path" );
    level endon( "game_ended" );

    if ( var_1.size == 0 )
        return;

    if ( !isdefined( var_0 ) )
        return;

    while ( var_1.size < 4 )
    {
        var_3 = create_extra_structpath( 1, var_1[var_1.size - 1].origin, var_1[var_1.size - 2].origin );
        var_1[var_1.size] = var_3;
    }

    var_4 = [];
    var_5 = [];
    var_6 = var_1.size;
    var_7 = undefined;
    var_8 = self.origin;
    var_9 = 15;

    for ( var_10 = 0; var_10 < var_6; var_10++ )
    {
        if ( isdefined( var_1[var_10 + 1] ) )
            var_7 = var_1[var_10 + 1].origin;

        if ( var_10 == 0 )
            var_4[var_4.size] = self.origin;
        else
            var_4[var_4.size] = var_1[var_10].origin;

        var_11 = 300;

        if ( isdefined( self.convoy ) && istrue( self.convoy.settings.use_path_speeds ) && isdefined( var_1[var_10].speed ) || !isdefined( self.convoy ) && isdefined( var_1[var_10].speed ) )
            var_11 = 300 * ( var_1[var_10].speed / 15 );

        var_12 = get_duration_between_points( var_8, var_7, scripts\engine\utility::ter_op( isdefined( self.cp_speed ), self.cp_speed, var_11 ) );
        var_5[var_5.size] = var_12;
        var_8 = var_7;
    }

    if ( isdefined( self.convoy ) && istrue( self.on_last_pathing_array ) )
    {
        var_13 = self.convoy.spawned_vehicles.size;
        var_14 = 500;

        for ( var_10 = 0; var_10 < self.convoy.spawned_vehicles.size; var_10++ )
        {
            if ( var_10 == 0 )
                continue;

            if ( self.convoy.spawned_vehicles[var_10] == self )
            {
                var_15 = var_4[var_4.size - 1];
                var_16 = var_4[var_4.size - 2];
                var_17 = ( var_16 + var_15 ) / 2;
                var_18 = var_17 - var_16;

                if ( length( var_18 ) < var_14 * var_10 )
                    var_18 = vectornormalize( var_18 ) * ( var_14 * var_10 );

                var_4[var_4.size - 1] = var_15 - var_18;
            }
        }
    }

    if ( isdefined( self.convoy ) && isdefined( self.convoy.settings.path_jitter ) )
    {
        var_6 = self.convoy.settings.path_jitter;

        if ( var_6 > 0 )
        {
            for ( var_10 = 0; var_10 < var_4.size - 1; var_10++ )
            {
                var_19 = randomfloatrange( var_6 * -1, var_6 );
                var_20 = randomfloatrange( var_6 * -1, var_6 );
                var_21 = 0;
                var_4[var_10] = var_4[var_10] + ( var_19, var_20, var_21 );
            }
        }
    }

    foreach ( var_23 in var_4 )
    {

    }

    foreach ( var_26 in var_5 )
    {

    }

    if ( _id_12CD1( self ) )
        self startpathnodes( var_4, var_5 );
    else
        self startpathnodes( var_4, var_5, 0, 0.5, 0.5, 0, 0, 0 );

    thread _id_12CD9( var_2 );
    self notify( "startpathnodes" );

    for ( var_10 = 0; var_10 < var_5.size; var_10++ )
    {
        while ( self issuspendedvehicle() || var_10 > 0 && var_5[var_10] > 1 && self vehicle_getspeed() < 1 )
            wait 0.25;

        wait( var_5[var_10] );
    }

    if ( _id_12CD1( self ) )
    {
        self.on_last_pathing_array = undefined;

        if ( isdefined( self.convoy ) && !istrue( self.convoy.settings.roaming ) || !isdefined( self.convoy ) )
            thread finish_spline_path();
    }

    if ( istrue( self.sec_sys_struct_1 ) )
        vehiclefollowstructpathsplines( self.pathing_array[0], self.pathing_array, 1 );
}

_id_12CD1( var_0 )
{
    if ( istrue( var_0.sec_sys_struct_1 ) )
        return 0;

    if ( isdefined( var_0.pathing_arrays ) )
    {
        if ( istrue( var_0.on_last_pathing_array ) )
            return 1;
        else
            return 0;
    }

    return 1;
}

create_extra_structpath( var_0, var_1, var_2 )
{
    if ( !isdefined( var_2 ) )
        var_2 = ( var_1 - self.origin ) / 2;

    var_3 = var_1;
    var_4 = var_2;
    var_5 = ( var_4 + var_3 ) / 2;
    var_6 = var_5 - var_4;
    var_7 = spawnstruct();
    var_7.origin = var_3 + var_6;
    return var_7;
}

vehiclefollowstructpath( var_0, var_1 )
{
    self endon( "death" );
    self endon( "stop_follow_path" );
    self endon( "reset_path" );
    level endon( "game_ended" );
    self.on_last_pathing_array = undefined;
    var_2 = undefined;

    if ( isdefined( self.pathing_arrays ) && self.pathing_arrays.size > 0 )
    {
        for ( var_3 = 0; var_3 < self.pathing_arrays.size; var_3++ )
        {
            if ( !isdefined( self.pathing_arrays ) || self.pathing_arrays.size == 0 )
                return;

            if ( var_3 == self.pathing_arrays.size - 1 )
                self.on_last_pathing_array = 1;

            vehiclefollowstructpathsplines( var_0, self.pathing_arrays[var_3], var_1 );
        }
    }
    else if ( isdefined( self.pathing_array ) && self.pathing_array.size > 0 )
    {
        self.on_last_pathing_array = 1;
        vehiclefollowstructpathsplines( var_0, self.pathing_array, var_1 );
    }
}

finish_spline_path()
{
    if ( isdefined( self.convoy ) )
    {
        if ( !isdefined( self.convoy.settings ) || istrue( self.convoy.settings.unload_at_target ) )
        {
            if ( isdefined( level.vehicle_all_stop_func ) )
                self [[ level.vehicle_all_stop_func ]]( 0 );

            self notify( "unload_guys" );
        }

        if ( isdefined( self.convoy.settings ) && isdefined( self.convoy.settings.target ) )
            self notify( "unload_guys" );
    }

    self stoppath( 1 );
    self notify( "stop_follow_path" );
}

get_surface_point()
{
    self endon( "death" );

    if ( !self issuspendedvehicle() )
        self suspendvehicle();
}

ent_facing_away_from_mypos( var_0 )
{
    var_1 = var_0.angles;
    var_2 = vectordot( var_1, vectornormalize( var_0.origin - self.origin ) );
    return var_2 > 0;
}

drop_to_ground_ignore_vehicle( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( var_1 ) )
        var_1 = 1500;

    if ( !isdefined( var_2 ) )
        var_2 = -12000;

    var_4 = scripts\engine\trace::create_world_contents();

    if ( isdefined( var_3 ) )
        return scripts\engine\trace::ray_trace( var_0 + var_1 * var_3, var_0 + var_2 * var_3, undefined, var_4 )["position"];
    else
        return scripts\engine\trace::ray_trace( var_0 + ( 0, 0, var_1 ), var_0 + ( 0, 0, var_2 ), undefined, var_4 )["position"];
}

anglebetweenvectorsrounded( var_0, var_1 )
{
    return acos( clamp( vectordot( var_0, var_1 ) / ( length( var_0 ) * length( var_1 ) ), -1, 1 ) );
}

vehiclefollowpath( var_0 )
{
    self endon( "death" );
    self endon( "stop_follow_path" );
    self endon( "reset_path" );
    self startpath( var_0 );

    for ( var_1 = getvehiclenode( var_0.target, "targetname" ); isdefined( var_1 ); var_1 = getvehiclenode( var_1.target, "targetname" ) )
    {
        var_1 waittill( "trigger" );

        if ( isdefined( var_1.script_unload ) )
        {
            self vehicle_setspeedimmediate( 0, 30, 30 );

            for ( var_2 = self vehicle_getspeed(); var_2 > 1; var_2 = self vehicle_getspeed() )
                wait 0.1;

            self notify( "unload_guys" );

            while ( self.riders.size > 0 )
                wait 0.1;

            if ( isdefined( var_1.target ) )
                self resumespeed( 10 );
        }

        if ( isdefined( var_1.script_pathtype ) && var_1.script_pathtype == "unload" )
        {
            self vehicle_setspeedimmediate( 0, 300, 300 );
            self stoppath( 1 );
            self notify( "unload_guys" );
            self notify( "stop_follow_path" );
            return;
        }

        if ( !isdefined( var_1.target ) )
            break;
    }

    self vehicle_setspeedimmediate( 0, 30, 30 );

    for ( var_2 = self vehicle_getspeed(); var_2 > 1; var_2 = self vehicle_getspeed() )
        wait 0.1;

    self notify( "unload_guys" );
}

spawn_ai_in_truck( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 )
{
    var_0 scripts\engine\utility::ent_flag_wait( "driver_spawned" );
    var_0.riders = [];
    var_0.spawned_guys = [];
    var_9 = [];

    if ( !isdefined( var_2 ) && isdefined( level.all_spawn_locations ) )
        var_2 = scripts\engine\utility::random( level.all_spawn_locations );

    var_10 = "convoy_soldiers";
    var_11 = level.ambientgroups[var_10];

    if ( !isdefined( var_11 ) )
    {
        var_12 = scripts\cp\cp_modular_spawning::registerambientgroup;
        [[ var_12 ]]( "convoy_soldiers", 0, 10, 250, 20, 0, "convoy_soldiers", undefined, undefined, undefined );
        waitframe();
        var_11 = level.ambientgroups[var_10];
    }

    if ( !var_11 scripts\engine\utility::ent_flag_exist( "weapons_free" ) )
        var_11 scripts\engine\utility::ent_flag_init( "weapons_free" );

    if ( !isdefined( level.spawn_module_structs_memory[var_10] ) )
    {
        level.spawn_module_structs_memory[var_10] = [];
        level.active_spawn_module_structs[var_10][0] = var_11;
        level.spawn_module_structs_memory[var_10][0] = var_11;
    }

    for ( var_13 = 0; var_13 < var_1; var_13++ )
    {
        if ( isdefined( level.soldierspawnfunc ) )
            var_14 = [[ level.soldierspawnfunc ]]( var_4, var_2, undefined, 1 );
        else
            var_14 = var_0 scripts\cp\cp_modular_spawning::spawn_ai( undefined, undefined, var_5, var_11 );

        if ( isdefined( var_14 ) )
        {
            if ( isdefined( var_11.box_used_common_setup ) )
            {
                if ( isdefined( level.players[var_11.box_used_common_setup] ) )
                {
                    level.players[var_11.box_used_common_setup].boundary++;
                    var_14.br_add_player_commands = level.players[var_11.box_used_common_setup];
                }
            }

            var_11 scripts\cp\cp_modular_spawning::change_module_status( undefined, "Found Agent" );
            level notify( "spawned_group_soldier", var_14 );
            thread scripts\cp\cp_modular_spawning::run_ai_post_spawn_init( var_11, var_14, var_0, undefined, undefined, undefined, undefined );
            var_14.group = var_11;

            if ( istrue( var_0._id_124C4 ) )
            {
                var_14.sightmaxdistance = 2200;
                var_14.ignoreall = 1;
            }

            var_14.plunderfxondropthreashold = 1;
            var_14.dontkilloff = 1;

            if ( isdefined( level.reserved_spawn_slots["truck_ai"] ) )
                scripts\cp\cp_modular_spawning::decrease_reserved_spawn_slots( 1, "truck_ai" );

            if ( isdefined( var_8 ) )
                var_14 thread [[ var_8 ]]();

            if ( istrue( var_7 ) )
            {
                var_15 = var_13 + 2;

                if ( isdefined( var_6 ) )
                    var_15 = var_6;

                var_16 = ( 0, 0, 0 );

                if ( !isvector( var_6 ) )
                {
                    var_17 = level.vehicle.templates.aianims[var_0.classname_mp][var_15];
                    var_18 = var_17.sittag;
                }
                else
                {
                    var_18 = "tag_origin";
                    var_16 = var_6;
                    var_16 = rotatevector( var_16, var_0.angles );
                }

                var_14.origin = var_0 gettagorigin( var_18 ) + ( 0, 0, -18 ) + var_16;
                var_14.linkedent = scripts\engine\utility::spawn_tag_origin( var_14.origin );
                var_14.linkedent linkto( var_0, var_18 );
                var_14 linkto( var_14.linkedent, "tag_origin" );
                var_14 thread scripts\engine\utility::delete_on_death( var_14.linkedent );
                wait 0.05;
                var_14 playerlinkedoffsetenable();
            }

            var_14.dontkilloff = 1;
            var_0.spawned_guys[var_0.spawned_guys.size] = var_14;
            var_9[var_9.size] = var_14;
        }

        wait 0.05;
    }

    if ( !istrue( var_7 ) )
    {
        foreach ( var_20 in var_9 )
        {
            if ( isdefined( var_6 ) && isint( var_6 ) )
                var_20.forced_startingposition = var_6;

            var_0 thread scripts\common\vehicle_aianim::guy_enter( var_20 );
        }
    }

    level thread make_guys_leave_truck( var_0 );
    return var_9;
}

spawn_real_ai_from_drone_pos( var_0 )
{
    var_1 = scripts\cp\cp_agent_utils::getaliveagentsofteam( "axis" );
    var_2 = var_0.origin;
    var_3 = var_0.script_noteworthy;

    for ( var_4 = var_0.model; var_1.size >= level.max_enemy_count; var_1 = scripts\cp\cp_agent_utils::getaliveagentsofteam( "axis" ) )
        wait 5;

    if ( !isdefined( var_0 ) )
    {
        var_0 = spawn( "script_model", var_2 );
        var_0 setmodel( var_4 );
        var_0.vehicle_position = 3;
        var_0.disable_gun_recall = 1;
        var_0.script_noteworthy = var_3;
    }

    var_5 = undefined;

    while ( !isdefined( var_5 ) )
    {
        var_5 = scripts\cp\cp_modular_spawning::spawn_ai( var_2, undefined, undefined );

        if ( !isdefined( var_5 ) )
            wait 3;
    }

    var_5.disable_gun_recall = 1;
    var_5.disable_vehicle_idle = 1;
    var_5.animationarchetype = "soldier";
    var_5.dontkilloff = 1;

    if ( isdefined( level.reserved_spawn_slots["truck_drones"] ) )
        scripts\cp\cp_modular_spawning::decrease_reserved_spawn_slots( 1, "truck_drones" );

    return var_5;
}

disableunloadanim()
{
    return 1;
}

deposit_ai_from_drones_in_vehicle( var_0, var_1 )
{
    self endon( "death" );
    var_2 = scripts\engine\utility::_id_12E47( "stop_follow_path", "unload_guys" );
    wait 0.75;
    level thread make_guys_leave_truck( self, 1 );
}

create_unload_nodes( var_0, var_1 )
{
    var_2 = [ ( -140, 64, 48 ), ( -212, 64, 48 ), ( -140, -64, 48 ), ( -212, -64, 48 ) ];
    var_3 = [];
    var_4 = 0;

    foreach ( var_6 in var_2 )
    {
        if ( var_4 < var_1 )
        {
            var_7 = spawn( "script_origin", var_0.origin + var_6 );
            var_3 = scripts\engine\utility::array_add( var_3, var_7 );
            var_4++;
            var_7 linkto( var_0 );
            wait 0.1;
        }
    }

    return var_3;
}

reinforcement_test()
{
    level endon( "game_ended" );
    scripts\cp\cp_modular_spawning::increase_reserved_spawn_slots( 4, "reinforcement_test" );
    wait 5;
}

spawn_reinforcement_truck( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = scripts\engine\utility::getstruct( var_1, "targetname" );
    var_9 = var_8.origin;

    if ( !isdefined( var_8.angles ) )
        var_10 = ( 0, 0, 0 );
    else
        var_10 = var_8.angles;

    var_11 = _spawnvehicle( var_2, "jeep4x4", "atv_physics_cp", var_9, ( 0, 0, 0 ) );

    if ( isdefined( var_11 ) )
    {
        level thread vehicle_logic( var_11, var_3, var_0, var_5, var_6, var_7 );
        return var_11;
    }
}

spawnreinforementtruck( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = scripts\engine\utility::getstruct( var_1, "targetname" );
    var_9 = var_8.origin;

    if ( !isdefined( var_8.angles ) )
        var_10 = ( 0, 0, 0 );
    else
        var_10 = var_8.angles;

    var_11 = _spawnvehicle( var_2, "jeep4x4", "atv_physics_cp", var_9, ( 0, 0, 0 ) );

    if ( isdefined( var_11 ) )
    {
        var_11.num_guys = var_0;
        var_11.targetname_string = var_1;
        var_11.model_name = var_2;
        var_11.start_node_name = var_3;
        var_11.damagable = var_4;
        var_11.spawnpoints = var_8;
        var_11.bforcespawn = var_6;
        var_11.group = var_7;
        return var_11;
    }
    else
        return undefined;
}

vehicle_logic( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = var_0 get_start_node( var_1 );

    if ( !isdefined( var_6 ) )
    {
        var_0 delete();
        return;
    }

    var_0.unload_nodes = create_unload_nodes( var_0, var_2 );
    wait 0.1;
    var_0.origin = var_6.origin;
    var_0.angles = var_6.angles;
    spawn_ai_in_truck( var_0, var_2, var_3, var_4, var_5 );
    var_0 vehiclefollowpath( var_6 );
}

get_start_node( var_0 )
{
    var_1 = undefined;

    if ( isdefined( var_0 ) )
        var_1 = getvehiclenode( var_0, "targetname" );
    else
    {
        var_2 = getallvehiclenodes();
        var_3 = scripts\engine\utility::getclosest( self.origin, var_2, 500 );

        if ( !isdefined( var_3 ) )
            return undefined;
        else
            var_1 = var_3;
    }

    return var_1;
}

spawn_guys_on_truck( var_0 )
{

}

make_guys_leave_truck( var_0, var_1 )
{
    var_0 endon( "death" );
    var_0 endon( "disable_leave_truck" );

    if ( !istrue( var_1 ) )
    {
        var_0 waittill( "unload_guys" );
        var_0 vehicle_setspeed( 0, 90, 90 );
        wait 1;
        var_0 vehicle_setspeedimmediate( 0, 30, 30 );
    }

    if ( istrue( var_0.disable_leave_truck ) )
        return;

    var_2 = "convoy_soldiers";
    var_3 = level.ambientgroups[var_2];

    if ( !isdefined( var_3 ) )
    {
        var_4 = scripts\cp\cp_modular_spawning::registerambientgroup;
        [[ var_4 ]]( "convoy_soldiers", 0, 10, 250, 20, 0, "convoy_soldiers", undefined, undefined, undefined );
        waitframe();
        var_3 = level.ambientgroups[var_2];
    }

    if ( !var_3 scripts\engine\utility::ent_flag_exist( "weapons_free" ) )
        var_3 scripts\engine\utility::ent_flag_init( "weapons_free" );

    if ( !isdefined( level.spawn_module_structs_memory[var_2] ) )
    {
        level.spawn_module_structs_memory[var_2] = [];
        level.active_spawn_module_structs[var_2][0] = var_3;
        level.spawn_module_structs_memory[var_2][0] = var_3;
    }

    var_5 = [];

    foreach ( var_7 in var_0.attachedguys )
    {
        if ( isent( var_7 ) )
        {
            var_7.group = var_3;
            var_7.combat_func_override = "shotgun";

            if ( istrue( var_0._id_124C4 ) && isalive( var_7 ) )
            {
                var_7.sightmaxdistance = 2200;
                var_7 thread scripts\cp\coop_stealth::run_common_functions( var_7, 1, 1, 60, 160000 );
                var_7.ignoreall = 0;
            }

            if ( !isalive( var_7 ) )
                var_5[var_5.size] = var_7;
        }
    }

    var_0 extractquest_helipadid( var_3, var_5 );

    if ( !istrue( var_1 ) )
    {
        while ( var_0.riders.size > 0 )
            waitframe();
    }
    else
        wait 2;

    var_0 notify( "unloaded" );
}

soldier_leave_truck( var_0, var_1 )
{
    var_2 = spawn( "script_origin", var_0.origin );
    var_3 = anglestoforward( var_1.angles ) * -1;
    var_4 = 150;
    var_5 = scripts\cp\utility::vec_multiply( var_3, var_4 );
    var_6 = getclosestpointonnavmesh( var_0.origin + var_5 );
    var_0.scripted_mode = 1;
    var_0.ignoreall = 1;
    var_0 linkto( var_2 );
    var_2 moveto( var_6 + ( 0, 0, 5 ), 0.25 );
    var_2 waittill( "movedone" );
    var_0.scripted_mode = 0;
    var_0.ignoreall = 0;
    var_0 unlink();
    var_1.riders = scripts\engine\utility::array_remove( var_1.riders, var_0 );
    var_6 = getclosestpointonnavmesh( var_0.origin );
    var_0 setgoalpos( var_6 );

    if ( isdefined( var_0.spawnpoint ) && isdefined( var_0.spawnpoint.script_goalvolume ) )
        var_0 setgoalvolumeauto( getent( var_0.spawnpoint.script_goalvolume, "script_noteworthy" ) );

    var_0.goalradius = 2048;
    var_2 delete();
}

fake_trigger_think( var_0 )
{
    var_1 = undefined;

    if ( isdefined( var_0 ) )
    {
        if ( isdefined( var_0.damage ) )
            var_1 = var_0.damage;

        if ( isdefined( var_0.attacker ) && isplayer( var_0.attacker ) && isdefined( var_1 ) )
        {
            if ( isdefined( var_0.attacker.team ) && isdefined( self.team ) && var_0.attacker.team != self.team )
            {
                if ( isdefined( var_0.objweapon ) && isdefined( var_0.objweapon.basename ) )
                {
                    if ( var_0.objweapon.basename == "emp_drone_player_mp" )
                        var_1 = 10000;
                }
            }

            if ( isdefined( var_0.objweapon ) && isdefined( var_0.objweapon.basename ) )
            {
                switch ( var_0.objweapon.basename )
                {
                    case "cruise_proj_mp":
                    case "toma_proj_mp":
                        if ( isdefined( self.healthbuffer ) )
                            self.health = self.healthbuffer - 100;
                        else
                            self.health = 0;

                        break;
                    case "molotov_mp":
                        if ( self.healthbuffer > self.health )
                        {
                            if ( isdefined( var_0.objweapon ) && issubstr( var_0.objweapon.basename, "molotov" ) )
                                var_0.attacker thread scripts\cp\cp_achievement::monitor();
                        }

                        break;
                }

                if ( isdefined( var_0.meansofdeath ) )
                    var_1 = scripts\cp\cp_damage::handleapdamage( var_0.objweapon, var_0.meansofdeath, var_1, var_0.attacker );
            }

            if ( isdefined( self.gas_vfx_range_think ) )
                var_1 = var_1 * self.gas_vfx_range_think;

            if ( istrue( var_0.attacker.gas_triggers_init ) )
            {
                var_2 = var_0.attacker.origin[2];
                var_3 = self.origin[2];

                if ( var_2 >= var_3 )
                {
                    var_4 = int( abs( var_2 - var_3 ) );
                    var_5 = int( var_4 / 64 );

                    if ( var_5 > 0 )
                        var_1 = var_1 * ( 1 + 0.4 * var_5 );
                }
            }

            var_0.attacker scripts\cp\cp_damagefeedback::updatehitmarker( "standard", 1, var_1, 0, 0 );
            var_6 = self.health - var_1;
            self.health = int( max( var_6, self.healthbuffer - 1 ) );
        }
    }

    return var_1;
}

delete_on_end()
{
    level endon( "game_ended" );
    self endon( "death" );
    wait 0.25;
    scripts\engine\utility::_id_12E3F( "unloaded", "stop_follow_path" );
}

spawnstaticvehicle( var_0, var_1, var_2 )
{
    var_3 = spawn( "script_model", var_0 );
    var_3.angles = var_1;
    var_3 setmodel( var_2 );
    var_3 solid();
    createnavobstaclebybounds( var_3.origin, ( 100, 100, 200 ), var_3.angles );
    var_3 disconnectpaths();
    wait 0.1;
}

init_vehicle_spawning()
{
    level.ai_spawn_vehicle_func = [];
    level.next_index = 0;
    level.all_ai_vehicle_infils = [];
    level.available_ai_vehicle_air_infils = [];
    level.available_ai_vehicle_ground_infils = [];
    level.path_points = [];
    level.invalid_path_points = [];
    level.heli_triggers = [];
    level._id_12BE4 = [];
    create_vehicle_builds();
    vehicle_registrations();
    level thread init_vehicles_after_flags();
    add_ai_ground_infil( "pindia" );
    add_ai_ground_infil( "technical_ai_plr" );
    add_ai_air_infil( "attack_heli" );
    register_vehicle_spawn( "attack_heli", undefined, undefined, undefined, "heli_spawner", undefined, "heli_infil_path", undefined, ::spawn_enemy_chopper, "apache" );
    register_vehicle_spawn( "decho", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, "decho" );
    register_vehicle_spawn( "techo_non_phys", 10, 10, 10, "ai_ground_veh_spawner", "ground_veh_exit", "ground_veh_infil_path", undefined, ::veh_ground_veh_spawn, "techo_non_phys" );
    register_vehicle_spawn( "techo", 10, 10, 10, "ai_ground_veh_spawner", "ground_veh_exit", "ground_veh_infil_path", undefined, ::veh_ground_veh_spawn, "techo" );
    register_vehicle_spawn( "technical_ai_plr", 10, 10, 10, "ai_ground_veh_spawner", "ground_veh_exit", "ground_veh_infil_path", undefined, ::veh_ground_veh_spawn, "technical_ai_plr" );
    register_vehicle_spawn( "veh8_mil_lnd_mkilo23", 1, 2, 30, "ai_ground_veh_spawner", "ground_veh_exit", "ground_veh_infil_path", undefined, ::veh_ground_veh_spawn, "veh8_mil_lnd_mkilo23" );
    register_vehicle_spawn( "veh8_mil_lnd_mkilo23_rus", 1, 2, 30, "ai_ground_veh_spawner", "ground_veh_exit", "ground_veh_infil_path", undefined, ::veh_ground_veh_spawn, "veh8_mil_lnd_mkilo23_rus" );
    register_vehicle_spawn( "mkilo23_physics", 4, 10, 10, "ai_ground_veh_spawner", "ground_veh_exit", "ground_veh_infil_path", undefined, ::veh_ground_veh_spawn, "mkilo23_physics" );
    register_vehicle_spawn( "vindia_a2", 4, 10, 10, "ai_ground_veh_spawner", "ground_veh_exit", "ground_veh_infil_path", undefined, ::veh_ground_veh_spawn, "vindia_a2" );
    register_vehicle_spawn( "random_ground_vehicle_spawn", undefined, undefined, undefined, undefined, undefined, undefined, undefined, ::choose_random_ground_vehicle_spawn );
    register_vehicle_spawn( "random_air_vehicle_spawn", undefined, undefined, undefined, undefined, undefined, undefined, undefined, ::choose_random_air_vehicle_spawn );
    register_vehicle_spawn( "escalation_heli_spawn", undefined, undefined, undefined, undefined, undefined, undefined, undefined, ::choose_escalation_air_vehicle_spawn );
    register_vehicle_spawn_drivers( "blima_ground", 2, scripts\engine\utility::random( [ "aq_pilot_fullbody_1", "aq_pilot_fullbody_2" ] ) );
    register_vehicle_spawn_drivers( "techo", 2, scripts\engine\utility::random( [ "aq_pilot_fullbody_1", "aq_pilot_fullbody_2" ] ) );
    register_vehicle_spawn_drivers( "veh8_mil_lnd_mkilo23", 2, scripts\engine\utility::random( [ "aq_pilot_fullbody_1", "aq_pilot_fullbody_2" ] ) );
    register_vehicle_spawn_drivers( "veh8_mil_lnd_mkilo23_rus", 2, scripts\engine\utility::random( [ "aq_pilot_fullbody_1", "aq_pilot_fullbody_2" ] ) );
    register_vehicle_spawn_drivers( "mkilo23_physics", 2, scripts\engine\utility::random( [ "aq_pilot_fullbody_1", "aq_pilot_fullbody_2" ] ) );
    register_vehicle_spawn_drivers( "decho", 2, scripts\engine\utility::random( [ "aq_pilot_fullbody_1", "aq_pilot_fullbody_2" ] ) );
}

register_unloading_func( var_0, var_1 )
{
    if ( !isdefined( level.unloading_func ) )
        level.unloading_func = [];

    var_2 = spawnstruct();
    var_2.spawn_type = var_1;
    level.unloading_func[var_0] = var_1;
}

register_unloaded_func( var_0, var_1 )
{
    if ( !isdefined( level.unloading_func ) )
        level.unloaded_func = [];

    var_2 = spawnstruct();
    var_2.spawn_type = var_1;
    level.unloaded_func[var_0] = var_1;
}

#using_animtree("script_model");

deploy_fast_rope()
{
    var_0 = self gettagorigin( "origin_animate_jnt" );
    var_1 = self gettagangles( "origin_animate_jnt" );
    var_2 = "equipment_fast_rope_wm_01_infil_heli_l";
    var_3 = %equipment_fast_rope_wm_01_infil_heli_l;
    var_4 = getstartorigin( var_0, var_1, var_3 );
    var_5 = getstartangles( var_0, var_1, var_3 );
    var_6 = spawn( "script_model", var_4 );
    var_6.angles = var_5;
    thread scripts\engine\utility::delete_on_death( var_6 );
    var_6 setmodel( "equipment_fast_rope_wm_01_infil_heli_l" );
    var_6 linkto( self );
    var_6 scriptmodelplayanimdeltamotionfrompos( var_2, var_4, var_5 );
    var_0 = self gettagorigin( "origin_animate_jnt" );
    var_1 = self gettagangles( "origin_animate_jnt" );
    var_2 = "equipment_fast_rope_wm_01_infil_heli_r";
    var_3 = %equipment_fast_rope_wm_01_infil_heli_r;
    var_4 = getstartorigin( var_0, var_1, var_3 );
    var_5 = getstartangles( var_0, var_1, var_3 );
    var_7 = spawn( "script_model", var_4 );
    var_7.angles = var_5;
    thread scripts\engine\utility::delete_on_death( var_7 );
    var_7 setmodel( "equipment_fast_rope_wm_01_infil_heli_l" );
    var_7 linkto( self );
    var_7 scriptmodelplayanimdeltamotionfrompos( var_2, var_4, var_5 );
    scripts\engine\utility::waittill_either( "death", "unloaded" );
    var_6 scriptmodelclearanim();
    var_6 scriptmodelplayanim( "equipment_fast_rope_wm_01_infil_heli_l_fall" );
    var_7 scriptmodelclearanim();
    var_7 scriptmodelplayanim( "equipment_fast_rope_wm_01_infil_heli_r_fall" );
    wait 2;
    var_6 delete();
    var_7 delete();
}

drop_fast_rope()
{

}

setup_fast_rope_anims()
{
    level.scr_animtree["rope"] = #animtree;
    level.scr_anim["rope"]["equipment_fast_rope_wm_01_infil_heli_l"] = %equipment_fast_rope_wm_01_infil_heli_l;
    level.scr_animname["rope"]["equipment_fast_rope_wm_01_infil_heli_l"] = "equipment_fast_rope_wm_01_infil_heli_l";
    level.scr_model["rope"]["equipment_fast_rope_wm_01_infil_heli_l"] = "equipment_fast_rope_wm_01_infil_heli_l";
    level.tag["rope"]["equipment_fast_rope_wm_01_infil_heli_l"] = "origin_animate_jnt";
    level.scr_anim["rope"]["equipment_fast_rope_wm_01_infil_heli_l_fall"] = %equipment_fast_rope_wm_01_infil_heli_l_fall;
    level.scr_animname["rope"]["equipment_fast_rope_wm_01_infil_heli_l_fall"] = "equipment_fast_rope_wm_01_infil_heli_l_fall";
    level.scr_model["rope"]["equipment_fast_rope_wm_01_infil_heli_l_fall"] = "equipment_fast_rope_wm_01_infil_heli_l";
    level.tag["rope"]["equipment_fast_rope_wm_01_infil_heli_l_fall"] = "origin_animate_jnt";
}

init_vehicles_after_flags()
{
    level endon( "game_ended" );
    scripts\engine\utility::flag_wait( "level_ready_for_script" );
    _id_12A5F();
    fix_collision();
    _id_11E7B();
    level.ground_vehicle_structs = scripts\engine\utility::getstructarray( "ground_veh_infil_path", "targetname" );

    if ( isdefined( level.vehicle.helicopter_crash_locations ) )
    {
        level.vehicle.helicopter_crash_locations = scripts\engine\utility::array_combine( level.vehicle.helicopter_crash_locations, scripts\engine\utility::getstructarray_delete( "helicopter_crash_location", "targetname" ) );
        level.vehicle.helicopter_crash_locations = scripts\engine\utility::array_combine( level.vehicle.helicopter_crash_locations, scripts\engine\utility::getstructarray( "heli_exit", "targetname" ) );
    }
    else
        level.vehicle.helicopter_crash_locations = scripts\engine\utility::getstructarray( "heli_exit", "targetname" );
}

vehicle_ai_spawn_funcs()
{
    register_spawner_script_function( "pindia", ::ai_ground_veh_spawn, undefined );
    register_spawner_script_function( "techo_non_phys", ::ai_ground_veh_spawn, undefined );
    register_spawner_script_function( "technical_ai_plr", ::ai_ground_veh_spawn, undefined );
    register_spawner_script_function( "techo", ::ai_ground_veh_spawn, undefined );
    register_spawner_script_function( "veh8_mil_lnd_umike", ::ai_ground_veh_spawn, undefined );
    register_spawner_script_function( "veh8_mil_lnd_mkilo23", ::ai_ground_veh_spawn, undefined );
    register_spawner_script_function( "veh8_mil_lnd_mkilo23_rus", ::ai_ground_veh_spawn, undefined );
    register_spawner_script_function( "mkilo23_physics", ::ai_ground_veh_spawn, undefined );
    register_spawner_script_function( "vindia_a2", ::ai_ground_veh_spawn, undefined );
    register_spawner_script_function( "decho", ::ai_ground_veh_spawn, undefined );
}

register_spawner_script_function( var_0, var_1, var_2, var_3 )
{
    if ( istrue( var_3 ) )
        level waittill( var_0 );

    if ( isdefined( level.spawner_script_funcs[var_0] ) )
        var_4 = level.spawner_script_funcs[var_0];
    else
        var_4 = spawnstruct();

    var_4.script_function = var_1;
    var_4.specs = var_2;
    level.spawner_script_funcs[var_0] = var_4;
}

create_ai_plr_vehicle( var_0, var_1 )
{
    copy_vehicle_build_to_spawnpoint( var_1, var_0 );
    var_2 = scripts\common\vehicle::vehicle_spawn( var_0 );
    var_2.cannotbesuspended = 1;

    if ( isdefined( var_0.vehiclename ) )
    {
        var_2.vehiclename = var_0.vehiclename;
        scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_setteam( var_2, "axis" );
        var_2 makeunusable();
        var_2 setcandamage( 1 );
        var_2.maxhealth = 999999;
        var_2.health = var_2.maxhealth;
        var_2 scripts\cp_mp\emp_debuff::set_start_emp_callback( scripts\cp_mp\vehicles\vehicle::vehicle_empstartcallback );
        var_2 scripts\cp_mp\emp_debuff::set_clear_emp_callback( scripts\cp_mp\vehicles\vehicle::vehicle_empclearcallback );
        scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_registerinstance( var_2 );
        scripts\cp_mp\vehicles\vehicle_interact::vehicle_interact_registerinstance( var_2 );
        scripts\cp_mp\vehicles\vehicle_interact::vehicle_interact_updateusability( var_2 );
        scripts\cp_mp\vehicles\vehicle_tracking::vehicle_tracking_registerinstance( var_2, undefined, undefined );
        scripts\cp_mp\vehicles\vehicle_dlog::vehicle_dlog_spawnevent( var_2, undefined );
        var_3 = scripts\cp_mp\utility\weapon_utility::setlockedoncallback;
        [[ var_3 ]]( var_2, scripts\cp_mp\vehicles\vehicle::vehicle_lockedoncallback );
        var_4 = scripts\cp_mp\utility\weapon_utility::setlockedonremovedcallback;
        [[ var_4 ]]( var_2, scripts\cp_mp\vehicles\vehicle::vehicle_lockedonremovedcallback );
        thread scripts\cp_mp\vehicles\vehicle::vehicle_watchflipped( var_2, undefined, scripts\cp_mp\vehicles\vehicle::vehicle_flippedendcallback );
    }

    return var_2;
}

register_vehicle_build( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = spawnstruct();
    var_5.model = var_1;
    var_5.vehicletype = var_2;
    var_5.classname_mp = var_3;
    level.vehicle_builds[var_0] = var_5;
}

zombiejumpbar( var_0, var_1 )
{
    if ( istrue( var_1 ) )
        level waittill( var_0 );

    var_2 = level.vehicle_builds[var_0];

    if ( isdefined( var_2 ) )
    {
        var_2.plundermusicthird = 1;
        var_2.bindingpc = 1;
    }
}

_id_12C92( var_0 )
{
    return istrue( level.vehicle_builds[var_0].plundermusicthird );
}

find_supply_station( var_0, var_1, var_2, var_3 )
{
    level thread zombiejumpbartext( var_0, var_1, var_2, var_3, undefined, 1, 1 );
    level thread zombiejumpbar( var_0, 1 );
    level thread register_vehicle_spawn_drivers( var_0, 1, scripts\engine\utility::random( [ "aq_pilot_fullbody_1", "aq_pilot_fullbody_2" ] ) );
    level thread zombiejumping( var_0, undefined, undefined, undefined, undefined, undefined, undefined, 1, undefined, undefined );
}

zombiejumpbartext( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    if ( istrue( var_6 ) )
        level waittill( var_0 );

    if ( isdefined( level.vehicle ) )
    {
        if ( isdefined( level.vehicle.templates ) )
        {
            if ( isdefined( level.vehicle.templates.aianims ) )
            {
                if ( isdefined( level.vehicle.templates.aianims[var_3] ) )
                {
                    if ( isdefined( level.ai_spawn_vehicle_func[var_0] ) && isdefined( level.ai_spawn_vehicle_func[var_0].max_ai ) )
                    {
                        if ( isdefined( var_5 ) )
                            level.vehicle_builds[var_0].max_ai = var_5;
                        else
                            level.vehicle_builds[var_0].max_ai = level.ai_spawn_vehicle_func[var_0].max_ai;
                    }
                    else if ( isdefined( var_5 ) )
                        level.vehicle_builds[var_0].max_ai = var_5;
                    else
                    {
                        var_7 = level.vehicle.templates.aianims[var_3];
                        level.vehicle_builds[var_0].max_ai = var_7.size;
                    }
                }
            }
        }
    }
}

level_carepackage_give_player_killstreak( var_0, var_1 )
{
    if ( isdefined( level.vehicle_builds ) && isdefined( level.vehicle_builds[var_1] ) && isdefined( level.vehicle_builds[var_1].max_ai ) )
    {
        var_2 = leadmarkerthreshold( var_0, var_1 );

        if ( isdefined( var_2 ) )
        {
            var_3 = 0;

            for ( var_4 = 0; var_4 < self.usedpositions.size; var_4++ )
            {
                var_5 = 1;

                for ( var_6 = 0; var_6 < var_2.size; var_6++ )
                {
                    if ( var_2[var_6] == var_4 )
                    {
                        var_5 = 0;
                        break;
                    }
                }

                if ( var_5 )
                    var_3++;
            }

            return int( min( var_3, level.vehicle_builds[var_1].max_ai ) );
            return;
        }

        return level.vehicle_builds[var_1].max_ai;
        return;
    }
    else
        return undefined;
}

get_random_available_air_ai_infil()
{
    return scripts\engine\utility::random( level.available_ai_vehicle_air_infils );
}

get_random_available_ground_ai_infil()
{
    return scripts\engine\utility::random( level.available_ai_vehicle_ground_infils );
}

attempt_ai_ground_infil_cooldown( var_0 )
{
    if ( level.ai_spawn_vehicle_func[var_0].max_num <= level.ai_spawn_vehicle_func[var_0].count )
        level thread remove_ai_ground_infil_for_time( var_0 );
}

attempt_ai_air_infil_cooldown( var_0 )
{
    if ( level.ai_spawn_vehicle_func[var_0].max_num <= level.ai_spawn_vehicle_func[var_0].count )
        level thread remove_ai_air_infil_for_time( var_0 );
}

remove_ai_ground_infil_for_time( var_0 )
{
    level.available_ai_vehicle_ground_infils = scripts\engine\utility::array_remove( level.available_ai_vehicle_ground_infils, var_0 );

    if ( isdefined( level.ai_spawn_vehicle_func[var_0].cooldown ) )
        scripts\engine\utility::delaythread( level.ai_spawn_vehicle_func[var_0].cooldown, ::add_ai_ground_infil, var_0 );
}

remove_ai_air_infil_for_time( var_0 )
{
    level.available_ai_vehicle_air_infils = scripts\engine\utility::array_remove( level.available_ai_vehicle_air_infils, var_0 );

    if ( isdefined( level.ai_spawn_vehicle_func[var_0].cooldown ) )
        scripts\engine\utility::delaythread( level.ai_spawn_vehicle_func[var_0].cooldown, ::add_ai_air_infil, var_0 );
}

add_ai_air_infil( var_0 )
{
    level.available_ai_vehicle_air_infils[var_0] = var_0;
}

add_ai_ground_infil( var_0 )
{
    level.available_ai_vehicle_ground_infils[var_0] = var_0;
}

zombiejumping( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    level waittill( var_0 );

    if ( isdefined( level.ai_spawn_vehicle_func[var_0] ) )
    {
        var_10 = level.ai_spawn_vehicle_func[var_0];

        if ( isdefined( var_0 ) )
            var_10.spawn_type = var_0;

        if ( isdefined( var_1 ) )
            var_10.max_num = var_1;

        if ( isdefined( var_2 ) )
            var_10.cooldown = var_2;

        if ( isdefined( var_3 ) )
            var_10.max_wait_for_infil = var_3;

        if ( isdefined( var_4 ) )
            var_10.spawn_points = var_4;

        if ( isdefined( var_5 ) )
            var_10.exit_points = var_5;

        if ( isdefined( var_6 ) )
            var_10.path_start_points = var_6;

        if ( isdefined( var_8 ) )
            var_10.vehicle_spawn_func = var_8;

        if ( isdefined( var_9 ) )
            var_10.vehicle_build = var_9;

        level.ai_spawn_vehicle_func[var_0] = var_10;

        if ( isdefined( var_6 ) )
            level thread get_path_points( var_0, var_6 );
    }

    if ( isdefined( var_7 ) )
    {
        if ( isdefined( level.vehicle_builds[var_0] ) && isdefined( level.vehicle_builds[var_0].max_ai ) )
            level.vehicle_builds[var_0].max_ai = var_7;
    }
}

register_vehicle_spawn( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    level.all_ai_vehicle_infils[level.all_ai_vehicle_infils.size] = var_0;
    var_10 = spawnstruct();
    var_10.spawn_type = var_0;
    var_10.max_num = var_1;
    var_10.cooldown = var_2;
    var_10.max_wait_for_infil = var_3;
    var_10.spawn_points = var_4;
    var_10.exit_points = var_5;
    var_10.path_start_points = var_6;
    var_10.vehicle_spawn_func = var_8;
    var_10.count = 0;
    var_10.max_ai = var_7;
    var_10.vehicle_build = var_9;
    var_10.farah_disable_ai_color_before_hallway_takedown = var_0;
    level.ai_spawn_vehicle_func[var_0] = var_10;

    if ( isdefined( var_6 ) )
        level thread get_path_points( var_0, var_6 );
}

get_path_points( var_0, var_1 )
{
    level endon( "game_ended" );
    scripts\engine\utility::flag_wait( "strike_init_done" );
    scripts\engine\utility::flag_wait( "introscreen_over" );
    scripts\engine\utility::flag_wait( "infil_complete" );
    scripts\engine\utility::flag_wait( "interactions_initialized" );
    level.path_points[var_0] = scripts\engine\utility::getstructarray( var_1, "targetname" );
}

register_vehicle_spawn_drivers( var_0, var_1, var_2, var_3 )
{
    if ( istrue( var_3 ) )
        level waittill( var_0 );

    if ( isdefined( level.ai_spawn_vehicle_func[var_0] ) )
    {
        var_4 = level.ai_spawn_vehicle_func[var_0];
        var_4.num_script_models = var_1;
        var_4.driver_models = var_2;
        level.ai_spawn_vehicle_func[var_0] = var_4;
    }
}

choose_random_ground_vehicle_spawn( var_0, var_1, var_2 )
{
    if ( isdefined( var_1.ai_infil_type ) )
        var_3 = var_1.ai_infil_type;
    else
        var_3 = get_random_available_ground_ai_infil();

    if ( isdefined( var_3 ) )
    {
        var_1.og_script_function = var_1.script_function;
        var_1.script_function = var_3;

        if ( !isdefined( var_1.vehicle ) && isdefined( level.ai_spawn_vehicle_func[var_3].vehicle_spawn_func ) )
        {
            if ( [[ level.ai_spawn_vehicle_func[var_3].vehicle_spawn_func ]]( var_0, var_1, var_3 ) )
                return 1;
            else
                return 0;
        }
        else if ( isdefined( var_1.vehicle ) )
            return 1;
        else
            return 0;

        self thread [[ level.spawner_script_funcs[var_3].script_function ]]( var_0, var_1, var_3 );
        thread attempt_ai_ground_infil_cooldown( var_3 );
    }
    else
        return 0;
}

decrement_wave_veh_count( var_0 )
{
    if ( isdefined( self.valid_vehicles ) && isdefined( self.valid_vehicles[var_0] ) )
    {
        self.valid_vehicles[var_0]--;

        if ( self.valid_vehicles[var_0] < 1 )
            self.valid_vehicles[var_0] = undefined;
    }
}

choose_escalation_air_vehicle_spawn( var_0, var_1, var_2 )
{
    var_3 = undefined;
    var_4 = var_0 scripts\cp\cp_modular_spawning::get_current_wave_ref();

    if ( isdefined( var_4 ) )
    {
        var_5 = var_0 scripts\cp\cp_modular_spawning::last_heli();

        if ( istrue( var_0.use_only_veh_spawners ) && ( !isdefined( var_5 ) || var_5.size < 1 ) )
            return 0;

        var_5 = var_1 scripts\cp\cp_modular_spawning::last_grenade_fire_time( var_5 );

        if ( isdefined( var_5 ) && var_5.size > 0 )
        {
            var_3 = scripts\engine\utility::random( var_5 );

            if ( scripts\cp\cp_modular_spawning::has_vehicle_type_exceeded_module_cap( var_0, var_3 ) )
                return 0;
        }
    }
    else if ( isdefined( var_0.valid_vehicles ) && scripts\engine\utility::array_sum( var_0.valid_vehicles ) > 0 )
    {
        var_5 = var_0 scripts\cp\cp_modular_spawning::last_heli();
        var_5 = var_1 scripts\cp\cp_modular_spawning::last_grenade_fire_time( var_5 );

        if ( isdefined( var_5 ) && var_5.size > 0 )
        {
            var_3 = scripts\engine\utility::random( var_5 );

            if ( scripts\cp\cp_modular_spawning::has_vehicle_type_exceeded_module_cap( var_0, var_3 ) )
                return 0;
        }
    }
    else
        var_3 = get_random_available_air_ai_infil();

    if ( isdefined( var_3 ) )
    {
        if ( scripts\cp\cp_modular_spawning::has_vehicle_type_exceeded_module_cap( var_0, var_3 ) )
            return 0;

        var_1.og_script_function = var_1.script_function;
        var_1.script_function = var_3;

        if ( !isdefined( var_1.vehicle ) && isdefined( level.ai_spawn_vehicle_func[var_3].vehicle_spawn_func ) )
        {
            if ( [[ level.ai_spawn_vehicle_func[var_3].vehicle_spawn_func ]]( var_0, var_1, var_3 ) )
                return 1;
            else
                return 0;
        }
        else if ( isdefined( var_1.vehicle ) )
            return 1;
        else
            return 0;

        self thread [[ level.spawner_script_funcs[var_3].script_function ]]( var_0, var_1, var_3 );
    }
    else
        return 0;
}

choose_random_air_vehicle_spawn( var_0, var_1, var_2 )
{
    if ( isdefined( var_1.ai_infil_type ) )
        var_3 = var_1.ai_infil_type;
    else
        var_3 = get_random_available_air_ai_infil();

    if ( isdefined( var_3 ) )
    {
        var_1.og_script_function = var_1.script_function;
        var_1.script_function = var_3;

        if ( !isdefined( var_1.vehicle ) && isdefined( level.ai_spawn_vehicle_func[var_3].vehicle_spawn_func ) )
        {
            if ( [[ level.ai_spawn_vehicle_func[var_3].vehicle_spawn_func ]]( var_0, var_1, var_3 ) )
                return 1;
            else
                return 0;
        }
        else if ( isdefined( var_1.vehicle ) )
            return 1;
        else
            return 0;

        self thread [[ level.spawner_script_funcs[var_3].script_function ]]( var_0, var_1, var_3 );
        thread attempt_ai_air_infil_cooldown( var_3 );
    }
    else
        return 0;
}

ai_ground_veh_spawn( var_0, var_1, var_2 )
{
    if ( isdefined( var_1.vehicle ) )
    {
        self.vehicle = var_1.vehicle;
        self.vehicle thread scripts\engine\utility::thread_on_notify( "unloaded", ::clear_kill_off_flags, self, undefined, self, self, "death" );
        thread delay_enter_vehicle( var_0, var_1, var_1.vehicle, var_2 );
        var_1.vehicle thread allow_infil_after_full_or_timeout( var_0, var_2 );
    }
}

should_kill_off_flags()
{
    if ( isdefined( level.script ) && ( level.script == "cp_chase" || level.script == "cp_blockade" || level.script == "cp_raid_phase1" || level.script == "cp_donetsk" ) )
        return 0;

    return 1;
}

stop_vehicle_on_damage_after_loaded()
{
    self endon( "unload" );
    self endon( "death" );
    self.vehicle endon( "death" );
    self.vehicle endon( "stop_vehicle_on_damage_internal" );
    self waittill( "loaded" );
}

stop_vehicle_on_damage()
{
    self.vehicle endon( "death" );
    self.vehicle endon( "stop_vehicle_on_damage_internal" );
    self endon( "unload" );
    self.vehicle endon( "unloaded" );
    var_0 = self.vehicle;
    var_1 = scripts\engine\utility::_id_12E47( "damage", "death" );
    thread stop_vehicle_on_damage_internal( var_0 );
}

stop_vehicle_on_damage_internal( var_0 )
{
    var_0 notify( "stop_vehicle_on_damage_internal" );
    var_0 endon( "death" );
    var_0 scripts\common\utility::vehicle_detachfrompath();
    var_0 scripts\common\vehicle::vehicle_unload( "default" );
    var_0 waittill( "unloaded" );
    var_0 thread scripts\common\utility::vehicle_resumepath();
}

ai_mindia8_jugg_spawn( var_0, var_1, var_2 )
{
    if ( !isdefined( var_1.vehicle ) )
    {
        if ( isdefined( level.ai_spawn_vehicle_func[var_2].vehicle_spawn_func ) )
        {
            if ( [[ level.ai_spawn_vehicle_func[var_2].vehicle_spawn_func ]]( var_0, var_1, var_2 ) )
            {
                if ( isdefined( self.unittype ) && self.unittype == "juggernaut" )
                {
                    self.forced_startingposition = 14;
                    self.dontkilloff = 1;
                }

                thread ai_enter_vehicle( var_0, var_1, var_2 );

                if ( !isdefined( self.forced_startingposition ) )
                {
                    if ( var_1.vehicle.riders.size >= level.vehicle_builds[var_2].max_ai - 1 )
                        var_1.vehicle notify( "spawning_done" );
                }
            }
        }
    }
    else
    {
        if ( isdefined( self.unittype ) && self.unittype == "juggernaut" )
        {
            self.forced_startingposition = 14;
            self.dontkilloff = 1;
        }

        thread ai_enter_vehicle( var_0, var_1, var_2 );

        if ( var_1.vehicle.riders.size >= level.vehicle_builds[var_2].max_ai - 1 )
            var_1.vehicle notify( "spawning_done" );
    }
}

ai_lbravo_spawn( var_0, var_1, var_2 )
{
    if ( !isdefined( var_1.vehicle ) && isdefined( level.ai_spawn_vehicle_func[var_2].vehicle_spawn_func ) )
    {
        if ( [[ level.ai_spawn_vehicle_func[var_2].vehicle_spawn_func ]]( var_0, var_1, var_2 ) )
            thread ai_enter_vehicle( var_0, var_1, var_2 );
    }
    else
        thread ai_enter_vehicle( var_0, var_1, var_2 );
}

ai_enter_vehicle( var_0, var_1, var_2 )
{
    if ( isdefined( var_1.vehicle ) )
    {
        thread end_health( var_1.vehicle );
        thread delay_enter_vehicle( var_0, var_1, var_1.vehicle, var_2 );
        var_1.vehicle thread allow_infil_after_full_or_timeout( var_0, var_2 );

        if ( isdefined( var_1.script_demeanor ) )
            scripts\cp\cp_modular_spawning::set_demeanor_from_unittype( var_1.script_demeanor );
    }
}

end_health( var_0 )
{
    self endon( "death" );
    end_intro_obj( var_0 );
    thread clear_kill_off_flags( self );
}

end_intro_obj( var_0 )
{
    self endon( "unload" );
    self endon( "death" );
    var_0 endon( "death" );
    self waittill( "forever" );
}

delay_enter_vehicle( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( self.spawnpoint.pos_override_struct ) && self.spawnpoint.pos_override_struct != var_2 )
        var_2 thread add_to_vehicle_queue( self );
    else
    {
        scripts\engine\utility::thread_on_notify( "loaded", ::disable_canshootinvehicle );
        self hide();

        if ( isdefined( var_1.script_demeanor ) )
            scripts\cp\cp_modular_spawning::set_demeanor_from_unittype( var_1.script_demeanor );

        var_4 = var_2 locked_proxylod( var_0, var_3 );

        if ( !isdefined( self.forced_startingposition ) && isdefined( var_4 ) && int( var_4 ) >= 0 )
            self.forced_startingposition = var_4;

        self dontinterpolate();
        var_2 thread scripts\common\vehicle_aianim::guy_enter( self );
    }
}

disable_canshootinvehicle()
{
    self show();

    if ( istrue( level.vehicle_ai_can_shoot_after_reload ) )
        return;

    self.canshootinvehicle = 0;
}

add_to_vehicle_queue( var_0 )
{
    self notify( "add_to_vehicle_queue" );
    self.load_queue[self.load_queue.size] = var_0;
    var_0 scripts\engine\utility::thread_on_notify_no_endon_death( "death", ::remove_from_vehicle_queue, self );
}

remove_from_vehicle_queue( var_0 )
{
    if ( isdefined( var_0 ) && isdefined( var_0.load_queue ) && var_0.load_queue.size > 0 )
    {
        if ( scripts\engine\utility::array_contains( var_0.load_queue, self ) )
            var_0.load_queue = scripts\engine\utility::array_remove( var_0.load_queue, self );
    }
}

veh_ground_veh_spawn( var_0, var_1, var_2 )
{
    var_3 = level.ai_spawn_vehicle_func[var_2];
    var_4 = var_3 get_vehicle_spawn_points( var_1 );

    if ( var_4.size > 0 )
    {
        foreach ( var_6 in var_4 )
        {
            if ( istrue( var_6.in_use ) )
                continue;

            var_7 = create_ai_plr_vehicle( var_6, var_2 );

            if ( isdefined( var_7 ) )
            {
                var_7 player_equipment_init( var_1, var_0, var_6, var_2 );
                var_7 thread veh_ping_vehicle_location_to_players();
                var_7 thread waittill_full_or_timeout( var_2, var_0 );
                var_7 post_spawn_vehicle_init( var_0, var_1, var_2, var_6 );
                var_7 thread player_helis( var_0, var_2 );

                if ( _id_12C92( var_2 ) || getdvarint( "scr_script_model_drivers", 0 ) )
                    var_7 thread _id_1224C( var_7, var_2 );

                clear_vehicle_build_to_spawnpoint( var_6 );
                return 1;
            }
            else
            {
                clear_vehicle_build_to_spawnpoint( var_6 );
                return 0;
            }
        }

        return 0;
    }
    else
        return 0;
}

veh_ping_vehicle_location_to_players()
{
    self endon( "death" );
    self endon( "unloading" );

    for (;;)
    {
        pinglocationenemyteams( self.origin, "axis" );
        wait 2;
    }
}

post_spawn_vehicle_init( var_0, var_1, var_2, var_3 )
{
    level.ai_spawn_vehicle_func[var_2].count++;
    self.load_queue = [];
    self.group = var_0;
    self.vehicle_skipdeathmodel = 1;
    self.veh_spawn_point = var_3;
    var_1.ai_infil_type = var_2;
    var_3.in_use = 1;
    var_1.specs = level.spawner_script_funcs[var_2].specs;
    var_1.vehicle = self;
    self.spawn_point = var_1;
}

set_throttle_zero()
{

}

reset_throttle()
{

}

_id_1224C( var_0, var_1 )
{
    var_2 = level.ai_spawn_vehicle_func[var_1];

    if ( isdefined( var_2 ) && isdefined( var_2.num_script_models ) )
    {
        var_3 = [];

        for ( var_4 = 0; var_4 < var_2.num_script_models; var_4++ )
        {
            var_5 = level.vehicle.templates.aianims[var_0.classname_mp][var_4];
            var_6 = var_5.sittag;
            var_7 = var_0 scripts\cp\vehicles\vehicle_cp::spawn_script_model_at_pos( var_4, var_6, var_5.idle_anim, var_5.idle, var_2.driver_models );
            var_3[var_3.size] = var_7;
            level._id_12BE4[level._id_12BE4.size] = var_7;
            var_0 thread embassy_level_init( var_3 );

            if ( var_4 <= 1 && scripts\cp\utility::preventleave() )
                var_0 thread _id_11CCF( var_7 );
        }
    }

    if ( isdefined( level.vehicle_builds[var_1] ) && isdefined( level.vehicle_builds[var_1].max_ai ) )
        var_8 = int( min( level.vehicle_builds[var_1].max_ai, var_0.usedpositions.size ) );
    else
        var_8 = var_0.usedpositions.size;

    if ( var_0.attachedguys.size >= var_8 )
    {
        var_0 notify( "spawning_done" );
        return;
    }
}

_id_11CCF( var_0 )
{
    self endon( "death" );
    var_0 endon( "death" );

    if ( !isdefined( self ) || !isdefined( var_0 ) )
        return;

    var_1 = 250;

    for (;;)
    {
        self waittill( "damage", var_2, var_3, var_4, var_5 );

        if ( isdefined( var_3 ) && isplayer( var_3 ) && isdefined( var_2 ) && var_2 > 0 && isdefined( var_5 ) )
        {
            if ( var_0 tagexists( "j_head" ) )
                var_6 = var_0 gettagorigin( "j_head" );
            else
                var_6 = var_0.origin + ( 0, 0, 50 );

            var_6 = var_6 + ( 0, 0, -20 );
            var_7 = var_3 geteye();
            var_8 = vectornormalize( var_5 - var_7 );
            var_9 = vectornormalize( var_6 - var_7 );
            var_10 = vectordot( var_8, var_9 );
            var_11 = vectordot( vectornormalize( anglestoforward( self.angles ) ), vectornormalize( var_5 - self.origin ) );
            var_12 = var_0.origin + ( 0, 0, 18 );

            if ( var_10 > 0.99975 && var_11 > 0.73 && var_5[2] > var_12[2] )
            {
                var_1 = var_1 - var_2;

                if ( var_1 <= 0 )
                {
                    var_3 scripts\cp\cp_achievement::molotovrecentlyused();
                    self notify( "death", var_3 );
                }
            }
        }
    }
}

_id_126CD( var_0 )
{
    self endon( "death" );

    for (;;)
    {
        var_1 = getdvarint( "scr_x", 0 );
        var_2 = getdvarint( "scr_y", 0 );
        var_3 = getdvarint( "scr_z", 0 );
        var_4 = scripts\cp\utility::get_point_in_local_ent_space( var_0, ( var_1, var_2, var_3 ) );
        thread scripts\engine\utility::draw_line_for_time( var_4, var_4 + ( 0, 0, 128 ), 1, 1, 1, 0.05 );
        waitframe();
    }
}

embassy_level_init( var_0 )
{
    self waittill( "death" );

    if ( isdefined( var_0 ) )
    {
        for ( var_1 = 0; var_1 < var_0.size; var_1++ )
            var_0[var_1] _id_119EC();
    }
}

_id_119EC()
{
    if ( scripts\engine\utility::array_contains( level._id_12BE4, self ) )
    {
        level._id_12BE4 = scripts\engine\utility::array_remove( level._id_12BE4, self );

        if ( isdefined( self ) )
            self delete();
    }
}

get_vehicle_spawn_points( var_0 )
{
    if ( istrue( var_0.veh_model_spawner ) )
        return [ var_0 ];
    else
    {
        var_1 = scripts\engine\utility::getstructarray( self.spawn_points, "targetname" );
        var_2 = [];

        if ( isdefined( var_0.script_linkname ) )
        {
            for ( var_3 = 0; var_3 < var_1.size; var_3++ )
            {
                if ( is_linked_struct( var_1[var_3], var_0 ) )
                    var_2[var_2.size] = var_1[var_3];
            }

            if ( var_2.size < 1 )
            {
                return scripts\engine\utility::array_randomize( var_1 );
                return;
            }

            var_4 = scripts\engine\utility::random( var_2 );
            return [ var_4 ];
            return;
        }
        else
            return scripts\engine\utility::array_randomize( var_1 );
    }
}

veh_heli_spawn( var_0, var_1, var_2 )
{
    var_3 = level.ai_spawn_vehicle_func[var_2];
    var_4 = var_3 get_vehicle_spawn_points( var_1 );

    if ( var_4.size > 0 )
    {
        foreach ( var_6 in var_4 )
        {
            if ( istrue( var_6.in_use ) )
                continue;

            if ( getdvarint( "scr_direct_heli_path_debug", 0 ) )
                thread scripts\engine\utility::draw_capsule( var_6.origin, 64, 64, ( 0, 0, 0 ), ( 0, 1, 0 ), 0, 1000 );

            copy_vehicle_build_to_spawnpoint( var_2, var_6 );
            var_7 = vectortoangles( var_1.origin - var_6.origin );
            var_6.angles = ( 0, var_7[1], 0 );
            var_8 = scripts\common\vehicle::vehicle_spawn( var_6 );

            if ( isdefined( var_8 ) )
            {
                var_8 player_equipment_init( var_1, var_0, var_6, var_2 );
                var_6 _id_1275A( 1 );

                if ( var_6 scripts\common\vehicle_code::ishelicopter_internal() )
                    var_8 init_helicopter( var_0, var_2 );
                else
                {

                }

                var_0.vehicle = var_8;
                var_8.veh_spawn_point = var_6;
                var_8.path_gobbler = 1;
                var_1.specs = level.spawner_script_funcs[var_2].specs;
                var_1.ai_infil_type = var_2;
                var_8 thread veh_ping_vehicle_location_to_players();
                var_8 thread heli_waittill_full_or_timeout( var_2, var_0 );

                if ( _id_12C92( var_2 ) || getdvarint( "scr_script_model_drivers", 0 ) || scripts\cp\utility::preventleave() )
                    var_8 thread _id_1224C( var_8, var_2 );

                clear_vehicle_build_to_spawnpoint( var_6 );
                return 1;
            }
            else
            {
                clear_vehicle_build_to_spawnpoint( var_6 );
                return 0;
            }
        }

        return 0;
    }
    else
        return 0;
}

player_equipment_init( var_0, var_1, var_2, var_3 )
{
    self.load_queue = [];
    self.spawn_point = var_0;
    self.play_train_sequence = var_3;
    self.group = var_1;
    var_1.vehicle = self;
    var_0.vehicle = self;
    var_0.veh_spawn_point = var_2;
    self.veh_spawn_point = var_2;
    self.dontdisconnectpaths = 1;
    var_1.woods_two_death_func = 1;
    self setcandamage( 1 );
    scripts\cp_mp\emp_debuff::set_start_emp_callback( scripts\cp_mp\vehicles\vehicle::vehicle_empstartcallback );
    scripts\cp_mp\emp_debuff::set_clear_emp_callback( scripts\cp_mp\vehicles\vehicle::vehicle_empclearcallback );
    thread getitemdropinfo();
    var_1 thread decrement_wave_veh_count( var_3 );
    self vehicle_turnengineon();
}

getitemdropinfo()
{
    self endon( "death" );
    var_0 = _id_12EDD();

    if ( isdefined( var_0 ) && isai( var_0 ) )
    {
        var_0.health = 500;
        var_0.maxhealth = 500;

        if ( scripts\common\vehicle_code::ishelicopter_internal() )
            thread getjeepspawns( var_0 );
        else
            thread _id_124F2( var_0 );
    }
}

getjeepspawns( var_0 )
{
    level endon( "game_ended" );
    self endon( "death_finished" );
    self endon( "death" );
    var_0 endon( "unload" );
    var_0 waittill( "death", var_1, var_2, var_3, var_4 );

    if ( isdefined( var_1 ) && isplayer( var_1 ) )
        var_1 scripts\cp\cp_achievement::molotovrecentlyused();

    self notify( "death", var_1 );
}

_id_124F2( var_0 )
{
    level endon( "game_ended" );
    self endon( "death" );
    var_0 endon( "unload" );
    var_0 waittill( "death", var_1, var_2, var_3, var_4 );
    self notify( "watch_for_all_passengers_dead" );
    self stoppath( 1 );
    self notify( "stop_follow_path" );
    scripts\common\vehicle::vehicle_unload();
}

_id_12EDD()
{
    level endon( "game_ended" );
    self endon( "death" );
    self endon( "unloading" );

    for (;;)
    {
        self waittill( "guy_entered", var_0, var_1 );

        if ( isdefined( var_0 ) )
        {
            if ( scripts\engine\utility::is_equal( self.driver, var_0 ) )
                return var_0;
        }
    }

    return undefined;
}

_id_1275A( var_0 )
{
    if ( istrue( var_0 ) )
        self.in_use = var_0;
    else
        self.in_use = undefined;
}

clear_vehicle_build_to_spawnpoint( var_0 )
{
    var_0.classname_mp = undefined;
    var_0.vehicletype = undefined;
    var_0.vehiclename = undefined;
}

copy_vehicle_build_to_spawnpoint( var_0, var_1 )
{
    if ( isdefined( level.vehicle_builds ) && isdefined( level.vehicle_builds[var_0] ) )
    {
        var_2 = level.vehicle_builds[var_0];

        if ( isdefined( var_2.classname_mp ) )
            var_1.classname_mp = var_2.classname_mp;

        if ( isdefined( var_2.vehicletype ) )
            var_1.vehicletype = var_2.vehicletype;

        if ( isdefined( var_2.vehiclename ) )
            var_1.vehiclename = var_2.vehiclename;
    }
}

waittill_full_or_timeout( var_0, var_1 )
{
    self notify( "waittill_full_or_timeout" );
    self endon( "waittill_full_or_timeout" );
    self endon( "death" );
    level endon( "game_ended" );
    thread decrement_vehicles_active( var_0, var_1 );
    thread watch_for_all_passengers_dead( var_0, var_1 );

    if ( self vehicle_isphysveh() )
    {
        if ( getdvarint( "scr_struct_spline_path", 0 ) )
            self vehicle_cleardrivingstate();

        self.veh_brake = 1;
    }

    self waittill( "spawning_done" );
    self.spawn_point scripts\cp\cp_modular_spawning::getterminalhint();
    scripts\engine\utility::thread_on_notify_no_endon_death( "unloading", ::check_for_unloading_func, var_0, undefined, undefined );

    if ( !isdefined( self.group._id_1256E ) )
        self.group._id_1256E = 1;
    else
        self.group._id_1256E++;

    self.group.vehicle = undefined;
    self.spawn_point.pos_override_struct = undefined;

    if ( self.load_queue.size > 0 )
    {
        thread scripts\common\vehicle::vehicle_load_ai( self.load_queue );
        scripts\engine\utility::ent_flag_wait( "loaded" );
    }
    else
        wait 1;

    var_2 = create_vehicle_path( var_0 );

    if ( self vehicle_isphysveh() )
        self.veh_brake = 0;

    self notify( "ai_vehicle_pathing_started" );

    if ( !self vehicle_isphysveh() )
    {
        if ( isdefined( self.target ) )
        {
            var_3 = getvehiclenode( self.target, "targetname" );
            self attachpath( var_3 );
            self startpath();
        }
        else
            self notify( "stop_vehicle_watchers" );
    }
    else
    {
        self notify( "newpath" );

        if ( isdefined( self.target ) )
        {
            var_3 = getvehiclenode( self.target, "targetname" );

            if ( isdefined( var_3 ) )
            {
                self attachpath( var_3 );
                self startpath();
                return;
            }
        }

        if ( getdvarint( "scr_struct_spline_path", 0 ) && self.pathing_array.size >= 1 )
        {
            self.spawn_point.vehicle = undefined;
            vehiclefollowstructpath( self.pathing_array[0], 1 );
            wait 5;
        }
        else
        {
            self.spawn_point.vehicle = undefined;
            thread scripts\common\vehicle_paths::getonpath();
        }
    }
}

get_duration_between_points( var_0, var_1, var_2, var_3 )
{
    var_4 = distance( var_0, var_1 );

    if ( istrue( var_3 ) )
        var_4 = var_4 * 0.0568182;

    var_5 = var_4 / var_2;

    if ( var_5 < 0.05 )
        var_5 = 0.05;

    return var_5;
}

start_vehicle_path( var_0 )
{
    if ( !self vehicle_isphysveh() && !isstruct( var_0 ) )
    {
        var_0 = getvehiclenode( self.target, "targetname" );
        self attachpath( var_0 );
        self startpath();
    }
    else
    {
        self notify( "newpath" );

        if ( getdvarint( "scr_struct_spline_path", 0 ) && self.pathing_array.size >= 1 )
            thread vehiclefollowstructpath( self.pathing_array[0] );
        else
            thread scripts\common\vehicle_paths::getonpath();
    }
}

watch_for_vehicle_stuck()
{
    self endon( "death" );
    self endon( "stop_vehicle_watchers" );
    self waittill( "ai_vehicle_pathing_started" );
    self endon( "unloading" );
    var_0 = 0;
    var_1 = 2;

    if ( isdefined( self._id_12A4A ) )
        var_1 = self._id_12A4A;

    for (;;)
    {
        if ( self issuspendedvehicle() || self vehicle_getspeed() <= 2 )
            var_0 = var_0 + 0.1;
        else
            var_0 = 0;

        if ( var_0 >= var_1 )
            break;

        wait 0.1;
    }

    self vehicle_setspeedimmediate( 0, 30, 30 );
    thread scripts\common\vehicle_code::_vehicle_unload( "default" );
}

heli_waittill_full_or_timeout( var_0, var_1 )
{
    self notify( "waittill_full_or_timeout" );
    self endon( "waittill_full_or_timeout" );
    self endon( "death" );
    level endon( "game_ended" );
    thread decrement_vehicles_active( var_0, var_1 );
    thread onpickupitem( var_0 );
    self waittill( "spawning_done" );
    self.spawn_point scripts\cp\cp_modular_spawning::getterminalhint();
    self.group.vehicle = undefined;
    scripts\engine\utility::thread_on_notify_no_endon_death( "unloading", ::check_for_unloading_func, var_0, undefined, undefined );
    scripts\engine\utility::thread_on_notify_no_endon_death( "unloaded", ::delete_nav_obstacle, undefined, undefined, undefined );

    if ( isdefined( self.spawn_point.heli_path_func ) )
        var_2 = self [[ self.spawn_point.heli_path_func ]]( var_0 );
    else
        var_2 = create_direct_heli_path( var_0 );

    self.spawn_point.vehicle = undefined;
}

check_for_unloading_func( var_0 )
{
    if ( isdefined( level.unloading_func[var_0] ) )
        self thread [[ level.unloading_func[var_0] ]]();
}

watch_for_all_passengers_dead( var_0, var_1 )
{
    self notify( "watch_for_all_passengers_dead" );
    self endon( "watch_for_all_passengers_dead" );
    self endon( "death" );
    self endon( "unloading" );
    self waittill( "guy_entered" );
    self waittill( "spawning_done" );

    for (;;)
    {
        var_2 = logchangeweapon( 1 );

        if ( var_2 <= 0 )
        {
            delete_nav_obstacle();
            self notify( "all_passengers_dead" );
            self notify( "newpath" );
            self vehicle_setspeedimmediate( 0, 30, 30 );
            thread extractquest_helipadid( var_1 );
            break;
        }

        wait 0.2;
    }
}

extractquest_helipadid( var_0, var_1 )
{
    var_2 = self.riders;

    if ( isdefined( var_1 ) )
        var_2 = var_1;

    for ( var_3 = 0; var_3 < var_2.size; var_3++ )
    {
        var_4 = var_2[var_3];

        if ( !isent( var_4 ) || isagent( var_4 ) )
            continue;

        var_5 = spawnstruct();
        var_5.origin = var_4.origin;
        var_5.angles = var_4.angles;
        var_5.vehicle_position = var_4.vehicle_position;
        var_5.specs = var_4.specs;

        if ( isdefined( self.convoy ) )
            level getglobalbattlepassxpmultiplier( self );

        var_4 _id_119EC();
        var_6 = var_5.vehicle_position;
        var_5.vehicle_position = undefined;
        var_5.specs = "vehicle_ai";
        var_7 = scripts\cp\cp_modular_spawning::spawn_soldier_scripted_internal( var_0, var_5, 0, "vehicle_ai", undefined, 1 );

        if ( isdefined( var_7 ) )
        {
            var_7.forced_startingposition = var_6;

            if ( istrue( self._id_124C4 ) )
            {
                var_7.ignoreall = 0;
                var_7.sightmaxdistance = 2200;
                var_7 thread scripts\cp\coop_stealth::run_common_functions( var_7, 1, 1, 60, 160000 );
            }

            thread scripts\common\vehicle_aianim::guy_enter( var_7 );
        }

        if ( isent( var_4 ) )
            var_4 delete();
    }

    scripts\common\vehicle::vehicle_unload();
}

getglobalbattlepassxpmultiplier( var_0 )
{
    level endon( "game_ended" );

    if ( !isdefined( var_0.convoy ) )
        return;

    var_0.convoy endon( "event_convoy_delete" );
    var_0.convoy endon( "death" );
    var_0 endon( "death" );
    var_1 = var_0.convoy;

    if ( istrue( var_1.get_track_end_struct ) )
    {
        var_0 thread getgulagclosedcircleindex();

        while ( istrue( var_1.get_track_end_struct ) )
            wait 0.5;

        return;
    }

    var_2 = 28;

    if ( getaiarray( "axis" ).size > var_2 )
    {
        var_1.get_track_end_struct = 1;
        scripts\cp\cp_modular_spawning::pause_group_by_group_name( "wave_spawning" );

        while ( getaiarray( "axis" ).size > var_2 )
            wait 0.5;

        var_1.get_track_end_struct = undefined;
        var_1 notify( "delayed_depositing_undefined" );
        scripts\cp\cp_modular_spawning::unpause_group_by_group_name( "wave_spawning" );
    }
}

getgulagclosedcircleindex()
{
    level endon( "game_ended" );
    self.convoy endon( "delayed_depositing_undefined" );
    self waittill( "death" );

    if ( isdefined( self.convoy ) )
        self.convoy.get_track_end_struct = undefined;
}

onpickupitem( var_0 )
{
    self notify( "heli_watch_for_fly_away" );
    self endon( "heli_watch_for_fly_away" );
    self endon( "death" );
    self waittill( "guy_entered" );
    self waittill( "spawning_done" );
    thread _id_12E3E( var_0 );
    thread _id_12E82( var_0 );
}

_id_12E82( var_0 )
{
    self notify( "waittill_unload_complete" );
    self endon( "waittill_unload_complete" );
    self endon( "death" );
    self endon( "all_valid_passengers_are_gone" );
    self waittill( "unloaded" );

    if ( isdefined( self.spawn_point ) && isdefined( self.spawn_point.rotationrefsbyseatandweapon ) )
    {
        if ( isdefined( level.onenterbattlechatter ) )
            [[ level.onenterbattlechatter ]]( self );

        return;
    }

    self notify( "newpath" );
    delete_nav_obstacle();
    thread loadoutdefaultcost( var_0 );
    self notify( "all_valid_passengers_are_gone" );
}

_id_12E3E( var_0 )
{
    self notify( "waittill_all_valid_ai_are_gone" );
    self endon( "waittill_all_valid_ai_are_gone" );
    self endon( "death" );
    self endon( "unloaded" );

    for (;;)
    {
        var_1 = logchangeweapon();
        var_2 = logchangeweapon( 1 );
        var_3 = logcodcasterdamage( 1 );

        if ( var_2 <= 0 || var_3 <= 0 )
        {
            if ( isdefined( self.spawn_point ) && isdefined( self.spawn_point.rotationrefsbyseatandweapon ) )
            {
                if ( isdefined( level.onenterbattlechatter ) )
                    [[ level.onenterbattlechatter ]]( self );

                return;
            }

            thread loadoutdefaultcost( var_0 );
            self notify( "newpath" );
            delete_nav_obstacle();
            self notify( "all_valid_passengers_are_gone" );
            break;
        }

        wait 0.2;
    }
}

loadoutdefaultcost( var_0 )
{
    self endon( "death" );
    thread set_relic_steelballs_perks();
    var_1 = getgroundposition( self.origin, 1 );

    if ( distancesquared( self.origin, var_1 ) <= 2250000 )
    {
        var_2 = spawnstruct();
        var_2.origin = var_1 + ( 0, 0, 1500 );
        var_2.angles = self.angles;
        var_2.script_goalyaw = 1;
        thread scripts\common\vehicle_paths::vehicle_paths_helicopter( var_2 );
        self setneargoalnotifydist( 512 );
        scripts\engine\utility::_id_12E3F( "near_goal", "goal" );
    }

    var_3 = get_best_end_point( var_0, self.spawn_point, self.angles );

    if ( !isdefined( var_3 ) )
        var_3 = scripts\engine\utility::random( scripts\engine\utility::getstructarray( level.ai_spawn_vehicle_func[var_0].exit_points, "targetname" ) );

    var_4 = duplicate_struct( var_3 );
    var_5 = anglestoforward( vectortoangles( var_4.origin - self.origin ) ) * 10000;
    var_4.origin = var_4.origin + ( var_5[0], var_5[1], var_4.origin[2] );
    var_4.targetname = create_unique_kvp_string();
    self.end_point = var_4;
    var_6 = var_4;

    if ( getdvarint( "scr_direct_heli_path_debug", 0 ) )
        thread scripts\engine\utility::draw_capsule( var_4.origin, 32, 32, ( 0, 0, 0 ), ( 1, 0, 0 ), 0, 250 );

    thread scripts\common\vehicle_paths::vehicle_paths_helicopter( var_4 );
}

set_relic_steelballs_perks()
{
    level endon( "game_ended" );
    self endon( "death" );
    wait 2;

    if ( isdefined( self.riders ) && self.riders.size > 0 )
    {
        for ( var_0 = 0; var_0 < self.riders.size; var_0++ )
            self.riders[var_0].spawn_weapon = 1;
    }
}

cant_get_out_num()
{
    var_0 = 0;

    if ( isdefined( level.vehicle.templates.aianims ) )
    {
        if ( isdefined( self.classname_mp ) && isdefined( level.vehicle.templates.aianims[self.classname_mp] ) )
        {
            for ( var_1 = 0; var_1 < self.riders.size; var_1++ )
            {
                var_2 = self.riders[var_1];

                if ( !isdefined( var_2.vehicle_position ) )
                    continue;

                var_3 = level.vehicle.templates.aianims[self.classname_mp][var_2.vehicle_position];

                if ( !isdefined( var_3.getout ) )
                    var_0++;
            }
        }
        else if ( isdefined( level.vehicle.templates.aianims[self.classname] ) )
        {
            for ( var_1 = 0; var_1 < self.riders.size; var_1++ )
            {
                var_2 = self.riders[var_1];
                var_3 = level.vehicle.templates.aianims[self.classname][var_2.vehicle_position];

                if ( !isdefined( var_3.getout ) )
                    var_0++;
            }
        }
    }

    return var_0;
}

logchangeweapon( var_0 )
{
    var_1 = 0;

    foreach ( var_3 in self.riders )
    {
        if ( istrue( var_0 ) )
        {
            if ( isalive( var_3 ) )
                var_1++;

            continue;
        }

        var_1++;
    }

    return var_1;
}

logcodcasterdamage( var_0, var_1 )
{
    var_2 = 0;

    if ( isdefined( self.classname_mp ) )
    {
        if ( isdefined( level.vehicle ) && isdefined( level.vehicle.templates ) && isdefined( level.vehicle.templates.aianims ) && isdefined( level.vehicle.templates.aianims[self.classname_mp] ) )
        {
            for ( var_3 = 0; var_3 < self.riders.size; var_3++ )
            {
                var_4 = self.riders[var_3];

                if ( !isalive( var_4 ) )
                    continue;

                if ( !isai( var_4 ) )
                    continue;

                if ( !isdefined( var_4.vehicle_position ) )
                    continue;

                if ( scripts\common\vehicle_aianim::check_unloadgroup( var_4.vehicle_position ) )
                {
                    var_5 = level.vehicle.templates.aianims[self.classname_mp][var_4.vehicle_position];

                    if ( isdefined( var_5.getout ) )
                        var_2++;
                }
            }
        }
    }

    return var_2;
}

unload_when_near_players()
{
    self endon( "unload" );
    self endon( "death" );

    for (;;)
    {
        wait 1;

        if ( scripts\engine\utility::get_array_of_closest( self.origin, level.players, undefined, 1, 512 ).size )
        {
            if ( isdefined( self.riders ) )
            {
                for ( var_0 = 0; var_0 < self.riders.size; var_0++ )
                {
                    var_1 = self.riders[var_0];
                    var_1 scripts\common\utility::demeanor_override( "combat" );
                }
            }

            break;
        }
    }
}

create_vehicle_path( var_0 )
{
    level notify( "create_vehicle_path" );
    var_1 = level.next_index;
    level.next_index++;

    if ( isdefined( self.spawn_point.veh_model_spawner ) )
    {
        self.allow_unload_on_path = 1;
        var_2 = create_path_to_delete_node( var_0, var_1 );
        var_3 = undefined;
        return var_2;
    }
    else
    {
        var_2 = duplicate_struct( self.veh_spawn_point );
        add_targetname_kvps( var_2, undefined, var_0 + var_1 + "_start" );
        self.currentnode = var_2;
        var_4 = create_simple_path( self.currentnode, self.angles, var_1, var_0, "_end_node_pathing_", ( 1, 1, 0 ) );

        if ( var_4 )
            return var_2;
    }

    var_3 = duplicate_struct( self.spawn_point );
    var_5 = undefined;

    if ( isdefined( var_3 ) && isdefined( self.veh_spawn_point ) && isdefined( self.veh_spawn_point.script_linkto ) )
    {
        var_6 = self.veh_spawn_point get_veh_linked_structs();
        var_7 = -5;

        foreach ( var_9 in var_6 )
        {
            var_10 = scripts\engine\math::get_dot( self.origin, self.angles, var_9.origin );
            var_11 = scripts\engine\math::get_dot( self.origin, vectortoangles( var_3.origin - self.origin ), var_9.origin );
            var_12 = var_10 + var_11;

            if ( var_12 > var_7 )
            {
                var_7 = var_12;
                var_5 = var_9;
            }
        }
    }

    if ( !isdefined( var_5 ) )
    {
        var_14 = scripts\engine\utility::getstructarray( level.ai_spawn_vehicle_func[var_0].path_start_points, "targetname" );

        if ( !isdefined( var_14 ) || var_14.size < 1 )
            var_14 = scripts\engine\utility::getstructarray( level.ai_spawn_vehicle_func[var_0].path_start_points, "script_linkName" );

        if ( !isdefined( var_14 ) || var_14.size < 1 )
            return;

        var_5 = scripts\engine\utility::getclosest( self.origin, var_14 );
    }

    if ( !isdefined( var_5 ) )
        return;

    var_15 = duplicate_struct( var_5 );
    var_15.angles = vectortoangles( var_15.origin - self.origin );

    if ( 0 )
    {
        level thread scripts\cp\utility::draw_line_until_endons( self.spawn_point.origin, 1, 1, 1, "create_vehicle_path" );
        level thread scripts\cp\utility::draw_line_until_endons( var_15.origin, 0, 1, 0, "create_vehicle_path" );
        level thread scripts\cp\utility::draw_line_until_endons( var_3.origin, 1, 1, 0, "create_vehicle_path" );
    }

    add_targetname_kvps( var_15, undefined, var_0 + var_1 + "_start" );
    create_path_from_struct_to_struct( var_15, var_3, var_1, var_0, "_unload_pathing_", ( 1, 1, 1 ) );
    scripts\engine\utility::thread_on_notify( "unloaded", ::create_path_to_delete_node, var_0, var_1, self );
    scripts\engine\utility::thread_on_notify_no_endon_death( "death", ::reset_spawn_point_targetname, self.spawn_point, undefined, self );
    self.disabled_nodes = undefined;
    return var_15;
}

create_path_to_delete_node( var_0, var_1 )
{
    var_2 = self.spawn_point;
    self.currentnode = var_2;
    var_3 = create_simple_path( self.currentnode, self.angles, var_1, var_0, "_end_node_pathing_", ( 1, 1, 0 ) );

    if ( !var_3 )
    {
        var_4 = get_best_end_point( var_0, self.currentnode );
        var_5 = duplicate_struct( var_4 );
        self.path_gobbler = 1;
        self.end_point = var_5;

        if ( 0 )
            level thread scripts\cp\utility::draw_line_until_endons( var_5.origin, 1, 0, 0, "create_vehicle_path" );

        create_path_from_struct_to_struct( self.currentnode, var_5, var_1, var_0, "_end_node_pathing_", ( 1, 1, 0 ) );
    }

    if ( scripts\engine\math::is_point_in_front( self.currentnode.origin ) || self.spawn_point.origin == self.currentnode.origin )
        self.target = self.pathing_array[1].targetname;
    else if ( !var_3 )
        self.target = self.pathing_array[1].targetname;
    else
        self.pathing_array = scripts\engine\utility::array_remove_index( self.pathing_array, 0 );

    self.disabled_nodes = undefined;
    return self.currentnode;
}

start_struct_path( var_0, var_1 )
{
    self notify( "start_struct_path" );
    self endon( "start_struct_path" );
    self endon( "death" );
    self startpathnodes( var_0, var_1, 0, 0.5, 0.5, 1 );
    var_2 = 1;
    var_3 = self.pathing_array[var_2];
    var_4 = self.pathing_array[var_2];
    var_5 = 62500;

    if ( !isdefined( var_3 ) )
        return;

    thread process_nextpoint_after_struct_wait( var_3, var_5 );

    for (;;)
    {
        self waittill( "trigger", var_6, var_7, var_8, var_9 );

        if ( isint( var_6 ) )
        {
            if ( var_2 < var_6 + 1 )
            {
                var_2 = var_6 + 1;
                var_3 = get_next_node_on_spline( var_2 );

                if ( isdefined( var_3 ) )
                {
                    var_4 = var_3;
                    thread process_nextpoint_after_struct_wait( var_3, var_5 );
                    continue;
                }

                break;
            }
        }
    }
}

_id_12CD9( var_0 )
{
    level endon( "game_ended" );
    self endon( "death" );
    self notify( "vehicle_process_node_when_at_goal" );
    self endon( "vehicle_process_node_when_at_goal" );
    var_1 = 12500;
    var_2 = 1;
    var_3 = self.pathing_array[var_2];
    var_4 = self.pathing_array[var_2];
    level._id_12CEF = self;

    if ( istrue( var_0 ) )
        thread process_nextpoint_after_struct_wait( var_3, var_1 );

    for (;;)
    {
        self waittill( "trigger", var_5, var_6, var_7, var_8 );

        if ( isint( var_5 ) )
        {
            if ( var_2 < var_5 + 1 )
            {
                if ( isdefined( self.path_gobbler ) )
                    scripts\engine\utility::deletestruct_ref( var_3 );

                var_2 = var_5 + 1;
                var_3 = get_next_node_on_spline( var_2 );

                if ( isdefined( var_3 ) )
                {
                    var_4 = var_3;
                    self notify( "new_next_point" );

                    if ( istrue( var_0 ) )
                        thread process_nextpoint_after_struct_wait( var_3, var_1 );

                    continue;
                }

                break;
            }
        }
    }
}

process_nextpoint_after_struct_wait( var_0, var_1 )
{
    self notify( "process_nextPoint_after_struct_wait" );
    self endon( "process_nextPoint_after_struct_wait" );
    self endon( "death" );

    while ( distancesquared( self.origin, var_0.origin ) > var_1 )
        wait 0.1;

    process_vehicle_struct_node( var_0 );
}

process_vehicle_struct_node( var_0 )
{
    self endon( "newpath" );
    self endon( "death" );
    var_1 = scripts\common\vehicle_paths::get_path_getfunc( var_0 );
    var_2 = undefined;
    self.currentnode = var_0;
    scripts\common\vehicle_paths::trigger_process_node( var_0 );

    if ( scripts\common\vehicle_paths::vehicle_should_unload( scripts\common\vehicle_paths::node_wait, var_0 ) )
    {
        self vehicle_setspeedimmediate( 0, 1, 1 );
        struct_path_unload_node( var_0 );
        wait 0.25;

        if ( !isdefined( self.riders ) || self.riders.size < 1 )
        {
            self notify( "vehicle_process_node_when_at_goal" );
            self notify( "stop_follow_path" );
            return;
        }

        self resumespeed( 20 );
    }
}

struct_path_unload_node( var_0 )
{
    self endon( "death" );

    if ( isdefined( self.ent_flag["prep_unload"] ) && scripts\engine\utility::ent_flag( "prep_unload" ) )
        return;

    if ( !isdefined( var_0.script_flag_wait ) && !isdefined( var_0.script_delay ) )
    {

    }

    var_1 = getnode( var_0.targetname, "target" );

    if ( isdefined( var_1 ) && self.riders.size )
    {
        foreach ( var_3 in self.riders )
        {
            if ( isai( var_3 ) )
                var_3 thread scripts\engine\utility::script_func( "go_to_node", var_1 );
        }
    }

    if ( scripts\common\vehicle_code::ishelicopter_internal() )
    {
        self sethoverparams( 0, 0, 0 );
        scripts\common\vehicle_code::waittill_stable( var_0 );
    }

    if ( isdefined( var_0.script_noteworthy ) )
    {
        if ( var_0.script_noteworthy == "wait_for_flag" )
            scripts\engine\utility::flag_wait( var_0.script_flag );
    }

    if ( isdefined( var_0.script_unload ) )
    {
        if ( var_0.script_unload == "1" )
            var_0.script_unload = "default";
    }

    scripts\common\vehicle_code::_vehicle_unload( var_0.script_unload );

    if ( scripts\common\vehicle_aianim::riders_unloadable( var_0.script_unload ) )
        self waittill( "unloaded" );

    if ( isdefined( var_0.script_flag_wait ) || isdefined( var_0.script_delay ) )
        return;
}

get_next_node_on_spline( var_0 )
{
    if ( !isdefined( var_0 ) )
        return undefined;
    else if ( !isdefined( self.pathing_array ) )
        return undefined;
    else if ( isdefined( self.pathing_array[var_0] ) )
        return self.pathing_array[var_0];
    else
        return undefined;
}

create_simple_path( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    level endon( "game_ended" );
    self endon( "death" );
    var_6 = 1;
    var_7 = var_0;
    var_8 = -0.3;
    self.pathing_array = [ var_0 ];

    if ( 0 )
    {
        level.players[0] notifyonplayercommand( "use", "+usereload" );
        level.players[0] notifyonplayercommand( "use", "+activate" );
    }

    if ( isdefined( var_7.script_linkto ) )
    {
        var_9 = duplicate_struct( var_7 );
        add_targetname_kvps( var_9, undefined, var_3 + var_2 + "_start" );
        self.currentnode = var_9;
        var_7 = self.currentnode;
    }

    for (;;)
    {
        if ( 0 )
            level.players[0] waittill( "use" );

        if ( isdefined( var_7.script_linkto ) )
        {
            var_10 = var_7 get_veh_linked_structs();
            var_11 = [];
            var_12 = -1;
            var_13 = undefined;

            if ( var_10.size == 1 )
                var_11[var_11.size] = var_10[0];
            else
            {
                for ( var_14 = 0; var_14 < var_10.size; var_14++ )
                {
                    var_15 = var_10[var_14];

                    if ( !isdefined( var_13 ) )
                        var_13 = var_15;

                    var_16 = scripts\engine\math::get_dot( var_7.origin, var_1, var_15.origin );

                    if ( var_16 >= var_8 )
                        var_11[var_11.size] = var_15;
                }
            }

            if ( var_11.size < 1 && isdefined( var_13 ) )
                var_11[var_11.size] = var_13;

            if ( var_11.size > 0 )
            {
                var_17 = scripts\engine\utility::random( var_11 );
                var_17 = duplicate_struct( var_17 );
                self.path_gobbler = 1;
                self.pathing_array[self.pathing_array.size] = var_17;
                add_targetname_kvps( var_17, var_7, var_3 + "_" + var_2 + "_simple_path_" + self.pathing_array.size );

                if ( 0 )
                    level thread scripts\cp\utility::draw_line_until_endons( var_7.origin, 1, 1, 1, "create_vehicle_path", var_17.origin );

                var_7 = var_17;
            }
            else
                break;
        }
        else if ( isdefined( var_7.target ) )
        {
            var_10 = var_7 scripts\engine\utility::get_target_array();
            var_11 = [];
            var_12 = -1;
            var_13 = undefined;

            for ( var_14 = 0; var_14 < var_10.size; var_14++ )
            {
                var_15 = var_10[var_14];
                var_16 = scripts\engine\math::get_dot( var_7.origin, var_1, var_15.origin );

                if ( var_16 >= var_8 )
                {
                    var_11[var_11.size] = var_15;
                    continue;
                }

                if ( var_16 >= var_12 )
                    var_13 = var_10[var_14];
            }

            if ( var_11.size < 1 && isdefined( var_13 ) )
                var_11[var_11.size] = var_13;

            if ( var_11.size > 0 )
            {
                var_17 = scripts\engine\utility::random( var_11 );

                if ( scripts\engine\utility::array_contains( self.pathing_array, var_17 ) )
                {
                    self.pathing_array[self.pathing_array.size] = var_17;
                    self.sec_sys_struct_1 = 1;
                    break;
                }

                self.pathing_array[self.pathing_array.size] = var_17;

                if ( 0 )
                    level thread scripts\cp\utility::draw_line_until_endons( var_7.origin, 1, 1, 1, "create_vehicle_path", var_17.origin );

                var_7 = var_17;
            }
            else
                break;
        }
        else
            break;
    }

    if ( self.pathing_array.size > 27 )
        split_large_pathing_array();

    if ( self.pathing_array.size < 1 )
        return 0;
    else
        return 1;
}

split_large_pathing_array()
{
    self.pathing_arrays = [];
    var_0 = [];
    var_1 = undefined;

    for ( var_2 = 0; var_2 < self.pathing_array.size; var_2++ )
    {
        var_0[var_0.size] = self.pathing_array[var_2];
        var_1 = self.pathing_array[var_2];

        if ( var_2 > 0 && var_2 % 27 == 0 )
        {
            self.pathing_arrays[self.pathing_arrays.size] = var_0;
            var_0 = [];
            var_0[0] = var_1;
        }
    }

    if ( var_0.size == 1 )
    {
        var_3 = spawnstruct();
        var_3.origin = ( var_0[0].origin + var_1.origin ) / 2;
        var_0[var_0.size] = var_0[0];
        var_0[0] = var_3;
    }

    if ( var_0.size > 0 )
        self.pathing_arrays[self.pathing_arrays.size] = var_0;
}

create_path_from_struct_to_struct( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    level endon( "game_ended" );
    self endon( "death" );
    var_6 = var_0;
    var_6.angles = self.angles;
    var_7 = undefined;
    var_8 = 1;
    var_9 = 0;
    var_0.pathing_index = 0;

    if ( isdefined( self.disabled_nodes ) )
        self.disabled_nodes = undefined;

    if ( isdefined( self.pathing_array ) )
    {
        foreach ( var_11 in self.pathing_array )
        {
            if ( isdefined( var_11 ) )
            {
                var_11.previous_struct = undefined;
                var_11.antepenultimate_struct = undefined;
            }
        }
    }

    self.pathing_array = [ var_0 ];

    if ( 0 )
    {
        announcement( "Waiting for player use" );
        level.players[0] notifyonplayercommand( "use", "+usereload" );
        level.players[0] notifyonplayercommand( "use", "+activate" );
    }

    for (;;)
    {
        if ( 0 )
            level.players[0] waittill( "use" );

        var_6 = find_closest_path_struct( var_6, var_1, var_3 + var_2 + var_4 + var_9, var_5, var_3 );

        if ( isdefined( var_6 ) )
        {
            if ( !isdefined( var_6.pathing_index ) )
            {
                var_6.pathing_index = self.pathing_array.size;
                self.pathing_array[self.pathing_array.size] = var_6;

                if ( 0 )
                {
                    if ( isdefined( var_6.previous_struct ) )
                        level thread scripts\cp\utility::draw_line_until_endons( var_6.previous_struct.origin, var_5[0], var_5[1], var_5[2], [ "create_vehicle_path", "kill_debug_" + var_6.pathing_index ], var_6.origin );
                }
            }

            if ( var_6.origin == var_1.origin )
                break;
        }
        else
            break;

        if ( var_9 > 1000 )
        {
            self notify( "no_good_path_found" );
            break;
        }

        var_9++;
    }

    for ( var_13 = 0; var_13 < self.pathing_array.size - 1; var_13++ )
        self.pathing_array[var_13].target = self.pathing_array[var_13 + 1].targetname;

    if ( self.pathing_array.size > 27 )
        split_large_pathing_array();
}

find_closest_path_struct( var_0, var_1, var_2, var_3, var_4 )
{
    self notify( "find_closest_path_struct" );

    if ( 0 )
        level thread scripts\cp\utility::drawsphere( var_0.origin, 24, 1, ( 1, 1, 1 ) );

    var_5 = undefined;
    var_6 = sortbydistance( var_0 get_veh_linked_structs(), var_1.origin );

    if ( var_6.size < 1 )
    {
        var_7 = scripts\engine\utility::getstructarray( level.ai_spawn_vehicle_func[var_4].path_start_points, "targetname" );

        if ( !isdefined( var_7 ) || var_7.size < 1 )
            var_7 = scripts\engine\utility::getstructarray( level.ai_spawn_vehicle_func[var_4].path_start_points, "script_linkName" );

        if ( !isdefined( var_7 ) || var_7.size < 1 )
            return;

        var_8 = scripts\engine\utility::get_array_of_closest( var_0.origin, var_7, [ var_0 ], 3 );

        foreach ( var_10 in var_8 )
        {
            var_6[var_6.size] = var_10;
            var_6 = scripts\engine\utility::array_combine( var_6, sortbydistance( var_10 get_veh_linked_structs(), var_10.origin ) );
        }
    }

    var_12 = [];
    var_13 = -5;
    var_14 = 20000;
    var_15 = -5;
    var_16 = undefined;
    var_17 = 0;

    foreach ( var_10 in var_6 )
    {
        var_19 = var_10;

        foreach ( var_21 in self.pathing_array )
        {
            if ( istrue( var_21.disabled ) || var_10.origin == var_21.origin )
            {
                var_19 = undefined;
                break;
            }
        }

        if ( isdefined( var_19 ) )
            var_12[var_12.size] = var_19;
    }

    var_0.rewinding_path = undefined;

    if ( var_12.size > 1 )
    {
        if ( istrue( 0 ) )
        {

        }

        self.pathing_array[self.pathing_array.size - 1].was_branch = 1;
    }

    if ( is_linked_struct( var_0, var_1 ) )
        var_5 = var_1;
    else if ( var_12.size > 0 )
    {
        if ( istrue( 0 ) )
        {
            foreach ( var_25 in var_12 )
            {

            }
        }

        var_5 = calc_best_closest_struct( var_0, var_1, var_12 );
    }

    if ( !isdefined( var_5 ) && isdefined( var_16 ) )
        var_5 = var_16;

    if ( isdefined( var_5 ) )
    {
        var_5.angles = vectortoangles( var_5.origin - var_0.origin );

        if ( var_5.origin != var_1.origin )
            var_5 = duplicate_struct( var_5 );

        var_5.previous_struct = var_0;

        if ( isdefined( var_0.previous_struct ) )
            var_5.antepenultimate_struct = var_0.previous_struct;

        add_targetname_kvps( var_5, var_0, var_2 );
        return var_5;
    }

    if ( !isdefined( var_5 ) )
    {
        var_5 = step_back_to_last_good_branch( var_0, var_1 );

        if ( isdefined( var_5 ) )
            add_targetname_kvps( var_5, var_0, var_2 );
    }

    return var_5;
}

is_linked_struct( var_0, var_1 )
{
    if ( isdefined( var_0.script_linkto ) && isdefined( var_1.script_linkname ) )
    {
        var_2 = var_0 scripts\engine\utility::get_links();

        foreach ( var_4 in var_2 )
        {
            if ( var_1.script_linkname == var_4 )
                return 1;
        }
    }

    return 0;
}

print_debug_info( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    self endon( var_5 );
    self endon( "death" );
    var_6 = istrue( self.pathing_array[self.pathing_array.size - 1].was_branch );

    for (;;)
        waitframe();
}

get_veh_linked_structs()
{
    var_0 = [];

    if ( isdefined( self.script_linkto ) )
    {
        var_1 = scripts\engine\utility::get_links();

        for ( var_2 = 0; var_2 < var_1.size; var_2++ )
        {
            var_3 = scripts\engine\utility::getstructarray( var_1[var_2], "script_linkname" );

            if ( var_3.size > 0 )
                var_0 = scripts\engine\utility::array_combine( var_0, var_3 );
        }
    }

    return var_0;
}

calc_best_closest_struct( var_0, var_1, var_2 )
{
    var_3 = 1000000;
    var_4 = 360;
    var_5 = -50;
    var_6 = undefined;
    var_7 = 0.5;

    for ( var_8 = 0; var_8 < var_2.size; var_8++ )
    {
        if ( var_2[var_8].origin == var_0.origin )
            var_0 = var_0.previous_struct;
    }

    var_9 = -5;
    var_10 = distance( var_1.origin, var_0.origin );

    foreach ( var_12 in var_2 )
    {
        var_13 = 5;
        var_14 = 5;
        var_15 = 0;
        var_16 = undefined;
        var_17 = -5;

        if ( var_12 == var_0 )
            continue;

        if ( var_12.origin == var_0.origin )
            continue;

        if ( isdefined( var_0.previous_struct ) && var_0.previous_struct.origin == var_12.origin )
            continue;

        if ( isdefined( var_0.antepenultimate_struct ) && var_0.antepenultimate_struct.origin == var_12.origin )
            continue;

        if ( isdefined( var_12.script_noteworthy ) && var_12.script_noteworthy == "deleteme" && var_12.origin != var_1.origin )
            continue;

        if ( !istrue( self.allow_unload_on_path ) && isdefined( var_12.script_unload ) && var_12.origin != var_1.origin )
            continue;

        if ( istrue( var_12.disabled ) )
            continue;

        if ( check_all_previous_in_pathing( var_12, 30 ) )
            continue;

        if ( istrue( struct_is_personally_disabled( var_12 ) ) )
            continue;

        var_18 = distance( var_0.origin, var_12.origin );

        if ( var_12.origin == var_1.origin && var_18 > 1250 )
            continue;

        var_18 = distance( var_1.origin, var_12.origin );
        var_19 = vectortoangles( var_1.origin - var_0.origin );

        if ( !isdefined( var_0.angles ) )
            var_0.angles = ( 0, 0, 0 );

        var_20 = scripts\engine\math::get_dot( var_0.origin, var_0.angles, var_12.origin );
        var_20 = scripts\engine\math::normalize_value( -0.5, 0.8, var_20 );
        var_21 = scripts\engine\math::get_dot( var_0.origin, var_19, var_12.origin );
        var_21 = scripts\engine\math::normalize_value( -0.8, 0.8, var_21 );
        var_22 = scripts\engine\math::normalize_value( 0, 2000, var_18 );
        var_22 = 1 - var_22;
        var_17 = var_20 + var_21 + var_22;

        if ( var_20 < 0.25 )
            var_17 = var_17 - 10;

        if ( 0 )
            thread print_debug_info( var_12, var_21, var_20, var_18, var_17, "find_closest_path_struct" );

        if ( var_17 > var_5 )
        {
            var_6 = var_12;
            var_5 = var_17;
        }
    }

    if ( !isdefined( var_6 ) )
    {

    }

    return var_6;
}

get_best_end_point( var_0, var_1, var_2 )
{
    if ( isdefined( var_1.script_linkto ) )
    {
        var_3 = var_1 get_veh_linked_structs();

        for ( var_4 = 0; var_4 < var_3.size; var_4++ )
        {
            if ( scripts\engine\utility::is_equal( level.ai_spawn_vehicle_func[var_0].exit_points, var_3[var_4].targetname ) )
                return var_3[var_4];
        }
    }

    var_5 = scripts\engine\utility::getstructarray( level.ai_spawn_vehicle_func[var_0].exit_points, "targetname" );
    var_6 = -5;
    var_7 = undefined;
    var_8 = scripts\engine\utility::get_array_of_closest( var_1.origin, var_5, [ var_1 ] );

    if ( isdefined( var_1.angles ) )
        var_2 = var_1.angles;

    foreach ( var_10 in var_8 )
    {
        var_11 = scripts\engine\math::get_dot( var_1.origin, var_2, var_10.origin );

        if ( var_11 > var_6 )
        {
            if ( getdvarint( "scr_direct_heli_path_debug", 0 ) )
                thread scripts\engine\utility::draw_capsule( var_10.origin, 32, 32, ( 0, 0, 0 ), ( 1, 0, 0 ), 0, 250 );

            var_6 = var_11;
            var_7 = var_10;
        }
    }

    return var_7;
}

check_all_previous_in_pathing( var_0, var_1 )
{
    if ( !isdefined( self.pathing_array ) )
        return 0;

    if ( !isdefined( var_1 ) )
        var_1 = self.pathing_array.size;

    for ( var_2 = 0; var_2 < var_1; var_2++ )
    {
        if ( isdefined( self.pathing_array[var_2] ) && self.pathing_array[var_2].origin == var_0.origin )
            return 1;
    }

    return 0;
}

struct_is_personally_disabled( var_0 )
{
    if ( !isdefined( self.disabled_nodes ) )
        return 0;

    for ( var_1 = self.disabled_nodes.size - 1; var_1 >= 0; var_1-- )
    {
        if ( self.disabled_nodes[var_1].origin == var_0.origin )
            return 1;
    }

    return 0;
}

step_back_to_last_good_branch( var_0, var_1 )
{
    var_2 = undefined;
    var_3 = undefined;
    var_4 = [];
    var_5 = 0;

    for ( var_6 = self.pathing_array.size - 1; var_6 >= 0; var_6-- )
    {
        if ( var_5 > 0 )
            break;

        if ( istrue( self.pathing_array[var_6].was_branch ) )
        {
            var_7 = self.pathing_array[var_6] get_veh_linked_structs();

            for ( var_8 = 0; var_8 < var_7.size; var_8++ )
            {
                if ( is_this_a_valid_node( var_7[var_8] ) )
                    var_4[var_4.size] = var_7[var_8];
            }

            if ( var_4.size > 0 )
            {
                if ( var_4.size == 1 )
                    var_9 = var_4[0];
                else
                    var_9 = calc_best_closest_struct( var_0, var_1, var_4 );

                var_5 = var_6;
                var_3 = var_9;

                if ( istrue( 0 ) )
                {

                }

                break;
            }
            else
                disable_this_node_for_us( self.pathing_array[var_6] );

            continue;
        }

        disable_this_node_for_us( self.pathing_array[var_6] );
    }

    if ( isdefined( var_0.previous_struct ) )
    {
        if ( isdefined( var_3 ) )
        {
            var_2 = var_3;

            if ( isdefined( self.pathing_array[var_5 - 1] ) )
                var_2.previous_struct = self.pathing_array[var_5 - 1];

            if ( isdefined( self.pathing_array[var_5 - 2] ) )
                var_2.antepenultimate_struct = self.pathing_array[var_5 - 2];
        }
        else
            var_2 = self.pathing_array[0];

        if ( isdefined( var_2 ) )
            var_2.rewinding_path = 1;
    }

    if ( !isdefined( var_2 ) )
    {

    }

    return var_2;
}

is_this_a_valid_node( var_0 )
{
    if ( istrue( var_0.disabled ) )
        return 0;

    for ( var_1 = self.pathing_array.size - 1; var_1 >= 0; var_1-- )
    {
        if ( self.pathing_array[var_1].origin == var_0.origin )
            return 0;
    }

    for ( var_1 = self.disabled_nodes.size - 1; var_1 >= 0; var_1-- )
    {
        if ( self.disabled_nodes[var_1].origin == var_0.origin )
            return 0;
    }

    return 1;
}

disable_this_node_for_us( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( !isdefined( self.disabled_nodes ) )
        self.disabled_nodes = [];

    if ( scripts\engine\utility::array_contains( self.disabled_nodes, var_0 ) )
        return;

    self.disabled_nodes[self.disabled_nodes.size] = var_0;

    if ( istrue( 0 ) )
    {

    }

    level notify( "kill_debug_" + var_0.pathing_index );
    self.pathing_array = scripts\engine\utility::array_remove( self.pathing_array, var_0 );
}

create_direct_heli_path( var_0 )
{
    self endon( "death" );
    var_1 = create_direct_path_from_landing_point( var_0 );
    thread scripts\common\vehicle_paths::vehicle_paths_helicopter( var_1 );
}

animatedprop_startanim( var_0, var_1 )
{
    for ( var_2 = 0; var_2 < var_0.size; var_2++ )
    {
        var_3 = var_2 + 1;

        if ( isdefined( var_0[var_3] ) )
        {
            var_4 = vectortoangles( var_0[var_3].origin - var_0[var_2].origin );
            var_0[var_2].angles = ( 0, var_4[1], 0 );
            continue;
        }

        var_4 = vectortoangles( var_1.origin - var_0[var_2].origin );
        var_0[var_2].angles = ( 0, var_4[1], 0 );

        if ( !isdefined( var_1.angles ) || var_1.angles == ( 0, 0, 0 ) )
            var_1.angles = ( 0, var_4[1], 0 );

        break;
    }
}

create_direct_path_from_landing_point( var_0 )
{
    var_1 = create_unique_kvp_string();
    var_2 = var_1;
    var_3 = duplicate_struct( self.spawn_point );
    var_3.targetname = var_1;
    scripts\cp\utility::addtostructarray( "targetname", var_3.targetname, var_3 );
    var_4 = [];

    if ( isdefined( var_3.script_linkto ) )
        var_4 = var_3 build_path_from_script_linkto( var_0 );

    if ( var_4.size > 0 )
    {
        animatedprop_startanim( var_4, var_3 );
        var_5 = self.spawn_point.origin;

        for ( var_6 = 0; var_6 < self.riders.size; var_6++ )
        {
            if ( isalive( self.riders[var_6] ) && isai( self.riders[var_6] ) )
                self.riders[var_6] scripts\cp\cp_modular_spawning::set_goal_pos( var_5 );
        }

        if ( getdvarint( "scr_direct_heli_path_debug", 0 ) )
            thread scripts\engine\utility::draw_line_for_time( self.veh_spawn_point.origin, var_4[0].origin, 1, 1, 1, 60 );

        return var_4[0];
    }

    if ( isdefined( var_3.script_linkname ) )
    {
        var_7 = [];
        var_8 = scripts\engine\utility::getstructarray( level.ai_spawn_vehicle_func[var_0].path_start_points, "script_linkname" );

        if ( !isdefined( var_8 ) || var_8.size < 1 )
            var_8 = scripts\engine\utility::getstructarray( level.ai_spawn_vehicle_func[var_0].path_start_points, "targetname" );

        if ( !isdefined( var_8 ) || var_8.size < 1 )
            return;

        var_9 = var_3.script_linkname;

        for ( var_6 = 0; var_6 < var_8.size; var_6++ )
        {
            if ( scripts\engine\utility::is_equal( var_8[var_6].script_linkto, var_9 ) )
            {
                var_10 = [];
                var_11 = duplicate_struct( var_8[var_6] );
                var_11.target = var_2;
                scripts\cp\utility::addtostructarray( "target", var_2, var_11 );
                var_11.targetname = create_unique_kvp_string();
                scripts\cp\utility::addtostructarray( "targetname", var_11.targetname, var_11 );
                var_10 = var_11 get_linkto_structs_return_to_array( var_10, var_8 );

                if ( var_10.size > 0 )
                    var_7[var_7.size] = var_10;
            }
        }

        if ( var_7.size > 0 )
        {
            var_12 = [];

            for ( var_6 = 0; var_6 < var_7.size; var_6++ )
            {
                thread cleanup_unused_paths( var_7[var_6], var_7[var_6][var_7[var_6].size - 1] );
                var_12[var_12.size] = var_7[var_6][var_7[var_6].size - 1];

                if ( getdvarint( "scr_direct_heli_path_debug", 0 ) )
                    thread scripts\engine\utility::draw_capsule( var_7[var_6][var_7[var_6].size - 1].origin, 32, 32, ( 0, 0, 0 ), ( 1, 0, 0 ), 0, 250 );
            }

            var_13 = scripts\engine\math::get_mid_point( var_3.origin, self.origin );

            if ( getdvarint( "scr_direct_heli_path_debug", 0 ) )
            {
                thread scripts\engine\utility::draw_capsule( self.origin, 32, 32, ( 0, 0, 0 ), ( 0, 1, 0 ), 0, 250 );
                thread scripts\engine\utility::draw_capsule( self.spawn_point.origin, 32, 32, ( 0, 0, 0 ), ( 0, 1, 0 ), 0, 250 );
                thread scripts\engine\utility::draw_capsule( var_13, 32, 32, ( 0, 0, 0 ), ( 1, 1, 0 ), 0, 250 );
            }

            var_14 = scripts\engine\utility::getclosest( var_13, var_12 );

            if ( getdvarint( "scr_direct_heli_path_debug", 0 ) )
                thread scripts\engine\utility::draw_line_for_time( var_14.origin, self.origin, 1, 0, 0, 10 );

            if ( isdefined( var_14.target ) )
            {
                var_15 = var_14 scripts\engine\utility::get_target_array();

                for ( var_6 = 0; var_6 < var_15.size; var_6++ )
                {
                    if ( getdvarint( "scr_direct_heli_path_debug", 0 ) )
                    {
                        thread scripts\engine\utility::draw_line_for_time( var_14.origin, var_15[var_6].origin, 1, 0, 0, 12.5 );
                        thread scripts\engine\utility::draw_capsule( var_15[var_6].origin, 32, 32, ( 0, 0, 0 ), ( 0, 1, 1 ), 0, 250 );
                    }

                    if ( var_6 >= var_15.size - 1 )
                    {
                        if ( getdvarint( "scr_direct_heli_path_debug", 0 ) )
                            thread scripts\engine\utility::draw_line_for_time( var_3.origin, var_15[var_6].origin, 1, 0, 0, 12.5 );
                    }
                }
            }

            if ( getdvarint( "scr_direct_heli_path_debug", 0 ) )
                thread scripts\engine\utility::draw_capsule( var_14.origin, 32, 32, ( 0, 0, 0 ), ( 0, 1, 1 ), 0, 250 );

            var_14 notify( "path_chosen" );
            self notify( "path_chosen" );
            return var_14;
            return;
        }

        var_7 = [];
        var_14 = create_entrance_points( var_3 );

        if ( isdefined( var_14 ) )
        {
            var_14.target = var_2;
            scripts\cp\utility::addtostructarray( "target", var_2, var_14 );
            var_14.targetname = create_unique_kvp_string();
            scripts\cp\utility::addtostructarray( "targetname", var_14.targetname, var_14 );

            if ( getdvarint( "scr_direct_heli_path_debug", 0 ) )
            {
                thread scripts\engine\utility::draw_capsule( var_14.origin, 32, 32, ( 0, 0, 0 ), ( 0, 1, 1 ), 0, 250 );
                thread scripts\engine\utility::draw_capsule( var_3.origin, 32, 32, ( 0, 0, 0 ), ( 0, 1, 0 ), 0, 250 );
            }

            return var_14;
            return;
        }

        return var_3;
        return;
        return;
    }
    else
        return var_3;
}

binding( var_0 )
{
    if ( isdefined( level.vehicle_builds[var_0] ) )
        return istrue( level.vehicle_builds[var_0].bindingpc );
    else
        return 0;
}

build_path_from_script_linkto( var_0 )
{
    var_1 = [];
    var_2 = scripts\engine\utility::get_links();
    var_3 = undefined;

    for ( var_4 = 0; var_4 < var_2.size; var_4++ )
    {
        var_5 = var_2[var_4];
        var_6 = scripts\engine\utility::getstructarray( var_5, "script_linkname" );

        if ( isdefined( var_6 ) && var_6.size > 0 )
        {
            var_6 = scripts\engine\utility::array_randomize( var_6 );

            for ( var_7 = 0; var_7 < var_6.size; var_7++ )
            {
                var_8 = var_6[var_7];

                if ( scripts\engine\utility::is_equal( var_8.targetname, "heli_spawner" ) )
                    continue;

                if ( !binding( var_0 ) )
                {
                    if ( scripts\engine\utility::is_equal( var_8.script_noteworthy, "deleteme" ) )
                        continue;
                }

                var_8 = duplicate_struct( var_8 );
                var_1[var_1.size] = var_8;
                var_8.targetname = create_unique_kvp_string();
                scripts\cp\utility::addtostructarray( "targetname", var_8.targetname, var_8 );

                if ( isdefined( var_3 ) )
                {
                    if ( getdvarint( "scr_direct_heli_path_debug", 0 ) )
                        thread scripts\engine\utility::draw_line_for_time( var_3.origin, var_8.origin, 1, 1, 1, 60 );

                    var_3.target = var_8.targetname;
                    scripts\cp\utility::addtostructarray( "target", var_3.target, var_3 );
                }

                var_3 = var_8;
                break;
            }
        }
    }

    if ( var_1.size > 0 )
    {
        var_1[var_1.size - 1].target = self.targetname;
        scripts\cp\utility::addtostructarray( "target", var_1[var_1.size - 1].target, var_1[var_1.size - 1] );

        if ( getdvarint( "scr_direct_heli_path_debug", 0 ) )
            thread scripts\engine\utility::draw_line_for_time( var_1[var_1.size - 1].origin, self.origin, 1, 1, 1, 60 );
    }

    return var_1;
}

create_entrance_points( var_0 )
{
    var_1 = [];
    var_2 = var_0.origin;

    if ( scripts\engine\trace::capsule_trace_passed( var_2 + ( 1500, 0, 1500 ), var_2, 256, 512, ( 0, 0, 0 ), level.characters ) )
    {
        var_3 = spawnstruct();
        var_3.origin = var_2 + ( 1500, 0, 1500 );
        var_1[var_1.size] = var_3;
    }

    if ( scripts\engine\trace::capsule_trace_passed( var_2 + ( -1500, 0, 1500 ), var_2, 256, 512, ( 0, 0, 0 ), level.characters ) )
    {
        var_3 = spawnstruct();
        var_3.origin = var_2 + ( -1500, 0, 1500 );
        var_1[var_1.size] = var_3;
    }

    if ( scripts\engine\trace::capsule_trace_passed( var_2 + ( 0, -1500, 1500 ), var_2, 256, 512, ( 0, 0, 0 ), level.characters ) )
    {
        var_3 = spawnstruct();
        var_3.origin = var_2 + ( 0, -1500, 1500 );
        var_1[var_1.size] = var_3;
    }

    if ( scripts\engine\trace::capsule_trace_passed( var_2 + ( 0, 1500, 1500 ), var_2, 256, 512, ( 0, 0, 0 ), level.characters ) )
    {
        var_3 = spawnstruct();
        var_3.origin = var_2 + ( 0, 1500, 1500 );
        var_1[var_1.size] = var_3;
    }

    if ( scripts\engine\trace::capsule_trace_passed( var_2 + ( -1500, 1500, 1500 ), var_2, 256, 512, ( 0, 0, 0 ), level.characters ) )
    {
        var_3 = spawnstruct();
        var_3.origin = var_2 + ( -1500, 1500, 1500 );
        var_1[var_1.size] = var_3;
    }

    if ( scripts\engine\trace::capsule_trace_passed( var_2 + ( -1500, -1500, 1500 ), var_2, 256, 512, ( 0, 0, 0 ), level.characters ) )
    {
        var_3 = spawnstruct();
        var_3.origin = var_2 + ( -1500, -1500, 1500 );
        var_1[var_1.size] = var_3;
    }

    if ( scripts\engine\trace::capsule_trace_passed( var_2 + ( 1500, -1500, 1500 ), var_2, 256, 512, ( 0, 0, 0 ), level.characters ) )
    {
        var_3 = spawnstruct();
        var_3.origin = var_2 + ( 1500, -1500, 1500 );
        var_1[var_1.size] = var_3;
    }

    if ( scripts\engine\trace::capsule_trace_passed( var_2 + ( 1500, 1500, 1500 ), var_2, 256, 512, ( 0, 0, 0 ), level.characters ) )
    {
        var_3 = spawnstruct();
        var_3.origin = var_2 + ( 1500, 1500, 1500 );
        var_1[var_1.size] = var_3;
    }

    var_4 = scripts\engine\math::get_mid_point( var_0.origin, self.origin );

    if ( getdvarint( "scr_direct_heli_path_debug", 0 ) )
        thread scripts\engine\utility::draw_capsule( var_4, 32, 32, ( 0, 0, 0 ), ( 1, 1, 0 ), 0, 250 );

    var_5 = scripts\engine\utility::getclosest( var_4, var_1 );

    for ( var_6 = 0; var_6 < var_1.size; var_6++ )
    {
        if ( var_1[var_6] != var_5 )
        {
            if ( getdvarint( "scr_direct_heli_path_debug", 0 ) )
                thread scripts\engine\utility::draw_capsule( var_1[var_6].origin, 32, 32, ( 0, 0, 0 ), ( 1, 0, 0 ), 0, 250 );
        }
    }

    return var_5;
}

get_linkto_structs_return_to_array( var_0, var_1 )
{
    var_0[var_0.size] = self;

    if ( isdefined( self.script_linkname ) )
    {
        var_2 = self.script_linkname;

        for ( var_3 = 0; var_3 < var_1.size; var_3++ )
        {
            if ( var_1[var_3].origin == self.origin )
                continue;

            if ( scripts\engine\utility::is_equal( var_1[var_3].script_linkto, var_2 ) )
            {
                var_4 = duplicate_struct( var_1[var_3] );
                var_4.target = self.targetname;
                scripts\cp\utility::addtostructarray( "target", var_4.target, var_4 );
                var_4.targetname = create_unique_kvp_string();
                scripts\cp\utility::addtostructarray( "targetname", var_4.targetname, var_4 );
                var_0[var_0.size] = var_4;
                var_0 = var_4 get_linkto_structs_return_to_array( var_0, var_1 );
            }
        }
    }

    return var_0;
}

cleanup_unused_paths( var_0, var_1 )
{
    var_1 endon( "path_chosen" );
    self waittill( "path_chosen" );

    for ( var_2 = 0; var_2 < var_0.size; var_2++ )
        scripts\engine\utility::deletestruct_ref( var_0[var_2] );
}

create_heli_path( var_0 )
{
    self.veh_path = [];
    var_1 = level.next_index;
    level.next_index++;
    var_2 = scripts\engine\utility::random( scripts\engine\utility::getstructarray( level.ai_spawn_vehicle_func[var_0].exit_points, "targetname" ) );
    var_3 = duplicate_struct( var_2 );
    self.end_point = var_3;
    thread begin_searching_for_landing_loc( undefined, var_0, var_1 );
    scripts\engine\utility::thread_on_notify_no_endon_death( "death", ::reset_spawn_point_targetname, self.spawn_point, undefined, self );
}

begin_searching_for_landing_loc( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    self endon( "death" );
    self notify( "begin_searching_for_landing_loc" );
    self endon( "begin_searching_for_landing_loc" );
    self endon( "all_passengers_dead" );
    var_3 = undefined;
    var_4 = undefined;
    var_5 = undefined;
    var_6 = undefined;

    for (;;)
    {
        var_7 = scripts\cp\utility::get_array_of_valid_players();

        if ( !var_7.size )
        {
            wait 1;
            continue;
        }

        var_8 = scripts\cp\utility::get_center_point_of_array( var_7 );

        if ( !isdefined( var_8 ) )
            var_8 = self.origin;

        if ( isdefined( self.spawn_point ) )
        {
            if ( isdefined( self.spawn_point ) )
            {

            }

            var_9 = [ self.spawn_point ];
        }
        else
            var_9 = sortbydistance( level.valid_air_vehicle_spawn_points, var_8 );

        var_3 = undefined;
        var_10 = 2048;

        for ( var_11 = 0; var_11 < var_9.size; var_11++ )
        {
            var_12 = var_9[var_11];

            if ( isdefined( var_12.radius ) && var_12.radius > var_10 )
                var_10 = int( var_12.radius );

            if ( distance2dsquared( var_12.origin, var_8 ) <= var_10 * var_10 )
            {
                var_3 = var_12;
                break;
            }
        }

        if ( isdefined( var_3 ) )
        {
            var_10 = 2048;

            if ( isdefined( var_3.radius ) && var_3.radius > var_10 )
                var_10 = int( var_3.radius );

            if ( distance2dsquared( var_3.origin, self.origin ) <= var_10 * var_10 )
            {
                level.valid_air_vehicle_spawn_points = scripts\engine\utility::array_remove( level.valid_air_vehicle_spawn_points, var_3 );
                var_4 = duplicate_struct( var_3 );

                if ( !isdefined( var_3.script_noteworthy ) )
                    var_4.targetname = "arrived_at_node_" + var_2;
                else
                    var_4.targetname = var_3.script_noteworthy;

                thread scripts\common\vehicle_paths::vehicle_paths_helicopter( var_4 );
                self.landing_spot = var_4;
                var_13 = ( 150, 150, 150 );

                if ( var_1 == "lbravo_ai_infil" )
                    var_13 = ( 90, 90, 90 );

                self.nav_obstacle = createnavobstaclebybounds( var_4.origin, var_13, ( 0, 0, 0 ), "axis" );
                thread delete_nav_obstacle_on_death();
                break;
            }
            else
            {
                var_14 = scripts\engine\utility::array_remove_array( level.path_points[var_1], level.invalid_path_points );

                if ( isdefined( var_6 ) )
                    var_14 = scripts\engine\utility::array_remove( level.path_points[var_1], var_6 );

                var_15 = get_best_hover_point( var_8, var_14 );

                if ( isdefined( var_15 ) )
                {
                    var_16 = duplicate_struct( var_15 );

                    if ( !isdefined( var_15.script_noteworthy ) )
                        var_16.script_noteworthy = "arrived_at_node_" + var_2;
                    else
                        var_16.script_noteworthy = var_15.script_noteworthy;

                    var_16.radius = 512;

                    if ( !isdefined( var_6 ) || var_15 != var_6 )
                        thread scripts\common\vehicle_paths::vehicle_paths_helicopter( var_16 );

                    var_6 = var_15;
                    level.invalid_path_points[level.invalid_path_points.size] = var_15;
                    var_17 = scripts\engine\utility::_id_12E53( 2.5, var_16.script_noteworthy );

                    if ( var_17 == "timeout" )
                        var_6 = undefined;

                    scripts\engine\utility::deletestruct_ref( var_16 );
                    level.invalid_path_points = scripts\engine\utility::array_remove( level.invalid_path_points, var_15 );
                }
                else
                    wait 1;
            }

            continue;
        }

        var_14 = scripts\engine\utility::array_remove_array( level.path_points[var_1], level.invalid_path_points );

        if ( isdefined( var_6 ) )
            var_14 = scripts\engine\utility::array_remove( level.path_points[var_1], var_6 );

        var_15 = get_best_hover_point( var_8, var_14 );

        if ( isdefined( var_15 ) )
        {
            var_16 = duplicate_struct( var_15 );

            if ( !isdefined( var_15.script_noteworthy ) )
                var_16.script_noteworthy = "arrived_at_node_" + var_2;
            else
                var_16.script_noteworthy = var_15.script_noteworthy;

            var_16.radius = 512;

            if ( !isdefined( var_6 ) || var_15 != var_6 )
                thread scripts\common\vehicle_paths::vehicle_paths_helicopter( var_16 );

            var_6 = var_15;
            level.invalid_path_points[level.invalid_path_points.size] = var_15;
            var_17 = scripts\engine\utility::_id_12E53( 2.5, var_16.script_noteworthy );

            if ( var_17 == "timeout" )
                var_6 = undefined;

            scripts\engine\utility::deletestruct_ref( var_16 );
            level.invalid_path_points = scripts\engine\utility::array_remove( level.invalid_path_points, var_15 );
            continue;
        }

        wait 1;
    }

    self waittill( "unloaded" );

    if ( !scripts\engine\utility::array_contains( level.valid_air_vehicle_spawn_points, var_3 ) )
        level.valid_air_vehicle_spawn_points[level.valid_air_vehicle_spawn_points.size] = var_3;

    if ( isdefined( var_4 ) )
        var_5 = get_exit_route( var_4, var_1 + var_2 + "_start" );

    var_18 = scripts\engine\utility::random( scripts\engine\utility::getstructarray( level.ai_spawn_vehicle_func[var_1].exit_points, "targetname" ) );
    var_19 = duplicate_struct( var_18 );

    if ( isdefined( var_4 ) && isdefined( var_5 ) && var_5 != var_4 )
    {
        add_targetname_kvps( var_5, var_4, var_1 + var_2 + "_exit_path" );
        add_targetname_kvps( var_19, var_5, var_1 + var_2 + "_end" );
        thread scripts\common\vehicle_paths::vehicle_paths_helicopter( var_5 );
    }
    else
    {
        add_targetname_kvps( var_19, var_4, var_1 + var_2 + "_end" );
        thread scripts\common\vehicle_paths::vehicle_paths_helicopter( var_19 );
    }

    delete_nav_obstacle();
}

create_unique_kvp_string()
{
    var_0 = get_next_free_num();
    return "unique_KVP_" + var_0;
}

get_next_free_num()
{
    var_0 = level.next_index;
    level.next_index++;
    return var_0;
}

avoid_other_helicopters( var_0 )
{
    self notify( "avoid_other_helicopters" );
    self endon( "avoid_other_helicopters" );

    for (;;)
    {
        var_1 = self.origin + anglestoforward( self.angles ) * 256;

        foreach ( var_3 in scripts\engine\utility::get_array_of_closest( var_1, level.all_spawned_vehicles, [ self ], undefined, 512 ) )
        {
            if ( var_3 == self )
                continue;
        }

        wait 1;
    }
}

get_best_hover_point( var_0, var_1 )
{
    var_1 = sortbydistance( var_1, var_0 );
    var_2 = -5;
    var_3 = undefined;

    foreach ( var_5 in var_1 )
    {
        var_6 = scripts\engine\math::get_dot( self.origin, self.angles, var_5.origin );

        if ( var_6 > 0 )
            return var_5;
    }

    return var_3;
}

get_exit_route( var_0, var_1 )
{
    var_2 = var_0;

    if ( isdefined( var_2.script_linkto ) )
    {
        for ( var_3 = 0; isdefined( var_2.script_linkto ); var_3++ )
        {
            var_4 = scripts\engine\utility::random( var_2 get_veh_linked_structs() );
            var_4 = duplicate_struct( var_4 );
            add_targetname_kvps( var_4, var_0, var_1 + "_exit_route_" + var_3 );
            var_2 = var_4;
        }
    }

    return var_2;
}

copy_path_struct_at_new_pos( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2.origin = var_0;
    var_2.speed = var_1.speed;
    var_2.lookahead = var_1.lookahead;
    return var_2;
}

add_targetname_kvps( var_0, var_1, var_2 )
{
    if ( isdefined( var_0 ) )
    {
        var_0.targetname = var_2;
        scripts\cp\utility::addtostructarray( "targetname", var_2, var_0 );

        if ( isdefined( self.veh_path ) )
            self.veh_path[self.veh_path.size] = var_0;
    }

    if ( isdefined( var_1 ) )
    {
        var_1.target = var_2;
        scripts\cp\utility::addtostructarray( "target", var_2, var_1 );

        if ( isdefined( self.veh_path ) )
            self.veh_path[self.veh_path.size] = var_1;
    }
}

duplicate_struct( var_0 )
{
    var_1 = spawnstruct();
    var_1.path_gobbler = 1;
    var_1.origin = var_0.origin;

    if ( isdefined( var_0.angles ) )
        var_1.angles = var_0.angles;
    else
        var_1.angles = ( 0, 0, 0 );

    if ( isdefined( var_0.script_unload ) )
        var_1.script_unload = var_0.script_unload;

    if ( isdefined( var_0.lookahead ) )
        var_1.lookahead = var_0.lookahead;

    if ( isdefined( var_0.speed ) )
        var_1.speed = var_0.speed;
    else
        var_1.speed = 2000;

    if ( isdefined( var_0.start_node ) )
        var_1.start_node = var_0.start_node;

    if ( isdefined( var_0.script_noteworthy ) )
        var_1.script_noteworthy = var_0.script_noteworthy;

    if ( isdefined( var_0.script_linkname ) )
        var_1.script_linkname = var_0.script_linkname;

    if ( isdefined( var_0.script_linkto ) )
        var_1.script_linkto = var_0.script_linkto;

    if ( isdefined( var_0.script_brake ) )
        var_1.script_brake = var_0.script_brake;

    if ( isdefined( var_0.script_pathtype ) )
        var_1.script_pathtype = var_0.script_pathtype;

    if ( isdefined( var_0.script_goalyaw ) )
        var_1.script_goalyaw = var_0.script_goalyaw;

    if ( isdefined( var_0.script_anglevehicle ) )
        var_1.script_anglevehicle = var_0.script_anglevehicle;

    if ( isdefined( var_0.radius ) )
        var_1.radius = var_0.radius;
    else
        var_1.radius = 512;

    return var_1;
}

delete_nav_obstacle()
{
    if ( isdefined( self.nav_obstacle ) )
        destroynavobstacle( self.nav_obstacle );

    self.spawn_point scripts\cp\cp_modular_spawning::set_default_spawner_values();
}

all_but_one_player_downed( var_0, var_1, var_2, var_3 )
{
    var_3.woods_two_death_func = undefined;
    var_4 = 1;

    if ( isdefined( var_2 ) )
    {
        if ( var_2 logchangeweapon() < 1 )
            var_4 = 0;
    }

    if ( isdefined( var_0 ) )
        var_0 _id_1275A( 0 );

    if ( isdefined( var_1 ) )
    {
        if ( var_4 )
            var_1 scripts\cp\cp_modular_spawning::hoopty_truck_initdamage();
        else if ( isdefined( var_2 ) )
            var_2 hoopty_truck_initomnvars( var_1 );
    }

    reset_spawn_point_targetname( var_1 );

    if ( isdefined( var_2 ) )
    {
        if ( isdefined( var_2.veh_spawn_point ) )
            var_2.veh_spawn_point = undefined;
    }
}

hoopty_truck_initomnvars( var_0 )
{
    self waittill( "death" );
    var_0 scripts\cp\cp_modular_spawning::hoopty_truck_initdamage();
}

delete_nav_obstacle_on_death()
{
    self waittill( "death" );
    delete_nav_obstacle();
}

reached_infil_node( var_0 )
{
    iprintlnbold( "TEST" );
}

decrement_vehicles_active( var_0, var_1 )
{
    self notify( "decrement_vehicles_active" );
    self endon( "decrement_vehicles_active" );
    level endon( "game_ended" );
    var_2 = self.veh_spawn_point;
    var_3 = self.spawn_point;
    var_4 = scripts\engine\utility::_id_12E47( "death", "unloaded" );
    level scripts\engine\utility::delaythread( 5, ::all_but_one_player_downed, var_2, var_3, self, var_1 );
    level.all_spawned_vehicles = scripts\engine\utility::array_remove( level.all_spawned_vehicles, self );
    level.ai_spawn_vehicle_func[var_0].count--;

    if ( isdefined( self.veh_spawn_point ) && isdefined( self.veh_spawn_point.script_vehiclegroup ) )
    {
        var_5 = scripts\engine\utility::getstructarray( self.veh_spawn_point.script_vehiclegroup, "targetname" );

        foreach ( var_7 in var_5 )
            var_7.disabled = undefined;
    }

    if ( isdefined( self.veh_spawn_point ) )
        self.veh_spawn_point.in_use = undefined;

    self.veh_spawn_point = undefined;
}

reset_spawn_point_targetname( var_0 )
{
    if ( !isdefined( var_0 ) && isdefined( self.spawn_point ) )
        var_0 = self.spawn_point;

    if ( isdefined( var_0 ) )
    {
        var_0.ai_infil_type = undefined;

        if ( isdefined( var_0.og_script_function ) )
            var_0.script_function = var_0.og_script_function;

        var_0 = undefined;
    }

    if ( isdefined( self ) && isdefined( self.veh_path ) )
    {
        foreach ( var_2 in self.veh_path )
        {
            if ( !isdefined( var_2 ) )
                continue;

            if ( isdefined( var_2.script_noteworthy ) )
                remove_from_struct_array( "script_noteworthy", var_2.script_noteworthy, var_2 );

            if ( isdefined( var_2.target ) )
                remove_from_struct_array( "target", var_2.target, var_2 );

            if ( isdefined( var_2.targetname ) )
                remove_from_struct_array( "targetname", var_2.targetname, var_2 );

            if ( isdefined( var_2.script_linkname ) )
                remove_from_struct_array( "script_linkname", var_2.script_linkname, var_2 );
        }
    }

    if ( isdefined( self ) && isdefined( self.pathing_array ) )
    {
        foreach ( var_2 in self.pathing_array )
        {
            if ( !isdefined( var_2 ) )
                continue;

            if ( isdefined( var_2.script_noteworthy ) )
                remove_from_struct_array( "script_noteworthy", var_2.script_noteworthy, var_2 );

            if ( isdefined( var_2.target ) )
                remove_from_struct_array( "target", var_2.target, var_2 );

            if ( isdefined( var_2.targetname ) )
            {
                remove_from_struct_array( "script_noteworthy", var_2.targetname, var_2 );
                remove_from_struct_array( "targetname", var_2.targetname, var_2 );
            }

            if ( isdefined( var_2.script_linkname ) )
                remove_from_struct_array( "script_linkname", var_2.script_linkname, var_2 );
        }
    }
}

remove_from_struct_array( var_0, var_1, var_2 )
{
    if ( isdefined( level.struct_class_names[var_0] ) && isdefined( level.struct_class_names[var_0][var_1] ) && scripts\engine\utility::array_contains( level.struct_class_names[var_0][var_1], var_2 ) )
        level.struct_class_names[var_0][var_1] = scripts\engine\utility::array_remove( level.struct_class_names[var_0][var_1], var_2 );
}

clear_kill_off_flags( var_0 )
{
    if ( istrue( var_0.skip_clear_kill_off_flag ) )
        return;

    var_0.killofftime = gettime() + 20000;
    var_0.dontkilloff = undefined;
    var_0.canshootinvehicle = undefined;
    var_0.ignoreall = 0;

    if ( isdefined( var_0.vehicle ) && isdefined( var_0.vehicle.landing_spot ) )
        var_0 scripts\cp\cp_modular_spawning::node_fields_pre_goal( var_0.vehicle.landing_spot );

    if ( isdefined( var_0.demeanoroverride ) && var_0.demeanoroverride == "casual" )
    {
        var_0 scripts\cp\cp_modular_spawning::set_demeanor_from_unittype( "patrol" );
        var_0 scripts\cp\cp_modular_spawning::set_goal_pos( var_0.origin );
        var_0 thread scripts\cp\cp_modular_spawning::start_patrol();
    }
    else
    {
        var_0 scripts\cp\cp_modular_spawning::set_goal_pos( var_0.origin );
        var_1 = var_0 scripts\cp\utility::get_closest_living_player();

        if ( isdefined( var_1 ) )
            var_0 scripts\cp\cp_modular_spawning::set_goal_pos( var_1.origin );

        var_0 scripts\cp\cp_modular_spawning::enter_combat();
    }
}

xmike109projectiles( var_0, var_1, var_2 )
{
    if ( isdefined( level.ambientgroups[var_0] ) )
    {
        if ( isarray( level.ambientgroups[var_0] ) )
        {
            for ( var_3 = 0; var_3 < level.ambientgroups[var_0].size; var_3++ )
            {
                if ( !isdefined( level.ambientgroups[var_0][var_3]._id_12C91 ) )
                    level.ambientgroups[var_0][var_3]._id_12C91 = [];

                level.ambientgroups[var_0][var_3]._id_12C91[var_1] = var_2;
            }
        }
        else
        {
            if ( !isdefined( level.ambientgroups[var_0]._id_12C91 ) )
                level.ambientgroups[var_0]._id_12C91 = [];

            level.ambientgroups[var_0]._id_12C91[var_1] = var_2;
        }
    }
}

leadmarkerthreshold( var_0, var_1 )
{
    if ( isdefined( var_0 ) && isdefined( var_1 ) )
    {
        if ( !isdefined( var_0._id_12C91 ) )
            return;

        if ( !isdefined( var_0._id_12C91[var_1] ) )
            return;

        return var_0._id_12C91[var_1];
    }
    else
        return undefined;
}

locked_proxylod( var_0, var_1 )
{
    if ( isdefined( var_0 ) && isdefined( var_1 ) )
    {
        var_2 = leadmarkerthreshold( var_0, var_1 );

        if ( !isdefined( var_2 ) )
            var_2 = [];

        for ( var_3 = 0; var_3 < self.usedpositions.size; var_3++ )
        {
            if ( self.usedpositions[var_3] )
                continue;

            var_4 = 1;

            for ( var_5 = 0; var_5 < var_2.size; var_5++ )
            {
                if ( var_2[var_5] == var_3 )
                {
                    var_4 = 0;
                    break;
                }
            }

            if ( var_4 )
                return var_3;
        }
    }

    return -1;
}

_id_11D91( var_0 )
{
    if ( isdefined( var_0 ) )
        return;

    for (;;)
    {
        for ( var_1 = 0; var_1 < level.players.size; var_1++ )
        {
            if ( enablegroundwarspawnlogic( level.players[var_1] geteye(), self.origin + ( 0, 0, 56 ) ) )
                break;
        }

        wait 0.1;
    }

    self notify( var_0 );
}

allow_infil_after_full_or_timeout( var_0, var_1 )
{
    self notify( "allow_infil_after_full_or_timeout" );
    self endon( "allow_infil_after_full_or_timeout" );
    self endon( "death" );
    self endon( "spawning_done" );
    level endon( "game_ended" );
    var_2 = level_carepackage_give_player_killstreak( var_0, var_1 );

    if ( isdefined( level.ai_spawn_vehicle_func[var_1].max_wait_for_infil ) )
        scripts\engine\utility::_id_12E53( level.ai_spawn_vehicle_func[var_1].max_wait_for_infil, "stop_waiting_for_spawns" );

    if ( isdefined( var_2 ) )
    {
        if ( self.attachedguys.size == var_2 || isdefined( self.load_queue ) && self.load_queue.size == var_2 )
        {
            self notify( "spawning_done" );
            return;
        }
        else
        {
            childthread _id_11D91( "spawning_done" );

            if ( isdefined( self.group ) )
                self.group scripts\engine\utility::_id_12E53( 3, "death" );
            else
                wait 3;

            self notify( "spawning_done" );
        }
    }

    if ( isdefined( self.load_queue ) && self.load_queue.size > 0 )
        self notify( "spawning_done" );
    else if ( self.attachedguys.size < 1 )
    {
        scripts\common\vehicle_code::vehicle_deathcleanup();
        scripts\common\vehicle_paths::delete_riders();
        self notify( "delete" );
        self delete();
    }
    else
        self notify( "spawning_done" );
}

getweaponvariantids( var_0, var_1 )
{

}

register_combined_vehicles( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    [[ var_0 ]]( var_1, var_2, var_3 );
    level thread x1timedivision( var_0, var_1, var_2, var_3, var_4, var_5, var_6 );
}

x1timedivision( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    level endon( "game_ended" );
    scripts\engine\utility::flag_wait( "level_ready_for_script" );
    register_vehicle_build( var_6, var_1, var_2, var_3, var_6 );
    var_8 = spawnstruct();
    copy_vehicle_build_to_spawnpoint( var_5, var_8 );

    if ( var_8 scripts\common\vehicle_code::ishelicopter_internal() )
    {
        add_ai_air_infil( var_5 );
        register_vehicle_spawn( var_5, 10, 10, undefined, "heli_spawner", "heli_exit", "heli_infil_path", undefined, ::veh_heli_spawn, var_6 );
        register_spawner_script_function( var_5, ::ai_lbravo_spawn );
    }
    else
    {
        add_ai_ground_infil( var_5 );
        register_vehicle_spawn( var_5, 10, 10, undefined, "ai_ground_veh_spawner", "ground_veh_exit", "ground_veh_infil_path", undefined, ::veh_ground_veh_spawn, var_6 );
        register_spawner_script_function( var_5, ::ai_ground_veh_spawn );
    }

    zombiejumpbartext( var_6, var_1, var_2, var_3, var_4 );
    var_9 = level.vehicle.templates.aianims[var_3];
    var_10 = 0;

    for ( var_11 = 0; var_11 < var_9.size; var_11++ )
    {
        if ( isdefined( var_9[var_11].idle_anim ) )
            var_10++;
    }

    if ( var_10 > 0 )
        register_vehicle_spawn_drivers( var_5, var_10, scripts\engine\utility::random( [ "aq_pilot_fullbody_1", "aq_pilot_fullbody_2" ] ) );

    if ( isdefined( var_4 ) && getdvarint( "scr_create_mp_vehicles", 0 ) )
        first_move( var_4, var_3, var_6 );

    level notify( var_5 );
}

first_move( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( !isdefined( level.vehicle ) )
        return;

    var_3 = level.vehicle_builds[var_2];
    var_3.vehiclename = var_2;
    flares( var_0, var_1, var_2 );
    flarecooldown( var_0, var_1, var_2 );
    flare_thread( var_0, var_1, var_2 );
    flareready( var_0, var_1, var_2 );
}

flare_thread( var_0, var_1, var_2 )
{
    if ( !isdefined( level.vehicle.interact ) )
        return;

    if ( !isdefined( level.vehicle.interact.vehicledata ) )
        return;

    if ( isdefined( level.vehicle.interact.vehicledata[var_0] ) && !isdefined( level.vehicle.interact.vehicledata[var_2] ) )
    {
        if ( isdefined( level.vehicle.templates.aianims[var_1] ) )
        {
            var_3 = scripts\cp_mp\vehicles\vehicle_interact::vehicle_interact_getleveldataforvehicle( var_2, 1 );

            for ( var_4 = 0; var_4 < level.vehicle.templates.aianims[var_1].size; var_4++ )
            {
                var_5 = level.vehicle.templates.aianims[var_1][var_4];
                var_6 = tolower( var_5.sittag );
                var_3.seatenterarrays[var_6] = [];
                var_3.seatenterarrays[var_6][var_3.seatenterarrays[var_6].size] = var_6;
                var_7 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforseat( var_2, var_6, 1 );

                if ( var_4 == 0 )
                {
                    var_8 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforvehicle( var_2, 1 );
                    var_8.driverseatid = var_6;
                }
            }

            level.vehicle.interact.vehicledata[var_2] = var_3;
        }
    }
}

flares( var_0, var_1, var_2 )
{
    if ( !isdefined( level.vehicle.vehicledata ) )
        return;

    if ( isdefined( level.vehicle.vehicledata[var_0] ) && !isdefined( level.vehicle.vehicledata[var_2] ) )
    {
        var_3 = scripts\cp_mp\vehicles\vehicle::vehicle_getleveldataforvehicle( var_2, 1 );
        var_3.destroycallback = level.vehicle.vehicledata[var_0].destroycallback;
        level.vehicle.vehicledata[var_2] = var_3;
    }
}

flareready( var_0, var_1, var_2 )
{
    if ( !isdefined( level.vehicle.steam_damage_players.vehicledata ) )
        return;

    if ( isdefined( level.vehicle.steam_damage_players.vehicledata[var_0] ) && !isdefined( level.vehicle.steam_damage_players.vehicledata[var_2] ) )
    {
        var_3 = scripts\cp_mp\utility\vehicle_omnvar_utility::_id_12D33( var_2, 1 );
        var_4 = scripts\cp_mp\utility\vehicle_omnvar_utility::_id_12D33( var_0 );
        var_3.blockade_barbwires = var_4.blockade_barbwires;
        var_3.id = var_4.id;
        var_3._id_11B87 = var_4._id_11B87;
        var_3.seatids = var_4.seatids;
        var_3._id_12EB9 = var_4._id_12EB9;
        var_3._id_12EBA = var_4._id_12EBA;
        var_3._id_12EBB = var_4._id_12EBB;
        var_3._id_12EBC = var_4._id_12EBC;
        level.vehicle.steam_damage_players.vehicledata[var_2] = var_3;
    }
}

flag1( var_0, var_1 )
{
    if ( !isdefined( level.vehicle.steam_damage_players.vehicledata ) )
        return;

    if ( isdefined( level.vehicle.steam_damage_players.vehicledata[var_0] ) )
    {
        var_2 = scripts\cp_mp\utility\vehicle_omnvar_utility::_id_12D33( var_0, 1 );
        var_3 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforvehicle( var_0 );
        var_2.seatids = [];
        var_4 = getarraykeys( var_3.seatdata );

        for ( var_5 = 0; var_5 < var_4.size; var_5++ )
            var_2.seatids[var_4[var_5]] = var_1[var_5];

        level.vehicle.steam_damage_players.vehicledata[var_0] = var_2;
    }
}

flarecooldown( var_0, var_1, var_2 )
{
    if ( !isdefined( level.vehicle.occupancy.vehicledata ) )
        return;

    if ( isdefined( level.vehicle.occupancy.vehicledata[var_0] ) && !isdefined( level.vehicle.occupancy.vehicledata[var_2] ) )
    {
        var_3 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforvehicle( var_2, 1 );
        var_3.camera = level.vehicle.occupancy.vehicledata[var_0].camera;
        var_3.damagefeedbackgroupheavy = level.vehicle.occupancy.vehicledata[var_0].damagefeedbackgroupheavy;
        var_3.damagefeedbackgrouplight = level.vehicle.occupancy.vehicledata[var_0].damagefeedbackgrouplight;
        var_3.damagemodifier = level.vehicle.occupancy.vehicledata[var_0].damagemodifier;
        var_3.enterendcallback = level.vehicle.occupancy.vehicledata[var_0].enterendcallback;
        var_3.enterstartcallback = level.vehicle.occupancy.vehicledata[var_0].enterstartcallback;
        var_3.exitdirections = level.vehicle.occupancy.vehicledata[var_0].exitdirections;
        var_3.exitendcallback = level.vehicle.occupancy.vehicledata[var_0].exitendcallback;
        var_3.exitextents = level.vehicle.occupancy.vehicledata[var_0].exitextents;
        var_3.exitoffsets = level.vehicle.occupancy.vehicledata[var_0].exitoffsets;
        var_3.exitstartcallback = level.vehicle.occupancy.vehicledata[var_0].exitstartcallback;
        var_3.restrictions = level.vehicle.occupancy.vehicledata[var_0].restrictions;
        var_3.threatbiasgroup = level.vehicle.occupancy.vehicledata[var_0].threatbiasgroup;
        level.vehicle.occupancy.vehicledata[var_2] = var_3;
    }
}

z_delta( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    if ( !isdefined( level.vehicle ) )
        return;

    if ( !isdefined( level.vehicle.occupancy.vehicledata ) )
        return;

    if ( !isdefined( !isdefined( level.vehicle.occupancy.vehicledata[var_0] ) ) )
        return;

    z_below_check( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 );
}

z_below_check( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforvehicle( var_0, 1 );
    var_9 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforseat( var_0, var_1, 1 );
    var_9.seatswitcharray = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_generateseatswitcharray( var_1, var_2 );
    var_9.restrictions = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getdriverrestrictions();
    var_9.damagemodifier = 0.5;
    var_9.animtag = var_3;
    var_9.exittag = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_animtagtoexittag( var_9.animtag );
    var_9.exitids = var_4;
    var_8.exitoffsets[var_1] = var_5;
    var_8.exitdirections[var_1] = var_6;
    var_9.spawnpriority = 10;
}

zombiedropstags( var_0 )
{
    var_1 = [ "tag_driver", "tag_passenger", "tag_bed1", "tag_bed2", "tag_bed_center" ];
    var_2 = [ "tag_seat_0", "tag_seat_2", "tag_seat_4", "tag_seat_4", "tag_seat_4", "tag_seat_3", "tag_seat_5" ];
    var_3 = var_1;
    var_4 = [];
    var_5 = ( 5, 14, 55 );
    var_6 = "left";
    var_7 = 10;

    if ( isdefined( level.vehicle.interact.vehicledata[var_0] ) && isdefined( isdefined( level.vehicle.interact.vehicledata[var_0].seatenterarrays ) ) )
    {
        var_8 = getarraykeys( level.vehicle.interact.vehicledata[var_0].seatenterarrays );

        for ( var_9 = 0; var_9 < level.vehicle.interact.vehicledata[var_0].seatenterarrays.size; var_9++ )
        {
            var_10 = var_8[var_9];
            var_4 = scripts\engine\utility::array_add( var_3, var_10 );
            z_delta( var_0, var_10, var_1, var_2[var_9], var_4, var_5, var_6, var_7 );
        }
    }
}

x1timehandler( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( !isdefined( level.vehicle ) )
        return;

    if ( !isdefined( level.vehicle.interact ) )
        return;

    if ( !isdefined( level.vehicle.interact.vehicledata ) )
        return;

    if ( isdefined( level.vehicle.interact.vehicledata[var_0] ) )
        return;

    if ( !isarray( var_1 ) )
        var_1 = [ var_1 ];

    if ( isdefined( level.vehicle.interact.vehicledata[var_0].seatenterarrays ) )
    {
        var_2 = level.vehicle.interact.vehicledata[var_0].seatenterarrays;

        for ( var_3 = 0; var_3 < var_2.size; var_3++ )
        {
            for ( var_4 = 0; var_4 < var_1.size; var_4++ )
            {

            }
        }
    }
}

vehicle_registrations( var_0, var_1, var_2, var_3 )
{
    scripts\vehicle\mindia8::main( "veh8_mil_air_ahotel64_ks", "veh_apache_cp", "script_vehicle_apache" );
    scripts\vehicle\mindia8::main( "veh8_mil_air_ahotel64_ks_east_mp", "veh_apache_cp", "script_vehicle_apache_east" );
    register_vehicle_build( "attack_heli_west", "veh8_mil_air_ahotel64_ks", "veh_apache_cp", "script_vehicle_apache" );
    register_vehicle_build( "attack_heli", "veh8_mil_air_ahotel64_ks_east_mp", "veh_apache_cp", "script_vehicle_apache_east" );
    fixuppickuporigin( "script_vehicle_apache" );
    fixuppickuporigin( "script_vehicle_apache_east" );
    level thread find_supply_station( "lbravo_ambient", "veh8_mil_air_lbravo_personnel_cp", "lbravo_infil_cp", "script_vehicle_iw8_lbravo_ambient" );
    register_combined_vehicles( scripts\vehicle\lbravo::main, "veh8_mil_air_lbravo_personnel_cp", "lbravo_infil_cp", "script_vehicle_iw8_lbravo_ambient", undefined, "lbravo_ambient", "lbravo_ambient" );
    register_combined_vehicles( scripts\vehicle\lbravo::main, "veh8_mil_air_lbravo", "lbravo_infil_cp", "script_vehicle_iw8_lbravo_guns", undefined, "lbravo_guns", "lbravo_guns" );
    register_combined_vehicles( scripts\vehicle\lbravo::main, "veh8_mil_air_lbravo_east", "lbravo_infil_cp", "script_vehicle_iw8_lbravo_guns_east", undefined, "lbravo_guns_east", "lbravo_guns_east" );
    register_combined_vehicles( scripts\vehicle\lbravo::main, "veh8_mil_air_lbravo", "lbravo_infil_cp", "script_vehicle_iw8_lbravo", undefined, "lbravo", "lbravo" );
    register_combined_vehicles( scripts\vehicle\lbravo::main, "veh8_mil_air_lbravo_personnel_cp", "lbravo_infil_cp", "script_vehicle_iw8_lbravo_carrier", undefined, "lbravo_carrier", "lbravo_carrier" );
    register_combined_vehicles( scripts\vehicle\lbravo::main, "veh8_mil_air_lbravo_east", "lbravo_infil_cp", "script_vehicle_iw8_lbravo_carrier_east", undefined, "lbravo_carrier_east", "lbravo_carrier_east" );
    register_combined_vehicles( scripts\vehicle\lbravo::main, "veh8_mil_air_lbravo", "lbravo_infil_cp", "script_vehicle_iw8_lbravo_ai_infil", undefined, "lbravo_ai_infil", "lbravo_ai_infil" );
    register_combined_vehicles( scripts\vehicle\blima::main, "veh8_mil_air_blima_cp", "blima_cp", "script_vehicle_iw8_blima", undefined, "blima_exfil", "blima_exfil" );
    register_combined_vehicles( scripts\vehicle\blima::main, "veh8_mil_air_blima_cp", "blima_cp", "script_vehicle_iw8_blima_cp", undefined, "blima", "blima" );
    level thread register_spawner_script_function( "mindia8_jugg", ::ai_mindia8_jugg_spawn, [ "juggernaut" ], 1 );
    level thread zombiejumping( "mindia8_jugg", undefined, undefined, undefined, undefined, undefined, undefined, 3, undefined, undefined );
    register_combined_vehicles( scripts\vehicle\mindia8::main, "veh8_mil_air_mindia8", "mindia8_cp", "script_vehicle_iw8_mindia8_closed", undefined, "mindia8_closed", "mindia8_closed" );
    register_combined_vehicles( scripts\vehicle\mindia8::main, "veh8_mil_air_mindia8_open_back_vm_x_cp", "mindia8_cp", "script_vehicle_iw8_mindia8", undefined, "mindia8", "mindia8" );
    register_combined_vehicles( scripts\vehicle\mindia8_jugg::main, "veh8_mil_air_mindia8_open_back_vm_x_cp", "mindia8_cp", "script_vehicle_iw8_mindia8_jugg", undefined, "mindia8_jugg", "mindia8_jugg" );
    register_combined_vehicles( scripts\vehicle\techo::main, "veh8_civ_lnd_techo_physics_cp", "techo_physics_cp", "script_vehicle_iw8_truck_techo_white_physics", undefined, "techo_white", "techo_white" );
    register_combined_vehicles( scripts\vehicle\techo::main, "veh8_civ_lnd_techo_dirty_physics", "techo_physics_cp", "script_vehicle_iw8_truck_techo_whitedirty_physics", undefined, "techo_whitedirty", "techo_whitedirty" );
    register_combined_vehicles( scripts\vehicle\techo::main, "veh8_civ_lnd_techo_physics_cp", "techo_physics_cp", "script_vehicle_iw8_truck_techo_physics_mp", "technical", "techo_phys", "techo_phys" );
    register_combined_vehicles( scripts\vehicle\techo::main, "veh8_civ_lnd_hindia_physics_mp", "hindia_physics_mp", "script_vehicle_iw8_technical_ai_plr", undefined, "technical_ai_plr", "technical_ai_plr" );
    flag1( "techo_phys", [] );
    zombiedropstags( "techo_phys" );
    zombiedropstags( "techo_white" );
    register_combined_vehicles( scripts\vehicle\decho::main, "veh8_civ_lnd_decho_rebel_dirty_milgreen_physics", "decho_physics_sp", "script_vehicle_iw8_decho_rebel_milgreendirty_physics", undefined, "decho_green", "decho_green" );
    scripts\vehicle\techo::main( "veh8_civ_lnd_techo_dirty_physics", "techo_physics_cp", "script_vehicle_iw8_truck_techo_whitedirty_physics" );
    scripts\vehicle\techo::main( "veh8_civ_lnd_techo_red_physics", "techo_physics_cp", "script_vehicle_iw8_truck_techo_red_physics" );
    scripts\vehicle\techo::main( "veh8_civ_lnd_techo_dirty_red_physics", "techo_physics_cp", "script_vehicle_iw8_truck_techo_reddirty_physics" );
    scripts\vehicle\techo::main( "veh8_civ_lnd_techo_black_physics", "techo_physics_cp", "script_vehicle_iw8_truck_techo_black_physics" );
    scripts\vehicle\techo::main( "veh8_civ_lnd_techo_dirty_black_physics", "techo_physics_cp", "script_vehicle_iw8_truck_techo_blackdirty_physics" );
    scripts\vehicle\techo::main( "veh8_civ_lnd_techo_tan_physics", "techo_physics_cp", "script_vehicle_iw8_truck_techo_tan_physics" );
    scripts\vehicle\techo::main( "veh8_civ_lnd_techo_dirty_tan_physics", "techo_physics_cp", "script_vehicle_iw8_truck_techo_tandirty_physics" );
    scripts\vehicle\techo::main( "veh8_civ_lnd_techo_rusty_physics", "techo_physics_cp", "script_vehicle_iw8_truck_techo_whiterusty_physics" );
    scripts\vehicle\techo::main( "veh8_civ_lnd_techo_rusty_blue_physics", "techo_physics_cp", "script_vehicle_iw8_truck_techo_bluerusty_physics" );
    scripts\vehicle\techo::main( "veh8_civ_lnd_techo_rusty_black_physics", "techo_physics_cp", "script_vehicle_iw8_truck_techo_blackrusty_physics" );
    scripts\vehicle\techo::main( "veh8_civ_lnd_techo_rusty_orange_physics", "techo_physics_cp", "script_vehicle_iw8_truck_techo_orangerusty_physics" );
    scripts\vehicle\techo::main( "veh8_civ_lnd_techo_rusty_green_physics", "techo_physics_cp", "script_vehicle_iw8_truck_techo_greenrusty_physics" );
    scripts\vehicle\techo::main( "veh8_civ_lnd_techo_rebel_physics", "techo_physics_cp", "script_vehicle_iw8_truck_techo_rebel_physics" );
    scripts\vehicle\vindia::main( "veh8_civ_lnd_techo_rebel_physics", "techo_physics_cp", "script_vehicle_iw8_truck_techo_rebel_physics" );
    register_combined_vehicles( scripts\vehicle\mkilo23_ai_infil::main, "veh8_mil_lnd_mkilo23_physics_mp", "mkilo_physics_cp", "script_veh8_mil_lnd_mkilo23_physics_ai_infil", undefined, "mkilo23_ai_infil", "mkilo23_ai_infil" );
    scripts\vehicle\empty_turret::main( "cp_turret_body", "empty_turret", "script_vehicle_empty_turret" );
    scripts\cp\cp_remote_tank::main( "veh8_mil_lnd_whotel", "veh_pac_sentry_mp", "script_vehicle_mp_collmap_wheelson_west" );
    scripts\cp\cp_remote_tank::main( "veh8_mil_lnd_whotel_east", "veh_pac_sentry_mp", "script_vehicle_mp_collmap_wheelson_east" );

    if ( isdefined( level._id_12CDC ) )
        [[ level._id_12CDC ]]();
}

create_vehicle_builds()
{
    if ( isdefined( level.script ) && ( level.script == "cp_chase" || level.script == "cp_blockade" || level.script == "cp_raid_phase1" || level.script == "cp_donetsk" ) )
    {
        if ( getdvarint( "scr_chase_use_cs", 0 ) )
            register_vehicle_build( "pindia", "veh8_mil_lnd_pindia_physics", "techo_phys_convoy_cp", "script_vehicle_iw8_truck_pindia_black" );
        else
            register_vehicle_build( "pindia", "veh8_mil_lnd_pindia", "truck", "script_vehicle_iw8_truck_pindia_white" );
    }
    else
    {
        register_vehicle_build( "pindia_node", "veh8_mil_lnd_pindia", "truck", "script_vehicle_iw8_truck_pindia_white" );
        register_vehicle_build( "pindia", "veh8_mil_lnd_pindia_physics", "techo_phys_convoy_cp", "script_vehicle_iw8_truck_pindia_black" );
    }

    register_vehicle_build( "pindia_ai_plr", "veh8_mil_lnd_pindia_1seat_red_physics_mp", "hindia_physics_mp", "script_vehicle_iw8_truck_pindia_1seat_red_physics", "hoopty" );
    register_vehicle_build( "technical_ai_plr", "veh8_civ_lnd_hindia_physics_mp", "hindia_physics_mp", "script_vehicle_iw8_technical_ai_plr", "technical" );
    register_vehicle_build( "mkilo23_physics", "veh8_mil_lnd_mkilo23_physics", "mkilo23_physics", "script_vehicle_iw8_truck_mkilo23_physics" );
    register_vehicle_build( "mkilo23_ai_infil", "veh8_mil_lnd_mkilo23_physics_mp", "mkilo23_physics", "script_veh8_mil_lnd_mkilo23_physics_ai_infil" );
    register_vehicle_build( "vindia_a2", "veh8_mil_lnd_vindia_a2_physics", "vindia_physics_sp", "script_vehicle_iw8_vindia_a2" );
    register_vehicle_build( "decho", "veh8_civ_lnd_decho_physics", "decho_physics_sp", "script_vehicle_iw8_decho_white_physics" );
}

setup_player_vehicles( var_0, var_1, var_2 )
{
    var_3 = "-";
    var_4 = "&";
    var_5 = "_";
    var_6 = "devgui_cmd \"CP Players:2 / " + var_1 + " / Spawn Vehicle / Little Bird\" \"set scr_vehicle_debug Spawn" + var_5 + var_3 + var_2 + var_3 + var_4 + "little_bird\" \n";
    scripts\cp\utility::addentrytodevgui( var_6 );
    var_6 = "devgui_cmd \"CP Players:2 / " + var_1 + " / Spawn Vehicle / Light Tank\" \"set scr_vehicle_debug Spawn" + var_5 + var_3 + var_2 + var_3 + var_4 + "light_tank\" \n";
    scripts\cp\utility::addentrytodevgui( var_6 );
    var_6 = "devgui_cmd \"CP Players:2 / " + var_1 + " / Spawn Vehicle / Technical\" \"set scr_vehicle_debug Spawn" + var_5 + var_3 + var_2 + var_3 + var_4 + "technical\" \n";
    scripts\cp\utility::addentrytodevgui( var_6 );
    var_6 = "devgui_cmd \"CP Players:2 / " + var_1 + " / Spawn Vehicle / Tac Rover\" \"set scr_vehicle_debug Spawn" + var_5 + var_3 + var_2 + var_3 + var_4 + "tac_rover\" \n";
    scripts\cp\utility::addentrytodevgui( var_6 );
    var_6 = "devgui_cmd \"CP Players:2 / " + var_1 + " / Spawn Vehicle / Hoopty\" \"set scr_vehicle_debug Spawn" + var_5 + var_3 + var_2 + var_3 + var_4 + "hoopty\" \n";
    scripts\cp\utility::addentrytodevgui( var_6 );
    var_6 = "devgui_cmd \"CP Players:2 / " + var_1 + " / Spawn Vehicle / APC\" \"set scr_vehicle_debug Spawn" + var_5 + var_3 + var_2 + var_3 + var_4 + "apc\" \n";
    scripts\cp\utility::addentrytodevgui( var_6 );
    var_6 = "devgui_cmd \"CP Players:2 / " + var_1 + " / Spawn Vehicle / APC RUS\" \"set scr_vehicle_debug Spawn" + var_5 + var_3 + var_2 + var_3 + var_4 + "apc_russian\" \n";
    scripts\cp\utility::addentrytodevgui( var_6 );
    var_6 = "devgui_cmd \"CP Players:2 / " + var_1 + " / Spawn Vehicle / ATV\" \"set scr_vehicle_debug Spawn" + var_5 + var_3 + var_2 + var_3 + var_4 + "atv\" \n";
    scripts\cp\utility::addentrytodevgui( var_6 );
    var_6 = "devgui_cmd \"CP Players:2 / " + var_1 + " / Spawn Vehicle / Cargo Truck\" \"set scr_vehicle_debug Spawn" + var_5 + var_3 + var_2 + var_3 + var_4 + "cargo_truck\" \n";
    scripts\cp\utility::addentrytodevgui( var_6 );
    var_6 = "devgui_cmd \"CP Players:2 / " + var_1 + " / Spawn Vehicle / Cop Car\" \"set scr_vehicle_debug Spawn" + var_5 + var_3 + var_2 + var_3 + var_4 + "cop_car\" \n";
    scripts\cp\utility::addentrytodevgui( var_6 );
    var_6 = "devgui_cmd \"CP Players:2 / " + var_1 + " / Spawn Vehicle / Hoopty Truck\" \"set scr_vehicle_debug Spawn" + var_5 + var_3 + var_2 + var_3 + var_4 + "hoopty_truck\" \n";
    scripts\cp\utility::addentrytodevgui( var_6 );
    var_6 = "devgui_cmd \"CP Players:2 / " + var_1 + " / Spawn Vehicle / Jeep\" \"set scr_vehicle_debug Spawn" + var_5 + var_3 + var_2 + var_3 + var_4 + "jeep\" \n";
    scripts\cp\utility::addentrytodevgui( var_6 );
    var_6 = "devgui_cmd \"CP Players:2 / " + var_1 + " / Spawn Vehicle / Large Transport\" \"set scr_vehicle_debug Spawn" + var_5 + var_3 + var_2 + var_3 + var_4 + "large_transport\" \n";
    scripts\cp\utility::addentrytodevgui( var_6 );
    var_6 = "devgui_cmd \"CP Players:2 / " + var_1 + " / Spawn Vehicle / Med Transport\" \"set scr_vehicle_debug Spawn" + var_5 + var_3 + var_2 + var_3 + var_4 + "med_transport\" \n";
    scripts\cp\utility::addentrytodevgui( var_6 );
    var_6 = "devgui_cmd \"CP Players:2 / " + var_1 + " / Spawn Vehicle / Pickup Truck\" \"set scr_vehicle_debug Spawn" + var_5 + var_3 + var_2 + var_3 + var_4 + "pickup_truck\" \n";
    scripts\cp\utility::addentrytodevgui( var_6 );
    var_6 = "devgui_cmd \"CP Players:2 / " + var_1 + " / Spawn Vehicle / Van\" \"set scr_vehicle_debug Spawn" + var_5 + var_3 + var_2 + var_3 + var_4 + "van\" \n";
    scripts\cp\utility::addentrytodevgui( var_6 );
}

cp_vehicle_debug( var_0 )
{
    var_1 = strtok( var_0, "_" );
    var_2 = strtok( var_0, "-" );
    var_3 = strtok( var_0, "&" );
    var_4 = undefined;

    if ( var_2.size > 0 )
    {
        var_5 = int( var_2[0] );
        var_4 = level.players[var_5];
    }

    switch ( var_1[0] )
    {
        case "Spawn":
        case "spawn":
            if ( isdefined( var_3 ) && var_3.size > 1 )
                scripts\engine\utility::script_func( var_3[1], var_4 );

            break;
        default:
            break;
    }
}

spawn_enemy_chopper( var_0, var_1, var_2 )
{
    var_3 = level.ai_spawn_vehicle_func[var_2];
    var_4 = var_3 get_vehicle_spawn_points( var_1 );

    if ( isdefined( level.br_isplayerbeforeinitialinfildeploy ) )
        return 0;

    if ( scripts\cp\utility::preventleave() )
    {
        if ( isdefined( var_0.valid_vehicles ) )
        {
            if ( isdefined( var_0.valid_vehicles["attack_heli"] ) )
            {
                if ( var_0.valid_vehicles["attack_heli"] == 0 )
                    return 0;
            }
        }

        if ( getdvarint( "scr_survival_disable_bossheli", 0 ) > 0 )
            return 0;
    }

    if ( var_4.size > 0 )
    {
        foreach ( var_6 in var_4 )
        {
            if ( istrue( var_6.in_use ) )
                continue;

            copy_vehicle_build_to_spawnpoint( var_2, var_6 );
            var_7 = vectortoangles( var_1.origin - var_6.origin );
            var_6.angles = ( 0, var_7[1], 0 );
            var_8 = scripts\common\vehicle::vehicle_spawn( var_6 );

            if ( isdefined( var_8 ) )
            {
                var_6.in_use = 1;
                var_8.veh_spawn_point = var_6;
                level.br_isplayerbeforeinitialinfildeploy = var_8;
                var_8 player_equipment_init( var_1, var_0, var_6, var_2 );
                var_0.vehicle = undefined;
                var_1.vehicle = undefined;
                var_1.veh_spawn_point = undefined;
                var_0.woods_two_death_func = undefined;
                var_8 init_helicopter( var_0, var_2 );
                var_8.vehicle_forcerocketdeath = undefined;
                var_8.death_fx_on_self = 1;
                var_8.circle_radius = 2500;
                var_8 scripts\cp\helicopter\cp_helicopter::heli_mg_create( "veh8_mil_air_ahotel64_turret_wm", "apache_turret_cp", "tag_turret" );
                var_8 thread scripts\cp\helicopter\cp_helicopter::setup_pilot( 1, undefined, undefined, undefined );
                var_8 setmaxpitchroll( 15, 15 );
                var_8.health_remaining = 2250;
                level thread scripts\cp\helicopter\cp_helicopter::heli_think_default( var_8 );
                var_8 sethoverparams( 25, 15, 10 );
                var_8.vehicletype = "apache";
                var_8.headicon = deleteheadicon( var_8 );
                setheadiconfriendlyimage( var_8.headicon, "hud_icon_head_equipment_enemy" );
                setheadiconsnaptoedges( var_8.headicon, 12000 );
                setheadiconmaxdistance( var_8.headicon, 1500 );
                addclienttoheadiconmask( var_8.headicon, 10 );
                setheadicondrawthroughgeo( var_8.headicon, 1 );
                var_8.bullets_can_damage = 1;
                var_8.needs_to_evade = 0;
                level thread _id_12D79();

                if ( scripts\cp\utility::preventleave() )
                    return 1;
            }
        }
    }

    return 0;
}

_id_12D79()
{
    var_0 = [ "dx_cps_kama_callout_helicopter_attacking_10", "dx_cps_kama_callout_helicopter_attacking_20", "dx_cps_lass_callout_helicopter_attacking_10", "dx_cps_lass_callout_helicopter_attacking_20" ];
    level scripts\cp\cp_vo::try_to_play_vo_on_team( scripts\engine\utility::random( var_0 ), "allies" );
}

_id_11DE0( var_0 )
{
    if ( isdefined( self.healthbuffer ) )
    {
        self.health = self.healthbuffer + var_0;
        self.maxhealth = self.health;
    }
    else
    {
        self.health = var_0;
        self.maxhealth = self.health;
    }
}

init_helicopter( var_0, var_1 )
{
    self.isheli = 1;
    self.carepackage_spawn = gettime();

    switch ( var_1 )
    {
        case "mindia8_closed":
        case "blima_exfil":
        case "blima":
        case "mindia8_jugg":
        case "mindia8":
            _id_11DE0( 5000 );
            break;
        case "attack_heli":
            _id_11DE0( 50000 );
            break;
        default:
            _id_11DE0( 1250 );
            break;
    }

    thread gasgrenade_crate_player_at_max_ammo();
    self.team = "axis";

    if ( isdefined( self.script_team ) )
        self.team = self.script_team;

    self setvehicleteam( self.team );

    if ( isdefined( var_1 ) && var_1 == "lbravo_carrier" )
        thread removeleadobjective();

    if ( self.team == "axis" )
    {
        level thread scripts\cp\cp_weapon::add_to_special_lockon_target_list( self );
        thread onplayergetsplunder();
    }

    self.dontdisconnectpaths = 1;
    self.vehicle_forcerocketdeath = 1;
    self.death_fx_on_self = 1;

    if ( isdefined( var_1 ) )
    {
        level.ai_spawn_vehicle_func[var_1].count++;

        if ( isdefined( var_0 ) )
            scripts\cp\cp_modular_spawning::add_to_module_vehicles_list( var_0, var_1 );
    }

    level.all_spawned_vehicles[level.all_spawned_vehicles.size] = self;
}

onplayergetsplunder()
{
    level endon( "game_ended" );
    scripts\engine\utility::_id_12E3F( "death", "deleting_vehicle" );
    level thread scripts\cp\cp_weapon::remove_from_special_lockon_target_list( self );
}

gasgrenade_crate_player_at_max_ammo()
{
    self endon( "death" );

    for (;;)
    {
        var_0 = scripts\common\utility::playersnear( self.origin, 256 );

        for ( var_1 = 0; var_1 < var_0.size; var_1++ )
        {
            if ( var_0[var_1].origin[2] > self.origin[2] )
            {
                if ( var_0[var_1].origin[2] - self.origin[2] <= 32 && var_0[var_1] isonground() )
                    var_0[var_1] dodamage( var_0[var_1].health + 1000, self.origin, self, self, "MOD_CRUSH" );
            }
        }

        wait 0.25;
    }
}

removeleadobjective()
{
    self endon( "death" );
    self endon( "unloaded" );
    self notify( "landing_damage_watcher" );
    self endon( "landing_damage_watcher" );
    var_0 = 256;
    var_1 = 80;
    var_2 = 36;

    while ( isdefined( self ) )
    {
        if ( isdefined( self.carepackage_spawn ) && gettime() - self.carepackage_spawn < 5000 )
        {
            wait 0.05;
            continue;
        }

        var_3 = self.origin + ( 0, 0, -140 ) + anglestoforward( self.angles ) * 24;

        if ( self.team == "axis" )
        {
            foreach ( var_5 in level.players )
            {
                if ( isdefined( var_5 ) && isalive( var_5 ) && precache_hint_strings( var_5.origin, var_3, var_1, var_2 ) )
                    var_5 dodamage( var_5.health + 1000, self.origin, self, self, "MOD_CRUSH" );
            }
        }

        var_7 = tablesort( var_3 - ( 0, 0, 200 ), 400, 400 );

        if ( !isdefined( var_7 ) || var_7.size == 0 )
        {
            wait 0.25;
            continue;
        }

        var_7 = sortbydistance( var_7, self.origin );
        var_8 = undefined;

        for ( var_9 = 0; var_9 < var_7.size; var_9++ )
        {
            var_10 = var_7[var_9];

            if ( !isdefined( var_10 ) || var_10 == self )
                continue;

            if ( var_10 vehicle_getspeed() > 1 )
                continue;

            if ( isent( var_10 ) && precache_hint_strings( var_10.origin, var_3, var_0 * 1.5, var_2 ) )
            {
                var_8 = var_10;
                break;
            }
        }

        if ( !isdefined( var_8 ) )
        {
            wait 0.05;
            continue;
        }

        var_11 = var_8;
        var_12 = 0;

        if ( isdefined( var_11.vehiclename ) && var_11.vehiclename == "little_bird" )
            var_12 = 1;

        if ( isdefined( var_11.vehiclename ) && var_11.vehiclename == "little_bird_mg" )
            var_12 = 1;

        if ( isdefined( var_11.play_train_sequence ) && var_11.play_train_sequence == "lbravo_carrier" )
            var_12 = 1;

        if ( isdefined( self.owner ) && isplayer( self.owner ) && isdefined( var_11.owner ) && isplayer( var_11.owner ) )
            var_12 = 0;

        if ( postkillcamplunderlost() && var_11 postkillcamplunderlost() )
            var_12 = 0;

        if ( var_12 )
        {
            var_13 = var_11.health + 1000;
            var_11 notify( "landing_collision_damage", var_13, self );
            var_11.give_full_stoppingpower_clip = 1;
            var_11 dodamage( var_13, self.origin, undefined, undefined, "MOD_CRUSH" );
        }

        wait 0.05;
    }
}

precache_hint_strings( var_0, var_1, var_2, var_3 )
{
    if ( scripts\engine\utility::distance_2d_squared( var_0, var_1 ) > squared( var_2 ) )
        return 0;

    if ( var_0[2] < var_1[2] )
        return 0;

    if ( var_0[2] > var_1[2] + var_3 )
        return 0;

    return 1;
}

postkillcamplunderlost()
{
    if ( isdefined( self.owner ) && isplayer( self.owner ) )
        return 1;

    if ( isdefined( self.occupants ) )
    {
        foreach ( var_1 in self.occupants )
        {
            if ( isdefined( var_1 ) && isplayer( var_1 ) && isalive( var_1 ) )
                return 1;
        }
    }

    return 0;
}

getaverageangularvelocity( var_0 )
{
    self endon( "death" );
    self waittill( "unloaded" );

    if ( isdefined( var_0 ) )
        var_0 delete();
}

player_helis( var_0, var_1 )
{
    self.custom_death_script = ::gametypefilter;

    switch ( var_1 )
    {
        case "techo_whitedirty":
        case "techo_white":
        case "technical_ai_plr":
        case "techo_phys":
            _id_11DE0( 2500 );
            break;
        default:
            _id_11DE0( 1250 );
            break;
    }

    self.vehicle_skipdeathcrash = 1;
    self.team = "axis";
    self setvehicleteam( self.team );

    if ( isdefined( var_1 ) )
    {
        level.ai_spawn_vehicle_func[var_1].count++;

        if ( isdefined( var_0 ) )
            scripts\cp\cp_modular_spawning::add_to_module_vehicles_list( var_0, var_1 );
    }

    thread watch_for_vehicle_stuck();
    level.all_spawned_vehicles[level.all_spawned_vehicles.size] = self;
}

gametypefilter()
{
    self vehicle_setspeedimmediate( 0, 1, 1 );

    if ( isdefined( self.riders ) && self.riders.size > 0 )
    {
        foreach ( var_1 in self.riders )
        {
            if ( !isdefined( var_1 ) || !isalive( var_1 ) )
                continue;

            if ( isdefined( var_1._blackboard ) && isdefined( var_1._blackboard.chosenvehicleanimpos ) )
            {
                if ( istrue( var_1._blackboard.chosenvehicleanimpos.get_cave_combat_logic ) )
                    var_1._blackboard.chosenvehicleanimpos.vehicle_death_ragdoll = 1;
            }
        }
    }
}

heli_think_default()
{
    thread heli_damagemonitor();
    thread heli_check_players();
    thread heli_move();
    thread engage_target_think();
    thread rumble_nearby_players();
}

heli_damagemonitor( var_0, var_1 )
{
    self endon( "death" );
    var_2 = 0;
    self.health = 1000000;

    if ( !isdefined( var_1 ) )
        var_1 = 2500;

    for (;;)
    {
        self waittill( "damage", var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13, var_14, var_15, var_16 );
        self.health = 1000000;

        if ( isdefined( var_4 ) && var_4 == self )
            continue;

        if ( isdefined( var_16 ) && isdefined( var_16.owner ) && var_16.owner == self )
            continue;

        if ( isdefined( var_4 ) && isdefined( self.minigun ) && var_4 == self.minigun )
            continue;

        if ( scripts\cp\helicopter\cp_helicopter::is_snipe_kill( var_4, var_6, var_12 ) )
        {
            var_2++;

            if ( var_2 == 1 )
            {
                if ( isdefined( self.headicon ) )
                    setheadiconimage( self.headicon );

                self.headicon = undefined;
                var_4 scripts\cp\cp_achievement::molotovrecentlyused();
                var_4 thread scripts\cp\so_laststand::givemidmatchaward( "kill_ss_chopper_support" );
                var_4 scripts\cp\cp_persistence::give_player_currency( 500, "large" );
                playfx( level._effect["vfx_blima_explosion"], self.origin );
                var_4 scripts\cp\cp_damagefeedback::updatedamagefeedback( "hitcritical", 1 );
                level.all_spawned_vehicles = scripts\engine\utility::array_remove( level.all_spawned_vehicles, self );
                self.minigun delete();

                if ( isdefined( self.pilot ) )
                    self.pilot delete();

                self notify( "deleting_vehicle" );
                self delete();
                return;
            }

            var_4.lasthitmarkertime = undefined;
            var_4 scripts\cp\cp_damagefeedback::updatedamagefeedback( "hitcritical", 1 );
            self.needs_to_evade = 1;
            self vehicle_setspeed( 100, 100, 100 );
            self setvehgoalpos( self.origin + ( randomintrange( -50, 50 ), randomintrange( -50, 50 ), 0 ), 0 );
            self notify( "needs_to_evade" );
            continue;
        }

        if ( !isexplosivedamagemod( var_7 ) )
        {
            var_4.lasthitmarkertime = undefined;
            var_4 scripts\cp\cp_damagefeedback::updatedamagefeedback( "hitarmorheavy" );
        }
        else
        {
            var_4.lasthitmarkertime = undefined;
            var_4 scripts\cp\cp_damagefeedback::updatedamagefeedback( "hitcritical" );

            if ( isdefined( var_12 ) && isdefined( var_12.basename ) )
            {
                switch ( var_12.basename )
                {
                    case "iw8_thermite_mp":
                        break;
                    case "emp_drone_player_mp":
                        var_3 = 1400;
                        break;
                    default:
                        break;
                }
            }
            else if ( var_3 < 700 )
                var_3 = 700;

            if ( isdefined( var_0 ) && scripts\engine\utility::flag_exist( var_0 ) && !scripts\engine\utility::flag( var_0 ) )
                scripts\engine\utility::flag_set( var_0 );
            else
            {
                if ( !istrue( self.needs_to_evade ) )
                    self.needs_to_evade = 1;

                self notify( "needs_to_evade" );
                self vehicle_setspeed( 100, 100, 100 );
                self setvehgoalpos( self.origin + ( randomintrange( -850, 850 ), randomintrange( -850, 850 ), 0 ), 0 );
            }
        }

        self.health_remaining = self.health_remaining - var_3;

        if ( self.health_remaining <= var_1 * 0.25 && !isdefined( self.deathfx ) )
        {
            playfx( level._effect["aerial_explosion"], self.origin );
            self setscriptablepartstate( "body_damage_heavy", "on" );
            self.deathfx = 1;
        }
        else if ( self.health_remaining <= var_1 * 0.5 && !isdefined( self.deathfx1 ) )
        {
            self setscriptablepartstate( "body_damage_medium", "on" );
            playfx( level._effect["aerial_explosion"], self.origin );
            self.deathfx1 = 1;
        }
        else if ( self.health_remaining <= var_1 * 0.75 && !isdefined( self.deathfx2 ) )
        {
            self setscriptablepartstate( "body_damage_light", "on" );
            self.deathfx2 = 1;
        }

        if ( self.health_remaining <= 0 )
        {
            if ( isdefined( self.headicon ) )
                setheadiconimage( self.headicon );

            self.headicon = undefined;

            if ( isdefined( var_12 ) && issubstr( var_12.basename, "molotov" ) )
            {
                if ( isdefined( var_4 ) && isplayer( var_4 ) )
                    var_4 thread scripts\cp\cp_achievement::monitor();
            }

            if ( isdefined( var_4 ) && isplayer( var_4 ) )
            {
                var_4 thread scripts\cp\so_laststand::givemidmatchaward( "kill_ss_chopper_support" );
                var_4 scripts\cp\cp_persistence::give_player_currency( 500, "large" );
            }

            playfx( level._effect["vfx_blima_explosion"], self.origin );
            var_4 scripts\cp\cp_damagefeedback::updatedamagefeedback( "hitcritical", 1 );
            level.all_spawned_vehicles = scripts\engine\utility::array_remove( level.all_spawned_vehicles, self );
            self.minigun delete();

            if ( isdefined( self.pilot ) )
                self.pilot delete();

            self notify( "deleting_vehicle" );
            self delete();
            continue;
        }

        if ( isdefined( var_4 ) && isplayer( var_4 ) )
            var_4 scripts\cp\cp_persistence::give_player_currency( 10, "large" );
    }
}

fixuppickuporigin( var_0 )
{
    level.vtclassname = var_0;
    scripts\common\vehicle_build::build_rocket_deathfx( "vfx/core/expl/aerial_explosion_heli_large.vfx", "tag_origin", undefined, undefined, undefined, 0, 0, 0 );
}

crash_deathfx()
{
    self waittill( "vehicle_deathComplete", var_0 );
    playfx( level._effect["vfx_blima_explosion"], var_0 + ( 0, 0, -100 ) );
    playsoundatpos( var_0, "cp_br_syrk_chopper_crash" );
}

get_helicopter_path_positions( var_0 )
{
    self.path_positions = [];
    var_1 = 12;
    var_2 = 2048;
    var_3 = 360 / var_1;
    var_4 = self.origin;
    self.flight_pos = undefined;
    self.flight_pos_dot = undefined;

    if ( isdefined( var_0 ) )
    {
        if ( isvector( var_0 ) )
            var_5 = var_0;
        else
            var_5 = var_0.origin;
    }
    else
        var_5 = scripts\cp\utility::get_center_point_of_array( level.players );

    for ( var_6 = 0; var_6 < var_1; var_6++ )
    {
        var_7 = var_3 * var_6;
        var_8 = cos( var_7 ) * var_2;
        var_9 = sin( var_7 ) * var_2;
        var_10 = var_4[0] + var_8;
        var_11 = var_4[1] + var_9;
        var_12 = var_4[2];

        if ( validate_pos( ( var_10, var_11, var_12 ), var_5 ) )
        {
            self.path_positions[self.path_positions.size] = ( var_10, var_11, var_12 );
            continue;
        }
    }
}

draw_capsule_until_notifies( var_0, var_1 )
{
    self endon( "death" );
    self endon( "near_goal" );

    for (;;)
    {
        thread scripts\engine\utility::draw_capsule( var_0, 32, 32, ( 0, 0, 0 ), var_1, 0, 1 );
        waitframe();
    }
}

validate_pos( var_0, var_1 )
{
    if ( isdefined( var_1 ) )
        var_0 = ( var_0[0], var_0[1], var_1[2] + 1500 );

    if ( isdefined( level.heli_triggers ) && level.heli_triggers.size > 0 )
    {
        var_2 = level.heli_triggers;

        for ( var_3 = 0; var_3 < var_2.size; var_3++ )
        {
            if ( !isdefined( var_2[var_3] ) )
            {
                level.heli_triggers = scripts\engine\utility::array_remove( level.heli_triggers, var_2[var_3] );
                continue;
            }

            if ( isdefined( self.move_trigger ) && self.move_trigger == var_2[var_3] )
                continue;

            if ( ispointinvolume( var_0, var_2[var_3] ) )
                return 0;
        }
    }

    if ( scripts\engine\trace::capsule_trace_passed( self.origin, var_0, 256, 512, self.angles, self ) )
    {
        if ( isdefined( var_1 ) )
        {
            var_4 = var_0 - self.origin;

            if ( isvector( var_1 ) )
                var_5 = vectortoangles( var_1 - self.origin );
            else if ( isdefined( var_1.velo_forward ) )
                var_5 = vectortoangles( var_1.velo_forward - self.origin );
            else
                var_5 = vectortoangles( var_1.origin - self.origin );

            var_6 = anglestoforward( var_5 );
            var_7 = vectordot( var_4, var_6 );

            if ( isdefined( self.flight_pos ) )
            {
                if ( var_7 > self.flight_pos_dot )
                {
                    self.flight_pos_dot = var_7;
                    self.flight_pos = var_0;
                }
            }
            else
            {
                self.flight_pos_dot = var_7;
                self.flight_pos = var_0;
            }

            if ( var_7 > 0.3 )
            {
                return 1;
                return;
            }

            return 0;
            return;
        }
        else if ( scripts\engine\math::is_point_in_front( var_0 ) )
            return 1;
        else
            return 0;
    }
    else
        return 0;
}

point_is_towards_target( var_0, var_1 )
{
    var_2 = var_0 - self.origin;
    var_3 = vectortoangles( var_1.origin - self.origin );
    var_4 = anglestoforward( var_3 );
    var_5 = vectordot( var_2, var_4 );
    return var_5 > 0.3;
}

update_every_frame()
{
    level endon( "game_ended" );
    self endon( "death" );

    for (;;)
    {
        if ( isdefined( self.update_state ) )
        {
            switch ( self.update_state )
            {
                default:
                    break;
            }
        }

        waitframe();
    }
}

heli_move()
{
    level endon( "game_ended" );
    self endon( "death" );
    var_0 = self.origin[2];
    self.chopper_height = var_0;
    var_1 = 0;
    var_2 = 5;
    self vehicle_setspeed( 75, 30 );

    for (;;)
    {
        if ( istrue( self.needs_to_evade ) )
        {
            heli_evade( ( self.origin[0], self.origin[1], self.chopper_height ) );
            continue;
        }

        if ( !isdefined( self.best_target ) )
        {
            heli_go_search();
            continue;
        }

        if ( should_move_to_target( self.minigun, self.best_target ) )
        {
            heli_move_to_target( self.best_target );
            continue;
        }

        wait 1;
    }
}

should_move_to_target( var_0, var_1 )
{
    var_2 = 6250000;

    if ( isdefined( self.should_move_to_target_dist ) )
        var_2 = self.should_move_to_target_dist * self.should_move_to_target_dist;

    if ( istrue( self.landed ) )
    {
        self.landed = undefined;
        return 1;
    }

    if ( distance2dsquared( var_0.origin, var_1.origin ) > var_2 || isdefined( self.gotopos ) && distance2dsquared( var_0.origin, self.gotopos ) > var_2 )
        return 1;

    return 0;
}

heli_move_to_target( var_0 )
{
    self endon( "death" );
    self cleartargetyaw();
    self cleargoalyaw();
    self setlookatent( var_0 );

    if ( isdefined( self.best_target ) )
        get_helicopter_path_positions( self.best_target );
    else
        get_helicopter_path_positions();

    var_1 = undefined;

    if ( isdefined( self.flight_pos ) )
        var_1 = self.flight_pos;
    else if ( isdefined( self.path_positions ) && self.path_positions.size > 0 )
        var_1 = scripts\engine\utility::random( self.path_positions );

    if ( isdefined( var_1 ) )
    {
        self setneargoalnotifydist( 750 );

        if ( distance2dsquared( self.origin, var_1 ) > 1440000 )
        {
            self vehicle_setspeed( 50, 30, 30 );
            self setvehgoalpos( var_1, 1 );
        }
        else
        {
            self vehicle_setspeed( 15, 12, 12 );
            self setvehgoalpos( var_1, 0 );
        }

        scripts\engine\utility::_id_12E53( 15, "near_goal" );
    }

    wait 5;
}

heli_evade( var_0 )
{
    self notify( "taking_evasive_actions" );
    self endon( "taking_evasive_actions" );
    self endon( "death" );
    var_1 = 5000;
    get_helicopter_path_positions();
    var_2 = self.path_positions;

    if ( isdefined( var_2 ) && var_2.size > 0 )
    {
        var_3 = 0;
        var_4 = var_2[0];
        self cleargoalyaw();
        self cleartargetyaw();
        self clearlookatent();

        foreach ( var_8, var_6 in var_2 )
        {
            if ( isvector( var_6 ) )
                var_7 = var_6;
            else
                var_7 = var_6.origin;

            if ( scripts\engine\utility::within_fov( self.origin, self.angles, var_7, cos( 25 ) ) )
            {
                var_4 = var_6;
                var_3 = var_8;
                break;
            }
        }

        if ( isvector( var_2[var_3] ) )
            self setvehgoalpos( var_2[var_3], 0 );
        else
            self setvehgoalpos( var_2[var_3].origin, 0 );

        var_9 = 1500;
        var_9 = var_9 * ( var_1 / 5000 );
        var_10 = 100;
        var_10 = var_10 * ( var_1 / 5000 );
        self setneargoalnotifydist( 1500 );
        self vehicle_setspeed( 100, 50, 50 );
        var_11 = 0;
        var_8 = var_3 + 1;
        var_12 = randomint( 4 );

        while ( var_11 < var_2.size - 1 )
        {
            if ( var_8 >= var_2.size )
                var_8 = 0;

            if ( isvector( var_2[var_8] ) )
                self setvehgoalpos( var_2[var_8], 0 );
            else
                self setvehgoalpos( var_2[var_8].origin, 0 );

            self waittill( "near_goal" );
            var_11++;
            var_8++;

            if ( var_11 == var_12 )
                break;
        }
    }

    self.needs_to_evade = 0;
}

rumble_nearby_players()
{
    self endon( "death" );

    for (;;)
    {
        playrumbleonposition( "cp_chopper_rumble", self.origin );
        wait 0.1;
    }
}

circle_around_target()
{
    get_helicopter_path_positions();
}

heli_check_players()
{
    self endon( "death" );
    self.best_target = undefined;
    var_0 = 5;
    var_1 = 0;

    for (;;)
    {
        var_2 = heli_get_target();

        if ( isdefined( var_2 ) )
        {
            var_1 = 0;
            self notify( "target_found" );
            self.best_target = var_2;
        }
        else
        {
            self notify( "target_lost" );
            var_1 = var_1 + 0.25;

            if ( var_1 >= var_0 )
            {
                var_1 = 0;
                self.best_target = undefined;
            }
        }

        wait 0.25;
    }
}

engage_target_think()
{
    level endon( "game_ended" );
    self notify( "engage_target_think" );
    self endon( "engage_target_think" );
    self endon( "death" );
    self.minigun setmode( "manual" );
    self.nextfiretime = gettime() + 2000;

    for (;;)
    {
        while ( isdefined( self.best_target ) )
        {
            self sethoverparams( 150, 35, 35 );

            if ( istrue( self.has_rockets ) )
            {
                wait 2;

                if ( istrue( self.rockets_ready ) )
                    scripts\cp\helicopter\cp_helicopter::hover_and_shoot_rockets( self.best_target );
            }
            else
            {
                self.minigun settargetentity( self.best_target, ( 0, 0, 40 ) );
                var_0 = scripts\engine\utility::waittill_any_ents_or_timeout_return( 3, self.minigun, "turret_on_target" );
                scripts\cp\helicopter\cp_helicopter::shoot_at_target();
            }

            self notify( "target_engaged" );
            self sethoverparams( 0, 0, 0 );
        }

        wait 1;
    }
}

heli_get_target()
{
    var_0 = self.origin;
    var_1 = undefined;
    var_2 = scripts\engine\utility::get_array_of_closest( var_0, level.players );

    for ( var_3 = 0; var_3 < var_2.size; var_3++ )
    {
        var_4 = var_2[var_3];

        if ( !var_4 scripts\cp\utility::is_valid_player( undefined, 0 ) || istrue( var_4 isinfreefall() ) || istrue( var_4 isskydiving() ) || istrue( var_4 isparachuting() ) )
            continue;

        var_0 = ( var_4.origin[0], var_4.origin[1], self.chopper_height );

        if ( !istrue( self.has_rockets ) )
        {
            if ( scripts\engine\trace::ray_trace_passed( var_0, var_4.origin + ( 0, 0, 10 ), [ self, var_4 ] ) )
            {
                var_1 = var_4;
                self.gotopos = var_0;
            }
        }

        if ( !isdefined( var_1 ) )
        {
            var_5 = anglestoright( var_4.angles );
            var_6 = anglestoleft( var_4.angles );
            var_7 = anglestoforward( var_4.angles );
            var_8 = var_7 * -1;
            var_9 = [ var_5, var_6, var_7, var_8 ];

            foreach ( var_11 in var_9 )
            {
                if ( isdefined( var_4.vehicle ) )
                    var_12 = [ self, var_4, var_4.vehicle ];
                else
                    var_12 = [ self, var_4 ];

                var_0 = ( var_4.origin[0], var_4.origin[1], 0 ) + ( var_11[0], var_11[1], 0 ) * 1800 + ( 0, 0, self.chopper_height );

                if ( scripts\engine\trace::ray_trace_passed( var_0, var_4.origin + ( 0, 0, 10 ), var_12 ) )
                {
                    var_1 = var_4;
                    self.gotopos = var_0;
                    self.nocircle = 1;
                    return var_1;
                }
            }
        }

        if ( isdefined( var_1 ) )
            break;
    }

    return var_1;
}

heli_go_search()
{
    level endon( "game_ended" );
    self endon( "target_found" );
    self endon( "needs_to_evade" );
    self endon( "death" );
    self clearlookatent();
    self cleartargetyaw();
    self cleargoalyaw();

    if ( isdefined( self.minigun ) )
        self.minigun cleartargetentity();

    self vehicle_setspeed( 90, 15 );
    self setneargoalnotifydist( 1000 );

    while ( !isdefined( self.best_target ) )
    {
        get_helicopter_path_positions();

        if ( isdefined( self.flight_pos ) )
        {
            var_0 = self.flight_pos;
            self setvehgoalpos( var_0, 0 );
        }
        else if ( isdefined( self.path_positions ) && self.path_positions.size > 0 )
        {
            var_0 = scripts\engine\utility::random( self.path_positions );
            self setvehgoalpos( var_0, 0 );
        }

        self waittill( "near_goal" );
    }
}

is_vehicle_spawnpoint()
{
    return scripts\cp\cp_spawner_scoring::get_spawn_scoring_type() == "vehicle_spawner";
}
