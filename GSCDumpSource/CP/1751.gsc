// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

enable_juggernaut_move_behavior( var_0 )
{
    if ( scripts\cp\cp_modular_spawning::is_specified_unittype( "juggernaut" ) )
        self.juggernautdisablemovebehavior = undefined;
}

disable_juggernaut_move_behavior( var_0 )
{
    if ( scripts\cp\cp_modular_spawning::is_specified_unittype( "juggernaut" ) )
        self.juggernautdisablemovebehavior = 1;
}

enable_cover_node_behavior( var_0 )
{
    self.combatmode = "cover";
}

disable_cover_node_behavior( var_0 )
{
    self.combatmode = "no_cover";
}

end_objective_when_all_dead( var_0, var_1, var_2, var_3 )
{
    var_0 thread end_objective_when_all_dead_interal( var_0, var_1, var_2, var_3 );
}

end_objective_when_all_dead_interal( var_0, var_1, var_2, var_3 )
{
    level endon( "game_ended" );
    var_0 waittill( "all_group_spawns_dead" );

    if ( isdefined( var_2 ) )
        level notify( var_2 );

    if ( isdefined( var_1 ) )
        scripts\cp\cp_objectives::debugbeatobjective( var_1 );
}

disable_spawner_until_owner_death( var_0 )
{
    var_0 scripts\cp\cp_modular_spawning::getterminalhint();
    scripts\engine\utility::waittill_any_ents( self, "death", self.group, "death" );
    var_0 scripts\cp\cp_modular_spawning::set_default_spawner_values();
    var_0 scripts\cp\cp_modular_spawning::hoopty_truck_initdamage();
}

register_module_for_spawn_owner_disables( var_0 )
{
    if ( isdefined( level.ambientgroups[var_0] ) )
    {
        if ( isarray( level.ambientgroups[var_0] ) )
        {
            for ( var_1 = 0; var_1 < level.ambientgroups[var_0].size; var_1++ )
                level.ambientgroups[var_0][var_1].disable_spawners_until_owner_death = 1;
        }
        else
            level.ambientgroups[var_0].disable_spawners_until_owner_death = 1;
    }
}

xanimlength( var_0, var_1, var_2 )
{
    if ( var_1.size != var_2.size )
        return;

    if ( isdefined( level.ambientgroups[var_0] ) )
    {
        if ( isarray( level.ambientgroups[var_0] ) )
        {
            for ( var_3 = 0; var_3 < level.ambientgroups[var_0].size; var_3++ )
            {
                level.ambientgroups[var_0][var_3].moveplayertotoppos = var_1;
                level.ambientgroups[var_0][var_3].move_spawnpoints_to_valid_positions = var_2;
            }
        }
    }
}

little_bird_trail( var_0 )
{
    var_1 = 0;

    if ( !isarray( var_0 ) )
        var_0 = [ var_0 ];

    for ( var_2 = 0; var_2 < var_0.size; var_2++ )
    {
        var_3 = var_0[var_2];
        var_1 = var_1 + scripts\cp\cp_modular_spawning::get_spawn_count_from_groupname( var_3 );
    }

    return var_1;
}

module_disables_spawners_until_owner_death()
{
    return istrue( self.disable_spawners_until_owner_death );
}

combine_module_counters( var_0, var_1 )
{
    if ( !isdefined( level.excludedteams[var_1] ) )
        level.excludedteams[var_1] = [];

    level.excludedteams[var_1][level.excludedteams[var_1].size] = var_0;
    var_0.exclude_me = var_1;
}

_id_119F1( var_0 )
{
    var_1 = var_0 lbravo_spawner_jammer3();
    var_0.exclude_me = undefined;

    if ( !isdefined( var_1 ) )
        return;

    if ( isdefined( level.excludedteams[var_1] ) )
        level.excludedteams[var_1] = scripts\engine\utility::array_remove( level.excludedteams[var_1], var_0 );

    if ( isdefined( level.excludedteams[var_1] ) && level.excludedteams[var_1].size < 1 )
        level.excludedteams[var_1] = undefined;
}

group_has_combined_counters( var_0 )
{
    var_1 = scripts\cp\cp_modular_spawning::get_module_structs_by_groupname( var_0 );

    for ( var_2 = 0; var_2 < var_1.size; var_2++ )
    {
        var_3 = var_1[var_2];

        if ( isdefined( var_3.exclude_me ) )
            return 1;
    }

    return 0;
}

lbravo_spawner_jammer3()
{
    return self.exclude_me;
}

register_module_init_func( var_0, var_1 )
{
    if ( isarray( level.ambientgroups[var_0] ) )
    {
        for ( var_2 = 0; var_2 < level.ambientgroups[var_0].size; var_2++ )
        {
            if ( !isdefined( level.ambientgroups[var_0][var_2].module_init_funcs ) )
                level.ambientgroups[var_0][var_2].module_init_funcs = [];

            level.ambientgroups[var_0][var_2].module_init_funcs[level.ambientgroups[var_0][var_2].module_init_funcs.size] = var_1;
        }
    }
    else
    {
        if ( !isdefined( level.ambientgroups[var_0].module_init_funcs ) )
            level.ambientgroups[var_0].module_init_funcs = [];

        level.ambientgroups[var_0].module_init_funcs[level.ambientgroups[var_0].module_init_funcs.size] = var_1;
    }
}

xylimit( var_0, var_1 )
{
    if ( isarray( level.ambientgroups[var_0] ) )
    {
        for ( var_2 = 0; var_2 < level.ambientgroups[var_0].size; var_2++ )
        {
            if ( !isdefined( level.ambientgroups[var_0][var_2].getquickdropplundercount ) )
                level.ambientgroups[var_0][var_2].getquickdropplundercount = [];

            level.ambientgroups[var_0][var_2].getquickdropplundercount[level.ambientgroups[var_0][var_2].getquickdropplundercount.size] = var_1;
        }
    }
    else
    {
        if ( !isdefined( level.ambientgroups[var_0].getquickdropplundercount ) )
            level.ambientgroups[var_0].getquickdropplundercount = [];

        level.ambientgroups[var_0].getquickdropplundercount[level.ambientgroups[var_0].getquickdropplundercount.size] = var_1;
    }
}

run_module_init_funcs_on_module_struct()
{
    if ( isdefined( self.level_module_struct ) )
    {
        var_0 = self.level_module_struct;

        if ( isdefined( var_0.module_init_funcs ) )
        {
            for ( var_1 = 0; var_1 < var_0.module_init_funcs.size; var_1++ )
                scripts\cp\cp_modular_spawning::process_module_var( self, var_0.module_init_funcs[var_1] );
        }
    }
}

xyvelscale_high( var_0, var_1, var_2 )
{
    if ( isarray( level.ambientgroups[var_0] ) )
    {
        for ( var_3 = 0; var_3 < level.ambientgroups[var_0].size; var_3++ )
        {
            if ( !isdefined( level.ambientgroups[var_0][var_3].showquestcircletoall ) )
                level.ambientgroups[var_0][var_3].showquestcircletoall = [];

            level.ambientgroups[var_0][var_3].showquestcircletoall[level.ambientgroups[var_0][var_3].showquestcircletoall.size] = var_1;

            if ( !isdefined( level.ambientgroups[var_0][var_3].showsafecircle ) )
                level.ambientgroups[var_0][var_3].showsafecircle = [];

            level.ambientgroups[var_0][var_3].showsafecircle[level.ambientgroups[var_0][var_3].showsafecircle.size] = var_2;
        }
    }
    else
    {
        if ( !isdefined( level.ambientgroups[var_0].showquestcircletoall ) )
            level.ambientgroups[var_0].showquestcircletoall = [];

        level.ambientgroups[var_0].showquestcircletoall[level.ambientgroups[var_0].showquestcircletoall.size] = var_1;

        if ( !isdefined( level.ambientgroups[var_0].showsafecircle ) )
            level.ambientgroups[var_0].showsafecircle = [];

        level.ambientgroups[var_0].showsafecircle[level.ambientgroups[var_0].showsafecircle.size] = var_2;
    }
}

_id_11BCE()
{
    if ( isdefined( self.level_module_struct ) )
    {
        var_0 = self.level_module_struct;

        if ( isdefined( var_0.showquestcircletoall ) )
        {
            for ( var_1 = 0; var_1 < var_0.showquestcircletoall.size; var_1++ )
                scripts\cp\cp_modular_spawning::process_module_var( self, var_0.showquestcircletoall[var_1] );
        }
    }
}

_id_11BCF()
{
    if ( isdefined( self.level_module_struct ) )
    {
        var_0 = self.level_module_struct;

        if ( isdefined( var_0.showsafecircle ) )
        {
            for ( var_1 = 0; var_1 < var_0.showsafecircle.size; var_1++ )
                scripts\cp\cp_modular_spawning::process_module_var( self, var_0.showsafecircle[var_1] );
        }
    }
}

fake_digit_pool( var_0 )
{
    var_1 = 0;

    if ( isent( self ) && isplayer( self ) )
    {
        var_2 = var_0 - self getorigin();
        var_3 = anglestoforward( self getplayerangles( 1 ) );
        var_1 = vectordot( var_2, var_3 );
    }
    else
    {
        if ( isdefined( self.angles ) )
            var_4 = self.angles;
        else
            var_4 = ( 0, 0, 0 );

        var_2 = var_0 - self.origin;
        var_3 = anglestoforward( var_4 );
        var_1 = vectordot( var_2, var_3 );
    }

    return var_1 > 0;
}

fake_exploder( var_0 )
{
    var_1 = 0;

    if ( isplayer( self ) )
    {
        var_2 = var_0 - self getorigin();
        var_3 = anglestoright( self getplayerangles( 1 ) );
        var_1 = vectordot( var_2, var_3 );
    }
    else
    {
        if ( isdefined( self.angles ) )
            var_4 = self.angles;
        else
            var_4 = ( 0, 0, 0 );

        var_2 = var_0 - self.origin;
        var_3 = anglestoright( var_4 );
        var_1 = vectordot( var_2, var_3 );
    }

    return var_1 > 0;
}

find_ai_spawner( var_0 )
{
    level.agent_definition[var_0] = [];
    level.agent_definition[var_0]["animclass"] = "soldier_cp";
    level.agent_definition[var_0]["asm"] = "soldier_cp";
    level.agent_definition[var_0]["behaviorTree"] = "soldier_agent";
    level.agent_definition[var_0]["health"] = 150;
    level.agent_definition[var_0]["height"] = 70;
    level.agent_definition[var_0]["radius"] = 15;
    level.agent_definition[var_0]["reward"] = 100;
    level.agent_definition[var_0]["setup_func"] = ::spawn_wheelson_redroom;
    level.agent_definition[var_0]["setup_model_func"] = ::intel_spawn_listener;
    level.agent_definition[var_0]["species"] = "human";
    level.agent_definition[var_0]["team"] = "axis";
    level.agent_definition[var_0]["traversal_unit_type"] = "soldier";
    level.agent_definition[var_0]["xp"] = 50;
}

spawn_wheelson_redroom()
{
    self.additionalassets = "";
    self.subclass = "regular";
    self.defaultcoverselector = "cover_default";
    self.enemyselector = "enemyselector_default_cp";
    self.unittype = "soldier";
    self setengagementmindist( 256.0, 0.0 );
    self setengagementmaxdist( 768.0, 1024.0 );
    self.accuracy = 0.2;

    switch ( scripts\code\character::get_random_weapon( 3 ) )
    {
        case 0:
            self.weapon = scripts\cp\cp_weapon::buildweapon( "iw8_ar_akilo47_mp", [ "none", "none", "none", "none", "none", "none" ], "none", "none" );
            break;
        case 1:
            self.weapon = scripts\cp\cp_weapon::buildweapon( "iw8_ar_falpha_mp", [ "none", "none", "none", "none", "none", "none" ], "none", "none" );
            break;
        case 2:
            self.weapon = scripts\cp\cp_weapon::buildweapon( "iw8_ar_falima_mp", [ "none", "none", "none", "none", "none", "none" ], "none", "none" );
            break;
    }

    self giveweapon( self.weapon );
    self setspawnweapon( self.weapon );
    self.bulletsinclip = weaponclipsize( self.weapon );
    self.primaryweapon = self.weapon;
    self.grenadeweapon = getcompleteweaponname( "frag_grenade_mp" );
    self.grenadeammo = 2;
}

intel_spawn_listener( var_0 )
{
    self.animationarchetype = "soldier_cp";
    self.voice = "alqatala";
    self setmodel( "body_spetsnaz_ar" );
    self attach( "head_russian_army_balaclava_1", "", 1 );
    self.headmodel = "head_russian_army_balaclava_1";
}

allsupportboxes( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2.origin = var_0;
    var_2.radius = var_1;
    var_2 scripts\engine\flags::assign_unique_id();
    level._id_122B7[var_2.unique_id] = var_2;
    return var_2.unique_id;
}

_id_11A0C( var_0 )
{
    if ( isdefined( level._id_122B7[var_0] ) )
        level._id_122B7[var_0] = undefined;
}

_id_12760( var_0 )
{
    level._id_1209D = var_0;
}

animscripted_loop_for_time( var_0 )
{
    if ( isdefined( var_0 ) )
        level.getteamspawnbots = var_0;
    else
        level.getteamspawnbots = undefined;
}

get_module_spawn_points()
{
    var_0 = [];
    var_1 = scripts\cp\cp_modular_spawning::process_module_var( self, self.spawn_points );
    return var_1;
}

_id_11E11( var_0, var_1 )
{
    var_0.wires_on_bombs = var_1;
}
