// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

start_coop_push( var_0 )
{
    scripts\cp\cp_create_script_utility::playerspawn( "coop_push_cs" );
    level.get_mortar_impact_pos = ::get_mortar_impact_spot;
    level.bomb_defusal_success_func = ::blockade_bomb_defusal_success_func;
    level.lastcrossbowhadstoppingpower = ::callbackplayeractive;
    level.init_vault_assault_infil = ::camera_loadout_showcase_armory;
    level.unloading_func["mindia8"] = scripts\cp\raid_utility::water_immunity_time;
    level.unloading_func["vindia_a2"] = ::wave_aggro_monitor;
    level.unloading_func["umike_covered_physics"] = ::wave_aggro_array;
    scripts\cp\cp_modular_spawning::register_aitype_setup( "sniper", "actor_enemy_cp_rus_desert_sniper", undefined, undefined );
    scripts\cp\cp_modular_spawning::register_aitype_setup( "rpg_helmet", "actor_enemy_cp_alq_desert_rpg_helmet", undefined, undefined );
    setdvar( "QOSTSKSTO", 0 );
    scripts\cp\raid_utility::airlock_show_doors( [ "zone_blockade" ] );
    scripts\cp\raid_utility::set_raid_checkpoint( "raid_coop_push", "coop_push_player_start" );
    hide_enemy_mortar_shell();
    assign_more_vehicle_unload_groups();
    set_up_modular_spawning();
    aigroundturret_requestmount();
    scripts\cp\bomb_defusal\coop_bomb_defusal::start_coop_bomb_defusal_sequence( "blockade_bomb_defusal_controller" );
    deploy_enemy_turrets();
    scripts\cp\raid_utility::flash_crate_player_at_max_ammo( "sniper_pickup", "weapon_wm_sn_alpha50_brprop", &"COOP_VEHICLE_PUSH/PICK_UP_SNIPER", "iw8_sn_alpha50", [ "vzscope" ] );
    set_up_blockade_gates();
    level thread close_blockade_gates();
    level thread blockade_landmine();
    level thread callback_frontendplayeractive();
    level thread callback_playeractive();
    level thread airlock_show_room_doors();
    level thread vehicle_progress_marker_think();
    level thread player_progress_market_think();

    if ( 1 )
    {
        level thread scripts\cp_mp\xmike109::player_origin_inside_subway_car( ::set_mark_distances );
        level.sentrysettings["manned_turret"].overheattime = 6;
        level.sentrysettings["manned_turret"].cooldowntime = 0.75;
        level.sentrysettings["manned_turret"].burstmin = 60;
        level.sentrysettings["manned_turret"].burstmax = 90;
        level.sentrysettings["manned_turret"].pausemin = 0.2;
        level.sentrysettings["manned_turret"].pausemax = 0.35;
    }

    level waittill( "blockade_sequence_successful" );
    scripts\cp\bomb_defusal\coop_bomb_defusal::originalsubtype();
    stop_all_spawn_groups();
    getridofkillstreakdeployweapon();
    battle_tracks_toggleoffstate();
    scripts\cp\cp_create_script_utility::cleanup_cs_file_objects( "coop_push_cs" );
}

set_mark_distances()
{
    thread scripts\cp_mp\xmike109::givelaststandifneeded( 1 );
}

get_closest_enemy_near_turret()
{
    while ( !isdefined( level.player ) || !isalive( level.player ) )
        wait 1;

    setdvar( "drop_phone", "" );
    wait 1;

    while ( getdvar( "drop_phone" ) != "1" )
        wait 1;

    scripts\cp\bomb_defusal\coop_bomb_defusal::drop_bomb_detonator_from_ai( level.player, "bomb_case" );
}

debug_pre_start_coop_push( var_0 )
{
    scripts\cp\coop_escort::delay_teleport_players( 2, "coop_push_cs_completed", "coop_push_player_start" );
    _id_11E61();
}

init()
{
    scripts\engine\utility::flag_init( "vehicle_progression_flags_have_been_set_up" );
    scripts\engine\utility::flag_init( "post_blockade_combat" );
    scripts\engine\utility::flag_init( "heavy_enemy_spawning_paused" );
    load_vfx();
    scripts\cp\maps\cp_donetsk\milbase\ai_flare.gsc::load_fx();
    level.pindia_positions_override_func = ::pindia_positions_override_func;
    build_vehicles();
}

pindia_positions_override_func( var_0 )
{
    var_0[0].canshootinvehicle = 0;
    var_0[1].canshootinvehicle = 1;
    var_0[2].canshootinvehicle = 1;
    var_0[3].canshootinvehicle = 1;
    var_0[4].canshootinvehicle = 1;
    var_0[5].canshootinvehicle = 1;
    return var_0;
}

_id_11E61()
{
    deploy_vehicle_to_push();
}

start_vehicle_push_sequence()
{
    set_up_modular_spawning();
}

blockade_bomb_defusal_success_func()
{
    level thread scripts\cp\bomb_defusal\coop_bomb_defusal::isvalidcustomweapon();
    _id_124E9();
    wait 1.5;
    airdrop_applyimmediatejuggernaut();
}

deploy_vehicle_to_push()
{
    var_0 = getent( "escort_vehicle_push_volume", "targetname" );
    var_1 = getent( "escort_vehicle_push_clip", "targetname" );
    var_2 = getvehiclenode( "escort_vehicle_start", "targetname" );
    var_3 = spawnvehicle( "veh8_mil_lnd_pindia_black_physics", "target_escort_vehicle", "pindia_physics", var_2.origin, var_2.angles );
    var_3 attachpath( var_2 );
    var_3 startpath();
    var_3 vehicle_setspeedimmediate( 0, 1, 1 );
    var_3 hidepart( "tag_trunk" );
    var_3 hidepart( "tag_accessory_02" );
    var_3 thread vehicle_to_push_damage_monitor( var_3 );
    var_3 thread reach_end_monitor( var_3 );
    var_3 set_up_bomb_model_marker( var_3 );
    var_3.getteamplunder = 1;
    var_3.init_gas_vents = var_0;
    var_3.init_gas_trap_room = var_1;
    var_4 = spawn( "script_model", var_3.origin );
    var_4 notsolid();
    var_4 setmodel( "veh8_mil_lnd_pindia_bomb" );
    var_4.angles = var_3.angles;
    var_4 linkto( var_3, "tag_origin_animate" );
    var_4 thread camera_loadout_showcase_preview_sticker_alt3( var_3, var_4 );
    level.vehicle_to_push = var_3;
    var_1 linkto( var_3 );
    var_0 enablelinkto();
    var_0 linkto( var_3 );
    var_0 thread player_push_monitor( var_0, var_3 );
}

set_up_bomb_model_marker( var_0 )
{
    var_1 = 5;
    var_2 = 1;
    var_3 = anglestoleft( var_0.angles );
    var_4 = anglestoup( var_0.angles );
    var_5 = scripts\engine\utility::getstruct( "vehicle_to_push_bomb_marker", "targetname" );
    var_6 = spawn( "script_model", var_5.origin + var_3 * var_1 + var_4 * var_2 );
    var_6 setmodel( "tag_origin" );
    var_6.angles = var_5.angles;
    var_6 linkto( var_0 );
    var_0.bomb_model = var_6;
}

activate_bomb_interactions( var_0, var_1 )
{
    var_2 = set_achievements_blocker( var_0 );
    var_2 thread transientname( var_2, var_0 );
}

set_achievements_blocker( var_0 )
{
    var_1 = var_0.bomb_model.origin;
    var_2 = spawn( "script_model", var_1 );
    var_2 setmodel( "tag_origin" );
    var_2.angles = var_0.bomb_model.angles;
    var_2 makeusable();
    var_2 sethintstring( &"COOP_VEHICLE_PUSH/PLACE_C4" );
    var_2 setcursorhint( "HINT_BUTTON" );
    var_2 sethintdisplayrange( 156 );
    var_2 sethintdisplayfov( 90 );
    var_2 setuserange( 128 );
    var_2 setusefov( 60 );
    var_2 sethintonobstruction( "show" );
    var_2 setuseholdduration( "duration_short" );
    var_2 linkto( var_0 );
    return var_2;
}

transientname( var_0, var_1 )
{
    var_0 endon( "death" );

    for (;;)
    {
        var_0 waittill( "trigger", var_2 );

        if ( isplayer( var_2 ) )
        {
            var_2 playsound( "cp_car_bomb_toss" );
            break;
        }
    }

    place_bomb_in_the_vehicle( var_1 );
    var_0 delete();
}

place_bomb_in_the_vehicle( var_0 )
{
    var_0.bomb_model setmodel( "offhand_vm_briefcase_bomb_c4_cp" );
    var_0.bomb_model notsolid();
    var_0 playsound( "cp_car_bomb_drop" );
    var_0.bomb_is_loaded = 1;
    try_activate_final_bomb_detonate_sequence( var_0 );
}

airdrop_applyimmediatejuggernaut()
{
    foreach ( var_1 in level.bombs_for_coop_bomb_defusal )
        var_1 thread damage_players_on_blades( var_1 );
}

damage_players_on_blades( var_0 )
{
    var_1 = seq3_tier( var_0.c4 );

    for (;;)
    {
        var_1 waittill( "trigger", var_2 );

        if ( isplayer( var_2 ) )
            break;
    }

    activate_bomb_interactions( level.vehicle_to_push, var_2 );

    foreach ( var_4 in var_0.wire_look_at_markers )
        var_4.wire_model delete();

    var_0.c4 delete();
    var_1 delete();
    return;
}

seq3_tier( var_0 )
{
    var_1 = var_0.origin + anglestoup( var_0.angles ) * 1;
    var_2 = spawn( "script_model", var_1 );
    var_2 setmodel( "tag_origin" );
    var_2.angles = var_0.angles;
    var_2 makeusable();
    var_2 sethintstring( &"COOP_VEHICLE_PUSH/PICK_UP_C4" );
    var_2 setcursorhint( "HINT_BUTTON" );
    var_2 sethintdisplayrange( 156 );
    var_2 sethintdisplayfov( 90 );
    var_2 setuserange( 128 );
    var_2 setusefov( 60 );
    var_2 sethintonobstruction( "show" );
    var_2 setuseholdduration( "duration_short" );
    var_2 linkto( var_0 );
    return var_2;
}

player_push_monitor( var_0, var_1 )
{
    var_1 endon( "death" );
    var_2 = 0;
    var_3 = 0;

    for (;;)
    {
        var_4 = get_num_of_player_touching_volume( var_0 );

        if ( var_4 > 0 )
            level notify( "vehicle_is_being_pushed" );

        if ( var_2 != var_4 )
        {
            var_1 vehicle_setspeedimmediate( get_new_vehicle_speed( var_4 ), 1, 1 );

            if ( var_4 > 0 )
            {
                if ( var_3 == 0 )
                {
                    var_1 playloopsound( "temp_vehicle_surface_sfx" );
                    var_3 = 1;
                }
            }
            else
            {
                var_1 stoploopsound( "temp_vehicle_surface_sfx" );
                var_3 = 0;
            }

            var_2 = var_4;
        }

        waitframe();
    }
}

get_new_vehicle_speed( var_0 )
{
    var_1 = 0;

    switch ( var_0 )
    {
        case 1:
            var_1 = 1.405;
            break;
        case 2:
            var_1 = 2.81;
            break;
        case 3:
            var_1 = 2.81;
            break;
        case 4:
            var_1 = 2.81;
            break;
    }

    return var_1;
}

get_num_of_player_touching_volume( var_0 )
{
    var_1 = 0;

    foreach ( var_3 in level.players )
    {
        if ( scripts\cp\cp_laststand::player_in_laststand( var_3 ) )
            continue;

        if ( var_3 getstance() == "prone" )
            continue;

        if ( var_3 istouching( var_0 ) )
        {
            set_player_is_pushing_vehicle( var_3 );
            var_1++;
        }
    }

    return var_1;
}

set_player_is_pushing_vehicle( var_0 )
{
    if ( !istrue( var_0.is_pushing_vehicle ) )
    {
        var_0.is_pushing_vehicle = 1;
        var_0 thread continue_to_push_monitor( var_0 );
    }
}

unset_player_is_pushing_vehicle( var_0 )
{
    if ( istrue( var_0.is_pushing_vehicle ) )
        var_0.is_pushing_vehicle = 0;
}

continue_to_push_monitor( var_0 )
{
    var_0 endon( "disconnect" );
    var_1 = spawn( "script_model", var_0.origin );
    var_1 setmodel( "tag_origin" );
    var_0 playerlinkto( var_1, "tag_origin" );
    var_1 linkto( level.vehicle_to_push );
    var_1 thread player_mover_clean_up_monitor( var_0, var_1 );
    var_0 thread player_push_vehicle_stance_update_think( var_0 );

    for (;;)
    {
        if ( scripts\cp\cp_laststand::player_in_laststand( var_0 ) )
            break;

        if ( !player_controller_push_along_vehicle( var_0 ) )
            break;

        waitframe();
    }

    var_0 unlink();
    var_0 allowstand( 1 );
    var_0 allowcrouch( 1 );
    var_0 allowprone( 1 );
    var_0 notify( "stop_pushing_vehicle" );

    if ( isdefined( var_1 ) )
        var_1 delete();

    unset_player_is_pushing_vehicle( var_0 );
}

player_mover_clean_up_monitor( var_0, var_1 )
{
    var_1 endon( "death" );
    var_0 scripts\engine\utility::_id_12E47( "disconnect", "last_stand" );
    var_1 delete();
}

player_controller_push_along_vehicle( var_0 )
{
    var_1 = var_0 getnormalizedmovement();
    var_2 = var_1[0];
    var_3 = var_1[1];

    if ( abs( var_2 ) == 0 && abs( var_3 ) == 0 )
        return 0;

    var_4 = get_player_controller_direction_in_world( var_0 );
    var_5 = anglestoforward( level.vehicle_to_push.angles );
    var_6 = acos( vectordot( var_4, var_5 ) );
    return var_6 >= 0 && var_6 <= 30 || var_6 >= 330 && var_6 < 360;
}

get_player_controller_direction_in_world( var_0 )
{
    var_1 = anglestoforward( var_0 getplayerangles() );
    var_2 = anglestoright( var_0 getplayerangles() );
    var_3 = var_0 getnormalizedmovement();
    var_4 = var_3[0];
    var_5 = var_3[1];
    return vectornormalize( ( var_1 * var_4 + var_2 * var_5 ) * ( 1, 1, 0 ) );
}

player_push_vehicle_stance_update_think( var_0 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "stop_pushing_vehicle" );
    var_0 notify( "player_push_vehicle_stance_update_think" );
    var_0 endon( "player_push_vehicle_stance_update_think" );
    var_1 = var_0 getstance();

    switch ( var_1 )
    {
        case "stand":
            var_0 allowstand( 1 );
            var_0 allowcrouch( 0 );
            var_0 allowprone( 0 );
            break;
        case "crouch":
            var_0 allowcrouch( 1 );
            var_0 allowstand( 0 );
            var_0 allowprone( 0 );
            break;
        default:
            break;
    }

    var_0 notifyonplayercommand( "change_stance", "+stance" );

    for (;;)
    {
        var_0 waittill( "change_stance" );
        var_1 = var_0 getstance();

        switch ( var_1 )
        {
            case "stand":
                var_0 allowcrouch( 1 );
                var_0 allowstand( 0 );
                var_0 allowprone( 0 );
                break;
            case "crouch":
                var_0 allowstand( 1 );
                var_0 allowcrouch( 0 );
                var_0 allowprone( 0 );
                break;
            default:
                break;
        }
    }
}

vehicle_to_push_damage_monitor( var_0 )
{
    var_0 endon( "death" );
    var_0 setcandamage( 1 );
    var_0.health = 999999;
    var_0.maxhealth = 999999;

    for (;;)
    {
        var_0 waittill( "damage", var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 );
        var_0.health = 999999;
        var_0.maxhealth = 999999;
    }
}

reach_end_monitor( var_0 )
{
    var_0 endon( "death" );
    var_0 waittill( "reached_end_node" );
    var_0.reached_end_node = 1;
    try_activate_final_bomb_detonate_sequence( var_0 );
}

try_activate_final_bomb_detonate_sequence( var_0 )
{
    if ( !istrue( var_0.reached_end_node ) )
        return;

    if ( !istrue( var_0.bomb_is_loaded ) )
        return;

    var_1 = get_nearby_players( var_0 );

    foreach ( var_3 in var_1 )
        var_3 thread nearby_player_detonate_monitor( var_3, var_0 );

    foreach ( var_6 in level.players )
        var_6 thread display_get_away_from_vehicle_message( var_6, var_0 );
}

nearby_player_detonate_monitor( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_1 endon( "death" );
    var_0 thread display_detonate_hint_message( var_0, var_1 );
    var_0 thread detonate_the_bomb_monitor( var_0, var_1 );
}

get_nearby_players( var_0 )
{
    var_1 = [];

    foreach ( var_3 in level.players )
    {
        if ( distance2dsquared( var_3.origin, var_0.origin ) < 360000 )
            var_1[var_1.size] = var_3;
    }

    return var_1;
}

display_get_away_from_vehicle_message( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_1 endon( "death" );

    for (;;)
    {
        if ( distance2dsquared( var_0.origin, var_1.origin ) < 360000 )
            var_0 scripts\cp\utility::setlowermessage( "too_close_to_vehicle_warning", &"COOP_VEHICLE_PUSH/GET_AWAY_FROM_VEHICLE" );
        else
            var_0 scripts\cp\utility::clearlowermessage( "too_close_to_vehicle_warning" );

        waitframe();
    }
}

display_detonate_hint_message( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_1 endon( "death" );
    var_1 endon( "player_pressed_the_bomb_detonator" );

    for (;;)
    {
        if ( distance2dsquared( var_0.origin, var_1.origin ) >= 360000 )
            var_0 scripts\cp\utility::setlowermessage( "detonate_final_bomb_hint", &"COOP_VEHICLE_PUSH/DETONATE_BOMB_HINT" );
        else
            var_0 scripts\cp\utility::clearlowermessage( "detonate_final_bomb_hint" );

        waitframe();
    }
}

detonate_the_bomb_monitor( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_1 endon( "death" );
    var_1 endon( "player_pressed_the_bomb_detonator" );
    var_0 notifyonplayercommand( "detonate_the_bomb", "+usereload" );
    var_0 notifyonplayercommand( "detonate_the_bomb", "+activate" );

    for (;;)
    {
        var_0 waittill( "detonate_the_bomb" );

        if ( distance2dsquared( var_0.origin, var_1.origin ) < 360000 )
            continue;

        var_1 thread the_bomb_is_detonated( var_0, var_1 );
        return;
    }
}

the_bomb_is_detonated( var_0, var_1 )
{
    var_1 notify( "player_pressed_the_bomb_detonator" );

    foreach ( var_0 in level.players )
        var_0 scripts\cp\utility::clearlowermessage( "detonate_final_bomb_hint" );

    var_4 = getcompleteweaponname( "c4_empty_mp" );
    var_0 giveandfireoffhand( var_4 );
    level thread get_too_far_dist_sq( var_1 );
    wait 1;
    var_0 takeweapon( var_4 );
}

get_too_far_dist_sq( var_0 )
{
    wait 0.65;
    level thread vehicle_to_push_explode_sequence( var_0 );
}

vehicle_to_push_explode_sequence( var_0 )
{
    foreach ( var_2 in level.players )
        var_2 scripts\cp\utility::clearlowermessage( "too_close_to_vehicle_warning" );

    var_0 playsound( "exp_bombsite_lr" );
    callback_trigger();
    var_0.bomb_model delete();
    var_0.init_gas_vents delete();
    var_0.init_gas_trap_room delete();
    var_0 delete();
    level thread open_blockade_gates();
    level notify( "blockade_barrier_clip", "delete" );
    level notify( "blockade_sequence_successful" );
}

callback_trigger()
{
    var_0 = ( 39906.7, 15306, -357.645 );
    var_1 = ( 0, 116.999, 0 );
    scripts\cp\raid_utility::intel_used_logic( "vfx_cp_raid_blockade_gate_explo", var_0, var_1 );
}

deploy_enemy_turrets()
{
    scripts\engine\utility::flag_init( "enemy_turret_only_target_players_in_kill_zone" );
    scripts\engine\utility::flag_set( "enemy_turret_only_target_players_in_kill_zone" );
    var_0 = undefined;

    if ( 1 )
        var_0 = scripts\engine\utility::getstructarray( "manned_turret", "targetname" );

    level.enemy_turrets = [];
    var_1 = scripts\engine\utility::getstructarray( "enemy_turret_marker", "targetname" );

    foreach ( var_3 in var_1 )
    {
        if ( 1 && isdefined( var_0 ) && var_0.size > 0 )
        {
            var_0 = sortbydistance( var_0, var_3.origin );

            if ( distancesquared( var_0[0].origin, var_3.origin ) < 4096 )
                continue;
        }

        deploy_enemy_turret( var_3 );
    }
}

delete_on_death( var_0, var_1 )
{
    var_0 endon( "death" );
    var_1 waittill( "death" );
    var_0 delete();
}

spawn_tag_origin( var_0, var_1 )
{
    var_2 = spawn( "script_model", var_0 );
    var_2 setmodel( "tag_origin" );
    var_2.angles = scripts\engine\utility::ter_op( isdefined( var_1 ), var_1, ( 0, 0, 0 ) );
    return var_2;
}

deploy_enemy_turret( var_0 )
{
    var_1 = spawnturret( "misc_turret", var_0.origin, "iw8_mg_50cal_cp" );
    var_1.angles = var_0.angles;
    var_1 setmodel( "weapon_mg_bravo50_balcony" );
    var_1 setturretteam( "axis" );
    var_1 setmode( "manual" );
    var_1 setdefaultdroppitch( 90 );
    var_1 setleftarc( 180 );
    var_1 setrightarc( 180 );
    var_1 settoparc( 180 );
    var_1 setbottomarc( 180 );
    var_1 setconvergencetime( 0, "yaw" );
    var_1 setconvergencetime( 0, "pitch" );
    var_1 makeunusable();
    var_2 = scripts\engine\utility::getstruct( var_0.target, "targetname" );
    var_1.target_ent = spawn_tag_origin( var_2.origin, var_2.angles );
    var_1.target_ent_marker = var_2;
    var_1 settargetentity( var_1.target_ent );
    var_1.speed = 150;
    var_1.wait_between_shots = 0.1;
    var_1.wait_between_shot_round = 1.5;
    var_1.shots_per_round = 70;
    var_1.track_target_delay = 0.1;
    var_1.warning_time = 0.5;
    level.enemy_turrets[level.enemy_turrets.size] = var_1;
    var_1.target_ent thread delete_on_death( var_1.target_ent, var_1 );
}

activate_enemy_turret( var_0 )
{
    if ( istrue( var_0.getweaponrandomvariantid ) )
        return;

    var_0 thread enemy_turret_fire_think( var_0 );
    var_0 thread player_monitor( var_0 );
    var_0 thread combat_logic( var_0 );
}

deactivate_enemy_turret( var_0 )
{
    var_0 notify( "deactivate_enemy_turret" );
    stop_firing( var_0 );
}

combat_logic( var_0 )
{
    var_0 endon( "death" );
    var_0 endon( "deactivate_enemy_turret" );
    var_0 thread target_select_think( var_0 );
    var_1 = undefined;

    for (;;)
    {
        if ( isdefined( var_0.current_target ) )
        {
            if ( is_different_target( var_1, var_0.current_target ) )
            {
                stop_firing( var_0 );
                wait( randomfloatrange( 0.5, 1 ) );
            }

            if ( !isdefined( var_1 ) )
                start_firing( var_0 );
        }
        else
            stop_firing( var_0 );

        var_1 = var_0.current_target;
        wait 0.5;
    }
}

is_different_target( var_0, var_1 )
{
    return isdefined( var_0 ) && var_0 != var_1;
}

target_select_think( var_0 )
{
    var_0 endon( "death" );
    var_0 endon( "deactivate_enemy_turret" );
    var_0.current_target = undefined;

    for (;;)
    {
        var_1 = scripts\cp\raid_utility::get_players_not_in_laststand();

        if ( scripts\engine\utility::flag( "enemy_turret_only_target_players_in_kill_zone" ) )
            var_1 = get_players_in_killzone( var_1 );

        var_2 = 9;
        var_3 = undefined;

        foreach ( var_5 in var_1 )
        {
            var_6 = get_player_target_score( var_5, var_0 );

            if ( var_6 > var_2 )
            {
                var_2 = var_6;
                var_3 = var_5;
            }
        }

        if ( isdefined( var_3 ) )
        {
            var_0.current_target = var_3;
            var_0.target_ent.origin = get_target_ent_position_on_player( var_3, var_0 );
        }
        else
        {
            var_0.current_target = undefined;
            var_0.target_ent.origin = var_0.target_ent_marker.origin;
        }

        wait 0.05;
    }
}

get_players_in_killzone( var_0 )
{
    var_1 = [];
    var_2 = getent( "bridge_kill_zone", "targetname" );

    foreach ( var_4 in var_0 )
    {
        if ( var_4 istouching( var_2 ) )
            var_1[var_1.size] = var_4;
    }

    return var_1;
}

player_is_in_killzone( var_0 )
{
    var_1 = getent( "bridge_kill_zone", "targetname" );

    if ( var_0 istouching( var_1 ) )
        return 1;
    else
        return 0;
}

get_target_ent_position_on_player( var_0, var_1 )
{
    var_2 = var_0 getvelocity();
    var_3 = var_1 gettagorigin( "tag_flash" );
    var_4 = distance( var_3, var_0.origin );
    var_5 = var_4 / 6000;
    var_6 = var_0.origin + var_2 * var_5;

    if ( is_player_part_exposed_to_enemy_turret( var_0, var_1, "origin" ) )
        return var_6;
    else
        return var_6 + ( var_0 geteye() - var_0.origin );
}

get_player_target_score( var_0, var_1 )
{
    var_2 = 25000000;
    var_3 = 0;

    if ( is_player_part_exposed_to_enemy_turret( var_0, var_1, "eye" ) )
        var_3 = var_3 + 45;

    if ( is_player_part_exposed_to_enemy_turret( var_0, var_1, "origin" ) )
        var_3 = var_3 + 45;

    var_4 = distance2dsquared( var_0.origin, var_1.origin );
    var_3 = var_3 + 9 * ( 1 - clamp( var_4 / var_2, 0, 1 ) );
    return var_3;
}

is_player_part_exposed_to_enemy_turret( var_0, var_1, var_2 )
{
    var_3 = var_1.player_exposure_data[var_0 getentitynumber()];
    return scripts\engine\utility::array_contains( var_3.loc_exposed_to_enemy_turret, var_2 );
}

player_monitor( var_0 )
{
    foreach ( var_2 in level.players )
        var_2 thread enemy_turret_player_monitor( var_2, var_0 );

    level thread enemy_turret_players_connect_monitor( var_0 );
}

enemy_turret_players_connect_monitor( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "death" );
    var_0 endon( "deactivate_enemy_turret" );

    for (;;)
    {
        level waittill( "connected", var_1 );
        var_1 thread enemy_turret_player_monitor( var_1, var_0 );
    }
}

enemy_turret_player_monitor( var_0, var_1 )
{
    var_0 thread exposure_monitor( var_0, var_1 );
    var_0 thread speed_monitor( var_0, var_1 );
}

exposure_monitor( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_1 endon( "death" );
    var_1 endon( "deactivate_enemy_turret" );

    if ( !isdefined( var_1.player_exposure_data ) )
        var_1.player_exposure_data = [];

    var_2 = var_0 getentitynumber();
    var_3 = spawnstruct();
    var_4 = scripts\engine\trace::create_contents( 1, 1, 1, 1, 1, 1, 1, 1, 1 );
    var_3.exposed_to_enemy_turret_time = 0;

    for (;;)
    {
        var_3.loc_exposed_to_enemy_turret = [];

        if ( scripts\engine\trace::ray_trace_passed( var_0.origin, var_1 gettagorigin( "tag_aim" ), [ var_1 ], var_4 ) )
            var_3.loc_exposed_to_enemy_turret[var_3.loc_exposed_to_enemy_turret.size] = "origin";

        if ( scripts\engine\trace::ray_trace_passed( var_0 geteye() + ( 0, 0, -5 ), var_1 gettagorigin( "tag_aim" ), [ var_1 ], var_4 ) )
            var_3.loc_exposed_to_enemy_turret[var_3.loc_exposed_to_enemy_turret.size] = "eye";

        if ( var_3.loc_exposed_to_enemy_turret.size > 0 )
            var_3.exposed_to_enemy_turret_time = var_3.exposed_to_enemy_turret_time + 0.05;
        else
            var_3.exposed_to_enemy_turret_time = 0;

        var_1.player_exposure_data[var_2] = var_3;
        waitframe();
    }
}

speed_monitor( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_1 endon( "death" );
    var_1 endon( "deactivate_enemy_turret" );

    for (;;)
    {
        var_2 = var_0.origin;
        wait 0.05;
        var_3 = var_0.origin;
        var_0.speed = length( var_2 - var_3 );
    }
}

enemy_turret_fire_think( var_0 )
{
    var_0 endon( "death" );
    var_0 endon( "deactivate_enemy_turret" );

    for (;;)
    {
        var_0 waittill( "start_firing" );
        reset_enemy_turret_shot_count( var_0 );
        wait( var_0.warning_time );

        while ( enemy_turret_should_keep_firing( var_0 ) )
        {
            fire_one_shot( var_0 );
            wait( var_0.wait_between_shots );

            if ( !should_continue_current_shot_run( var_0 ) )
            {
                if ( get_shot_fired( var_0 ) == var_0.shots_per_round )
                {
                    reset_enemy_turret_shot_count( var_0 );
                    wait( var_0.wait_between_shot_round );
                }

                if ( !enemy_turret_should_keep_firing( var_0 ) )
                    break;
            }
        }
    }
}

fire_one_shot( var_0 )
{
    var_0 shootturret();
    var_0.shot_count++;
}

reset_enemy_turret_shot_count( var_0 )
{
    var_0.shot_count = 0;
}

enemy_turret_should_keep_firing( var_0 )
{
    return istrue( var_0.keep_firing );
}

start_firing( var_0 )
{
    var_0.keep_firing = 1;
    var_0 notify( "start_firing" );
}

stop_firing( var_0 )
{
    var_0.keep_firing = 0;
}

should_continue_current_shot_run( var_0 )
{
    if ( !enemy_turret_should_keep_firing( var_0 ) )
        return 0;

    if ( get_shot_fired( var_0 ) == var_0.shots_per_round )
        return 0;

    return 1;
}

get_shot_fired( var_0 )
{
    return var_0.shot_count;
}

set_up_modular_spawning()
{
    level endon( "game_ended" );

    if ( !isdefined( level.ambientgroups ) )
        level.ambientgroups = [];

    if ( !isdefined( level.active_spawn_modules ) )
        level.active_spawn_modules = [];

    if ( scripts\engine\utility::flag_exist( "strike_init_done" ) )
        scripts\engine\utility::flag_wait( "strike_init_done" );

    if ( getdvarint( "scr_enemy_nospawn", 0 ) != 0 )
        return;

    level thread enemy_spawner_vehicle_spawned_monitor();

    if ( level.script == "cp_blockade" )
        cp_blockade_spawning();
    else if ( level.script == "cp_raid_phase1" || level.script == "cp_donetsk" || level.script == "cp_dntsk_raid" )
        cp_donetsk_spawning();
}

cp_donetsk_spawning()
{
    scripts\cp\cp_modular_spawning::registerambientgroup( "left_enemy_turret", 1, 1, 999999, [ ::_id_12E66, 1, 10, 20 ], undefined, ::select_left_turret_spawners, undefined, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "right_enemy_turret", 1, 1, 999999, [ ::_id_12E66, 1, 10, 20 ], undefined, ::select_right_turret_spawners, undefined, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "middle_enemy_turret", 1, 1, 999999, [ ::_id_12E66, 1, 7, 15 ], undefined, ::select_middle_turret_spawners, undefined, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "enemy_mortar", 1, 1, 999999, [ ::_id_12E66, 1, 25, 35 ], undefined, ::select_mortar_spawners, undefined, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "enemy_sniper", 1, ::get_enemy_sniper_max_spawn, 999999, [ ::_id_12E66, ::get_enemy_sniper_max_spawn, 15, 25 ], undefined, ::select_enemy_sniper_spawners, undefined, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "bomb_guardian", 1, 1, 1, 0.05, 0, "bomb_guardian_spawner", undefined, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "player_right_side", 2, 6, 6, 1, [ ::wait_all_spawns_dead_and_time, 20, 35, "all_group_spawns_dead" ], "player_right_side_spawner", ::increase_script_maxdist, "player_right_side", undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "player_left_side", 2, 6, 6, 1, [ ::wait_all_spawns_dead_and_time, 20, 35, "all_group_spawns_dead" ], "player_left_side_spawner", ::increase_script_maxdist, "player_left_side", undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "player_left_umike", 2, 8, 8, 0.05, undefined, "player_left_umike_spawner", ::increase_script_maxdist, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "player_right_umike", 2, 8, 8, 0.05, undefined, "player_right_umike_spawner", ::increase_script_maxdist, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "player_left_vindia", 2, 6, 6, 0.05, undefined, "player_left_vindia_spawner", ::increase_script_maxdist, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "player_right_vindia", 2, 6, 6, 0.05, undefined, "player_right_vindia_spawner", ::increase_script_maxdist, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "mid_bridge_right", 1, ::get_under_bridge_max_spawn, 999999, [ ::waittill_num_and_all_spawns_dead_and_time, ::get_under_bridge_max_spawn, 10, 20 ], undefined, ::select_mid_bridge_right_spawners, undefined, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "mid_bridge_left", 1, ::get_under_bridge_max_spawn, 999999, [ ::waittill_num_and_all_spawns_dead_and_time, ::get_under_bridge_max_spawn, 10, 20 ], undefined, ::select_mid_bridge_left_spawners, undefined, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "end_bridge_stair", 1, 2, 999999, 4.5, undefined, ::select_end_bridge_stair_spawners, undefined, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "enemy_RPG", 1, ::get_enemy_rpg_max_spawn, 9999999, [ ::waittill_num_and_all_spawns_dead_and_time, ::get_enemy_rpg_max_spawn, 15, 25 ], undefined, ::select_enemy_rpg_spawners, undefined, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "enemy_right", 1, ::get_enemy_right_max_spawn, 999999, 3.5, undefined, ::select_enemy_right_spawners, undefined, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "enemy_left", 1, ::get_enemy_left_max_spawn, 999999, 3.5, undefined, ::select_enemy_left_spawners, undefined, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "under_bridge", 1, 3, 3, 1.5, [ ::waittill_all_spawns_dead_and_time, 3, "underbridge_enemy_death", 5, 8 ], "under_bridge_spawner", ::increase_script_maxdist, "under_bridge_reinforce", undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "under_bridge_reinforce", 1, 2, 8, 3.5, undefined, ::select_under_bridge_reinforce_spawners, undefined, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "enemy_fastrope", 6, 48, 12, 0.5, undefined, "enemy_fastrope_spawner", ::increase_script_maxdist, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "lbravo_carrier_hover", 8, 8, 8, 0.1, 0, "lbravo_carrier_hover", undefined, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "lbravo_carrier_hover_front", 3, 8, 8, 0.1, 0, "lbravo_carrier_hover_front", undefined, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "lbravo_carrier_hover_back", 3, 8, 8, 0.1, 0, "lbravo_carrier_hover_back", undefined, undefined, undefined );
    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "left_enemy_turret", ::turret_enemy_watcher );
    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "right_enemy_turret", ::turret_enemy_watcher );
    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "middle_enemy_turret", ::turret_enemy_watcher );
    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "bomb_guardian", ::bomb_guardian_watcher );
    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "enemy_sniper", ::activate_sniper );
    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "mid_bridge_right", ::bridge_stair_up_enemy );
    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "mid_bridge_left", ::bridge_stair_up_enemy );
    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "end_bridge_stair", ::bridge_stair_up_enemy );
    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "enemy_mortar", ::enemy_mortar_think );
    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "under_bridge", ::underbridge_enemy_monitor );
    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "under_bridge_reinforce", ::_id_12A3C );
    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "enemy_right", ::ignoreattractions );
    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "enemy_left", ::idflags_no_dismemberment );
    scripts\cp\cp_spawning_util::register_module_for_spawn_owner_disables( "enemy_right" );
    scripts\cp\cp_spawning_util::register_module_for_spawn_owner_disables( "enemy_left" );
    scripts\cp\cp_spawning_util::register_module_for_spawn_owner_disables( "under_bridge_reinforce" );
    scripts\cp\cp_spawning_util::register_module_for_spawn_owner_disables( "mid_bridge_right" );
    scripts\cp\cp_spawning_util::register_module_for_spawn_owner_disables( "mid_bridge_left" );
    scripts\cp\cp_spawning_util::register_module_for_spawn_owner_disables( "end_bridge_stair" );
    scripts\cp\cp_spawning_util::register_module_for_spawn_owner_disables( "enemy_sniper" );
    scripts\cp\cp_spawning_util::register_module_for_spawn_owner_disables( "enemy_RPG" );
    level thread run_cp_donetsk_start_spawning();
}

stop_all_spawn_groups()
{
    scripts\cp\cp_modular_spawning::stop_module_by_groupname( "left_enemy_turret" );
    scripts\cp\cp_modular_spawning::stop_module_by_groupname( "right_enemy_turret" );
    scripts\cp\cp_modular_spawning::stop_module_by_groupname( "middle_enemy_turret" );
    scripts\cp\cp_modular_spawning::stop_module_by_groupname( "bomb_guardian" );
    scripts\cp\cp_modular_spawning::stop_module_by_groupname( "player_right_side" );
    scripts\cp\cp_modular_spawning::stop_module_by_groupname( "player_left_side" );
    scripts\cp\cp_modular_spawning::stop_module_by_groupname( "player_left_umike" );
    scripts\cp\cp_modular_spawning::stop_module_by_groupname( "player_right_umike" );
    scripts\cp\cp_modular_spawning::stop_module_by_groupname( "mid_bridge_right" );
    scripts\cp\cp_modular_spawning::stop_module_by_groupname( "mid_bridge_left" );
    scripts\cp\cp_modular_spawning::stop_module_by_groupname( "end_bridge_stair" );
    scripts\cp\cp_modular_spawning::stop_module_by_groupname( "enemy_mortar" );
    scripts\cp\cp_modular_spawning::stop_module_by_groupname( "enemy_RPG" );
    scripts\cp\cp_modular_spawning::stop_module_by_groupname( "enemy_sniper" );
    scripts\cp\cp_modular_spawning::stop_module_by_groupname( "enemy_right" );
    scripts\cp\cp_modular_spawning::stop_module_by_groupname( "enemy_left" );
    scripts\cp\cp_modular_spawning::stop_module_by_groupname( "under_bridge" );
    scripts\cp\cp_modular_spawning::stop_module_by_groupname( "under_bridge_reinforce" );
    scripts\cp\cp_modular_spawning::stop_module_by_groupname( "enemy_fastrope" );
}

run_cp_donetsk_start_spawning()
{
    scripts\engine\utility::flag_wait( "vehicle_progression_flags_have_been_set_up" );
    level thread txt_nag();
    scripts\cp\cp_modular_spawning::run_spawn_module( "left_enemy_turret" );
    scripts\cp\cp_modular_spawning::run_spawn_module( "right_enemy_turret" );
    scripts\cp\cp_modular_spawning::run_spawn_module( "middle_enemy_turret" );
    scripts\cp\cp_modular_spawning::run_spawn_module( "under_bridge" );
    scripts\cp\cp_modular_spawning::run_spawn_module( "bomb_guardian" );
    scripts\engine\utility::flag_wait( "vehicle_entered_bridge" );
    scripts\cp\cp_modular_spawning::run_spawn_module( "enemy_mortar" );
    scripts\engine\utility::flag_wait( "vehicle_bridge_stage_one" );
    scripts\cp\cp_modular_spawning::run_spawn_module( "enemy_right" );
    scripts\cp\cp_modular_spawning::run_spawn_module( "enemy_left" );
    scripts\cp\cp_modular_spawning::run_spawn_module( "lbravo_carrier_hover" );
    scripts\engine\utility::flag_wait( "vehicle_bridge_stage_two" );
    scripts\cp\cp_modular_spawning::run_spawn_module( "enemy_sniper" );
    scripts\cp\cp_modular_spawning::run_spawn_module( "enemy_fastrope" );
    scripts\engine\utility::flag_wait( "vehicle_bridge_stage_three" );
    scripts\cp\cp_modular_spawning::run_spawn_module( "lbravo_carrier_hover_front" );
    scripts\cp\cp_modular_spawning::run_spawn_module( "lbravo_carrier_hover_back" );
    level thread oldprogress();
    scripts\engine\utility::flag_wait( "vehicle_bridge_stage_four" );
    scripts\cp\cp_modular_spawning::run_spawn_module( "mid_bridge_right" );
    scripts\cp\cp_modular_spawning::run_spawn_module( "mid_bridge_left" );
    scripts\engine\utility::flag_wait( "vehicle_bridge_stage_five" );
    scripts\cp\cp_modular_spawning::run_spawn_module( "end_bridge_stair" );
}

oldprogress()
{
    level endon( "game_ended" );
    level endon( "blockade_sequence_successful" );
    level thread respawningbr();

    for (;;)
    {
        level waittill( "laststand_dogtag_spawned", var_0 );
        var_1 = var_0.owner;
        var_1 thread _id_11B07( var_1 );

        if ( postshipmodifychevrons( var_0 ) )
        {
            if ( !bomb_plant_allowed() )
            {
                scripts\engine\utility::flag_set( "heavy_enemy_spawning_paused" );
                level thread tutorialzoneexit();
                scripts\engine\utility::flag_waitopen( "heavy_enemy_spawning_paused" );
            }
        }
    }
}

tutorialzoneexit()
{
    level endon( "game_ended" );
    level endon( "blockade_sequence_successful" );
    level endon( "heavy_enemy_spawning_paused" );
    level waittill( "vehicle_is_being_pushed" );
    scripts\engine\utility::flag_clear( "heavy_enemy_spawning_paused" );
}

_id_11B07( var_0 )
{
    var_1 = 20;
    var_2 = var_0 scripts\engine\utility::_id_12E47( "revive", "disconnect" );

    if ( var_2 == "revive" )
    {
        wait( var_1 );
        scripts\engine\utility::flag_clear( "heavy_enemy_spawning_paused" );
    }
    else if ( var_2 == "disconnect" )
    {
        var_3 = light_tank_monitordriverturretprojectilefire();

        if ( var_3 == 0 )
            scripts\engine\utility::flag_clear( "heavy_enemy_spawning_paused" );
    }
}

respawningbr()
{
    level endon( "game_ended" );
    level endon( "blockade_sequence_successful" );
    level.respawnplayer = [];

    for (;;)
    {
        level waittill( "laststand_dogtag_spawned", var_0 );
        level.respawnplayer = scripts\engine\utility::array_removeundefined( level.respawnplayer );
        level.respawnplayer = scripts\engine\utility::array_add( level.respawnplayer, var_0 );
    }
}

light_tank_monitordriverturretprojectilefire()
{
    var_0 = 0;

    foreach ( var_2 in level.respawnplayer )
    {
        if ( postshipmodifychevrons( var_2 ) )
            var_0++;
    }

    return var_0;
}

bomb_plant_allowed()
{
    var_0 = 0;

    foreach ( var_2 in level.players )
    {
        if ( scripts\cp\cp_laststand::player_in_laststand( var_2 ) )
            continue;

        if ( postshipmodifychevrons( var_2 ) )
        {
            var_0 = 1;
            break;
        }
    }

    return var_0;
}

postshipmodifychevrons( var_0 )
{
    var_1 = getent( "bridge_kill_zone", "targetname" );
    var_2 = getent( "under_bridge_zone", "targetname" );

    if ( ispointinvolume( var_0.origin, var_1 ) )
        return 1;

    if ( ispointinvolume( var_0.origin, var_2 ) )
        return 1;

    return 0;
}

txt_nag()
{
    var_0 = [ "player_left_vindia", "player_right_vindia" ];

    for ( var_1 = 5; var_1 > 0; var_1-- )
        var_0 = scripts\engine\utility::array_randomize( var_0 );

    for (;;)
    {
        if ( any_player_under_bridge() )
            break;

        wait 1;
    }

    scripts\cp\cp_modular_spawning::run_spawn_module( var_0[0] );
    scripts\engine\utility::flag_wait( "vehicle_bridge_stage_five" );
    scripts\cp\cp_modular_spawning::run_spawn_module( var_0[1] );
}

underbridge_enemy_monitor( var_0 )
{
    var_1 = self;
    bomberexplodeheight( var_1 );
    var_1 thread underbridge_enemy_death_monitor( var_1 );
}

_id_12A3C( var_0 )
{
    var_1 = self;
    bomberexplodeheight( var_1 );
}

ignoreattractions( var_0 )
{
    var_1 = self;
    bomberexplodeheight( var_1 );
}

idflags_no_dismemberment( var_0 )
{
    var_1 = self;
    bomberexplodeheight( var_1 );
}

bomberexplodeheight( var_0 )
{
    var_0.maxfaceenemydist = 1200;
    var_0 scripts\cp\cp_modular_spawning::init_bomb_sites();
}

underbridge_enemy_death_monitor( var_0 )
{
    var_0 waittill( "death" );
    level notify( "underbridge_enemy_death" );
}

waittill_all_spawns_dead_and_time( var_0, var_1, var_2, var_3, var_4 )
{
    var_0 endon( "death" );

    if ( isbuiltinfunction( var_1 ) )
        var_5 = [[ var_1 ]]();
    else
        var_5 = var_1;

    var_6 = 0;

    for (;;)
    {
        level waittill( var_2 );
        var_6++;

        if ( var_6 == var_5 )
            break;
    }

    return randomfloatrange( var_3, var_4 );
}

get_enemy_right_max_spawn( var_0 )
{
    if ( scripts\engine\utility::flag( "vehicle_bridge_stage_five" ) )
        return 4;
    else if ( scripts\engine\utility::flag( "vehicle_bridge_stage_four" ) )
        return 3;
    else
        return 2;
}

get_enemy_left_max_spawn( var_0 )
{
    if ( scripts\engine\utility::flag( "vehicle_bridge_stage_five" ) )
        return 5;
    else if ( scripts\engine\utility::flag( "vehicle_bridge_stage_four" ) )
        return 4;
    else
        return 3;
}

get_under_bridge_max_spawn( var_0 )
{
    if ( scripts\engine\utility::flag( "vehicle_bridge_stage_five" ) )
        return 2;
    else
        return 1;
}

get_enemy_rpg_max_spawn( var_0 )
{
    if ( scripts\engine\utility::flag( "vehicle_bridge_stage_three" ) )
        return 2;
    else
        return 1;
}

get_enemy_sniper_max_spawn( var_0 )
{
    if ( scripts\engine\utility::flag( "vehicle_bridge_stage_two" ) )
        return 2;
    else
        return 1;
}

select_left_turret_spawners( var_0 )
{
    if ( 1 )
        return scripts\cp\raid_utility::select_random_spawners( "left_manned_turret_spawner" );
    else
        return scripts\cp\raid_utility::select_random_spawners( "left_enemy_turret_spawner" );
}

select_right_turret_spawners( var_0 )
{
    if ( 1 )
        return scripts\cp\raid_utility::select_random_spawners( "right_manned_turret_spawner" );
    else
        return scripts\cp\raid_utility::select_random_spawners( "right_enemy_turret_spawner" );
}

select_middle_turret_spawners( var_0 )
{
    return scripts\cp\raid_utility::select_random_spawners( "middle_enemy_turret_spawner" );
}

select_enemy_right_spawners( var_0 )
{
    return scripts\cp\raid_utility::select_random_spawners( "enemy_right_spawner" );
}

select_enemy_left_spawners( var_0 )
{
    return scripts\cp\raid_utility::select_random_spawners( "enemy_left_spawner" );
}

select_under_bridge_reinforce_spawners( var_0 )
{
    return scripts\cp\raid_utility::select_random_spawners( "under_bridge_reinforce_spawner" );
}

select_mid_bridge_right_spawners( var_0 )
{
    return scripts\cp\raid_utility::select_random_spawners( "mid_bridge_right_spawner" );
}

select_mid_bridge_left_spawners( var_0 )
{
    return scripts\cp\raid_utility::select_random_spawners( "mid_bridge_left_spawner" );
}

select_end_bridge_stair_spawners( var_0 )
{
    return scripts\cp\raid_utility::select_random_spawners( "end_bridge_stair_spawner" );
}

select_enemy_sniper_spawners( var_0 )
{
    return scripts\cp\raid_utility::select_random_spawners( "enemy_sniper_spawner" );
}

select_enemy_rpg_spawners( var_0 )
{
    return scripts\cp\raid_utility::select_random_spawners( "blockade_RPG_spawner" );
}

select_mortar_spawners( var_0 )
{
    return scripts\cp\raid_utility::select_random_spawners( "mortar_spawner" );
}

left_turret_wait_between_spawn( var_0 )
{
    return randomfloatrange( 5, 10 );
}

cp_blockade_spawning()
{
    scripts\cp\cp_modular_spawning::registerambientgroup( "player_right_building", 8, 8, 8, 0.05, 0, "player_right_building_spawner", undefined, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "player_left_building", 2, 2, 2, 0.05, 0, "player_left_building_spawner", undefined, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "left_enemy_turret", 0, 1, undefined, [ ::wait_all_spawns_dead_and_time, 5, 10, "active_all_group_spawns_dead" ], 0, "left_enemy_turret_spawner", undefined, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "right_enemy_turret", 0, 1, undefined, [ ::wait_all_spawns_dead_and_time, 5, 10, "active_all_group_spawns_dead" ], 0, "right_enemy_turret_spawner", undefined, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "bomb_guardian", 1, 1, 1, 0.05, 0, "bomb_guardian_spawner", undefined, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "player_right_side", 2, 5, 5, 0.05, [ ::wait_all_spawns_dead_and_time, 15, 30, "all_group_spawns_dead" ], "player_right_side_spawner", ::increase_script_maxdist, "player_right_side", undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "player_left_side", 2, 5, 5, 0.05, [ ::wait_all_spawns_dead_and_time, 15, 30, "all_group_spawns_dead" ], "player_left_side_spawner", ::increase_script_maxdist, "player_left_side", undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "mid_bridge", 2, 3, 3, 0.05, [ ::wait_all_spawns_dead, 20, 30 ], "mid_bridge_spawner", ::increase_script_maxdist, "mid_bridge", undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "end_bridge", 2, 3, 3, 0.05, [ ::wait_all_spawns_dead, 20, 30 ], "end_bridge_spawner", ::increase_script_maxdist, "end_bridge", undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "old_bridge", 2, 5, 5, 0.05, [ ::wait_all_spawns_dead, 10, 20 ], "old_bridge_spawner", ::increase_script_maxdist, "old_bridge", undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "right_RPG", 0, 1, undefined, [ ::wait_all_spawns_dead_and_time, 15, 25, "active_all_group_spawns_dead" ], 1.5, "right_RPG_spawner", ::increase_script_maxdist, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "left_RPG", 0, 1, undefined, [ ::wait_all_spawns_dead_and_time, 15, 25, "active_all_group_spawns_dead" ], 1.5, "left_RPG_spawner", ::increase_script_maxdist, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "mid_RPG", 0, 1, undefined, [ ::wait_all_spawns_dead_and_time, 15, 25, "active_all_group_spawns_dead" ], 1.5, "mid_RPG_spawner", ::increase_script_maxdist, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "right_mortar", 0, 1, undefined, [ ::wait_all_spawns_dead_and_time, 20, 30, "active_all_group_spawns_dead" ], 1.5, "right_mortar_spawner", ::increase_script_maxdist, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "left_mortar", 0, 1, undefined, [ ::wait_all_spawns_dead_and_time, 20, 30, "active_all_group_spawns_dead" ], 1.5, "left_mortar_spawner", ::increase_script_maxdist, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "mid_sniper", 0, 1, undefined, [ ::wait_all_spawns_dead_and_time, 20, 30, "active_all_group_spawns_dead" ], 1.5, "mid_sniper_spawner", ::increase_script_maxdist, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "left_sniper", 0, 1, undefined, [ ::wait_all_spawns_dead_and_time, 20, 30, "active_all_group_spawns_dead" ], 1.5, "left_sniper_spawner", ::increase_script_maxdist, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "right_sniper", 0, 1, undefined, [ ::wait_all_spawns_dead_and_time, 20, 20, "active_all_group_spawns_dead" ], 1.5, "right_sniper_spawner", ::increase_script_maxdist, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "enemy_right", 1, 2, undefined, [ ::wait_all_spawns_dead_and_time, 5, 10, "active_all_group_spawns_dead" ], 1.5, "enemy_right_spawner", ::increase_script_maxdist, undefined, undefined );
    scripts\cp\cp_modular_spawning::registerambientgroup( "enemy_left", 1, 3, undefined, [ ::waittill_num_and_all_spawns_dead_and_time, 3, 5, 10 ], 1.5, "enemy_left_spawner", ::increase_script_maxdist, undefined, undefined );
    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "left_enemy_turret", ::turret_enemy_watcher );
    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "right_enemy_turret", ::turret_enemy_watcher );
    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "bomb_guardian", ::bomb_guardian_watcher );
    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "right_sniper", ::activate_sniper );
    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "left_sniper", ::activate_sniper );
    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "mid_sniper", ::activate_sniper );
    level thread run_cp_blockade_start_spawning();
}

wait_no_vehicles_and_time( var_0, var_1, var_2, var_3 )
{
    var_0 endon( "death" );
    var_0 waittill( "vehicle_removed_from_group" );
    wait( randomfloatrange( var_1, var_2 ) );
}

wait_all_spawns_dead( var_0, var_1, var_2, var_3 )
{
    var_0 endon( "death" );
    var_0 waittill( "all_group_spawns_dead" );
}

_id_12E66( var_0, var_1, var_2, var_3 )
{
    var_0 endon( "death" );

    if ( isbuiltinfunction( var_1 ) )
        var_4 = [[ var_1 ]]();
    else
        var_4 = var_1;

    if ( var_0.spawn_count % var_4 == 0 )
    {
        if ( var_0 scripts\cp\cp_modular_spawning::get_activecount_from_group( 1 ) > 0 )
        {
            var_0 waittill( "active_all_group_spawns_dead" );

            if ( scripts\engine\utility::flag( "heavy_enemy_spawning_paused" ) )
                scripts\engine\utility::flag_waitopen( "heavy_enemy_spawning_paused" );

            return randomfloatrange( var_2, var_3 );
        }
        else
            return 1.5;
    }
    else
        return 1.5;
}

waittill_num_and_all_spawns_dead_and_time( var_0, var_1, var_2, var_3 )
{
    var_0 endon( "death" );

    if ( isbuiltinfunction( var_1 ) )
        var_4 = [[ var_1 ]]();
    else
        var_4 = var_1;

    if ( var_0.spawn_count % var_4 == 0 )
    {
        if ( var_0 scripts\cp\cp_modular_spawning::get_activecount_from_group( 1 ) > 0 )
        {
            var_0 waittill( "active_all_group_spawns_dead" );
            return randomfloatrange( var_2, var_3 );
        }
        else
            return 1.5;
    }
    else
        return 1.5;
}

wait_all_spawns_dead_and_time( var_0, var_1, var_2, var_3 )
{
    var_0 endon( "death" );
    var_0 waittill( var_3 );
    wait( randomfloatrange( var_1, var_2 ) );
}

run_cp_blockade_start_spawning()
{
    wait 5;
    scripts\cp\cp_modular_spawning::run_spawn_module( "left_enemy_turret" );
    scripts\cp\cp_modular_spawning::run_spawn_module( "right_enemy_turret" );
    scripts\cp\cp_modular_spawning::run_spawn_module( "bomb_guardian" );
    var_0 = get_player_side_spawn_group_randomized();
    var_1 = get_rpg_group_randomized();
    var_2 = get_mortar_group_randomized();
    var_3 = get_sniper_group_randomized();
    var_4 = get_enemy_group_randomized();
    scripts\engine\utility::flag_wait( "vehicle_entered_bridge" );
    scripts\cp\cp_modular_spawning::run_spawn_module( var_1[0] );
    scripts\engine\utility::flag_wait( "vehicle_bridge_stage_one" );
    scripts\cp\cp_modular_spawning::run_spawn_module( var_0[0] );
    scripts\cp\cp_modular_spawning::run_spawn_module( var_1[1] );
    scripts\engine\utility::flag_wait( "vehicle_bridge_stage_two" );
    scripts\cp\cp_modular_spawning::run_spawn_module( var_0[1] );
    scripts\cp\cp_modular_spawning::run_spawn_module( "mid_bridge" );
    scripts\cp\cp_modular_spawning::run_spawn_module( var_3[0] );
    scripts\cp\cp_modular_spawning::run_spawn_module( var_1[2] );
    scripts\engine\utility::flag_wait( "vehicle_bridge_stage_three" );
    scripts\cp\cp_modular_spawning::run_spawn_module( "end_bridge" );
    scripts\cp\cp_modular_spawning::run_spawn_module( var_3[1] );
    scripts\engine\utility::flag_wait( "vehicle_bridge_stage_four" );
    scripts\cp\cp_modular_spawning::run_spawn_module( "old_bridge" );
    scripts\cp\cp_modular_spawning::run_spawn_module( var_4[0] );
    scripts\cp\cp_modular_spawning::run_spawn_module( var_3[2] );
    scripts\cp\cp_modular_spawning::run_spawn_module( var_2[0] );
    activate_mortar( var_2[0] );
    scripts\engine\utility::flag_wait( "vehicle_bridge_stage_five" );
    scripts\cp\cp_modular_spawning::run_spawn_module( var_4[1] );
    scripts\cp\cp_modular_spawning::run_spawn_module( var_2[1] );
    activate_mortar( var_2[1] );
}

get_player_side_spawn_group_randomized()
{
    return get_randomized_group( [ "player_right_side", "player_left_side" ] );
}

get_rpg_group_randomized()
{
    return get_randomized_group( [ "right_RPG", "left_RPG", "mid_RPG" ] );
}

get_mortar_group_randomized()
{
    return get_randomized_group( [ "right_mortar", "left_mortar" ] );
}

get_sniper_group_randomized()
{
    return get_randomized_group( [ "right_sniper", "left_sniper", "mid_sniper" ] );
}

get_enemy_group_randomized()
{
    return get_randomized_group( [ "enemy_right", "enemy_left" ] );
}

activate_mortar( var_0 )
{
    var_1 = getent( var_0, "targetname" );
    var_1 thread mortar_think( var_1 );
}

mortar_think( var_0 )
{
    var_0 endon( "stop_mortar_think" );
    var_0.targets = undefined;

    for (;;)
    {
        var_1 = scripts\cp\raid_utility::get_players_not_in_laststand();
        var_1 = get_players_in_killzone( var_1 );

        if ( var_1.size > 0 )
        {
            var_0.targets = var_1;
            scripts\cp\maps\cp_donetsk\milbase\ai_flare.gsc::attract_agent_to_mortar( var_0 );
            var_0.targets = undefined;
            wait( randomintrange( 5, 10 ) );
            continue;
        }

        wait 1;
    }
}

get_randomized_group( var_0 )
{
    for ( var_1 = 0; var_1 < 5; var_1++ )
        var_0 = scripts\engine\utility::array_randomize( var_0 );

    return var_0;
}

bridge_stair_up_enemy( var_0 )
{
    var_1 = self;
    var_1 thread bridge_stair_up_combat_think( var_0 );
}

bridge_stair_up_combat_think( var_0 )
{
    self endon( "death" );
    level endon( "game_ended" );
    var_1 = self;
    var_1 waittill( "reached_path_end" );

    if ( any_player_under_bridge() )
        var_1 thread go_hunt_down_player( var_1, 0 );
    else
        var_1 thread go_hunt_down_player( var_1, 1 );
}

activate_sniper( var_0 )
{
    var_1 = self;
    var_1.neverforcesnipermissenemy = 1;
    var_1.sniperaccuracyset = 1;
    var_1.baseaccuracy = 1;
    var_1 laseron();
    bomberexplodeheight( var_1 );
    var_1 thread delay_activate_laser( var_1 );
}

activate_mortar_enemy( var_0 )
{
    var_1 = self;
    var_1.dontevershoot = 1;
}

delay_activate_laser( var_0 )
{
    var_0 endon( "death" );
    var_0 scripts\engine\utility::_id_12E3F( "goal", "goal_reached" );
    var_0.gunposeoverride = "ads";
    var_0 thread sniper_player_monitor( var_0 );
    var_0 thread sniper_target_think( var_0 );
    var_0 thread sniper_laser_think( var_0 );
}

sniper_player_monitor( var_0 )
{
    foreach ( var_2 in level.players )
        var_2 thread enemy_sniper_player_monitor( var_2, var_0 );

    level thread sniper_players_connect_monitor( var_0 );
}

sniper_players_connect_monitor( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "death" );

    for (;;)
    {
        level waittill( "connected", var_1 );
        var_1 thread enemy_sniper_player_monitor( var_1, var_0 );
    }
}

enemy_sniper_player_monitor( var_0, var_1 )
{
    var_0 thread exposure_to_sniper_monitor( var_0, var_1 );
}

exposure_to_sniper_monitor( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_1 endon( "death" );

    if ( !isdefined( var_1.player_exposure_data ) )
        var_1.player_exposure_data = [];

    var_2 = var_0 getentitynumber();
    var_3 = spawnstruct();
    var_4 = scripts\engine\trace::create_contents( 1, 1, 1, 1, 1, 1, 1, 1, 1 );
    var_3.exposed_to_enemy_sniper_time = 0;

    for (;;)
    {
        var_3.loc_exposed_to_enemy_sniper = [];

        if ( scripts\engine\trace::ray_trace_passed( var_0.origin, var_1 geteye(), [ var_1 ], var_4 ) )
            var_3.loc_exposed_to_enemy_sniper[var_3.loc_exposed_to_enemy_sniper.size] = "origin";

        if ( scripts\engine\trace::ray_trace_passed( var_0 geteye(), var_1 geteye(), [ var_1 ], var_4 ) )
            var_3.loc_exposed_to_enemy_sniper[var_3.loc_exposed_to_enemy_sniper.size] = "eye";

        if ( scripts\engine\trace::ray_trace_passed( var_0 gettagorigin( "j_spineupper" ), var_1 geteye(), [ var_1 ], var_4 ) )
            var_3.loc_exposed_to_enemy_sniper[var_3.loc_exposed_to_enemy_sniper.size] = "chest";

        if ( var_3.loc_exposed_to_enemy_sniper.size > 0 )
            var_3.exposed_to_enemy_sniper_time = var_3.exposed_to_enemy_sniper_time + 0.05;
        else
            var_3.exposed_to_enemy_sniper_time = 0;

        var_1.player_exposure_data[var_2] = var_3;
        waitframe();
    }
}

sniper_target_think( var_0 )
{
    var_0 endon( "death" );
    var_0.current_target = undefined;

    for (;;)
    {
        var_1 = scripts\cp\raid_utility::get_players_not_in_laststand();
        var_2 = 9;
        var_3 = undefined;

        foreach ( var_5 in var_1 )
        {
            if ( !isdefined( var_5.num_sniper_covering_me ) )
                var_5.num_snipers_covering_me = 0;

            var_6 = get_player_target_score_for_sniper( var_5, var_0 );

            if ( var_6 > var_2 )
            {
                var_2 = var_6;
                var_3 = var_5;
            }
        }

        if ( isdefined( var_3 ) && is_new_target( var_3, var_0 ) )
        {
            if ( has_current_target( var_0 ) )
            {
                wait( randomfloatrange( 0.5, 1 ) );
                unmark_player_as_sniper_target( var_0.current_target );
            }

            mark_player_as_sniper_target( var_0, var_3 );
            var_3 thread sniper_death_monitor( var_3, var_0 );
            var_8 = var_3 scripts\engine\utility::_id_12E53( randomfloatrange( 1.5, 2 ), "last_stand" );

            if ( var_8 == "last_stand" )
            {
                unmark_player_as_sniper_target( var_3 );
                wait 1.5;
            }

            continue;
        }

        wait 0.05;
    }
}

has_current_target( var_0 )
{
    return isdefined( var_0.current_target );
}

is_new_target( var_0, var_1 )
{
    if ( !has_current_target( var_1 ) )
        return 1;

    return var_1.current_target != var_0;
}

mark_player_as_sniper_target( var_0, var_1 )
{
    var_0.current_target = var_1;
    var_0 getenemyinfo( var_1 );
    var_0 setlookatentity( var_1 );
    var_0.favoriteenemy = var_1;
    var_1.num_snipers_covering_me = var_1.num_snipers_covering_me + 1;
}

unmark_player_as_sniper_target( var_0 )
{
    var_0.num_snipers_covering_me = var_0.num_snipers_covering_me - 1;
}

sniper_death_monitor( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_1 waittill( "death" );
    unmark_player_as_sniper_target( var_0 );
}

get_player_target_score_for_sniper( var_0, var_1 )
{
    var_2 = 25000000;
    var_3 = 0;

    if ( is_player_part_exposed_to_sniper( var_0, var_1, "eye" ) )
        var_3 = var_3 + 45;

    if ( is_player_part_exposed_to_sniper( var_0, var_1, "origin" ) )
        var_3 = var_3 + 45;

    if ( player_is_in_killzone( var_0 ) )
        var_3 = var_3 + 200;

    var_4 = get_player_expose_time_to_sniper( var_0, var_1 );
    var_3 = var_3 + var_4 * 10;
    var_3 = int( max( 0, var_3 + var_0.num_snipers_covering_me * -45 ) );
    var_5 = distance2dsquared( var_0.origin, var_1.origin );
    var_3 = var_3 + 9 * ( 1 - clamp( var_5 / var_2, 0, 1 ) );
    var_3 = var_3 + randomfloat( 18 );
    return var_3;
}

is_player_part_exposed_to_sniper( var_0, var_1, var_2 )
{
    var_3 = var_1.player_exposure_data[var_0 getentitynumber()];
    return scripts\engine\utility::array_contains( var_3.loc_exposed_to_enemy_sniper, var_2 );
}

get_player_expose_time_to_sniper( var_0, var_1 )
{
    var_2 = var_1.player_exposure_data[var_0 getentitynumber()];
    return var_2.exposed_to_enemy_sniper_time;
}

sniper_laser_think( var_0 )
{
    var_0 endon( "death" );
    var_1 = var_0 gettagorigin( "tag_laser_attach" );
    var_2 = create_tag_origin( var_1, var_0 );
    var_2 thread follow_tag_laser_attach( var_0, var_2 );
    var_3 = create_tag_origin( var_1, var_0 );
    var_0.laser_start_ent = var_2;
    var_0.laser_end_ent = var_3;
    var_0 thread replace_turret( var_0 );

    for (;;)
    {
        if ( has_current_target( var_0 ) )
        {
            if ( player_is_exposed_to_sniper( var_0.current_target, var_0 ) )
            {
                if ( !istrue( var_3.is_linked_to_target ) )
                {
                    var_4 = get_target_tag_to_link_to( var_0.current_target, var_0 );
                    var_5 = var_0.current_target gettagorigin( var_4 );
                    var_3.origin = var_5;
                    var_3 linkto( var_0.current_target, var_4 );
                    var_3.is_linked_to_target = 1;
                }
            }
            else
            {
                var_3 unlink();
                var_3.is_linked_to_target = 0;
                var_6 = get_laser_end_pos( var_0.current_target, var_2 );
                var_3 moveto( var_6, 0.25 );
            }
        }

        wait 0.05;
    }
}

replace_turret( var_0 )
{
    var_0 endon( "death" );
    _id_129A1( var_0 );

    for (;;)
    {
        if ( !_id_120F6( var_0 ) && _id_120F7( var_0 ) )
            _id_129A1( var_0 );
        else if ( _id_120F6( var_0 ) && !_id_120F7( var_0 ) )
            _id_12995( var_0 );

        waitframe();
    }
}

_id_129A1( var_0 )
{
    var_1 = playfxontagsbetweenclients( level._effect["sniper_red_laser"], var_0.laser_start_ent, "tag_origin", var_0.laser_end_ent, "tag_origin" );
    var_0._id_120F8 = var_1;
}

_id_12995( var_0 )
{
    var_0._id_120F8 delete();
}

_id_120F6( var_0 )
{
    return isdefined( var_0._id_120F8 );
}

_id_120F7( var_0 )
{
    var_1 = 0.5;
    var_2 = anglestoforward( var_0 getplayerangles() );
    var_3 = vectornormalize( var_0.laser_end_ent.origin - var_0.laser_start_ent.origin );
    var_4 = vectordot( var_3, var_2 );

    if ( var_4 < var_1 )
        return 0;

    var_5 = var_0 getcurrentweapon();

    if ( var_5.classname != "sniper" )
        return 0;

    return 1;
}

get_target_tag_to_link_to( var_0, var_1 )
{
    if ( is_player_part_exposed_to_sniper( var_0, var_1, "chest" ) )
        return "j_spineupper";
    else if ( is_player_part_exposed_to_sniper( var_0, var_1, "eye" ) )
        return "tag_eye";
    else
        return "tag_origin";
}

follow_tag_laser_attach( var_0, var_1 )
{
    var_1 endon( "death" );

    for (;;)
    {
        if ( var_0 tagexists( "tag_laser_attach" ) )
        {
            var_2 = var_0 gettagorigin( "tag_laser_attach" );
            var_1.origin = var_2;
        }

        waitframe();
    }
}

try_shoot_at_current_target( var_0, var_1 )
{
    var_2 = var_0.current_target;

    if ( !isdefined( var_2.time_stamp_can_be_damaged_by_sniper ) )
        var_2.time_stamp_can_be_damaged_by_sniper = 0;

    if ( player_can_take_sniper_damage( var_2 ) && player_expose_to_sniper_long_enough( var_2, var_0 ) )
    {
        var_3 = var_2.origin - var_1.origin;
        playfx( level._effect["sniper_muzzle_flash"], var_1.origin, var_3 );
        var_0 playsound( "sniper_crack_far_near_cp" );
        var_2 dodamage( 80, var_0.origin, var_0 );
        set_next_can_take_sniper_damage_time_stamp( var_2 );
    }
}

player_can_take_sniper_damage( var_0 )
{
    var_1 = gettime();
    return var_1 > var_0.time_stamp_can_be_damaged_by_sniper;
}

set_next_can_take_sniper_damage_time_stamp( var_0 )
{
    var_1 = gettime();
    var_0.time_stamp_can_be_damaged_by_sniper = var_1 + randomfloatrange( 3, 4 ) * 1000;
}

player_expose_to_sniper_long_enough( var_0, var_1 )
{
    return get_player_expose_time_to_sniper( var_0, var_1 ) >= 1;
}

mark_laser_end_ent( var_0 )
{
    var_0 endon( "death" );

    for (;;)
        waitframe();
}

get_laser_end_pos( var_0, var_1 )
{
    var_2 = 40;
    var_3 = 2;
    var_4 = 40;
    var_5 = 50;
    var_6 = 25;
    var_7 = 35;
    var_8 = 10;
    var_9 = 5;
    var_10 = anglestoforward( var_0 getplayerangles() );
    var_11 = var_0 geteye() + var_10 * var_2;
    var_11 = ( var_11[0] + randomfloatrange( var_3 * -1, var_3 ), var_11[1] + randomfloatrange( var_3 * -1, var_3 ), var_11[2] );
    var_11 = scripts\engine\utility::drop_to_ground( var_11, 0, -500 );
    var_12 = var_0 getstance();

    switch ( var_12 )
    {
        case "stand":
            var_11 = ( var_11[0], var_11[1], var_11[2] + randomfloatrange( var_4, var_5 ) );
            break;
        case "prone":
        case "crouch":
            var_11 = ( var_11[0], var_11[1], var_11[2] + randomfloatrange( var_6, var_7 ) );
            break;
    }

    var_13 = vectornormalize( var_11 - var_1.origin );
    var_14 = var_1.origin + var_13 * 20000;
    var_15 = scripts\engine\trace::create_contents( 1, 1, 1, 1, 1, 1, 1, 1, 1 );
    var_11 = scripts\engine\trace::ray_trace( var_1.origin, var_14, undefined, var_15 );

    if ( player_is_near_vehicle_to_push( var_0 ) )
    {
        if ( player_is_facing_away_from_vehicle_to_push( var_0 ) )
        {
            var_16 = var_11["position"] + ( 0, 0, 21 );
            var_17 = vectornormalize( var_16 - var_1.origin );
            var_18 = anglestoright( vectortoangles( var_17 ) );
            var_16 = var_16 + var_18 * randomfloatrange( var_8 * -1, var_8 );
            var_17 = vectornormalize( var_16 - var_1.origin );
            var_14 = var_1.origin + var_17 * 20000;
            var_15 = scripts\engine\trace::create_contents( 1, 1, 1, 1, 1, 1, 1, 1, 1 );
            var_11 = scripts\engine\trace::ray_trace( var_1.origin, var_14, undefined, var_15 );
        }
        else if ( player_is_facing_vehicle_to_push( var_0 ) )
        {
            var_16 = var_11["position"] + ( 0, 0, 23 );
            var_17 = vectornormalize( var_16 - var_1.origin );
            var_18 = anglestoright( vectortoangles( var_17 ) );
            var_16 = var_16 + var_18 * randomfloatrange( var_9 * -1, var_9 );
            var_17 = vectornormalize( var_16 - var_1.origin );
            var_14 = var_1.origin + var_17 * 20000;
            var_15 = scripts\engine\trace::create_contents( 1, 1, 1, 1, 1, 1, 1, 1, 1 );
            var_11 = scripts\engine\trace::ray_trace( var_1.origin, var_14, undefined, var_15 );
        }
    }

    return var_11["position"];
}

player_is_near_vehicle_to_push( var_0 )
{
    if ( istrue( var_0.is_pushing_vehicle ) )
        return 1;

    if ( !isdefined( level.vehicle_to_push ) )
        return 0;

    return distance2dsquared( var_0.origin, level.vehicle_to_push.origin ) <= 40000;
}

player_is_facing_away_from_vehicle_to_push( var_0 )
{
    var_1 = anglestoforward( var_0 getplayerangles() );
    var_2 = anglestoforward( level.vehicle_to_push.angles );
    var_3 = var_2 * -1;
    var_4 = acos( vectordot( var_1, var_3 ) );
    return abs( var_4 ) < 75;
}

player_is_facing_vehicle_to_push( var_0 )
{
    var_1 = anglestoforward( var_0 getplayerangles() );
    var_2 = anglestoforward( level.vehicle_to_push.angles );
    var_3 = acos( vectordot( var_1, var_2 ) );
    return abs( var_3 ) < 80;
}

player_is_exposed_to_sniper( var_0, var_1 )
{
    var_2 = var_0 getentitynumber();
    return var_1.player_exposure_data[var_2].exposed_to_enemy_sniper_time > 0;
}

create_tag_origin( var_0, var_1 )
{
    var_2 = spawn( "script_model", var_0 );
    var_2 setmodel( "tag_origin" );
    var_2 thread clean_up_think( var_2, var_1 );
    return var_2;
}

clean_up_think( var_0, var_1 )
{
    var_0 endon( "death" );
    var_1 waittill( "death" );
    var_0 delete();
}

bomb_guardian_watcher( var_0 )
{
    var_1 = self;
    var_1 thread bomb_guardian_death_watcher_internal( var_1 );
}

bomb_guardian_death_watcher_internal( var_0 )
{
    var_0 waittill( "death" );
    scripts\cp\bomb_defusal\coop_bomb_defusal::drop_bomb_detonator_from_ai( var_0, "bomb_case" );
    level.bomb_guardian_is_killed = 1;
}

turret_enemy_watcher( var_0 )
{
    thread _id_129B7( var_0 );
}

_id_129B7( var_0 )
{
    var_1 = self;
    wait 0.05;
    var_1 notify( "basic_combat" );

    if ( isdefined( var_1.spawnpoint ) && issubstr( var_1.spawnpoint.targetname, "manned_turret" ) )
    {
        if ( isdefined( var_1.spawnpoint.target ) )
        {
            var_2 = scripts\engine\utility::getstruct( var_1.spawnpoint.target, "targetname" );

            if ( isdefined( var_2 ) )
            {
                var_1 setgoalpos( var_2.origin );
                var_1.script_origin_other = var_2.origin;
            }
        }

        var_1.goalradius = 64;
        var_1 allowedstances( "stand" );
        var_1.combatmode = "no_cover";
    }
    else
    {
        var_1.goalradius = 10;
        var_1.dontevershoot = 1;
        var_1 thread activate_enemy_turret_when_reach_it( var_1 );
    }
}

enemy_mortar_think( var_0 )
{
    var_1 = self;
    bomberexplodeheight( var_1 );
    var_1 thread activate_mortar_when_reach_path_end( var_1 );
}

activate_mortar_when_reach_path_end( var_0 )
{
    var_0 endon( "death" );
    level endon( "post_blockade_combat" );

    if ( scripts\engine\utility::flag( "post_blockade_combat" ) )
        var_0 thread go_hunt_down_player( var_0, 0 );
    else
    {
        var_0 waittill( "reached_path_end" );
        var_1 = scripts\engine\utility::getclosest( var_0.origin, getentarray( "enemy_mortar", "targetname" ) );
        var_0.ignoreall = 1;
        var_1 thread mortar_think( var_1 );
        var_0 thread mortar_enemy_death_watcher( var_0, var_1 );
    }
}

mortar_enemy_death_watcher( var_0, var_1 )
{
    var_0 waittill( "death" );
    var_1 notify( "stop_mortar_think" );
    var_1.targets = undefined;
}

activate_enemy_turret_when_reach_it( var_0 )
{
    var_0 endon( "death" );
    level endon( "post_blockade_combat" );
    var_0 scripts\engine\utility::_id_12E3F( "goal", "goal_reached" );
    var_1 = scripts\engine\utility::getclosest( var_0.origin, level.enemy_turrets );
    activate_enemy_turret( var_1 );
    var_0 allowedstances( "stand" );
    var_0 setlookatentity( var_1 );
    var_0.ignoreall = 1;
    var_0.combatmode = "no_cover";
    var_0 link_to_turret_enemy_mover( var_0 );
    var_0 thread death_monitor( var_0, var_1 );
}

link_to_turret_enemy_mover( var_0 )
{
    var_1 = scripts\engine\utility::getstructarray( "turret_enemy_struct", "targetname" );
    var_2 = scripts\engine\utility::getclosest( var_0.origin, var_1, 100000 );
    var_2.origin = var_0.origin;
    var_3 = spawn( "script_model", var_2.origin );
    var_3 setmodel( "tag_origin" );
    var_3.angles = var_2.angles;
    var_0.angles = var_3.angles;
    var_0 linkto( var_3, "tag_origin" );
    var_0.runpubliceventoftype = var_3;
    var_3 thread turret_enemy_mover_clean_up( var_3, var_0 );
}

turret_enemy_mover_clean_up( var_0, var_1 )
{
    var_0 endon( "death" );
    var_1 waittill( "death" );
    var_0 delete();
}

death_monitor( var_0, var_1 )
{
    var_0 waittill( "death" );
    deactivate_enemy_turret( var_1 );
}

enemy_spawner_vehicle_spawned_monitor()
{
    level endon( "game_ended" );
    level.enemy_spawner_vehicles = [];

    for (;;)
    {
        level waittill( "vehicle_spawned", var_0, var_1 );

        if ( scripts\engine\utility::array_contains( level.enemy_spawner_vehicles, var_1 ) )
            continue;

        level.enemy_spawner_vehicles[level.enemy_spawner_vehicles.size] = var_1;

        switch ( var_0.group_name )
        {
            case "old_bridge":
            case "end_bridge":
            case "mid_bridge":
            case "player_left_side":
            case "player_right_side":
                var_1 thread enemy_spawner_vehicle_think( var_1, var_0.group_name );
                break;
            case "player_right_umike":
            case "player_left_umike":
                var_1 thread enemy_spawner_umike_think( var_1, var_0.group_name );
                break;
            case "enemy_fastrope":
            case "player_right_vindia":
            case "player_left_vindia":
                var_1 thread enemy_back_line_spawner_think( var_1, var_0.group_name );
                break;
            case "lbravo_carrier_hover":
                var_1 thread riskspawn_flagspawnbytier( var_1, ::_id_11D70 );
                break;
            case "lbravo_carrier_hover_front":
                var_1 thread riskspawn_flagspawnbytier( var_1, ::_id_11D71 );
                break;
            case "lbravo_carrier_hover_back":
                var_1 thread riskspawn_flagspawnbytier( var_1, ::_id_11D72 );
                break;
        }
    }
}

enemy_back_line_spawner_think( var_0, var_1 )
{
    var_0 endon( "death" );
    var_0 thread scripts\cp\vehicle_race\coop_vehicle_race::enemy_vehicle_damage_monitor( var_0, 500000 );
    wait 10;
    var_2 = var_0.riders;
    var_0 waittill( "unloading" );
    var_0 thread infil_enemies_attack_logic( var_2, get_infil_rider_start_targetname( var_1 ) );
}

get_infil_rider_start_targetname( var_0 )
{
    switch ( var_0 )
    {
        case "enemy_fastrope":
            return ::get_mindia_infil_rider_start_targetname;
        case "player_left_vindia":
            return ::get_left_vindia_infil_rider_start_targetname;
        case "player_right_vindia":
            return ::get_right_vindia_infil_rider_start_targetname;
    }
}

infil_enemies_attack_logic( var_0, var_1 )
{
    foreach ( var_3 in var_0 )
        var_3 thread infil_enemy_combat_logic( var_3, var_1 );
}

infil_enemy_combat_logic( var_0, var_1 )
{
    var_0 endon( "death" );
    var_0 waittill( "jumpedout" );
    var_0 waittill( "large_footstep" );
    wait 0.1;
    var_2 = getgroundposition( var_0.origin, 25, 256, 256 );

    if ( var_2 != var_0.origin )
        var_0 forceteleport( var_2, var_0.angles, 256 );

    level thread spawnapachechopper( var_0.origin, var_0.angles, var_1 );
    var_0.nocorpse = 1;
    var_0 dodamage( var_0.health + 1000, var_0.origin, var_0, var_0, "MOD_SUICIDE" );
}

spawnapachechopper( var_0, var_1, var_2 )
{
    var_3 = spawnstruct();
    var_3.origin = var_0;
    var_3.angles = var_1;
    var_3.script_forcespawn = 1;
    var_3.script_noteworthy = "riotshield";
    var_4 = var_3 scripts\cp\cp_modular_spawning::spawn_ai();
    var_4 endon( "death" );

    if ( scripts\engine\utility::flag( "post_blockade_combat" ) )
        var_4 thread vehomn_getrotationentangles( var_4 );
    else
    {
        var_4.never_kill_off = 1;
        var_4.dontkilloff = 1;
        var_4.ignoreall = 0;
        var_4.skip_clear_kill_off_flag = 1;
        var_4 advance_through_struct_path( var_4, [[ var_2 ]]() );
    }
}

get_mindia_infil_rider_start_targetname()
{
    var_0 = [ "police_station_one", "police_station_two", "police_station_three", "police_station_four", "office_one", "office_two", "storage_one", "storage_two", "storage_three", "attacker_one", "attacker_two", "bridge_one", "bridge_two" ];

    if ( !isdefined( level.mindia_infil_start_targetname_array ) )
    {
        level.mindia_infil_start_targetname_array = randomize_start_targetname_array( var_0 );
        level.mindia_infil_start_targetname_array_index = 0;
    }

    var_1 = level.mindia_infil_start_targetname_array[level.mindia_infil_start_targetname_array_index];
    level.mindia_infil_start_targetname_array_index++;
    return var_1;
}

get_left_vindia_infil_rider_start_targetname()
{
    var_0 = [ "left_river_one", "left_river_two", "left_river_three", "left_river_four", "left_river_five", "left_river_six" ];

    if ( !isdefined( level.left_vindia_infil_start_targetname_array ) )
    {
        level.left_vindia_infil_start_targetname_array = randomize_start_targetname_array( var_0 );
        level.left_vindia_infil_start_targetname_array_index = 0;
    }

    var_1 = level.left_vindia_infil_start_targetname_array[level.left_vindia_infil_start_targetname_array_index];
    level.left_vindia_infil_start_targetname_array_index++;
    return var_1;
}

get_right_vindia_infil_rider_start_targetname()
{
    var_0 = [ "right_river_one", "right_river_two", "right_river_three", "right_river_four", "right_river_five", "right_river_six" ];

    if ( !isdefined( level.right_vindia_infil_start_targetname_array ) )
    {
        level.right_vindia_infil_start_targetname_array = randomize_start_targetname_array( var_0 );
        level.right_vindia_infil_start_targetname_array_index = 0;
    }

    var_1 = level.right_vindia_infil_start_targetname_array[level.right_vindia_infil_start_targetname_array_index];
    level.right_vindia_infil_start_targetname_array_index++;
    return var_1;
}

randomize_start_targetname_array( var_0 )
{
    for ( var_1 = 5; var_1 > 0; var_1-- )
        var_0 = scripts\engine\utility::array_randomize( var_0 );

    return var_0;
}

enemy_spawner_umike_think( var_0, var_1 )
{
    var_0 endon( "death" );
    var_0 thread scripts\cp\vehicle_race\coop_vehicle_race::enemy_vehicle_damage_monitor( var_0, 500000 );
    wait 10;
    var_2 = var_0.riders;
    scripts\cp\vehicle_race\coop_vehicle_race::change_riders_demeanor( var_0 );
    var_0 notify( "stop_vehicle_on_damage_internal" );
    var_0 waittill( "unloaded" );
    var_0 thread back_line_enemies_attack_logic( var_2, undefined, var_1 );
}

enemy_spawner_vehicle_think( var_0, var_1 )
{
    var_0 endon( "death" );
    var_0 thread scripts\cp\vehicle_race\coop_vehicle_race::enemy_vehicle_damage_monitor( var_0, 5000 );
    wait 1.5;
    scripts\cp\vehicle_race\coop_vehicle_race::change_riders_demeanor( var_0 );
    var_0 notify( "stop_vehicle_on_damage_internal" );
    var_0 notify( "stop_waiting_for_spawns" );
    var_0 thread scripts\cp\vehicle_race\coop_vehicle_race::enemy_vehicle_no_rider_monitor( var_0 );
    wait 0.5;
    var_0 vehicle_setspeedimmediate( 25, 15, 15 );
    var_0 thread unload_monitor( var_0, var_1 );
}

unload_monitor( var_0, var_1 )
{
    var_0 endon( "death" );
    var_2 = get_unload_marker_for_spawn_group( var_1 );

    for (;;)
    {
        if ( distance2dsquared( var_2.origin, var_0.origin ) < 22500 )
            break;

        waitframe();
    }

    var_0 vehicle_setspeedimmediate( 0, 15, 15 );
    var_0 scripts\common\vehicle::vehicle_unload( "not_driver" );
    level thread start_riders_combat_logic( var_0.riders, var_0.riders[0], var_1 );
    var_0 notify( "unloaded" );
    wait 2;
    var_0 vehicle_setspeedimmediate( 25, 15, 15 );
    var_0 thread reach_path_end_monitor( var_0, var_1 );
}

start_riders_combat_logic( var_0, var_1, var_2 )
{
    wait 2;

    switch ( var_2 )
    {
        case "old_bridge":
            send_riders_to_proper_combat_spot( var_0, var_1, var_2, 0 );
            break;
        case "end_bridge":
        case "mid_bridge":
            under_bridge_enemies_attack_logic( var_0, var_1, var_2, 1 );
            break;
        case "player_left_side":
        case "player_right_side":
            back_line_enemies_attack_logic( var_0, var_1, var_2 );
            break;
    }
}

under_bridge_enemies_attack_logic( var_0, var_1, var_2, var_3 )
{
    foreach ( var_5 in var_0 )
        var_5 thread under_bridge_enemy_attack_logic( var_5, var_2, var_3 );
}

send_riders_to_proper_combat_spot( var_0, var_1, var_2, var_3 )
{
    foreach ( var_5 in var_0 )
        var_5 thread delay_set_goal_volume( var_5, var_2, var_3 );
}

back_line_enemies_attack_logic( var_0, var_1, var_2 )
{
    var_3 = 0;

    foreach ( var_5 in var_0 )
    {
        if ( !isdefined( var_5 ) )
            continue;

        var_5.never_kill_off = 1;

        if ( istrue( level.bomb_guardian_is_killed ) )
        {
            if ( !istrue( var_3 ) )
            {
                var_5 thread go_hunt_down_player( var_5, 0 );
                var_3 = 1;
            }
            else
                var_5 thread back_line_enemy_attack_logic( var_5, var_2 );

            continue;
        }

        var_5 thread back_line_enemy_attack_logic( var_5, var_2 );
    }
}

get_combat_volume_targetname( var_0 )
{
    switch ( var_0 )
    {
        case "old_bridge":
            return var_0;
        case "player_right_side":
            return "enemy_bridge_zone_right";
        case "player_left_side":
            return "enemy_bridge_zone_left";
        default:
            if ( any_player_under_bridge() )
            {
                return "under_bridge";
                return;
            }

            return var_0;
            return;
    }
}

any_player_under_bridge()
{
    var_0 = getent( "under_bridge_zone", "targetname" );

    foreach ( var_2 in level.players )
    {
        if ( scripts\cp\cp_laststand::player_in_laststand( var_2 ) )
            continue;

        if ( var_2 istouching( var_0 ) )
            return 1;
    }

    return 0;
}

advance_through_struct_path( var_0, var_1 )
{
    level endon( "post_blockade_combat" );
    var_2 = 6;
    var_3 = 3;
    var_4 = scripts\engine\utility::getstruct( var_1, "targetname" );
    var_0.goalradius = 64;
    var_0 setgoalpos( getclosestpointonnavmesh( var_4.origin ) );
    var_0 waittill( "goal" );

    for (;;)
    {
        if ( isdefined( var_4.target ) )
        {
            var_4 = scripts\engine\utility::getstruct( var_4.target, "targetname" );
            var_0 setgoalpos( getclosestpointonnavmesh( var_4.origin ) );
            var_0 waittill( "goal" );
            wait( randomfloatrange( var_3, var_2 ) );

            if ( isdefined( var_4.script_noteworthy ) && var_4.script_noteworthy == "go_hunt_player" )
            {
                if ( issubstr( var_1, "attacker" ) )
                    var_0 thread go_hunt_down_player( var_0, 0 );
                else
                    var_0 thread go_hunt_down_player( var_0, 1 );
            }

            continue;
        }

        return;
    }
}

under_bridge_enemy_attack_logic( var_0, var_1, var_2 )
{
    var_3 = 4;
    var_4 = 2;
    var_0 endon( "death" );
    var_0.goalradius = 10;

    if ( any_player_under_bridge() )
        var_0 thread go_hunt_down_player( var_0, 0 );
    else
    {
        var_5 = get_under_bridge_enemy_start_structs( var_1 );
        var_0 setgoalpos( getclosestpointonnavmesh( var_5.origin ) );
        var_0 waittill( "goal" );
        wait( randomfloatrange( var_4, var_3 ) );

        for (;;)
        {
            if ( isdefined( var_5.target ) )
                var_5 = scripts\engine\utility::getstruct( var_5.target, "targetname" );
            else
                var_5 = undefined;

            if ( should_advance_to_next_goal_struct( var_5 ) )
            {
                var_0 setgoalpos( getclosestpointonnavmesh( var_5.origin ) );
                var_0 waittill( "goal" );
                wait( randomfloatrange( var_4, var_3 ) );
                continue;
            }

            break;
        }

        if ( istrue( var_2 ) )
            var_0 thread go_hunt_down_player( var_0, 1 );
    }
}

get_under_bridge_enemy_start_structs( var_0 )
{
    if ( !isdefined( level.mid_bridge_start_struct_index ) )
        level.mid_bridge_start_struct_index = 0;

    if ( !isdefined( level.end_bridge_start_struct_index ) )
        level.end_bridge_start_struct_index = 0;

    if ( var_0 == "mid_bridge" )
    {
        var_1 = scripts\engine\utility::getstructarray( "mid_bridge_start", "targetname" );
        var_2 = level.mid_bridge_start_struct_index;
        level.mid_bridge_start_struct_index++;

        if ( level.mid_bridge_start_struct_index == var_1.size )
            level.mid_bridge_start_struct_index = 0;

        return var_1[var_2];
    }

    if ( var_0 == "end_bridge" )
    {
        var_3 = scripts\engine\utility::getstructarray( "end_bridge_start", "targetname" );
        var_2 = level.end_bridge_start_struct_index;
        level.end_bridge_start_struct_index++;

        if ( level.end_bridge_start_struct_index == var_3.size )
            level.end_bridge_start_struct_index = 0;

        return var_3[var_2];
    }
}

delay_set_goal_volume( var_0, var_1, var_2 )
{
    var_0 endon( "death" );
    wait 2;
    var_3 = getent( get_combat_volume_targetname( var_1 ), "targetname" );
    var_0 setgoalvolumeauto( var_3 );

    if ( istrue( var_2 ) )
    {
        var_0 waittill( "goal" );

        if ( !is_goal_volume_ahead_of_vehicle_to_push( var_3 ) )
            var_0 thread go_hunt_down_player( var_0, 1 );
    }
}

back_line_enemy_attack_logic( var_0, var_1 )
{
    level endon( "game_ended" );
    var_0 endon( "death" );
    wait( randomfloatrange( 1.2, 2 ) );
    var_2 = get_players_groups_by_whether_in_killzone();

    if ( var_2.players_in_killzone.size > 0 )
        advance_down_the_bridge( var_0, var_1 );
    else
        go_hunt_down_player( var_0, 0 );
}

advance_down_the_bridge( var_0, var_1 )
{
    var_2 = getent( get_combat_volume_targetname( var_1 ), "targetname" );

    if ( isdefined( var_2 ) )
        advance_down_the_bridge_via_volume( var_0, var_2 );
    else
        advance_down_the_bridge_via_struct( var_0 );
}

advance_down_the_bridge_via_struct( var_0 )
{
    var_1 = 4;
    var_2 = 2;
    var_0.goalradius = 10;
    var_3 = get_bridge_start_struct();
    var_0 setgoalpos( getclosestpointonnavmesh( var_3.origin ) );
    var_0 waittill( "goal" );
    wait( randomfloatrange( var_2, var_1 ) );

    for (;;)
    {
        if ( isdefined( var_3.target ) )
            var_3 = scripts\engine\utility::getstruct( var_3.target, "targetname" );
        else
            var_3 = undefined;

        if ( should_advance_to_next_goal_struct( var_3 ) )
        {
            var_0 setgoalpos( getclosestpointonnavmesh( var_3.origin ) );
            var_0 waittill( "goal" );
            wait( randomfloatrange( var_2, var_1 ) );
            continue;
        }

        break;
    }

    go_hunt_down_player( var_0, 1 );
}

get_bridge_start_struct()
{
    var_0 = scripts\engine\utility::getstructarray( "bridge_start", "targetname" );

    if ( !isdefined( level.bridge_start_struct_index ) )
        level.bridge_start_struct_index = 0;

    var_1 = level.bridge_start_struct_index;
    level.bridge_start_struct_index++;

    if ( level.bridge_start_struct_index == var_0.size )
        level.bridge_start_struct_index = 0;

    return var_0[var_1];
}

should_advance_to_next_goal_struct( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    var_1 = anglestoforward( level.vehicle_to_push.angles );
    var_2 = vectornormalize( level.vehicle_to_push.origin - var_0.origin );

    if ( vectordot( var_2, var_1 ) < 0 )
        return 0;
    else
        return 1;
}

advance_down_the_bridge_via_volume( var_0, var_1 )
{
    var_2 = 4;
    var_3 = 2;
    var_0 setgoalvolumeauto( var_1 );
    var_0 waittill( "goal" );
    wait( randomfloatrange( var_3, var_2 ) );

    for (;;)
    {
        if ( isdefined( var_1.target ) )
            var_1 = getent( var_1.target, "targetname" );
        else
            var_1 = undefined;

        if ( should_advance_to_next_goal_volume( var_1 ) )
        {
            var_0 setgoalvolumeauto( var_1 );
            var_0 waittill( "goal" );
            wait( randomfloatrange( var_3, var_2 ) );
            continue;
        }

        break;
    }

    go_hunt_down_player( var_0, 1 );
}

should_advance_to_next_goal_volume( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    var_1 = anglestoforward( level.vehicle_to_push.angles );
    var_2 = vectornormalize( level.vehicle_to_push.origin - var_0.origin );

    if ( is_goal_volume_ahead_of_vehicle_to_push( var_0 ) )
        return 0;
    else
        return 1;
}

is_goal_volume_ahead_of_vehicle_to_push( var_0 )
{
    var_1 = anglestoforward( level.vehicle_to_push.angles );
    var_2 = vectornormalize( level.vehicle_to_push.origin - var_0.origin );
    return vectordot( var_2, var_1 ) < 0;
}

go_hunt_down_player( var_0, var_1 )
{
    var_0 notify( "go_hunt_down_player" );
    level endon( "game_ended" );
    var_0 endon( "death" );
    var_0 endon( "go_hunt_down_player" );

    if ( !isai( var_0 ) )
        return;

    var_0.goalradius = 256;
    var_0.goalheight = 128;
    var_0 cleargoalvolume();

    for (;;)
    {
        var_2 = get_rider_initial_target( var_1 );

        if ( isdefined( var_2 ) )
            break;

        wait 0.1;
    }

    var_0 getenemyinfo( var_2 );
    var_0 setgoalentity( var_2, 100 );
    var_3 = var_2;

    for (;;)
    {
        var_3 waittill( "last_stand" );
        var_4 = get_closest_alive_player( var_0 );
        var_0 getenemyinfo( var_4 );
        var_0 setgoalentity( var_4, 100 );
        var_3 = var_4;
    }
}

get_closest_alive_player( var_0 )
{
    var_1 = scripts\cp\raid_utility::get_players_not_in_laststand();
    return scripts\engine\utility::getclosest( var_0.origin, var_1 );
}

get_rider_initial_target( var_0 )
{
    var_1 = get_players_groups_by_whether_in_killzone();

    if ( istrue( var_0 ) )
    {
        if ( var_1.players_in_killzone.size > 0 )
            return scripts\engine\utility::random( var_1.players_in_killzone );

        return scripts\engine\utility::random( var_1.players_not_in_killzone );
    }
    else
    {
        if ( var_1.players_not_in_killzone.size > 0 )
            return scripts\engine\utility::random( var_1.players_not_in_killzone );

        return scripts\engine\utility::random( var_1.players_in_killzone );
    }
}

get_players_groups_by_whether_in_killzone()
{
    var_0 = spawnstruct();
    var_1 = scripts\cp\raid_utility::get_players_not_in_laststand();
    var_2 = get_players_in_killzone( var_1 );
    var_3 = [];

    foreach ( var_5 in var_1 )
    {
        if ( scripts\engine\utility::array_contains( var_2, var_5 ) )
            continue;

        var_3[var_3.size] = var_5;
    }

    var_0.players_in_killzone = var_2;
    var_0.players_not_in_killzone = var_3;
    return var_0;
}

get_unload_marker_for_spawn_group( var_0 )
{
    var_1 = scripts\engine\utility::getstructarray( "enemy_spawn_vehicle_unload_marker", "targetname" );

    foreach ( var_3 in var_1 )
    {
        if ( isdefined( var_3.script_noteworthy ) && var_3.script_noteworthy == var_0 )
            return var_3;
    }
}

increase_script_maxdist( var_0, var_1, var_2, var_3 )
{
    for ( var_4 = 0; var_4 < var_0.spawn_points.size; var_4++ )
    {
        var_5 = var_0.spawn_points[var_4];
        var_5.script_maxdist = 20000;
    }
}

assign_more_vehicle_unload_groups()
{

}

create_not_driver_group()
{
    var_0 = [];
    var_0[0] = 1;
    var_0[1] = 2;
    var_0[2] = 3;
    var_0[3] = 4;
    var_0[4] = 5;
    return var_0;
}

reach_path_end_monitor( var_0, var_1 )
{
    var_0 endon( "death" );
    var_0 waittill( "reached_end_node" );

    foreach ( var_3 in var_0.riders )
        var_3 scripts\cp\cp_modular_spawning::script_kill_ai();

    var_0 delete();
}

get_pre_respawn_group_wait( var_0 )
{
    switch ( var_0 )
    {
        case "player_right_side":
            return randomfloatrange( 10, 20 );
        case "player_left_side":
            return randomfloatrange( 10, 20 );
    }
}

vehicle_progress_marker_think()
{
    waitframe();
    var_0 = scripts\engine\utility::getstructarray( "vehicle_to_push_progress_marker", "targetname" );

    foreach ( var_2 in var_0 )
        var_2 thread activate_vehicle_progress_marker( var_2 );

    waitframe();
    scripts\engine\utility::flag_set( "vehicle_progression_flags_have_been_set_up" );
}

player_progress_market_think()
{
    var_0 = getentarray( "player_progression_trigger", "targetname" );

    foreach ( var_2 in var_0 )
        var_2 thread player_progress_trigger_think( var_2 );
}

player_progress_trigger_think( var_0 )
{
    var_0 endon( "death" );

    for (;;)
    {
        var_0 waittill( "trigger", var_1 );

        if ( isplayer( var_1 ) )
            break;
    }

    scripts\engine\utility::flag_set( get_player_progress_flag_to_set( var_1 ) );
}

get_player_progress_flag_to_set( var_0 )
{
    var_1 = scripts\engine\utility::getstructarray( "vehicle_to_push_progress_marker", "targetname" );
    var_2 = sortbydistance( var_1, var_0.origin )[0];
    return var_2.script_noteworthy;
}

activate_vehicle_progress_marker( var_0 )
{
    level.vehicle_to_push endon( "death" );
    scripts\engine\utility::flag_init( var_0.script_noteworthy );

    for (;;)
    {
        if ( distance2dsquared( var_0.origin, level.vehicle_to_push.origin ) < squared( 150 ) )
            break;

        waitframe();
    }

    scripts\engine\utility::flag_set( var_0.script_noteworthy );
}

get_mortar_impact_spot( var_0 )
{
    if ( !isdefined( var_0.targets ) )
        return undefined;

    var_1 = scripts\engine\utility::random( var_0.targets );
    var_2 = var_1 getvelocity();
    var_3 = distance( var_0.origin, var_1.origin );
    var_4 = 5;
    var_5 = var_1.origin + var_2 * var_4;
    var_6 = scripts\engine\trace::ray_trace( var_5 + ( 0, 0, 500 ), var_5, var_1 );
    return var_6["position"];
}

getridofkillstreakdeployweapon()
{
    foreach ( var_1 in level.enemy_turrets )
    {
        deactivate_enemy_turret( var_1 );
        var_1.getweaponrandomvariantid = 1;
    }
}

battle_tracks_toggleoffstate()
{
    scripts\engine\utility::flag_set( "post_blockade_combat" );
    waitframe();
    scripts\cp\cp_modular_spawning::remove_pacifist_from_enemies();
    var_0 = getaiarray( "axis" );

    foreach ( var_2 in var_0 )
        var_2 thread vehomn_getrotationentangles( var_2 );
}

vehomn_getrotationentangles( var_0 )
{
    var_0 notify( "post_blockade_combat_logic" );
    var_0 endon( "death" );
    var_0 endon( "post_blockade_combat_logic" );

    if ( istrue( var_0.is_on_platform ) )
        return;

    if ( isdefined( var_0.going_to_object ) )
    {
        var_1 = var_0.going_to_object;

        while ( isdefined( var_0.going_to_object ) )
            waitframe();

        var_1 notify( "stop_mortar_think" );
        var_1.targets = undefined;
    }

    if ( isdefined( var_0.runpubliceventoftype ) )
    {
        var_0 unlink();
        var_0.runpubliceventoftype delete();
        wait( randomfloatrange( 0.3, 0.5 ) );
    }

    var_0 thread scripts\cp\cp_modular_spawning::enter_combat();
    wait( randomfloatrange( 0.1, 0.3 ) );
    var_0.is_on_platform = 0;
    var_0.dontevershoot = 0;
    var_0 allowedstances( "stand", "prone", "crouch" );
    var_0 setlookatentity();
    var_0.ignoreall = 0;
    var_0.combatmode = "cover";
    var_0 thread go_hunt_down_player( var_0, 0 );
}

set_up_blockade_gates()
{
    if ( !scripts\engine\utility::flag_exist( "blockade_gates_have_been_set_up" ) )
        scripts\engine\utility::flag_init( "blockade_gates_have_been_set_up" );

    _id_11E5E();
    scripts\engine\utility::flag_set( "blockade_gates_have_been_set_up" );
}

#using_animtree("script_model");

_id_11E5E()
{
    getarenapickupattachmentoverrides( "gate_door_left" );
    getarenapickupattachmentoverrides( "gate_door_right" );
    getarenapickupattachmentoverrides( "gate_post" );
    level.scr_animtree["gate_left"] = #animtree;
    level.scr_model["gate_left"] = "military_blockade_gate_damaged_rig_skeleton";
    level.scr_anim["gate_left"]["close"] = %cp_raid_blockade_gate_le_close;
    level.scr_animname["gate_left"]["close"] = "cp_raid_blockade_gate_le_close";
    level.scr_anim["gate_left"]["blow"] = %cp_raid_blockade_gate_le_blowup;
    level.scr_animname["gate_left"]["blow"] = "cp_raid_blockade_gate_le_blowup";
    level.scr_animtree["gate_right"] = #animtree;
    level.scr_model["gate_right"] = "military_blockade_gate_left_damaged_rig_skeleton";
    level.scr_anim["gate_right"]["close"] = %cp_raid_blockade_gate_ri_close;
    level.scr_animname["gate_right"]["close"] = "cp_raid_blockade_gate_ri_close";
    level.scr_anim["gate_right"]["blow"] = %cp_raid_blockade_gate_ri_blowup;
    level.scr_animname["gate_right"]["blow"] = "cp_raid_blockade_gate_ri_blowup";
    var_0 = scripts\engine\utility::getstruct( "blockade_gate", "targetname" );

    if ( !isdefined( var_0 ) )
    {
        var_0 = spawnstruct();
        var_0.targetname = "blockade_gate";
        var_0.origin = ( 39812.5, 15256, -354 );
        var_0.angles = ( 0, 204.999, 0 );
    }

    var_1 = scripts\engine\utility::getstruct( "gate_left_prestine", "targetname" );

    if ( !isdefined( var_1 ) )
    {
        var_1 = spawnstruct();
        var_1.targetname = "gate_left_prestine";
        var_1.origin = ( 39760, 15368, -354.172 );
        var_1.angles = ( 0, 114.999, 0 );
    }

    var_2 = scripts\engine\utility::getstruct( "gate_right_prestine", "targetname" );

    if ( !isdefined( var_2 ) )
    {
        var_2 = spawnstruct();
        var_2.targetname = "gate_right_prestine";
        var_2.origin = ( 39864.6, 15143.7, -354.291 );
        var_2.angles = ( 0, 114.999, 0 );
    }

    var_3 = "military_blockade_gate";
    var_4 = spawn( "script_model", var_1.origin );
    var_4.angles = var_1.angles;
    var_4 setmodel( var_3 );
    var_5 = spawn( "script_model", var_2.origin );
    var_5.angles = var_2.angles;
    var_5 setmodel( var_3 );
    var_6 = spawn( "script_model", var_0.origin );
    var_6.angles = var_0.origin;
    var_6 setmodel( "military_blockade_gate_damaged_rig_skeleton" );
    var_7 = spawn( "script_model", var_0.origin );
    var_7.angles = var_0.origin;
    var_7 setmodel( "military_blockade_gate_left_damaged_rig_skeleton" );
    level.callback_subscribe = [];
    level.callback_subscribe["anim_node"] = var_0;
    level.callback_subscribe["model"] = [];
    level.callback_subscribe["model"]["prestine"] = [];
    level.callback_subscribe["model"]["prestine"]["left"] = var_4;
    level.callback_subscribe["model"]["prestine"]["right"] = var_5;
    level.callback_subscribe["model"]["blown"] = [];
    level.callback_subscribe["model"]["blown"]["left"] = var_6;
    level.callback_subscribe["model"]["blown"]["right"] = var_7;
    level.callback_subscribe["clip"] = [];
    level.callback_subscribe["clip"]["before"] = getent( "blockade_gate_clip_before", "targetname" );
    level.callback_subscribe["clip"]["after"] = getent( "blockade_gate_clip_after", "targetname" );
    level.callback_subscribe["bone"] = [];
    level.callback_subscribe["bone"]["left"] = "j_blockade_gate_le";
    level.callback_subscribe["bone"]["right"] = "j_blockade_gate_ri";
    var_6 useanimtree( #animtree );
    var_6.animname = "gate_left";
    level.callback_subscribe["anim_node"] thread scripts\common\anim::anim_first_frame_solo( var_6, "close" );
    var_7 useanimtree( #animtree );
    var_7.animname = "gate_right";
    level.callback_subscribe["anim_node"] thread scripts\common\anim::anim_first_frame_solo( var_7, "close" );
    var_8 = var_4.origin - var_6 gettagorigin( "j_blockade_gate_le" );
    var_9 = var_4.angles - var_6 gettagangles( "j_blockade_gate_le" );
    var_4 linktomoveoffset( var_6, "j_blockade_gate_le", var_8, var_9 );
    var_8 = var_7 gettagorigin( "j_blockade_gate_ri" ) - var_5.origin;
    var_9 = var_7 gettagangles( "j_blockade_gate_ri" ) - var_5.angles;
    var_5 linktomoveoffset( var_7, "j_blockade_gate_ri", var_8, var_9 );
    var_6 hide();
    var_7 hide();

    if ( isdefined( level.callback_subscribe["clip"]["before"] ) && isdefined( level.callback_subscribe["clip"]["after"] ) )
    {
        level.callback_subscribe["clip"]["before"].original_origin = level.callback_subscribe["clip"]["before"].origin;
        level.callback_subscribe["clip"]["after"].original_origin = level.callback_subscribe["clip"]["after"].origin;
        level.callback_subscribe["clip"]["after"].origin = level.callback_subscribe["clip"]["after"].origin + ( 0, 0, -2000 );
    }
}

getarenapickupattachmentoverrides( var_0 )
{
    var_1 = getentarray( var_0, "targetname" );

    if ( isdefined( var_1 ) )
    {
        foreach ( var_3 in var_1 )
            var_3 delete();
    }
}

open_blockade_gates()
{
    if ( !scripts\engine\utility::flag_exist( "blockade_gates_have_been_set_up" ) )
        scripts\engine\utility::flag_init( "blockade_gates_have_been_set_up" );

    scripts\engine\utility::flag_wait( "blockade_gates_have_been_set_up" );

    if ( istrue( level.blockade_gates_are_opening ) )
        return;

    level.blockade_gates_are_opening = 1;
    level.callback_subscribe["model"]["blown"]["left"] show();
    level.callback_subscribe["model"]["blown"]["right"] show();
    level.callback_subscribe["model"]["prestine"]["left"] hide();
    level.callback_subscribe["model"]["prestine"]["right"] hide();
    level.callback_subscribe["anim_node"] thread scripts\common\anim::anim_single_solo( level.callback_subscribe["model"]["blown"]["left"], "blow" );
    level.callback_subscribe["anim_node"] scripts\common\anim::anim_single_solo( level.callback_subscribe["model"]["blown"]["right"], "blow" );

    if ( isdefined( level.callback_subscribe["clip"]["before"] ) && isdefined( level.callback_subscribe["clip"]["after"] ) )
    {
        level.callback_subscribe["clip"]["after"].origin = level.callback_subscribe["clip"]["after"].original_origin;
        level.callback_subscribe["clip"]["before"].origin = level.callback_subscribe["clip"]["before"].origin + ( 0, 0, -2000 );
    }

    level.callback_subscribe["model"]["blown"]["left"] notsolid();
    level.callback_subscribe["model"]["blown"]["right"] notsolid();
    level.blockade_gates_are_opening = undefined;
}

close_blockade_gates()
{
    if ( !scripts\engine\utility::flag_exist( "blockade_gates_have_been_set_up" ) )
        scripts\engine\utility::flag_init( "blockade_gates_have_been_set_up" );

    scripts\engine\utility::flag_wait( "blockade_gates_have_been_set_up" );

    if ( istrue( level.blockade_gates_are_closing ) )
        return;

    level.blockade_gates_are_closing = 1;
    level.callback_subscribe["model"]["blown"]["left"] hide();
    level.callback_subscribe["model"]["blown"]["right"] hide();
    level.callback_subscribe["model"]["prestine"]["left"] show();
    level.callback_subscribe["model"]["prestine"]["left"] show();
    level.callback_subscribe["anim_node"] thread scripts\common\anim::anim_single_solo( level.callback_subscribe["model"]["blown"]["left"], "close" );
    level.callback_subscribe["anim_node"] scripts\common\anim::anim_single_solo( level.callback_subscribe["model"]["blown"]["right"], "close" );

    if ( isdefined( level.callback_subscribe["clip"]["before"] ) && isdefined( level.callback_subscribe["clip"]["after"] ) )
    {
        level.callback_subscribe["clip"]["after"].origin = level.callback_subscribe["clip"]["after"].origin + ( 0, 0, -2000 );
        level.callback_subscribe["clip"]["before"].origin = level.callback_subscribe["clip"]["before"].original_origin;
    }

    level.blockade_gates_are_closing = undefined;
}

camera_loadout_showcase_preview_sticker_alt3( var_0, var_1 )
{
    var_1 endon( "death" );
    var_0 waittill( "death" );
    var_1 delete();
}

deploy_friendly_reinforcement_convoy()
{
    var_0 = ( 48941, 12803, -121 );
    level.friendly_convoy = [];
    var_1 = scripts\cp\coop_escort::create_friendly_convoy_vehicle( "reinforcement_convoy_start_two" );
    scripts\cp\coop_escort::add_to_friendly_convoy_list( var_1 );
    var_2 = scripts\cp\coop_escort::create_not_drivable_player_vehicle( "reinforcement_convoy_start_one" );
    scripts\cp\maps\cp_br_syrk\vehicle_travel.gsc::add_gunner_turret( var_2 );
    reinforcement_convoy_get_to_blockade( var_1, var_2 );
    var_3 = getvehiclenode( "seek_convoy_start", "targetname" );
    var_1 attachpath( var_3 );
    var_1 startpath();
    wait 1;
    var_4 = scripts\engine\utility::getstructarray( "humvee_spawner", "script_noteworthy" );
    var_5 = sortbydistance( var_4, var_0 )[0];
    level thread scripts\cp\maps\cp_br_syrk\vehicle_travel.gsc::deploy_vehicle( var_5, scripts\cp\maps\cp_br_syrk\vehicle_travel.gsc::get_humvee_info( var_5 ) );
    var_6 = var_2.origin;
    var_7 = var_2.angles;
    var_2 delete();
    level.player_humvee vehicle_teleport( var_6, var_7 );
    scripts\cp\coop_escort::add_to_friendly_convoy_list( level.player_humvee );
    iprintlnbold( "Overload: Get in the vehicle.  We need to go rescue the HVI" );
    level waittill( "player_entered_driver_seat" );
    var_1 thread scripts\cp\coop_escort::maintain_speed_with_player_vehicle( var_1 );
    scripts\cp\coop_escort::waittill_vehicle_node_reached( "seek_path_node_43" );
    iprintlnbold( "Overload: Stealth into the TV Station and rescue the HVI" );
}

reinforcement_convoy_get_to_blockade( var_0, var_1 )
{
    var_2 = 40;
    var_3 = getvehiclenode( "reinforcement_convoy_start_two", "targetname" );
    var_4 = getvehiclenode( "reinforcement_convoy_start_one", "targetname" );
    iprintlnbold( "Overload: Reinforcement incoming" );
    var_0 attachpath( var_3 );
    var_0 startpath();
    var_1 attachpath( var_4 );
    var_1 startpath();
    var_0 vehicle_setspeedimmediate( var_2, var_2 * 0.5, var_2 * 0.5 );
    var_1 vehicle_setspeedimmediate( var_2, var_2 * 0.5, var_2 * 0.5 );
    scripts\cp\coop_escort::waittill_vehicle_node_reached( "lumber_safe_path_node_31" );
    var_0 vehicle_setspeedimmediate( 0, 5, 5 );
    var_1 vehicle_setspeedimmediate( 0, 5, 5 );
}

hide_enemy_mortar_shell()
{
    var_0 = getentarray( "enemy_mortar", "targetname" );

    foreach ( var_2 in var_0 )
        var_2 hidepart( "j_mortar_shell" );
}

vehicle_bridge_stage_five_music()
{

}

wave_aggro_monitor()
{
    self endon( "death" );
    var_0 = self;
    var_1 = scripts\engine\utility::getstructarray( get_smoke_grenade_struct_targetname( var_0 ), "targetname" );
    deploy_smoke_grenades_for_infil_via_structs( var_0, var_1, [ "turret_hatch_jnt" ], [ ( 0, 0, 15 ) ] );
}

wave_aggro_array()
{
    self endon( "death" );
    var_0 = self;
    var_1 = scripts\engine\utility::getstructarray( get_smoke_grenade_struct_targetname( var_0 ), "targetname" );
    deploy_smoke_grenades_for_infil_via_structs( var_0, var_1, [ "tag_window_front_right", "tag_window_front_left" ], [ ( 0, 0, 30 ), ( 0, 0, 30 ) ] );
}

deploy_smoke_grenades_for_infil_via_structs( var_0, var_1, var_2, var_3 )
{
    for ( var_4 = 5; var_4 > 0; var_4-- )
        var_1 = scripts\engine\utility::array_randomize( var_1 );

    foreach ( var_6 in var_1 )
    {
        var_7 = var_6.origin;
        var_8 = little_bird_mp_enterendinternal( var_0, var_7, var_2, var_3 );
        var_9 = var_7 - var_8;
        var_9 = var_9 * ( 1, 1, 0 );
        var_9 = var_9 + ( 0, 0, 1 ) * length( var_9 );
        magicgrenademanual( "smoke_grenade_mp", var_8, var_9 * 0.5, 0.05 );
        wait( randomfloatrange( 1, 1.5 ) );
    }
}

little_bird_mp_enterendinternal( var_0, var_1, var_2, var_3 )
{
    var_4 = undefined;
    var_5 = 99999999;

    foreach ( var_10, var_7 in var_2 )
    {
        var_8 = var_0 gettagorigin( var_7 );
        var_9 = distance2dsquared( var_8, var_1 );

        if ( var_9 <= var_5 )
        {
            var_4 = var_10;
            var_5 = var_9;
        }
    }

    var_11 = var_2[var_4];
    var_12 = var_3[var_4];
    return var_0 gettagorigin( var_11 ) + var_12;
}

get_smoke_grenade_struct_targetname( var_0 )
{
    switch ( var_0.targetname )
    {
        case "player_left_vindia_spawner":
        case "player_left_umike_spawner":
            return "left_vindia_smoke_grenade";
        case "player_right_vindia_spawner":
        case "player_right_umike_spawner":
            return "right_vindia_smoke_grenade";
    }
}

riskspawn_flagspawnbytier( var_0, var_1 )
{
    var_0 endon( "death" );
    var_0.percentagetokensdrop = [ "clockwise", "counterclockwise" ];

    for (;;)
    {
        var_2 = var_0 scripts\engine\utility::_id_12E4F( "hover_attack", "increase_accuracy", "hover_retreat" );

        switch ( var_2 )
        {
            case "hover_retreat":
                var_0.percentageplunderdrop = undefined;
                var_3 = islaststandskippingenabled( var_0 );
                var_4 = findnewplunderextractsite( var_3.origin, var_0, 2500, 256, 1, 50, little_bird_initomnvars(), 12 );
                var_5 = var_4[0];
                var_0 thread scripts\common\vehicle_paths::vehicle_paths_helicopter( var_5 );
                break;
            case "hover_attack":
                var_6 = [[ var_1 ]]( var_0 );
                var_7 = findnewplunderextractsite( var_6, var_0, 2500, 256, 1, 40, leader_charge_dialogue( var_0 ), 12 );
                var_8 = var_7[0];
                var_0 thread scripts\common\vehicle_paths::vehicle_paths_helicopter( var_8 );
                break;
            case "increase_accuracy":
                var_9 = var_0.riders;

                foreach ( var_11 in var_9 )
                {
                    var_11.baseaccuracy = 1000;
                    var_0 thread riskspawn_getspawnlocations( var_11, var_0 );
                }

                break;
        }
    }
}

_id_11D70( var_0 )
{
    var_1 = scripts\engine\utility::getclosest( var_0.origin, level.players );
    var_2 = scripts\cp\raid_utility::get_players_not_in_laststand();

    if ( var_2.size >= 1 )
    {
        var_3 = get_players_in_killzone( var_2 );

        if ( var_3.size >= 1 )
            var_1 = scripts\engine\utility::getclosest( var_0.origin, var_3 );
    }

    return var_1.origin + ( 0, 0, 756 );
}

_id_11D71( var_0 )
{
    var_1 = level.vehicle_to_push;
    var_2 = scripts\cp\raid_utility::get_players_not_in_laststand();

    if ( var_2.size >= 1 )
    {
        var_3 = get_players_in_killzone( var_2 );

        if ( var_3.size >= 1 )
            var_1 = scripts\engine\utility::getclosest( var_0.origin, var_3 );
    }

    return var_1.origin + ( 0, 0, 756 );
}

_id_11D72( var_0 )
{
    var_1 = scripts\engine\utility::getstruct( "lbravo_carrier_back_center", "targetname" );
    var_2 = var_1;
    var_3 = scripts\cp\raid_utility::get_players_not_in_laststand();

    if ( var_3.size >= 1 )
    {
        var_4 = get_players_groups_by_whether_in_killzone();
        var_5 = var_4.players_not_in_killzone;

        if ( var_5.size >= 1 )
            var_2 = scripts\engine\utility::getclosest( var_0.origin, var_5 );
    }

    return var_2.origin + ( 0, 0, 756 );
}

little_bird_initomnvars()
{
    return scripts\engine\utility::random( [ "clockwise", "counterclockwise" ] );
}

islaststandskippingenabled( var_0 )
{
    var_1 = loadoutbrfieldupgrade( var_0 );
    var_2 = ( var_0.origin + var_1.origin ) / 2;
    var_3 = sequence_interaction_hint( var_2, var_0.angles, 256, 1, 55 );
    var_0 thread scripts\common\vehicle_paths::vehicle_paths_helicopter( var_3 );
    var_0 scripts\engine\utility::_id_12E3F( "near_goal", "goal" );
    return var_1;
}

sequence_interaction_hint( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = spawnstruct();
    var_5.origin = var_0;
    var_5.angles = var_1;
    var_5.radius = var_2;
    var_5.speed = var_3;

    if ( istrue( var_4 ) )
        var_5.script_goalyaw = 1;

    return var_5;
}

loadoutbrfieldupgrade( var_0 )
{
    var_1 = scripts\engine\utility::getstructarray( "hover_retreat", "targetname" );
    var_2 = -99999;
    var_3 = var_1[0];
    var_4 = anglestoforward( var_0.angles );

    foreach ( var_6 in var_1 )
    {
        var_7 = vectornormalize( var_6.origin - var_0.origin );
        var_8 = vectordot( var_7, var_4 );

        if ( var_8 > var_2 )
        {
            var_2 = var_8;
            var_3 = var_6;
        }
    }

    return var_3;
}

riskspawn_getspawnlocations( var_0, var_1 )
{
    var_1 endon( "death" );
    var_0 waittill( "death" );
    waitframe();
    disableallarmorykiosks( var_1 );
}

disableallarmorykiosks( var_0 )
{
    if ( !bomb_vest_detonator_think( var_0, [ 2, 3, 4 ] ) )
    {
        _id_119F2( var_0, "counterclockwise" );
        return;
    }

    if ( !bomb_vest_detonator_think( var_0, [ 5, 6, 7 ] ) )
    {
        _id_119F2( var_0, "clockwise" );
        return;
    }
}

_id_119F2( var_0, var_1 )
{
    var_0.percentagetokensdrop = scripts\engine\utility::array_remove( var_0.percentagetokensdrop, var_1 );

    if ( isdefined( var_0.percentageplunderdrop ) && var_0.percentageplunderdrop == var_1 )
        var_0 notify( "hover_retreat" );
}

_id_1271C( var_0 )
{
    wait( 10 + var_0.vehicle_position * 2 );
    var_0 dodamage( var_0.health + 100, var_0.origin );
}

bomb_vest_detonator_think( var_0, var_1 )
{
    foreach ( var_3 in var_1 )
    {
        foreach ( var_5 in var_0.riders )
        {
            if ( isalive( var_5 ) && isdefined( var_5.vehicle_position ) && var_5.vehicle_position == var_3 )
                return 1;
        }
    }

    return 0;
}

leader_charge_dialogue( var_0 )
{
    if ( isdefined( var_0.percentageplunderdrop ) )
        return var_0.percentageplunderdrop;

    var_1 = scripts\engine\utility::random( var_0.percentagetokensdrop );
    var_0.percentageplunderdrop = var_1;
    return var_1;
}

findnewplunderextractsite( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = vectornormalize( var_1.origin - var_0 );
    var_9 = int( 360 / var_7 );
    var_10 = vectortoangles( var_8 );

    if ( var_6 == "clockwise" )
        var_9 = var_9 * -1;

    var_11 = [];

    for ( var_12 = 1; var_12 <= var_7; var_12++ )
    {
        var_13 = var_10 + ( 0, var_9 * var_12, 0 );
        var_14 = serverroomrewardspawn( var_0, var_13, var_2, var_3, var_4, var_5, var_6 );

        if ( var_12 == var_7 )
            var_14.script_noteworthy = "hover_attack";

        var_11[var_11.size] = var_14;
    }

    extra_enemies( var_11 );
    return var_11;
}

extra_enemies( var_0 )
{
    for ( var_1 = 0; var_1 < var_0.size - 1; var_1++ )
    {
        var_2 = var_0[var_1];
        var_3 = var_0[var_1 + 1];
        var_2.target = var_3.targetname;
        scripts\cp\utility::addtostructarray( "target", var_2.targetname, var_3 );
    }
}

serverroomrewardspawn( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = spawnstruct();
    var_7.origin = var_0 + anglestoforward( var_1 ) * var_2;
    var_7.radius = var_3;
    var_7.speed = var_5;
    var_7.targetname = scripts\cp\cp_vehicles::create_unique_kvp_string();
    scripts\cp\utility::addtostructarray( "targetname", var_7.targetname, var_7 );
    var_8 = vectortoangles( vectornormalize( var_7.origin - var_0 ) );

    if ( istrue( var_4 ) )
        var_7.script_goalyaw = 1;

    if ( var_6 == "counterclockwise" )
        var_7.angles = vectortoangles( anglestoleft( var_8 ) );
    else
        var_7.angles = vectortoangles( anglestoright( var_8 ) );

    return var_7;
}

build_vehicles()
{
    scripts\vehicle\techo::main( "veh8_civ_lnd_techo_physics_mp", "techo_phys_convoy_cp", "script_vehicle_iw8_truck_techo_white" );
    scripts\vehicle\techo::main( "veh8_civ_lnd_techo", "truck", "script_vehicle_iw8_truck_techo_white" );
    scripts\cp\cp_vehicles::register_combined_vehicles( scripts\vehicle\umike::main, "veh8_mil_lnd_umike_physics", "umike_physics_sp", "script_vehicle_iw8_truck_umike_covered_physics", undefined, "umike_covered_physics", "umike_covered_physics" );
    scripts\cp\cp_vehicles::register_combined_vehicles( scripts\vehicle\umike::main, "veh8_mil_lnd_umike_pickup_physics", "umike_physics_sp", "script_vehicle_iw8_truck_umike_pickup_physics", undefined, "umike_physics", "umike_physics" );
    scripts\vehicle\vindia::main( "veh8_mil_lnd_vindia_a2_physics", "vindia_physics_sp", "script_vehicle_iw8_vindia_a2" );
}

aigroundturret_requestmount()
{
    var_0 = getentarray( "gunshop_safehouse_loot", "targetname" );

    foreach ( var_2 in var_0 )
        var_2 thread scripts\cp\utility::create_fake_loot( [ "brloot_munition_ammo" ] );
}

camera_loadout_showcase_armory()
{
    scripts\cp\raid_utility::intel_used_logic( "vfx_blockade_wire_fail_exp_1", ( 42580.9, 16468.8, -566.727 ), ( 359.354, 192.412, 354.078 ) );
    scripts\cp\raid_utility::intel_used_logic( "vfx_blockade_wire_fail_exp_2", ( 42423, 16664.8, -583 ), ( 339.085, 204.711, 164.005 ) );
    scripts\cp\raid_utility::intel_used_logic( "vfx_blockade_wire_fail_exp_2", ( 42558.8, 16441.9, -594.659 ), ( 338.039, 268.227, 151.674 ) );
    scripts\cp\raid_utility::intel_used_logic( "vfx_blockade_wire_fail_exp_2", ( 42613.7, 16665.5, -366.528 ), ( 341.61, 118.659, 198.868 ) );
    scripts\cp\raid_utility::intel_used_logic( "vfx_raid_smoke_column", ( 42610.1, 16495.5, -640.002 ), ( 0, 107, 0 ) );
    wait 0.25;
    scripts\cp\raid_utility::intel_used_logic( "vfx_blockade_wire_fail_exp_1", ( 42570.9, 16519.9, -517.571 ), ( 1.58926, 195.306, 1.01012 ) );
    scripts\cp\raid_utility::intel_used_logic( "vfx_blockade_wire_fail_exp_2", ( 42706.8, 16481.8, -367.527 ), ( 288.424, 317.631, 68.1296 ) );
    wait 0.25;
    scripts\cp\raid_utility::intel_used_logic( "vfx_blockade_wire_fail_exp_1", ( 42537.3, 16571.5, -382.172 ), ( 0, 0, 168.999 ) );
    wait 0.25;
    scripts\cp\raid_utility::intel_used_logic( "vfx_blockade_wire_fail_exp_1", ( 42408.3, 16542.9, -382.157 ), ( 0, 0, 164.999 ) );
    wait 0.25;
    scripts\cp\raid_utility::intel_used_logic( "vfx_blockade_wire_fail_exp_1", ( 42176.4, 16473.7, -382.092 ), ( 0, 0, 173.999 ) );
    wait 0.2;
    scripts\cp\raid_utility::intel_used_logic( "vfx_raid_big_fire", ( 42670.9, 16822.8, -368.998 ), ( 5.6547, 193.44, 1.89147 ) );
    wait 0.1;
    scripts\cp\raid_utility::intel_used_logic( "vfx_blockade_wire_fail_exp_1", ( 42215.1, 16380.4, -382.157 ), ( 0, 0, 167.999 ) );
    wait 0.4;
    scripts\cp\raid_utility::intel_used_logic( "vfx_blockade_wire_fail_exp_1", ( 42181.3, 16613, -379.426 ), ( 0, 0, 169.999 ) );
    wait 0.1;
    scripts\cp\raid_utility::intel_used_logic( "vfx_blockade_wire_fail_exp_1", ( 42691.5, 16368, -360.016 ), ( 5.6547, 193.44, 1.89147 ) );
    scripts\cp\raid_utility::intel_used_logic( "vfx_blockade_wire_fail_exp_1", ( 42494, 16781.1, -360.068 ), ( 8.65305, 193.54, 1.90393 ) );
    scripts\cp\raid_utility::intel_used_logic( "vfx_raid_big_fire", ( 42713.7, 16433.5, -363.777 ), ( 5.6547, 193.44, 1.89147 ) );
    scripts\cp\raid_utility::intel_used_logic( "vfx_raid_big_fire", ( 41949, 16462.9, -362.998 ), ( 5.6547, 193.44, 1.89147 ) );
    scripts\cp\raid_utility::intel_used_logic( "vfx_br_spot_fire_sml", ( 42743.4, 16725.1, -366.527 ), ( 5.6547, 193.44, 1.89147 ) );
    scripts\cp\raid_utility::intel_used_logic( "vfx_br_spot_fire_sml", ( 42973.5, 16521.4, -363.503 ), ( 5.6547, 193.44, 1.89147 ) );
    scripts\cp\raid_utility::intel_used_logic( "vfx_br_spot_fire_sml", ( 42330.3, 16200.4, -363.385 ), ( 5.6547, 193.44, 1.89147 ) );
    scripts\cp\raid_utility::intel_used_logic( "vfx_br_spot_fire_sml", ( 42759, 16904.5, -363.503 ), ( 5.6547, 193.44, 1.89147 ) );
    wait 0.2;
    scripts\cp\raid_utility::intel_used_logic( "vfx_blockade_wire_fail_exp_1", ( 42361.1, 16563.5, -366.527 ), ( 275.445, 52.3922, 144.714 ) );
    wait 0.1;
    scripts\cp\raid_utility::intel_used_logic( "vfx_blockade_wire_fail_exp_1", ( 42379.1, 16701.9, -360.149 ), ( 5.6547, 193.44, 1.89147 ) );
    scripts\cp\raid_utility::intel_used_logic( "vfx_br_spot_fire_sml", ( 42776.9, 16515.3, -372.527 ), ( 5.6547, 193.44, 1.89147 ) );
    wait 0.2;
    scripts\cp\raid_utility::intel_used_logic( "vfx_blockade_wire_fail_exp_1", ( 42584.2, 16279.4, -360.373 ), ( 5.6547, 193.44, 1.89147 ) );
    wait 0.1;
    scripts\cp\raid_utility::intel_used_logic( "vfx_blockade_wire_fail_exp_1", ( 42435.8, 16342.2, -366.527 ), ( 275.022, 171.293, 22.0371 ) );
}

load_vfx()
{
    level._effect["sniper_muzzle_flash"] = loadfx( "vfx/iw8_cp/vfx_sniper_muzzle_flash.vfx" );
    level._effect["sniper_red_laser"] = loadfx( "vfx/iw8_cp/vfx_sniper_red_laser_cp.vfx" );
}

airlock_show_room_doors()
{
    level endon( "game_ended" );
    level endon( "stop_pressure_sensor_monitor" );
    var_0 = getent( "blockade_bridge_pressure_sensor_trigger", "targetname" );

    if ( !isdefined( level.vehicle_to_push ) )
    {
        while ( !isdefined( level.vehicle_to_push ) )
            wait 0.5;
    }

    for (;;)
    {
        var_1 = level.vehicle_to_push gettagorigin( "tag_grill" );

        if ( ispointinvolume( var_1, var_0 ) )
            break;

        var_2 = anglestoforward( level.vehicle_to_push.angles ) * ( 1, 1, 0 );
        var_3 = vectornormalize( var_0.origin - var_1 ) * ( 1, 1, 0 );

        if ( vectordot( var_3, var_2 ) < 0 )
            break;

        wait 0.1;
    }

    var_0 delete();
    level thread scripts\cp\bomb_defusal\coop_bomb_defusal::bombs_explode();
}

_id_124E9()
{
    level notify( "stop_pressure_sensor_monitor" );
    var_0 = getent( "blockade_bridge_pressure_sensor_trigger", "targetname" );
    var_0 delete();
}

callbackplayeractive()
{
    if ( istrue( level.coop_bomb_defusal_count_down_started ) )
        return 2;
    else
        return 1;
}

callback_playeractive( var_0 )
{
    level endon( "game_ended" );
    var_1 = getent( "blockade_player_clip", "targetname" );

    if ( !isdefined( var_1 ) )
        return;

    var_2 = ( 0, 0, -10000 );
    var_1.original_origin = var_1.origin;

    if ( !istrue( var_0 ) )
        var_1.origin = var_1.original_origin + var_2;

    for (;;)
    {
        level waittill( "blockade_barrier_clip", var_3 );

        if ( var_3 == "on" )
        {
            var_1.origin = var_1.original_origin;
            continue;
        }

        if ( var_3 == "off" )
        {
            var_1.origin = var_1.original_origin + var_2;
            continue;
        }

        if ( var_3 == "delete" )
        {
            var_1 delete();
            return;
        }
        else
            wait 0.05;
    }
}

callback_frontendplayeractive()
{
    var_0 = getentarray( "player_trigger_hurt", "targetname" );

    if ( !isdefined( var_0 ) )
        return;

    foreach ( var_2 in var_0 )
        thread scripts\cp\raid_utility::_id_11E0E( var_2 );
}

blockade_landmine()
{
    level.landmine_trig = getent( "landmine_trig", "targetname" );

    if ( !isdefined( level.landmine_trig ) )
        return;

    level thread populate_landmine_signs();
    level.landmine_trig thread landmine_think();
}

populate_landmine_signs()
{
    var_0 = scripts\engine\utility::getstructarray( "landmine_sign", "targetname" );

    foreach ( var_2 in var_0 )
    {
        var_3 = spawn( "script_model", var_2.origin );
        var_3 setmodel( "me_sign_minefield_02" );
        var_3.angles = var_2.angles;
        waitframe();
    }
}

landmine_think()
{
    self endon( "death" );
    self endon( "entitydeleted" );

    while ( !istrue( self.landmine_disabled ) )
    {
        self waittill( "trigger", var_0, var_1, var_2, var_3, var_4, var_5 );

        if ( !isplayer( var_0 ) )
            continue;

        if ( !isdefined( var_0 ) || istrue( self.landmine_disabled ) )
            continue;

        if ( istrue( var_0.landmine_active ) )
            continue;

        if ( istrue( var_0.spectating ) )
            continue;

        childthread landmine_run_on_player( var_0 );
    }
}

landmine_run_on_player( var_0 )
{
    self endon( "death" );
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_0.landmine_active = 1;
    var_0.removelinkdamagemodifieronlaststand = var_0.origin;
    var_1 = 50000;
    var_2 = 3;
    var_3 = "";
    var_4 = var_0 getdroptofloorposition( var_0.origin );

    while ( var_0 istouching( self ) && var_2 > 0 )
    {
        if ( abs( var_0.origin[2] - var_4[2] ) < 4 )
            break;

        var_2 = var_2 - 0.05;
        wait 0.05;
    }

    var_5 = randomfloatrange( 0.35, 0.75 );
    var_6 = var_0.origin;
    var_7 = var_6;

    while ( var_0 istouching( self ) && var_5 > 0 )
    {
        if ( distance2dsquared( var_6, var_0.origin ) >= 12 )
            break;

        if ( distance2dsquared( var_7, var_0.origin ) > 2 )
        {
            var_7 = var_0.origin;
            var_5 = var_5 - 0.05;
        }

        wait 0.05;
    }

    if ( !var_0 istouching( self ) )
    {
        var_0.shouldskipdeathsshield = undefined;
        var_0.landmine_active = 0;
        var_0.shouldskiplaststand = 0;
    }
    else
    {
        var_0.shouldskiplaststand = 1;
        var_4 = var_0 getdroptofloorposition( var_0.origin );
        var_8 = magicgrenademanual( "at_mine_mp", var_4 + ( 0, 0, 10 ), ( 0, 0, 4 ), 0.05 );
        var_9 = var_8.origin;
        var_8.owner = spawnstruct();
        var_8.owner.team = "axis";
        var_8.team = "axis";
        wait 0.1;
        var_0.shouldskipdeathsshield = 1;
        var_0 dodamage( var_1, var_0.origin, self );

        if ( istrue( var_0.inlaststand ) )
            var_0 notify( "force_bleed_out" );

        var_0 scripts\engine\utility::_id_12E53( 1, "death" );
        var_0.shouldskipdeathsshield = undefined;
        var_0.landmine_active = 0;
        var_0.shouldskiplaststand = 0;

        while ( !isdefined( var_0.dogtag ) )
            wait 0.05;

        var_10 = ( 0, 0, 40 );

        if ( isdefined( var_0.last_good_pos ) )
            var_0.dogtag.origin = var_0.last_good_pos + var_10;
        else
        {
            if ( isdefined( var_0.removelinkdamagemodifieronlaststand ) )
            {
                var_0.dogtag.origin = getclosestpointonnavmesh( var_0.removelinkdamagemodifieronlaststand ) + var_10;
                return;
            }

            var_0.dogtag.origin = getclosestpointonnavmesh( var_0.dogtag.origin ) + var_10;
        }
    }
}
