// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    scripts\cp_mp\utility\game_utility::players_approach_puzzle_monitor();
    var_0 = scripts\cp\utility::getgametype();

    if ( !isdefined( var_0 ) )
        var_0 = getdvar( "NKTMKRMSKR" );

    var_1 = 0;
    var_2 = [ "cp/cp_score_event_table.csv", "mp/score_event_table.csv" ];
    var_3 = 0;

    for (;;)
    {
        var_4 = tablelookupbyrow( var_2[var_3], var_1, 0 );

        if ( !isdefined( var_4 ) || var_4 == "" )
            break;

        var_5 = tablelookupbyrow( var_2[var_3], var_1, level.dialog_target_down.game_type_col[var_0] );

        if ( !isdefined( var_5 ) || var_5 == "" )
        {
            var_1++;
            continue;
        }

        if ( var_4 == "win" || var_4 == "loss" || var_4 == "tie" )
            var_5 = float( var_5 );
        else
            var_5 = int( var_5 );

        if ( var_5 != -1 )
            scripts\mp\calloutmarkerping_mp::registerscoreinfo( var_4, "value", var_5 );

        var_6 = tablelookuprownum( "mp/splashTable.csv", 0, var_4 );
        scripts\mp\calloutmarkerping_mp::registerscoreinfo( var_4, "eventID", var_6 );
        var_6 = tablelookup( "mp/splashTable.csv", 0, var_4, 2 );
        scripts\mp\calloutmarkerping_mp::registerscoreinfo( var_4, "text", var_6 );
        var_6 = int( tablelookup( "mp/splashTable.csv", 0, var_4, 13 ) );
        scripts\mp\calloutmarkerping_mp::registerscoreinfo( var_4, "priority", var_6 );
        var_6 = int( tablelookup( "mp/splashTable.csv", 0, var_4, 14 ) );
        scripts\mp\calloutmarkerping_mp::registerscoreinfo( var_4, "alwaysShowSplash", var_6 );
        var_7 = tablelookuprownum( "mp/splashTable.csv", 0, var_4 );

        if ( isdefined( var_7 ) && var_7 != -1 )
            scripts\mp\calloutmarkerping_mp::registerscoreinfo( var_4, "splashID", var_7 );

        var_8 = tablelookupbyrow( var_2[var_3], var_1, 4 );
        scripts\mp\calloutmarkerping_mp::registerscoreinfo( var_4, "group", var_8 );
        var_9 = tablelookupbyrow( var_2[var_3], var_1, 3 );

        if ( isdefined( var_9 ) && tolower( var_9 ) == "true" )
            scripts\mp\calloutmarkerping_mp::registerscoreinfo( var_4, "allowBonus", 1 );

        var_1++;
    }

    level._effect["money"] = loadfx( "vfx/props/cash_player_drop" );
    level.numkills = 0;
    level thread onplayerconnect();
    level thread monitorhealed();
    scripts\cp\utility\spawn_event_aggregator::registeronplayerspawncallback( ::onplayerspawn );
    scripts\cp\utility\player_frame_update_aggregator::registerplayerframeupdatecallback( ::monitoradstime );
    scripts\cp\utility\player_frame_update_aggregator::registerplayerframeupdatecallback( ::updatestancetracking );
    scripts\cp\utility\player_frame_update_aggregator::registerplayerframeupdatecallback( ::events_monitorslideupdate );
    scripts\cp\cp_modular_spawning::add_global_spawn_function( "axis", ::playboxuseanimation );
}

onplayerspawn()
{
    self.jumpcur = 0;
    self.mantlecur = 0;
}

onplayerconnect()
{
    for (;;)
    {
        level waittill( "connected", var_0 );
        var_0.killedplayers = [];
        var_0.killedby = [];
        var_0.lastkilledby = undefined;
        var_0.greatestuniqueplayerkills = 0;
        var_0.recentkillcount = 0;
        var_0.recentdefendcount = 0;
        var_0.lastkilltime = 0;
        var_0.lastkilldogtime = 0;
        var_0.damagedplayers = [];

        if ( !isdefined( var_0.pers["cur_kill_streak"] ) )
            var_0.pers["cur_kill_streak"] = 0;

        if ( !isdefined( var_0.pers["cur_death_streak"] ) )
            var_0.pers["cur_death_streak"] = 0;

        var_0 initslidemonitor();
        var_0 initmonitoradstime();
        var_0 thread monitorreload();
        var_0 thread monitorweaponpickup();
        var_0.lastweaponchangetime = 0;
        var_0 initstancetracking();
    }
}

damagedplayer( var_0, var_1 )
{
    if ( var_1 < 50 && var_1 > 10 )
        level thread scripts\cp\cp_player_battlechatter::saytoself( self, "plr_damaged_light", undefined, 0.1 );
    else
        level thread scripts\cp\cp_player_battlechatter::saytoself( self, "plr_damaged_heavy", undefined, 0.1 );
}

playerworlddeath( var_0, var_1 )
{

}

killedplayernotifysys( var_0, var_1, var_2, var_3 )
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    self notify( "killedPlayerNotify" );
    self endon( "killedPlayerNotify" );

    if ( !isdefined( self.killsinaframecount ) )
        self.killsinaframecount = 0;

    self.killsinaframecount++;

    if ( weaponclass( var_2 ) == "spread" )
    {
        if ( !isdefined( self.shotgunkillsinaframecount ) )
            self.shotgunkillsinaframecount = 1;
        else
        {
            self.shotgunkillsinaframecount++;

            if ( self.shotgunkillsinaframecount >= 2 )
                shotguncollateral( self.shotgunkillsinaframecount );
        }
    }
    else if ( var_3 == "MOD_PISTOL_BULLET" || var_3 == "MOD_RIFLE_BULLET" || var_3 == "MOD_HEAD_SHOT" )
    {
        if ( !isdefined( self.bulletkillsinaframecount ) )
            self.bulletkillsinaframecount = 1;
        else
        {
            self.bulletkillsinaframecount++;

            if ( self.bulletkillsinaframecount >= 2 )
                collateral( self.bulletkillsinaframecount );
        }
    }

    waittillframeend;
    thread notifykilledplayer( var_0, var_1, var_2, var_3, self.killsinaframecount );
    self.killsinaframecount = 0;
    self.bulletkillsinaframecount = 0;
    self.shotgunkillsinaframecount = 0;
}

notifykilledplayer( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = createheadicon( var_2 );

    for ( var_6 = 0; var_6 < var_4; var_6++ )
    {
        self notify( "got_a_kill", var_1, var_5, var_3 );
        waitframe();
    }
}

relic_nuketimer_timerloop( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    level.numkills++;
    checkkillstreakkillevents( var_2, var_3, var_4 );

    if ( isai( var_1 ) || isdefined( var_1.classname ) && var_1.classname == "script_vehicle" )
        var_1.guid = var_1 getentitynumber();

    var_7 = var_1.guid;
    var_8 = self.guid;
    var_9 = gettime();
    var_10 = createheadicon( var_2 );
    thread killedplayernotifysys( var_0, var_1, var_2, var_3 );
    thread updaterecentkills( var_0, var_1, var_2, var_10 );
    thread updatequadfeedcounter( self, var_0 );
    self.prevlastkilltime = self.lastkilltime;
    self.lastkilltime = var_9;
    self.lastkilledplayer = var_1;
    self.lastkillvictimpos = var_1.origin;

    if ( isplayer( self ) )
    {
        if ( self.deaths > 0 )
        {
            var_11 = self.kills / self.deaths;

            if ( var_11 > 3.0 )
                level thread scripts\cp\cp_player_battlechatter::saytoself( self, "plr_kd_high", undefined, 0.75 );
        }
        else if ( self.kills > 5 )
            level thread scripts\cp\cp_player_battlechatter::saytoself( self, "plr_kd_high", undefined, 0.75 );
    }

    if ( istrue( self.laststanding ) )
        incpersstat( "clutch", 1 );

    self.modifiers = [];
    self.modifiers["mask"] = 0;
    self.modifiers["mask2"] = 0;

    if ( isdefined( self.damagedplayers ) && isdefined( self.damagedplayers[var_7] ) )
        self.damagedplayers[var_7] = undefined;

    var_12 = scripts\cp\cp_weapon::getweapongroup( var_2.basename );

    if ( !scripts\cp\utility::iskillstreakweapon( var_2.basename ) && !scripts\cp\utility::_hasperk( "specialty_explosivebullets" ) )
    {
        if ( var_3 == "MOD_EXECUTION" )
            execution( var_0 );

        if ( var_2.basename == "none" && !scripts\cp_mp\utility\player_utility::isinvehicle() )
            return 0;

        if ( isdefined( var_1.attackerposition ) )
            var_13 = var_1.attackerposition;
        else
            var_13 = self.origin;

        var_14 = 1;

        if ( isdefined( var_4 ) )
            var_14 = var_4 == self;

        var_15 = anglestoforward( self getplayerangles() );
        var_16 = var_1.origin - var_13;
        var_17 = vectornormalize( var_16 );
        var_18 = vectordot( var_15, var_17 );
        var_19 = scripts\engine\utility::isbulletdamage( var_3 );

        if ( var_1.attackers.size == 1 && !isdefined( var_1.attackers[var_1.guid] ) )
        {
            if ( var_12 == "weapon_sniper" && var_3 != "MOD_MELEE" && var_9 == var_1.attackerdata[self.guid].firsttimedamaged )
            {
                self.modifiers["oneshotkill"] = 1;
                self.modifiers["mask"] = self.modifiers["mask"] | 1;
                thread killeventtextpopup( "one_shot_kill", 1 );
                thread scripts\cp\so_laststand::givemidmatchaward( "one_shot_kill" );
                incpersstat( "oneShotOneKills", 1 );
            }

            if ( var_12 == "weapon_shotgun" && var_3 != "MOD_MELEE" && var_9 == var_1.attackerdata[self.guid].firsttimedamaged )
            {
                self.modifiers["oneshotkill_shotgun"] = 1;
                incpersstat( "oneShotOneKills", 1 );
            }
        }

        if ( var_3 == "MOD_MELEE" )
        {
            if ( var_12 != "weapon_melee" && var_12 != "weapon_melee2" )
            {
                thread killeventtextpopup( "gun_butt", 1 );
                thread scripts\cp\so_laststand::givemidmatchaward( "gun_butt" );
            }

            if ( var_2.basename == "iw8_fists_mp" )
            {
                thread killeventtextpopup( "fist_kill", 1 );
                thread scripts\cp\so_laststand::givemidmatchaward( "fist_kill" );
            }
        }

        if ( isplayer( var_1 ) )
        {
            var_20 = var_1 getheldoffhand();

            if ( var_20.basename == "frag_grenade_mp" || var_20.basename == "cluster_grenade_mp" )
            {
                self.modifiers["cooking"] = 1;
                self.modifiers["mask"] = self.modifiers["mask"] | 2;
            }
        }

        if ( isdefined( self.assistedsuicide ) && self.assistedsuicide )
            assistedsuicide( var_0, var_2 );

        if ( level.numkills == 1 )
            firstblood( var_0 );

        if ( isdefined( self.pers ) && self.pers["cur_death_streak"] > 3 )
            comeback( var_0 );

        if ( var_3 == "MOD_HEAD_SHOT" || isdefined( var_6 ) && ( var_6 == "head" || var_6 == "helmet" || var_6 == "neck" ) )
        {
            level thread scripts\cp\cp_player_battlechatter::saytoself( self, "plr_killfirm_headshot", undefined, 0.75 );
            headshot( var_0 );
        }

        if ( isdefined( self.wasti ) && self.wasti && var_9 - self.spawntime <= 5000 )
            self.modifiers["jackintheboxkill"] = 1;

        if ( !scripts\cp\utility\player::isreallyalive( self ) && isdefined( self.deathtime ) )
        {
            var_21 = gettime() - self.deathtime;

            if ( var_21 < 1500 && var_21 > 0 )
                postdeathkill( var_0 );

            if ( scripts\cp\utility::issimultaneouskillenabled() )
            {
                if ( var_21 == 0 && isdefined( self.lastattacker ) && self.lastattacker == var_1 )
                {
                    thread killeventtextpopup( "simultaneous_kill", 0 );
                    thread scripts\cp\so_laststand::givemidmatchaward( "simultaneous_kill", undefined, undefined, 1 );
                    var_1 thread killeventtextpopup( "simultaneous_kill", 0 );
                    var_1 thread scripts\cp\so_laststand::givemidmatchaward( "simultaneous_kill", undefined, undefined, 1 );
                }
            }
        }

        if ( isdefined( var_1.lastkilltime ) && ( level.teambased && var_9 - var_1.lastkilltime < 1500 ) )
        {
            if ( isdefined( var_1.lastkilledplayer ) && var_1.lastkilledplayer != self )
                avengedplayer( var_0, var_1.lastkilledplayer );
        }

        foreach ( var_24, var_23 in var_1.damagedplayers )
        {
            if ( var_24 == self.guid || var_24 == scripts\engine\utility::string( var_1.guid ) )
                continue;

            if ( level.teambased && var_9 - var_23 < 1750 )
                defendedplayer( var_0, var_24 );
        }

        if ( var_14 )
        {
            var_25 = getshotdistancetype( self, var_2, var_3, var_13, var_1 );

            switch ( var_25 )
            {
                case "pointblank":
                    thread pointblank( var_0 );
                    break;
                case "longshot":
                    thread longshot( var_0 );
                    var_26 = scripts\engine\math::round_float( distance( var_13, var_1.origin ) / 39.37, 2 );
                    self setclientomnvar( "ui_longshot_dist", var_26 );
                    self setclientomnvar( "ui_longshot_special", put_headicon_on_tv_station_boss( var_13, var_1, var_2 ) );
                    break;
                case "very_longshot":
                    thread longshot( var_0 );
                    thread very_longshot( var_0 );
                    var_26 = scripts\engine\math::round_float( distance( var_13, var_1.origin ) / 39.37, 2 );
                    self setclientomnvar( "ui_longshot_dist", var_26 );
                    self setclientomnvar( "ui_longshot_special", put_headicon_on_tv_station_boss( var_13, var_1, var_2 ) );
                    break;
            }
        }

        if ( isbackkill( self, var_1, var_3 ) )
        {
            if ( var_2.basename == "iw8_knife_mp" )
            {
                thread killeventtextpopup( "backstab", 1 );
                thread scripts\cp\so_laststand::givemidmatchaward( "backstab" );
            }

            self.modifiers["backstab"] = 1;
            self.modifiers["mask"] = self.modifiers["mask"] | 4;
        }

        if ( var_14 )
        {
            switch ( weaponclass( var_2.basename ) )
            {
                case "rifle":
                    incpersstat( "arKills", 1 );
                    var_1 incpersstat( "arDeaths", 1 );

                    if ( var_3 == "MOD_HEAD_SHOT" )
                        incpersstat( "arHeadshots", 1 );

                    break;
                case "smg":
                    incpersstat( "smgKills", 1 );
                    var_1 incpersstat( "smgDeaths", 1 );

                    if ( var_3 == "MOD_HEAD_SHOT" )
                        incpersstat( "smgHeadshots", 1 );

                    break;
                case "spread":
                    incpersstat( "shotgunKills", 1 );
                    var_1 incpersstat( "shotgunDeaths", 1 );

                    if ( var_3 == "MOD_HEAD_SHOT" )
                        incpersstat( "shotgunHeadshots", 1 );

                    break;
                case "mg":
                    incpersstat( "lmgKills", 1 );
                    var_1 incpersstat( "lmgDeaths", 1 );

                    if ( var_3 == "MOD_HEAD_SHOT" )
                        incpersstat( "lmgHeadshots", 1 );

                    break;
                case "sniper":
                    incpersstat( "sniperKills", 1 );
                    var_1 incpersstat( "sniperDeaths", 1 );

                    if ( var_3 == "MOD_HEAD_SHOT" )
                        incpersstat( "sniperHeadshots", 1 );

                    break;
                case "rocketlauncher":
                    incpersstat( "launcherKills", 1 );
                    var_1 incpersstat( "launcherDeaths", 1 );

                    if ( var_3 == "MOD_HEAD_SHOT" )
                        incpersstat( "launcherHeadshots", 1 );

                    break;
                case "pistol":
                    incpersstat( "pistolKills", 1 );
                    var_1 incpersstat( "pistolDeaths", 1 );

                    if ( var_3 == "MOD_HEAD_SHOT" )
                        incpersstat( "pistolHeadshots", 1 );

                    break;
            }

            if ( var_3 == "MOD_MELEE" )
            {
                incpersstat( "meleeKills", 1 );
                var_1 incpersstat( "meleeDeaths", 1 );
            }

            if ( scripts\cp\utility::_hasperk( "specialty_bulletdamage" ) )
            {
                incpersstat( "stoppingPowerKills", 1 );

                if ( !isdefined( self.stoppingpowerkills ) )
                    self.stoppingpowerkills = 0;

                self.stoppingpowerkills++;
            }

            if ( scripts\cp\utility::_hasperk( "specialty_quieter" ) )
            {
                incpersstat( "deadSilenceKills", 1 );

                if ( !isdefined( self.deadsilencekills ) )
                    self.deadsilencekills = 0;

                self.deadsilencekills++;
            }

            if ( isdefined( level.supportdrones ) && level.supportdrones.size > 0 )
            {
                foreach ( var_28 in level.supportdrones )
                {
                    if ( var_28.owner == self && var_28.helperdronetype == "radar_drone_overwatch" )
                    {
                        var_28.owner incpersstat( "killstreakPersonalUAVKills", 1 );
                        break;
                    }
                }
            }

            if ( issurvivorkill( self ) )
                thread givekillreward( "low_health_kill", var_0, var_2, "low_health_kill" );

            if ( scripts\cp\utility\player::isplayerads() )
            {
                self.modifiers["ads"] = 1;
                self.modifiers["mask"] = self.modifiers["mask"] | 8;
                incpersstat( "adsKills", 1 );
            }
            else if ( var_19 )
            {
                self.modifiers["hipfire"] = 1;
                self.modifiers["mask"] = self.modifiers["mask"] | 16;
                incpersstat( "hipfireKills", 1 );
            }

            if ( !self isonground() )
                self.modifiers["airborne"] = 1;

            if ( isplayer( var_1 ) || isagent( var_1 ) )
            {
                if ( !var_1 isonground() )
                    self.modifiers["victim_airborne"] = 1;
            }

            if ( self playermount() >= 0.5 )
            {
                self.modifiers["mounted"] = 1;
                self.modifiers["mask"] = self.modifiers["mask"] | 32;
            }

            if ( var_19 )
            {
                self.modifiers["bullet_damage"] = 1;
                var_30 = self getweaponammoclip( var_2 );

                if ( var_30 <= 0 )
                {
                    self.modifiers["last_bullet_kill"] = 1;
                    self.modifiers["mask"] = self.modifiers["mask"] | 64;
                }
            }

            if ( isplayer( var_1 ) || isagent( var_1 ) )
            {
                if ( var_1 issprinting() )
                {
                    self.modifiers["victim_sprinting"] = 1;
                    self.modifiers["mask"] = self.modifiers["mask"] | 128;
                }
            }

            if ( level.teambased )
            {
                foreach ( var_32 in level.players )
                {
                    if ( self.team != var_32.team || self == var_32 )
                        continue;

                    if ( !scripts\cp\utility\player::isreallyalive( var_32 ) )
                        continue;

                    if ( distancesquared( self.origin, var_32.origin ) < 90000 )
                    {
                        self.modifiers["buddy_kill"] = 1;
                        break;
                    }
                }
            }
        }
        else if ( var_12 == "weapon_projectile" )
        {
            if ( isdefined( var_4 ) && isdefined( var_4.adsfire ) )
            {
                if ( var_4.adsfire )
                {
                    self.modifiers["ads"] = 1;
                    self.modifiers["mask"] = self.modifiers["mask"] | 8;
                }
                else
                {
                    self.modifiers["hipfire"] = 1;
                    self.modifiers["mask"] = self.modifiers["mask"] | 16;
                }
            }
        }

        if ( isplayer( var_1 ) || isagent( var_1 ) )
        {
            if ( !var_1 isonground() && !var_1 iswallrunning() && ( !self isonground() && !self iswallrunning() ) )
            {
                if ( var_14 )
                    thread givekillreward( "air_to_air_kill", var_0, var_2, "air_to_air_kill" );
            }
            else
            {
                if ( var_14 )
                {
                    if ( self iswallrunning() )
                        thread givekillreward( "wallkill", var_0, var_2, "wallrun_kill" );
                    else if ( isdeathfromabove( self, var_2, var_3, var_13, var_1 ) )
                        thread givekillreward( "jumpkill", var_0, var_2, "air_kill" );
                    else if ( events_issliding() )
                    {
                        thread givekillreward( "slidekill", var_0, var_2, "slide_kill" );
                        self.modifiers["sliding"] = 1;
                        self.modifiers["mask"] = self.modifiers["mask"] | 256;
                    }

                    var_34 = self getstance();

                    switch ( var_34 )
                    {
                        case "prone":
                            self.modifiers["prone_kill"] = 1;
                            self.modifiers["mask"] = self.modifiers["mask"] | 512;
                            break;
                        case "crouch":
                            self.modifiers["crouch_kill"] = 1;
                            self.modifiers["mask"] = self.modifiers["mask"] | 1024;
                            break;
                    }
                }

                if ( var_1 iswallrunning() )
                    thread givekillreward( "killonwall", var_0, var_2, "kill_wallrunner" );
                else if ( isskeetshooter( self, var_2, var_3, var_13, var_1 ) )
                    thread givekillreward( "killinair", var_0, var_2, "kill_jumper" );
            }
        }

        if ( isdefined( var_1.streakdata ) )
        {
            foreach ( var_36 in var_1.streakdata.streaks )
            {
                var_37 = var_36.currentcost - var_1.streakpoints;

                if ( var_37 > 0 && var_37 <= 1 )
                {
                    buzzkill( var_0, var_1 );
                    break;
                }
            }
        }

        if ( var_14 && isplayer( self ) && !isagent( self ) && !isscriptedagent( self ) )
        {
            if ( self ismantling() )
            {
                thread killeventtextpopup( "mantle_kill", 1 );
                thread scripts\cp\so_laststand::givemidmatchaward( "mantle_kill" );
            }

            if ( isdefined( self.tookweaponfrom ) && isdefined( self.tookweaponfrom[var_10] ) && self.tookweaponfrom[var_10] == var_1 )
            {
                thread killeventtextpopup( "backfire", 1 );
                thread scripts\cp\so_laststand::givemidmatchaward( "backfire" );
            }
        }

        if ( isdefined( var_1.stuckbygrenade ) )
            level thread scripts\cp\cp_player_battlechatter::saytoself( self, "plr_killfirm_semtex", undefined, 0.75 );

        if ( scripts\cp\cp_weapons::isthrowingknife( var_2.basename ) )
        {
            thread killeventtextpopup( "throwingknife_kill", 1 );
            thread scripts\cp\so_laststand::givemidmatchaward( "throwingknife_kill" );
        }

        if ( isdefined( var_1.brjugg_setjuggwatchers ) && isdefined( var_1.brjugg_setjuggwatchers.owner ) )
        {
            if ( var_1.brjugg_setjuggwatchers.owner != self )
                thread killeventtextpopup( "assist_decoy" );
        }

        var_39 = self.pers["cur_kill_streak"] + 1;
        var_40 = 5;

        if ( level.gametype == "arm" )
            var_40 = 10;

        if ( !( var_39 % var_40 ) )
        {
            if ( !isdefined( self.lastkillsplash ) || var_39 != self.lastkillsplash )
            {
                thread scripts\cp\cp_hud_util::teamplayercardsplash( "callout_kill_streaking", self, undefined, var_39 );
                self.lastkillsplash = var_39;
            }

            if ( var_39 <= 30 )
            {
                thread killeventtextpopup( "streak_" + var_39, 1 );
                thread scripts\cp\so_laststand::givemidmatchaward( "streak_" + var_39 );
            }
        }

        if ( !( var_39 % 5 ) )
        {

        }

        if ( var_39 > 30 )
        {
            thread killeventtextpopup( "streak_max", 1 );
            thread scripts\cp\so_laststand::givemidmatchaward( "streak_max" );
        }

        if ( isdefined( var_4 ) && istrue( var_4.isequipment ) && var_3 == "MOD_IMPACT" && !scripts\cp\cp_weapons::isthrowingknife( var_2.basename ) )
        {
            thread scripts\cp\so_laststand::givemidmatchaward( "item_impact" );
            self.modifiers["item_impact"] = 1;
        }

        if ( scripts\cp\cp_weapons::islauncherdirectimpactdamage( var_2, var_3 ) )
        {
            thread killeventtextpopup( "launcher_direct_hit", 1 );
            thread scripts\cp\so_laststand::givemidmatchaward( "launcher_direct_hit" );
            self.modifiers["launcher_impact"] = 1;
        }

        if ( var_18 >= 0.6428 )
            self.modifiers["victim_in_standard_view"] = 1;

        if ( isdefined( self.lastadsstarttime ) && var_9 - self.lastadsstarttime <= 500 && var_12 == "weapon_sniper" )
        {
            self.modifiers["quickscope"] = 1;
            self.modifiers["mask"] = self.modifiers["mask"] | 2048;
        }

        if ( self.health <= 50 )
        {
            self.modifiers["low_health_kill"] = 1;
            self.modifiers["mask"] = self.modifiers["mask"] | 4096;
        }

        if ( isdefined( self.lastweaponchangetime ) && var_9 - self.lastweaponchangetime <= 1500 )
        {
            self.modifiers["weapon_change_kill"] = 1;
            self.modifiers["mask"] = self.modifiers["mask"] | 8192;
        }

        if ( isdefined( self.lastweaponpickuptime ) && var_9 - self.lastweaponpickuptime <= 1500 )
        {
            self.modifiers["weapon_pickup_kill"] = 1;
            self.modifiers["mask"] = self.modifiers["mask"] | 16384;
        }

        if ( isdefined( self.lastreloadtime ) && var_9 - self.lastreloadtime <= 1500 )
        {
            self.modifiers["reload_kill"] = 1;
            self.modifiers["mask"] = self.modifiers["mask"] | 65536;
        }

        if ( scripts\cp_mp\utility\player_utility::isinvehicle() )
        {
            self.modifiers["in_vehicle"] = 1;
            self.modifiers["mask2"] = self.modifiers["mask2"] | 4096;
        }

        if ( var_1 scripts\cp_mp\utility\player_utility::isinvehicle() )
        {
            self.modifiers["victim_in_vehicle"] = 1;
            self.modifiers["mask2"] = self.modifiers["mask2"] | 8192;
        }

        if ( istrue( var_1.isdefusing ) )
            self.modifiers["killed_defuser"] = 1;

        if ( scripts\cp\cp_weapon::iscacsecondaryweapon( var_2 ) )
        {
            self.modifiers["secondary_weapon"] = 1;
            self.modifiers["mask"] = self.modifiers["mask"] | 131072;
        }

        thread checkmatchdatakills( var_0, var_1 );
    }

    if ( !isdefined( self.killedplayers[var_7] ) )
        self.killedplayers[var_7] = 0;

    if ( !isdefined( var_1.killedby[var_8] ) )
        var_1.killedby[var_8] = 0;

    self.killedplayers[var_7]++;
    var_1.killedby[var_8]++;
    var_1.lastkilledby = self;

    if ( isplayer( var_1 ) )
    {
        if ( !var_1 scripts\cp\utility::isusingremote() && ( !var_1 scripts\cp\utility::_hasperk( "specialty_survivor" ) || istrue( var_1.inlaststand ) ) )
            var_1 thread scripts\cp\utility::setdof_killer();
    }

    scripts\mp\trials\mp_trl_gunslinger::bufferednotify( "kill_event_buffered", var_1, var_10, var_3, self.modifiers );
}

puddle_structs( var_0 )
{
    return isdefined( var_0 ) && isdefined( var_0.vehiclename ) && isdefined( var_0.streakinfo );
}

checkkillstreakkillevents( var_0, var_1, var_2 )
{
    var_3 = scripts\cp\utility::iskillstreakweapon( var_0.basename ) || puddle_structs( var_2 );
    var_4 = scripts\mp\brmatchdata::propspectatekeys( var_0 );

    if ( var_3 && !var_4 )
    {
        var_5 = level.killstreakweaponmap[var_0.basename];
        var_6 = 0;
        var_7 = 0;
        var_8 = 0;
        var_9 = 0;

        if ( !isdefined( var_5 ) )
            return;

        switch ( var_5 )
        {
            case "bradley":
                incpersstat( "killstreakTankKills", 1 );
                var_7 = 1;
                var_9 = 1;
                break;
            case "chopper_gunner":
                incpersstat( "killstreakChopperGunnerKills", 1 );
                var_7 = 1;
                var_8 = 1;
                break;
            case "chopper_support":
                incpersstat( "killstreakChopperSupportKills", 1 );
                var_7 = 1;
                var_8 = 1;
                break;
            case "cruise_predator":
                incpersstat( "killstreakCruiseMissileKills", 1 );
                var_7 = 1;
                var_8 = 1;
                break;
            case "fuel_airstrike":
                var_7 = 1;
                break;
            case "gunship":
                incpersstat( "killstreakGunshipKills", 1 );
                var_7 = 1;
                var_8 = 1;
                break;
            case "hover_jet":
                incpersstat( "killstreakVTOLJetKills", 1 );
                var_7 = 1;
                var_8 = 1;
                break;
            case "juggernaut":
                incpersstat( "killstreakJuggernautKills", 1 );
                var_7 = 1;
                var_9 = 1;
                break;
            case "manual_turret":
                incpersstat( "killstreakShieldTurretKills", 1 );
                var_7 = 1;
                var_9 = 1;
                break;
            case "multi_airstrike":
                var_7 = 1;
                break;
            case "pac_sentry":
                incpersstat( "killstreakWheelsonKills", 1 );
                var_7 = 1;
                var_9 = 1;
                break;
            case "precision_airstrike":
                incpersstat( "killstreakAirstrikeKills", 1 );
                var_7 = 1;
                var_8 = 1;
                break;
            case "sentry_gun":
                incpersstat( "killstreakSentryGunKills", 1 );
                var_7 = 1;
                var_9 = 1;
                break;
            case "toma_strike":
                incpersstat( "killstreakCluserStrikeKills", 1 );
                var_7 = 1;
                var_8 = 1;
                break;
            case "white_phosphorus":
                incpersstat( "killstreakWhitePhosphorousKillsAssists", 1 );
                var_7 = 1;
                var_8 = 1;
                break;
            default:
                thread scripts\mp\brmatchdata::giveunifiedpoints( "killstreak_full_score", var_0 );
                break;
        }

        if ( isdefined( var_2.streakinfo ) )
        {
            if ( !isdefined( var_2.streakinfo.kills ) )
                var_2.streakinfo.kills = 0;

            var_2.streakinfo.kills++;
        }

        incpersstat( "killstreakKills", 1 );

        if ( var_8 )
            incpersstat( "killstreakAirKills", 1 );

        if ( var_9 )
            incpersstat( "killstreakGroundKills", 1 );

        if ( var_7 )
            thread scripts\cp\so_laststand::givemidmatchaward( "ss_kill_" + var_5, undefined, undefined, undefined, undefined, undefined, var_6 );

        level thread scripts\cp\cp_player_battlechatter::saytoself( self, "plr_killfirm_killstreak", undefined, 0.75 );
    }
}

killedkillstreak( var_0, var_1, var_2 )
{
    if ( scripts\cp\utility::iskillstreakweapon( var_2.basename ) )
        thread checkkillstreakkillevents( var_2, undefined, var_1 );
    else
    {
        var_3 = "kill_ss_" + var_0;
        var_1 thread scripts\cp\so_laststand::givemidmatchaward( var_3 );
        var_1 incpersstat( "destroyedKillstreaks", 1 );
        level thread scripts\cp\cp_player_battlechatter::saytoself( var_1, "plr_killstreak_destroy", undefined, 0.75 );
    }

    if ( isdefined( var_1.perk_data ) && var_1 scripts\cp\utility::_hasperk( "specialty_chain_killstreaks" ) )
    {
        var_4 = 10;
        var_5 = var_4 * var_1.perk_data["super_fill_scalar"];
        var_1 scripts\cp\coop_super::increase_super_progress( var_5 );
    }
}

is_enemy_highest_score( var_0, var_1 )
{
    foreach ( var_3 in var_1 )
    {
        if ( var_3.score > var_0.score )
            return 0;
    }

    return 1;
}

getshotdistancetype( var_0, var_1, var_2, var_3, var_4 )
{
    if ( isalive( var_0 ) && !var_0 scripts\cp\utility::isusingremote() && ( var_2 == "MOD_RIFLE_BULLET" || var_2 == "MOD_PISTOL_BULLET" || var_2 == "MOD_HEAD_SHOT" ) && !scripts\cp\utility::iskillstreakweapon( var_1.basename ) && !istrue( var_0.assistedsuicide ) )
    {
        var_5 = distancesquared( var_3, var_4.origin );

        if ( var_5 < 9216 )
            return "pointblank";

        if ( var_5 > 4000000 )
            return "very_longshot";

        var_6 = scripts\cp\cp_weapon::getweapongroup( var_1.basename );
        var_7 = undefined;

        switch ( var_6 )
        {
            case "weapon_pistol":
                var_7 = 800;
                break;
            case "weapon_beam":
            case "weapon_smg":
                var_7 = 1200;
                break;
            case "weapon_assault":
            case "weapon_dmr":
            case "weapon_lmg":
                var_7 = 1500;
                break;
            case "weapon_rail":
            case "weapon_sniper":
                var_7 = 2000;
                break;
            case "weapon_shotgun":
                var_7 = 500;
                break;
            case "weapon_projectile":
            default:
                var_7 = 1536;
                break;
        }

        var_8 = var_7 * var_7;

        if ( var_5 > var_8 )
            return "longshot";
    }

    return "none";
}

put_headicon_on_tv_station_boss( var_0, var_1, var_2 )
{
    var_3 = distancesquared( var_0, var_1.origin );
    var_4 = scripts\cp\cp_weapon::getweapongroup( var_2.basename );
    var_5 = undefined;

    switch ( var_4 )
    {
        case "weapon_pistol":
            var_5 = 1500;
            break;
        case "weapon_beam":
        case "weapon_smg":
            var_5 = 2000;
            break;
        case "weapon_dmr":
            var_5 = 4000;
            break;
        case "weapon_assault":
        case "weapon_lmg":
            var_5 = 3000;
            break;
        case "weapon_rail":
        case "weapon_sniper":
            var_5 = 8000;
            break;
        case "weapon_shotgun":
            var_5 = 1000;
            break;
        case "weapon_projectile":
            var_5 = 4000;
            break;
        default:
            var_5 = 4000;
            break;
    }

    var_6 = var_5 * var_5;
    return var_3 > var_6;
}

isdeathfromabove( var_0, var_1, var_2, var_3, var_4 )
{
    if ( isalive( var_0 ) && var_0 isjumping() && scripts\engine\utility::isbulletdamage( var_2 ) )
    {
        var_5 = var_0.origin[2] - var_4.origin[2];
        return var_5 > 60;
    }

    return 0;
}

isskeetshooter( var_0, var_1, var_2, var_3, var_4 )
{
    return isalive( var_0 ) && var_4 isjumping() && scripts\engine\utility::isbulletdamage( var_2 );
}

isbackkill( var_0, var_1, var_2 )
{
    if ( !isplayer( var_0 ) || !isplayer( var_1 ) )
        return 0;

    if ( var_2 != "MOD_RIFLE_BULLET" && var_2 != "MOD_PISTOL_BULLET" && var_2 != "MOD_MELEE" && var_2 != "MOD_HEAD_SHOT" )
        return 0;

    var_3 = var_1 getplayerangles();
    var_4 = var_0 getplayerangles();
    var_5 = angleclamp180( var_3[1] - var_4[1] );

    if ( abs( var_5 ) < 80 )
        return 1;

    return 0;
}

issurvivorkill( var_0 )
{
    return var_0.health > 0 && var_0.health < var_0.maxhealth * 0.2;
}

checkmatchdatakills( var_0, var_1 )
{
    if ( isdefined( self.lastkilledby ) && self.lastkilledby == var_1 )
    {
        self.lastkilledby = undefined;
        revenge( var_0, var_1 );
    }
}

givekillreward( var_0, var_1, var_2, var_3 )
{
    self.modifiers[var_0] = 1;

    if ( isdefined( var_3 ) )
        thread scripts\cp\so_laststand::givemidmatchaward( var_3 );
    else
        thread scripts\mp\brmatchdata::giveunifiedpoints( var_0, var_2 );
}

proximityassist( var_0 )
{
    self.modifiers["proximityAssist"] = 1;
    thread scripts\mp\brmatchdata::giveunifiedpoints( "proximityassist" );
}

proximitykill( var_0 )
{
    self.modifiers["proximityKill"] = 1;
    thread scripts\mp\brmatchdata::giveunifiedpoints( "proximitykill" );
}

longshot( var_0 )
{
    self.modifiers["longshot"] = 1;
    self.modifiers["mask"] = self.modifiers["mask"] | 262144;
    thread scripts\mp\ammorestock::logattackerkillevent( var_0, "longshot" );
    incpersstat( "longshotKills", 1 );
    thread killeventtextpopup( "longshot", 1 );
    thread scripts\cp\so_laststand::givemidmatchaward( "longshot" );
}

very_longshot( var_0 )
{
    self.modifiers["very_longshot"] = 1;
}

pointblank( var_0 )
{
    self.modifiers["pointblank"] = 1;
    self.modifiers["mask"] = self.modifiers["mask"] | 524288;
    thread scripts\mp\ammorestock::logattackerkillevent( var_0, "pointblank" );
    thread killeventtextpopup( "pointblank", 1 );
    thread scripts\cp\so_laststand::givemidmatchaward( "pointblank" );
    incpersstat( "pointBlankKills", 1 );
}

headshot( var_0 )
{
    self.modifiers["headshot"] = 1;
    self.modifiers["mask"] = self.modifiers["mask"] | 1048576;
    thread scripts\mp\ammorestock::logattackerkillevent( var_0, "headshot" );
    thread killeventtextpopup( "headshot", 1 );
    thread scripts\cp\so_laststand::givemidmatchaward( "headshot" );
}

avengedplayer( var_0, var_1 )
{
    self.modifiers["avenger"] = 1;
    self.modifiers["mask"] = self.modifiers["mask"] | 2097152;
    thread scripts\mp\ammorestock::logattackerkillevent( var_0, "avenger" );
    incpersstat( "avengerKills", 1 );
    thread killeventtextpopup( "avenger", 1 );
    thread scripts\cp\so_laststand::givemidmatchaward( "avenger" );
}

assistedsuicide( var_0, var_1 )
{
    self.modifiers["assistedsuicide"] = 1;
    thread scripts\mp\brmatchdata::giveunifiedpoints( "assistedsuicide", var_1 );
    thread scripts\mp\ammorestock::logattackerkillevent( var_0, "assistedsuicide" );
    thread killeventtextpopup( "assistedsuicide", 1 );
    thread scripts\cp\so_laststand::givemidmatchaward( "assistedsuicide" );
}

defendedplayer( var_0, var_1 )
{
    self.modifiers["defender"] = 1;
    self.modifiers["mask2"] = self.modifiers["mask2"] | 4194304;
    thread scripts\mp\ammorestock::logattackerkillevent( var_0, "defender" );
    incpersstat( "defenderKills", 1 );
    var_2 = scripts\cp\utility::getplayerforguid( var_1 );
    thread killeventtextpopup( "savior", 0 );
    thread scripts\cp\so_laststand::givemidmatchaward( "save_teammate" );
}

postdeathkill( var_0 )
{
    self.modifiers["posthumous"] = 1;
    self.modifiers["mask"] = self.modifiers["mask"] | 8388608;
    thread scripts\mp\ammorestock::logattackerkillevent( var_0, "posthumous" );
    thread killeventtextpopup( "posthumous", 1 );
    thread scripts\cp\so_laststand::givemidmatchaward( "posthumous" );
}

revenge( var_0, var_1 )
{
    self.modifiers["revenge"] = 1;
    self.modifiers["mask"] = self.modifiers["mask"] | 16777216;
    thread scripts\mp\ammorestock::logattackerkillevent( var_0, "revenge" );
    incpersstat( "revengeKills", 1 );
    thread killeventtextpopup( "revenge", 1 );
    thread scripts\cp\so_laststand::givemidmatchaward( "revenge" );
}

multikill( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( self.fxangles ) )
        self.fxangles = var_1;

    if ( var_1 < self.fxangles )
        return;

    self notify( "multiKill" );
    self endon( "multiKill" );
    waitframe();
    var_4 = undefined;
    var_5 = undefined;

    switch ( var_1 )
    {
        case 2:
            var_4 = "double";
            break;
        case 3:
            var_4 = "triple";
            var_5 = "callout_3xkill";
            break;
        case 4:
            var_4 = "four";
            var_5 = "callout_4xkill";
            break;
        case 5:
            var_4 = "five";
            var_5 = "callout_5xkill";
            break;
        case 6:
            var_4 = "six";
            var_5 = "callout_6xkill";
            break;
        case 7:
            var_4 = "seven";
            var_5 = "callout_7xkill";
            break;
        case 8:
            var_4 = "eight";
            var_5 = "callout_8xkill";
            break;
        default:
            var_4 = "multi";
            var_5 = "callout_9xkill";
            break;
    }

    if ( isdefined( self.pers["highestMultikill"] ) && var_1 > self.pers["highestMultikill"] )
        self.pers["highestMultikill"] = var_1;

    thread scripts\mp\ammorestock::logmultikill( var_0, var_1 );

    if ( isdefined( var_4 ) )
    {
        thread killeventtextpopup( var_4, scripts\engine\utility::ter_op( isdefined( var_2 ), var_2, 1 ), istrue( var_3 ) );

        if ( !istrue( var_3 ) )
            thread scripts\cp\so_laststand::givemidmatchaward( var_4, undefined, undefined, undefined, undefined, undefined, undefined, undefined, self getcurrentweapon() );
    }

    if ( isdefined( var_5 ) )
    {
        if ( !istrue( var_3 ) )
            thread is_suicidebomber( self, var_5, undefined, self );
        else
            thread scripts\cp\cp_hud_util::teamplayercardsplash( var_5, self, self.team, undefined, 1 );
    }
}

is_suicidebomber( var_0, var_1, var_2, var_3 )
{
    var_0 thread scripts\cp\cp_hud_message::showsplash( var_1, var_2, var_3 );
}

firstblood( var_0 )
{
    self.modifiers["firstblood"] = 1;
    self.modifiers["mask"] = self.modifiers["mask"] | 33554432;
    thread scripts\mp\ammorestock::logattackerkillevent( var_0, "firstblood" );
    thread scripts\cp\cp_hud_util::teamplayercardsplash( "callout_firstblood", self );
    thread killeventtextpopup( "firstblood", 1 );
    thread scripts\cp\so_laststand::givemidmatchaward( "firstblood" );
}

winningshot( var_0 )
{

}

buzzkill( var_0, var_1 )
{
    self.modifiers["buzzkill"] = var_1.pers["cur_kill_streak"];
    self.modifiers["mask"] = self.modifiers["mask"] | 67108864;
    thread scripts\mp\ammorestock::logattackerkillevent( var_0, "buzzkill" );
    thread killeventtextpopup( "buzzkill", 1 );
    thread scripts\cp\so_laststand::givemidmatchaward( "buzzkill" );
}

comeback( var_0 )
{
    self.modifiers["comeback"] = 1;
    self.modifiers["mask"] = self.modifiers["mask"] | 134217728;
    thread scripts\mp\ammorestock::logattackerkillevent( var_0, "comeback" );
    thread killeventtextpopup( "comeback", 1 );
    thread scripts\cp\so_laststand::givemidmatchaward( "comeback" );
    incpersstat( "comebackKills", 1 );
}

collateral( var_0 )
{
    if ( var_0 == 2 )
    {
        level thread scripts\cp\cp_player_battlechatter::saytoself( self, "plr_killfirm_twofer", undefined, 0.75 );
        thread killeventtextpopup( "one_shot_two_kills", 1 );
        thread scripts\cp\so_laststand::givemidmatchaward( "one_shot_two_kills" );
    }

    if ( var_0 == 3 )
        level thread scripts\cp\cp_player_battlechatter::saytoself( self, "plr_killfirm_threefer", undefined, 0.75 );
}

shotguncollateral( var_0 )
{

}

quadfeed( var_0, var_1 )
{
    self.modifiers["quadfeed"] = 1;
    self.modifiers["mask"] = self.modifiers["mask"] | 536870912;
    thread killeventtextpopup( "quad_feed", 1 );
    thread scripts\cp\so_laststand::givemidmatchaward( "quad_feed" );
}

disconnected()
{
    var_0 = self.guid;

    for ( var_1 = 0; var_1 < level.players.size; var_1++ )
    {
        if ( isdefined( level.players[var_1].killedplayers[var_0] ) )
            level.players[var_1].killedplayers[var_0] = undefined;

        if ( isdefined( level.players[var_1].killedby[var_0] ) )
            level.players[var_1].killedby[var_0] = undefined;
    }
}

monitorhealed()
{
    level endon( "end_game" );

    for (;;)
    {
        level waittill( "healed", var_0 );
        var_0 thread scripts\mp\brmatchdata::giveunifiedpoints( "healed" );
    }
}

updaterecentkills( var_0, var_1, var_2, var_3 )
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    self notify( "updateRecentKills" );
    self endon( "updateRecentKills" );

    if ( !isdefined( self.recentkillcount ) )
        self.recentkillcount = 0;

    self.recentkillcount++;

    if ( !isdefined( self.recentkillsperweapon ) )
        self.recentkillsperweapon = [];

    if ( !isdefined( self.recentkillsperweapon[var_3] ) )
        self.recentkillsperweapon[var_3] = 1;
    else
        self.recentkillsperweapon[var_3]++;

    var_4 = scripts\cp\utility::getequipmenttype( var_2.basename );

    if ( isdefined( var_4 ) && var_4 == "lethal" && var_2.basename != "throwingknife_mp" )
    {
        level thread scripts\cp\cp_player_battlechatter::saytoself( self, "plr_killfirm_grenade", undefined, 0.75 );
        level thread scripts\cp\cp_player_battlechatter::saytoself( self, "plr_killfirm_amf", undefined, 0.75 );

        if ( self.recentkillsperweapon[var_3] > 0 && self.recentkillsperweapon[var_3] % 2 == 0 )
        {
            thread killeventtextpopup( "grenade_double", 1 );
            thread scripts\cp\so_laststand::givemidmatchaward( "grenade_double" );
        }
    }

    scripts\mp\trials\mp_trl_gunslinger::bufferednotify( "update_rapid_kill_buffered", self.recentkillcount, var_3 );

    if ( self.recentkillcount > 1 )
        thread multikill( var_0, self.recentkillcount, 0 );

    wait 2.5;

    if ( self.recentkillcount > 1 )
    {
        thread multikill( var_0, self.recentkillcount, 1, 1 );

        if ( self.recentkillcount > 2 )
        {

        }
    }

    incpersstat( "mostMultikills", 1 );
    self.recentkillcount = 0;
    self.recentdefendcount = 0;
    self.recentkillsperweapon = undefined;
}

monitorcratejacking()
{
    level endon( "end_game" );
    self endon( "disconnect" );

    for (;;)
    {
        self waittill( "hijacker", var_0, var_1 );
        thread scripts\cp\so_laststand::givemidmatchaward( "ss_use_enemy_dronedrop" );
        var_2 = "hijacked_airdrop";

        if ( isdefined( var_1 ) )
            var_1 scripts\cp\cp_hud_message::showsplash( var_2, undefined, self );
    }
}

updatequadfeedcounter( var_0, var_1 )
{
    if ( isdefined( level.quadfeedinfo ) && gettime() - level.quadfeedinfo.starttime > 5000 )
        level.quadfeedinfo = undefined;

    if ( !isdefined( level.quadfeedinfo ) || level.quadfeedinfo.player != var_0 )
    {
        var_2 = spawnstruct();
        var_2.player = var_0;
        var_2.starttime = gettime();
        var_2.feedcount = 1;
        level.quadfeedinfo = var_2;
    }
    else
    {
        var_2 = level.quadfeedinfo;
        var_2.feedcount++;

        if ( var_2.feedcount == 4 )
        {
            var_2.player quadfeed( var_1, var_2 );
            level.quadfeedinfo = undefined;
        }
    }
}

initslidemonitor()
{
    self.eventswassliding = self issprintsliding();
    self.eventsslideendtime = undefined;
}

events_monitorslideupdate()
{
    if ( scripts\cp\utility\player::isreallyalive( self ) )
    {
        var_0 = self issprintsliding();

        if ( istrue( self.eventswassliding ) && !var_0 )
            self.eventsslideendtime = gettime();

        self.eventswassliding = var_0;
    }
    else
    {
        self.eventswassliding = 0;
        self.eventsslideendtime = undefined;
    }
}

events_issliding()
{
    if ( self issprintsliding() )
        return 1;

    events_monitorslideupdate();

    if ( isdefined( self.eventsslideendtime ) )
    {
        if ( gettime() - self.eventsslideendtime <= 150 )
            return 1;
    }

    return 0;
}

initmonitoradstime()
{
    self.wasads = scripts\cp\utility\player::isplayerads();
    self.lastadsstarttime = 0;
}

monitoradstime()
{
    if ( scripts\cp\utility\player::isplayerads() )
    {
        if ( !self.wasads )
        {
            self.lastadsstarttime = gettime();
            self.wasads = 1;
        }
    }
    else
        self.wasads = 0;
}

monitorreload()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self.lastreloadtime = 0;

    for (;;)
    {
        self waittill( "reload" );
        self.lastreloadtime = gettime();
        incpersstat( "reloads", 1 );
    }
}

monitorweaponpickup()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self.lastweaponpickuptime = 0;

    for (;;)
    {
        self waittill( "weapon_pickup" );
        self.lastweaponpickuptime = gettime();
        incpersstat( "weaponPickups", 1 );
    }
}

monitorweaponswitch()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self.lastweaponchangetime = 0;

    for (;;)
    {
        self waittill( "weapon_change" );
        self.lastweaponchangetime = gettime();
    }
}

updateweaponchangetime()
{
    self.lastweaponchangetime = gettime();
}

initstancetracking()
{
    self.laststance = self getstance();
    self.laststancechangetime = gettime();
    self.laststancetimes = [];
    self.laststancetimes["prone"] = 0;
    self.laststancetimes["crouch"] = 0;
    self.laststancetimes["stand"] = 0;
}

updatestancetracking()
{
    if ( !isalive( self ) )
        return;

    var_0 = self.mantlecur;
    self.mantlecur = self ismantling();

    if ( !istrue( var_0 ) && self.mantlecur )
    {

    }

    var_1 = self.jumpcur;
    self.jumpcur = self isjumping();

    if ( !istrue( var_1 ) && self.jumpcur )
    {

    }

    var_2 = self getstance();

    if ( var_2 != self.laststance )
    {
        if ( self.laststance == "crouch" )
        {
            var_3 = self.laststancechangetime;
            var_4 = ( gettime() - var_3 ) / 1000;
            incpersstat( "timeCrouched", var_4 );
        }

        if ( self.laststance == "prone" )
        {
            var_3 = self.laststancechangetime;
            var_4 = ( gettime() - var_3 ) / 1000;
            incpersstat( "timeProne", var_4 );
        }

        self.laststancechangetime = gettime();

        if ( !isdefined( self.pers["stanceTracking"] ) )
        {
            self.pers["stanceTracking"] = [];
            self.pers["stanceTracking"]["prone"] = 0;
            self.pers["stanceTracking"]["crouch"] = 0;
            self.pers["stanceTracking"]["stand"] = 0;
        }

        if ( var_2 == "prone" || var_2 == "crouch" || var_2 == "stand" )
            self.pers["stanceTracking"][var_2]++;
    }

    self.laststancetimes[var_2] = gettime();
    self.laststance = var_2;
}

predatormissileimpact( var_0 )
{

}

largevehicleexplosion( var_0 )
{

}

vehiclekilled( var_0 )
{

}

missilefired( var_0 )
{
    thread trackmissile( var_0 );
}

trackmissile( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "death" );
    var_0 endon( "entitydeleted" );
    var_0.whizbyplayers = [];

    for (;;)
    {
        var_1 = scripts\common\utility::playersnear( var_0.origin, 220 );

        foreach ( var_3 in var_1 )
        {
            if ( isdefined( var_0.owner ) && var_3 == var_0.owner )
                continue;

            missilewhizby( var_3, var_0 );
            var_0.whizbyplayers[var_3.guid] = 1;
        }

        wait 0.1;
    }
}

missilewhizby( var_0, var_1 )
{

}

bombdefused( var_0 )
{
    var_1 = 0;
    var_2 = 0;

    if ( !var_1 )
    {
        var_3 = scripts\cp\utility::getplayersinradius( var_0.origin, 600 );

        foreach ( var_5 in var_3 )
        {
            if ( var_5.team != var_0.team )
            {
                var_2 = 1;
                break;
            }
        }
    }

    if ( var_1 )
        var_0 thread scripts\cp\so_laststand::givemidmatchaward( "mode_sd_last_defuse" );
    else
        var_0 thread scripts\cp\so_laststand::givemidmatchaward( "mode_sd_defuse" );

    var_0 incpersstat( "defuses", 1 );

    if ( isplayer( var_0 ) )
        var_0 thread scripts\mp\ammorestock::loggameevent( "defuse", var_0.origin );
}

revivedplayer( var_0, var_1 )
{
    if ( scripts\cp\utility::getgametype() == "cp_survival" )
        return;
}

doorused( var_0, var_1 )
{
    if ( var_1 )
        var_0.lastdooropentime = gettime();
}

shothit()
{

}

shotmissed()
{

}

killeventtextpopup( var_0, var_1, var_2 )
{
    self endon( "death_or_disconnect" );

    if ( !scripts\mp\calloutmarkerping_mp::scoreeventhastext( var_0 ) )
        return;

    if ( !scripts\cp\utility::preventleave() && isdefined( self.totalxpearned ) && isdefined( self.sethistorydestination ) )
    {
        if ( self.totalxpearned >= self.sethistorydestination )
            return;
    }

    if ( !isdefined( self.killeventqueue ) )
        self.killeventqueue = [];

    foreach ( var_4 in self.killeventqueue )
    {
        if ( var_4.scoreeventref == var_0 )
            return;
    }

    var_6 = spawnstruct();
    var_6.scoreeventref = var_0;
    var_6.showassplash = istrue( var_1 );
    var_6.priority = scripts\mp\calloutmarkerping_mp::getscoreeventpriority( var_0 );
    var_6.alwaysshowsplash = scripts\mp\calloutmarkerping_mp::scoreeventalwaysshowassplash( var_0 );
    var_6.wait_until_impact = 0;
    var_6.wait_until_emp_drone_done = 0;
    var_6.handlepersistentlandlocked = istrue( var_2 );
    self.killeventqueue[self.killeventqueue.size] = var_6;
    self notify( "killEventTextPopup" );
    self endon( "killEventTextPopup" );
    waitframe();

    if ( !isdefined( self.splashpriorityqueue ) )
        self.splashpriorityqueue = [];

    foreach ( var_4 in self.killeventqueue )
        insertbypriority( var_4 );

    self.killeventqueue = undefined;
    var_9 = 0;

    foreach ( var_4 in self.splashpriorityqueue )
    {
        if ( var_4.wait_until_impact )
            continue;

        if ( !istrue( level.removekilleventsplash ) && istrue( var_4.showassplash ) && ( !var_9 || var_4.alwaysshowsplash ) )
        {
            var_9 = 1;
            thread scripts\cp\cp_hud_message::showsplash( var_4.scoreeventref );
        }

        var_4.wait_until_impact = 1;
    }

    foreach ( var_4 in self.splashpriorityqueue )
    {
        if ( var_4.wait_until_emp_drone_done || var_4.handlepersistentlandlocked )
            continue;

        thread scripts\mp\calloutmarkerping_mp::scoreeventpopup( var_4.scoreeventref );
        var_4.wait_until_emp_drone_done = 1;
        wait( getdvarfloat( "scr_splash_kill_buffer", 0.25 ) );
    }

    self.splashpriorityqueue = undefined;
}

insertbypriority( var_0 )
{
    if ( self.splashpriorityqueue.size == 0 )
    {
        self.splashpriorityqueue[self.splashpriorityqueue.size] = var_0;
        return;
    }

    foreach ( var_2 in self.splashpriorityqueue )
    {
        if ( var_2.scoreeventref == var_0.scoreeventref )
            return;
    }

    for ( var_4 = 0; var_4 < self.splashpriorityqueue.size; var_4++ )
    {
        if ( var_0.priority > self.splashpriorityqueue[var_4].priority )
        {
            self.splashpriorityqueue = scripts\engine\utility::array_insert( self.splashpriorityqueue, var_0, var_4 );
            return;
        }
    }

    self.splashpriorityqueue[self.splashpriorityqueue.size] = var_0;
}

initpersstat( var_0 )
{
    if ( !isdefined( self.pers[var_0] ) )
        self.pers[var_0] = 0;
}

getpersstat( var_0 )
{
    return self.pers[var_0];
}

incpersstat( var_0, var_1 )
{
    if ( istrue( game["practiceRound"] ) )
        return;

    if ( isdefined( self ) && isdefined( self.pers ) && isdefined( self.pers[var_0] ) )
        self.pers[var_0] = self.pers[var_0] + var_1;
}

setextrascore0( var_0 )
{
    if ( istrue( game["practiceRound"] ) )
        return;

    self.extrascore0 = var_0;
    self.pers["extrascore0"] = var_0;
}

setextrascore1( var_0 )
{
    if ( istrue( game["practiceRound"] ) )
        return;

    self.extrascore1 = var_0;
    self.pers["extrascore1"] = var_0;
}

setextrascore2( var_0 )
{
    if ( istrue( game["practiceRound"] ) )
        return;

    self.extrascore2 = var_0;
    self.pers["extrascore2"] = var_0;
}

setextrascore3( var_0 )
{
    if ( istrue( game["practiceRound"] ) )
        return;

    self.extrascore3 = var_0;
    self.pers["extrascore3"] = var_0;
}

getplayerdataloadoutgroup()
{
    if ( level.rankedmatch )
        return "rankedloadouts";

    return "privateloadouts";
}

setplayerdatagroups()
{
    level.loadoutsgroup = getplayerdataloadoutgroup();
}

canrecordcombatrecordstats()
{
    return level.rankedmatch && !istrue( level.ignorescoring ) && scripts\cp\utility::getgametype() != "infect";
}

getstreakrecordtype( var_0 )
{
    if ( isenumvaluevalid( "mp", "LethalScorestreakStatItems", var_0 ) )
        return "lethalScorestreakStats";

    if ( isenumvaluevalid( "mp", "SupportScorestreakStatItems", var_0 ) )
        return "supportScorestreakStats";

    return undefined;
}

execution( var_0 )
{
    self.modifiers["execution"] = 1;
    self.modifiers["mask2"] = self.modifiers["mask2"] | 256;
    thread scripts\mp\brmatchdata::giveunifiedpoints( "execution" );
}

playboxuseanimation()
{
    self.killedplayers = [];
    self.killedby = [];
    self.lastkilledby = undefined;
    self.greatestuniqueplayerkills = 0;
    self.damagedplayers = [];
    self.lastkilltime = 0;
    self.lastkilldogtime = 0;
    self.recentkillcount = 0;
    self.recentdefendcount = 0;
    self.kills = 0;
    self.deaths = 0;
    self.pers["cur_kill_streak"] = 0;
    self.pers["cur_death_streak"] = 0;
    self.pers["cur_kill_streak_for_nuke"] = 0;
    self.tookweaponfrom = [];
    self.guid = scripts\cp\utility\player::getuniqueid();
    thread _id_12EE6();
}

_id_12EE6()
{
    self endon( "death" );
    self waittill( "long_death" );

    if ( isdefined( self.attackers ) && self.attackers.size > 0 )
    {
        foreach ( var_2, var_1 in self.attackers )
        {
            if ( isplayer( var_1 ) )
            {
                if ( isdefined( self.attackerdata ) && self.attackerdata.size > 0 )
                {
                    if ( !isdefined( var_1.search_target_think ) )
                        var_1.search_target_think = [];

                    var_1 thread relic_nuketimer_timerloop( undefined, self, self.attackerdata[var_2].objweapon, self.attackerdata[var_2].smeansofdeath, var_1, 0 );
                    thread scripts\cp\so_trigger::onplayerkilled( var_1, var_1, self.maxhealth, undefined, self.attackerdata[var_2].smeansofdeath, self.attackerdata[var_2].objweapon, self.attackerdata[var_2]._id_120D8, var_1.modifiers );
                    var_1 thread scripts\mp\brmatchdata::giveunifiedpoints( "kill", self.attackerdata[var_2].objweapon );
                    var_1.search_target_think[self getentitynumber()] = 1;
                }
            }
        }
    }
}
