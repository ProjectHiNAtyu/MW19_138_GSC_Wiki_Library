// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    init_vehicle_repair_anims();
    load_fx();
    level thread hostage_near_vehicle_monitor();
    level thread watch_for_host_migration();
    level.vehicle_interaction_info = [];
    level.unidentified_ieds = [];
    level.marked_enemy_ai = [];
    level.marked_critical_enemy_ai = [];
    level.removefromtargetmarkeronkillfunc = ::remove_from_overwatch_target_group;
    register_vehicle_interaction_info( "driver", &"CP_VEHICLE_TRAVEL/DRIVER", ::try_start_driving, ::start_driver_role, ::exit_driver_role, "+stance", 200, 90, 72, 90, "duration_short", 1 );
    register_vehicle_interaction_info( "passenger", &"CP_VEHICLE_TRAVEL/ENTER", undefined, ::enter_passenger_seat, ::exit_passenger_seat, "+stance", 200, 90, 72, 90, "duration_short", 1 );
    register_vehicle_interaction_info( "left_back_seat", &"CP_VEHICLE_TRAVEL/ENTER", undefined, ::enter_left_back_seat, ::exit_left_back_seat, "+stance", 200, 90, 72, 90, "duration_short", 1 );
    register_vehicle_interaction_info( "right_back_seat", &"CP_VEHICLE_TRAVEL/ENTER", undefined, ::enter_right_back_seat, ::exit_right_back_seat, "+stance", 200, 90, 72, 90, "duration_short", 1 );
    register_vehicle_interaction_info( "gunner", &"CP_VEHICLE_TRAVEL/GUNNER", undefined, ::enter_gunner_seat, ::exit_gunner_seat, "+stance", 100, 360, 64, 360, "duration_short", 1 );
    register_vehicle_interaction_info( "grenadier", &"CP_VEHICLE_TRAVEL/GRENADIER", undefined, ::enter_grenadier_seat, ::exit_grenadier_seat, "+stance", 100, 90, 64, 90, "duration_short", 1 );
    register_vehicle_interaction_info( "overwatch_right", &"CP_VEHICLE_TRAVEL/OVERWATCH", undefined, ::enter_reaper_right, ::exit_reaper, "+stance", 30, 90, 30, 65, "duration_short", 1 );
    register_vehicle_interaction_info( "overwatch_left", &"CP_VEHICLE_TRAVEL/OVERWATCH", undefined, ::enter_reaper_left, ::exit_reaper, "+stance", 30, 90, 30, 65, "duration_short", 1 );
    register_vehicle_interaction_info( "missile_defense_right", &"CP_VEHICLE_TRAVEL/MISSILE_DEFENSE", undefined, ::enter_missile_defense_right, ::exit_missile_defense, "+stance", 20, 90, 20, 40, "duration_short", 1 );
    register_vehicle_interaction_info( "missile_defense_left", &"CP_VEHICLE_TRAVEL/MISSILE_DEFENSE", undefined, ::enter_missile_defense_left, ::exit_missile_defense, "+stance", 20, 90, 20, 40, "duration_short", 1 );
    register_vehicle_interaction_info( "back_left_repair", &"CP_VEHICLE_TRAVEL/REPAIR", undefined, ::enter_repair, ::exit_repair, undefined, 200, 90, 72, 90, "duration_none", 0 );
    register_vehicle_interaction_info( "back_right_repair", &"CP_VEHICLE_TRAVEL/REPAIR", undefined, ::enter_repair, ::exit_repair, undefined, 200, 90, 72, 90, "duration_none", 0 );
    register_vehicle_interaction_info( "front_left_repair", &"CP_VEHICLE_TRAVEL/REPAIR", undefined, ::enter_repair, ::exit_repair, undefined, 200, 90, 72, 90, "duration_none", 0 );
    register_vehicle_interaction_info( "front_right_repair", &"CP_VEHICLE_TRAVEL/REPAIR", undefined, ::enter_repair, ::exit_repair, undefined, 200, 90, 72, 90, "duration_none", 0 );
    register_vehicle_interaction_info( "hood_repair", &"CP_VEHICLE_TRAVEL/REPAIR", undefined, ::enter_hood_repair, ::exit_hood_repair, undefined, 200, 90, 72, 90, "duration_none", 0 );
    register_vehicle_interaction_info( "change_loadout", &"CP_VEHICLE_TRAVEL/CHANGE_LOADOUT", undefined, ::enter_change_loadout, ::exit_change_loadout, undefined, 200, 45, 72, 45, "duration_short", 1 );
    register_vehicle_interaction_info( "front_refill_ammo", &"CP_VEHICLE_TRAVEL/REFILL_AMMO", undefined, ::enter_refill_ammo, undefined, undefined, 35, 45, 30, 45, "duration_medium", 1 );
    register_vehicle_interaction_info( "back_right_refill_ammo", &"CP_VEHICLE_TRAVEL/REFILL_AMMO", undefined, ::enter_refill_ammo, undefined, undefined, 20, 15, 20, 15, "duration_medium", 1 );
    register_vehicle_interaction_info( "back_left_refill_ammo", &"CP_VEHICLE_TRAVEL/REFILL_AMMO", undefined, ::enter_refill_ammo, undefined, undefined, 20, 15, 20, 15, "duration_medium", 1 );
    register_vehicle_interaction_info( "retrieve_hostage", &"CP_VEHICLE_TRAVEL/RETRIEVE_HOSTAGE", undefined, ::enter_retrieve_hostage, ::exit_retrieve_hostage, undefined, 200, 90, 72, 90, "duration_short", 0 );
}

deploy_vehicle( var_0, var_1 )
{
    if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, 0, 0 );

    var_2 = spawnvehicle( var_1.model, "armoredtruck", var_1.vehicle_gdt, var_0.origin, var_0.angles );
    var_2 makeentitysentient( "allies", 0 );
    process_linked_ents( var_2, var_0 );
    init_vehicle( var_2, var_1 );
    var_2.farah_disable_ai_color_before_hallway_takedown = "armoredtruck";
    set_up_fake_character_models( var_2 );
    set_up_vehicle_interactions( var_2, var_1 );
    set_up_ied_triggering_tags( var_2, var_1 );
    add_additional_parts( var_2, var_1 );
    add_to_vehicle_travel_array( var_2 );
    make_reaper_drone( var_2 );
    var_2 thread vehicle_damage_monitor( var_2, var_1 );
    var_2 thread tread_vfx_think( var_2 );
    var_2 thread debug_setup_warp_jeep_to_players();
    var_2 thread _id_12CF2( var_2 );
    var_2 thread _id_12CF3( var_2 );
    level.player_humvee = var_2;
    level notify( "spawned_player_car" );
    var_2.nav_obstacle = createnavrepulsor( "ply_vehicle", 0, var_2, 128, 1 );
}

deploy_friendly_hvi_vehicle( var_0, var_1 )
{
    var_2 = spawnvehicle( var_1.model, "friendlyhvi", var_1.vehicle_gdt, var_0.origin, var_0.angles );
    process_linked_ents( var_2, var_0 );
    init_vehicle( var_2, var_1 );
    set_up_fake_character_models( var_2 );
    set_up_vehicle_interactions( var_2, var_1 );
    set_up_ied_triggering_tags( var_2, var_1 );
    add_additional_parts( var_2, var_1 );
    var_2 thread tread_vfx_think( var_2 );
    disable_vehicle_interaction( var_2, "driver" );
    disable_vehicle_interaction( var_2, "passenger" );
    disable_vehicle_interaction( var_2, "right_back_seat" );
    return var_2;
}

process_linked_ents( var_0, var_1 )
{
    var_2 = getentarray( var_1.target, "targetname" );

    foreach ( var_4 in var_2 )
    {
        switch ( var_4.script_noteworthy )
        {
            case "no_sight_clip":
                var_4 linkto( var_0 );
                var_4 thread vehicle_linked_ent_clean_up_think( var_0, var_4 );
                break;
            case "under_vehicle_trigger":
                var_4 enablelinkto();
                var_4 linkto( var_0 );
                var_4 thread vehicle_linked_ent_clean_up_think( var_0, var_4 );
                var_0.under_vehicle_trigger = var_4;
                break;
            default:
        }
    }
}

vehicle_linked_ent_clean_up_think( var_0, var_1 )
{
    var_1 endon( "death" );
    var_0 waittill( "death" );
    var_1 delete();
}

teleport_humvee_to_struct( var_0 )
{
    if ( isdefined( level.player_humvee ) )
    {
        if ( level.player_humvee vehicle_isphysveh() )
        {
            var_1 = getclosestpointonnavmesh( var_0.origin );
            var_2 = ( 0, var_0.angles[1], 0 );
            level.player_humvee vehicle_teleport( var_1, var_2 );
        }
    }
}

enter_change_loadout( var_0, var_1, var_2 )
{
    var_1 notify( "enter_change_loadout" );
    var_1 setclientomnvar( "ui_options_menu", 2 );
    waitframe();

    for (;;)
    {
        var_1 waittill( "luinotifyserver", var_3, var_4 );

        if ( var_3 == "class_select" || var_3 == "class_edit" || var_3 == "class_menu_closed" )
        {
            enable_vehicle_interaction( var_2, "change_loadout" );
            break;
        }
    }

    var_0 notify( "interaction_point_disabled" );
}

exit_change_loadout( var_0, var_1, var_2, var_3 )
{
    var_1 notify( "exit_change_loadout" );
}

enter_refill_ammo( var_0, var_1, var_2 )
{
    var_1 thread scripts\cp\cp_ammo_crate::supportbox_onusedeployable();
    waitframe();
    var_0 notify( "interaction_point_disabled" );
    waitframe();
    var_0 makeusable();
    var_0.being_used = 0;
}

try_start_driving( var_0, var_1 )
{
    update_driver_interaction_hint( var_0 );

    if ( istrue( var_0.disabled ) )
    {
        level thread scripts\cp\utility::cp_add_dialogue_line( &"CP_BR_SYRK_GL_DIALOGUE/REPAIR_VEHICLE" );
        return 0;
    }

    if ( isdefined( level._id_1295D ) )
        return [[ level._id_1295D ]]();
    else
        return 1;
}

start_driver_role( var_0, var_1, var_2 )
{
    level notify( "player_entered_driver_seat" );
    var_1.disable_map_tablet = 1;
    enter_vehicle( var_1, var_2 );
    var_1.current_vehicle_seat = "driver";
    var_1.play_fake_vo_for_gunship = 1;
    var_1 enter_seat_omnvar( var_1, "driver" );
    var_1 setclientomnvar( "ui_veh_controls", 1 );
    var_1 scripts\common\utility::allow_weapon( 0 );
    var_1 setplayerangles( var_2.angles );
    var_1 controlslinkto( var_2 );
    var_1 scripts\common\utility::allow_usability( 0 );
    var_2 setotherent( var_1 );
    var_2 setentityowner( var_1 );
    play_seat_animation( var_1, var_2, "driver" );
}

exit_driver_role( var_0, var_1, var_2, var_3 )
{
    var_2 setotherent( undefined );
    var_2 setentityowner( undefined );
    var_1.play_fake_vo_for_gunship = undefined;
    var_1 technical_stopanimatingplayer();
    var_1 scripts\common\utility::allow_weapon( 1 );
    var_1 controlsunlink();
    var_1 unlink();
    var_1 exit_vehicle( var_1, var_2, "driver" );
    var_1 exit_seat_omnvar( var_1, "driver", var_2 );
    var_1 setclientomnvar( "ui_veh_controls", 0 );
    var_1.disable_map_tablet = undefined;
    var_1 scripts\common\utility::allow_usability( 1 );
}

enter_repair( var_0, var_1, var_2 )
{
    var_3 = do_vehicle_repair_animation( var_2, var_1, var_0.repair_tag );

    if ( !var_3 )
    {
        var_0 makeusable();
        var_0.being_used = 0;
        return;
    }

    waitframe();
    var_0 notify( "interaction_point_disabled" );
    remove_from_vehicle_repair_interaction_list( var_2, var_0, var_0.repair_tag );
}

exit_repair( var_0, var_1, var_2, var_3 )
{
    if ( all_repairs_are_done( var_2 ) )
    {
        var_2.disabled = 0;
        set_repair_omnvars( "hood_repair", 0 );
        update_driver_interaction_hint( var_2 );
        level notify( "vehicle_repaired" );
    }
}

enter_retrieve_hostage( var_0, var_1, var_2 )
{
    waitframe();

    if ( !isdefined( var_1.hostagecarried ) && !has_hostage_on_board( var_2 ) )
        return;

    var_0 notify( "interaction_point_disabled" );
}

exit_retrieve_hostage( var_0, var_1, var_2, var_3 )
{
    if ( isplayer( var_1 ) && !isdefined( var_1.hostagecarried ) && !has_hostage_on_board( var_2 ) )
        return;

    if ( !has_hostage_on_board( var_2 ) )
        return;

    var_4 = var_2.hostage;
    var_4 unlink();
    var_2.hostage = undefined;

    if ( isplayer( var_1 ) )
        var_4 notify( "trigger", var_1 );
    else
    {
        var_4.origin = var_1.origin;
        disable_vehicle_interaction( var_2, "retrieve_hostage" );
        var_4.carried_by_vehicle = 0;
    }

    var_4 notify( "trigger", var_1 );
}

enter_hood_repair( var_0, var_1, var_2 )
{
    var_2 thread _id_12CEE( var_2 );
    var_3 = do_hood_repair_animation( var_2, var_1, "tag_grill", var_0 );
    var_2 notify( "hood_repair_finished" );

    if ( !var_3 )
    {
        var_0 makeusable();
        var_0.being_used = 0;
        return;
    }

    waitframe();
    var_0 notify( "interaction_point_disabled" );
    remove_from_vehicle_repair_interaction_list( var_2, var_0 );
}

_id_12CEE( var_0 )
{
    var_0 endon( "death" );
    var_0 endon( "hood_repair_finished" );
    var_1 = var_0.origin;
    var_2 = var_0.angles;

    for (;;)
    {
        var_0 vehicle_teleport( var_1, var_2 );
        waitframe();
    }
}

exit_hood_repair( var_0, var_1, var_2, var_3 )
{
    if ( all_repairs_are_done( var_2 ) )
    {
        var_2.disabled = 0;
        var_2.fake_health = var_2.max_fake_health;
        var_2.showing_damage_state = 0;
        var_2.disabled_due_to_damage = 0;
        set_repair_omnvars( "hood_repair", 0 );
        update_driver_interaction_hint( var_2 );
        level notify( "vehicle_repaired" );
    }
}

enter_passenger_seat( var_0, var_1, var_2 )
{
    enter_vehicle( var_1, var_2 );
    enter_seat( var_1, var_2, "passenger" );
}

exit_passenger_seat( var_0, var_1, var_2, var_3 )
{
    exit_seat( var_1, 1 );
    try_exit_vehicle( var_1, var_2, "passenger" );
}

enter_left_back_seat( var_0, var_1, var_2 )
{
    enter_vehicle( var_1, var_2 );
    enter_seat( var_1, var_2, "left_back_seat" );
}

exit_left_back_seat( var_0, var_1, var_2, var_3 )
{
    exit_seat( var_1, 1 );
    try_exit_vehicle( var_1, var_2, "left_back_seat" );
}

enter_right_back_seat( var_0, var_1, var_2 )
{
    enter_vehicle( var_1, var_2 );
    enter_seat( var_1, var_2, "right_back_seat" );
}

exit_right_back_seat( var_0, var_1, var_2, var_3 )
{
    exit_seat( var_1, 1 );
    try_exit_vehicle( var_1, var_2, "right_back_seat" );
}

enter_gunner_seat( var_0, var_1, var_2 )
{
    level notify( "player_used_vehicle_gunner_turret" );
    var_1 unlink();
    var_1 setworldupreference( undefined );
    var_1.disable_map_tablet = 1;
    scripts\cp\coop_super::getthirdpersonrangeforsize( var_1 );
    exit_seat_but_stay_in_vehicle( var_1, var_2 );
    record_seat( var_1, "gunner" );
    var_1 enter_seat_omnvar( var_1, "gunner" );
    var_1 setplayerangles( var_2.gunner_turret.angles );
    var_1 thread give_gunner_turret( var_0, var_1, var_2 );
    var_1 setclientomnvar( "ui_veh_vehicle", 10 );
}

give_gunner_turret( var_0, var_1, var_2 )
{
    var_1 endon( "disconnect" );
    var_1 endon( "exit_gunner_seat" );
    var_1.pre_gunner_weapon = var_1 getcurrentweapon();
    var_1 scripts\cp\utility::_giveweapon( var_2.gunner_weapon, undefined, undefined, 1 );

    while ( var_1 scripts\cp\cp_weapons::switchtoweaponreliable( var_2.gunner_weapon, 1 ) == 0 )
        waitframe();

    var_2.gunner_turret setotherent( var_1 );
    var_2.gunner_turret setentityowner( var_1 );
    var_2.gunner_turret setsentryowner( var_1 );
    var_2.gunner_turret.owner = var_1;
    var_1 disableturretdismount();
    var_1 controlturreton( var_2.gunner_turret );
}

exit_gunner_seat( var_0, var_1, var_2, var_3 )
{
    var_1 notify( "exit_gunner_seat" );
    var_1 takeweapon( var_2.gunner_weapon );
    var_1 switchtoweapon( var_1.pre_gunner_weapon );
    var_1 enableturretdismount();
    var_1 controlturretoff( var_2.gunner_turret );
    var_1 unlink();
    var_2.gunner_turret setotherent( undefined );
    var_2.gunner_turret setentityowner( undefined );
    var_2.gunner_turret setsentryowner( undefined );
    enable_vehicle_interaction( var_2, "gunner" );
    var_1.disable_map_tablet = undefined;
    scripts\cp\coop_super::hostage_confirm_good_angles( var_1 );

    if ( var_3 == "last_stand" || var_3 == "force_player_exit_vehicle" )
    {
        exit_seat( var_1, 1 );
        exit_vehicle( var_1, var_2, var_1.previous_vehicle_seat );
        var_1 exit_seat_omnvar( var_1, "gunner", var_2 );
    }
    else
    {
        return_to_previous_seat( var_1, var_2 );
        var_1 exit_seat_omnvar( var_1, "gunner", var_2 );
    }
}

enter_grenadier_seat( var_0, var_1, var_2 )
{
    var_1 unlink();
    var_1 setworldupreference( undefined );
    var_1.disable_map_tablet = 1;
    exit_seat_but_stay_in_vehicle( var_1, var_2 );
    waitframe();
    record_seat( var_1, "grenadier" );
    var_1 enter_seat_omnvar( var_1, "grenadier" );
    var_1 setplayerangles( var_2.angles );
    var_1 playerlinktodelta( var_2.grenadier_anchor, "tag_origin", 0, 180, 180, 180, 25 );
    var_1 thread give_grenadier_launcher( var_0, var_1, var_2 );
    var_1 setclientomnvar( "ui_veh_vehicle", 10 );
}

give_grenadier_launcher( var_0, var_1, var_2 )
{
    var_1 endon( "disconnect" );
    var_1 endon( "exit_grenadier_seat" );
    var_1.pre_gunner_weapon = var_1 getcurrentweapon();
    var_1 scripts\cp\utility::_giveweapon( var_2.grenadier_weapon, undefined, undefined, 1 );

    while ( var_1 scripts\cp\cp_weapons::switchtoweaponreliable( var_2.grenadier_weapon, 1 ) == 0 )
        waitframe();
}

exit_grenadier_seat( var_0, var_1, var_2, var_3 )
{
    var_1 notify( "exit_grenadier_seat" );
    var_1 takeweapon( var_2.grenadier_weapon );
    var_1 switchtoweapon( var_1.pre_gunner_weapon );
    var_1 unlink();
    enable_vehicle_interaction( var_2, "grenadier" );
    var_1.disable_map_tablet = undefined;

    if ( var_3 == "last_stand" || var_3 == "force_player_exit_vehicle" )
    {
        exit_seat( var_1, 1 );
        exit_vehicle( var_1, var_2, var_1.previous_vehicle_seat );
        var_1 exit_seat_omnvar( var_1, "grenadier", var_2 );
    }
    else
    {
        return_to_previous_seat( var_1, var_2 );
        var_1 exit_seat_omnvar( var_1, "grenadier", var_2 );
    }
}

skipprematch( var_0, var_1, var_2 )
{
    var_1 endon( "death_or_disconnect" );
    var_1 endon( "last_stand_start" );
    var_1 notify( "monitor_exit_initiated" );
    var_1 endon( "monitor_exit_initiated" );
    var_3 = gettime() + 1000;
    var_4 = 0;
    var_1 setclientomnvar( "ui_veh_exit_button_holdtime", 0 );
    var_5 = level.framedurationseconds;
    waitframe();

    for (;;)
    {
        var_6 = 0;
        var_1 setclientomnvar( "ui_veh_exit_button_holdtime", 0 );

        while ( var_1 stancebuttonpressed() )
        {
            var_6 = var_6 + var_5;

            if ( var_1 usinggamepad() )
                var_1 setclientomnvar( "ui_veh_exit_button_holdtime", var_6 / 0.3 );

            if ( var_1 usinggamepad() && var_6 > 0.3 || istrue( var_2 ) || !var_1 usinggamepad() )
            {
                var_1 setclientomnvar( "ui_veh_exit_button_holdtime", 0 );
                return 1;
            }

            wait( var_5 );
        }

        waitframe();
    }
}

skipplaybodycountsound( var_0, var_1, var_2 )
{
    var_1 endon( "death_or_disconnect" );
    var_1 endon( "last_stand_start" );
    var_1 notify( "monitor_exit_initiated" );
    var_1 endon( "monitor_exit_initiated" );
    var_3 = gettime() + 1000;
    var_4 = 0;
    var_1 setclientomnvar( "ui_veh_exit_button_holdtime", 0 );
    var_5 = level.framedurationseconds;
    waitframe();

    for (;;)
    {
        var_6 = 0;
        var_1 setclientomnvar( "ui_veh_exit_button_holdtime", 0 );

        while ( var_1 usebuttonpressed() )
        {
            var_6 = var_6 + var_5;

            if ( var_1 usinggamepad() )
                var_1 setclientomnvar( "ui_veh_exit_button_holdtime", var_6 / 0.3 );

            if ( var_1 usinggamepad() && var_6 > 0.3 || istrue( var_2 ) || !var_1 usinggamepad() )
            {
                var_1 setclientomnvar( "ui_veh_exit_button_holdtime", 0 );
                return 1;
            }

            wait( var_5 );
        }

        waitframe();
    }
}

enter_mine_drone_right( var_0, var_1, var_2 )
{
    var_0 = get_vehicle_interaction_point( var_2, "mine_drone_left" );
    var_0 makeunusable();
    var_0.being_used = 1;
    enter_mine_drone( var_0, var_1, var_2, "mine_drone_right" );
}

enter_mine_drone_left( var_0, var_1, var_2 )
{
    var_0 = get_vehicle_interaction_point( var_2, "mine_drone_right" );
    var_0 makeunusable();
    var_0.being_used = 1;
    enter_mine_drone( var_0, var_1, var_2, "mine_drone_left" );
}

enter_mine_drone( var_0, var_1, var_2, var_3 )
{
    level notify( "player_used_vehicle_mine_drone" );
    var_1 notify( "enter_mine_drone" );
    var_1.outofrangefunc = ::mine_drone_out_of_range;
    var_1.disable_map_tablet = 1;
    var_1 setplayerangles( var_2.angles );
    var_1 show_fake_player( var_1, var_2 );
    exit_seat_but_stay_on_seat( var_1 );
    record_seat( var_1, var_3 );
    var_1 scripts\common\utility::allow_weapon( 0 );
    var_1 remove_from_players_cannot_see_vehicle_icon_list( var_2, var_1 );
    var_1 update_vehicle_objective_visibility( var_2 );
    var_1 animscriptexitvehicle();
    var_1 thread unlink_and_travel_with_vehicle( var_1, var_2 );
    var_1 thread scripts\cp\drone\scout_drone::deploy_scout_detonate_drone( var_1 );
    var_1.drone scripts\cp_mp\outofrange::setupoutofrangewatcher( var_1.drone, undefined, var_2, "tag_origin", 2560000, 5760000 );
    var_1.drone thread drone_killed_due_to_out_of_range_monitor( var_1.drone, var_1 );
}

show_fake_player( var_0, var_1 )
{
    if ( var_0.current_vehicle_seat == "right_back_seat" )
        var_1.fake_back_right_passenger show();
    else if ( var_0.current_vehicle_seat == "left_back_seat" )
        var_1.fake_back_left_passenger show();
}

mine_drone_out_of_range( var_0 )
{
    var_1 = 10;

    if ( !isdefined( var_0.next_mine_drone_out_of_range_vo_time ) )
        var_0.next_mine_drone_out_of_range_vo_time = 0;

    var_2 = gettime();

    if ( var_2 > var_0.next_mine_drone_out_of_range_vo_time )
    {
        var_0.next_mine_drone_out_of_range_vo_time = var_2 + var_1 * 1000;
        var_0 thread scripts\cp\cp_vo::try_to_play_vo( "dx_cps_ovl_vehicle_out_of_range_10", "cp_comment_vo", "highest", 10, 0, 0, 1, 100 );
    }
}

unlink_and_travel_with_vehicle( var_0, var_1 )
{
    var_0 endon( "exit_mine_drone" );
    var_0 endon( "exiting_drone" );
    var_0 waittill( "drone_exists" );
    var_0 unlink();
    var_0 playerhide();
    var_2 = var_0.origin;
    var_3 = var_0.origin;

    for (;;)
    {
        var_2 = get_player_seat_org( var_0, var_1 );

        if ( var_2 != var_3 )
        {
            var_0 setorigin( var_2 );
            var_3 = var_2;
        }

        waitframe();
    }
}

get_player_seat_org( var_0, var_1 )
{
    switch ( var_0.current_vehicle_seat )
    {
        case "mine_drone_left":
            return var_1 gettagorigin( "tag_seat_2" );
        case "mine_drone_right":
            return var_1 gettagorigin( "tag_seat_3" );
    }
}

drone_killed_due_to_out_of_range_monitor( var_0, var_1 )
{
    var_0 waittill( "death" );
    var_1 notify( "exit_mine_drone_right" );
    var_1 notify( "exit_mine_drone_left" );
}

exit_mine_drone( var_0, var_1, var_2, var_3 )
{
    var_1 notify( "exit_mine_drone" );

    if ( isdefined( var_1.drone ) )
        var_1.drone dodamage( var_1.drone.fake_health + 100, var_1.drone.origin );

    var_1.outofrangefunc = undefined;
    level notify( "vision_set_change_request", undefined, var_1, 0.05, "static" );
    var_1 setclientomnvar( "ui_out_of_bounds_countdown", 0 );
    var_1 scripts\common\utility::allow_weapon( 1 );
    enable_vehicle_interaction( var_2, "mine_drone_right" );
    enable_vehicle_interaction( var_2, "mine_drone_left" );
    var_1 add_to_players_cannot_see_vehicle_icon_list( var_2, var_1 );
    var_1 update_vehicle_objective_visibility( var_2 );
    var_2.fake_back_right_passenger hide();
    var_2.fake_back_left_passenger hide();
    var_1 playershow();
    var_1.disable_map_tablet = undefined;

    if ( var_3 == "last_stand" )
    {
        var_1.stay_on_seat_when_exit_seat = 0;
        exit_seat( var_1, 1 );
        exit_vehicle( var_1, var_2, var_1.previous_vehicle_seat );
    }
    else
    {
        var_1 animscriptentervehicle();
        return_to_previous_seat( var_1, var_2 );
    }
}

enter_missile_defense_right( var_0, var_1, var_2 )
{
    var_0 = get_vehicle_interaction_point( var_2, "missile_defense_left" );
    var_0 makeunusable();
    var_0.being_used = 1;
    enter_missile_defense( var_0, var_1, var_2, "missile_defense_right" );
}

enter_missile_defense_left( var_0, var_1, var_2 )
{
    var_0 = get_vehicle_interaction_point( var_2, "missile_defense_right" );
    var_0 makeunusable();
    var_0.being_used = 1;
    enter_missile_defense( var_0, var_1, var_2, "missile_defense_left" );
}

enter_missile_defense( var_0, var_1, var_2, var_3 )
{
    var_1 notify( "enter_missile_defense" );
    var_1.disable_map_tablet = 1;
    var_1.target_circle_fov = 35;
    var_1.target_circle_radius = 20;
    exit_seat_but_stay_on_seat( var_1 );
    record_seat( var_1, var_3 );
    var_1 setclientomnvar( "ui_veh_vehicle", -1 );
    var_1 setclientomnvar( "ui_overwatch_view", 2 );
    var_1 setclientomnvar( "ui_missile_lock", 0 );
    var_1 enter_missile_defense_view( var_1, var_2 );
    var_1 mark_vehicle_as_friendly_target_group( var_1, var_2 );
    var_1 give_missile_defense_weapons( var_1 );
    var_1 see_icon_on_cruise_missiles( var_1 );
    var_1 see_icon_on_interceptor_missiles( var_1 );
    var_1 thread enter_missile_defense_control( var_1, var_2 );
    var_1 thread enter_missile_defense_vision_set( var_1 );
}

enter_missile_defense_control( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "exit_missile_defense" );
    var_0 thread missile_defense_lock_on_cruise_missile_think( var_0, var_1 );
    var_0 thread missile_defense_fire_interceptor_missiles( var_0, var_1 );
    var_0 thread missile_defense_camera_focus_think( var_0, var_1 );
}

missile_defense_camera_focus_think( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "exit_missile_defense" );
    var_1 endon( "death " );
    var_0 notifyonplayercommand( "reset_missile_defense_camera", "+weapnext" );

    for (;;)
    {
        var_0 waittill( "reset_missile_defense_camera" );
        var_0 setplayerangles( vectortoangles( var_1.origin - var_1.reaper.missile_defense_camera_anchor.origin ) );
    }
}

missile_defense_fire_interceptor_missiles( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "exit_missile_defense" );
    var_1 endon( "death " );
    var_0 notifyonplayercommand( "fire_interceptor_missile", "+attack" );

    for (;;)
    {
        var_0 waittill( "fire_interceptor_missile" );
        var_2 = get_locked_on_cruise_missile_to_intercept();

        if ( isdefined( var_2 ) )
            fire_interceptor_missile_toward( var_2, var_0, var_1 );
    }
}

get_locked_on_cruise_missile_to_intercept()
{
    if ( !isdefined( level.locked_on_cruise_missiles ) )
        return undefined;

    var_0 = [];

    foreach ( var_2 in level.locked_on_cruise_missiles )
    {
        if ( !isdefined( var_2 ) )
            continue;

        if ( istrue( var_2.being_intercepted ) )
            continue;

        var_0[var_0.size] = var_2;
    }

    return sortbydistance( var_0, level.player_humvee.origin )[0];
}

fire_interceptor_missile_toward( var_0, var_1, var_2 )
{
    var_3 = 3;
    var_0.being_intercepted = 1;
    var_4 = anglestoleft( var_1 getplayerangles() );
    var_5 = var_2.reaper.missile_defense_camera_anchor.origin + var_4 * var_3;
    var_6 = magicbullet( "interceptor_missile_cp", var_5, var_0.origin );
    var_6.target_anchor = make_interceptor_missile_target_anchor( var_6 );
    var_6 missile_settargetent( var_6.target_anchor );
    var_6 missile_setflightmodedirect();
    var_6 setscriptablepartstate( "thruster", "on", 0 );
    set_interceptor_missile_target( var_6, var_0 );
    var_6 thread hit_target_entity_monitor( var_6 );
    var_6 thread get_away_from_target_entity_monitor( var_6 );

    if ( !isdefined( level.interceptor_missiles ) )
        level.interceptor_missiles = [];

    level.interceptor_missiles[level.interceptor_missiles.size] = var_6;
    var_0.interceptor_missile = var_6;
    put_objective_icon_on_interceptor_missile( var_6 );
    var_6 thread interceptor_missile_death_monitor( var_6, var_6.interceptor_missile_objective_id, var_6 getentitynumber() );
    update_missile_lock_hud_for_missile_defense_player();
}

put_objective_icon_on_interceptor_missile( var_0 )
{
    var_1 = scripts\cp\cp_objectives::requestworldid( "interceptor_missile_entity_number_" + var_0 getentitynumber(), 22 );
    objective_state( var_1, "invisible" );
    objective_icon( var_1, "hud_callsign_bg" );
    objective_onentity( var_1, var_0 );
    objective_setzoffset( var_1, 0 );
    objective_removeallfrommask( var_1 );
    objective_setplayintro( var_1, 0 );
    objective_setplayoutro( var_1, 0 );
    objective_setbackground( var_1, 1 );
    objective_setshowdistance( var_1, 1 );
    objective_setshowprogress( var_1, 1 );
    objective_setfadedisabled( var_1, 1 );
    var_0.interceptor_missile_objective_id = var_1;
    make_visible_to_missile_defense_player( var_1 );
}

get_away_from_target_entity_monitor( var_0 )
{
    var_0 endon( "death" );
    var_0 thread start_chasing_target_entity_think( var_0 );
    var_0 waittill( "start_chasing_target_entity" );
    var_1 = distancesquared( var_0.origin, var_0.target_entity.origin );

    for (;;)
    {
        waitframe();

        if ( isdefined( var_0.target_entity ) && isdefined( var_0.target_entity.origin ) )
        {
            var_2 = distancesquared( var_0.origin, var_0.target_entity.origin );

            if ( var_2 < var_1 )
                var_1 = var_2;
            else
            {
                interceptor_missile_explodes_with_target( var_0 );
                return;
            }
        }
    }
}

start_chasing_target_entity_think( var_0 )
{
    var_0 endon( "death" );

    for (;;)
    {
        if ( isdefined( var_0.target_entity ) && isdefined( var_0.target_entity.angles ) )
        {
            var_1 = anglestoforward( var_0.angles );
            var_2 = anglestoforward( var_0.target_entity.angles );

            if ( vectordot( var_2, var_1 ) > 0 )
            {
                var_0 notify( "start_chasing_target_entity" );
                return;
            }
        }

        waitframe();
    }
}

hit_target_entity_monitor( var_0 )
{
    var_0 endon( "death" );

    for (;;)
    {
        if ( isdefined( var_0.target_entity ) && isdefined( var_0.target_entity.origin ) )
        {
            if ( distancesquared( var_0.origin, var_0.target_entity.origin ) <= 22500 )
                interceptor_missile_explodes_with_target( var_0 );
        }

        waitframe();
    }
}

interceptor_missile_explodes_with_target( var_0 )
{
    playfx( scripts\engine\utility::getfx( "interceptor_hit_air_exp" ), var_0.target_entity.origin );
    playsoundatpos( var_0.target_entity.origin, "iw8_cruise_missile_exp" );
    var_0.target_entity delete();
    var_0 delete();
}

interceptor_missile_death_monitor( var_0, var_1, var_2 )
{
    var_0 waittill( "death" );
    level.interceptor_missiles = scripts\engine\utility::array_remove( level.interceptor_missiles, var_0 );
    scripts\cp\cp_objectives::freeworldid( "interceptor_missile_entity_number_" + var_2 );
    objective_delete( var_1 );
}

make_interceptor_missile_target_anchor( var_0 )
{
    var_1 = spawn( "script_model", var_0.origin );
    var_1 setmodel( "tag_origin" );
    var_1 thread missile_anchor_clean_up_think( var_1, var_0 );
    return var_1;
}

missile_anchor_clean_up_think( var_0, var_1 )
{
    var_0 endon( "death" );
    var_1 waittill( "death" );
    var_0 delete();
}

missile_defense_lock_on_cruise_missile_think( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "exit_missile_defense" );
    var_1 endon( "death" );

    for (;;)
    {
        if ( isdefined( level.cruise_missiles ) )
        {
            foreach ( var_3 in level.cruise_missiles )
            {
                if ( var_0 worldpointinreticle_circle( var_3.origin, var_0.target_circle_fov, var_0.target_circle_radius ) )
                    var_3.lock_on_progress = var_3.lock_on_progress + 0.05;

                if ( var_3.lock_on_progress >= 0.5 )
                    mark_cruise_missile_as_locked_on( var_3, var_0, var_1 );
            }
        }

        waitframe();
    }
}

mark_cruise_missile_as_locked_on( var_0, var_1, var_2 )
{
    if ( !isdefined( level.locked_on_cruise_missiles ) )
        level.locked_on_cruise_missiles = [];

    if ( !scripts\engine\utility::array_contains( level.locked_on_cruise_missiles, var_0 ) )
    {
        objective_icon( var_0.cruise_missile_objective_id, "hud_callsign_bg_rd_full" );
        var_2.reaper.missile_defense_camera_anchor playsoundtoplayer( "breach_warning_beep_05", var_1 );
        level.locked_on_cruise_missiles = scripts\engine\utility::array_add( level.locked_on_cruise_missiles, var_0 );
        var_1 setclientomnvar( "ui_missile_lock", 1 );
    }
}

enter_missile_defense_vision_set( var_0 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "exit_missile_defense" );
    overwatch_screen_transition( var_0 );
    wait 0.25;
    level notify( "vision_set_change_request", "ac130_color_glitch", var_0, 0.25 );
    wait 0.25;
    level notify( "vision_set_change_request", "ac130_color", var_0, 0 );
}

give_missile_defense_weapons( var_0 )
{
    var_0 scripts\cp\utility::_giveweapon( "ac130_105mm_cp" );
    var_0 scripts\cp\cp_weapons::_switchtoweaponimmediate( "ac130_105mm_cp" );
    var_0 scripts\common\utility::allow_weapon_switch( 0 );
    var_0.pre_missile_defense_weapon = var_0 getcurrentweapon();
}

enter_missile_defense_view( var_0, var_1 )
{
    var_0 playerlinkweaponviewtodelta( var_1.reaper.missile_defense_camera_anchor, "tag_player", 1.0, 180, 180, 90, 80, 0 );
    var_0 playerlinkedsetviewznear( 0 );
    var_2 = anglestoforward( var_1.angles );
    var_2 = var_2 * ( 1, 1, 0 );
    var_0 setplayerangles( vectortoangles( var_2 ) );
}

exit_missile_defense( var_0, var_1, var_2, var_3 )
{
    var_1 notify( "exit_missile_defense" );
    var_1 thread exit_missile_defense_vision_set( var_1 );
    var_1 setclientomnvar( "ui_overwatch_view", 0 );
    var_1 setclientomnvar( "ui_veh_vehicle", 10 );
    enable_vehicle_interaction( var_2, "missile_defense_left" );
    enable_vehicle_interaction( var_2, "missile_defense_right" );
    var_1.disable_map_tablet = undefined;
    var_1 exit_missile_defense_view( var_1 );
    var_1 unmark_vehicle_as_friendly_target_group( var_1 );
    var_1 remove_missile_defense_weapons( var_1 );
    var_1 clear_icon_on_cruise_missiles( var_1 );
    var_1 clear_icon_on_interceptor_missiles( var_1 );

    if ( var_3 == "last_stand" )
    {
        var_1.stay_on_seat_when_exit_seat = 0;
        exit_seat( var_1, 1 );
        exit_vehicle( var_1, var_2, var_1.previous_vehicle_seat );
    }
    else
    {
        var_1 animscriptentervehicle();
        return_to_previous_seat( var_1, var_2 );
    }
}

clear_icon_on_cruise_missiles( var_0 )
{
    if ( isdefined( level.cruise_missiles ) )
    {
        foreach ( var_2 in level.cruise_missiles )
            objective_removeclientfrommask( var_2.cruise_missile_objective_id, var_0 );
    }
}

clear_icon_on_interceptor_missiles( var_0 )
{
    if ( isdefined( level.interceptor_missiles ) )
    {
        foreach ( var_2 in level.interceptor_missiles )
        {
            if ( isdefined( var_2 ) )
                objective_removeclientfrommask( var_2.interceptor_missile_objective_id, var_0 );
        }
    }
}

remove_missile_defense_weapons( var_0 )
{
    var_0 scripts\cp\cp_weapons::_takeweapon( "ac130_105mm_cp" );
    var_0 scripts\common\utility::allow_weapon_switch( 1 );
    var_0 switchtoweaponimmediate( var_0.pre_missile_defense_weapon );
}

exit_missile_defense_view( var_0 )
{
    var_0 cameraunlink();
}

exit_missile_defense_vision_set( var_0 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "enter_missile_defense" );
    overwatch_screen_transition( var_0 );
    level notify( "vision_set_change_request", undefined, var_0, 0, "ac130_color" );
    waitframe();
    level notify( "vision_set_change_request", undefined, var_0, 0, "ac130_color_glitch" );
}

enter_reaper_right( var_0, var_1, var_2 )
{
    enter_reaper( var_0, var_1, var_2, "overwatch_right" );
    disable_vehicle_interaction( var_2, "overwatch_left" );
}

enter_reaper_left( var_0, var_1, var_2 )
{
    enter_reaper( var_0, var_1, var_2, "overwatch_left" );
    disable_vehicle_interaction( var_2, "overwatch_right" );
}

enter_reaper( var_0, var_1, var_2, var_3 )
{
    var_1 notify( "enter_overwatch" );
    var_1.disable_map_tablet = 1;
    exit_seat_but_stay_on_seat( var_1 );
    record_seat( var_1, var_3 );
    var_1 setclientomnvar( "ui_veh_vehicle", -1 );
    var_1 setclientomnvar( "ui_overwatch_view", 1 );
    var_1 show_ied_zone_to_player( var_1 );
    var_1 update_enemy_visualization_for_entering_reaper( var_1 );
    var_1 delete_non_overwatch_ied_marker_vfx_for_player( var_1 );
    var_1 enter_reaper_view( var_1, var_2 );
    var_1 make_camera_point( var_1, var_2 );
    var_1 mark_vehicle_as_friendly_target_group( var_1, var_2 );
    var_1 give_reaper_weapons( var_1 );
    var_1 thread enter_reaper_control( var_1, var_2 );
    var_1 thread enter_overwatch_vision_set( var_1 );
    var_1 thread target_in_red_circle_think( var_1, ::reaper_get_target_in_circle_omnvar_value );
    var_1 thread reaper_radar_control( var_1, var_2 );
}

see_icon_on_cruise_missiles( var_0 )
{
    if ( isdefined( level.cruise_missiles ) )
    {
        foreach ( var_2 in level.cruise_missiles )
            objective_addclienttomask( var_2.cruise_missile_objective_id, var_0 );
    }
}

see_icon_on_interceptor_missiles( var_0 )
{
    if ( isdefined( level.interceptor_missiles ) )
    {
        foreach ( var_2 in level.interceptor_missiles )
            objective_addclienttomask( var_2.interceptor_missile_objective_id, var_0 );
    }
}

play_cloud_vfx( var_0, var_1 )
{
    playfxontagforclients( scripts\engine\utility::getfx( "reaper_clouds" ), var_1.reaper.missile_defense_camera_anchor, "tag_player", var_0 );
}

enter_reaper_control( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "exit_overwatch" );
    var_0 thread reaper_camera_zoom_think( var_0, var_1 );
    var_0 thread reaper_camera_reset_think( var_0, var_1 );
    var_0 thread reaper_fire_missile_think( var_0, var_1 );
}

reaper_fire_missile_think( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "exit_overwatch" );
    var_1 endon( "death" );

    if ( weapon_xp_iw8_sn_delta() )
        weapon_xp_iw8_sn_crossbow( var_0 );

    var_0 notifyonplayercommand( "reaper_fire_missile", "+attack" );
    var_2 = 2;
    var_0 setclientomnvar( "ui_killstreak_weapon_2_ammo", var_2 );

    for (;;)
    {
        var_0 waittill( "reaper_fire_missile" );
        var_3 = fire_reaper_missile( var_0, var_1 );
        var_2 = var_2 - 1;
        var_0 setclientomnvar( "ui_killstreak_weapon_2_ammo", var_2 );

        if ( var_2 == 0 )
        {
            var_0 reaper_waitforweaponreloadtime( var_0 );
            var_2 = 2;
            var_0 setclientomnvar( "ui_killstreak_weapon_2_ammo", var_2 );
        }
    }
}

fire_reaper_missile( var_0, var_1 )
{
    var_2 = 3;
    var_3 = make_reaper_missile_target_ent( var_0, var_1 );
    var_4 = anglestoleft( var_0 getplayerangles() );
    var_5 = var_1.reaper.missile_defense_camera_anchor.origin + var_4 * var_2;
    var_6 = magicbullet( "overwatch_missile_cp", var_5, var_3.origin, var_0 );
    var_6 missile_settargetent( var_3 );
    var_6 missile_setflightmodedirect();
    var_6 setscriptablepartstate( "thruster", "on", 0 );
    var_3 thread clean_up_monitor( var_3, var_6 );
    return var_6;
}

reaper_waitforweaponreloadtime( var_0 )
{
    var_1 = 4;
    level.weapon_xp_iw8_sn_awhiskey = gettime() + int( var_1 * 1000 );
    var_0 setclientomnvar( "ui_ac130_40mm_reloadtime", level.weapon_xp_iw8_sn_awhiskey );

    for (;;)
    {
        wait 0.05;
        var_1 = var_1 - 0.05;

        if ( var_1 <= 0 )
            break;
    }
}

weapon_xp_iw8_sn_delta()
{
    return isdefined( level.weapon_xp_iw8_sn_awhiskey ) && level.weapon_xp_iw8_sn_awhiskey > gettime();
}

weapon_xp_iw8_sn_crossbow( var_0 )
{
    var_1 = gettime();
    var_2 = level.weapon_xp_iw8_sn_awhiskey - var_1;
    var_3 = var_2 / 1000;
    var_0 setclientomnvar( "ui_ac130_40mm_reloadtime", level.weapon_xp_iw8_sn_awhiskey );
    wait( var_3 );
}

clean_up_monitor( var_0, var_1 )
{
    var_0 endon( "death" );
    var_1 waittill( "death" );
    var_0 delete();
}

make_reaper_missile_target_ent( var_0, var_1 )
{
    var_2 = get_reaper_player_look_at_ground_pos( var_0, var_1 );
    var_3 = spawn( "script_model", var_2 );
    var_3 setmodel( "tag_origin" );
    var_3 thread trial_restart_watcher( var_3, var_0 );
    put_objective_icon_on_reaper_missile_target_ent( var_3, var_0 );
    var_3 thread follow_player_look_at( var_3, var_0, var_1 );
    return var_3;
}

trial_restart_watcher( var_0, var_1 )
{
    var_0 endon( "death" );
    waitframe();
    playfxontagforclients( level._effect["reaper_missile_marker"], var_0, "tag_origin", var_1 );
}

put_objective_icon_on_reaper_missile_target_ent( var_0, var_1 )
{
    var_2 = scripts\cp\cp_objectives::requestworldid( "reaper_missile_target_ent" + var_0 getentitynumber(), 22 );
    objective_state( var_2, "invisible" );
    objective_icon( var_2, "hud_overwatch_missile_target" );
    objective_onentity( var_2, var_0 );
    objective_setzoffset( var_2, 0 );
    objective_removeallfrommask( var_2 );
    objective_setplayintro( var_2, 0 );
    objective_setplayoutro( var_2, 0 );
    objective_setbackground( var_2, 1 );
    objective_setshowdistance( var_2, 0 );
    objective_setshowprogress( var_2, 1 );
    objective_setfadedisabled( var_2, 1 );
    objective_addclienttomask( var_2, var_1 );
    var_0 thread reaper_missile_target_ent_objective_clean_up_think( var_0, var_2, var_0 getentitynumber() );
}

reaper_missile_target_ent_objective_clean_up_think( var_0, var_1, var_2 )
{
    var_0 waittill( "death" );
    scripts\cp\cp_objectives::freeworldid( "reaper_missile_target_ent" + var_2 );
    objective_delete( var_1 );
}

follow_player_look_at( var_0, var_1, var_2 )
{
    var_0 endon( "death" );
    var_1 endon( "disconnect" );
    var_1 endon( "last_stand" );
    var_1 endon( "exit_overwatch" );

    for (;;)
    {
        waitframe();
        var_0.origin = get_reaper_player_look_at_ground_pos( var_1, var_2 );
    }
}

reaper_radar_control( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "last_stand" );
    var_0 endon( "exit_overwatch" );
    var_0 notifyonplayercommand( "overwatch_radar_pin", "+speed_throw" );

    for (;;)
    {
        var_0 waittill( "overwatch_radar_pin" );
        var_0.overwatch_camera_point playsoundtoplayer( "reaper_scan_target", var_0 );
        var_2 = get_reaper_player_look_at_ground_pos( var_0, var_1 );
        waitframe();
        level thread show_unidentified_ied_within_target_circle( var_0, var_2 );
        level thread show_ai_within_target_circle( var_0, var_2 );
        wait 1;
    }
}

get_reaper_player_look_at_ground_pos( var_0, var_1 )
{
    var_2 = anglestoforward( var_0 getplayerangles() );
    var_3 = var_1.reaper.scanning_camera_anchor.origin + var_2 * 50;
    var_4 = var_1.reaper.scanning_camera_anchor.origin + var_2 * 30000;
    var_5 = scripts\engine\trace::ray_trace_detail( var_3, var_4, var_1.reaper );
    var_6 = var_5["position"];
    return var_6;
}

show_unidentified_ied_within_target_circle( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "last_stand" );
    var_0 endon( "exit_overwatch" );
    var_2 = [];

    foreach ( var_4 in level.unidentified_ieds )
    {
        if ( istrue( var_4.in_reaper_target_circle ) )
            var_2[var_2.size] = var_4;
    }

    var_6 = sortbydistance( var_2, var_1 );

    foreach ( var_8 in var_6 )
    {
        var_0.overwatch_camera_point playsoundtoplayer( "breach_warning_beep_05", var_0 );
        mark_ied_as_identified( var_0, var_8 );
        wait( randomfloatrange( 0.05, 0.1 ) );
    }
}

show_ai_within_target_circle( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "last_stand" );
    var_0 endon( "exit_overwatch" );
    var_2 = [];

    foreach ( var_4 in level.agentarray )
    {
        if ( !isdefined( var_4 ) )
            continue;

        if ( !isalive( var_4 ) )
            continue;

        if ( istrue( var_4.marked_by_overwatch_scan ) )
            continue;

        if ( var_4.team == "allies" )
            continue;

        if ( istrue( var_4.in_reaper_target_circle ) )
            var_2[var_2.size] = var_4;
    }

    var_6 = sortbydistance( var_2, var_1 );

    foreach ( var_4 in var_6 )
    {
        var_0.overwatch_camera_point playsoundtoplayer( "breach_warning_beep_05", var_0 );
        var_4.marked_by_overwatch_scan = 1;
        add_ai_to_marked_enemy_ai_list( var_4 );
        outline_enemy_ai_for_overwatch( var_4, var_0 );

        if ( istrue( var_4.is_critical_ai_target ) )
        {
            add_ai_to_marked_critical_enemy_ai_list( var_4 );
            put_target_marker_on_critical_enemy_ai( var_4, var_0 );
            make_critical_target_icon_on_ai( var_4 );

            foreach ( var_9 in level.players )
            {
                if ( var_9 == var_0 )
                    continue;

                show_critical_target_icon_to_player( var_4, var_9 );
            }
        }

        wait( randomfloatrange( 0.05, 0.1 ) );
    }
}

reaper_get_target_in_circle_omnvar_value( var_0 )
{
    if ( player_in_intercept_mode( var_0 ) )
        return intercept_mode_get_target_in_circle_omnvar_value( var_0 );
    else
        return scanning_mode_get_target_in_circle_omnvar_value( var_0 );
}

player_in_intercept_mode( var_0 )
{
    return var_0.current_reaper_camera_zoom_level == 3;
}

intercept_mode_get_target_in_circle_omnvar_value( var_0 )
{
    foreach ( var_2 in level.unidentified_ieds )
        var_2.in_reaper_target_circle = undefined;

    foreach ( var_5 in level.agentarray )
        var_5.in_reaper_target_circle = undefined;

    return 0;
}

scanning_mode_get_target_in_circle_omnvar_value( var_0 )
{
    var_1 = 0;

    foreach ( var_3 in level.unidentified_ieds )
    {
        if ( var_0 worldpointinreticle_circle( var_3.origin, var_0.target_circle_fov, var_0.target_circle_radius ) )
        {
            var_3.in_reaper_target_circle = 1;
            var_1 = var_1 + 1;
            continue;
        }

        var_3.in_reaper_target_circle = undefined;
    }

    foreach ( var_6 in level.agentarray )
    {
        if ( !isdefined( var_6 ) )
        {
            var_6.in_reaper_target_circle = undefined;
            continue;
        }

        if ( !isalive( var_6 ) )
        {
            var_6.in_reaper_target_circle = undefined;
            continue;
        }

        if ( istrue( var_6.marked_by_overwatch_scan ) )
        {
            var_6.in_reaper_target_circle = undefined;
            continue;
        }

        if ( istrue( var_6.team == "allies" ) )
        {
            var_6.in_reaper_target_circle = undefined;
            continue;
        }

        if ( var_0 worldpointinreticle_circle( var_6.origin, var_0.target_circle_fov, var_0.target_circle_radius ) )
        {
            var_6.in_reaper_target_circle = 1;
            var_1 = var_1 + 1;
        }
    }

    var_1 = min( var_1, 7 ) / 7 * 0.4;
    return var_1;
}

reaper_camera_zoom_think( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "last_stand" );
    var_0 endon( "exit_overwatch" );
    var_1 endon( "death " );
    var_0 notifyonplayercommand( "reaper_camera_zoom_in", "+actionslot 1" );
    var_0 notifyonplayercommand( "reaper_camera_zoom_out", "+actionslot 2" );
    set_current_reaper_camera_zoom_level( var_0, 2, var_1 );

    for (;;)
    {
        var_2 = var_0 scripts\engine\utility::_id_12E47( "reaper_camera_zoom_in", "reaper_camera_zoom_out" );

        if ( var_2 == "reaper_camera_zoom_in" )
            adjust_reaper_camera_zoom_level( var_0, -1, var_1 );
        else if ( var_2 == "reaper_camera_zoom_out" )
            adjust_reaper_camera_zoom_level( var_0, 1, var_1 );

        waitframe();
    }
}

reaper_camera_reset_think( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "exit_overwatch" );
    var_1 endon( "death" );
    var_0 notifyonplayercommand( "reset_overwatch_camera", "+weapnext" );

    for (;;)
    {
        var_0 waittill( "reset_overwatch_camera" );
        var_0 setplayerangles( vectortoangles( var_1.origin - var_1.reaper.scanning_camera_anchor.origin ) );
    }
}

adjust_reaper_camera_zoom_level( var_0, var_1, var_2 )
{
    var_3 = int( clamp( var_0.current_reaper_camera_zoom_level + var_1, 1, 2 ) );
    set_current_reaper_camera_zoom_level( var_0, var_3, var_2 );
}

set_current_reaper_camera_zoom_level( var_0, var_1, var_2 )
{
    if ( isdefined( var_0.current_reaper_camera_zoom_level ) && var_0.current_reaper_camera_zoom_level == var_1 )
        return;

    var_3 = var_0.current_reaper_camera_zoom_level;
    var_0.current_reaper_camera_zoom_level = var_1;
    switch_to_proper_zoom_weapon( var_0 );
    adjust_target_circle_fov_and_radius( var_0 );
}

switch_to_proper_zoom_weapon( var_0 )
{
    var_1 = get_proper_zoom_weapon( var_0 );
    var_0 scripts\cp\cp_weapons::_switchtoweaponimmediate( var_1 );
}

adjust_target_circle_fov_and_radius( var_0 )
{
    switch ( var_0.current_reaper_camera_zoom_level )
    {
        case 1:
            var_0.target_circle_fov = 10;
            var_0.target_circle_radius = 150;
            return;
        case 2:
            var_0.target_circle_fov = 22;
            var_0.target_circle_radius = 150;
            return;
        case 3:
            var_0.target_circle_fov = 35;
            var_0.target_circle_radius = 20;
            return;
    }
}

get_proper_zoom_weapon( var_0 )
{
    switch ( var_0.current_reaper_camera_zoom_level )
    {
        case 1:
            return "ac130_25mm_cp";
        case 2:
            return "ac130_40mm_cp";
        case 3:
            return "ac130_105mm_cp";
    }
}

mark_vehicle_as_friendly_target_group( var_0, var_1 )
{
    var_0.humvee_marker_group_id = scripts\cp_mp\targetmarkergroups::targetmarkergroup_on( "thermalvisionfriendlydefault", var_0, var_1, var_0 );

    if ( isdefined( level.friendly_convoy ) )
    {
        foreach ( var_3 in level.friendly_convoy )
        {
            if ( !isdefined( var_3 ) )
                continue;

            if ( var_3 == var_1 )
                continue;

            scripts\cp_mp\targetmarkergroups::targetmarkergroup_markentity( var_3, var_0.humvee_marker_group_id );
        }
    }
}

unmark_vehicle_as_friendly_target_group( var_0 )
{
    scripts\cp_mp\targetmarkergroups::targetmarkergroup_off( var_0.humvee_marker_group_id );
}

make_camera_point( var_0, var_1 )
{
    var_2 = spawn( "script_model", var_1.reaper.scanning_camera_anchor.origin );
    var_2 setmodel( "tag_origin" );
    var_2.angles = var_1.reaper.scanning_camera_anchor.angles;
    var_2 linkto( var_1.reaper.scanning_camera_anchor );
    var_0.overwatch_camera_point = var_2;
}

enter_reaper_view( var_0, var_1 )
{
    var_0 playerlinkweaponviewtodelta( var_1.reaper.scanning_camera_anchor, "tag_player", 1.0, 45, 45, 30, 30, 0 );
    var_0 playerlinkedsetviewznear( 0 );
    var_0 setplayerangles( vectortoangles( var_1.origin - var_1.reaper.scanning_camera_anchor.origin ) );
}

give_reaper_weapons( var_0 )
{
    var_0 scripts\cp\utility::_giveweapon( "ac130_105mm_cp" );
    var_0 scripts\cp\utility::_giveweapon( "ac130_40mm_cp" );
    var_0 scripts\cp\utility::_giveweapon( "ac130_25mm_cp" );
    var_0 scripts\common\utility::allow_weapon_switch( 0 );
    var_0.pre_reaper_weapon = var_0 getcurrentweapon();
}

exit_reaper( var_0, var_1, var_2, var_3 )
{
    var_1 notify( "exit_overwatch" );
    var_1 thread exit_overwatch_vision_set( var_1 );
    var_1 setclientomnvar( "ui_overwatch_view", 0 );
    var_1 setclientomnvar( "ui_veh_vehicle", 10 );
    var_1 hide_ied_zone_from_player( var_1 );
    var_1 update_enemy_visualization_for_exiting_reaper( var_1 );
    var_1 hide_ai_marker_vfx_to_player( var_1 );
    enable_vehicle_interaction( var_2, "overwatch_right" );
    enable_vehicle_interaction( var_2, "overwatch_left" );
    var_1.disable_map_tablet = undefined;
    var_1 exit_reaper_view( var_1 );
    var_1 delete_camera_point( var_1 );
    var_1 unmark_vehicle_as_friendly_target_group( var_1 );
    var_1 remove_reaper_weapons( var_1 );
    var_1 unset_player_zoom_setting( var_1 );

    if ( var_3 == "last_stand" || var_3 == "force_player_exit_vehicle" )
    {
        var_1.stay_on_seat_when_exit_seat = 0;
        exit_seat( var_1, 1 );
        exit_vehicle( var_1, var_2, var_1.previous_vehicle_seat );
    }
    else
        return_to_previous_seat( var_1, var_2 );
}

unset_player_zoom_setting( var_0 )
{
    var_0.current_reaper_camera_zoom_level = undefined;
}

delete_camera_point( var_0 )
{
    var_0.overwatch_camera_point delete();
}

exit_reaper_view( var_0 )
{
    var_0 cameraunlink();
}

remove_reaper_weapons( var_0 )
{
    var_0 scripts\cp\cp_weapons::_takeweapon( "ac130_105mm_cp" );
    var_0 scripts\cp\cp_weapons::_takeweapon( "ac130_40mm_cp" );
    var_0 scripts\cp\cp_weapons::_takeweapon( "ac130_25mm_cp" );
    var_0 scripts\common\utility::allow_weapon_switch( 1 );
    var_0 switchtoweaponimmediate( var_0.pre_reaper_weapon );
}

put_target_marker_on_critical_enemy_ai( var_0, var_1 )
{
    if ( isdefined( var_1.overwatch_target_marker_group_id ) )
        scripts\cp_mp\targetmarkergroups::targetmarkergroup_markentity( var_0, var_1.overwatch_target_marker_group_id );
    else
        var_1.overwatch_target_marker_group_id = scripts\cp_mp\targetmarkergroups::targetmarkergroup_on( "ieddronetarget", var_1, var_0, var_1 );

    var_0.target_marker_group_id = var_1.overwatch_target_marker_group_id;
}

add_ai_to_marked_enemy_ai_list( var_0 )
{
    if ( scripts\engine\utility::array_contains( level.marked_enemy_ai, var_0 ) )
        return;

    level.marked_enemy_ai = scripts\engine\utility::array_add( level.marked_enemy_ai, var_0 );
    var_0 thread remove_from_marked_enemy_ai_list_on_death( var_0 );
}

remove_from_marked_enemy_ai_list_on_death( var_0 )
{
    var_0 waittill( "death" );
    level.marked_enemy_ai = scripts\engine\utility::array_remove( level.marked_enemy_ai, var_0 );
}

add_ai_to_marked_critical_enemy_ai_list( var_0 )
{
    if ( scripts\engine\utility::array_contains( level.marked_critical_enemy_ai, var_0 ) )
        return;

    level.marked_critical_enemy_ai = scripts\engine\utility::array_add( level.marked_critical_enemy_ai, var_0 );
    var_0 thread remove_from_marked_critical_enemy_ai_list_on_death( var_0 );
}

remove_from_marked_critical_enemy_ai_list_on_death( var_0 )
{
    var_0 waittill( "death" );
    level.marked_critical_enemy_ai = scripts\engine\utility::array_remove( level.marked_critical_enemy_ai, var_0 );
}

make_critical_target_icon_on_ai( var_0 )
{
    if ( has_critical_target_icon( var_0 ) )
        return;

    var_1 = scripts\cp\cp_objectives::requestworldid( "enemy_AI_critical_target_ID_" + var_0 getentitynumber(), 22 );
    objective_state( var_1, "invisible" );
    objective_icon( var_1, "icon_faction_head_enemy" );
    objective_onentity( var_1, var_0 );
    objective_setzoffset( var_1, 90 );
    objective_removeallfrommask( var_1 );
    objective_setplayintro( var_1, 0 );
    objective_setplayoutro( var_1, 0 );
    objective_setbackground( var_1, 1 );
    objective_setshowdistance( var_1, 0 );
    objective_setshowprogress( var_1, 0 );
    objective_setfadedisabled( var_1, 1 );
    var_0.critical_target_icon_objective_id = var_1;
    var_0 thread delete_critical_target_icon_on_death( var_0, var_0 getentitynumber(), var_1 );
}

has_critical_target_icon( var_0 )
{
    return isdefined( var_0.critical_target_icon_objective_id );
}

delete_critical_target_icon_on_death( var_0, var_1, var_2 )
{
    var_0 waittill( "death" );
    scripts\cp\cp_objectives::freeworldid( "enemy_AI_critical_target_ID_" + var_1 );
    objective_delete( var_2 );
    var_0.critical_target_icon_objective_id = undefined;
}

show_critical_target_icon_to_player( var_0, var_1 )
{
    if ( has_critical_target_icon( var_0 ) )
        objective_addclienttomask( var_0.critical_target_icon_objective_id, var_1 );
}

hide_critical_target_icon_to_player( var_0, var_1 )
{
    if ( has_critical_target_icon( var_0 ) )
        objective_removeclientfrommask( var_0.critical_target_icon_objective_id, var_1 );
}

update_enemy_visualization_for_entering_reaper( var_0 )
{
    foreach ( var_2 in level.marked_enemy_ai )
        outline_enemy_ai_for_overwatch( var_2, var_0 );

    foreach ( var_2 in level.marked_critical_enemy_ai )
    {
        hide_critical_target_icon_to_player( var_2, var_0 );

        if ( isdefined( var_0.overwatch_target_marker_group_id ) )
            scripts\cp_mp\targetmarkergroups::targetmarkergroup_markentity( var_2, var_0.overwatch_target_marker_group_id );
        else
            var_0.overwatch_target_marker_group_id = scripts\cp_mp\targetmarkergroups::targetmarkergroup_on( "ieddronetarget", var_0, var_2, var_0 );

        var_2.target_marker_group_id = var_0.overwatch_target_marker_group_id;
    }
}

update_enemy_visualization_for_exiting_reaper( var_0 )
{
    foreach ( var_2 in level.marked_enemy_ai )
        remove_enemy_ai_outline_for_overwatch( var_2, var_0 );

    foreach ( var_2 in level.marked_critical_enemy_ai )
    {
        make_critical_target_icon_on_ai( var_2 );
        show_critical_target_icon_to_player( var_2, var_0 );
    }

    if ( isdefined( var_0.overwatch_target_marker_group_id ) )
    {
        scripts\cp_mp\targetmarkergroups::targetmarkergroup_off( var_0.overwatch_target_marker_group_id );
        var_0.overwatch_target_marker_group_id = undefined;
    }
}

outline_enemy_ai_for_overwatch( var_0, var_1 )
{
    var_0 hudoutlineenableforclient( var_1, "overwatch_target_outline" );
}

remove_enemy_ai_outline_for_overwatch( var_0, var_1 )
{
    var_0 hudoutlinedisableforclient( var_1 );
}

enter_overwatch( var_0, var_1, var_2 )
{
    var_1 notify( "enter_overwatch" );
    var_1.disable_map_tablet = 1;
    exit_seat_but_stay_on_seat( var_1 );
    record_seat( var_1, "overwatch" );
    var_1 scripts\common\utility::allow_weapon( 0 );
    var_1 setclientomnvar( "ui_veh_vehicle", -1 );
    var_1 setclientomnvar( "ui_overwatch_view", 1 );
    var_1 show_ied_zone_to_player( var_1 );
    var_1 remove_from_players_cannot_see_vehicle_icon_list( var_2, var_1 );
    var_1 update_vehicle_objective_visibility( var_2 );
    var_1 delete_non_overwatch_ied_marker_vfx_for_player( var_1 );
    var_1 show_ai_marker_vfx_to_player( var_1 );
    var_1 thread enter_overwatch_vision_set( var_1 );
    var_1 thread enter_overwatch_control( var_1, var_2 );
    var_1 thread target_in_red_circle_think( var_1, ::overwatch_get_target_in_circle_omnvar_value );
    var_1 thread move_cursor_near_identified_ied( var_1 );
    var_1 thread overwatch_radar_control( var_1, var_2 );
    level thread enable_overwatch_model();
}

exit_overwatch( var_0, var_1, var_2, var_3 )
{
    var_1 notify( "exit_overwatch" );
    var_1 thread exit_overwatch_vision_set( var_1 );
    var_1 scripts\common\utility::allow_weapon( 1 );
    var_1 setclientomnvar( "ui_overwatch_view", 0 );
    var_1 setclientomnvar( "ui_veh_vehicle", 10 );
    var_1 hide_ied_zone_from_player( var_1 );
    var_1 add_to_players_cannot_see_vehicle_icon_list( var_2, var_1 );
    var_1 update_vehicle_objective_visibility( var_2 );
    var_1 hide_ai_marker_vfx_to_player( var_1 );
    exit_overwatch_control( var_1, var_2 );
    enable_vehicle_interaction( var_2, "overwatch" );
    level thread disable_overwatch_model();
    var_1.disable_map_tablet = undefined;

    if ( var_3 == "last_stand" )
    {
        var_1.stay_on_seat_when_exit_seat = 0;
        exit_seat( var_1, 1 );
        exit_vehicle( var_1, var_2, var_1.previous_vehicle_seat );
    }
    else
        return_to_previous_seat( var_1, var_2 );
}

put_icon_on_vehicle( var_0 )
{
    var_1 = scripts\cp\cp_objectives::requestworldid( "vehicle_icon", 20 );
    objective_setplayintro( var_1, 0 );
    objective_setbackground( var_1, 1 );
    objective_state( var_1, "invisible" );
    objective_icon( var_1, "cp_tac_hud_icon_vehicle" );
    objective_setlabel( var_1, "" );
    objective_onentity( var_1, var_0 );
    objective_addalltomask( var_1 );
    var_0.objective_id = var_1;

    if ( getdvarint( "scr_disable_vehicle_icon", 0 ) != 0 )
        objective_removeallfrommask( var_0.objective_id );

    var_0 thread icon_clean_up_think( var_0 );
}

icon_clean_up_think( var_0 )
{
    var_0 waittill( "death" );
    scripts\cp\cp_objectives::freeworldid( "vehicle_icon" );
}

enter_overwatch_control( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "exit_overwatch" );
    var_2 = spawn( "script_model", get_camera_spawn_point( var_1 ) );
    var_2 setmodel( "tag_origin" );
    var_2.angles = vectortoangles( ( 0, 0, -1 ) );
    var_2.camera_height = var_2.origin[2];
    var_2.camera_min_height = var_2.camera_height - get_overwatch_camera_zoom_max_delta();
    var_2.camera_max_height = var_2.camera_height + get_overwatch_camera_zoom_max_delta();
    var_2 thread clean_up_overwatch_camera_point( var_2, var_0, var_1 );
    var_0.overwatch_camera_point = var_2;
    var_0 cameralinkto( var_2, "tag_origin" );
    var_0 thread camera_zoom_think( var_0, var_1 );
    var_0 thread camera_movement_think( var_0, var_1 );
    var_0 thread camera_reset_think( var_0, var_1 );
    var_0 thread camera_min_height_think( var_0, var_1 );
    var_0 thread overwatch_radar_control( var_0, var_1 );
}

get_overwatch_camera_zoom_max_delta()
{
    if ( isdefined( level.overwatch_camera_zoom_max_delta ) )
        return level.overwatch_camera_zoom_max_delta;

    return 2000;
}

target_in_red_circle_think( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "exit_overwatch" );
    var_0 setclientomnvar( "ui_targets_in_circle", 0 );

    for (;;)
    {
        var_2 = [[ var_1 ]]( var_0 );
        var_0 setclientomnvar( "ui_targets_in_circle", var_2 );
        waitframe();
    }
}

overwatch_get_target_in_circle_omnvar_value( var_0 )
{
    var_1 = 0;
    var_2 = get_unidentidied_ieds_within_scan_range( var_0, var_0.overwatch_camera_point.camera_ground_point );
    var_3 = squared( 600 );

    foreach ( var_5 in var_2 )
        var_1 = var_1 + ( 1 - distance2dsquared( var_5.origin, var_0.overwatch_camera_point.camera_ground_point ) / var_3 );

    foreach ( var_8 in level.agentarray )
    {
        if ( !isdefined( var_8 ) )
            continue;

        if ( !isalive( var_8 ) )
            continue;

        if ( istrue( var_8.marked_by_overwatch_scan ) )
            continue;

        var_9 = distance2dsquared( var_8.origin, var_0.overwatch_camera_point.camera_ground_point );

        if ( var_9 <= var_3 )
            var_1 = var_1 + ( 1 - var_9 / var_3 );
    }

    var_1 = min( var_1, 7 ) / 7 * 0.4;
    return var_1;
}

overwatch_radar_control( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "last_stand" );
    var_0 endon( "exit_overwatch" );
    var_0.false_positive_dots_bank = [];
    var_0.next_false_positive_bank_index = 0;
    var_0 notifyonplayercommand( "overwatch_radar_pin", "+goStand" );

    for (;;)
    {
        var_0 waittill( "overwatch_radar_pin" );
        playfx( level._effect["IED_radar_ping"], var_0.overwatch_camera_point.camera_ground_point, undefined, undefined, var_0 );
        show_unidentified_ied_within_scan_range( var_0, var_0.overwatch_camera_point.camera_ground_point );
        level thread show_ai_within_scan_range( var_0, var_0.overwatch_camera_point.camera_ground_point );
        wait 1;
    }
}

show_false_positive_dots( var_0, var_1, var_2 )
{
    var_3 = get_false_positive_dots_within_scan_range( var_1, var_0 );
    var_4 = [];

    if ( additional_false_positive_dots_needed( var_3 ) )
    {
        var_5 = get_additional_num_false_positive_dots_needed( var_3 );
        var_4 = make_false_positive_dots( var_0, var_1, var_5 );
    }

    foreach ( var_7 in var_3 )
        level thread show_false_positive_dot( var_0, var_1, var_7 );

    foreach ( var_7 in var_4 )
        level thread show_false_positive_dot( var_0, var_1, var_7 );
}

show_unidentified_ied_within_scan_range( var_0, var_1 )
{
    var_2 = get_unidentidied_ieds_within_scan_range( var_0, var_1 );

    foreach ( var_4 in var_2 )
        level thread show_ied( var_0, var_1, var_4 );
}

show_ai_within_scan_range( var_0, var_1 )
{
    var_2 = int( 30.0 );
    var_3 = 400.0;
    var_4 = var_3 * 0.05;

    for ( var_5 = 1; var_5 <= var_2; var_5++ )
    {
        var_6 = min( 600, var_4 * ( 1.5 * var_5 ) );

        foreach ( var_8 in level.agentarray )
        {
            if ( !isdefined( var_8 ) )
                continue;

            if ( !isalive( var_8 ) )
                continue;

            if ( istrue( var_8.marked_by_overwatch_scan ) )
                continue;

            if ( distance2dsquared( var_8.origin, var_1 ) <= var_6 * var_6 )
            {
                var_0.overwatch_camera_point playsoundtoplayer( "breach_warning_beep_05", var_0 );
                var_8 hudoutlineenable( "outlinefill_nodepth_orange" );
                var_8.marked_by_overwatch_scan = 1;
                show_enemy_ai_to_overwatch_player( var_8, var_0 );
            }
        }

        waitframe();
    }
}

show_enemy_ai_to_overwatch_player( var_0, var_1 )
{
    if ( isdefined( var_1.enemy_ai_target_marker_group_id ) )
        scripts\cp_mp\targetmarkergroups::targetmarkergroup_markentity( var_0, var_1.enemy_ai_target_marker_group_id );
    else
        var_1.enemy_ai_target_marker_group_id = scripts\cp_mp\targetmarkergroups::targetmarkergroup_on( "ieddronetarget", var_1, var_0, var_1 );

    var_0.target_marker_group_id = var_1.overwatch_target_marker_group_id;
}

hide_ai_marker_vfx_to_player( var_0 )
{
    if ( isdefined( var_0.enemy_ai_target_marker_group_id ) )
    {
        scripts\cp_mp\targetmarkergroups::targetmarkergroup_off( var_0.enemy_ai_target_marker_group_id );
        var_0.enemy_ai_target_marker_group_id = undefined;
    }
}

show_ai_marker_vfx_to_player( var_0 )
{
    foreach ( var_2 in level.agentarray )
    {
        if ( !isdefined( var_2 ) )
            continue;

        if ( !isalive( var_2 ) )
            continue;

        if ( istrue( var_2.marked_by_overwatch_scan ) )
            show_enemy_ai_to_overwatch_player( var_2, var_0 );
    }
}

additional_false_positive_dots_needed( var_0 )
{
    return var_0.size < 5;
}

make_false_positive_dots( var_0, var_1, var_2 )
{
    var_3 = [];
    var_4 = get_random_value_in_segment( var_2, 360 );
    var_5 = get_random_value_in_segment( var_2, 600 );

    for ( var_6 = 0; var_6 < var_2; var_6++ )
    {
        var_7 = ( 0, var_4[var_6], 0 );
        var_8 = anglestoforward( var_7 );
        var_9 = var_5[var_6];
        var_10 = var_0.overwatch_camera_point.origin;
        var_11 = var_1 + var_8 * var_9;
        var_10 = ( var_11[0], var_11[1], var_10[2] );
        var_11 = scripts\engine\trace::ray_trace_detail( var_10, var_11 + ( 0, 0, -5000 ) )["position"] + ( 0, 0, 5 );
        var_3[var_3.size] = var_11;
        put_into_player_false_positive_bank( var_0, var_11 );
    }

    return var_3;
}

put_into_player_false_positive_bank( var_0, var_1 )
{
    var_0.false_positive_dots_bank[var_0.next_false_positive_bank_index] = var_1;
    var_0.next_false_positive_bank_index++;

    if ( var_0.next_false_positive_bank_index >= 200 )
        var_0.next_false_positive_bank_index = 0;
}

get_additional_num_false_positive_dots_needed( var_0 )
{
    var_1 = get_num_of_segments();
    return var_1 - var_0.size;
}

get_false_positive_dots_within_scan_range( var_0, var_1 )
{
    var_2 = [];

    foreach ( var_4 in var_1.false_positive_dots_bank )
    {
        if ( distance2dsquared( var_4, var_0 ) <= 360000 )
            var_2[var_2.size] = var_4;
    }

    return var_2;
}

get_unidentidied_ieds_within_scan_range( var_0, var_1 )
{
    var_2 = [];

    foreach ( var_4 in level.unidentified_ieds )
    {
        if ( distance2dsquared( var_4.origin, var_1 ) <= 360000 )
            var_2[var_2.size] = var_4;
    }

    return var_2;
}

show_ied( var_0, var_1, var_2 )
{
    var_3 = distance( var_1, var_2.origin );
    var_4 = 400.0;
    var_5 = var_3 / var_4;
    var_6 = int( var_5 * 20 );
    var_5 = var_6 * 0.05;
    wait( max( 0.05, var_5 - 0.55 ) );

    if ( isdefined( var_0.overwatch_camera_point ) )
        var_0.overwatch_camera_point playsoundtoplayer( "breach_warning_beep_05", var_0 );

    mark_ied_as_identified( var_0, var_2 );
}

show_false_positive_dot( var_0, var_1, var_2 )
{
    var_3 = distance( var_1, var_2 );
    var_4 = 400.0;
    var_5 = var_3 / var_4;
    var_6 = int( var_5 * 20 );
    var_5 = var_6 * 0.05;
    wait( max( 0.05, var_5 - 0.5 ) );
    playfx( level._effect["IED_false_positive"], var_2, ( 0, 0, 1 ), ( 1, 0, 0 ), var_0 );
}

get_random_value_in_segment( var_0, var_1 )
{
    var_2 = [];
    var_3 = var_1 / var_0;

    for ( var_4 = 0; var_4 < var_0; var_4++ )
        var_2[var_2.size] = randomfloatrange( var_4 * var_3, ( var_4 + 1 ) * var_3 );

    for ( var_5 = 0; var_5 < 5; var_5++ )
        var_2 = scripts\engine\utility::array_randomize( var_2 );

    return var_2;
}

get_num_of_segments()
{
    return randomintrange( 5, 11 );
}

get_ai_highlight_hudoutline( var_0 )
{
    return "outlinefill_nodepth_red";
}

mark_enemy_as_identified( var_0, var_1 )
{
    var_0.highlighted_enemies = scripts\engine\utility::array_remove( var_0.highlighted_enemies, var_1 );
    var_1.marked_by_overwatch = 1;
    var_1 hudoutlineenable( get_ai_highlight_hudoutline( var_1 ) );
}

mark_ied_as_identified( var_0, var_1 )
{
    if ( !is_ied_identified( var_1 ) && isdefined( var_1 ) )
    {
        level notify( "IED_marked" );
        remove_from_unidentified_ieds_list( var_1 );
        mark_ied_controller_as_identified( var_1 );
        add_to_identified_ieds_list( var_1 );
        show_identified_ied_to_overwatch( var_1, var_0 );
        show_identified_ied_to_non_overwatch( var_1, var_0 );
        set_ied_scanned_flag_from_ied_controller( var_1 );
    }
}

mark_ied_controller_as_identified( var_0 )
{
    var_1 = var_0.ied_controller;
    var_1.identified = 1;

    if ( isdefined( var_1.unidentified_zone_vfxs ) )
    {
        foreach ( var_3 in var_1.unidentified_zone_vfxs )
        {
            if ( isdefined( var_3 ) )
                var_3 delete();
        }
    }
}

camera_movement_think( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "last_stand" );
    var_0 endon( "exit_overwatch" );
    var_1 endon( "death " );

    for (;;)
    {
        var_2 = var_0 getnormalizedmovement();
        var_3 = var_2[0];
        var_4 = var_2[1];

        if ( player_moving_camera( var_3, var_4 ) )
        {
            var_0 notify( "start_moving_camera" );
            var_5 = ( var_3 * get_camera_dist_per_frame( var_0 ), var_4 * get_camera_dist_per_frame( var_0 ) * -1, 0 );
            var_6 = var_0.overwatch_camera_point.origin + var_5;
            var_6 = ( var_6[0], var_6[1], var_0.overwatch_camera_point.camera_height );
            var_0.overwatch_camera_point.origin = var_6;
        }

        waitframe();
    }
}

get_camera_dist_per_frame( var_0 )
{
    var_1 = var_0.overwatch_camera_point.camera_max_height - var_0.overwatch_camera_point.camera_min_height;
    var_2 = var_0.overwatch_camera_point.camera_height - var_0.overwatch_camera_point.camera_min_height;
    var_3 = var_2 / var_1 * 90;
    var_4 = 10 + var_3;
    return var_4;
}

camera_zoom_think( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "last_stand" );
    var_0 endon( "exit_overwatch" );
    var_1 endon( "death " );

    for (;;)
    {
        if ( var_0 attackbuttonpressed() )
        {
            var_0 notify( "start_moving_camera" );
            var_0.overwatch_camera_point.camera_height = max( var_0.overwatch_camera_point.camera_min_height, var_0.overwatch_camera_point.camera_height - 160 );
            var_0.overwatch_camera_point.origin = ( var_0.overwatch_camera_point.origin[0], var_0.overwatch_camera_point.origin[1], var_0.overwatch_camera_point.camera_height );
        }

        if ( var_0 adsbuttonpressed() )
        {
            var_0 notify( "start_moving_camera" );
            var_0.overwatch_camera_point.camera_height = min( var_0.overwatch_camera_point.camera_max_height, var_0.overwatch_camera_point.camera_height + 160 );
            var_0.overwatch_camera_point.origin = ( var_0.overwatch_camera_point.origin[0], var_0.overwatch_camera_point.origin[1], var_0.overwatch_camera_point.camera_height );
        }

        waitframe();
    }
}

camera_min_height_think( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "last_stand" );
    var_0 endon( "exit_overwatch" );
    var_1 endon( "death " );

    for (;;)
    {
        var_2 = scripts\engine\trace::ray_trace_detail( var_0.overwatch_camera_point.origin + ( 0, 0, -5 ), var_0.overwatch_camera_point.origin + ( 0, 0, -50000 ) );
        var_3 = var_2["position"];
        var_0.overwatch_camera_point.camera_ground_point = var_3;
        var_4 = var_3[2] + 500;
        var_0.overwatch_camera_point.camera_min_height = var_4;

        if ( var_0.overwatch_camera_point.origin[2] < var_4 )
            var_0.overwatch_camera_point.origin = ( var_0.overwatch_camera_point.origin[0], var_0.overwatch_camera_point.origin[1], var_4 );

        waitframe();
    }
}

clean_up_overwatch_camera_point( var_0, var_1, var_2 )
{
    var_3 = scripts\engine\utility::waittill_any_ents_return( var_1, "exit_overwatch", var_1, "disconnect", var_1, "last_stand", var_2, "death" );
    var_0 delete();
}

player_moving_camera( var_0, var_1 )
{
    if ( abs( var_0 ) != 0 )
        return 1;

    if ( abs( var_1 ) != 0 )
        return 1;

    return 0;
}

camera_reset_think( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "exit_overwatch" );
    var_1 endon( "death " );
    var_0 notifyonplayercommand( "reset_overwatch_camera", "+weapnext" );

    for (;;)
    {
        var_0 thread lock_camera_on_vehicle_until_moving_camera( var_0, var_1 );
        var_0 waittill( "reset_overwatch_camera" );
    }
}

lock_camera_on_vehicle_until_moving_camera( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "exit_overwatch" );
    var_0 endon( "start_moving_camera" );
    var_1 endon( "death" );

    for (;;)
    {
        var_2 = get_camera_reset_point( var_0, var_1 );
        var_0.overwatch_camera_point.origin = var_2;
        waitframe();
    }
}

get_camera_spawn_point( var_0 )
{
    return var_0 gettagorigin( "tag_origin" ) + ( 0, 0, get_camera_control_up_offset() );
}

get_camera_control_up_offset()
{
    if ( isdefined( level.overwatch_control_up_offset ) )
        return level.overwatch_control_up_offset;

    return 2550;
}

get_camera_reset_point( var_0, var_1 )
{
    var_2 = var_1 gettagorigin( "tag_origin" );
    return ( var_2[0], var_2[1], var_0.overwatch_camera_point.camera_height );
}

exit_overwatch_control( var_0, var_1 )
{
    var_0 cameraunlink();
}

enter_overwatch_vision_set( var_0 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "exit_overwatch" );
    overwatch_screen_transition( var_0 );
    wait 0.25;
    level notify( "vision_set_change_request", "ac130_color_glitch", var_0, 0.25 );
    wait 0.25;
    level notify( "vision_set_change_request", "ac130_color", var_0, 0 );
}

exit_overwatch_vision_set( var_0 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "enter_overwatch" );
    overwatch_screen_transition( var_0 );
    level notify( "vision_set_change_request", undefined, var_0, 0, "ac130_color" );
    waitframe();
    level notify( "vision_set_change_request", undefined, var_0, 0, "ac130_color_glitch" );
}

enable_overwatch_model()
{
    if ( isdefined( level.uavrig ) )
        level.uavrig show();
    else
    {
        var_0 = getentarray( "minimap_corner", "targetname" );

        if ( var_0.size )
        {
            var_1 = var_0[0].origin;
            var_2 = var_0[1].origin;
            var_3 = ( 0, 0, 0 );
            var_3 = var_2 - var_1;
            var_3 = ( var_3[0] / 2, var_3[1] / 2, var_3[2] / 2 ) + var_1;
            level.uavrotationorigin = var_3;
        }
        else
            level.uavrotationorigin = ( 0, 0, 0 );

        level.uavrig = spawn( "script_model", level.uavrotationorigin );
        level.uavrig setmodel( "tag_origin" );
        level.uavrig.angles = ( 0, 115, 0 );
        level.uavrig.targetname = "uavrig_script_model";
        level.uavrig thread rotateuavrig( 70 );
    }
}

disable_overwatch_model()
{
    if ( isdefined( level.uavrig ) )
        level.uavrig hide();
}

rotateuavrig( var_0, var_1, var_2 )
{
    if ( isdefined( var_2 ) )
        self endon( var_2 );

    if ( !isdefined( var_0 ) )
        var_0 = 60;

    if ( !isdefined( var_1 ) )
        var_1 = -360;

    for (;;)
    {
        self rotateyaw( var_1, var_0 );
        wait( var_0 );
    }
}

disable_vehicle_interaction( var_0, var_1 )
{
    var_2 = get_vehicle_interaction_point( var_0, var_1 );
    var_2 makeunusable();
}

enable_vehicle_interaction( var_0, var_1 )
{
    var_2 = get_vehicle_interaction_point( var_0, var_1 );
    var_2 makeusable();
    var_2.being_used = 0;
}

enter_seat( var_0, var_1, var_2 )
{
    record_seat( var_0, var_2 );
    var_0.exit_vehicle_when_exit_seat = 1;
    var_0.stay_on_seat_when_exit_seat = 0;
    play_seat_animation( var_0, var_1, var_2 );
    var_0 enter_seat_omnvar( var_0, var_2 );
}

play_seat_animation( var_0, var_1, var_2 )
{
    var_3 = "viewhands_base_iw8";
    var_4 = get_seat_tag_name( var_2 );
    var_5 = var_1 gettagorigin( var_4 );
    var_6 = var_1 gettagangles( var_4 );
    var_0.player_rig = spawn( "script_model", var_5 );
    var_0.player_rig.angles = var_6;
    var_0.player_rig linkto( var_1, var_4 );
    var_0.player_rig setmodel( var_3 );
    var_0.player_rig hide();
    var_0 setstance( "stand" );
    var_0 animscriptentervehicle();
    var_0 setplayerangles( var_0.player_rig.angles );
    var_0 playerlinktodelta( var_0.player_rig, "tag_player", 0, 120, 120, 120, 35, 1 );
}

technical_stopanimatingplayer()
{
    if ( !isdefined( self.player_rig ) )
        return;

    self notify( "technical_stopAnimatingPlayer" );
    self.animname = undefined;
    self.player_rig delete();

    if ( scripts\cp_mp\utility\player_utility::_isalive() )
        self stopanimscriptsceneevent();

    self animscriptexitvehicle();
}

get_seat_tag_name( var_0 )
{
    var_1 = "tag_seat_0";

    switch ( var_0 )
    {
        case "driver":
            var_1 = "tag_seat_0";
            break;
        case "passenger":
            var_1 = "tag_seat_1";
            break;
        case "left_back_seat":
            var_1 = "tag_seat_2";
            break;
        case "right_back_seat":
            var_1 = "tag_seat_3";
            break;
    }

    return var_1;
}

enter_seat_omnvar( var_0, var_1 )
{
    for ( var_2 = 0; var_2 <= var_0.vehicle_riding_on.players_as_passenger.size - 1; var_2++ )
    {
        var_3 = var_0.vehicle_riding_on.players_as_passenger[var_2];
        var_4 = var_3 getentitynumber() + 1;
        var_1 = var_3.current_vehicle_seat;
        var_3 thread enter_seat_omnvar_internal( var_3, var_4, var_1 );
    }
}

enter_seat_omnvar_internal( var_0, var_1, var_2 )
{
    var_3 = get_seat_omnvar_name( var_2 );

    foreach ( var_5 in level.players )
    {
        if ( isdefined( var_5.vehicle_riding_on ) && var_5.vehicle_riding_on == var_0.vehicle_riding_on )
        {
            var_6 = var_5.vehicle_riding_on;
            var_5 setclientomnvar( var_3, var_1 - 1 );

            if ( isdefined( var_6.fake_health ) && isdefined( var_6.max_fake_health ) )
            {
                var_7 = int( clamp( var_6.fake_health / var_6.max_fake_health * 100, 0, 100 ) );
                var_5 setclientomnvar( "ui_veh_health_percent", int( var_7 ) );

                if ( var_7 < 1 && var_7 > 0 )
                    var_5 setclientomnvar( "ui_veh_show_health", 1 );
                else
                    var_5 setclientomnvar( "ui_veh_show_health", 0 );
            }
            else
                var_5 setclientomnvar( "ui_veh_show_health", 0 );
        }
    }
}

get_seat_omnvar_name( var_0 )
{
    var_1 = "ui_veh_occupant_0";

    switch ( var_0 )
    {
        case "driver":
            var_1 = "ui_veh_occupant_0";
            break;
        case "passenger":
        case "overwatch":
            var_1 = "ui_veh_occupant_1";
            break;
        case "mine_drone_left":
        case "missile_defense_left":
        case "overwatch_left":
        case "left_back_seat":
            var_1 = "ui_veh_occupant_2";
            break;
        case "mine_drone_right":
        case "missile_defense_right":
        case "overwatch_right":
        case "right_back_seat":
            var_1 = "ui_veh_occupant_3";
            break;
        case "grenadier":
        case "gunner":
            var_1 = "ui_veh_occupant_4";
            break;
    }

    return var_1;
}

watch_for_host_migration()
{
    level endon( "game_ended" );

    for (;;)
    {
        level waittill( "host_migration_end" );

        foreach ( var_1 in level.players )
        {
            var_1 setclientomnvar( "ui_hide_minimap", 1 );
            var_1 scripts\cp\utility::init_vehicle_omnvars();

            if ( isdefined( var_1.vehicle_riding_on.players_as_passenger ) )
            {
                enter_seat_omnvar( var_1 );
                continue;
            }

            var_1 setclientomnvar( "ui_veh_vehicle", -1 );
        }
    }
}

exit_seat_omnvar( var_0, var_1, var_2 )
{
    var_3 = var_0 getentitynumber();
    var_0 setclientomnvar( "ui_veh_vehicle", -1 );
    var_4 = get_seat_omnvar_name( var_1 );

    foreach ( var_0 in level.players )
    {
        if ( isdefined( var_0.vehicle_riding_on ) && var_0.vehicle_riding_on == var_2 )
            var_0 setclientomnvar( var_4, -1 );
    }
}

delay_relax_view_arc( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "last_stand" );
    var_0 endon( "player_exit_vehicle" );
    waitframe();
    var_0 playerlinktodelta( var_0.player_rig, "tag_player", 0, 120, 120, 120, 120, 1 );
}

exit_seat( var_0, var_1 )
{
    if ( istrue( var_1 ) && !istrue( var_0.stay_on_seat_when_exit_seat ) )
    {
        var_0 technical_stopanimatingplayer();
        var_0 unlink();
    }
}

exit_seat_but_stay_in_vehicle( var_0, var_1 )
{
    var_0.exit_vehicle_when_exit_seat = 0;
    var_0 notify( "exit_" + var_0.current_vehicle_seat );
    var_0 exit_seat_omnvar( var_0, var_0.current_vehicle_seat, var_1 );
}

exit_seat_but_stay_on_seat( var_0 )
{
    var_0.exit_vehicle_when_exit_seat = 0;
    var_0.stay_on_seat_when_exit_seat = 1;
    var_0 notify( "exit_" + var_0.current_vehicle_seat );
}

record_seat( var_0, var_1 )
{
    var_0.previous_vehicle_seat = var_0.current_vehicle_seat;
    var_0.current_vehicle_seat = var_1;
}

return_to_previous_seat( var_0, var_1 )
{
    var_2 = get_vehicle_interaction_point( var_1, var_0.previous_vehicle_seat );
    var_2 notify( "trigger", var_0 );
    var_0 enter_seat_omnvar( var_0, var_0.previous_vehicle_seat );
}

force_player_to_stand( var_0 )
{
    var_0 endon( "disconnect" );
    var_0 allowstand( 1 );
    var_0 allowprone( 0 );
    var_0 allowcrouch( 0 );
    wait 0.5;
    var_0 allowprone( 1 );
    var_0 allowcrouch( 1 );
}

try_exit_vehicle( var_0, var_1, var_2 )
{
    if ( istrue( var_0.exit_vehicle_when_exit_seat ) )
        exit_vehicle( var_0, var_1, var_2 );
}

enter_vehicle( var_0, var_1 )
{
    level notify( "players_entered_vehicle" );
    var_0 notify( "player_enter_vehicle" );
    var_0 setclientomnvar( "ui_veh_vehicle", 10 );
    var_0.vehicle_riding_on = var_1;
    var_0 disableoffhandprimaryweapons();
    var_0 disableoffhandsecondaryweapons();
    var_0 allowsprint( 0 );
    var_0 allowsupersprint( 0 );
    var_0 scripts\cp\cp_kidnapper::setimmunetokidnapper( 1 );
    add_to_players_as_passenger_list( var_1, var_0 );
    add_to_players_cannot_see_vehicle_icon_list( var_1, var_0 );
    update_vehicle_objective_visibility( var_1 );
    _id_11A06( var_0, var_1 );
    update_driver_interaction_hint( var_1 );
}

exit_vehicle( var_0, var_1, var_2 )
{
    var_0 notify( "player_exit_vehicle" );
    var_0 exit_seat_omnvar( var_0, var_2, var_1 );
    var_0.vehicle_riding_on = undefined;
    var_0 scripts\cp\cp_kidnapper::setimmunetokidnapper( 0 );
    remove_from_players_as_passenger_list( var_1, var_0 );
    remove_from_players_cannot_see_vehicle_icon_list( var_1, var_0 );
    update_vehicle_objective_visibility( var_1 );
    var_0.current_vehicle_seat = undefined;
    var_3 = get_exit_vehicle_teleport_to_loc( var_0, var_1, var_2 );
    var_0 setorigin( var_3, 1 );
    var_0 setworldupreference( undefined );
    var_0 enableoffhandprimaryweapons();
    var_0 enableoffhandsecondaryweapons();
    var_0 allowsprint( 1 );
    var_0 allowsupersprint( 1 );
    var_0 thread force_player_to_stand( var_0 );
    var_0 little_bird_horn( var_0 );
    update_driver_interaction_hint( var_1 );

    if ( should_enable_seat_when_exit_vehicle( var_1, var_2 ) )
        enable_vehicle_interaction( var_1, var_2 );
}

_id_11A06( var_0, var_1 )
{
    if ( isdefined( var_1.waitforanyplayernearpoint ) )
    {
        var_0.waitforgulagfightstocomplete = [];
        var_2 = var_0 getweaponslistprimaries();
        var_3 = var_0 getcurrentweapon();
        var_4 = scripts\engine\utility::array_contains( var_1.waitforanyplayernearpoint, var_3.basename );

        foreach ( var_6 in var_2 )
        {
            if ( isdefined( var_6.basename ) && scripts\engine\utility::array_contains( var_1.waitforanyplayernearpoint, var_6.basename ) )
            {
                var_0.waitforgulagfightstocomplete[var_0.waitforgulagfightstocomplete.size] = var_6;
                var_0 takeweapon( var_6 );
            }
        }

        if ( istrue( var_4 ) )
            var_0 switchtoweapon( var_0 getweaponslistprimaries()[0] );
    }
}

little_bird_horn( var_0 )
{
    var_1 = 0;

    if ( isdefined( var_0.waitforgulagfightstocomplete ) )
    {
        foreach ( var_3 in var_0.waitforgulagfightstocomplete )
        {
            var_0 giveweapon( var_3 );

            if ( issubstr( var_3.basename, "riotshield" ) )
                var_1 = 1;
        }

        var_0.waitforgulagfightstocomplete = undefined;
    }

    if ( istrue( var_1 ) )
        var_0 scripts\cp\cp_weapon::riotshieldonweaponchange();
}

update_vehicle_objective_visibility( var_0 )
{
    if ( getdvarint( "scr_disable_vehicle_icon", 0 ) != 0 )
        return;

    if ( !isdefined( var_0.objective_id ) )
        return;

    foreach ( var_2 in level.players )
    {
        if ( scripts\engine\utility::array_contains( var_0.players_cannot_see_vehicle_icon, var_2 ) )
        {
            objective_removeclientfrommask( var_0.objective_id, var_2 );
            continue;
        }

        objective_addclienttomask( var_0.objective_id, var_2 );
    }

    objective_showtoplayersinmask( var_0.objective_id );
}

should_enable_seat_when_exit_vehicle( var_0, var_1 )
{
    return 1;
}

get_exit_vehicle_teleport_to_loc( var_0, var_1, var_2 )
{
    var_3 = create_seat_name_array( var_2 );
    var_4 = 0;
    var_2 = var_3[var_4];
    var_5 = get_exit_base_interaction_point( var_0, var_1, var_2 );
    var_6 = get_exit_direction_vector( var_0, var_1, var_2 );
    var_7 = vectornormalize( var_6 );
    var_7 = var_7 * -5;
    var_8 = var_5.origin + var_6;
    var_9 = scripts\engine\trace::capsule_trace( var_5.origin + var_7, var_8, 6, 80, undefined, var_1 );
    var_10 = 1;

    if ( distance2dsquared( var_9["position"], var_8 ) < 225 )
    {
        if ( abs( var_9["position"][2] - var_8[2] ) < 25 )
            var_10 = 0;

        if ( !ispointonnavmesh( var_9["position"] ) )
            var_10 = 0;
    }

    while ( var_10 && var_4 < var_3.size )
    {
        var_2 = var_3[var_4];
        var_5 = get_exit_base_interaction_point( var_0, var_1, var_2 );

        if ( isdefined( var_5 ) )
        {
            var_6 = get_exit_direction_vector( var_0, var_1, var_2 );
            var_7 = vectornormalize( var_6 );
            var_7 = var_7 * -5;
            var_8 = var_5.origin + var_6;
            var_9 = scripts\engine\trace::capsule_trace( var_5.origin + var_7, var_8, 6, 80, undefined, var_1 );

            if ( distance2dsquared( var_9["position"], var_8 ) < 225 )
            {
                if ( abs( var_9["position"][2] - var_8[2] ) < 25 )
                    var_10 = 0;

                if ( !ispointonnavmesh( var_9["position"] ) )
                    var_10 = 0;
            }
        }

        if ( var_10 )
            var_4++;

        waitframe();
    }

    if ( var_4 >= var_3.size )
        var_8 = var_1.origin + ( 0, 0, 100 );

    var_11 = scripts\engine\trace::capsule_trace( var_8 + ( 0, 0, 0 ), var_8 + ( 0, 0, -256 ), 6, 80 )["position"];
    return var_11;
}

create_seat_name_array( var_0 )
{
    switch ( var_0 )
    {
        case "driver":
            return [ "driver", "left_back_seat", "passenger", "right_back_seat" ];
        case "passenger":
            return [ "passenger", "right_back_seat", "driver", "left_back_seat" ];
        case "left_back_seat":
            return [ "left_back_seat", "driver", "right_back_seat", "passenger" ];
        case "right_back_seat":
            return [ "right_back_seat", "passenger", "left_back_seat", "driver" ];
    }
}

get_exit_base_interaction_point( var_0, var_1, var_2 )
{
    switch ( var_2 )
    {
        case "driver":
            return get_vehicle_interaction_point( var_1, "driver" );
        case "passenger":
            return get_vehicle_interaction_point( var_1, "passenger" );
        case "left_back_seat":
            return get_vehicle_interaction_point( var_1, "left_back_seat" );
        case "right_back_seat":
            return get_vehicle_interaction_point( var_1, "right_back_seat" );
    }
}

get_exit_direction_vector( var_0, var_1, var_2 )
{
    var_3 = anglestoright( var_1.angles );
    var_4 = var_3 * -1;

    switch ( var_2 )
    {
        case "left_back_seat":
        case "driver":
            return var_4 * 50;
        case "right_back_seat":
        case "passenger":
            return var_3 * 50;
    }
}

get_vehicle_interaction_point( var_0, var_1 )
{
    return var_0.vehicle_interactions[var_1];
}

make_vehicle_seat( var_0, var_1, var_2, var_3 )
{
    var_4 = var_0 gettagorigin( "tag_origin" );
    var_5 = anglestoforward( var_0.angles );
    var_6 = anglestoright( var_0.angles );
    var_7 = anglestoup( var_0.angles );
    var_8 = var_4 + var_5 * var_1 + var_6 * var_2 + var_7 * var_3;
    var_9 = spawn( "script_model", var_8 );
    var_9 setmodel( "tag_origin" );
    var_9.angles = var_0.angles;
    var_9.vehicle = var_0;
    var_9 linkto( var_0 );
    var_9 thread clean_up_on_vehicle_death( var_9, var_0 );
    return var_9;
}

init_vehicle( var_0, var_1 )
{
    var_0.ied_triggering_tag_to_repair_tag_mapping = var_1.ied_triggering_tag_to_repair_tag_mapping;
    var_0.repair_interaction_list = [];
    var_0.players_as_passenger = [];
    var_0.players_cannot_see_vehicle_icon = [];
    var_0.disabled = 0;
    var_0.script_badplace = 1;
    var_0.classname_mp = var_1.classname_mp;
    var_0.slow_tread_vfx_trigger_speed = var_1.slow_tread_vfx_trigger_speed;
    var_0.fast_tread_vfx_trigger_speed = var_1.fast_tread_vfx_trigger_speed;
    var_0.tread_vfx_tags = var_1.tread_vfx_tags;
    var_0.waitforanyplayernearpoint = var_1.waitforanyplayernearpoint;
}

vehicle_damage_monitor( var_0, var_1 )
{
    var_0 endon( "death" );
    var_0 setcandamage( 1 );
    var_0.health = 999999;
    var_0.max_fake_health = var_1.fake_health;
    var_0.fake_health = var_1.fake_health;
    var_0.trigger_damage_state_health = int( var_0.fake_health * var_1.show_damage_state_health_ratio );
    var_0.showing_damage_state = 0;
    var_0.disabled_due_to_damage = 0;

    for (;;)
    {
        var_0 waittill( "damage", var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11 );
        var_0.health = 999999;

        if ( is_friendly_fire( var_3, var_11 ) )
        {
            var_0 thread melee_to_nudge_car( var_0, var_5, var_6 );
            continue;
        }

        if ( isdefined( var_2 ) )
        {
            if ( isdefined( var_11 ) )
                var_2 = adjust_damage_to_vehicle( var_2, var_11, var_0 );

            var_0.fake_health = var_0.fake_health - var_2;
            var_12 = int( clamp( var_0.fake_health / var_1.fake_health * 100, 0, 100 ) );

            foreach ( var_14 in level.players )
            {
                if ( isdefined( var_14.vehicle_riding_on ) && var_14.vehicle_riding_on == var_0 )
                {
                    var_14 setclientomnvar( "ui_veh_health_percent", int( var_12 ) );
                    var_14 setclientomnvar( "ui_veh_show_health", 1 );
                }
            }

            if ( var_0.fake_health < 0 && !istrue( var_0.disabled_due_to_damage ) )
                disabling_vehicle_due_to_damage( var_0 );
            else if ( var_0.fake_health < var_0.trigger_damage_state_health )
                show_vehicle_damage_state( var_0 );
        }
    }
}

adjust_damage_to_vehicle( var_0, var_1, var_2 )
{
    if ( isdefined( var_1.basename ) && ( var_1.basename == "juliet_missile_cp" || var_1.basename == "rpg_missile_cp" || var_1.basename == "cruise_missile_warhead_cp" ) )
        return var_2.fake_health + 100;

    return var_0;
}

is_friendly_fire( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( isplayer( var_0 ) )
        return 1;

    if ( isdefined( var_0.owner ) && isplayer( var_0.owner ) )
        return 1;

    if ( isdefined( var_1 ) && isdefined( var_1.basename ) && var_1.basename == "overwatch_missile_cp" )
        return 1;

    return 0;
}

melee_to_nudge_car( var_0, var_1, var_2 )
{
    if ( isdefined( var_2 ) && var_2 == "MOD_MELEE" && var_0.players_as_passenger.size == 0 )
    {
        var_3 = ( var_1 + var_0.origin ) / 2 - ( 0, 0, 40 );
        physicsexplosionsphere( var_3, 3, 2, 4 );
    }
}

show_vehicle_damage_state( var_0 )
{
    if ( istrue( var_0.showing_damage_state ) )
        return;

    var_0.showing_damage_state = 1;
    var_1 = get_vehicle_interaction_point( var_0, "hood_repair" );
    var_1 thread play_vfx_on_repair_part( var_0, "tag_grill", "vehicle_hood_damage_smoke", var_1, anglestoforward( var_0.angles ) );
}

disabling_vehicle_due_to_damage( var_0 )
{
    var_0.disabled_due_to_damage = 1;
    var_0.disabled = 1;
    update_driver_interaction_hint( var_0 );
    level notify( "vehicle_needs_repair" );
    var_1 = get_vehicle_interaction_point( var_0, "hood_repair" );
    put_icon_on_vehicle_repair_point( var_0, var_1 );
    set_repair_omnvars( "hood_repair", 1 );
    var_1 thread play_vfx_on_repair_part( var_0, "tag_light_front_right_2", "vehicle_hood_damage_smoke", var_1, anglestoforward( var_0.angles ) );
    var_1 thread play_vfx_on_repair_part( var_0, "tag_light_front_left_2", "vehicle_hood_damage_smoke", var_1, anglestoforward( var_0.angles ) );
    force_driver_out_of_vehicle( var_0 );
    show_vehicle_damage_state( var_0 );
    enable_vehicle_interaction( var_0, "hood_repair" );
    var_1 = get_vehicle_interaction_point( var_0, "hood_repair" );
    add_to_vehicle_repair_interaction_list( var_0, var_1 );
}

set_up_vehicle_interactions( var_0, var_1 )
{
    var_2 = var_0.angles;
    var_3 = anglestoforward( var_2 );
    var_4 = anglestoright( var_2 );
    var_5 = anglestoup( var_2 );
    var_6 = var_0 gettagorigin( "tag_origin" );
    var_0.vehicle_interactions = [];

    foreach ( var_11, var_8 in var_1.interaction_setups_array )
    {
        var_9 = var_6 + var_3 * var_8.front_offset_from_tag_origin + var_4 * var_8.right_offset_from_tag_origin + var_5 * var_8.up_offset_from_tag_origin;
        var_10 = spawn( "script_model", var_9 );
        var_10 setmodel( "tag_origin" );
        var_10 linkto( var_0 );
        var_8 = get_vehicle_interaction_info( var_11 );
        var_10 sethintstring( var_8.hint_string );
        var_10 setcursorhint( "HINT_BUTTON" );
        var_10 sethintdisplayrange( var_8.display_range );
        var_10 sethintdisplayfov( var_8.display_fov );
        var_10 setuserange( var_8.use_range );
        var_10 setusefov( var_8.use_fov );
        var_10 sethintonobstruction( "hide" );
        var_10 setuseholdduration( var_8.use_hold_duration );
        var_10 thread use_think( var_11, var_10, var_0, var_8.try_use_func, var_8.start_use_func, var_8.exit_use_func, var_8.exit_button, var_8.available_on_start );
        var_0.vehicle_interactions[var_11] = var_10;
    }
}

set_up_ied_triggering_tags( var_0, var_1 )
{
    var_0.ied_triggering_tags = var_1.ied_triggering_tags;
}

use_think( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_2 endon( "death" );
    var_8 = "exit_" + var_0;

    if ( istrue( var_7 ) )
        var_1 makeusable();

    var_1.being_used = 0;

    for (;;)
    {
        var_1 waittill( "trigger", var_9 );

        if ( isdefined( var_3 ) && ![[ var_3 ]]( var_2, var_9 ) )
            continue;

        if ( isdefined( var_6 ) )
            var_9 notifyonplayercommand( var_8, var_6 );

        var_1 makeunusable();
        var_1.being_used = 1;
        var_1 thread [[ var_4 ]]( var_1, var_9, var_2 );

        if ( isdefined( var_6 ) )
            var_10 = var_9 scripts\engine\utility::waittill_any_ents_return( var_9, "disconnect", var_9, var_8, var_1, "interaction_point_disabled", var_9, "last_stand", var_9, "force_player_exit_vehicle", var_9, "force_player_exit_seat" );
        else
            var_10 = var_9 scripts\engine\utility::waittill_any_ents_return( var_9, "disconnect", var_1, "interaction_point_disabled", var_9, "last_stand", var_9, "repair_failed", var_9, "force_player_exit_vehicle", var_9, "force_player_exit_seat" );

        if ( isdefined( var_5 ) )
            var_1 thread [[ var_5 ]]( var_1, var_9, var_2, var_10 );
    }
}

register_vehicle_interaction_info( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11 )
{
    var_12 = spawnstruct();
    var_12.hint_string = var_1;
    var_12.try_use_func = var_2;
    var_12.start_use_func = var_3;
    var_12.exit_use_func = var_4;
    var_12.exit_button = var_5;
    var_12.display_range = var_6;
    var_12.display_fov = var_7;
    var_12.use_range = var_8;
    var_12.use_fov = var_9;
    var_12.use_hold_duration = var_10;
    var_12.available_on_start = var_11;
    level.vehicle_interaction_info[var_0] = var_12;
}

get_vehicle_interaction_info( var_0 )
{
    return level.vehicle_interaction_info[var_0];
}

assign_vehicle_interaction( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = spawnstruct();
    var_5.front_offset_from_tag_origin = var_1;
    var_5.right_offset_from_tag_origin = var_2;
    var_5.up_offset_from_tag_origin = var_3;
    var_4[var_0] = var_5;
    return var_4;
}

debug_interaction_point( var_0 )
{
    for (;;)
        waitframe();
}

add_additional_parts( var_0, var_1 )
{
    if ( isdefined( var_1.add_additional_parts_func ) )
        level thread [[ var_1.add_additional_parts_func ]]( var_0 );
}

set_up_fake_character_models( var_0 )
{
    var_0.fake_back_right_passenger = make_fake_character_model( var_0, "tag_seat_3", 1 );
    var_0.fake_back_left_passenger = make_fake_character_model( var_0, "tag_seat_2", 1 );
}

#using_animtree("script_model");

make_fake_character_model( var_0, var_1, var_2, var_3 )
{
    var_4 = var_0 gettagorigin( var_1 );
    var_5 = spawn( "script_model", var_4, 0, 1 );
    var_5 setmodel( "fullbody_hero_price_urban" );
    var_5.angles = var_0.angles;
    var_5 useanimtree( #animtree );

    if ( isdefined( var_3 ) )
        var_5 linkto( var_0, var_1, var_3, ( 0, 0, 0 ) );
    else
        var_5 linkto( var_0, var_1 );

    var_5 thread fake_driver_anim_loop( var_5 );
    var_5 thread clean_up_on_vehicle_death( var_5, var_0 );

    if ( istrue( var_2 ) )
        var_5 hide();

    return var_5;
}

clean_up_on_vehicle_death( var_0, var_1 )
{
    var_0 endon( "death" );
    var_1 waittill( "death" );
    var_0 delete();
}

fake_driver_anim_loop( var_0 )
{
    var_0 endon( "death" );
    var_1 = 17.5;
    wait( randomfloatrange( 0.5, 3.5 ) );

    for (;;)
    {
        var_0 scriptmodelplayanim( %mp_infil_lbravo_a_pilot );
        wait( var_1 );
    }
}

overwatch_screen_transition( var_0 )
{
    if ( !isdefined( var_0.overwatch_transition_screen ) )
    {
        var_0.overwatch_transition_screen = newclienthudelem( var_0 );
        var_0.overwatch_transition_screen.x = 0;
        var_0.overwatch_transition_screen.y = 0;
        var_0.overwatch_transition_screen setshader( "black", 640, 480 );
        var_0.overwatch_transition_screen.alignx = "left";
        var_0.overwatch_transition_screen.aligny = "top";
        var_0.overwatch_transition_screen.sort = 1;
        var_0.overwatch_transition_screen.horzalign = "fullscreen";
        var_0.overwatch_transition_screen.vertalign = "fullscreen";
        var_0.overwatch_transition_screen.foreground = 1;
    }

    var_0.overwatch_transition_screen.alpha = 1;
    var_0.overwatch_transition_screen fadeovertime( 0.25 );
    var_0.overwatch_transition_screen.alpha = 0;
}

set_up_ieds()
{
    level.unidentified_ieds = [];
    level.identified_ieds = [];

    if ( !ied_enabled() )
        return;

    var_0 = scripts\engine\utility::getstructarray( "IED_controller", "script_noteworthy" );

    foreach ( var_2 in var_0 )
    {
        spawn_ied_zone( var_2 );
        waitframe();
    }
}

spawn_ied_zone( var_0 )
{
    if ( !should_spawn_ied_zone( var_0 ) )
        return;

    var_0.identified = 0;
    var_1 = get_num_of_ied_to_spawn( var_0 );

    if ( isdefined( var_0.target ) )
        var_2 = scripts\engine\utility::getstructarray( var_0.target, "targetname" );
    else
        var_2 = [];

    if ( var_2.size > 0 )
    {
        for ( var_3 = 0; var_3 < 5; var_3++ )
            var_2 = scripts\engine\utility::array_randomize( var_2 );

        for ( var_4 = 0; var_4 < var_1; var_4++ )
            spawn_ied( var_2[var_4], var_0 );
    }
    else if ( var_2.size == 0 && var_1 > 0 )
    {
        if ( !isdefined( level.ied_unique_names ) )
            level.ied_unique_names = 0;

        var_5 = "IED_auto_group_" + level.ied_unique_names;
        var_0.target = var_5;
        level.ied_unique_names++;
        var_6 = 256;

        if ( isdefined( var_0.radius ) )
            var_6 = var_0.radius;

        if ( var_6 < 20 )
            var_6 = 20;

        var_7 = var_6 * 0.1;

        for ( var_3 = 0; var_3 < var_1; var_3++ )
        {
            var_8 = randomfloatrange( var_7, var_6 );
            var_9 = randomfloatrange( var_7, var_6 );

            if ( scripts\engine\utility::cointoss() )
                var_8 = var_8 * -1;

            if ( scripts\engine\utility::cointoss() )
                var_9 = var_9 * -1;

            var_10 = ( var_8, var_9, 0 );
            var_11 = spawnstruct();
            var_11.origin = var_0.origin + var_10;
            var_11.origin = scripts\engine\utility::drop_to_ground( var_11.origin );

            if ( isdefined( var_0.script_label ) && var_0.script_label != "" )
            {
                var_11.script_parameters = var_0.script_label;
                var_11.angles = ( 0, randomfloat( 360 ), 0 );
                var_11.origin = var_11.origin + ( 0, 0, 2 );
            }
            else
            {
                var_11.script_parameters = "bomb_homemade_jug_01";
                var_11.angles = ( randomfloat( 360 ), randomfloat( 360 ), randomfloat( 360 ) );
            }

            var_11.targetname = var_5;
            spawn_ied( var_11, var_0 );
        }
    }

    var_0 thread ied_controller_activation_monitor( var_0 );
}

should_spawn_ied_zone( var_0 )
{
    var_1 = 1;

    if ( getdvarfloat( "scr_ied_spawn_chance", 0 ) != 0 )
        var_1 = getdvarfloat( "scr_ied_spawn_chance" );

    return randomfloat( 1 ) < var_1;
}

get_num_of_ied_to_spawn( var_0 )
{
    if ( isdefined( var_0.script_parameters ) )
        return int( var_0.script_parameters );
    else
        return scripts\engine\utility::getstructarray( var_0.target, "targetname" ).size;
}

spawn_ied( var_0, var_1 )
{
    var_2 = spawn( "script_model", var_0.origin );
    var_2 setmodel( var_0.script_parameters );
    var_2.angles = scripts\engine\utility::ter_op( isdefined( var_0.angles ), var_0.angles, ( 0, 0, 0 ) );
    var_2.target = var_0.target;
    var_2.ied_controller = var_1;
    var_2.active = 0;
    var_3 = anglestoup( var_2.angles );
    var_2.center_point = var_2.origin + var_3 * 10;
    add_to_unidentified_ieds_list( var_2 );
    var_2 thread ied_damage_monitor( var_2 );
    var_2 thread ied_trigger_monitor( var_2 );
}

ied_damage_monitor( var_0 )
{
    var_0 endon( "IED_exploded" );
    var_0 setcandamage( 1 );
    var_0.health = 999999;

    for (;;)
    {
        var_0 waittill( "damage", var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13, var_14 );
        var_0.health = 999999;

        if ( isdefined( var_2 ) && isplayer( var_2 ) || isdefined( var_2.owner ) && isplayer( var_2.owner ) || isdefined( var_10 ) && var_10.basename == "overwatch_missile_cp" )
            ied_explodes( var_0 );
    }
}

ied_controller_activation_monitor( var_0 )
{
    for (;;)
    {
        if ( !isdefined( scripts\engine\utility::getclosest( var_0.origin, level.players, 1024 ) ) )
            deactivate_linked_ied_spawners( var_0 );
        else
            activate_linked_ied_spawners( var_0 );

        wait 0.25;
    }
}

deactivate_linked_ied_spawners( var_0 )
{
    var_1 = scripts\engine\utility::getstructarray( var_0.target, "targetname" );

    for ( var_2 = 0; var_2 < var_1.size; var_2++ )
    {
        if ( isdefined( var_1[var_2].ied_controller ) && istrue( var_1[var_2].active ) )
        {
            var_1[var_2] notify( "IED_trigger_monitor" );
            var_1[var_2].active = 0;
        }
    }
}

activate_linked_ied_spawners( var_0 )
{
    var_1 = scripts\engine\utility::getstructarray( var_0.target, "targetname" );

    for ( var_2 = 0; var_2 < var_1.size; var_2++ )
    {
        if ( isdefined( var_1[var_2].ied_controller ) && !istrue( var_1[var_2].active ) )
        {
            var_1[var_2].active = 1;
            var_1[var_2] thread ied_trigger_monitor( var_1[var_2] );
        }
    }
}

ied_trigger_monitor( var_0 )
{
    var_0 notify( "IED_trigger_monitor" );
    var_0 endon( "IED_trigger_monitor" );
    var_0 endon( "IED_exploded" );

    for (;;)
    {
        if ( ied_should_explode( var_0 ) )
            ied_explodes( var_0 );

        wait 0.1;
    }
}

ied_should_explode( var_0 )
{
    if ( ied_triggered_by_players( var_0 ) )
        return 1;

    if ( ied_triggered_by_vehicles( var_0 ) )
        return 1;

    return 0;
}

ied_explodes( var_0, var_1 )
{
    earthquake( 0.5, 1.2, var_0.origin, 400 );
    playfx( level._effect["IED_explosion"], var_0.origin );
    playsoundatpos( var_0.origin, "frag_grenade_expl_trans" );

    if ( isdefined( var_0.overwatch_target_marker_group_id ) )
        scripts\cp_mp\targetmarkergroups::targetmarkergroup_unmarkentity( var_0, var_0 getentitynumber(), var_0.overwatch_target_marker_group_id );

    remove_from_unidentified_ieds_list( var_0 );
    remove_from_identified_ieds_list( var_0 );
    remove_ied_marker_vfx( var_0 );
    mark_ied_controller_as_identified( var_0 );
    level thread delay_respawn_ied_zone( var_0 );
    damage_nearby_players( var_0, 100, 6400 );
    damage_nearby_map_vehicles( var_0, 9216 );
    damage_nearby_vehicles( var_0, 1600 );
    send_notify_from_ied_controller( var_0 );
    delete_ied_marker_vfx_to_non_overwatch( var_0 );
    do_level_specific_callback( var_0 );
    var_0 delete();
    var_0 notify( "IED_exploded" );
}

remove_from_target_marker_group( var_0 )
{
    if ( isdefined( var_0.target_marker_group_id_list ) )
    {
        foreach ( var_2 in var_0.target_marker_group_id_list )
            scripts\cp_mp\targetmarkergroups::targetmarkergroup_unmarkentity( var_0, var_2 );
    }
}

do_level_specific_callback( var_0 )
{
    if ( isdefined( level.ied_explosion_action_func ) )
        level thread [[ level.ied_explosion_action_func ]]( var_0 );
}

delete_ied_marker_vfx_to_non_overwatch( var_0 )
{
    if ( !isdefined( var_0.ied_marker_vfxs_non_overwatch ) )
        return;

    foreach ( var_2 in var_0.ied_marker_vfxs_non_overwatch )
    {
        if ( isdefined( var_2 ) )
            var_2 delete();
    }
}

send_notify_from_ied_controller( var_0 )
{
    var_1 = var_0.ied_controller;

    if ( isdefined( var_1.groupname ) )
        level notify( var_1.groupname );
}

set_ied_scanned_flag_from_ied_controller( var_0 )
{
    var_1 = var_0.ied_controller;

    if ( isdefined( var_1.script_side ) )
    {
        if ( !scripts\engine\utility::flag_exist( var_1.script_side ) )
            scripts\engine\utility::flag_init( var_1.script_side );

        scripts\engine\utility::flag_set( var_1.script_side );
    }
}

ied_triggered_by_vehicles( var_0 )
{
    for ( var_1 = 0; var_1 < level.vehicle_travel_array.size; var_1++ )
    {
        if ( isdefined( level.vehicle_travel_array[var_1].under_vehicle_trigger ) && var_0 istouching( level.vehicle_travel_array[var_1].under_vehicle_trigger ) )
            return 1;
    }

    if ( isdefined( level.ied_triggered_by_friendly_convoy_func ) )
        return [[ level.ied_triggered_by_friendly_convoy_func ]]( var_0 );

    return 0;
}

ied_triggered_by_players( var_0 )
{
    for ( var_1 = 0; var_1 < level.players.size; var_1++ )
    {
        if ( istrue( level.players[var_1].b_in_vehicle ) )
            continue;

        if ( isdefined( level.player_is_terrorist_func ) && [[ level.player_is_terrorist_func ]]( level.players[var_1] ) )
            continue;

        if ( distancesquared( level.players[var_1].origin, var_0.center_point ) < 1600 )
            return 1;
    }

    return 0;
}

add_to_vehicle_travel_array( var_0 )
{
    if ( !isdefined( level.vehicle_travel_array ) )
        level.vehicle_travel_array = [];

    level.vehicle_travel_array = scripts\engine\utility::array_add( level.vehicle_travel_array, var_0 );
}

damage_nearby_players( var_0, var_1, var_2 )
{
    foreach ( var_4 in level.players )
    {
        if ( distancesquared( var_4.origin, var_0.origin ) < var_2 )
            var_4 dodamage( var_1, var_0.origin );
    }
}

damage_nearby_map_vehicles( var_0, var_1 )
{
    if ( !isdefined( level.veh_map_ieddamage ) )
        level.veh_map_ieddamage = getcompleteweaponname( "at_mine_ap_mp" );

    var_0.team = "axis";

    foreach ( var_3 in level.technicals )
    {
        if ( !isent( var_3 ) )
            continue;

        if ( distancesquared( var_3.origin, var_0.origin ) < var_1 )
            var_3 dodamage( 800, var_0.origin, var_0, var_0, "MOD_SUICIDE", level.veh_map_ieddamage );
    }
}

damage_nearby_vehicles( var_0, var_1 )
{
    var_2 = get_nearby_vehicles( var_0, var_1 );

    foreach ( var_4 in var_2 )
    {
        var_5 = var_4.vehicle;
        var_6 = var_4.ied_triggering_tag;
        var_7 = get_repair_interaction_point_name( var_6 );
        var_8 = get_vehicle_interaction_point( var_5, var_7 );
        try_enable_repair_interaction( var_5, var_6, var_0.origin, var_7, var_8 );
    }
}

try_enable_repair_interaction( var_0, var_1, var_2, var_3, var_4 )
{
    if ( !scripts\engine\utility::array_contains( var_0.repair_interaction_list, var_4 ) )
    {
        level thread do_damage_to_all_players_as_passenger( var_2, var_0.players_as_passenger );
        enable_vehicle_interaction( var_0, var_3 );
        var_5 = var_0.ied_triggering_tag_to_repair_tag_mapping[var_1];
        var_4.repair_tag = var_5;
        add_to_vehicle_repair_interaction_list( var_0, var_4, var_5 );
        put_icon_on_vehicle_repair_point( var_0, var_4 );
        var_4 thread play_vfx_on_repair_part( var_0, var_5, get_fire_damage_vfx( var_5 ), var_4, anglestoforward( var_0.angles ) );
        var_0.disabled = 1;
        update_driver_interaction_hint( var_0 );
        level notify( "vehicle_needs_repair" );
        force_driver_out_of_vehicle( var_0 );
    }
}

update_driver_interaction_hint( var_0 )
{
    var_1 = get_vehicle_interaction_point( var_0, "driver" );
    var_1 sethintstring( launcherfired( var_0 ) );
}

launcherfired( var_0 )
{
    if ( istrue( var_0.disabled ) )
        return &"CP_VEHICLE_TRAVEL/REPAIR_FIRST";
    else if ( isdefined( level.lockpropkey ) )
        return [[ level.lockpropkey ]]( var_0 );
    else
        return &"CP_VEHICLE_TRAVEL/DRIVER";
}

get_fire_damage_vfx( var_0 )
{
    if ( issubstr( var_0, "left" ) )
        return "vehicle_tire_damage_smoke_left";
    else
        return "vehicle_tire_damage_smoke_right";
}

force_driver_out_of_vehicle( var_0 )
{
    var_1 = get_vehicle_interaction_point( var_0, "driver" );
    var_1 notify( "interaction_point_disabled" );
}

do_damage_to_all_players_as_passenger( var_0, var_1 )
{
    waitframe();

    foreach ( var_3 in var_1 )
    {
        if ( isdefined( var_3 ) && !scripts\cp\cp_laststand::player_in_laststand( var_3 ) )
            var_3 dodamage( 20, var_0 );
    }
}

get_repair_interaction_point_name( var_0 )
{
    switch ( var_0 )
    {
        case "tag_wheel_back_left":
            return "back_left_repair";
        case "tag_wheel_back_right":
            return "back_right_repair";
        case "tag_wheel_front_left":
            return "front_left_repair";
        case "tag_wheel_front_right":
            return "front_right_repair";
    }
}

add_to_vehicle_repair_interaction_list( var_0, var_1, var_2 )
{
    if ( !scripts\engine\utility::array_contains( var_0.repair_interaction_list, var_1 ) )
    {
        var_0.repair_interaction_list = scripts\engine\utility::array_add( var_0.repair_interaction_list, var_1 );

        if ( isdefined( var_2 ) )
            set_repair_omnvars( var_2, 1 );
    }
}

remove_from_vehicle_repair_interaction_list( var_0, var_1, var_2 )
{
    if ( scripts\engine\utility::array_contains( var_0.repair_interaction_list, var_1 ) )
    {
        var_0.repair_interaction_list = scripts\engine\utility::array_remove( var_0.repair_interaction_list, var_1 );

        if ( isdefined( var_2 ) )
            set_repair_omnvars( var_2, 0 );
    }
}

set_repair_omnvars( var_0, var_1 )
{
    var_2 = "cp_vehicle_damage_1";

    switch ( var_0 )
    {
        case "tag_wheel_center_front_left":
            var_2 = "cp_vehicle_damage_1";
            break;
        case "tag_wheel_center_front_right":
            var_2 = "cp_vehicle_damage_2";
            break;
        case "tag_wheel_center_back_left":
            var_2 = "cp_vehicle_damage_3";
            break;
        case "tag_wheel_center_back_right":
            var_2 = "cp_vehicle_damage_4";
            break;
        case "hood_repair":
            var_2 = "cp_vehicle_damage_5";
            break;
    }

    if ( istrue( var_1 ) )
        var_3 = 1;
    else
        var_3 = 0;

    foreach ( var_5 in level.players )
        var_5 setclientomnvar( var_2, var_3 );
}

all_repairs_are_done( var_0 )
{
    if ( var_0.repair_interaction_list.size == 0 )
        return 1;
    else if ( var_0.repair_interaction_list.size == 1 )
    {
        if ( !var_0.disabled_due_to_damage && var_0.repair_interaction_list[0] == var_0.vehicle_interactions["hood_repair"] )
            return 1;
    }

    return 0;
}

add_to_players_as_passenger_list( var_0, var_1 )
{
    var_1.b_in_vehicle = 1;

    if ( !scripts\engine\utility::array_contains( var_0.players_as_passenger, var_1 ) )
        var_0.players_as_passenger = scripts\engine\utility::array_add( var_0.players_as_passenger, var_1 );
}

remove_from_players_as_passenger_list( var_0, var_1 )
{
    var_1.b_in_vehicle = 0;

    if ( scripts\engine\utility::array_contains( var_0.players_as_passenger, var_1 ) )
        var_0.players_as_passenger = scripts\engine\utility::array_remove( var_0.players_as_passenger, var_1 );
}

add_to_players_cannot_see_vehicle_icon_list( var_0, var_1 )
{
    if ( !scripts\engine\utility::array_contains( var_0.players_cannot_see_vehicle_icon, var_1 ) )
        var_0.players_cannot_see_vehicle_icon = scripts\engine\utility::array_add( var_0.players_cannot_see_vehicle_icon, var_1 );
}

remove_from_players_cannot_see_vehicle_icon_list( var_0, var_1 )
{
    if ( scripts\engine\utility::array_contains( var_0.players_cannot_see_vehicle_icon, var_1 ) )
        var_0.players_cannot_see_vehicle_icon = scripts\engine\utility::array_remove( var_0.players_cannot_see_vehicle_icon, var_1 );
}

player_in_vehicle( var_0, var_1 )
{
    return scripts\engine\utility::array_contains( var_1.players_as_passenger, var_0 );
}

get_nearby_vehicles( var_0, var_1 )
{
    var_2 = [];

    foreach ( var_4 in level.vehicle_travel_array )
    {
        if ( isdefined( var_4.ied_triggering_tags ) )
        {
            foreach ( var_6 in var_4.ied_triggering_tags )
            {
                if ( distancesquared( var_4 gettagorigin( var_6 ), var_0.origin ) < var_1 && !scripts\engine\utility::array_contains( var_2, var_4 ) )
                {
                    var_7 = spawnstruct();
                    var_7.vehicle = var_4;
                    var_7.ied_triggering_tag = var_6;
                    var_2 = scripts\engine\utility::array_add( var_2, var_7 );
                }
            }
        }
    }

    return var_2;
}

play_vfx_on_repair_part( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = var_0 gettagorigin( var_1 );
    var_6 = spawn( "script_model", var_5 );
    var_6 setmodel( "tag_origin" );
    var_6.angles = vectortoangles( var_4 );
    var_6 linkto( var_0 );
    wait 0.1;
    playfxontag( level._effect[var_2], var_6, "tag_origin" );
    scripts\engine\utility::waittill_any_ents( var_0, "death", var_3, "interaction_point_disabled" );
    stopfxontag( level._effect[var_2], var_6, "tag_origin" );
    var_6 delete();
}

put_icon_on_vehicle_repair_point( var_0, var_1 )
{
    var_2 = scripts\cp\cp_objectives::requestworldid( "repair_icon", 21 );
    objective_setplayintro( var_2, 0 );
    objective_setbackground( var_2, 1 );
    objective_state( var_2, "invisible" );
    objective_icon( var_2, "cp_tac_hud_icon_repair" );
    objective_setlabel( var_2, "" );
    objective_onentity( var_2, var_1 );
    objective_addalltomask( var_2 );
    var_1.objective_id = var_2;
    var_1 thread repair_icon_clean_up_think( var_0, var_1, var_2 );
}

repair_icon_clean_up_think( var_0, var_1, var_2 )
{
    scripts\engine\utility::waittill_any_ents( var_0, "death", var_1, "interaction_point_disabled" );
    objective_delete( var_2 );
    scripts\cp\cp_objectives::freeworldid( "repair_icon" );
}

delay_respawn_ied_zone( var_0 )
{
    level endon( "game_ended" );
    var_1 = var_0.ied_controller;
    wait( randomfloatrange( 600, 900 ) );

    for (;;)
    {
        if ( can_respawn_ied_zone( var_1 ) )
        {
            spawn_ied_zone( var_1 );
            return;
        }

        wait 15;
    }
}

can_respawn_ied_zone( var_0 )
{
    foreach ( var_2 in level.players )
    {
        if ( distance2dsquared( var_2.origin, var_0.origin ) < 250000 )
            return 0;

        if ( isdefined( var_2.overwatch_camera_point ) && distance2dsquared( var_2.overwatch_camera_point.origin, var_0.origin ) < 1000000 )
            return 0;
    }

    return 1;
}

remove_ied_marker_vfx( var_0 )
{
    if ( isdefined( var_0.marker_vfx ) )
        var_0.marker_vfx delete();

    if ( isdefined( var_0.mine_drone_marker_vfx ) )
        var_0.mine_drone_marker_vfx delete();
}

show_ied_zone_to_player( var_0 )
{
    if ( !ied_enabled() )
        return;

    show_identified_ieds_to_overwatch( var_0 );
}

ied_enabled()
{
    return getdvarint( "scr_enable_ied", 0 ) != 0;
}

show_identified_ieds_to_overwatch( var_0 )
{
    if ( !isdefined( level.identified_ieds ) )
        return;

    level.identified_ieds = scripts\engine\utility::array_removeundefined( level.identified_ieds );

    if ( level.identified_ieds.size > 0 )
        var_0.overwatch_target_marker_group_id = scripts\cp_mp\targetmarkergroups::targetmarkergroup_on( "ieddronetarget", var_0, level.identified_ieds, var_0 );
}

show_identified_ied_to_overwatch( var_0, var_1 )
{
    if ( isdefined( var_0 ) && isdefined( var_0.origin ) )
    {
        if ( isdefined( var_1.overwatch_target_marker_group_id ) )
        {
            handle_identified_ied_to_overwatch_max( var_1 );
            scripts\cp_mp\targetmarkergroups::targetmarkergroup_markentity( var_0, var_1.overwatch_target_marker_group_id );
            update_target_marker_group_id_on_ied( var_0, var_1.overwatch_target_marker_group_id );
        }
        else
            var_1.overwatch_target_marker_group_id = scripts\cp_mp\targetmarkergroups::targetmarkergroup_on( "ieddronetarget", var_1, var_0, var_1 );

        var_0.overwatch_target_marker_group_id = var_1.overwatch_target_marker_group_id;
    }
}

update_target_marker_group_id_on_ied( var_0, var_1 )
{
    if ( !isdefined( var_0.target_marker_group_id_list ) )
        var_0.target_marker_group_id_list = [];

    if ( !scripts\engine\utility::array_contains( var_0.target_marker_group_id_list, var_1 ) )
        var_0.target_marker_group_id_list = scripts\engine\utility::array_add( var_0.target_marker_group_id_list, var_1 );
}

move_cursor_near_identified_ied( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "exit_overwatch" );
    var_0 endon( "disconnect" );
    var_1 = 100;
    var_2 = var_1 * var_1;
    var_3 = 1500;
    var_4 = var_3 * var_3;
    var_5 = var_0.overwatch_target_marker_group_id;
    var_6 = undefined;

    if ( isdefined( var_5 ) )
        var_6 = scripts\cp_mp\targetmarkergroups::gettargetmarkergroup( var_5 );

    while ( !isdefined( var_5 ) || !isdefined( var_6 ) )
    {
        var_5 = var_0.overwatch_target_marker_group_id;

        if ( isdefined( var_5 ) )
            var_6 = scripts\cp_mp\targetmarkergroups::gettargetmarkergroup( var_5 );

        wait 0.1;
    }

    for (;;)
    {
        var_7 = var_0.overwatch_camera_point.origin;
        wait 0.1;
        var_8 = var_0.overwatch_camera_point.origin;

        if ( distance2dsquared( var_7, var_8 ) > var_2 )
        {
            for ( var_9 = 0; var_9 < level.identified_ieds.size; var_9++ )
            {
                if ( distance2dsquared( level.identified_ieds[var_9].origin, var_8 ) < var_4 )
                {
                    var_10 = level.identified_ieds[var_9] getentitynumber();

                    if ( !isdefined( var_6.markedents[var_10] ) )
                    {
                        handle_identified_ied_to_overwatch_max( var_0 );
                        scripts\cp_mp\targetmarkergroups::targetmarkergroup_markentity( level.identified_ieds[var_9], var_5 );
                    }
                }
            }
        }
    }
}

handle_identified_ied_to_overwatch_max( var_0 )
{
    var_1 = var_0.overwatch_target_marker_group_id;

    if ( isdefined( var_1 ) )
    {
        var_2 = scripts\cp_mp\targetmarkergroups::gettargetmarkergroup( var_1 );

        if ( var_2.markedents.size > 18 )
        {
            var_3 = var_0.overwatch_camera_point.origin;
            hide_farthest_targetmarker_for_player( var_3, var_1, level.identified_ieds );
        }
    }
}

hide_farthest_targetmarker_for_player( var_0, var_1, var_2 )
{
    var_3 = scripts\cp_mp\targetmarkergroups::gettargetmarkergroup( var_1 );
    var_4 = sortbydistance( var_2, var_0 );
    var_5 = 1;

    for ( var_6 = var_4.size - 1; var_6 > 0; var_6-- )
    {
        if ( !var_5 )
            break;

        if ( isent( var_4[var_6] ) )
        {
            var_7 = var_4[var_6] getentitynumber();

            if ( isdefined( var_3.markedents[var_7] ) )
            {
                scripts\cp_mp\targetmarkergroups::targetmarkergroup_unmarkentity( var_4[var_6], var_1 );
                var_5 = 0;
            }
        }
    }
}

show_identified_ied_to_non_overwatch( var_0, var_1 )
{
    if ( isdefined( var_0 ) && isdefined( var_0.origin ) )
        var_0 hudoutlineenable( "outlinefill_depth_red" );
}

show_non_overwatch_ied_marker_vfx_to_player( var_0, var_1 )
{
    if ( !isdefined( var_1.ied_marker_vfxs_non_overwatch ) )
        var_1.ied_marker_vfxs_non_overwatch = [];

    var_2 = spawnfxforclient( level._effect["IED_marker_to_non_overwatch"], var_0.origin, var_1 );
    triggerfx( var_2 );
    var_1.ied_marker_vfxs_non_overwatch[var_1.ied_marker_vfxs_non_overwatch.size] = var_2;
    var_0.ied_marker_vfxs_non_overwatch[var_0.ied_marker_vfxs_non_overwatch.size] = var_2;
}

delete_non_overwatch_ied_marker_vfx_for_player( var_0 )
{
    if ( !isdefined( var_0.ied_marker_vfxs_non_overwatch ) )
        return;

    foreach ( var_2 in var_0.ied_marker_vfxs_non_overwatch )
    {
        if ( isdefined( var_2 ) )
            var_2 delete();
    }
}

show_all_non_overwatch_ied_marker_vfx_to_player( var_0 )
{
    foreach ( var_2 in level.identified_ieds )
        show_non_overwatch_ied_marker_vfx_to_player( var_2, var_0 );
}

hide_ied_zone_from_player( var_0 )
{
    if ( isdefined( var_0.overwatch_target_marker_group_id ) )
    {
        scripts\cp_mp\targetmarkergroups::targetmarkergroup_off( var_0.overwatch_target_marker_group_id );
        var_0.overwatch_target_marker_group_id = undefined;
    }
}

add_to_unidentified_ieds_list( var_0 )
{
    if ( !scripts\engine\utility::array_contains( level.unidentified_ieds, var_0 ) )
        level.unidentified_ieds = scripts\engine\utility::array_add( level.unidentified_ieds, var_0 );
}

remove_from_unidentified_ieds_list( var_0 )
{
    level.unidentified_ieds = scripts\engine\utility::array_remove( level.unidentified_ieds, var_0 );
}

add_to_identified_ieds_list( var_0 )
{
    if ( !scripts\engine\utility::array_contains( level.identified_ieds, var_0 ) )
        level.identified_ieds = scripts\engine\utility::array_add( level.identified_ieds, var_0 );
}

is_ied_identified( var_0 )
{
    return scripts\engine\utility::array_contains( level.identified_ieds, var_0 );
}

remove_from_identified_ieds_list( var_0 )
{
    level.identified_ieds = scripts\engine\utility::array_remove( level.identified_ieds, var_0 );
}

hostage_near_vehicle_monitor()
{
    level endon( "game_ended" );
    level endon( "stop_hostage_vehicle_monitor" );

    for (;;)
    {
        level waittill( "player_picked_up_hostage", var_0 );

        while ( !isdefined( level.vehicle_travel_array ) )
            wait 1;

        var_0 thread carried_hostage_near_vehicle_monitor( var_0 );
    }
}

carried_hostage_near_vehicle_monitor( var_0 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "hostage_dropped_by_me" );
    var_0 endon( "dropped_hostage" );

    for (;;)
    {
        var_1 = get_closest_vehicle_within_range( var_0, 200 );

        if ( isdefined( var_1 ) )
        {
            if ( has_hostage_on_board( var_1 ) )
            {
                var_0.hostage_drop_override_data = undefined;
                var_0.hostagecarried.overridehintstring = undefined;
            }
            else
            {
                var_2 = get_closest_vehicle_door_available( var_0, var_1 );
                var_3 = var_1 gettagorigin( "tag_origin" );
                var_4 = var_1.angles;
                var_5 = anglestoforward( var_4 );
                var_6 = anglestoright( var_4 );
                var_7 = anglestoup( var_4 );
                var_8 = var_3 + var_5 * -92 + var_6 * 0 + var_7 * 50;
                var_9 = distance( var_0.origin, var_8 ) < 100;

                if ( var_9 )
                {
                    var_0.hostage_drop_override_data = make_hostage_drop_override_data( var_1, var_2, var_0 );
                    var_0.hostagecarried.overridehintstring = "enter_vehicle_with_hostage";
                }
                else
                {
                    var_0.hostage_drop_override_data = undefined;
                    var_0.hostagecarried.overridehintstring = undefined;
                }
            }
        }
        else
            var_0.hostage_drop_override_data = undefined;

        waitframe();
    }
}

get_closest_vehicle_door_available( var_0, var_1 )
{
    var_2 = [ "driver", "passenger", "left_back_seat", "right_back_seat" ];
    var_3 = [];

    foreach ( var_5 in var_2 )
    {
        var_6 = get_vehicle_interaction_point( var_1, var_5 );

        if ( istrue( var_6.being_used ) )
            continue;

        var_3[var_3.size] = var_6;
    }

    if ( var_3.size > 0 )
        return scripts\engine\utility::getclosest( var_0.origin, var_3 );
    else
        return undefined;
}

get_closest_vehicle_within_range( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = 100;

    var_2 = scripts\engine\utility::getclosest( var_0.origin, level.vehicle_travel_array, var_1 );
    return var_2;
}

make_hostage_drop_override_data( var_0, var_1, var_2 )
{
    var_3 = 0;
    var_4 = 0;
    var_5 = -60;
    var_6 = anglestoforward( var_0.angles );
    var_7 = anglestoup( var_0.angles );
    var_8 = anglestoright( var_0.angles );
    var_9 = spawnstruct();
    var_9.vehicle = var_0;
    var_9.vehicle_door_interaction = var_1;
    var_9.player = var_2;
    var_9.position = var_0 gettagorigin( "tag_origin" ) + var_6 * var_5 + var_7 * var_3 + var_8 * var_4;
    var_9.waittime = 0.05;
    var_9.forcepos = 1;
    var_9.preventuse = 0;
    var_9.call_back_func = ::hostage_drop_call_back_func;
    return var_9;
}

hostage_drop_call_back_func( var_0, var_1 )
{
    var_2 = var_1.vehicle_door_interaction;
    var_3 = var_1.player;
    var_4 = var_1.vehicle;
    var_3 scripts\cp\utility::hint_prompt( "enter_vehicle_with_hostage", 0 );
    var_0 makeunusable();
    var_0.angles = ( var_0.angles[0], var_4.angles[1] + 180, var_0.angles[2] );
    var_0 linkto( var_4 );

    if ( isdefined( var_0.waypoint ) )
        objective_delete( var_0.waypoint );

    var_4.hostage = var_0;
    var_0.carried_by_vehicle = 1;
    var_0 notify( "placed_into_player_vehicle" );
    wait 2;
    enable_vehicle_interaction( var_4, "retrieve_hostage" );
}

has_hostage_on_board( var_0 )
{
    return isdefined( var_0.hostage );
}

tread_vfx_think( var_0 )
{
    if ( !tread_vfx_set_up( var_0 ) )
        return;

    foreach ( var_2 in var_0.tread_vfx_tags )
        var_0 thread play_tread_vfx_think( var_0, var_2 );
}

play_tread_vfx_think( var_0, var_1 )
{
    var_0 endon( "death" );

    for (;;)
    {
        var_2 = get_speed_type( var_0 );

        if ( should_play_tread_vfx( var_2 ) )
        {
            var_3 = get_tread_vfx( var_0, var_1, var_2 );

            if ( isdefined( var_3 ) )
                play_new_tread_vfx( var_0, var_1, var_3 );
        }

        wait 0.1;
    }
}

get_tread_vfx( var_0, var_1, var_2 )
{
    var_3 = var_0 gettagorigin( var_1 );
    var_4 = scripts\engine\trace::ray_trace( var_3 + ( 0, 0, 20 ), var_3 + ( 0, 0, -50 ), var_0, undefined, 1 );

    if ( var_4["fraction"] == 1 )
        return undefined;

    var_5 = spawnstruct();
    var_6 = filter_surface_type( var_4["surfacetype"], var_2, var_0 );
    var_5.surface_speed_index = var_6 + "_" + var_2;
    var_5.contact_pos = var_4["position"];
    return var_5;
}

filter_surface_type( var_0, var_1, var_2 )
{
    var_3 = var_0 + "_" + var_1;
    var_4 = var_2 scripts\common\vehicle_code::get_vehicle_classname();

    if ( isdefined( level.vehicle.templates.surface_effects[var_4][var_3] ) )
        return var_0;
    else
        return "default";
}

should_play_tread_vfx( var_0 )
{
    if ( var_0 == "stop" )
        return 0;

    return 1;
}

get_speed_type( var_0, var_1 )
{
    var_2 = var_0.slow_tread_vfx_trigger_speed;
    var_3 = var_0.fast_tread_vfx_trigger_speed;
    var_1 = var_0 vehicle_getspeed();

    if ( var_1 < var_2 )
        return "stop";
    else if ( var_1 >= var_2 && var_1 < var_3 )
        return "slow";
    else
        return "fast";
}

play_new_tread_vfx( var_0, var_1, var_2 )
{
    var_3 = var_0 vehicle_getvelocity();
    var_4 = var_0 scripts\common\vehicle_code::get_vehicle_classname();
    var_5 = var_0 gettagorigin( var_1 );
    playfx( level.vehicle.templates.surface_effects[var_4][var_2.surface_speed_index], var_2.contact_pos, var_3 );
}

tread_vfx_set_up( var_0 )
{
    var_1 = var_0 scripts\common\vehicle_code::get_vehicle_classname();
    return isdefined( level.vehicle.templates.surface_effects[var_1] );
}

load_fx()
{
    level._effect["IED_marker_to_non_overwatch"] = loadfx( "vfx/iw8_cp/level/cp_br_syrk/vfx_marker_reticle.vfx" );
    level._effect["IED_explosion"] = loadfx( "vfx/iw8_cp/level/cp_br_syrk/vfx_explo_ied.vfx" );
    level._effect["IED_radar_ping"] = loadfx( "vfx/iw8_cp/level/cp_br_syrk/vfx_drone_radar_ping.vfx" );
    level._effect["IED_false_positive"] = loadfx( "vfx/iw8_cp/level/cp_br_syrk/vfx_marker_false_pos.vfx" );
    level._effect["vehicle_tire_damage_smoke_left"] = loadfx( "vfx/iw8_cp/level/cp_br_syrk/vfx_damage_smoke_runner.vfx" );
    level._effect["vehicle_tire_damage_smoke_right"] = loadfx( "vfx/iw8_cp/level/cp_br_syrk/vfx_damage_smoke_runner_right_side.vfx" );
    level._effect["vehicle_hood_damage_smoke"] = loadfx( "vfx/iw8_cp/level/cp_br_syrk/vfx_damage_smoke_hood.vfx" );
    level._effect["reaper_clouds"] = loadfx( "vfx/iw8_mp/killstreak/vfx_cruise_predator_clouds.vfx" );
    level._effect["cruise_missile_pod_break"] = loadfx( "vfx/iw8_mp/killstreak/vfx_cruise_predator_explosion.vfx" );
    level._effect["interceptor_hit_air_exp"] = loadfx( "vfx/iw8/level/drone/vfx_drn_hellfire_explosion_air_01.vfx" );
    level._effect["reaper_missile_marker"] = loadfx( "vfx/iw8_cp/raid/vfx_reaper_missile_marker.vfx" );
}

init_vehicle_repair_anims()
{
    level.scr_animtree["veh_repair_plyr"] = #animtree;
    level.scr_anim["veh_repair_plyr"]["tire_repair_start"] = %sdr_cp_tirefix_start;
    level.scr_animname["veh_repair_plyr"]["tire_repair_start"] = "sdr_cp_tirefix_start";
    level.scr_eventanim["veh_repair_plyr"]["tire_repair_start"] = "repair_in";
    scripts\common\anim::addnotetrack_customfunction( "veh_repair_plyr", "sfx_scn_cp_repair_tire_enter_foley", ::_id_12745 );
    scripts\common\anim::addnotetrack_customfunction( "veh_repair_plyr", "sfx_scn_cp_repair_tire_air_start", ::_id_12743 );
    level.scr_anim["veh_repair_plyr"]["tire_repair_loop"] = %sdr_cp_tirefix_loop;
    level.scr_animname["veh_repair_plyr"]["tire_repair_loop"] = "sdr_cp_tirefix_loop";
    level.scr_eventanim["veh_repair_plyr"]["tire_repair_loop"] = "repair_lp";
    level.scr_anim["veh_repair_plyr"]["tire_repair_stop"] = %sdr_cp_tirefix_end;
    level.scr_animname["veh_repair_plyr"]["tire_repair_stop"] = "sdr_cp_tirefix_end";
    level.scr_eventanim["veh_repair_plyr"]["tire_repair_stop"] = "repair_out";
    scripts\common\anim::addnotetrack_customfunction( "veh_repair_plyr", "sfx_scn_cp_repair_tire_air_stop", ::_id_12744 );
    scripts\common\anim::addnotetrack_customfunction( "veh_repair_plyr", "sfx_scn_cp_repair_tire_exit_foley", ::_id_12746 );
    level.scr_anim["veh_repair_plyr"]["repair_grill_start"] = %cp_scripted_fixdecho_enter;
    level.scr_animname["veh_repair_plyr"]["repair_grill_start"] = "cp_scripted_fixdecho_enter";
    level.scr_eventanim["veh_repair_plyr"]["repair_grill_start"] = "decho_repair_hood_enter";
    scripts\common\anim::addnotetrack_customfunction( "veh_repair_plyr", "sfx_scn_cp_repair_engine_enter_foley", ::_id_11A40 );
    level.scr_anim["veh_repair_plyr"]["repair_grill_stop"] = %cp_scripted_fixdecho_exit;
    level.scr_animname["veh_repair_plyr"]["repair_grill_stop"] = "cp_scripted_fixdecho_exit";
    level.scr_eventanim["veh_repair_plyr"]["repair_grill_stop"] = "decho_repair_hood_exit";
    scripts\common\anim::addnotetrack_customfunction( "veh_repair_plyr", "sfx_scn_cp_repair_engine_exit_foley", ::_id_11A41 );
    level.scr_anim["veh_repair_plyr"]["repair_grill"] = %cp_scripted_fixdecho_idle;
    level.scr_animname["veh_repair_plyr"]["repair_grill"] = "cp_scripted_fixdecho_idle";
    level.scr_eventanim["veh_repair_plyr"]["repair_grill"] = "decho_repair_hood_idle";
    scripts\common\anim::addnotetrack_customfunction( "veh_repair_plyr", "sfx_scn_cp_repair_engine_fixing_long", ::_id_11A3E );
    scripts\common\anim::addnotetrack_customfunction( "veh_repair_plyr", "sfx_scn_cp_repair_engine_fixing_short", ::_id_11A3F );
}

_id_12745( var_0 )
{
    var_0 playsoundonmovingent( "scn_cp_repair_tire_enter_foley" );
}

_id_12743( var_0 )
{
    var_0 playsoundonmovingent( "scn_cp_repair_tire_air_start" );
}

_id_12744( var_0 )
{
    var_0 playsoundonmovingent( "scn_cp_repair_tire_air_stop" );
}

_id_12746( var_0 )
{
    var_0 playsoundonmovingent( "scn_cp_repair_tire_exit_foley" );
}

_id_11A40( var_0 )
{
    var_0 playsoundonmovingent( "scn_cp_repair_engine_enter_foley" );
}

_id_11A41( var_0 )
{
    var_0 playsoundonmovingent( "scn_cp_repair_engine_exit_foley" );
}

_id_11A3E( var_0 )
{
    var_0 playsoundonmovingent( "scn_cp_repair_engine_fixing_long" );
}

_id_11A3F( var_0 )
{
    var_0 playsoundonmovingent( "scn_cp_repair_engine_fixing_short" );
}

do_vehicle_repair_animation( var_0, var_1, var_2 )
{
    var_3 = var_1.origin;
    var_4 = var_1.angles;
    var_5 = get_tag_anim_offset( var_2, var_0 );
    var_6 = getgroundposition( var_5.animorg, 2, 100, 24 );
    var_7 = var_5.animang;
    var_8 = spawn( "script_model", var_6 );
    var_8.origin = var_6;
    var_8.angles = var_7;
    var_1 setorigin( var_6, 1 );
    var_1 setplayerangles( var_7 );
    var_1 setstance( "stand" );
    var_1 disableweapons();
    var_1 forceusehinton( &"CP_VEHICLE_TRAVEL/REPAIR" );
    spawn_can( var_1 );
    var_1 thread do_vehicle_repair_animation_actual( var_0, var_1, var_8 );
    var_9 = wait_for_repair_done( var_0, var_1, var_8 );
    remove_can( var_1 );
    waitframe();
    var_1 stoploopsound( "scn_cp_repair_tire_air_lp" );
    var_8 delete();
    scripts\cp\cp_destruction::remove_player_rig( var_1 );
    var_1 forceusehintoff();
    var_1 setplayerangles( var_4 );
    var_1 setstance( "stand" );
    var_1 cameradefault();
    var_1 enableweapons();
    var_1 setorigin( var_3, 1 );

    if ( istrue( var_9 ) )
        return 1;

    return 0;
}

do_vehicle_repair_animation_actual( var_0, var_1, var_2 )
{
    var_1 endon( "disconnect" );
    var_1 endon( "repair_failed" );
    var_3 = getanimlength( %sdr_cp_tirefix_start );
    var_4 = getanimlength( %sdr_cp_tirefix_loop );
    var_5 = getanimlength( %sdr_cp_tirefix_end );
    var_6 = var_3 - 0.1;
    var_7 = var_4 - 0.1;
    var_1 thread scripts\cp\cp_destruction::create_player_rig( var_1, "veh_repair_plyr" );
    var_1 cameraset( "camera_custom_orbit_2" );
    var_2 thread scripts\cp\cp_anim::anim_player_solo( var_1, var_1.player_rig, "tire_repair_start" );
    wait( var_6 );
    var_2 thread scripts\cp\cp_anim::anim_player_solo( var_1, var_1.player_rig, "tire_repair_loop" );
    var_1 playloopsound( "scn_cp_repair_tire_air_lp" );
    wait( var_7 / 10 );

    if ( !scripts\cp\cp_laststand::player_in_laststand( var_1 ) )
    {
        var_2 thread scripts\cp\cp_anim::anim_player_solo( var_1, var_1.player_rig, "tire_repair_stop" );
        wait 1;
        var_1.can hide();
        wait( var_5 - 1 );
    }
}

do_hood_repair_animation_actual( var_0, var_1, var_2 )
{
    var_1 endon( "disconnect" );
    var_1 endon( "repair_failed" );
    var_3 = getanimlength( %cp_scripted_fixdecho_enter );
    var_4 = getanimlength( %cp_scripted_fixdecho_idle );
    var_5 = getanimlength( %cp_scripted_fixdecho_exit );
    var_6 = var_3;
    var_7 = var_4;
    var_1 thread scripts\cp\cp_destruction::create_player_rig( var_1, "veh_repair_plyr" );
    var_1 cameraset( "camera_custom_orbit_1" );
    var_2 thread scripts\cp\cp_anim::anim_player_solo( var_1, var_1.player_rig, "repair_grill_start" );
    wait( var_6 );
    var_2 thread scripts\cp\cp_anim::anim_player_solo( var_1, var_1.player_rig, "repair_grill" );
    wait( var_7 );

    if ( !scripts\cp\cp_laststand::player_in_laststand( var_1 ) )
    {
        var_2 thread scripts\cp\cp_anim::anim_player_solo( var_1, var_1.player_rig, "repair_grill_stop" );
        wait( var_5 );
    }
}

do_hood_repair_animation( var_0, var_1, var_2, var_3 )
{
    var_4 = var_1.origin;
    var_5 = var_1.angles;
    var_6 = get_tag_anim_offset( var_2, var_0 );
    var_7 = var_0 gettagorigin( "tag_origin_animate" );
    var_8 = spawn( "script_model", var_7 );
    var_8.angles = var_0 gettagangles( "tag_origin_animate" );
    var_1 setstance( "stand" );
    var_1 disableweapons();
    var_1 forceusehinton( &"CP_VEHICLE_TRAVEL/REPAIR" );
    var_1 thread do_hood_repair_animation_actual( var_0, var_1, var_8 );
    var_9 = wait_for_hood_repair_done( var_0, var_1, var_8 );
    var_8 delete();
    scripts\cp\cp_destruction::remove_player_rig( var_1 );
    var_1 forceusehintoff();
    var_1 setplayerangles( var_5 );
    var_1 setstance( "stand" );
    var_1 cameradefault();
    var_1 enableweapons();
    var_1 setorigin( var_4, 0 );
    return var_9;
}

get_tag_anim_offset( var_0, var_1 )
{
    var_2 = var_1 gettagorigin( var_0 );
    var_3 = var_1 gettagangles( var_0 );
    var_4 = spawnstruct();
    var_4.origin = var_2;
    var_4.angles = var_3;
    var_4.animorg = var_2;
    var_4.animang = var_3;

    switch ( var_0 )
    {
        case "tag_wheel_center_back_left":
        case "tag_wheel_center_front_left":
            var_4.animang = var_3 + ( 0, 180, 0 );
            return var_4;
        case "tag_wheel_center_back_right":
        case "tag_wheel_center_front_right":
            return var_4;
        case "tag_grill":
            var_4.animang = var_3 + ( 0, 180, 0 );
            return var_4;
    }
}

spawn_can( var_0 )
{
    var_1 = spawn( "script_model", var_0 gettagorigin( "tag_accessory_left" ) );
    var_1 setmodel( "automotive_fix_a_can_01" );
    var_1.angles = var_0 gettagangles( "tag_accessory_left" );
    var_1 linkto( var_0, "tag_accessory_left" );
    var_0.can = var_1;
}

remove_can( var_0 )
{
    if ( isdefined( var_0.can ) )
        var_0.can delete();
}

wait_for_repair_done( var_0, var_1, var_2 )
{
    var_3 = getanimlength( %sdr_cp_tirefix_start );
    var_4 = getanimlength( %sdr_cp_tirefix_loop );
    var_5 = getanimlength( %sdr_cp_tirefix_end );
    var_6 = var_3 - 0.1;
    var_7 = var_4 / 10 - 0.25;
    var_8 = var_5 - 0.1;
    var_9 = var_6 + var_7 + var_8;
    var_10 = var_0 scripts\cp\utility::player_lua_progressbar( var_1, var_9 * 1000, undefined, 12 );

    if ( !istrue( var_10 ) )
        var_1 notify( "repair_failed" );

    var_1 stoploopsound( "scn_cp_repair_tire_air_lp" );
    return var_10;
}

wait_for_hood_repair_done( var_0, var_1, var_2 )
{
    var_3 = getanimlength( %cp_scripted_fixdecho_enter );
    var_4 = getanimlength( %cp_scripted_fixdecho_idle );
    var_5 = getanimlength( %cp_scripted_fixdecho_exit );
    var_6 = var_3;
    var_7 = var_4;
    var_8 = var_5;
    var_9 = var_6 + var_7 + var_8;
    var_10 = var_0 scripts\cp\utility::player_lua_progressbar( var_1, var_9 * 1000, undefined, 12 );

    if ( !istrue( var_10 ) )
        var_1 notify( "repair_failed" );

    return var_10;
}

do_hood_repair_anims( var_0, var_1, var_2 )
{
    var_1 endon( "repair_failed" );
    var_2 thread scripts\cp\cp_anim::anim_player_solo( var_1, var_1.player_rig, "repair_grill" );
}

fire_cruise_missile_toward( var_0, var_1 )
{
    var_2 = make_cruise_missile_target_ent( var_0, var_1 );
    var_3 = make_cruise_missile( var_0, var_2 );
    var_3 put_objective_icon_on_cruise_missile( var_3 );
    var_3 add_to_cruise_missile_list( var_3 );
    var_2 thread keep_following_target_while_remain_height( var_2, var_1, var_3 );
    var_2 thread cruise_missile_target_ent_clean_up( var_2, var_3 );
    var_3 thread cruise_missile_reach_target_ent_monitor( var_3, var_2, var_1 );
    var_3 thread death_monitor( var_3, var_3.cruise_missile_objective_id, var_3 getentitynumber() );
}

cruise_missile_reach_target_ent_monitor( var_0, var_1, var_2 )
{
    var_2 endon( "death" );
    var_0 endon( "death" );

    for (;;)
    {
        if ( distancesquared( var_0.origin, var_1.origin ) < 250000 )
            break;

        var_3 = anglestoforward( var_0.angles );
        var_4 = vectornormalize( var_1.origin - var_0.origin );

        if ( vectordot( var_3, var_4 ) < 0 )
            break;

        waitframe();
    }

    level thread fire_warhead_toward_target( var_0, var_2 );
}

fire_warhead_toward_target( var_0, var_1 )
{
    var_1 endon( "death" );
    var_0 setscriptablepartstate( "wing_trails", "off" );
    var_0 setscriptablepartstate( "main_thruster", "off", 0 );
    playfxontag( scripts\engine\utility::getfx( "cruise_missile_pod_break" ), var_0, "tag_missile" );
    var_0 notify( "stop_cruise_missile_death_monitor" );
    var_2 = var_0.cruise_missile_objective_id;
    var_3 = var_0 getentitynumber();
    waitframe();
    var_4 = make_cruise_missile_warhead_target_ent( var_0 );
    var_5 = make_cruise_missile_warhead( var_0, var_4 );
    var_5.cruise_missile_objective_id = var_2;
    put_objective_icon_on_warhead( var_5, var_2 );
    level.cruise_missiles = scripts\engine\utility::array_remove( level.cruise_missiles, var_0 );

    if ( isdefined( level.locked_on_cruise_missiles ) )
    {
        level.locked_on_cruise_missiles = scripts\engine\utility::array_remove( level.locked_on_cruise_missiles, var_0 );
        update_missile_lock_hud_for_missile_defense_player();
    }

    if ( isdefined( var_0.interceptor_missile ) )
        set_interceptor_missile_target( var_0.interceptor_missile, var_5 );

    var_0 delete();
    var_5 thread delay_target_cruise_missile_target( var_5, var_4, var_1 );
    var_5 thread death_monitor( var_5, var_2, var_3 );
}

update_missile_lock_hud_for_missile_defense_player()
{
    var_0 = 0;

    foreach ( var_2 in level.locked_on_cruise_missiles )
    {
        if ( !isdefined( var_2 ) )
            continue;

        if ( istrue( var_2.being_intercepted ) )
            continue;

        var_0++;
    }

    if ( var_0 == 0 )
    {
        var_4 = get_missile_defense_player();

        if ( isdefined( var_4 ) )
            var_4 setclientomnvar( "ui_missile_lock", 0 );
    }
}

get_missile_defense_player()
{
    foreach ( var_1 in level.players )
    {
        if ( isdefined( var_1.current_vehicle_seat ) && ( var_1.current_vehicle_seat == "missile_defense_right" || var_1.current_vehicle_seat == "missile_defense_left" ) )
            return var_1;
    }

    return undefined;
}

set_interceptor_missile_target( var_0, var_1 )
{
    var_0.target_anchor.origin = var_1.origin;
    var_0.target_anchor linkto( var_1 );
    var_0.target_entity = var_1;
}

put_objective_icon_on_warhead( var_0, var_1 )
{
    objective_onentity( var_1, var_0 );
    objective_setzoffset( var_1, 0 );
}

delay_target_cruise_missile_target( var_0, var_1, var_2 )
{
    var_0 endon( "death" );
    wait 0.25;

    if ( isdefined( var_2 ) )
        var_0 missile_settargetent( var_2 );

    var_1 delete();
}

add_to_cruise_missile_list( var_0 )
{
    if ( !isdefined( level.cruise_missiles ) )
        level.cruise_missiles = [];

    level.cruise_missiles[level.cruise_missiles.size] = var_0;
}

death_monitor( var_0, var_1, var_2 )
{
    var_0 endon( "stop_cruise_missile_death_monitor" );
    var_0 waittill( "death" );
    level.cruise_missiles = scripts\engine\utility::array_remove( level.cruise_missiles, var_0 );

    if ( isdefined( level.locked_on_cruise_missiles ) )
    {
        level.locked_on_cruise_missiles = scripts\engine\utility::array_remove( level.locked_on_cruise_missiles, var_0 );
        update_missile_lock_hud_for_missile_defense_player();
    }

    scripts\cp\cp_objectives::freeworldid( "cruise_missile_entity_number_" + var_2 );
    objective_delete( var_1 );
}

put_objective_icon_on_cruise_missile( var_0 )
{
    var_1 = scripts\cp\cp_objectives::requestworldid( "cruise_missile_entity_number_" + var_0 getentitynumber(), 22 );
    objective_state( var_1, "invisible" );
    objective_icon( var_1, "hud_callsign_bg_rd" );
    objective_onentity( var_1, var_0 );
    objective_setzoffset( var_1, 0 );
    objective_removeallfrommask( var_1 );
    objective_setplayintro( var_1, 0 );
    objective_setplayoutro( var_1, 0 );
    objective_setbackground( var_1, 1 );
    objective_setshowdistance( var_1, 1 );
    objective_setshowprogress( var_1, 1 );
    objective_setfadedisabled( var_1, 1 );
    var_0.cruise_missile_objective_id = var_1;
    make_visible_to_missile_defense_player( var_1 );
}

make_visible_to_missile_defense_player( var_0 )
{
    foreach ( var_2 in level.players )
    {
        if ( isdefined( var_2.current_vehicle_seat ) && ( var_2.current_vehicle_seat == "missile_defense_right" || var_2.current_vehicle_seat == "missile_defense_left" ) )
            objective_addclienttomask( var_0, var_2 );
    }
}

cruise_missile_target_ent_clean_up( var_0, var_1 )
{
    var_0 endon( "death" );
    var_1 waittill( "death" );
    var_0 delete();
}

keep_following_target_while_remain_height( var_0, var_1, var_2 )
{
    var_1 endon( "death" );
    var_2 endon( "death" );
    var_3 = var_0.origin[2];

    for (;;)
    {
        var_4 = var_2.origin - var_1.origin;
        var_4 = var_4 * ( 1, 1, 0 );
        var_4 = vectornormalize( var_4 );
        var_5 = var_1.origin + var_4 * 7500;
        var_5 = ( var_5[0], var_5[1], var_3 );
        var_0.origin = var_5;
        waitframe();
    }
}

make_cruise_missile( var_0, var_1 )
{
    var_2 = magicbullet( "cruise_missile_cp", var_0, var_1.origin );
    var_2 missile_settargetent( var_1 );
    var_2 missile_setflightmodedirect();
    var_2 setscriptablepartstate( "main_thruster", "on", 0 );
    var_2 setscriptablepartstate( "wing_trails", "on" );
    var_2.lock_on_progress = 0;
    return var_2;
}

make_cruise_missile_warhead( var_0, var_1 )
{
    var_2 = magicbullet( "cruise_missile_warhead_cp", var_0 gettagorigin( "tag_missile" ), var_1.origin );
    var_2 missile_settargetent( var_1 );
    var_2 missile_setflightmodedirect();
    var_2 setscriptablepartstate( "sub_thruster", "on", 0 );
    var_2.lock_on_progress = 0;
    level.cruise_missiles = scripts\engine\utility::array_add( level.cruise_missiles, var_2 );

    if ( isdefined( level.locked_on_cruise_missiles ) && scripts\engine\utility::array_contains( level.locked_on_cruise_missiles, var_0 ) )
        level.locked_on_cruise_missiles = scripts\engine\utility::array_add( level.locked_on_cruise_missiles, var_2 );

    return var_2;
}

make_cruise_missile_target_ent( var_0, var_1 )
{
    var_2 = var_0[2];
    var_3 = var_1.origin - var_0;
    var_3 = var_3 * ( 1, 1, 0 );
    var_3 = vectornormalize( var_3 );
    var_4 = var_1.origin + var_3 * 7500;
    var_4 = ( var_4[0], var_4[1], var_2 );
    var_5 = spawn( "script_model", var_4 );
    var_5 setmodel( "tag_origin" );
    return var_5;
}

make_cruise_missile_warhead_target_ent( var_0 )
{
    var_1 = anglestoforward( var_0.angles );
    var_2 = var_0.origin + var_1 * 10000;
    var_3 = spawn( "script_model", var_2 );
    var_3 setmodel( "tag_origin" );
    return var_3;
}

make_reaper_drone( var_0 )
{
    var_1 = anglestoright( var_0.angles );
    var_2 = var_0.origin + var_1 * 10000 + ( 0, 0, 10000 );
    var_3 = spawn( "script_model", var_2 );
    var_3 setmodel( "veh8_mil_air_mquebec9" );
    var_3.angles = var_0.angles;
    var_3 thread clean_up_on_vehicle_death( var_3, var_0 );
    var_3 thread keep_circling_around_vehicle( var_0, var_3 );
    var_3.missile_defense_camera_anchor = create_missile_defense_camera_anchor( var_0, var_3 );
    var_3.scanning_camera_anchor = create_scanning_camera_anchor( var_0, var_3 );
    var_0.reaper = var_3;
    return var_3;
}

keep_circling_around_vehicle( var_0, var_1 )
{
    var_2 = spawn( "script_model", var_0.origin );
    var_2 setmodel( "tag_player" );
    var_1 linkto( var_2, "tag_player" );
    var_2 thread keep_rotating( var_2 );
    var_2 thread keep_following_vehicle( var_2, var_0 );
    var_2 thread clean_up_on_vehicle_death( var_2, var_0 );
}

keep_rotating( var_0 )
{
    var_0 endon( "death" );

    for (;;)
    {
        var_0 rotateyaw( 360, 180 );
        wait 180;
    }
}

keep_following_vehicle( var_0, var_1 )
{
    var_0 endon( "death" );
    wait 2;

    for (;;)
    {
        var_2 = ( var_1.origin[0], var_1.origin[1], var_0.origin[2] );
        var_3 = distance2d( var_0.origin, var_2 );
        var_4 = var_3 / get_rotation_anchor_move_speed( var_3 );

        if ( var_3 <= 10 )
        {
            waitframe();
            continue;
        }

        if ( var_3 <= 100 )
        {
            var_0 moveto( var_2, var_4, 0, var_4 );
            waitframe();
            continue;
        }

        var_0 moveto( var_2, var_4 );
        var_0 scripts\engine\utility::_id_12E53( var_4, "movedone" );
    }
}

get_rotation_anchor_move_speed( var_0 )
{
    if ( var_0 <= 150 )
        return 500;
    else
        return 1000;
}

create_missile_defense_camera_anchor( var_0, var_1 )
{
    var_2 = anglestoforward( var_1.angles );
    var_3 = spawn( "script_model", var_1.origin + var_2 * 170 + ( 0, 0, -140 ) );
    var_3 setmodel( "tag_player" );
    var_3.angles = vectortoangles( ( 0, 0, -1 ) );
    var_3 linkto( var_1 );
    var_3 thread clean_up_on_vehicle_death( var_3, var_0 );
    return var_3;
}

create_scanning_camera_anchor( var_0, var_1 )
{
    var_2 = anglestoforward( var_1.angles );
    var_3 = spawn( "script_model", var_1.origin + var_2 * 0 + ( 0, 0, -140 ) );
    var_3 setmodel( "tag_player" );
    var_3.angles = vectortoangles( var_0.origin - var_3.origin );
    var_3 linkto( var_1 );
    var_3 thread clean_up_on_vehicle_death( var_3, var_0 );
    var_3 thread keep_focus_on_vehicle( var_3, var_0 );
    return var_3;
}

keep_focus_on_vehicle( var_0, var_1 )
{
    var_0 endon( "death" );
    var_1 endon( "death" );

    for (;;)
    {
        var_0.angles = vectortoangles( var_1.origin - var_0.origin );
        waitframe();
    }
}

get_humvee_info( var_0 )
{
    var_1 = spawnstruct();
    var_1.model = "veh8_civ_lnd_decho_rebel_2";
    var_1.vehicle_gdt = "decho_physics_cp";
    var_1.add_additional_parts_func = ::humvee_add_additional_parts_func;
    var_1.ied_triggering_tags = [ "tag_wheel_back_left", "tag_wheel_front_left", "tag_wheel_back_right", "tag_wheel_front_right" ];
    var_1.fake_health = 750;
    var_1.show_damage_state_health_ratio = 0.3;
    var_1.classname_mp = "cp_decho_rebel";
    var_1.slow_tread_vfx_trigger_speed = 1;
    var_1.fast_tread_vfx_trigger_speed = 20;
    var_1.tread_vfx_tags = [ "tag_wheel_back_right", "tag_wheel_back_left", "tag_wheel_front_right", "tag_wheel_front_left" ];
    var_1.waitforanyplayernearpoint = [ "iw8_me_riotshield_mp" ];
    var_2 = [];
    var_2["tag_wheel_back_left"] = "tag_wheel_center_back_left";
    var_2["tag_wheel_front_left"] = "tag_wheel_center_front_left";
    var_2["tag_wheel_back_right"] = "tag_wheel_center_back_right";
    var_2["tag_wheel_front_right"] = "tag_wheel_center_front_right";
    var_1.ied_triggering_tag_to_repair_tag_mapping = var_2;
    var_3 = [];
    var_3 = assign_vehicle_interaction( "driver", 14, -38, 44.3, var_3 );
    var_3 = assign_vehicle_interaction( "passenger", 14, 38, 44.3, var_3 );
    var_3 = assign_vehicle_interaction( "left_back_seat", -22.5, -38, 44.3, var_3 );
    var_3 = assign_vehicle_interaction( "right_back_seat", -22.5, 38, 44.3, var_3 );
    var_3 = assign_vehicle_interaction( "gunner", -6, 0, 83, var_3 );
    var_3 = assign_vehicle_interaction( "overwatch_right", -5, 19, 68, var_3 );
    var_3 = assign_vehicle_interaction( "overwatch_left", -5, -19, 68, var_3 );
    var_3 = assign_vehicle_interaction( "back_left_repair", -48.8, -39, 19.9, var_3 );
    var_3 = assign_vehicle_interaction( "back_right_repair", -48.8, 39, 17.5, var_3 );
    var_3 = assign_vehicle_interaction( "front_left_repair", 74, -39, 17, var_3 );
    var_3 = assign_vehicle_interaction( "front_right_repair", 74, 39, 17.5, var_3 );
    var_3 = assign_vehicle_interaction( "hood_repair", 105, 0, 42.5, var_3 );
    var_3 = assign_vehicle_interaction( "front_refill_ammo", 32, 19, 52, var_3 );
    var_3 = assign_vehicle_interaction( "back_right_refill_ammo", -5, 19, 55, var_3 );
    var_3 = assign_vehicle_interaction( "back_left_refill_ammo", -5, -19, 55, var_3 );
    var_3 = assign_vehicle_interaction( "retrieve_hostage", -92, 0, 50, var_3 );
    var_1.interaction_setups_array = var_3;
    return var_1;
}

humvee_add_additional_parts_func( var_0 )
{
    add_gunner_turret( var_0 );
}

add_gunner_turret( var_0 )
{
    var_1 = spawnturret( "misc_turret", var_0 gettagorigin( "tag_turret" ), "tur_gun_decho_cp", 0 );
    var_1.angles = var_0.angles;
    var_1.team = "allies";
    var_1 linkto( var_0 );
    var_1 setmodel( "veh8_civ_lnd_decho_rebel_mg_no_hatch" );
    var_1 setmode( "sentry_offline" );
    var_1 setsentryowner( undefined );
    var_1 makeunusable();
    var_1 setdefaultdroppitch( 0 );
    var_1 setturretmodechangewait( 1 );
    var_0.gunner_turret = var_1;
    var_0.gunner_weapon = "tur_gun_decho_cp";
    var_1 thread clean_up_on_vehicle_death( var_1, var_0 );
}

get_friendly_hvi_vehicle_info( var_0 )
{
    var_1 = spawnstruct();
    var_1.model = "veh8_civ_lnd_decho_rebel_2";
    var_1.vehicle_gdt = "decho_physics_cp";
    var_1.add_additional_parts_func = ::friendly_hvi_vehicle_add_additional_parts_func;
    var_1.ied_triggering_tags = [ "tag_wheel_back_left", "tag_wheel_front_left", "tag_wheel_back_right", "tag_wheel_front_right" ];
    var_1.fake_health = 5000;
    var_1.show_damage_state_health_ratio = 0.3;
    var_1.classname_mp = "cp_decho_rebel";
    var_1.slow_tread_vfx_trigger_speed = 1;
    var_1.fast_tread_vfx_trigger_speed = 20;
    var_1.tread_vfx_tags = [ "tag_wheel_back_right", "tag_wheel_back_left", "tag_wheel_front_right", "tag_wheel_front_left" ];
    var_1.waitforanyplayernearpoint = [ "iw8_me_riotshield_mp" ];
    var_2 = [];
    var_2["tag_wheel_back_left"] = "tag_wheel_center_back_left";
    var_2["tag_wheel_front_left"] = "tag_wheel_center_front_left";
    var_2["tag_wheel_back_right"] = "tag_wheel_center_back_right";
    var_2["tag_wheel_front_right"] = "tag_wheel_center_front_right";
    var_1.ied_triggering_tag_to_repair_tag_mapping = var_2;
    var_3 = [];
    var_3 = assign_vehicle_interaction( "driver", 14, -38, 44.3, var_3 );
    var_3 = assign_vehicle_interaction( "passenger", 14, 38, 44.3, var_3 );
    var_3 = assign_vehicle_interaction( "left_back_seat", -22.5, -38, 44.3, var_3 );
    var_3 = assign_vehicle_interaction( "right_back_seat", -22.5, 38, 44.3, var_3 );
    var_3 = assign_vehicle_interaction( "gunner", -6, 0, 83, var_3 );
    var_3 = assign_vehicle_interaction( "back_left_repair", -48.8, -39, 19.9, var_3 );
    var_3 = assign_vehicle_interaction( "back_right_repair", -48.8, 39, 17.5, var_3 );
    var_3 = assign_vehicle_interaction( "front_left_repair", 74, -39, 17, var_3 );
    var_3 = assign_vehicle_interaction( "front_right_repair", 74, 39, 17.5, var_3 );
    var_3 = assign_vehicle_interaction( "hood_repair", 105, 0, 42.5, var_3 );
    var_3 = assign_vehicle_interaction( "back_right_refill_ammo", -5, 19, 55, var_3 );
    var_1.interaction_setups_array = var_3;
    return var_1;
}

friendly_hvi_vehicle_add_additional_parts_func( var_0 )
{
    add_gunner_turret( var_0 );
}

add_grenadier_anchor( var_0 )
{
    var_1 = -15;
    var_2 = 0;
    var_3 = 50;
    var_4 = var_0.angles;
    var_5 = anglestoforward( var_4 );
    var_6 = anglestoright( var_4 );
    var_7 = anglestoup( var_4 );
    var_8 = var_0 gettagorigin( "tag_origin" );
    var_9 = var_8 + var_5 * var_1 + var_6 * var_2 + var_7 * var_3;
    var_10 = spawn( "script_model", var_9 );
    var_10 setmodel( "tag_origin" );
    var_10 linkto( var_0 );
    var_10 thread clean_up_on_vehicle_death( var_10, var_0 );
    var_0.grenadier_anchor = var_10;
    var_0.grenadier_weapon = "iw8_la_mike32_mp";
}

remove_from_overwatch_target_group( var_0 )
{
    if ( isdefined( var_0.target_marker_group_id ) )
        scripts\cp_mp\targetmarkergroups::targetmarkergroup_unmarkentity( var_0, var_0 getentitynumber(), var_0.target_marker_group_id );
}

debug_setup_warp_jeep_to_players()
{

}

debug_warp_jeep_to_player( var_0 )
{
    var_0 endon( "disconnect" );

    for (;;)
    {
        var_0 waittill( "warpjeeptome" );

        if ( self vehicle_isphysveh() )
        {
            var_1 = getclosestpointonnavmesh( var_0.origin );
            var_1 = var_1 + ( 0, 0, 50 );
            var_2 = ( 0, self.angles[1], 0 );
            self vehicle_teleport( var_1, var_2 );
        }

        wait 0.05;
    }
}

_id_12CF2( var_0 )
{
    var_0 endon( "death" );
    level endon( "game_ended" );

    for (;;)
    {
        level waittill( "player_spawned", var_1 );
        update_driver_interaction_hint( var_0 );
    }
}

_id_12CF3( var_0 )
{
    var_0 endon( "death" );
    level endon( "game_ended" );

    for (;;)
    {
        level waittill( "player_disconnect" );
        update_driver_interaction_hint( var_0 );
    }
}
