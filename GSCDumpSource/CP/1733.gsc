// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

registerentforoob( var_0, var_1 )
{
    var_0.oobref = var_1;
}

deregisterentforoob( var_0 )
{
    var_0.oobref = undefined;
}

registeroobentercallback( var_0, var_1 )
{
    var_2 = getoobdata();
    var_2.entercallbacks[var_0] = var_1;
}

registeroobexitcallback( var_0, var_1 )
{
    var_2 = getoobdata();
    var_2.exitcallbacks[var_0] = var_1;
}

registerooboutoftimecallback( var_0, var_1 )
{
    var_2 = getoobdata();
    var_2.outoftimecallbacks[var_0] = var_1;
}

registeroobclearcallback( var_0, var_1 )
{
    var_2 = getoobdata();
    var_2.clearcallbacks[var_0] = var_1;
}

isoob( var_0, var_1 )
{
    if ( isoobimmune( var_0 ) )
        return 0;

    if ( istrue( var_1 ) && isoobimmune( var_0 ) )
        return 0;

    return isdefined( var_0.oob ) && var_0.oob > 0;
}

enableoob( var_0 )
{
    if ( !isdefined( var_0.oob ) )
        var_0.oob = 0;

    var_0.oob++;

    if ( var_0.oob == 1 )
    {
        if ( !isdefined( var_0.oobimmunity ) || var_0.oobimmunity <= 0 )
            onenteroob( var_0 );
    }
}

disableoob( var_0 )
{
    var_0.oob--;

    if ( var_0.oob == 0 )
    {
        var_0.oob = undefined;

        if ( !isdefined( var_0.oobimmunity ) || var_0.oobimmunity <= 0 )
            onexitoob( var_0, 0 );
    }
}

isoobimmune( var_0 )
{
    return isdefined( var_0.oobimmunity ) && var_0.oobimmunity > 0;
}

enableoobimmunity( var_0 )
{
    if ( !isdefined( var_0.oobimmunity ) )
        var_0.oobimmunity = 0;

    var_0.oobimmunity++;

    if ( var_0.oobimmunity == 1 )
    {
        if ( isdefined( var_0.oob ) && var_0.oob > 0 )
            onexitoob( var_0, 0 );
    }
}

disableoobimmunity( var_0 )
{
    var_0.oobimmunity--;

    if ( var_0.oobimmunity == 0 )
    {
        var_0.oobimmunity = undefined;

        if ( isdefined( var_0.oob ) && var_0.oob > 0 )
            onenteroob( var_0 );
    }
}

clearoob( var_0, var_1 )
{
    var_0 notify( "clear_oob" );

    if ( isoob( var_0, 1 ) )
        onexitoob( var_0, var_1, 1 );

    var_2 = undefined;

    if ( isplayer( var_0 ) )
        var_2 = ::playerclearcallback;
    else if ( isdefined( var_0.oobref ) )
    {
        var_3 = getoobdata();
        var_2 = var_3.clearcallbacks[var_0.oobref];
    }

    if ( isdefined( var_2 ) )
        var_0 [[ var_2 ]]();

    var_0.oobref = undefined;
    var_0.oob = undefined;
    var_0.oobimmunity = undefined;
    var_0.oobtimeleft = undefined;
    var_0.oobendtime = undefined;
    var_0.oobtriggertype = undefined;

    if ( isdefined( var_0.oobtriggers ) )
    {
        foreach ( var_5 in var_0.oobtriggers )
            var_5.entstouching[var_0 getentitynumber()] = undefined;

        var_0.oobtriggers = undefined;
    }

    if ( isdefined( var_0.oobsupressiontriggers ) )
    {
        foreach ( var_5 in var_0.oobsupressiontriggers )
            var_5.entstouching[var_0 getentitynumber()] = undefined;

        var_0.oobsupressiontriggers = undefined;
    }
}

initoob()
{
    if ( !isdefined( level.outofboundstriggers ) )
        level.outofboundstriggers = [];

    var_0 = getentarray( "OutOfBounds", "targetname" );

    foreach ( var_2 in var_0 )
        level.outofboundstriggers[level.outofboundstriggers.size] = var_2;

    thread watchoobtriggers();
}

ammo_boxes( var_0 )
{
    if ( isdefined( level.outofboundstriggers ) )
        level.outofboundstriggers[level.outofboundstriggers.size] = var_0;
    else
        level.outofboundstriggers[0] = var_0;

    thread watchoobtrigger( var_0 );
}

onenteroob( var_0 )
{
    var_1 = undefined;
    var_2 = getlastoobtrigger( var_0 );
    var_3 = gettriggertype( var_0, var_2 );

    if ( isplayer( var_0 ) )
        var_1 = ::playerentercallback;
    else if ( isdefined( var_0.oobref ) )
    {
        var_4 = getoobdata();
        var_1 = var_4.entercallbacks[var_0.oobref];
    }

    var_0 notify( "oob_cooldown_end" );

    if ( isdefined( var_0.oobtimeleft ) )
    {
        var_5 = var_0.oobtimeleft / 1000;
        var_0.oobendtime = int( gettime() + var_0.oobtimeleft );
        var_0.oobtimeleft = undefined;
        thread watchooboutoftime( var_0, var_5 );
    }
    else
    {
        var_0.oobtimeleft = undefined;
        var_0.oobtriggertype = var_3;
        var_5 = getoutofboundstime( var_3 );
        var_0.oobendtime = int( gettime() + var_5 * 1000 );
        thread watchooboutoftime( var_0, var_5 );
    }

    if ( isdefined( var_1 ) )
        var_0 thread [[ var_1 ]]( "exit_oob", "clear_oob" );
}

onexitoob( var_0, var_1, var_2 )
{
    var_0 notify( "exit_oob" );
    var_3 = undefined;

    if ( isplayer( var_0 ) )
        var_3 = ::playerexitcallback;
    else if ( isdefined( var_0.oobref ) )
    {
        var_4 = getoobdata();
        var_3 = var_4.exitcallbacks[var_0.oobref];
    }

    var_0 notify( "oob_timeout_end" );

    if ( !istrue( var_2 ) )
    {
        if ( isdefined( var_0.oobendtime ) )
        {
            var_0.oobtimeleft = int( max( 0, var_0.oobendtime - gettime() ) );
            var_0.oobendtime = undefined;
            var_5 = getlastoobtrigger( var_0 );
            var_6 = gettriggertype( var_0, var_5 );
            var_7 = getcooldowntime( var_6 );
            thread watchoobcooldown( var_0, var_7 );
        }
    }

    if ( isdefined( var_3 ) )
        var_0 thread [[ var_3 ]]( var_1, var_2, "clear_oob" );
}

onooboutoftime( var_0 )
{
    var_1 = undefined;

    if ( isplayer( var_0 ) )
        var_1 = ::playeroutoftimecallback;
    else if ( isdefined( var_0.oobref ) )
    {
        var_2 = getoobdata();
        var_1 = var_2.outoftimecallbacks[var_0.oobref];
    }

    if ( isdefined( var_1 ) )
        var_0 thread [[ var_1 ]]( "oob_timeout_end", "clear_oob" );
}

watchooboutoftime( var_0, var_1 )
{
    if ( isplayer( var_0 ) )
        var_0 endon( "death_or_disconnect" );
    else
        var_0 endon( "death" );

    var_0 notify( "oob_timeout_end" );
    var_0 endon( "oob_timeout_end" );
    var_0 endon( "clear_oob" );
    wait( var_1 );
    thread onooboutoftime( var_0 );
}

watchoobcooldown( var_0, var_1 )
{
    if ( isplayer( var_0 ) )
        var_0 endon( "death_or_disconnect" );
    else
        var_0 endon( "death" );

    var_0 notify( "oob_cooldown_end" );
    var_0 endon( "oob_cooldown_end" );
    var_0 endon( "clear_oob" );
    wait( var_1 );
    var_0.oobtimeleft = undefined;
    var_0.oobtriggertype = undefined;
}

playerentercallback( var_0, var_1 )
{
    self setclientomnvar( "ui_out_of_bounds_countdown", self.oobendtime );
}

playerexitcallback( var_0, var_1, var_2 )
{
    self setclientomnvar( "ui_out_of_bounds_countdown", 0 );
}

playeroutoftimecallback( var_0, var_1 )
{
    var_2 = getlastoobtrigger( self );
    var_3 = gettriggertype( self, var_2 );

    if ( var_3 == "minefield" )
        thread playeroutoftimeminefield( var_0, var_1 );
    else
    {
        self.oob = 1;
        self.shouldskiplaststand = 1;
        self dodamage( self.health + 100, self.origin );
    }
}

playerclearcallback( var_0 )
{
    self setclientomnvar( "ui_out_of_bounds_countdown", 0 );
}

playeroutoftimeminefield( var_0, var_1 )
{
    var_2 = self.origin;
    var_3 = scripts\engine\trace::ray_trace( self.origin, self.origin - ( 0, 0, 1000 ), self );

    if ( isdefined( var_3["hittype"] != "hittype_none" ) && isdefined( var_3["position"] ) )
        var_2 = var_3["position"];

    var_4 = spawn( "script_model", var_2 );
    var_4 setmodel( "ks_minefield_mp" );
    var_4 setentityowner( self );
    var_4 setotherent( self );
    var_4 setscriptablepartstate( "warning_click", "on", 0 );
    var_5 = playeroutoftimeminefieldinternal( var_4, var_0, var_1 );

    if ( istrue( var_5 ) )
        wait 2;

    var_4 delete();
}

playeroutoftimeminefieldinternal( var_0, var_1, var_2 )
{
    self endon( "death_or_disconnect" );

    if ( isdefined( var_1 ) )
        self endon( var_1 );

    if ( isdefined( var_2 ) )
        self endon( var_2 );

    scripts\cp\cp_hostmigration::waitlongdurationwithhostmigrationpause( 0.3 );
    var_0 setscriptablepartstate( "explosion", "on", 0 );
    self.shouldskiplaststand = 1;
    self dodamage( 2000, self.origin, self, self, "MOD_EXPLOSIVE", "minefield_mp" );
    return 1;
}

killstreakentercallback( var_0, var_1 )
{
    if ( isdefined( self.owner ) )
        self.owner setclientomnvar( "ui_out_of_bounds_countdown", self.oobendtime );
}

killstreakexitcallback( var_0, var_1, var_2 )
{
    if ( isdefined( self.owner ) )
        self.owner setclientomnvar( "ui_out_of_bounds_countdown", 0 );
}

killstreakoutoftimecallback( var_0, var_1 )
{
    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "killstreak", "doDamageToKillstreak" ) )
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "killstreak", "doDamageToKillstreak" ) ]]( 10000, self.owner, self, self.team, self.origin, "MOD_EXPLOSIVE", "nuke_mp" );
}

killstreakclearcallback()
{
    if ( isdefined( self.owner ) )
        self.owner setclientomnvar( "ui_out_of_bounds_countdown", 0 );
}

killstreakregisteroobcallbacks()
{
    registeroobentercallback( "killstreak", ::killstreakentercallback );
    registeroobexitcallback( "killstreak", ::killstreakexitcallback );
    registerooboutoftimecallback( "killstreak", ::killstreakoutoftimecallback );
    registeroobclearcallback( "killstreak", ::killstreakclearcallback );
}

watchoobtriggers()
{
    if ( isdefined( level.outofboundstriggers ) )
    {
        foreach ( var_1 in level.outofboundstriggers )
            thread watchoobtrigger( var_1 );

        if ( isdefined( level.outofboundstriggerpatches ) )
        {
            foreach ( var_1 in level.outofboundstriggerpatches )
                thread watchoobsuppressiontrigger( var_1 );
        }
    }
}

watchoobtrigger( var_0 )
{
    var_0.entstouching = [];
    thread watchoobtriggerexit( var_0 );
    thread watchoobtriggerenter( var_0 );
}

watchoobtriggerenter( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "death" );

    for (;;)
    {
        var_0 waittill( "trigger", var_1 );

        if ( isplayer( var_1 ) )
        {
            if ( isdefined( var_1.c130 ) )
                continue;

            if ( istrue( var_1.inlaststand ) && !scripts\cp\utility::prematchintiallandingcomplete() )
            {
                var_1 notify( "force_bleed_out" );
                continue;
            }
        }

        if ( isdefined( var_0.script_team ) )
        {
            var_2 = 0;

            if ( var_1 scripts\cp_mp\vehicles\vehicle::isvehicle() )
                var_2 = 1;

            if ( var_2 && isdefined( var_1.owner ) && var_1.owner.team != var_0.script_team )
                continue;

            if ( !var_2 && var_1.team != var_0.script_team )
                continue;
        }

        if ( !interactswithoobtriggers( var_1 ) )
            continue;

        onenteroobtrigger( var_0, var_1 );
    }
}

watchoobtriggerexit( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "death" );

    for (;;)
    {
        var_1 = var_0.entstouching;

        foreach ( var_4, var_3 in var_1 )
        {
            if ( !isdefined( var_3 ) )
                var_0.entstouching[var_4] = undefined;

            if ( isdefined( var_3 ) && !var_0 istouching( var_3 ) )
                onexitoobtrigger( var_0, var_3 );
        }

        waitframe();
    }
}

onenteroobtrigger( var_0, var_1 )
{
    var_2 = var_1 getentitynumber();

    if ( isdefined( var_0.entstouching[var_2] ) )
        return;

    var_0.entstouching[var_2] = var_1;

    if ( !isdefined( var_1.oobtriggers ) )
        var_1.oobtriggers = [];

    var_3 = [ var_0 ];

    foreach ( var_5 in var_1.oobtriggers )
        var_3[var_3.size] = var_5;

    var_1.oobtriggers = var_3;
    enableoob( var_1 );
}

onexitoobtrigger( var_0, var_1 )
{
    var_2 = var_1 getentitynumber();
    var_0.entstouching[var_2] = undefined;
    disableoob( var_1 );
    var_1.oobtriggers = scripts\engine\utility::array_remove( var_1.oobtriggers, var_0 );

    if ( var_1.oobtriggers.size == 0 )
        var_1.oobtriggers = undefined;
}

watchoobsuppressiontrigger( var_0 )
{
    var_0.entstouching = [];
    wait 10;
    thread watchoobsuppressiontriggerexit();
    thread watchoobsupressiontriggerenter();
}

watchoobsupressiontriggerenter( var_0 )
{
    level endon( "game_ended" );

    for (;;)
    {
        var_0 waittill( "trigger", var_1 );

        if ( !interactswithoobtriggers( var_1 ) )
            continue;

        onenteroobsuppressiontrigger( var_0, var_1 );
    }
}

watchoobsuppressiontriggerexit( var_0 )
{
    level endon( "game_ended" );

    for (;;)
    {
        var_1 = var_0.entstouching;

        foreach ( var_4, var_3 in var_1 )
        {
            if ( !isdefined( var_3 ) )
                var_0.entstouching[var_4] = undefined;

            if ( !var_0 istouching( var_3 ) )
                onexitoobsupressiontrigger( var_0, var_3 );
        }
    }
}

onenteroobsuppressiontrigger( var_0, var_1 )
{
    var_2 = var_1 getentitynumber();

    if ( isdefined( var_0.entstouching[var_2] ) )
        return;

    var_0.entstouching[var_2] = var_1;

    if ( !isdefined( var_1.oobsupressiontriggers ) )
        var_1.oobsupressiontriggers = [];

    var_1.oobsupressiontriggers[var_0 getentitynumber()] = var_0;
    enableoobimmunity( var_1 );
}

onexitoobsupressiontrigger( var_0, var_1 )
{
    var_2 = var_1 getentitynumber();
    var_0.entstouching[var_2] = undefined;
    var_1.oobsupressiontriggers[var_0 getentitynumber()] = undefined;

    if ( var_1.oobsupressiontriggers.size == 0 )
        var_1.oobsupressiontriggers = undefined;

    disableoobimmunity( var_1 );
}

interactswithoobtriggers( var_0 )
{
    if ( isdefined( var_0 ) )
    {
        if ( isplayer( var_0 ) )
        {
            if ( var_0 scripts\cp_mp\utility\player_utility::_isalive() )
                return 1;
        }

        if ( isdefined( var_0.oobref ) )
        {
            if ( var_0 scripts\cp_mp\vehicles\vehicle::isvehicle() )
            {
                if ( !istrue( var_0.isdestroyed ) )
                    return 1;
            }

            if ( isdefined( var_0.streakinfo ) && iskillstreakaffectedbyobb( var_0.streakinfo.streakname ) )
                return 1;
        }
    }

    return 0;
}

getoobdata()
{
    var_0 = level.oobdata;

    if ( !isdefined( var_0 ) )
    {
        var_0 = spawnstruct();
        var_0.entercallbacks = [];
        var_0.exitcallbacks = [];
        var_0.outoftimecallbacks = [];
        var_0.clearcallbacks = [];
        level.oobdata = var_0;
    }

    return var_0;
}

iskillstreakaffectedbyobb( var_0 )
{
    var_1 = 0;

    switch ( var_0 )
    {
        case "radar_drone_recon":
        case "pac_sentry":
            var_1 = 1;
            break;
    }

    return var_1;
}

gettriggertype( var_0, var_1 )
{
    var_2 = "default";

    if ( isdefined( var_0 ) && var_0 scripts\cp_mp\vehicles\vehicle::isvehicle() )
        return "default";

    if ( isdefined( var_0 ) && isdefined( var_0.streakinfo ) )
        return "default";

    if ( isdefined( var_1 ) && isdefined( var_1.script_noteworthy ) && var_1.script_noteworthy == "MineField" )
        var_2 = "minefield";

    return var_2;
}

getcooldowntime( var_0 )
{
    switch ( var_0 )
    {
        case "minefield":
            return getmaxoutofboundscooldown();
        case "default":
            return getmaxoutofboundsminefieldtime();
    }

    return undefined;
}

getoutofboundstime( var_0 )
{
    switch ( var_0 )
    {
        case "minefield":
            return getmaxoutofboundsminefieldtime();
        case "default":
            return getmaxoutofboundstime();
    }

    return undefined;
}

getlastoobtrigger( var_0 )
{
    if ( isdefined( var_0.oobtriggers ) )
        return var_0.oobtriggers[0];

    return undefined;
}

getmaxoutofboundstime()
{
    var_0 = level.outofboundstime;

    if ( !isdefined( var_0 ) )
    {
        var_0 = max( 0, getdvarfloat( "scr_outOfBoundsTime", 3 ) );
        level.outofboundstime = var_0;
    }

    return var_0;
}

getmaxoutofboundscooldown()
{
    var_0 = level.outofboundscooldown;

    if ( !isdefined( var_0 ) )
    {
        var_0 = max( 0, getdvarfloat( "scr_outOfBoundsCooldown", 3 ) );
        level.outofboundscooldown = var_0;
    }

    return var_0;
}

getmaxoutofboundsminefieldtime()
{
    var_0 = level.outofboundstimeminefield;

    if ( !isdefined( var_0 ) )
    {
        var_0 = max( 0, getdvarfloat( "scr_outOfBoundsTimeMinefield", 3 ) );
        level.outofboundstimeminefield = var_0;
    }

    return var_0;
}
