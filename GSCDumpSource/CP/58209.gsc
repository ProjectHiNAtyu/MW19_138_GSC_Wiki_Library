// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

sortplayerplunderscores()
{
    var_0 = scripts\cp_mp\vehicles\vehicle::vehicle_getleveldataforvehicle( "motorcycle", 1 );
    var_0.destroycallback = ::sort_wave_spawning_ai;
    sounddebouncetimestamp();
    sound_ent();
    soundorg_int();
    sortvalue();
    sortsitesbydistance();
    sound_distraction_mechanic_init();

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "motorcycle", "init" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "motorcycle", "init" ) ]]();

    source();
    sound_events();
}

sound_events()
{
    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "motorcycle", "initLate" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "motorcycle", "initLate" ) ]]();
}

sounddebouncetimestamp()
{
    var_0 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforvehicle( "motorcycle", 1 );
    var_0.enterendcallback = ::solutions;
    var_0.exitstartcallback = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_exitstartcallback;
    var_0.exitendcallback = ::sort_by_ai_assigned;
    var_0.exitextents["front"] = 45;
    var_0.exitextents["back"] = 45;
    var_0.exitextents["left"] = 28;
    var_0.exitextents["right"] = 28;
    var_0.exitextents["top"] = 45;
    var_0.exitextents["bottom"] = 0;
    var_0.exittopcastoffset = 40;
    var_1 = "left";
    var_0.exitoffsets[var_1] = ( -5, 0, 55 );
    var_0.exitdirections[var_1] = "left";
    var_1 = "right";
    var_0.exitoffsets[var_1] = ( -5, 0, 55 );
    var_0.exitdirections[var_1] = "right";
    var_1 = "front";
    var_0.exitoffsets[var_1] = ( 29, 0, 55 );
    var_0.exitdirections[var_1] = "front";
    var_1 = "back";
    var_0.exitoffsets[var_1] = ( -35, 0, 45 );
    var_0.exitdirections[var_1] = "back";
    var_2 = [ "driver", "rear" ];
    var_3 = "driver";
    var_4 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforseat( "motorcycle", var_3, 1 );
    var_4.seatswitcharray = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_generateseatswitcharray( var_3, var_2 );
    var_4.exitids = [ "left", "right", "back", "front" ];
    var_4.restrictions = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getdriverrestrictions();
    var_4.animtag = "tag_seat_0";
    var_4.exittag = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_animtagtoexittag( var_4.animtag );
    var_4.spawnpriority = 10;
    var_4.stoppingpower_clearhcrongameended = "ping_vehicle_driver";
    var_4._id_1203A = 1;
    var_3 = "rear";
    var_4 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getleveldataforseat( "motorcycle", var_3, 1 );
    var_4.seatswitcharray = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_generateseatswitcharray( var_3, var_2 );
    var_4.exitids = [ "back", "right", "left", "front" ];
    var_4.viewclamps["top"] = 180;
    var_4.viewclamps["bottom"] = 180;
    var_4.viewclamps["left"] = 120;
    var_4.viewclamps["right"] = 120;
    var_4.restrictions = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getcombatpassengerrestrictions();
    var_4.animtag = "tag_seat_1";
    var_4.exittag = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_animtagtoexittag( var_4.animtag );
    var_4.stoppingpower_clearhcrongameended = "ping_vehicle_rider";
    var_4._id_1203A = 1;
}

sound_ent()
{
    var_0 = scripts\cp_mp\vehicles\vehicle_interact::vehicle_interact_getleveldataforvehicle( "motorcycle", 1 );
    scripts\cp_mp\vehicles\vehicle_interact::_id_12C7B( "motorcycle", "single", [ "driver", "rear" ] );
}

soundorg_int()
{
    var_0 = scripts\cp_mp\utility\vehicle_omnvar_utility::_id_12D33( "motorcycle", 1 );
    var_0.id = 18;
    var_0.seatids["driver"] = 0;
    var_0.seatids["rear"] = 1;
}

sortvalue()
{
    scripts\cp_mp\vehicles\vehicle_damage::_id_12C4B( "motorcycle", 500 );
    var_0 = scripts\cp_mp\vehicles\vehicle_damage::vehicle_damage_getleveldataforvehicle( "motorcycle" );
    var_0.class = "super_light";
    scripts\cp_mp\vehicles\vehicle_damage::_id_12C1F( "motorcycle" );
    scripts\cp_mp\vehicles\vehicle_damage::_id_12C57( "motorcycle", 4 );

    if ( level.gametype == "br" )
        scripts\cp_mp\vehicles\vehicle_damage::_id_12C58( "motorcycle", 6, "semtex_aalpha12_mp" );

    scripts\cp_mp\vehicles\vehicle_damage::_id_12C50( "motorcycle", ::solospawn );
}

sortsitesbydistance()
{
    var_0 = _accessreaderscriptableused::_id_12BF1( "motorcycle", 1 );
    var_0.br_onvehicledeath = 1;
    var_0.get_random_station_names_on_track = 1;
    var_0.gate_closes = 350;
    var_0.gate_flares_think = 525;
    var_0.gasvfxstructs = 875;
    var_0.gcd = 12.5;
    var_0.generate_achievementid = 50;
    var_0.gatherstadiumlocs = 100;
    var_0.generatecodestoshow = 0;
    var_0.generatenumbercode = 0;
    var_0.generate_solution = 1;
    var_1 = _accessreaderscriptableused::_id_12BF0();
    var_1.get_random_station_names_on_track["motorcycle"] = [];
    var_1.get_random_station_names_on_track["motorcycle"]["cargo_truck"] = 2;
}

sound_distraction_mechanic_init()
{
    level._effect["motorcycle_explode"] = loadfx( "vfx/iw8/veh/scriptables/vfx_veh_explosion_motorcycle.vfx" );
}

sololink( var_0, var_1 )
{
    if ( !isdefined( var_0.angles ) )
        var_0.angles = ( 0, 0, 0 );

    var_0.modelname = "veh_t9_mil_lnd_motorcycle_wz";
    var_0.targetname = "motorcycle";
    var_0.vehicletype = "motorcycle_physics_mp";
    var_2 = scripts\cp_mp\vehicles\vehicle_tracking::_spawnvehicle( var_0, var_1 );

    if ( !isdefined( var_2 ) )
        return undefined;

    scripts\cp_mp\vehicles\vehicle::_id_12C1A( var_2, "motorcycle", var_0 );
    var_2.objweapon = getcompleteweaponname( "atv_mp" );
    _applydvarstosettings::_id_12C0D( var_2 );
    scripts\cp_mp\vehicles\vehicle::_id_12C1B( var_2, var_0 );
    var_2 thread spawn_ai_individual();

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "motorcycle", "create" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "motorcycle", "create" ) ]]( var_2 );

    return var_2;
}

spawn_ai_individual()
{
    self endon( "death" );
    level endon( "game_ended" );
    var_0 = undefined;
    var_1 = undefined;
    var_2 = 0;

    for (;;)
    {
        var_3 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getseatoccupant( self, "driver" );
        var_4 = anglestoup( self.angles )[2];

        if ( !isdefined( var_3 ) && var_4 <= 0.5 )
        {
            if ( !var_2 )
            {
                if ( !isdefined( var_0 ) )
                    var_0 = gettime() + 250;

                if ( gettime() > var_0 )
                {
                    var_0 = undefined;
                    var_2 = 1;
                    self.allseatsdisabled = 1;
                    scripts\cp_mp\vehicles\vehicle_occupancy::_id_12C9F( self, 0 );
                    scripts\cp_mp\vehicles\vehicle_interact::vehicle_interact_allowvehicleuse( self, 0 );
                    var_1 = gettime() + 250;
                    scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_ejectalloccupants( self );
                }
            }
        }
        else
        {
            var_0 = undefined;
            var_2 = 0;
        }

        if ( isdefined( var_1 ) )
        {
            if ( gettime() > var_1 )
            {
                self.allseatsdisabled = 0;
                scripts\cp_mp\vehicles\vehicle_occupancy::_id_12C9F( self, 1 );
                scripts\cp_mp\vehicles\vehicle_interact::vehicle_interact_allowvehicleuse( self, 1 );
                var_1 = undefined;
            }
        }

        waitframe();
    }
}

sort_wave_spawning_ai( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
    {
        var_0 = spawnstruct();
        var_0.inflictor = self;
        var_0.objweapon = "atv_mp";
        var_0.meansofdeath = "MOD_EXPLOSIVE";
    }

    scripts\cp_mp\vehicles\vehicle_damage::_id_12C43( var_0 );
    scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_killoccupants( self, var_0 );
    scripts\cp_mp\vehicles\vehicle_damage::vehicle_damage_clearvisuals( undefined, undefined, 1 );
    thread solution_exists_already();

    if ( !istrue( level.suppressvehicleexplosion ) )
    {
        var_2 = self gettagorigin( "tag_origin" );
        self radiusdamage( var_2, 256, 140, 70, self, "MOD_EXPLOSIVE", "atv_mp" );
        playfx( scripts\engine\utility::getfx( "motorcycle_explode" ), var_2, anglestoforward( self.angles ), anglestoup( self.angles ) );
        playsoundatpos( var_2, "small_car_explode" );
        earthquake( 0.4, 800, var_2, 0.7 );
        playrumbleonposition( "grenade_rumble", var_2 );
        physicsexplosionsphere( var_2, 500, 200, 1 );
    }
}

solution_exists_already()
{
    scripts\cp_mp\vehicles\vehicle::_id_12C63( self );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "motorcycle", "delete" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "motorcycle", "delete" ) ]]( self );

    waitframe();
    scripts\cp_mp\vehicles\vehicle::_id_12C64( self );
}

solospawn( var_0 )
{
    thread sort_wave_spawning_ai( var_0 );
    return 1;
}

solutions( var_0, var_1, var_2, var_3, var_4 )
{
    if ( istrue( var_4.success ) )
        solved( var_0, var_1, var_2, var_3, var_4 );
}

solved( var_0, var_1, var_2, var_3, var_4 )
{
    if ( var_1 == "driver" )
    {
        var_0 setotherent( var_3 );
        var_0 setentityowner( var_3 );
        var_3 controlslinkto( var_0 );
    }

    var_3 thread scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_animateplayer( var_0, var_1, var_2 );
    scripts\cp_mp\utility\vehicle_omnvar_utility::vehomn_updateomnvarsonseatenter( var_0, var_2, var_1, var_3 );
}

sort_by_ai_assigned( var_0, var_1, var_2, var_3, var_4 )
{
    if ( istrue( var_4.success ) )
        sort_goal_positions_by_priority( var_0, var_1, var_2, var_3, var_4 );
}

sort_goal_positions_by_priority( var_0, var_1, var_2, var_3, var_4 )
{
    if ( var_1 == "driver" )
    {
        var_0 setotherent( undefined );
        var_0 setentityowner( undefined );

        if ( !istrue( var_4.playerdisconnect ) )
            var_3 controlsunlink();
    }

    if ( !istrue( var_4.playerdisconnect ) )
    {
        var_3 scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_stopanimatingplayer();
        var_5 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_moveplayertoexit( var_3, var_2, var_4 );

        if ( !var_5 )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "vehicle_occupancy", "handleSuicideFromVehicles" ) )
                [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "vehicle_occupancy", "handleSuicideFromVehicles" ) ]]( var_3 );
            else
                var_3 suicide();
        }
    }

    scripts\cp_mp\utility\vehicle_omnvar_utility::vehomn_updateomnvarsonseatexit( var_0, var_1, var_2, var_3 );
}

source()
{
    var_0 = scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_getleveldataforvehicle( "motorcycle", 1 );
    var_0.maxinstancecount = 4;
    var_0.priority = 75;
    var_0.getspawnstructscallback = ::sortbyhvttags;
    var_0.spawncallback = scripts\cp_mp\utility\script_utility::getsharedfunc( "motorcycle", "spawnCallback" );
    var_0.clearancecheckradius = 55;
    var_0.clearancecheckheight = 45;
    var_0.clearancecheckminradius = 55;
}

sortbyhvttags()
{
    var_0 = scripts\engine\utility::getstructarray( "motorcycle_spawn", "targetname" );

    if ( var_0.size > 0 )
    {
        var_0 = scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_removespawnstructswithflag( var_0, 1 );

        if ( var_0.size > 1 )
            var_0 = scripts\engine\utility::array_randomize( var_0 );
    }

    return var_0;
}
