// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init_wave_spawning()
{
    if ( !isdefined( level.wave_table ) )
    {
        if ( getdvar( "MOLPOSLOMO" ) == "cp_wave_sv" )
            level.wave_table = "cp/" + getdvar( "NSQLTTMRMP" ) + "_wave_table.csv";
        else
            level.wave_table = "cp/cp_donetsk_wave_table.csv";
    }

    level thread initialize_wave_spawn_modules();
}

initialize_wave_spawn_modules()
{
    var_0 = [ scripts\cp\cp_modular_spawning::set_count_based_on_grouped_modules, "grouped_wave_spawning", 0, 0 ];
    var_1 = [ scripts\cp\cp_modular_spawning::set_count_based_on_grouped_modules, "grouped_wave_spawning", [ scripts\cp\cp_modular_spawning::get_ambient_max_count, 30 ], 30 ];
    var_2 = [ scripts\cp\cp_modular_spawning::set_count_based_on_grouped_modules, "grouped_wave_spawning", [ scripts\cp\cp_modular_spawning::get_ambient_max_count, 30 ], 30 ];
    scripts\cp\cp_modular_spawning::registerambientgroup( "wave_spawning", var_0, var_1, undefined, [ ::wave_spawn_proc, undefined, undefined, 0.1, [ scripts\cp\cp_modular_spawning::logevent_kidnapevent, 0 ], scripts\cp\cp_modular_spawning::get_wave_high_threshold, 1 ], undefined, ::return_wave_veh_spawners, ::init_wave_spawning_module_proc );
    scripts\cp\cp_modular_spawning::registerambientgroup( "wave_spawning", var_0, var_2, undefined, [ ::wave_spawn, undefined, undefined, [ scripts\cp\cp_modular_spawning::get_spawn_time_from_wave, 1 ], [ scripts\cp\cp_modular_spawning::logevent_kidnapevent, 0 ], scripts\cp\cp_modular_spawning::get_wave_high_threshold, 1 ], undefined, scripts\cp\cp_modular_spawning::return_cover_spawners, ::init_wave_spawning_module );
    scripts\cp\cp_spawning_util::xyvelscale_high( "wave_spawning", ::test_anim_ai, ::_id_12A5A );
    scripts\cp\cp_spawning_util::register_module_init_func( "wave_spawning", [ scripts\cp\cp_spawning_util::combine_module_counters, "wave_spawning" ] );
    scripts\cp\cp_modular_spawning::register_module_as_passive( "wave_spawning" );
    scripts\cp\cp_vehicles::xmike109projectiles( "wave_spawning", "attack_heli", [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 ] );

    if ( scripts\cp\utility::preventleave() )
    {
        scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "wave_spawning", [ scripts\cp\cp_modular_spawning::showquestobjicontoall, 750 ] );
        scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "wave_spawning", [ scripts\cp\cp_modular_spawning::showquestcircletoplayer, 64 ] );
        scripts\cp\cp_modular_spawning::set_spawn_scoring_params_for_group( "wave_spawning", 750, 1024, 2500, 1 );
    }
    else
        scripts\cp\cp_modular_spawning::set_spawn_scoring_params_for_group( "wave_spawning", 1024, 1536, 2500, 1 );

    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "wave_spawning", ::play_nag_players_interact_fulton );
    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "wave_paratroopers", ::play_nag_players_interact_fulton );
    scripts\cp\cp_modular_spawning::register_module_ai_death_func( "wave_spawning", ::play_nag_players_hvt_callouts );
    scripts\cp\cp_modular_spawning::register_module_ai_death_func( "wave_paratroopers", ::play_nag_players_hvt_callouts );
    scripts\cp\cp_modular_spawning::register_module_ai_death_func( "wave_spawning", ::update_current_count_death );
    level thread create_paratrooper_spawners();
    scripts\cp\cp_modular_spawning::registerambientgroup( "wave_paratroopers", 0, 30, 8, 0.5, undefined, ::return_paratroopers_spawners, ::init_paratroopers_spawners );
    scripts\cp\cp_spawning_util::register_module_init_func( "wave_paratroopers", [ scripts\cp\cp_spawning_util::combine_module_counters, "wave_spawning" ] );
    scripts\cp\cp_modular_spawning::register_module_ai_spawn_func( "wave_paratroopers", scripts\cp\cp_aiparachute::paratrooper_spawnfunc );
    scripts\cp\cp_modular_spawning::set_spawn_scoring_params_for_group( "wave_paratroopers", 0, 2000, 200000, 1 );
    scripts\cp\cp_modular_spawning::register_module_ai_death_func( "wave_paratroopers", ::update_current_count_death );
    scripts\cp\cp_modular_spawning::registerambientgroup( "wave_veh_test", 0, 24, undefined, 0.1, undefined, ::return_wave_veh_spawners, ::force_wave_vehicles_on );
    scripts\cp\cp_modular_spawning::registerambientgroup( "attack_heli_test", 0, 1, undefined, 0.1, 0, "wave_veh_spawners", undefined, undefined, undefined );
    scripts\cp\cp_spawning_util::register_module_init_func( "attack_heli_test", [ ::cap_vehicle_type_on_module, "attack_heli", 1 ] );
}

play_nag_players_interact_fulton( var_0 )
{
    level._id_12F7C++;
}

play_nag_players_hvt_callouts( var_0 )
{
    if ( !isdefined( var_0 ) && isdefined( self.group ) )
        var_0 = self.group;

    if ( isdefined( var_0 ) && !istrue( var_0.kamikaze ) && istrue( self.spawn_weapon ) )
    {
        scripts\cp\cp_modular_spawning::_id_12553( var_0 );
        scripts\cp\cp_modular_spawning::toggle_force_stop_wave_from_groupname( "wave_spawning", undefined, "wave_retry" );
        scripts\cp\cp_modular_spawning::run_func_on_group_by_groupname( "wave_spawning", [ ::_id_11D92, "wave_delay_over" ] );
        level._id_12F7C--;
        return;
    }

    level._id_12F7B++;
}

_id_11D92( var_0, var_1 )
{
    var_0 notify( var_1 );
}

init_wave_spawning_module( var_0 )
{
    level endon( "game_ended" );

    if ( !scripts\engine\utility::flag_exist( "wave_spawning_initialized" ) )
        scripts\engine\utility::flag_init( "wave_spawning_initialized" );

    var_1 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_0 scripts\cp\cp_modular_spawning::get_current_wave_ref(), 1 );

    if ( isdefined( level.spawn_module_structs_memory[var_0.group_name] ) )
    {
        for ( var_2 = 0; var_2 < level.spawn_module_structs_memory[var_0.group_name].size; var_2++ )
        {
            level.spawn_module_structs_memory[var_0.group_name][var_2].wave_reference = var_1;
            level.spawn_module_structs_memory[var_0.group_name][var_2].cover_node_spawners_override_id = 0;
            level.spawn_module_structs_memory[var_0.group_name][var_2].cover_node_spawners_override = [];
            level.spawn_module_structs_memory[var_0.group_name][var_2].wave_spawner_overrides = [];
            level.spawn_module_structs_memory[var_0.group_name][var_2].requested_spawners = [];
            level.spawn_module_structs_memory[var_0.group_name][var_2]._id_11A4C = [];
            level.spawn_module_structs_memory[var_0.group_name][var_2].last_wave_num = level.spawn_module_structs_memory[var_0.group_name][var_2].wave_reference;
            level.spawn_module_structs_memory[var_0.group_name][var_2].last_wave_ref = level.spawn_module_structs_memory[var_0.group_name][var_2].wave_reference;
        }
    }

    var_0 scripts\cp\cp_modular_spawning::init_passive_wave_struct();
    scripts\engine\utility::flag_wait( "cover_spawners_initialized" );
    scripts\cp\cp_modular_spawning::run_func_on_group_by_groupname( "wave_spawning", scripts\cp\cp_modular_spawning::setup_wave_vars );
    scripts\engine\utility::flag_set( "wave_spawning_initialized" );
    var_0 start_wave();
}

start_wave()
{
    level endon( "game_ended" );
    level._id_12F7C = 0;
    level._id_12F7B = 0;
    scripts\cp\cp_modular_spawning::set_wave_settings();
    update_current_count( self );
    thread scripts\cp\cp_modular_spawning::show_all_player_wave_started_splash();
}

init_wave_spawning_module_proc( var_0 )
{
    level endon( "game_ended" );

    if ( !scripts\engine\utility::flag_exist( "wave_spawning_initialized" ) )
        scripts\engine\utility::flag_init( "wave_spawning_initialized" );

    var_0 scripts\cp\cp_modular_spawning::init_passive_wave_struct();
    scripts\engine\utility::flag_wait( "cover_spawners_initialized" );
    scripts\engine\utility::flag_wait( "wave_spawning_initialized" );
}

cap_vehicle_type_on_module( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0.vehicle_caps ) )
        var_0.vehicle_caps = [];

    var_0.vehicle_caps[var_1] = var_2;
}

create_paratrooper_spawners()
{
    for ( var_0 = 0; var_0 < 8; var_0++ )
    {
        var_1 = spawnstruct();
        scripts\cp\utility::addtostructarray( "targetname", "wave_paratroopers", var_1 );
        var_1.origin = getclosestpointonnavmesh( ( 0, 0, 0 ) );
        var_1.script_forcespawn = 1;
        var_1 scripts\cp\cp_modular_spawning::spawner_init();
    }
}

return_paratroopers_spawners( var_0 )
{
    if ( istrue( var_0.respawning ) )
        return scripts\cp\cp_modular_spawning::return_cover_spawners( var_0 );
    else
    {
        var_1 = scripts\engine\utility::getstructarray( "wave_paratroopers", "targetname" );
        return var_1;
    }
}

init_paratroopers_spawners( var_0 )
{
    var_0 scripts\cp\cp_modular_spawning::f14_3pastcodes( var_0, "wave_spawning" );
    var_1 = var_0 spawn_claymore_group();
    var_2 = var_1.parachute_land_origin + ( 0, 0, 12000 );
    var_3 = var_2 + anglestoforward( ( 0, randomint( 360 ), 0 ) ) * -20000;

    if ( getdvarint( "scr_paratrooper_debug", 0 ) )
    {
        thread scripts\cp\utility::drawsphere( var_1.origin, 128, 60, ( 1, 1, 1 ) );
        thread scripts\cp\utility::drawsphere( var_2, 128, 60, ( 1, 1, 0 ) );
        thread scripts\cp\utility::drawsphere( var_3, 128, 60, ( 0, 1, 0 ) );
    }

    var_4 = var_1 scripts\cp\cp_aiparachute::_id_12236( var_0.group_name, var_3, var_2 );
    var_0.ac130 = var_4;
    var_4 scripts\cp\cp_aiparachute::ai_hold_free( var_2 );
    var_4 thread scripts\engine\utility::thread_on_notify_no_endon_death( "death", ::hover_speed );
    var_0 spawn_chopper_carepackage();
    var_1 = var_0 spawn_claymore_group( 1 );
}

hover_speed()
{
    scripts\cp\cp_modular_spawning::stop_module_by_groupname( "wave_paratroopers", 1 );
}

spawn_chopper_carepackage()
{
    var_0 = scripts\engine\utility::getstructarray( "wave_paratroopers", "targetname" );

    for ( var_1 = 0; var_1 < var_0.size; var_1++ )
        var_0[var_1].origin = self.ac130.origin;

    waitframe();
}

spawn_claymore_group( var_0 )
{
    var_1 = scripts\engine\utility::getstructarray( "wave_paratroopers", "targetname" );
    var_2 = linktoplayer_linklogic( scripts\cp\utility::get_center_point_of_array( level.players ) );

    for ( var_3 = 0; var_3 < var_1.size; var_3++ )
    {
        var_1[var_3].origin = var_2[var_3];
        var_1[var_3].parachute_land_origin = var_1[var_3].origin;

        if ( istrue( var_0 ) )
        {
            if ( getdvarint( "scr_paratrooper_debug", 0 ) )
                thread scripts\cp\utility::drawsphere( var_1[var_3].origin, 32, 60, ( 0, 1, 1 ) );
        }
    }

    return var_1[0];
}

linktoplayer_linklogic( var_0 )
{
    var_1 = [];
    var_2 = 12;
    var_3 = 2048;
    var_4 = 360 / var_2;
    var_5 = var_0;

    for ( var_6 = 0; var_6 < var_2; var_6++ )
    {
        var_7 = var_4 * var_6;
        var_8 = cos( var_7 ) * var_3;
        var_9 = sin( var_7 ) * var_3;
        var_10 = var_5[0] + var_8;
        var_11 = var_5[1] + var_9;
        var_12 = var_5[2];
        var_0 = getclosestpointonnavmesh( ( var_10, var_11, var_12 ) );
        var_13 = scripts\engine\trace::sphere_trace( var_5 + ( 0, 0, 48 ), var_0, 32, level.characters );

        if ( isdefined( var_13 ) && isdefined( var_13["shape_position"] ) )
        {
            var_0 = var_13["shape_position"];
            var_0 = getgroundposition( var_0, 1, 1000, 1000 );
            var_1[var_1.size] = var_0;
        }
    }

    return scripts\engine\utility::array_randomize( var_1 );
}

force_wave_vehicles_on( var_0 )
{
    var_0.wave_use_vehicles = 1;
    var_0.valid_vehicles = [];
    var_0.valid_vehicles["lbravo_carrier"] = 500;
    var_0.valid_vehicles["mindia8"] = 500;
    var_0.valid_vehicles["mindia8_jugg"] = 500;
}

return_wave_veh_spawners( var_0 )
{
    if ( istrue( var_0.respawning ) )
        return scripts\cp\cp_modular_spawning::return_cover_spawners( var_0 );
    else if ( isdefined( var_0._id_11A4C ) && var_0._id_11A4C.size > 0 )
    {
        var_1 = [];

        for ( var_2 = 0; var_2 < var_0._id_11A4C.size; var_2++ )
        {
            var_3 = scripts\engine\utility::getstructarray( var_0._id_11A4C[var_2], "targetname" );
            var_1 = scripts\engine\utility::array_combine( var_1, var_3 );
        }

        if ( var_1.size > 0 )
            return var_1;
        else if ( istrue( var_0.wave_use_vehicles ) )
            return scripts\engine\utility::getstructarray( "wave_veh_spawners", "targetname" );
    }
    else if ( istrue( var_0.wave_use_vehicles ) )
        return scripts\engine\utility::getstructarray( "wave_veh_spawners", "targetname" );
    else
        return [];
}

wave_spawn( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_0 notify( "wave_spawn" );
    var_0 endon( "wave_spawn" );

    if ( isdefined( var_0.paratroopers_allowed ) && var_0.paratroopers_allowed > 0 )
    {
        var_0.paratroopers_allowed--;
        scripts\cp\cp_modular_spawning::run_spawn_module( "wave_paratroopers" );
    }

    if ( isdefined( var_0._id_12F7D ) && var_0._id_12F7D > 0 )
    {
        var_0._id_12F7D--;
        var_7 = spawnstruct();
        var_7.streakname = "precision_airstrike";

        if ( !isdefined( var_7.shots_fired ) )
            var_7.shots_fired = 0;

        var_8 = scripts\cp\utility::get_array_of_valid_players();

        if ( var_8.size > 0 )
        {
            var_9 = scripts\engine\utility::random( var_8 );
            var_7.owner = var_9;
            var_10 = level.scr_anim[var_7.streakname]["airstrike_flyby"];
            thread scripts\cp_mp\killstreaks\airstrike::callstrike( var_9, var_9.origin, var_9.angles[1], undefined, var_7, var_10 );
        }
    }

    var_1 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_1, scripts\cp\cp_modular_spawning::get_passive_wave_spawn_time() );
    var_2 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_2, scripts\cp\cp_modular_spawning::get_passive_spawn_window_time() );
    var_3 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_3, 0.1 );
    var_11 = var_0 scripts\cp\cp_spawning_util::little_bird_trail( [ "wave_spawning", "wave_paratroopers" ] );
    var_12 = var_0 scripts\cp\cp_modular_spawning::get_activecount_from_group();
    var_4 = scripts\cp\cp_modular_spawning::get_passive_wave_low_threshold( var_0, var_4 );
    var_5 = scripts\cp\cp_modular_spawning::get_passive_wave_high_threshold( var_0, var_5 );
    scripts\cp\cp_gameskill::wave_difficulty_update( self.wave_difficulty );

    if ( isdefined( var_4 ) && isdefined( var_5 ) )
    {
        if ( istrue( var_0.stop_wave_spawning ) )
        {
            scripts\cp\cp_modular_spawning::toggle_force_stop_wave_from_groupname( var_0.group_name, 1, "end_wave" );
            scripts\cp\cp_modular_spawning::toggle_force_stop_wave_from_groupname( "wave_paratroopers", 1, "end_wave" );
            var_0 waittill( "wave_delay_over" );
        }
        else if ( var_11 < var_0.spawn_wave_total )
        {
            if ( var_12 >= var_5 )
            {
                scripts\cp\cp_modular_spawning::run_func_on_group_by_groupname( var_0.group_name, [ scripts\cp\cp_modular_spawning::change_module_status, "wait_4_count: " + var_4 ] );
                scripts\cp\cp_modular_spawning::run_func_on_group_by_groupname( "wave_paratroopers", [ scripts\cp\cp_modular_spawning::change_module_status, "wait_4_count: " + var_4 ] );
                var_0 scripts\cp\cp_modular_spawning::group_wait_for_activecount_notify( var_4 );
                return var_3;
            }
            else
            {
                scripts\cp\cp_modular_spawning::run_func_on_group_by_groupname( var_0.group_name, [ scripts\cp\cp_modular_spawning::change_module_status, "spawning" ] );
                scripts\cp\cp_modular_spawning::run_func_on_group_by_groupname( "wave_paratroopers", [ scripts\cp\cp_modular_spawning::change_module_status, "spawning" ] );
                return var_3;
            }
        }
        else
        {
            scripts\cp\cp_modular_spawning::toggle_force_stop_wave_from_groupname( var_0.group_name, 1, "end_wave" );
            scripts\cp\cp_modular_spawning::toggle_force_stop_wave_from_groupname( "wave_paratroopers", 1, "end_wave" );
            var_0 waittill( "wave_delay_over" );
        }
    }
    else if ( isdefined( var_0.spawn_wave_total ) && isdefined( var_11 ) && var_11 >= var_0.spawn_wave_total )
    {
        scripts\cp\cp_modular_spawning::toggle_force_stop_wave_from_groupname( var_0.group_name, 1, "end_wave" );
        scripts\cp\cp_modular_spawning::toggle_force_stop_wave_from_groupname( "wave_paratroopers", 1, "end_wave" );
        var_0 waittill( "wave_delay_over" );
    }
    else
        return var_3;
}

wave_spawn_proc( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_0 notify( "wave_spawn" );
    var_0 endon( "wave_spawn" );

    while ( getdvarint( "scr_skip_wave_vehicles", 0 ) )
        wait 1;

    var_1 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_1, scripts\cp\cp_modular_spawning::get_passive_wave_spawn_time() );
    var_2 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_2, scripts\cp\cp_modular_spawning::get_passive_spawn_window_time() );
    var_3 = scripts\cp\cp_modular_spawning::define_var_if_undefined( var_3, 0.1 );
    var_7 = var_0 scripts\cp\cp_spawning_util::little_bird_trail( [ "wave_spawning", "wave_paratroopers" ] );
    var_8 = var_0 scripts\cp\cp_modular_spawning::get_activecount_from_group();
    var_4 = scripts\cp\cp_modular_spawning::get_passive_wave_low_threshold( var_0, var_4 );
    var_5 = scripts\cp\cp_modular_spawning::get_passive_wave_high_threshold( var_0, var_5 );
    scripts\cp\cp_gameskill::wave_difficulty_update( self.wave_difficulty );

    if ( isdefined( var_4 ) && isdefined( var_5 ) )
    {
        var_9 = var_0 scripts\cp\cp_modular_spawning::last_heli();

        if ( istrue( var_0.use_only_veh_spawners ) && ( !isdefined( var_9 ) || var_9.size < 1 ) )
            scripts\cp\cp_modular_spawning::run_func_on_group_by_groupname( var_0.group_name, ::_id_12A98 );

        if ( istrue( var_0.stop_wave_spawning ) )
        {
            scripts\cp\cp_modular_spawning::toggle_force_stop_wave_from_groupname( var_0.group_name, 1, "end_wave" );
            scripts\cp\cp_modular_spawning::toggle_force_stop_wave_from_groupname( "wave_paratroopers", 1, "end_wave" );
            var_0 waittill( "wave_delay_over" );
        }
        else if ( var_8 >= var_5 )
        {
            if ( var_7 < var_0.spawn_wave_total )
            {
                scripts\cp\cp_modular_spawning::run_func_on_group_by_groupname( var_0.group_name, [ scripts\cp\cp_modular_spawning::change_module_status, "wait_4_count: " + var_4 ] );
                scripts\cp\cp_modular_spawning::run_func_on_group_by_groupname( "wave_paratroopers", [ scripts\cp\cp_modular_spawning::change_module_status, "wait_4_count: " + var_4 ] );
                var_0 scripts\cp\cp_modular_spawning::group_wait_for_activecount_notify( var_4 );
                return var_3;
            }
            else
            {
                scripts\cp\cp_modular_spawning::toggle_force_stop_wave_from_groupname( var_0.group_name, 1, "end_wave" );
                scripts\cp\cp_modular_spawning::toggle_force_stop_wave_from_groupname( "wave_paratroopers", 1, "end_wave" );
                var_0 waittill( "wave_delay_over" );
            }
        }
        else
        {
            scripts\cp\cp_modular_spawning::run_func_on_group_by_groupname( var_0.group_name, [ scripts\cp\cp_modular_spawning::change_module_status, "spawning" ] );
            scripts\cp\cp_modular_spawning::run_func_on_group_by_groupname( "wave_paratroopers", [ scripts\cp\cp_modular_spawning::change_module_status, "spawning" ] );
            return var_3;
        }
    }
    else
        return var_3;
}

_id_12A98( var_0, var_1 )
{
    var_0.wave_use_vehicles = undefined;
    var_0.use_only_veh_spawners = undefined;
}

woods_two_death_func()
{
    return istrue( self.woods_two_death_func );
}

increase_wave_num( var_0 )
{
    var_1 = scripts\cp\cp_modular_spawning::get_current_wave_ref();

    if ( isdefined( var_1 ) )
    {
        scripts\cp\cp_modular_spawning::reset_spawn_count_from_groupname( self.group_name );

        if ( isstring( self.next_wave ) && self.next_wave != "" )
            self.last_wave_ref = self.next_wave;
        else if ( isint( var_1 ) )
        {
            if ( var_1 == self.last_wave_num )
                self.last_wave_num++;
            else
                self.last_wave_num = var_1;

            self.last_wave_ref = self.last_wave_num;
        }
        else
            self.last_wave_ref = var_1;

        self.wave_reference = self.last_wave_ref;
        scripts\cp\cp_modular_spawning::set_wave_settings_for_all_with_groupname( self.group_name, self.wave_reference, self.last_wave_ref, self.last_wave_num );

        if ( istrue( var_0 ) )
            return;

        start_wave();
    }
}

test_anim_ai( var_0 )
{
    var_0 scripts\cp\cp_modular_spawning::change_module_status( undefined, "Module Paused" );
    setomnvar( "cp_wave_timer", 0 );
}

_id_12A5A( var_0 )
{
    var_0 scripts\cp\cp_modular_spawning::change_module_status( undefined, "Module Unpaused" );
}

get_tag_to_target( var_0, var_1 )
{
    if ( isdefined( var_0 ) && var_0 > 0 )
        wait( var_0 );

    scripts\cp\cp_modular_spawning::set_wave_ref_override( var_1 );
}

update_current_count_death( var_0 )
{
    if ( isdefined( var_0 ) )
        var_1 = var_0;
    else if ( isdefined( self.group ) )
        var_1 = self.group;
    else
        return 0;

    var_2 = var_1 scripts\cp\cp_modular_spawning::get_activecount_from_group();
    level thread scripts\cp\cp_modular_spawning::_id_12F82( var_1 );

    if ( var_1 scripts\cp\cp_modular_spawning::preventspawninto() && !istrue( var_1.kamikaze ) )
        _id_12AAD( undefined, var_1 );

    if ( !istrue( var_1.kamikaze ) && ( istrue( var_1.stop_wave_spawning ) && var_2 < var_1.spawnclientdevtest ) )
    {
        scripts\cp\cp_modular_spawning::run_func_on_group_by_groupname( var_1.group_name, [ scripts\cp\cp_modular_spawning::toggle_kamikaze_for_group, 1 ] );
        level thread scripts\cp\cp_modular_spawning::wave_go_kamikaze( var_1 );
    }
}

_id_12AAD( var_0, var_1 )
{
    if ( isdefined( var_0 ) )
    {
        if ( var_0 >= 0 )
            setomnvar( "cp_enemies_remaining", var_0 );

        level._id_12F81 = var_0;
    }
    else
    {
        var_2 = scripts\cp\cp_modular_spawning::get_module_structs_by_groupname( "wave_spawning" );
        var_2 = scripts\engine\utility::array_combine( var_2, scripts\cp\cp_modular_spawning::get_module_structs_by_groupname( "wave_paratroopers" ) );
        var_1._id_12783 = var_1._id_12783 + 1;
        var_3 = 0;

        for ( var_4 = 0; var_4 < var_2.size; var_4++ )
        {
            if ( isdefined( var_2[var_4]._id_12783 ) )
                var_3 = var_3 + var_2[var_4]._id_12783;
        }

        var_3 = level._id_12F7B;
        var_0 = var_1.spawn_wave_total - var_3;

        if ( var_0 >= 0 )
            setomnvar( "cp_enemies_remaining", var_0 );

        level._id_12F81 = var_0;
    }
}

update_current_count( var_0 )
{
    if ( !isdefined( var_0 ) )
    {
        if ( isdefined( self.group ) )
            var_0 = self.group;
        else
            return 0;
    }

    if ( var_0 scripts\cp\cp_modular_spawning::preventspawninto() && var_0._id_12783 == 0 )
        _id_12AAD( var_0.spawn_wave_total, var_0 );
}
