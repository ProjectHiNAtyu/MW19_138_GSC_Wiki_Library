// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

_id_11B36( var_0 )
{
    if ( istrue( self.clear_look_at_ent ) )
        return anim.success;

    self.secondaryweapon = getcompleteweaponname( "iw8_me_riotshield_cp_ai" );
    _id_11B35();
    self.clear_look_at_ent = 1;
    return anim.success;
}

_id_11B37( var_0 )
{
    if ( istrue( self.clear_look_at_ent ) )
        return anim.success;

    self.secondaryweapon = getcompleteweaponname( "iw8_me_riotshield_sp_ai" );
    _id_11B35();
    self.clear_look_at_ent = 1;
    return anim.success;
}

_id_11B35()
{
    self allowedstances( "stand" );
    self.minpaindamage = 200;
    self.aggressivemode = 1;
    self.ignoresuppression = 1;
    self.disablereload = 1;
    self.meleechargedistvsplayer = 120;
    self.meleechargedist = 120;
    self.meleestopattackdistsq = 14400;
    self.meleedamageoverride = 400;
    self.meleemaxzdiff = 500;
    self.meleetargetallowedoffmeshdistsq = 2500;
    self.meleetryhard = 0;
    self.meleeignorefinalzdiff = 0;
    self.meleeignoreplayerstance = 1;
    self.dontsyncmelee = 1;
    self.dontmeleeme = 1;
    self.disablebulletwhizbyreaction = 1;
    self.combatmode = "no_cover";
    self.disablerunngun = 1;
    self.disabledodge = 1;
    self.pathenemyfightdist = 0;
    self.maxfaceenemydist = 768;

    if ( isdefined( self.a ) )
        self.a.disablelongdeath = 1;

    self.runcooldown = 3000;
    self.juggernautwalkdist = 750;
    self.juggernautstopdistance = 300;
    self.juggernautvisionobscuredwalkdist = 750;
    self.juggernautvisionobscuredstopdistance = 300;
    self.juggernautgoalradius = 25;
    self.registerhandlecommand = 200;
    self.goalheight = 80;
    self.usechokepoints = 0;
    self.cautiousnavigation = 0;
    self.juggernautacceleration = 40;
    self.juggernautcanseeenemydelaymin = 1000;
    self.juggernautcanseeenemydelaymax = 2000;
    self.juggernautrundelaymin = 1000;
    self.juggernautrundelaymax = 2000;
    self.combat_func_active = 1;
    self enabletraversals( 0 );
    self aisetriotshieldweapon( self.secondaryweapon );
    self.riotshieldmodel = "weapon_wm_riotshield_left_cp";
    self._id_11B3B = "tag_weapon_left";
    self attachshieldmodel( self.riotshieldmodel, self._id_11B3B );
    self.buildweapon_blueprintwithcustomattachments = 1;
}

_id_126C5()
{
    self allowedstances( "stand", "crouch", "prone" );
    self.minpaindamage = 0;
    self.aggressivemode = 0;
    self.ignoresuppression = 0;
    self.disablereload = 0;
    self.meleedamageoverride = undefined;
    self.meleemaxzdiff = 36;
    self.meleeignoreplayerstance = 0;
    self.dontsyncmelee = undefined;
    self.dontmeleeme = undefined;
    self.disablebulletwhizbyreaction = undefined;
    self.combatmode = "cover";
    self.disablerunngun = 0;
    self.disabledodge = undefined;
    self.pathenemyfightdist = 0;
    self enabletraversals( 1 );
}

_id_11A83()
{
    self.buildweaponfromrandomcategory = undefined;
    self._id_126EE = undefined;
    self._id_126EC = undefined;
}

_id_11A31()
{
    if ( istrue( self.buildweapon_blueprintwithcustomattachments ) )
    {
        self detachshieldmodel( self.riotshieldmodel, self._id_11B3B );
        self.riotshieldmodel = undefined;
        self._id_11B3B = undefined;
        self.buildweapon_blueprintwithcustomattachments = undefined;
    }
}

_id_11B34( var_0 )
{
    if ( istrue( self.brtruck_initexternalfeatures ) )
    {
        self._blackboard.weaponrequest = "mg";
        self setbtgoalpos( 2, self.origin );
        return anim.running;
    }

    if ( istrue( self.buildweaponfromrandomcategory ) )
    {
        if ( self._id_126EC > 3 )
        {
            thread heliextractcallback();
            return anim.running;
        }
    }

    return anim.success;
}

heliextractcallback()
{
    self endon( "death" );
    self.brtruck_initexternalfeatures = 1;
    var_0 = 10000;
    var_1 = gettime();

    while ( !self asmeventfired( self.asmname, "drop_shield" ) && var_1 + var_0 > gettime() )
        waitframe();

    var_2 = var_1 + var_0 <= gettime();

    if ( var_2 )
    {
        _id_11A83();
        self._blackboard.weaponrequest = "none";
        self.brtruck_initexternalfeatures = undefined;
        self clearbtgoal( 2 );
        return;
    }

    scripts\asm\shared\utility::setbasearchetype( "soldier_cp" );
    scripts\asm\shared\utility::setoverridearchetype( "default", "soldier_cp" );
    scripts\asm\soldier\script_funcs::initanimspeedthresholds_soldier( "soldier_cp" );
    var_3 = self gettagorigin( self._id_11B3B );
    var_4 = self gettagangles( self._id_11B3B );
    var_5 = spawn( "script_model", var_3 );
    var_5.angles = var_4;
    var_5 setmodel( self.riotshieldmodel );
    var_5 physicslaunchserver( var_3, anglestoforward( self.angles ) * 5 );
    var_5 thread deleteaftertime( 10 );

    if ( isdefined( self._id_126EE ) )
    {
        foreach ( var_7 in self._id_126EE )
        {
            if ( isdefined( var_7 ) )
                var_7 delete();
        }
    }

    self.a.disablelongdeath = 0;
    _id_11A31();
    _id_11A83();
    self.brtruck_initexternalfeatures = undefined;
    self clearbtgoal( 2 );
    _id_126C5();
    self._blackboard.weaponrequest = "none";
    scripts\aitypes\bt_util::bt_terminateandreplace( "soldier_agent" );
    var_9 = weaponclass( self.weapon );
    scripts\anim\shared.gsc::updateweaponarchetype( var_9 );
}

deleteaftertime( var_0 )
{
    self endon( "death" );
    wait( var_0 );
    self delete();
}
