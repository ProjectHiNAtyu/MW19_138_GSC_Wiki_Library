// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

arena_turret_op_internal( var_0, var_1 )
{
    self endon( "death" );
    ascender_disableplayeruse( var_1 );
    var_2 = "ascender_" + var_0 + "_in";
    var_3 = "ascender_" + var_0 + "_loop";
    var_4 = "ascender_" + var_0 + "_out";
    var_5 = "wm_eq_ascender_" + var_0 + "_get_on_ascender";
    var_6 = "wm_eq_ascender_" + var_0 + "_loop_ascender";
    var_7 = "wm_eq_ascender_" + var_0 + "_get_off_ascender";
    thread _id_1196D( var_1 );
    var_8 = arena_should_stop_seeking_weapon( var_2, var_1 );
    var_8.hover_accel = scripts\engine\utility::getstruct( var_1.target, "targetname" );
    _id_1274D( 1, var_8 );
    thread arena_bot_pickup_weapon( var_2, var_4, var_3, var_5, var_7, var_6, var_8, var_1, var_0 );
    var_1.inuse = 0;
    scripts\engine\utility::_id_12E3F( "ascended", "death" );
}

ascender_disableplayeruse( var_0 )
{
    self.ignoreall = 1;
    self.goalradius = 96;
    self setgoalpos( self getclosestreachablepointonnavmesh( var_0.origin ) );

    while ( istrue( var_0.inuse ) )
        wait 0.1;

    var_0.inuse = 1;
}

_id_1196D( var_0 )
{
    self endon( "ascended" );
    self waittill( "death" );
    var_0.inuse = 0;
}

arena_bot_pickup_weapon( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 )
{
    self endon( "death" );
    var_9 = scripts\asm\asm::asm_lookupanimfromalias( "animscripted2", var_0 );
    var_10 = scripts\asm\asm::asm_getxanim( "animscripted2", var_9 );
    var_11 = scripts\asm\asm::asm_lookupanimfromalias( "animscripted2", var_1 );
    var_12 = scripts\asm\asm::asm_getxanim( "animscripted2", var_11 );
    var_13 = scripts\asm\asm::asm_lookupanimfromalias( "animscripted2", var_2 );
    var_14 = scripts\asm\asm::asm_getxanim( "animscripted2", var_13 );
    self setplayerangles( var_6.angles );

    if ( var_8 == "up" )
        self forceteleport( var_6.origin + anglestoleft( var_6.angles ) * -4 + anglestoforward( var_6.angles ) * 10, var_6.angles );
    else
        self forceteleport( var_6.origin + anglestoleft( var_6.angles ) * 4, var_6.angles );

    arena_turret_op( var_7 );
    thread bot_item_matches_purpose();
    areas_remaining( var_3, var_7, var_9, var_6, var_10 );
    arena_bot_get_total_gun_ammo( var_14, var_6 );
    arena_bot_out_of_ammo( var_4, var_11, var_12 );
    arena_turret_op_debug();
    _id_1274D( 0 );
    self notify( "ascended" );
}

areas_remaining( var_0, var_1, var_2, var_3, var_4 )
{
    self.ascender scriptmodelplayanimdeltamotionfrompos( var_0, var_1.origin, var_1.angles );
    self animmode( "noclip" );
    self aisetanim( "animscripted2", var_2 );
    self orientmode( "face angle", var_3.angles[1] );
    waitframe();
    self.ascender show();
    wait( getanimlength( var_4 ) );
}

arena_bot_get_total_gun_ammo( var_0, var_1 )
{
    self.anchor = spawn( "script_origin", self.origin );
    self.anchor.angles = self.angles;
    self linkto( self.anchor );
    self.ascender linkto( self.anchor );
    var_2 = getanimlength( var_0 );
    self.anchor moveto( var_1.hover_accel.origin, var_2 * 3 );
    self.anchor waittill( "movedone" );
}

arena_bot_out_of_ammo( var_0, var_1, var_2 )
{
    self unlink();
    self.ascender scriptmodelclearanim();
    self.ascender scriptmodelplayanimdeltamotionfrompos( var_0, self.ascender.origin, self.ascender.angles );
    self aisetanim( "animscripted2", var_1 );
    wait( getanimlength( var_2 ) );
    self.anchor delete();
    self.ascender delete();
}

arena_should_stop_seeking_weapon( var_0, var_1 )
{
    var_2 = scripts\asm\asm::asm_lookupanimfromalias( "animscripted2", var_0 );
    var_3 = scripts\asm\asm::asm_getxanim( "animscripted2", var_2 );
    var_4 = spawnstruct();

    if ( !isdefined( var_1.angles ) )
        var_1.angles = ( 0, 0, 0 );

    var_4.origin = getstartorigin( var_1.origin, var_1.angles, var_3 );
    var_4.angles = getstartangles( var_1.origin, var_1.angles, var_3 );
    return var_4;
}

arena_turret_op( var_0 )
{
    self.old_weapon = self.weapon;
    self.bot_loadout = scripts\cp\cp_weapon::buildweapon( "iw8_fists_mp", [], "none", "none", -1 );
    self giveweapon( self.bot_loadout );
    self takeweapon( self.old_weapon );
    self setspawnweapon( self.bot_loadout );
    self.ascender = spawn( "script_model", var_0.origin );
    self.ascender.angles = var_0.angles;
    self.ascender setmodel( "misc_wm_ascender" );
    self.ascender hide();
}

arena_turret_op_debug()
{
    self giveweapon( self.old_weapon );
    self takeweapon( self.bot_loadout );
    self setspawnweapon( self.old_weapon );
}

arena_bot_seek_dropped_weapon( var_0 )
{
    var_1 = scripts\engine\utility::getstructarray( "ascend_begin", "script_noteworthy" );
    var_2 = scripts\engine\utility::getclosest( var_0, var_1 );
    return var_2;
}

arena_bot_think_seek_dropped_weapons( var_0 )
{
    var_1 = scripts\engine\utility::getstructarray( "descend_begin", "script_noteworthy" );
    var_2 = scripts\engine\utility::getclosest( var_0, var_1 );
    return var_2;
}

bot_item_matches_purpose()
{
    self endon( "ascended" );
    var_0 = self.ascender;
    self.do_immediate_ragdoll = 1;
    self waittill( "death" );
    var_0 delete();
}

_id_1274D( var_0, var_1 )
{
    if ( var_0 )
    {
        self.ignoreall = 1;

        if ( isdefined( var_1 ) )
        {
            self.goalradius = 8;
            self setgoalpos( self getclosestreachablepointonnavmesh( var_1.origin ) );
            self waittill( "goal" );
            wait 1;
        }

        scripts\asm\asm_mp::bot_pickup_origin();
        self.playing_skit = 1;
    }
    else
    {
        self.goalradius = 4096;
        self.ignoreall = 0;
        scripts\asm\shared\mp\utility::bolt_trytopickup();
        self.playing_skit = undefined;
    }
}
