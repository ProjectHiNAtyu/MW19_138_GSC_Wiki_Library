// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    thread unlockables();
    register_end_game_string_index();
}

unlockables()
{
    for (;;)
    {
        level waittill( "connected", var_0 );

        if ( isdefined( level.verbal_string ) )
        {
            var_0 setclientomnvar( "post_game_state", level.verbal_string );

            if ( isdefined( var_0.pers["team"] ) && level.winner == var_0.pers["team"] )
                var_1 = get_end_game_string_index( "win" );
            else
                var_1 = get_end_game_string_index( "fail" );

            var_0 setclientomnvar( "ui_round_end_title", var_1 );
        }
    }
}

_id_11EE9( var_0 )
{
    setomnvarforallclients( "post_game_state", var_0 );
    level.verbal_string = var_0;
}

bottompercentagetoadjusteconomy( var_0 )
{
    if ( isdefined( var_0 ) && !isdefined( var_0.clientmatchdataid ) )
    {
        var_0.clientmatchdataid = level.fulton_repositoryatcapacitycallback;
        level.fulton_repositoryatcapacitycallback++;
    }
}

endgame( var_0, var_1 )
{
    if ( gamealreadyended() )
        return;

    foreach ( var_3 in level.players )
    {
        if ( istrue( var_3 isparachuting() ) || istrue( var_3 isskydiving() ) )
            var_3 skydive_interrupt();

        thread scripts\cp\cp_laststand::hide_all_revive_icons( var_3 );
    }

    if ( isdefined( level.intel_headicons ) )
    {
        foreach ( var_6 in level.intel_headicons )
        {
            level.intel_headicons = scripts\engine\utility::array_remove( level.intel_headicons, var_6 );
            setheadiconimage( var_6 );
        }
    }

    if ( var_1 == 3 )
    {
        foreach ( var_3 in level.players )
        {
            if ( isdefined( level.gametype ) && level.gametype == "cp_wave_sv" )
            {
                var_9 = game["music"]["spawn_player"].size;
                var_10 = randomint( var_9 );
                var_3 setplayermusicstate( game["music"]["cp_roundloss"][var_10] );
            }
            else
            {
                var_3 setsoundsubmix( "mp_matchend_music", 2 );
                var_3 setplayermusicstate( "mus_cp_defeat" );
            }

            var_3 thread deathfx();
        }
    }

    setdvar( "scr_init_cs_files", "" );
    setnojiptime( 1 );
    markgameended();
    level notify( "game_ended", var_0 );
    freezeallplayers( 1.0, "NSSLSNKPN", 1 );
    var_12 = tolower( getdvar( "mapname" ) );

    foreach ( var_3 in level.players )
    {
        if ( isdefined( level.gametype ) )
        {
            var_3 setplayerdata( "common", "round", "gameMode", level.gametype );
            var_3 setplayerdata( "common", "round", "map", var_12 );
        }
    }

    if ( var_1 == 3 )
        wait 1;

    var_15 = 0;
    var_16 = "";

    if ( !scripts\cp\utility::prematchintiallandingcomplete() )
    {
        var_16 = "FAIL";

        switch ( var_1 )
        {
            case 1:
                var_16 = "SUCCESS";
                scripts\mp\calloutmarkerping_mp::rankedmatchupdates( "allies" );
                break;
            case 4:
                var_16 = "HOST QUIT";
                scripts\mp\calloutmarkerping_mp::rankedmatchupdates( "axis" );
                break;
            default:
                var_16 = "FAIL";
                scripts\mp\calloutmarkerping_mp::rankedmatchupdates( "axis" );
                break;
        }

        if ( isdefined( level.pre_map_restart_func ) )
            [[ level.pre_map_restart_func ]]( var_16 );

        scripts\cp\cp_analytics::scriptdoordelete( var_16 );
    }

    setclientmatchdata( "isPublicMatch", scripts\cp\utility::matchmakinggame() );
    level.fulton_repositoryatcapacitycallback = 0;

    foreach ( var_3 in level.players )
    {
        if ( !isplayer( var_3 ) )
            continue;

        if ( scripts\cp\utility::matchmakinggame() && ( var_16 == "SUCCESS" || var_16 == "FAIL" ) )
            var_3 scripts\cp_mp\utility\game_utility::stopkeyearning( var_16 );

        var_18 = get_current_zone( var_3 );
        var_19 = var_3 getplayerdata( "cp", "alienSession", "kills" );
        var_20 = var_3 getplayerdata( "cp", "alienSession", "downed" );
        var_21 = var_3 getplayerdata( "cp", "alienSession", "revives" );
        getentitylessscriptablearray( "dlog_event_cpdata_eog", [ "levelname", level.script, "changelist", getbuildnumber(), "playername", var_3.name, "stat_type", "Kills", "count", var_19, "description", "" ] );
        getentitylessscriptablearray( "dlog_event_cpdata_eog", [ "levelname", level.script, "changelist", getbuildnumber(), "playername", var_3.name, "stat_type", "Last Stands", "count", var_20, "description", "" ] );
        getentitylessscriptablearray( "dlog_event_cpdata_eog", [ "levelname", level.script, "changelist", getbuildnumber(), "playername", var_3.name, "stat_type", "Revives", "count", var_21, "description", "" ] );
        bottompercentagetoadjusteconomy( var_3 );
        setclientmatchdata( "player", var_3.clientmatchdataid, "xuidHigh", var_3 getxuidhigh() );
        setclientmatchdata( "player", var_3.clientmatchdataid, "xuidLow", var_3 getxuidlow() );
        setclientmatchdata( "player", var_3.clientmatchdataid, "zombie_death", var_19 );
        setclientmatchdata( "player", var_3.clientmatchdataid, "dropped_to_last_stand", var_20 );
        setclientmatchdata( "player", var_3.clientmatchdataid, "revived_another_player", var_21 );

        if ( isdefined( var_3.pers["rank"] ) && scripts\cp\utility::matchmakinggame() )
        {
            var_22 = var_3 scripts\mp\calloutmarkerping_mp::getrank();
            setclientmatchdata( "player", var_3.clientmatchdataid, "rank", var_22 );
        }

        if ( isdefined( var_3.pers["prestige"] ) && scripts\cp\utility::matchmakinggame() )
        {
            var_23 = var_3 scripts\mp\calloutmarkerping_mp::getprestigelevel();
            setclientmatchdata( "player", var_3.clientmatchdataid, "prestige", var_23 );
        }

        if ( var_3 isps4player() )
            setclientmatchdata( "player", var_3.clientmatchdataid, "platform", "ps4" );
        else if ( var_3 isxb3player() )
            setclientmatchdata( "player", var_3.clientmatchdataid, "platform", "xb3" );
        else if ( var_3 ispcplayer() )
            setclientmatchdata( "player", var_3.clientmatchdataid, "platform", "bnet" );
        else
            setclientmatchdata( "player", var_3.clientmatchdataid, "platform", "none" );

        var_3 scripts\mp\ammorestock::logplayerdata( var_16 );
    }

    level.ingraceperiod = 0;
    setomnvar( "allow_server_pause", 0 );
    waitframe();

    if ( isdefined( level.timerstarttime ) )
        level.starttime = level.timerstarttime;

    level.time_survived = int( ( gettime() - level.starttime ) / 1000 );

    if ( isdefined( level.eogscoringtable ) )
    {

    }

    setomnvar( "zm_time_survived", level.time_survived );
    _id_11EE9( 1 );
    setdvar( "SLLNLPRON", 1 );
    setdvar( "ui_allow_teamchange", 0 );
    setdvar( "MPOKQNLPRM", 0 );
    setdvar( "scr_gameended", 1 );
    setgameendtime( 0 );
    setslowmotion( 1, 1, 0 );

    foreach ( var_3 in level.players )
        cleanup_player_on_game_end( var_3 );

    level.bgameover = 1;

    foreach ( var_28 in level.agentarray )
    {
        if ( isdefined( var_28.isactive ) && var_28.isactive )
        {
            var_28.ignoreall = 1;
            var_28 scripts\cp\utility::enable_alien_scripted();
        }
    }

    _id_11EE9( 0 );
    level.winner = var_0;
    displaygameend( var_0, var_1 );
    var_30 = should_load_new_map( var_1 );

    if ( isdefined( var_30 ) )
    {
        if ( isdefined( level.load_new_map_func ) )
            [[ level.load_new_map_func ]]( var_1 );

        load_new_map( var_30 );
        return;
    }
    else if ( players_want_to_restart( var_0, var_1 ) )
    {
        var_31 = get_end_game_string_index( "restarting" );

        foreach ( var_3 in level.players )
            var_3 setclientomnvar( "ui_round_end_title", var_31 );

        wait 1.0;
        restart_map();
        return;
    }
    else
    {
        var_31 = get_end_game_string_index( "exiting" );

        foreach ( var_3 in level.players )
            var_3 setclientomnvar( "ui_round_end_title", var_31 );
    }

    scripts\cp\cp_globallogic::_id_11A5E();
    setdvar( "scr_cp_map_part2", "" );

    if ( isdefined( level.pre_end_game_display_func ) )
        [[ level.pre_end_game_display_func ]]();

    if ( !scripts\cp\utility::is_codxp() )
    {
        foreach ( var_3 in level.players )
            var_3 setclientdvar( "MQNNLTKNTS", 1 );
    }

    var_38 = get_end_condition( var_1 );
    var_39 = get_play_time();
    scripts\cp\cp_analytics::endgame( var_38, var_39 );
    reset_players_subparty_data();
    wait 1;
    var_40 = level.intermissionfunc;

    if ( isdefined( level.custom_intermission_func ) )
        var_40 = level.custom_intermission_func;

    wait 0.5;

    if ( !scripts\cp\utility::is_codxp() )
    {
        foreach ( var_3 in level.players )
            var_3 thread [[ var_40 ]]( var_1 );
    }

    level notify( "exitLevel_called" );
    exitlevel( 0 );
}

_id_12100()
{
    level thread _id_120FF( "axis", get_end_game_string_index( "host_end" ) );
}

_id_120FF( var_0, var_1 )
{
    if ( gamealreadyended() )
        return;

    if ( var_1 == 3 || var_1 == 2 )
    {
        foreach ( var_3 in level.players )
        {
            var_4 = game["music"]["spawn_player"].size;
            var_5 = randomint( var_4 );
            var_3 setplayermusicstate( game["music"]["cp_roundloss"][var_5] );
            var_3 clearclienttriggeraudiozone( 0 );
            var_3 setsoundsubmix( "cp_matchend", 3 );
            var_3 thread _id_12104( var_0 );

            if ( istrue( var_3.musicplaying ) )
            {
                var_3 playlocalsound( "mp_jugg_mus_toggle_button" );
                var_3 setscriptablepartstate( "juggernaut", "neutral", 0 );
            }
        }
    }

    if ( var_1 == 1 )
    {
        foreach ( var_3 in level.players )
        {
            var_3 clearclienttriggeraudiozone( 0 );

            if ( istrue( var_3.musicplaying ) )
            {
                var_3 playlocalsound( "mp_jugg_mus_toggle_button" );
                var_3 setscriptablepartstate( "juggernaut", "neutral", 0 );
            }

            var_3 setplayermusicstate( "mus_west_victory" );
            var_3 setsoundsubmix( "cp_matchend", 3 );
        }
    }

    setdvar( "scr_init_cs_files", "" );
    setnojiptime( 1 );
    markgameended();
    level notify( "game_ended", var_0 );
    scripts\cp\cp_analytics::scriptdoordelete( var_1 );
    freezeallplayers( 1.0, "NSSLSNKPN", 1 );
    var_9 = tolower( getdvar( "mapname" ) );

    foreach ( var_3 in level.players )
    {
        if ( isdefined( level.gametype ) )
        {
            var_3 setplayerdata( "common", "round", "gameMode", level.gametype );
            var_3 setplayerdata( "common", "round", "map", var_9 );
        }
    }

    if ( var_1 == 3 )
        wait 1;

    setclientmatchdata( "isPublicMatch", scripts\cp\utility::matchmakinggame() );
    level.fulton_repositoryatcapacitycallback = 0;

    foreach ( var_3 in level.players )
    {
        var_13 = get_current_zone( var_3 );
        var_14 = var_3 getplayerdata( "cp", "alienSession", "kills" );
        var_15 = var_3 getplayerdata( "cp", "alienSession", "downed" );
        var_16 = var_3 getplayerdata( "cp", "alienSession", "revives" );
        getentitylessscriptablearray( "dlog_event_cpdata_eog", [ "levelname", level.script, "changelist", getbuildnumber(), "playername", var_3.name, "stat_type", "Kills", "count", var_14, "description", "" ] );
        getentitylessscriptablearray( "dlog_event_cpdata_eog", [ "levelname", level.script, "changelist", getbuildnumber(), "playername", var_3.name, "stat_type", "Last Stands", "count", var_15, "description", "" ] );
        getentitylessscriptablearray( "dlog_event_cpdata_eog", [ "levelname", level.script, "changelist", getbuildnumber(), "playername", var_3.name, "stat_type", "Revives", "count", var_16, "description", "" ] );
        bottompercentagetoadjusteconomy( var_3 );

        if ( isdefined( var_3.pers["rank"] ) && scripts\cp\utility::matchmakinggame() )
        {
            var_17 = var_3 scripts\mp\calloutmarkerping_mp::getrank();
            setclientmatchdata( "player", var_3.clientmatchdataid, "rank", var_17 );
        }

        if ( isdefined( var_3.pers["prestige"] ) && scripts\cp\utility::matchmakinggame() )
        {
            var_18 = var_3 scripts\mp\calloutmarkerping_mp::getprestigelevel();
            setclientmatchdata( "player", var_3.clientmatchdataid, "prestige", var_18 );
        }

        setclientmatchdata( "player", var_3.clientmatchdataid, "xuidHigh", var_3 getxuidhigh() );
        setclientmatchdata( "player", var_3.clientmatchdataid, "xuidLow", var_3 getxuidlow() );
        setclientmatchdata( "player", var_3.clientmatchdataid, "zombie_death", var_14 );
        setclientmatchdata( "player", var_3.clientmatchdataid, "dropped_to_last_stand", var_15 );
        setclientmatchdata( "player", var_3.clientmatchdataid, "revived_another_player", var_16 );

        if ( var_3 isps4player() )
            setclientmatchdata( "player", var_3.clientmatchdataid, "platform", "ps4" );
        else if ( var_3 isxb3player() )
            setclientmatchdata( "player", var_3.clientmatchdataid, "platform", "xb3" );
        else if ( var_3 ispcplayer() )
            setclientmatchdata( "player", var_3.clientmatchdataid, "platform", "bnet" );
        else
            setclientmatchdata( "player", var_3.clientmatchdataid, "platform", "none" );

        var_3 scripts\mp\ammorestock::logplayerdata( var_1 );
    }

    level.ingraceperiod = 0;
    waitframe();

    if ( level.allow_br_loot_to_br_marked > -1 )
        level.time_survived = _id_12101();
    else
        level.time_survived = 0;

    if ( isdefined( level.eogscoringtable ) )
    {

    }

    setomnvar( "zm_time_survived", level.time_survived );
    var_20 = _id_12102( var_0 );

    if ( var_20._id_123AE > 0 )
        setomnvar( "ui_so_stars_given", var_20._id_123AE );

    setomnvar( "ui_so_next_score", var_20.spawner_invalid_due_to_recently_used );
    setomnvar( "ui_so_iwbest", var_20.record );
    setdvar( "SLLNLPRON", 1 );
    setdvar( "ui_allow_teamchange", 0 );
    setdvar( "MPOKQNLPRM", 0 );
    setgameendtime( 0 );

    if ( getdvarint( "LTSNLQNRKO" ) )
    {
        foreach ( var_3 in level.players )
        {
            if ( var_20._id_123AE > 0 )
            {
                var_3 _id_12105( var_20._id_123AE, level.time_survived );
                var_22 = tablelookuprownum( "cp/cp_so_mission_table.csv", 1, level.script );
                var_23 = tablelookupbyrow( "cp/cp_so_mission_table.csv", var_22, 0 );
                var_3 reportchallengeuserevent( "spec_ops_end", var_23, var_20._id_123AE );
            }
        }
    }

    foreach ( var_3 in level.players )
        cleanup_player_on_game_end( var_3 );

    foreach ( var_28 in level.agentarray )
    {
        if ( isdefined( var_28.isactive ) && var_28.isactive )
            var_28.ignoreall = 1;
    }

    _id_120FE( var_0, var_1 );
    var_30 = get_end_condition( var_1 );
    var_31 = get_play_time();
    scripts\cp\cp_analytics::endgame( var_30, var_31 );
    reset_players_subparty_data();

    if ( _id_12106() )
    {
        wait 0.1;

        foreach ( var_3 in level.players )
        {
            var_3 clearsoundsubmix( "cp_matchend", 2 );
            var_3 clearsoundsubmix( "mp_matchend_music", 2 );
        }

        restart_map( 0 );
    }
    else
        exitlevel( 0 );
}

_id_12101()
{
    var_0 = int( gettime() - level.allow_br_loot_to_br_marked );
    var_0 = int( var_0 / 1000 ) * 1000;
    return var_0;
}

prematchinitloadouts()
{
    return getdvarint( "MRTSTTKTNL" ) && getdvarint( "SNTTNKSRO" );
}

_id_12102( var_0 )
{
    var_1 = spawnstruct();
    var_1._id_123AE = 0;
    var_1.spawner_poison_structs = 1;
    var_1.spawner_invalid_due_to_recently_used = 0;
    var_2 = tablelookuprownum( "cp/cp_so_mission_table.csv", 1, level.script );
    var_3[0] = int( tablelookupbyrow( "cp/cp_so_mission_table.csv", var_2, 6 ) );
    var_3[1] = int( tablelookupbyrow( "cp/cp_so_mission_table.csv", var_2, 7 ) );
    var_3[2] = int( tablelookupbyrow( "cp/cp_so_mission_table.csv", var_2, 8 ) );
    var_1._id_123AF = var_3;

    if ( var_0 == "allies" )
    {
        var_1._id_123AE = 1;

        for ( var_4 = var_3.size - 1; var_4 >= 0; var_4-- )
        {
            if ( level.time_survived <= var_3[var_4] )
            {
                var_1._id_123AE = var_4 + 1;
                break;
            }
        }

        if ( var_1._id_123AE == 3 )
        {
            var_1.spawner_poison_structs = 4;
            var_1.spawner_invalid_due_to_recently_used = 1;
        }
        else
            var_1.spawner_poison_structs = var_1._id_123AE + 1;
    }

    if ( var_1.spawner_poison_structs > 1 && var_1.spawner_poison_structs < 4 )
        var_1.spawner_invalid_due_to_recently_used = var_3[var_1.spawner_poison_structs - 1];

    var_1.record = int( tablelookupbyrow( "cp/cp_so_mission_table.csv", var_2, 5 ) );
    return var_1;
}

_id_12105( var_0, var_1 )
{
    var_2 = self getplayerdata( "cp", "ClassicSOStarCount", level.script );
    var_3 = self getplayerdata( "cp", "ClassicSOBestScore", level.script );

    if ( !isdefined( var_2 ) || !isdefined( var_3 ) )
        return;

    if ( var_0 > var_2 )
        self setplayerdata( "cp", "ClassicSOStarCount", level.script, var_0 );

    if ( var_1 < var_3 || var_3 == 0 )
        self setplayerdata( "cp", "ClassicSOBestScore", level.script, var_1 );
}

_id_12104( var_0 )
{
    var_1 = var_0 == self.pers["team"];

    if ( var_1 && !scripts\cp_mp\utility\player_utility::ui_damage_nums_global_limit() )
    {
        visionsetpain( "damage_dead", 0.2 );
        self painvisionon();
        thread deathfxoverlay( "death_overlay", "ui_player_death_overlay", 0, 1, 18 );
    }

    self setblurforplayer( 10, 1 );
}

_id_120FE( var_0, var_1 )
{
    foreach ( var_3 in level.players )
    {
        if ( isdefined( var_3.connectedpostgame ) || var_3.pers["team"] == "spectator" )
            continue;

        var_3 thread _id_12103( var_0, var_1 );
        var_3 thread scripts\cp\utility::freezecontrolswrapper( 1 );
    }
}

_id_12103( var_0, var_1 )
{
    self endon( "disconnect" );
    self notify( "reset_outcome" );
    var_2 = self.pers["team"];

    if ( !isdefined( var_2 ) || var_2 != "allies" && var_2 != "axis" )
        var_2 = "allies";

    self endon( "reset_outcome" );

    if ( isdefined( self.pers["team"] ) && var_0 == var_2 )
        var_3 = get_end_game_string_index( "win" );
    else
        var_3 = get_end_game_string_index( "fail" );

    self setclientomnvar( "ui_round_end_title", var_3 );

    if ( isdefined( var_1 ) )
        self setclientomnvar( "ui_round_end_reason", var_1 );

    _id_11EE9( 11 );
}

_id_12106()
{
    level.retry_total_votes = 0;
    level.retry_yes_votes = 0;
    var_0 = 35;
    var_1 = 0.1;

    for ( var_2 = 0; var_2 < level.players.size; var_2++ )
        setomnvar( "ui_votesys_player" + var_2, 0 );

    var_3 = -1;
    var_4 = -1;
    var_5 = 1;

    foreach ( var_7 in level.players )
        var_7 thread tv_station_boss_should_break_stealth_immediately();

    while ( level.retry_total_votes < level.players.size )
    {
        var_9 = int( var_0 );

        if ( var_9 >= 0 && var_9 != var_4 )
        {
            var_4 = var_0;
            setomnvar( "ui_votesys_time", var_9 );
        }

        if ( var_0 <= 0 )
        {
            var_5 = 0;
            break;
        }

        wait( var_1 );
        var_0 = var_0 - var_1;
    }

    setomnvar( "ui_votesys_time", 0 );
    level notify( "stop_player_retry_thread" );

    if ( !var_5 )
        return 0;

    if ( level.retry_yes_votes == level.players.size )
        return 1;

    return 0;
}

tv_station_boss_should_break_stealth_immediately()
{
    level endon( "stop_player_retry_thread" );
    self endon( "disconnect" );
    var_0 = -1;

    for (;;)
    {
        self waittill( "luinotifyserver", var_1 );

        if ( var_1 == "retry_level" )
        {
            if ( var_0 < 0 )
            {
                level.retry_total_votes = level.retry_total_votes + 1;
                level.retry_yes_votes = level.retry_yes_votes + 1;
                var_0 = 1;
                setomnvar( "ui_votesys_player" + self getentitynumber(), 1 );
            }
            else if ( var_0 == 0 )
            {
                level.retry_yes_votes = level.retry_yes_votes + 1;
                var_0 = 1;
                setomnvar( "ui_votesys_player" + self getentitynumber(), 1 );
            }

            continue;
        }

        if ( var_1 == "quit_level" )
        {
            if ( var_0 < 0 )
                level.retry_total_votes = level.retry_total_votes + 1;
            else if ( var_0 == 1 )
                level.retry_yes_votes = level.retry_yes_votes - 0;

            var_0 = 0;
        }
    }
}

reset_players_subparty_data()
{
    foreach ( var_1 in level.players )
        var_1 setplayerdata( "cp", "CPSession", "subParty", -1 );
}

get_current_zone( var_0 )
{
    var_1 = getentarray( "p_ent_zone", "targetname" );

    foreach ( var_3 in var_1 )
    {
        if ( ispointinvolume( var_0.origin, var_3 ) )
            return var_3.script_noteworthy;
    }
}

check_best_score()
{

}

relic_disable_health_regen()
{
    var_0 = getaiarray( "axis" );

    foreach ( var_2 in var_0 )
        var_2 thread scripts\cp\cp_skits::hostvictimdamagepercentmedium();
}

forceendgame()
{
    level thread endgame( "axis", get_end_game_string_index( "host_end" ) );
}

markgameended()
{
    game["state"] = "postgame";
    level.gameended = 1;
}

gamealreadyended()
{
    return game["state"] == "postgame" || level.gameended;
}

freezeallplayers( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 0;

    foreach ( var_4 in level.players )
    {
        var_4 thread freezeplayerforroundend( var_0 );
        var_4 thread roundenddof( 4.0 );
        var_4 freegameplayhudelems();
        var_4 setclientdvars( "LQKPQMPRQN", 1, "cg_drawSpectatorMessages", 0 );

        if ( isdefined( var_1 ) && isdefined( var_2 ) )
            var_4 setclientdvars( var_1, var_2 );
    }

    foreach ( var_7 in level.agentarray )
        var_7 scripts\cp\utility::freezecontrolswrapper( 1 );
}

freezeplayerforroundend( var_0 )
{
    self endon( "disconnect" );
    scripts\cp\utility::clearlowermessages();

    if ( !isdefined( var_0 ) )
        var_0 = 0.05;

    wait( var_0 );
    scripts\cp\utility::freezecontrolswrapper( 1 );
}

roundenddof( var_0 )
{
    self setdepthoffield( 0, 128, 512, 4000, 6, 1.8 );
}

get_play_time()
{
    var_0 = 0;

    if ( isdefined( level.starttime ) )
        var_0 = gettime() - level.starttime;

    return var_0;
}

freegameplayhudelems()
{
    if ( isdefined( self.perkicon ) )
    {
        if ( isdefined( self.perkicon[0] ) )
        {
            self.perkicon[0] scripts\cp\utility::destroyelem();
            self.perkname[0] scripts\cp\utility::destroyelem();
        }

        if ( isdefined( self.perkicon[1] ) )
        {
            self.perkicon[1] scripts\cp\utility::destroyelem();
            self.perkname[1] scripts\cp\utility::destroyelem();
        }

        if ( isdefined( self.perkicon[2] ) )
        {
            self.perkicon[2] scripts\cp\utility::destroyelem();
            self.perkname[2] scripts\cp\utility::destroyelem();
        }
    }

    self notify( "perks_hidden" );
    self.lowermessage scripts\cp\utility::destroyelem();
    self.lowertimer scripts\cp\utility::destroyelem();

    if ( isdefined( self.proxbar ) )
        self.proxbar scripts\cp\utility::destroyelem();

    if ( isdefined( self.proxbartext ) )
        self.proxbartext scripts\cp\utility::destroyelem();
}

cleanup_player_on_game_end( var_0 )
{
    var_0 notify( "select_mode" );
    var_0 notify( "reset_outcome" );
    var_0.pers["stats"] = var_0.stats;
    var_0 scripts\cp\utility::allow_player_ignore_me( 1 );
    var_0 scripts\cp\cp_persistence::set_player_currency( 0 );
    var_0 scripts\cp\utility::clearlowermessages();

    if ( isdefined( var_0.pap ) )
        var_0.pap = [];

    if ( isdefined( var_0.powerupicons ) )
        var_0.powerupicons = [];

    if ( isdefined( var_0.consumables_equipped ) )
        var_0.consumables_equipped = [];

    if ( isdefined( var_0.powers ) )
        var_0.powers = [];

    var_0 clear_powers_hud();
}

should_load_new_map( var_0 )
{
    if ( ( var_0 == 1 || var_0 == 2 ) && getdvar( "NSQLTTMRMP" ) == "cp_jackal_ass" )
        return "cp_titan";

    return undefined;
}

load_new_map( var_0 )
{
    kill_em_all();
    level scripts\engine\utility::_id_12E53( 15, "intermission_over" );
    setdvar( "NSQLTTMRMP", var_0 );
    setdvar( "NKTMKRMSKR", "aliens" );
    var_1 = "map " + var_0;
}

restart_map( var_0 )
{
    for ( var_1 = 0; var_1 < level.players.size; var_1++ )
    {
        level.players[var_1] scripts\cp\cp_globallogic::updatematchhasmorethan1playeromnvaronplayerdisconnect();
        level.players[var_1] setclientomnvar( "ui_match_in_progress", 0 );
        level.players[var_1] setclientomnvar( "ui_hide_hud", 1 );
    }

    kill_em_all();
    setomnvar( "allow_server_pause", 1 );
    _id_11EE9( 0 );
    setomnvarforallclients( "reset_wave_loadout", 1 );

    if ( !isdefined( var_0 ) )
        var_0 = 3;

    for ( var_1 = var_0; var_1 > 0; var_1-- )
        wait 1;

    foreach ( var_3 in level.players )
    {
        var_3 clearsoundsubmix( "cp_matchend", 4 );
        var_3 clearsoundsubmix( "mp_matchend_music", 4 );
    }

    map_restart( 1 );
}

kill_em_all()
{
    foreach ( var_1 in level.characters )
    {
        if ( isplayer( var_1 ) )
            continue;

        var_1 dodamage( 100000, var_1.origin );
    }

    var_3 = scripts\cp\cp_agent_utils::getactiveagentsofspecies( "alien" );

    foreach ( var_5 in var_3 )
        var_5 suicide();
}

players_want_to_restart( var_0, var_1 )
{
    if ( allow_players_to_restart( var_1 ) )
    {
        if ( istrue( level.focus_test_mode ) )
            return 1;

        level.retry_total_votes = 0;
        level.retry_yes_votes = 0;
        level.retry_timer = 0;
        level._id_11AD4 = 0;

        foreach ( var_3 in level.players )
            var_3 thread display_retry_dialog( var_0, var_1 );

        for ( var_5 = level.players.size - level.retry_total_votes; level.retry_total_votes < level.players.size; level.retry_timer = level.retry_timer + 0.5 )
        {
            if ( level._id_11AD4 != 0 )
            {
                wait 1.0;
                return 0;
            }

            setomnvar( "ui_votesys_time", 33 - int( level.retry_timer ) );

            if ( level.retry_timer >= 33 )
                return 0;

            var_6 = var_5;
            var_5 = level.players.size - level.retry_total_votes;

            if ( var_5 != var_6 )
                iprintlnbold( "Waiting for " + var_5 + " player's to vote" );

            wait 0.5;
        }

        if ( level.retry_yes_votes == level.players.size && level._id_11AD4 == 0 )
        {
            wait 1.0;
            return 1;
        }
    }

    return 0;
}

allow_players_to_restart( var_0 )
{
    if ( isdefined( level.allow_players_to_restart ) )
        return [[ level.allow_players_to_restart ]]( var_0 );
    else
        return var_0 == 3;
}

display_retry_dialog( var_0, var_1 )
{
    level endon( "stop_player_retry_thread" );
    self endon( "disconnect" );
    wait 1.0;
    scripts\cp\cp_laststand::clear_last_stand_timer( self );

    if ( !isdefined( self.connectedpostgame ) || !( self.pers["team"] == "spectator" ) )
    {
        var_2 = self.pers["team"];

        if ( !isdefined( var_2 ) || var_2 != "allies" && var_2 != "axis" )
            var_2 = "allies";

        if ( isdefined( self.pers["team"] ) && var_0 == var_2 )
            var_3 = get_end_game_string_index( "win" );
        else
            var_3 = get_end_game_string_index( "fail" );

        if ( isdefined( var_1 ) )
            self setclientomnvar( "ui_round_end_reason", var_1 );
    }

    _id_11EE9( 10 );
    var_4 = -1;
    self waittill( "luinotifyserver", var_5 );

    if ( var_5 == "retry_level" )
    {
        if ( var_4 < 0 )
        {
            level.retry_total_votes = level.retry_total_votes + 1;
            level.retry_yes_votes = level.retry_yes_votes + 1;
            var_4 = 1;
            setomnvar( "ui_votesys_player" + self getentitynumber(), 1 );
        }
        else if ( var_4 == 0 )
        {
            level.retry_yes_votes = level.retry_yes_votes + 1;
            var_4 = 1;
            setomnvar( "ui_votesys_player" + self getentitynumber(), 1 );
        }
    }
    else if ( var_5 == "quit_level" )
    {
        setomnvar( "ui_votesys_player" + self getentitynumber(), 2 );
        level._id_11AD4 = 1;
    }
}

clear_powers_hud()
{
    if ( isdefined( self.powers ) )
    {
        foreach ( var_1 in getarraykeys( self.powers ) )
        {
            var_2 = self.powers[var_1].charges * -1;

            if ( isdefined( level.power_adjustcharges ) )
                self [[ level.power_adjustcharges ]]( var_2 );
        }
    }

    if ( isdefined( level.powers_clearpower ) )
    {
        self [[ level.powers_clearpower ]]( "secondary" );
        self [[ level.powers_clearpower ]]( "primary" );
    }
}

get_end_condition( var_0 )
{
    switch ( var_0 )
    {
        case 1:
            return "win";
        case 3:
        case 2:
            return "died";
        case 4:
            return "host_quit";
        default:
    }
}

display_retry_loadout()
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    for (;;)
    {
        self waittill( "luinotifyserver", var_0 );

        if ( var_0 == "close_menu" )
        {
            level.loadout_retry_completed = level.loadout_retry_completed + 1;
            continue;
        }
        else
        {
            switch ( var_0 )
            {
                case "dpad_team_ammo_ap":
                case "dpad_team_ammo_in":
                case "dpad_team_ammo_stun":
                case "dpad_team_ammo_reg":
                    break;
                case "dpad_team_boost":
                case "dpad_team_armor":
                case "dpad_team_adrenaline":
                case "dpad_team_explosives":
                    break;
                case "dpad_maaws":
                case "dpad_riotshield":
                case "dpad_death_machine":
                case "dpad_war_machine":
                    break;
                case "perk_bullet_damage":
                    waitframe();
                    waitframe();
                    break;
                case "perk_health":
                    waitframe();
                    waitframe();
                    break;
                case "perk_rigger":
                    waitframe();
                    waitframe();
                    break;
                case "perk_medic":
                    waitframe();
                    waitframe();
                    break;
                case "perk_robotics":
                    waitframe();
                    waitframe();
                    break;
                case "perk_demolition":
                    waitframe();
                    waitframe();
                    break;
                case "perk_gunslinger":
                    waitframe();
                    waitframe();
                    break;
                case "perk_hybrid":
                    waitframe();
                    waitframe();
                    break;
                case "perk_pistol_zemc":
                case "perk_pistol_zg18":
                case "perk_pistol_magnum":
                case "perk_pistol_znrg":
                    break;
                case "perk_skill_pet":
                case "perk_skill_electric_arc":
                case "perk_skill_mortar":
                case "perk_skill_drone":
                case "perk_skill_heal_ring":
                case "perk_skill_stasis":
                case "perk_skill_invulnerable":
                case "perk_skill_infinite_ammo":
                    break;
                case "iw6_panzerfaust3_mp":
                case "iw6_kriss_mp":
                case "iw6_cprgm_mp":
                case "iw6_cppanzerfaust3_mp":
                case "iw6_l115a3_mp+acogsniper":
                case "iw6_vks_mp+vksscope":
                case "iw6_svu_mp":
                case "iw6_g28_mp":
                case "iw6_imbel_mp":
                case "iw6_microtar_mp":
                case "iw6_pdw_mp":
                case "iw6_vepr_mp":
                case "iw6_pp19_mp":
                case "iw6_maul_mp":
                case "iw6_cbjms_mp":
                case "iw6_mts255_mp":
                case "iw6_fp6_mp":
                case "iw6_honeybadger_mp":
                case "iw6_aliendlc11li_mp":
                case "iw6_p226_mp":
                case "iw6_magnum_mp":
                case "iw6_m9a1_mp":
                case "iw6_mp443_mp":
                case "iw6_m27_mp":
                case "iw6_lsat_mp":
                case "iw6_dlcweap02_mp+dlcweap02scope":
                case "iw6_plasmaauto_mp":
                case "iw7_erad_mp":
                case "iw7_crb_mp":
                case "iw7_devastator_mp":
                case "iw7_chargeshot_mp":
                case "iw7_spas_mp":
                case "iw7_forge_mp":
                case "iw7_nrg_mp":
                case "iw7_ake_mp":
                case "iw7_m1_mp":
                case "iw7_ar57_mp":
                case "iw7_m8_mp+m8scope":
                case "iw7_cheytac_mp+cheytacscope":
                case "iw7_kbs_mp+kbsscope":
                case "iw6_arx160_mp":
                case "iw6_kac_mp":
                case "iw7_glprox_mp":
                    break;
            }
        }
    }
}

displaygameend( var_0, var_1 )
{
    foreach ( var_3 in level.players )
    {
        if ( isdefined( var_3.connectedpostgame ) || var_3.pers["team"] == "spectator" )
            continue;

        var_3 thread outcomenotify( var_0, var_1 );
        var_3 thread scripts\cp\utility::freezecontrolswrapper( 1 );
    }

    level notify( "game_win", var_0 );
    roundendwait( 3.0, 1 );
}

outcomenotify( var_0, var_1 )
{
    self endon( "disconnect" );
    self notify( "reset_outcome" );
    var_2 = self.pers["team"];

    if ( !isdefined( var_2 ) || var_2 != "allies" && var_2 != "axis" )
        var_2 = "allies";

    while ( scripts\cp\cp_hud_message::isdoingsplash() )
        wait 0.05;

    self endon( "reset_outcome" );

    if ( isdefined( self.pers["team"] ) && var_0 == var_2 )
        var_3 = get_end_game_string_index( "win" );
    else
        var_3 = get_end_game_string_index( "fail" );

    self setclientomnvar( "ui_round_end_title", var_3 );

    if ( isdefined( var_1 ) )
        self setclientomnvar( "ui_round_end_reason", var_1 );

    _id_11EE9( 2 );
}

register_end_game_string_index()
{
    if ( isdefined( level.end_game_string_override ) )
        [[ level.end_game_string_override ]]();
    else
        register_default_end_game_string_index();
}

register_default_end_game_string_index()
{
    level.end_game_string_index = [];
    level.end_game_string_index["win"] = 1;
    level.end_game_string_index["fail"] = 2;
    level.end_game_string_index["kia"] = 3;
    level.end_game_string_index["host_end"] = 4;
    level.end_game_string_index["restarting"] = 5;
    level.end_game_string_index["exiting"] = 6;
}

get_end_game_string_index( var_0 )
{
    return level.end_game_string_index[var_0];
}

roundendwait( var_0, var_1 )
{
    var_2 = 0;

    while ( !var_2 )
    {
        var_3 = level.players;
        var_2 = 1;

        foreach ( var_5 in var_3 )
        {
            if ( !isdefined( var_5.doingsplash ) )
                continue;

            if ( !var_5 scripts\cp\cp_hud_message::isdoingsplash() )
                continue;

            var_2 = 0;
        }

        wait 0.5;
    }

    if ( !var_1 )
    {
        wait( var_0 );
        level notify( "round_end_finished" );
        return;
    }

    wait( var_0 / 2 );
    level notify( "give_match_bonus" );
    wait( var_0 / 2 );
    var_2 = 0;

    while ( !var_2 )
    {
        var_3 = level.players;
        var_2 = 1;

        foreach ( var_5 in var_3 )
        {
            if ( !isdefined( var_5.doingsplash ) )
                continue;

            if ( !var_5 scripts\cp\cp_hud_message::isdoingsplash() )
                continue;

            var_2 = 0;
        }

        wait 0.5;
    }

    level notify( "round_end_finished" );
}

deathfx()
{
    var_0 = self;
    var_0.death = spawnstruct();
    var_0.death.huds = [];
    var_1 = 3.0;
    var_2 = 5;

    if ( istrue( var_0.skip_screen_fx ) )
        return;

    if ( !var_0 scripts\cp_mp\utility\player_utility::ui_damage_nums_global_limit() )
    {
        visionsetpain( "damage_dead", 0.2 );
        var_0 painvisionon();
        var_0 thread deathfxoverlay( "death_overlay", "ui_player_death_overlay", 0, 0, 18 );
    }

    var_0 thread deathfxoverlay( "death_tunnel", "ui_player_death_tunnel_overlay", 1, 3, 19 );
    var_0 thread deathfxoverlay( "death_black", "ui_player_death_black_overlay", 1, var_1, 20 );
    wait 1;
    var_0 setblurforplayer( 6, var_2 );
}

deathfxoverlay( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = self;
    wait( var_2 );
    var_5.death.huds[var_0] = create_death_hudelem();
    var_5.death.huds[var_0] setshader( var_1, 640, 480 );

    if ( var_3 > 0 )
        var_5.death.huds[var_0] fadeovertime( var_3 );

    var_5.death.huds[var_0].alpha = 1;
    var_5.death.huds[var_0].sort = var_4;
}

create_death_hudelem()
{
    var_0 = newclienthudelem( self );
    var_0.x = 0;
    var_0.y = 0;
    var_0.splatter = 1;
    var_0.alignx = "left";
    var_0.aligny = "top";
    var_0.sort = 1;
    var_0.foreground = 0;
    var_0.lowresbackground = 1;
    var_0.horzalign = "fullscreen";
    var_0.vertalign = "fullscreen";
    var_0.alpha = 0;
    var_0.enablehudlighting = 1;
    return var_0;
}
