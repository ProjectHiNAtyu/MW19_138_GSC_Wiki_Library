// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

thermite_used( var_0, var_1, var_2 )
{
    if ( isdefined( var_1 ) )
    {
        var_3 = var_0;
        var_0 = self launchgrenade( "thermite_mp", var_3.origin, ( 0, 0, 0 ) );
        var_0.monitorextractionlocations = var_3;
        var_0.angles = var_3.angles;
        var_0.owner = self;
        var_0 linkto( var_3 );
        var_0 setscriptablepartstate( "visibility", "hide", 0 );
    }

    var_0.movedtoinfected = self.name;
    var_0 thread thermite_watchdisowned();
    var_0 thread thermite_watchstuck( var_1, var_2 );
}

thermite_watchstuck( var_0, var_1 )
{
    self endon( "death" );
    var_2 = undefined;

    if ( istrue( var_0 ) )
    {
        var_3 = _id_126E4();

        if ( !istrue( var_3 ) )
        {
            thread thermite_delete();
            return;
        }

        if ( isdefined( self.monitorextractionlocations ) )
            self.monitorextractionlocations delete();
    }
    else
    {
        self waittill( "missile_stuck", var_2, var_4 );

        if ( istrue( var_1 ) )
            _id_126E3( var_2, var_4 );
    }

    level notify( "grenade_exploded_during_stealth", self, "thermite_mp", self.movedtoinfected );

    if ( isdefined( self.owner ) )
    {
        self.owner endon( "disconnect" );
        self.owner endon( "joined_team" );
        self.owner endon( "joined_spectators" );
    }

    self setscriptablepartstate( "effects", "impact", 0 );
    self setscriptablepartstate( "damage", "impact", 0 );
    self radiusdamage( self.origin, 125, 30, 30, self.owner, "MOD_FIRE", "thermite_mp" );
    wait 0.5;
    var_5 = 1;

    while ( var_5 <= 10 )
    {
        var_6 = var_5 + 1;

        if ( scripts\engine\utility::mod( var_6, 2 ) > 0 )
        {
            self setscriptablepartstate( "damage", "antiVehicle", 0 );
            self radiusdamage( self.origin, 125, 25, 10, self.owner, "MOD_FIRE", "thermite_av_mp" );
        }
        else
        {
            self setscriptablepartstate( "damage", "antiPlayer", 0 );
            self radiusdamage( self.origin, 125, 25, 10, self.owner, "MOD_FIRE", "thermite_av_mp" );
        }

        var_5 = var_6;
        wait 0.5;
    }

    thread thermite_destroy();
}

_id_126E4()
{
    self.monitorextractionlocations endon( "death" );
    self.owner endon( "disconnect" );
    self.owner endon( "joined_team" );
    self.owner endon( "joined_spectators" );
    self.monitorextractionlocations waittill( "missile_stuck", var_0, var_1, var_2, var_3, var_4, var_5 );
    _id_126E3( var_0, var_1 );
    return 1;
}

_id_126E3( var_0, var_1 )
{
    if ( isdefined( var_0 ) )
    {
        if ( isplayer( var_0 ) || isagent( var_0 ) )
        {
            if ( var_0 scripts\cp_mp\utility\player_utility::_isalive() )
            {
                if ( isdefined( var_1 ) )
                    self linkto( var_0, var_1 );
                else
                    self linkto( var_0, "j_spine", ( 0, 0, 0 ) );

                if ( isplayer( var_0 ) )
                    var_0 thread scripts\cp\cp_weapons::enableburnfxfortime( 0.6 );
            }
        }
        else if ( isdefined( var_1 ) )
            self linkto( var_0, var_1 );
        else
            self linkto( var_0 );
    }
}

thermite_watchdisowned()
{
    self endon( "death" );
    self.owner scripts\engine\utility::_id_12E40( "joined_team", "joined_spectators", "disconnect" );
    thread thermite_destroy();
}

thermite_destroy()
{
    var_0 = self getlinkedparent();

    if ( isdefined( var_0 ) && isplayer( var_0 ) )
    {
        if ( istrue( var_0.inlaststand ) )
            var_0 thread _id_126E2();
    }

    thread thermite_delete( 5 );
    self setscriptablepartstate( "effects", "burnEnd", 0 );
}

thermite_delete( var_0 )
{
    self notify( "death" );
    self.exploding = 1;
    self forcehidegrenadehudwarning( 1 );
    wait( var_0 );
    self delete();
}

thermite_onplayerdamaged( var_0 )
{
    if ( var_0.meansofdeath == "MOD_IMPACT" )
        return 1;

    var_0.victim thread scripts\cp\cp_weapons::enableburnfxfortime( 0.6 );
    return 1;
}

_id_126E2()
{
    self endon( "disconnect" );
    self notify( "newBurnFXLaststand" );
    self endon( "newBurnFXLaststand" );
    waitframe();
    thread scripts\cp\cp_weapons::enableburnfxfortime( 4 );
}
