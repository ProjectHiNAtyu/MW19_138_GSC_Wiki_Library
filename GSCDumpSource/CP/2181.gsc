// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

start_ac130_respawn_sequence( var_0, var_1, var_2, var_3 )
{
    if ( !istrue( var_3 ) )
    {
        if ( !isdefined( level.br_ac130 ) )
        {
            var_4 = get_path_over_players( var_0, var_2 );
            thread spawnc130( var_4 );
        }
    }

    if ( !isdefined( var_1 ) )
        var_1 = level.players_in_respawn_queue;

    foreach ( var_6 in var_1 )
    {
        if ( istrue( var_6.binc130 ) )
            continue;

        var_6 scripts\cp\respawn\cp_respawn::do_resurrection_logic( var_2 );
        var_6 notify( "respawn_player", 1 );
        var_6 thread start_black_screen( var_6 );
    }
}

spawnc130( var_0, var_1, var_2 )
{
    var_3 = distance( var_0.startpt, var_0.endpt );
    var_4 = var_3 / 3044;

    if ( istrue( var_1 ) )
    {
        var_2 endon( "death" );

        if ( !isdefined( level.respawn_c130[var_2.name] ) )
        {
            level.respawn_c130[var_2.name] = gunship_spawn( var_0.startpt, var_0.endpt, var_4, var_1, var_0, var_2 );
            level.respawn_c130[var_2.name].teleport_text_updated = var_0;
        }
    }
    else
        level.br_ac130 = gunship_spawn( var_0.startpt, var_0.endpt, var_4, undefined, var_0 );

    return var_4;
}

gunship_spawn( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = spawn( "script_model", var_0 );
    var_6 setmodel( "veh8_mil_air_acharlie130_ks" );
    var_6 setcandamage( 0 );
    var_6.maxhealth = 100000;
    var_6.health = var_6.maxhealth;
    var_6.dir = vectornormalize( var_1 - var_0 );
    var_6.angles = vectortoangles( var_6.dir );
    var_6.dir = vectornormalize( var_1 - var_0 );
    var_6.angles = vectortoangles( var_6.dir );
    var_6.playeroffsets = [ ( 32, 30, -500 ), ( -32, 30, -500 ), ( 0, 30, -500 ), ( 16, 30, -500 ), ( -16, 30, -500 ) ];
    var_6.currentplayeroffset = 0;
    var_6.player_queue = [];
    var_6.teleport_text_updated = var_4;
    var_6 thread gunship_startintroshake();

    if ( istrue( var_3 ) )
    {
        level.respawn_c130[var_5.name] = var_6;
        level.respawn_c130[var_5.name] hide();
        level.respawn_c130[var_5.name] thread _id_12EEC( var_5 );
        level.respawn_c130[var_5.name] endon( "death" );
    }
    else
        level.br_ac130 = var_6;

    while ( var_6.player_queue.size <= 0 )
        waitframe();

    foreach ( var_8 in var_6.player_queue )
    {

    }

    var_6 moveto( var_1, var_2 );
    var_6 thread killaftertime( var_2 );
    var_6 playloopsound( "iw8_ks_ac130_lp" );
    return var_6;
}

_id_12EEC( var_0 )
{
    self endon( "death" );
    var_0 waittill( "death" );

    if ( isdefined( self.innards ) )
        self.innards delete();

    self delete();
}

gunship_startintroshake()
{
    self endon( "death" );
    var_0 = level.scr_anim["gunship"]["gunship_intro"];
    var_1 = getanimlength( var_0 );
    var_2 = var_1;
    var_3 = 0.45;
    var_4 = 0.05;

    while ( var_2 > 0 )
    {
        earthquake( var_3, var_4, self.origin, 5000 );
        var_3 = var_3 - 0.01;

        if ( var_3 <= 0.12 )
            var_3 = 0.12;

        var_2 = var_2 - var_4;
        wait( var_4 );
    }
}

showicon()
{
    var_0 = scripts\cp\utility::nonobjective_requestobjectiveid( 10 );

    if ( var_0 == -1 )
        return -1;

    scripts\mp\objidpoolmanager::objective_add_objective( var_0, "invisible", ( 0, 0, 0 ) );
    scripts\mp\objidpoolmanager::update_objective_onentitywithrotation( var_0, self );
    scripts\mp\objidpoolmanager::update_objective_state( var_0, "active" );
    var_1 = "icon_minimap_dropship";
    scripts\mp\objidpoolmanager::update_objective_icon( var_0, var_1 );
    scripts\mp\objidpoolmanager::update_objective_setbackground( var_0, 1 );
    scripts\mp\objidpoolmanager::objective_playermask_showtoall( var_0 );
    self.objid = var_0;
}

gunship_spawnvfx()
{
    level endon( "game_ended" );

    if ( !isdefined( level._effect["vfx_snatch_ac130_clouds"] ) )
        return;

    wait 1;
    playfxontag( level._effect["vfx_snatch_ac130_clouds"], self, "tag_body" );
}

killaftertime( var_0 )
{
    level endon( "game_ended" );
    self endon( "death" );
    wait( var_0 );

    if ( isdefined( self.players ) )
    {
        foreach ( var_2 in self.players )
        {
            if ( !isdefined( var_2 ) )
                continue;

            var_2.jumptype = "outOfBounds";
            var_2 notify( "halo_kick_c130" );
            var_2 notify( "halo_jump_c130" );
            var_2.kickedfromc130 = 1;
        }
    }

    wait 0.1;

    if ( isdefined( self.innards ) )
        self.innards delete();

    self delete();
}

expandspawnpointbounds( var_0 )
{
    var_1 = [];
    var_2 = [];

    foreach ( var_4 in var_0 )
    {
        var_1 = expandmins( var_1, var_4 );
        var_2 = expandmaxs( var_2, var_4 );
    }
}

expandmins( var_0, var_1 )
{
    if ( var_0[0] > var_1[0] )
        var_0 = ( var_1[0], var_0[1], var_0[2] );

    if ( var_0[1] > var_1[1] )
        var_0 = ( var_0[0], var_1[1], var_0[2] );

    if ( var_0[2] > var_1[2] )
        var_0 = ( var_0[0], var_0[1], var_1[2] );

    return var_0;
}

expandmaxs( var_0, var_1 )
{
    if ( var_0[0] < var_1[0] )
        var_0 = ( var_1[0], var_0[1], var_0[2] );

    if ( var_0[1] < var_1[1] )
        var_0 = ( var_0[0], var_1[1], var_0[2] );

    if ( var_0[2] < var_1[2] )
        var_0 = ( var_0[0], var_0[1], var_1[2] );

    return var_0;
}

findboxcenter( var_0, var_1 )
{
    var_2 = ( 0, 0, 0 );
    var_2 = var_1 - var_0;
    var_2 = ( var_2[0] / 2, var_2[1] / 2, var_2[2] / 2 ) + var_0;
    return var_2;
}

get_path_over_players( var_0, var_1, var_2 )
{
    if ( plunderrankupdate() )
        return levelobjectives( var_0, var_1, var_2 );

    return damagepercentlow( var_0, var_1 );
}

damagepercentlow( var_0, var_1 )
{
    var_2 = 30000;
    var_3 = 1000;
    var_4 = 300;
    var_5 = [];

    foreach ( var_7 in level.players )
    {
        if ( !var_7 isonground() || istrue( var_7.inlaststand ) )
            continue;

        var_5 = scripts\engine\utility::array_add( var_5, var_7 );
    }

    if ( var_5.size > 0 )
        var_9 = getaverageorigin( var_5 );
    else
        var_9 = scripts\engine\utility::drop_to_ground( var_0 );

    if ( isdefined( var_1 ) && isplayer( var_1 ) )
        var_0 = var_1.origin;

    var_9 = ( var_0[0], var_0[1], 4333 );
    var_10 = [ 40000, 20000, 15000, 7000, 4500, 2500, 1000, 0 ];
    var_11 = ( 0, randomfloatrange( 0, 360 ), 0 );
    var_11 = ( 0, getdvarfloat( "scr_br_c130PathAngle", var_11[1] ), 0 );
    var_12 = anglestoforward( var_11 );
    var_13 = 2;
    var_14 = var_10[4];
    var_15 = var_9 - var_12 * var_14 + ( 0, 0, abs( 4333 - var_4 ) );
    var_16 = var_9 + var_12 * var_14 * var_13;
    var_15 = var_15 - var_12 * 3044 * 2;
    var_16 = var_16 + var_12 * 3044;
    var_15 = var_0 + ( -5000, 0, 4333 );
    var_16 = var_0 + ( 5000, 0, 4333 );
    var_17 = spawnstruct();
    var_17.startpt = var_15;
    var_17.endpt = var_16;
    var_17.angle = var_11;
    var_17.helidrivablemission = var_9;
    return var_17;
}

levelobjectives( var_0, var_1, var_2 )
{
    if ( !isdefined( level.fullweaponname ) )
        return;

    if ( !isstring( level.fullweaponname ) )
        return;

    if ( isdefined( level.fullweaponobj ) )
        level.fullweaponname = level.fullweaponobj;

    var_3 = scripts\engine\utility::getstructarray( level.fullweaponname, "targetname" );
    var_4 = var_3[0];

    if ( var_3.size > 1 )
    {
        if ( isdefined( var_3[1].name ) )
            var_4 = var_3[1];
        else
            var_4 = var_3[0];
    }

    var_5 = "";

    if ( !isdefined( var_4 ) )
    {
        if ( isdefined( level.wait_for_lmg_dead ) && level.wait_for_lmg_dead.size > 0 )
        {
            for ( var_6 = level.wait_for_lmg_dead.size - 1; var_6 >= 0; var_6-- )
            {
                if ( isdefined( level.wait_for_lmg_dead[var_6] ) )
                {
                    var_7 = scripts\engine\utility::getstructarray( level.wait_for_lmg_dead[var_6], "targetname" );

                    if ( isdefined( var_7 ) && var_7.size > 0 )
                        var_5 = level.wait_for_lmg_dead[var_6];

                    break;
                }
            }

            if ( var_5 == "" )
                return damagepercentlow( var_0, var_1 );

            var_3 = scripts\engine\utility::getstructarray( var_5, "targetname" );
            var_4 = var_3[0];

            if ( var_3.size > 1 )
            {
                if ( isdefined( var_3[1].name ) )
                    var_4 = var_3[1];
                else
                    var_4 = var_3[0];
            }

            level.fullweaponname = var_5;
        }
        else
            return damagepercentlow( var_0, var_1 );
    }

    if ( !scripts\engine\utility::array_contains( level.wait_for_lmg_dead, level.fullweaponname ) )
        level.wait_for_lmg_dead = scripts\engine\utility::array_add( level.wait_for_lmg_dead, level.fullweaponname );

    var_8 = var_4.origin;

    if ( istrue( var_2 ) && level.respawn_c130.size > 1 )
    {
        if ( level.respawn_c130.size % 2 == 0 )
            var_9 = ( var_8[0], var_8[1], 4633 );
        else
            var_9 = ( var_8[0], var_8[1], 4033 );
    }
    else
        var_9 = ( var_8[0], var_8[1], 4333 );

    var_10 = ( 0, randomfloatrange( 0, 360 ), 0 );
    var_10 = ( 0, getdvarfloat( "scr_respawn_angles", var_10[1] ), 0 );
    var_11 = anglestoforward( var_10 );
    var_12 = 7000;
    var_13 = var_9 - var_11 * var_12;
    var_14 = var_9 + var_11 * var_12;
    var_13 = var_13 - var_11 * getc130speed() * 7;
    var_14 = var_14 + var_11 * getc130speed() * 5;
    var_15 = spawnstruct();
    var_15.startpt = var_13;
    var_15.endpt = var_14;
    var_15.helidrivablemission = var_9;
    var_15.angle = vectortoangles( var_11 );
    var_15.start_whack_a_mole_timer = var_8;
    return var_15;
}

getc130speed()
{
    return 3044;
}

plunderrankupdate()
{
    if ( isdefined( level.fullweaponobj ) )
        return 1;

    if ( scripts\engine\utility::getstructarray( "respawn_point", "script_noteworthy" ).size > 0 )
        return 1;

    if ( level.script == "cp_scaletest" || level.script == "cp_dwn_twn_2" || level.script == "cp_arms_dealer" || level.script == "cp_smuggler" || level.script == "cp_landlord" )
        return 1;

    return 0;
}

_id_11F0C()
{
    switch ( level.script )
    {
        case "cp_scaletest":
            level.wait_for_lmg_dead = [ "plant_jammers", "infil_plane" ];
            break;
        case "cp_dwn_twn_2":
            level.wait_for_lmg_dead = [ "ml_p1_intel" ];
            break;
        case "cp_armsdealer_2":
            level.wait_for_lmg_dead = [ "plant_jammers" ];
            break;
        case "cp_arms_dealer":
            level.wait_for_lmg_dead = [ "morales_1" ];
            break;
        case "cp_smuggler":
            level.wait_for_lmg_dead = [ "obj_caches" ];
            break;
        case "cp_landlord":
            level.wait_for_lmg_dead = [ "obj_tmtyl" ];
            break;
        case "cp_landlord_2":
            level.wait_for_lmg_dead = [ "ba_mnu" ];
            break;
    }
}

getaverageorigin( var_0 )
{
    var_1 = ( 0, 0, 0 );

    if ( !var_0.size )
        return undefined;

    foreach ( var_3 in var_0 )
        var_1 = var_1 + var_3.origin;

    var_5 = int( var_1[0] / var_0.size );
    var_6 = int( var_1[1] / var_0.size );
    var_7 = int( var_1[2] / var_0.size );
    var_1 = ( var_5, var_6, var_7 );
    return var_1;
}

start_black_screen( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 playerhide();
    scripts\cp\cp_outofbounds::enableoobimmunity( var_0 );
    var_0 setcandamage( 0 );
    var_0 setclientomnvar( "ui_hide_hud", 1 );
    var_0 setclientomnvar( "player_respawning", 1 );
    var_0 disableweapons();
    var_2 = newclienthudelem( var_0 );
    var_2.x = 0;
    var_2.y = 0;
    var_2.alignx = "left";
    var_2.aligny = "top";
    var_2.sort = 1;
    var_2.horzalign = "fullscreen";
    var_2.vertalign = "fullscreen";
    var_2.alpha = 1;
    var_2.foreground = 1;
    var_2 setshader( "black", 640, 480 );
    var_0.no_outline = 1;
    var_0.no_team_outlines = 1;
    var_0 scripts\cp\utility::giveperk( "specialty_spygame" );
    var_0 scripts\cp\utility::giveperk( "specialty_coldblooded" );
    var_0 scripts\cp\utility::giveperk( "specialty_noscopeoutline" );
    var_0 scripts\cp\utility::giveperk( "specialty_heartbreaker" );
    var_0 scripts\cp\utility::freezecontrolswrapper( 1 );

    if ( istrue( var_1 ) )
    {
        var_0 waittill( "spawned_player" );
        var_0.no_outline = 1;
        var_0.no_team_outlines = 1;
        var_0 scripts\cp\utility::giveperk( "specialty_spygame" );
        var_0 scripts\cp\utility::giveperk( "specialty_coldblooded" );
        var_0 scripts\cp\utility::giveperk( "specialty_noscopeoutline" );
        var_0 scripts\cp\utility::giveperk( "specialty_heartbreaker" );
        var_0 playerhide();

        while ( !isdefined( level.respawn_c130[var_0.name] ) )
            wait 1;

        var_0 cameraset( "cam_orbit_br_ac130" );
        var_0 setadditionalstreampos( level.respawn_c130[var_0.name].origin, 1 );
        var_0 setorigin( level.respawn_c130[var_0.name].origin );
        var_0 setplayerangles( level.respawn_c130[var_0.name].angles );
        var_0 playerlinkto( level.respawn_c130[var_0.name], "" );
        var_0 thread scripts\cp\cp_globallogic::open_loadout_menu();
        var_0 notify( "open_loadout_menu" );
        var_0 waittill( "loadout_given" );
        var_0 thread scripts\cp\respawn\cp_respawn::vehicle_isenemytoteam( 0.0, 1.5, 1, "white" );

        if ( level.gametype == "cp_survival" )
        {
            var_0 setclientomnvar( "ui_session_state", "playing" );

            if ( !istrue( self.set_subway_car_deployed ) )
                var_0 scripts\cp\cp_globallogic::updatematchhasmorethan1playeromnvaronplayersfirstspawn();
        }

        var_0.no_outline = 1;
        var_0.no_team_outlines = 1;
        var_0 scripts\cp\utility::giveperk( "specialty_spygame" );
        var_0 scripts\cp\utility::giveperk( "specialty_coldblooded" );
        var_0 scripts\cp\utility::giveperk( "specialty_noscopeoutline" );
        var_0 scripts\cp\utility::giveperk( "specialty_heartbreaker" );
        level.respawn_c130[var_0.name] show();
        wait 1;
        playfxontagforclients( level._effect["c130_clouds"], level.respawn_c130[var_0.name], "tag_body", var_0 );
        playfxontagforclients( level._effect["c130_lights"], level.respawn_c130[var_0.name], "tag_body", var_0 );
        var_0 playerhide();
    }
    else
    {
        var_0 waittill( "spawned_player" );
        playfxontagforclients( level._effect["c130_clouds"], level.br_ac130, "tag_body", var_0 );
        playfxontagforclients( level._effect["c130_lights"], level.br_ac130, "tag_body", var_0 );
    }

    var_0 setclientomnvar( "ui_hide_hud", 1 );
    var_0 thread enable_damage_on_landing();
    level thread spawn_player_into_c130( var_0, var_1 );

    if ( !scripts\engine\utility::flag( "introscreen_over" ) )
        scripts\engine\utility::flag_wait( "introscreen_over" );

    var_2 fadeovertime( 4 );
    var_2.alpha = 0;
    wait 4;
    var_0 enableweapons();
    var_0 scripts\cp\utility::freezecontrolswrapper( 0 );
    var_2 destroy();
}

spam_errors_as_prints( var_0, var_1 )
{
    self notify( "spam_errors_as_prints" + var_0.name );
    self endon( "spam_errors_as_prints" + var_0.name );

    for (;;)
    {
        iprintln( var_0.name + " ^5 Is waiting for notify - ^1" + var_1 );
        wait 5;
    }
}

enable_damage_on_landing()
{
    scripts\engine\utility::_id_12E40( "parachute_complete", "parachute_landed", "skydive_land" );
    self setcandamage( 1 );
    self.respawn_in_progress = undefined;
    self setclientomnvar( "player_respawning", 0 );
}

spawn_player_into_c130( var_0, var_1 )
{
    var_0 endon( "disconnect" );

    if ( istrue( var_1 ) )
        level.respawn_c130[var_0.name].player_queue = scripts\engine\utility::array_add( level.respawn_c130[var_0.name].player_queue, var_0 );
    else
        level.br_ac130.player_queue = scripts\engine\utility::array_add( level.br_ac130.player_queue, var_0 );

    var_0.watch_for_players_entering_area_earlier = 1;
    var_0 unlink();
    var_0 scripts\cp_mp\parachute::freefallstartdefault();

    if ( istrue( var_1 ) )
    {
        var_0 thread listenjump( level.respawn_c130[var_0.name], 0 );

        if ( !isbot( var_0 ) )
            var_0 thread orbitcam( level.respawn_c130[var_0.name] );
    }
    else
    {
        var_0 thread listenjump( level.br_ac130, 0 );

        if ( !isbot( var_0 ) )
            var_0 thread orbitcam( level.br_ac130 );
    }

    var_0.no_outline = 0;
    var_0.no_team_outlines = 0;
    var_0 scripts\cp\utility::_unsetperk( "specialty_spygame" );
    var_0 scripts\cp\utility::_unsetperk( "specialty_coldblooded" );
    var_0 scripts\cp\utility::_unsetperk( "specialty_noscopeoutline" );
    var_0 scripts\cp\utility::_unsetperk( "specialty_heartbreaker" );
    var_0.br_infil_type = "c130";

    if ( plunderrankupdate() )
    {
        if ( istrue( var_1 ) )
            var_0 thread isstandardsandbox( level.respawn_c130[var_0.name] );
        else
            var_0 thread isstandardsandbox( level.br_ac130 );
    }
    else
        var_0 thread forcejumpaftertimeout( 1 );
}

orbitcam( var_0 )
{
    self visionsetnakedforplayer( "", 0 );
    self setplayerangles( var_0.teleport_text_updated.angle );
    self playerlinkto( var_0, "" );
    self cameraset( "cam_orbit_br_ac130" );
}

isstandardsandbox( var_0 )
{
    var_0 endon( "death" );
    self endon( "disconnect" );

    for (;;)
    {
        if ( distance2dsquared( var_0.origin, var_0.teleport_text_updated.helidrivablemission ) <= 1048576 )
            break;
        else
            waitframe();
    }

    self.jumptype = "objectiveJump";
    self notify( "halo_jump_c130" );
}

forcejumpaftertimeout( var_0 )
{
    wait( var_0 );
    self.jumptype = "outOfBounds";
    self notify( "halo_kick_c130" );
    self notify( "halo_jump_c130" );
}

listenjump( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "cancel_c130" );
    self endon( "cancel_heli" );
    self endon( "br_jump" );
    self waittill( "halo_jump_c130" );
    self setclientomnvar( "player_respawning", 0 );

    if ( scripts\engine\utility::array_contains( var_0.player_queue, self ) )
        var_0.player_queue = scripts\engine\utility::array_remove( var_0.player_queue, self );

    self.watch_for_players_entering_area_earlier = undefined;
    self cameradefault();
    self.br_infil_type = undefined;
    thread parachute( var_0, var_1, 0, 0 );
    self notify( "br_jump" );
}

parachute( var_0, var_1, var_2, var_3 )
{
    self unlink();

    if ( isdefined( self.br_orbitcam ) )
        self.br_orbitcam delete();

    if ( isdefined( var_0.playeroffsets ) && isdefined( var_0.currentplayeroffset ) )
    {
        var_4 = var_0.playeroffsets[var_0.currentplayeroffset];
        self setorigin( var_0.origin + var_4, 1, 1 );
        var_0.currentplayeroffset++;

        if ( var_0.currentplayeroffset == var_0.playeroffsets.size )
            var_0.currentplayeroffset = 0;
    }
    else
    {
        var_5 = anglestoforward( var_0.angles ) * var_0.br_vieworigin;
        self setorigin( var_0.origin + var_5, 1, 1 );
    }

    waitframe();
    self playershow( 1 );

    if ( istrue( var_2 ) )
        self setplayerangles( ( 0, var_0.angles[1] + 180, 0 ) );
    else
        self setplayerangles( var_0.teleport_text_updated.angle );

    var_6 = ( 0, 0, 0 );

    if ( istrue( var_3 ) )
        var_6 = anglestoforward( var_0.angles ) * 1522.0;

    self setclientomnvar( "ui_hide_hud", 0 );
    scripts\cp\cp_outofbounds::disableoobimmunity( self );
    thread scripts\cp_mp\parachute::startfreefall( 1, 0, undefined, var_6 );
}

nogroundfoundtime( var_0 )
{
    var_0.forcespawnangles = level.br_ac130.angles;
    var_0 thread scripts\cp\respawn\cp_respawn::vehicle_isenemytoteam( 0.0, 1, 1, "white" );
    var_0 spawn( level.br_ac130.origin, level.br_ac130.teleport_text_updated.angle );
    var_0 playerhide();
    var_0 cameraset( "cam_orbit_br_ac130" );
    var_0.bspawningviaac130 = 1;
    var_1 = undefined;
    var_0 scripts\cp\respawn\cp_respawn::camera_setup_for_lerping( var_0, level.br_ac130 );
}
