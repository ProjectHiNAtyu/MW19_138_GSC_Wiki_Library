// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

player_too_far( var_0 )
{
    if ( isdefined( level.script ) )
    {
        switch ( level.script )
        {
            default:
                var_0.achievement_list = [ "LANDLORD", "ARMED", "SMUGGLED", "LAUNDERED", "PICKLES" ];
                break;
        }
    }

    if ( isdefined( var_0.achievement_registration_func ) )
        var_0 [[ var_0.achievement_registration_func ]]();
}

register_default_achievements()
{
    register_achievement( "LANDLORD", 1, ::default_init, ::default_should_update, ::equal_to_goal );
    register_achievement( "ARMED", 1, ::default_init, ::default_should_update, ::equal_to_goal );
    register_achievement( "SMUGGLED", 1, ::default_init, ::default_should_update, ::equal_to_goal );
    register_achievement( "LAUNDERED", 1, ::default_init, ::default_should_update, ::equal_to_goal );
    register_achievement( "PICKLES", 1, ::default_init, ::default_should_update, ::boss_fight_combat_forest );
}

register_achievement( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = spawnstruct();
    var_5 [[ var_2 ]]( var_1, var_3, var_4 );
    self.achievement_list[var_0] = var_5;
}

default_init( var_0, var_1, var_2 )
{
    self.progress = 0;
    self.goal = var_0;
    self.should_update_func = var_1;
    self.is_goal_reached_func = var_2;
    self.achievement_completed = 0;
}

boss_fight_combat_forest( var_0 )
{
    if ( !istrue( var_0 getplayerdata( "cp", "tacOpsAchievements", "LANDLORD" ) ) || !istrue( var_0 getplayerdata( "cp", "tacOpsAchievements", "ARMED" ) ) || !istrue( var_0 getplayerdata( "cp", "tacOpsAchievements", "SMUGGLED" ) ) || !istrue( var_0 getplayerdata( "cp", "tacOpsAchievements", "LAUNDERED" ) ) )
        return 0;

    var_0 thread scripts\cp\so_laststand::molotov_crate_update_hint_logic_alt( "all_operations" );
    var_0 setplayerdata( "cp", "has_seen_cinematic", 5, 1 );
    return 1;
}

default_should_update( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    if ( !var_0 boss_fight_combat() )
        return 0;

    return 1;
}

update_progress( var_0 )
{
    self.progress = self.progress + var_0;
}

at_least_goal()
{
    return self.progress >= self.goal;
}

equal_to_goal( var_0 )
{
    return self.progress == self.goal;
}

is_completed()
{
    return self.achievement_completed;
}

mark_completed()
{
    self.achievement_completed = 1;
}

is_valid_achievement( var_0 )
{
    return isdefined( var_0 );
}

update_achievement( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11 )
{
    var_12 = self.achievement_list[var_0];

    if ( !is_valid_achievement( var_12 ) )
        return;

    if ( var_12 is_completed() )
        return;

    if ( var_12 [[ var_12.should_update_func ]]( self, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11 ) )
    {
        var_12 update_progress( var_1 );

        if ( var_12 [[ var_12.is_goal_reached_func ]]( self ) )
        {
            if ( var_0 == "LANDLORD" || var_0 == "ARMED" || var_0 == "SMUGGLED" || var_0 == "LAUNDERED" )
                thread scripts\mp\brmatchdata::giveunifiedpoints( "medal_match_complete_xp" );
            else
                self giveachievement( var_0 );

            self setplayerdata( "cp", "tacOpsAchievements", var_0, 1 );
            var_12 mark_completed();
        }
    }
}

update_achievement_all_players( var_0, var_1 )
{
    foreach ( var_3 in level.players )
        var_3 update_achievement( var_0, var_1 );
}

boss_fight_combat()
{
    if ( !isdefined( self._id_12301 ) )
        return 1;

    if ( !isdefined( level.callback_create ) )
        return 1;

    if ( level.callback_create > self._id_12301 )
        return 0;

    return 1;
}

_id_11DCF()
{
    level.callback_create = gettime();
}

aigroundturret_cancel( var_0, var_1, var_2 )
{
    if ( var_1 == "MOD_IMPACT" && isstartstr( var_2, "smoke" ) )
        var_0 mon_clip();

    if ( var_0 isonladder() )
    {
        if ( var_1 == "MOD_PISTOL_BULLET" || var_1 == "MOD_RIFLE_BULLET" || var_1 == "MOD_EXPLOSIVE_BULLET" )
            var_0 thread _id_12AE0();
    }
}

trapachievementboom( var_0 )
{
    var_1 = var_0 getplayerdata( "cp", "cpCommonAchievements", "boom" );

    if ( var_1 > 3 )
        return;

    var_1++;
    var_0 setplayerdata( "cp", "cpCommonAchievements", "boom", var_1 );

    if ( var_1 >= 3 )
        var_0 giveachievement( "boom" );
}

_id_12AE0()
{
    var_0 = self getplayerdata( "cp", "cpCommonAchievements", "hangtime" );

    if ( var_0 > 3 )
        return;

    var_0++;
    self setplayerdata( "cp", "cpCommonAchievements", "hangtime", var_0 );

    if ( var_0 >= 3 )
        self giveachievement( "hangtime" );
}

mon_clip()
{
    self giveachievement( "smokedirect" );
}

monitor()
{
    self giveachievement( "wildfire" );
}

molotovrecentlyused()
{
    self giveachievement( "pilotkill" );
}
