// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

weaponsinit()
{
    level.maxperplayerexplosives = max( scripts\cp\utility::getintproperty( "scr_maxPerPlayerExplosives", 2 ), 4 );
    level.riotshieldxpbullets = scripts\cp\utility::getintproperty( "scr_riotShieldXPBullets", 15 );
    level.build_weapon_name_func = ::_buildweaponcustom;
    level.has_weapon_variation = ::has_weapon_variation;
    level.get_weapon_level = ::get_weapon_level;
    level.can_upgrade = ::can_upgrade;
    level.weaponconfigs = [];
    level.pap = [];
    level.dropped_weapons = [];
    level.invalid_drop_weapons = [];
    level.wavessurvivedthroughweapon = 0;
    level.weaponobtained = 0;
    level.downswithweapon = 0;
    level.weaponkills = 0;
    level.weaponrootcache = [];
    level.dropped_weapon_func = ::drop_script_weapon_from_ai;
    level.fnbuildweapon = ::buildweapon;
    level.fnscriptedweaponassignment = ::getscriptedweapon;
    buildweaponmap();
    buildattachmentmaps();
    scripts\cp\cp_weapons::cp_weapons_init();
    initeffects();
    setupminesettings();
    setupconfigs();
    level.custom_proj_func = [];
    level thread custom_gl_proj_func_init();
    level thread onplayerconnect();
    iteminits();
    scripts\cp\cp_outline_utility::initoutlineoccluders();
    scripts\engine\utility::array_thread( getentarray( "misc_turret", "classname" ), ::turret_monitoruse );
    thread scripts\cp\powers\coop_molotov::molotov_init();

    if ( isdefined( level.custom_initializeweaponpickups ) )
        [[ level.custom_initializeweaponpickups ]]();
    else
        initializeweaponpickups();

    thread scripts\cp\cp_claymore::claymore_init();
    thread scripts\cp\powers\cp_tactical_cover::tac_cover_init();
    thread scripts\cp_mp\equipment\throwing_knife::throwing_knife_init();
    thread scripts\cp\cp_accessories::init();
    thread scripts\mp\trials\mp_m_cornfield_floor_is_lava_create_script::decoy_init();
    level thread hackexclusionlist();
}

hackexclusionlist()
{
    wait 10;
    var_0 = [ getcompleteweaponname( level.sentrysettings["sentry_turret"].weaponinfo ), getcompleteweaponname( "tur_gun_decho_cp" ), getcompleteweaponname( "iw8_gunless_infil" ), getcompleteweaponname( "deploy_manual_turret_mp" ), getcompleteweaponname( "manual_turret_mp" ), getcompleteweaponname( "deploy_tactical_cover_mp" ), getcompleteweaponname( "tac_cover_mp" ), getcompleteweaponname( "ac130_25mm_mp" ), getcompleteweaponname( "ac130_40mm_mp" ), getcompleteweaponname( "ac130_105mm_mp" ), getcompleteweaponname( "iw8_ammo_marker_cp" ), getcompleteweaponname( "iw8_armor_marker_cp" ), getcompleteweaponname( "iw8_adrenaline_marker_cp" ), getcompleteweaponname( "iw8_health_marker_cp" ), getcompleteweaponname( "vip_carry_cp" ), getcompleteweaponname( "iw8_health_marker_cp" ), getcompleteweaponname( "deploy_sentry_mp" ), getcompleteweaponname( "ks_generic_mp" ), getcompleteweaponname( "ks_remote_gauntlet_mp" ), getcompleteweaponname( "ks_remote_map_cp" ), getcompleteweaponname( "ks_remote_device_mp" ), getcompleteweaponname( "ks_remote_target_mp" ), getcompleteweaponname( "ks_gesture_generic_mp" ), getcompleteweaponname( "deploy_dronepackage_mp" ), getcompleteweaponname( "deploy_warden_mp" ), getcompleteweaponname( "deploy_box_marker_mp" ), getcompleteweaponname( "ks_manual_turret_marker_mp" ), getcompleteweaponname( "ks_marker_mp" ), getcompleteweaponname( "deploy_pac_sentry_mp" ), getcompleteweaponname( "intel_put_usb_in_tablet" ), getcompleteweaponname( "intel_call_phone" ), getcompleteweaponname( "intel_take_photo" ), getcompleteweaponname( "intel_found_usb" ), getcompleteweaponname( "iw8_nukecore_mp" ), getcompleteweaponname( "tur_gun_lighttank_mp" ), getcompleteweaponname( "tur_gun_cargo_truck_mp" ), getcompleteweaponname( "tur_gun_little_bird_right_mp" ), getcompleteweaponname( "tur_gun_little_bird_left_mp" ), getcompleteweaponname( "intel_pickup_phone" ), getcompleteweaponname( "iw8_spotter_scope_mp" ), getcompleteweaponname( "iw8_la_mike32_mp" ), getcompleteweaponname( "iw8_green_beam_mp" ), getcompleteweaponname( "iw8_minigunksjugg_mp" ), getcompleteweaponname( "ks_remote_drone_mp" ), getcompleteweaponname( "iw8_gunless" ) ];
    level.additional_laststand_weapon_exclusion = scripts\engine\utility::array_combine( level.additional_laststand_weapon_exclusion, var_0 );
}

blank( var_0 )
{

}

initeffects()
{
    level._effect["weap_blink_friend"] = loadfx( "vfx/core/mp/killstreaks/vfx_detonator_blink_cyan.vfx" );
    level._effect["weap_blink_enemy"] = loadfx( "vfx/core/mp/killstreaks/vfx_detonator_blink_cyan.vfx" );
    level._effect["emp_stun"] = loadfx( "vfx/core/mp/equipment/vfx_emp_grenade" );
    level._effect["equipment_explode_big"] = loadfx( "vfx/core/mp/killstreaks/vfx_ims_explosion" );
    level._effect["equipment_smoke"] = loadfx( "vfx/core/mp/killstreaks/vfx_sg_damage_blacksmoke" );
    level._effect["equipment_sparks"] = loadfx( "vfx/core/mp/killstreaks/vfx_sentry_gun_explosion.vfx" );
    level.kinetic_pulse_fx["spark"] = loadfx( "vfx/iw7/_requests/mp/vfx_kinetic_pulse_shock" );
    level._effect["gas_grenade_smoke_enemy"] = loadfx( "vfx/iw7/_requests/mp/vfx_smoke_gren_mp" );
    level._effect["equipment_smoke"] = loadfx( "vfx/core/mp/killstreaks/vfx_sg_damage_blacksmoke" );
    level._effect["placeEquipmentFailed"] = loadfx( "vfx/iw7/_requests/mp/vfx_generic_equipment_exp.vfx" );
    level._effect["penetration_railgun_explosion"] = loadfx( "vfx/iw7/core/expl/weap/chargeshot/vfx_expl_chargeshot.vfx" );
    level._effect["flash_bang_explode"] = loadfx( "vfx/iw8_mp/equipment/flashbang/vfx_flash_bang.vfx" );
    level._effect["glsmoke"] = loadfx( "vfx/iw8_mp/equipment/smoke_grenade/vfx_smoke_gren_ch.vfx" );
    level._effect["xmike109ThermiteBounce"] = loadfx( "vfx/iw8_mp/equipment/vfx_xmike109_thermite_bounce" );
    level._effect["aalpha12_explo"] = loadfx( "vfx/iw8_mp/equipment/vfx_aalpha12_projectile_explo" );
}

setupminesettings()
{
    var_0 = 70;
    level.claymoredetectiondot = cos( var_0 );
    level.claymoredetectionmindist = 20;
    level.claymoredetectiongraceperiod = 0.75;
    level.claymoredetonateradius = 192;
    level.minedetectiongraceperiod = 0.3;
    level.minedetectionradius = 150;
    level.minedetectionheight = 20;
    level.minedamageradius = 256;
    level.minedamagemin = 600;
    level.minedamagemax = 1200;
    level.minedamagehalfheight = 300;
    level.mineselfdestructtime = 600;
    level.mine_launch = loadfx( "vfx/core/impacts/bouncing_betty_launch_dirt" );
    level.mine_explode = loadfx( "vfx/core/expl/bouncing_betty_explosion.vfx" );
    level.delayminetime = 1.5;
    level.c4explodethisframe = 0;
    level.mines = [];
}

setupconfigs()
{
    var_0 = spawnstruct();
    var_0.mine_beacon["enemy"] = loadfx( "vfx/core/equipment/light_c4_blink.vfx" );
    var_0.mine_beacon["friendly"] = loadfx( "vfx/misc/light_mine_blink_friendly" );
    level.weaponconfigs["c4_mp_p"] = var_0;
    var_0 = spawnstruct();
    var_0.armingdelay = 1.5;
    var_0.detectionradius = 232;
    var_0.detectionheight = 512;
    var_0.detectiongraceperiod = 1;
    var_0.headiconoffset = 20;
    var_0.killcamoffset = 12;
    level.weaponconfigs["proximity_explosive_mp"] = var_0;
    var_0 = spawnstruct();
    var_1 = 800;
    var_2 = 200;
    var_0.radius_max_sq = var_1 * var_1;
    var_0.radius_min_sq = var_2 * var_2;
    var_0.onexplodesfx = "flash_grenade_expl_trans";
    var_0.vfxradius = 72;
    level.weaponconfigs["flash_grenade_mp"] = var_0;
}

iteminits()
{
    clustergrenadeinit();
    throwingknifec4init();
}

throwingknifec4init()
{
    level._effect["throwingknifec4_explode"] = loadfx( "vfx/iw7/_requests/mp/power/vfx_bio_spike_exp.vfx" );
}

clustergrenadeinit()
{
    level._effect["clusterGrenade_explode"] = loadfx( "vfx/iw7/_requests/mp/vfx_cluster_gren_single_runner.vfx" );
}

getweapongunsmithattachmenttable( var_0 )
{
    var_1 = undefined;

    if ( issameweapon( var_0 ) )
        var_1 = var_0.basename;
    else
        var_1 = var_0;

    var_2 = scripts\cp\utility::getweaponrootname( var_1 );
    return "mp/gunsmith/" + getsubstr( var_2, 4 ) + "_attachments.csv";
}

getcompletenameforweapon( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = var_0;
    var_8 = strtok( var_7, "_" );
    var_9 = 0;

    if ( var_8[0] == "alt" )
        var_9++;

    if ( var_8[var_9] == "iw7" )
        return;
    else if ( var_8[var_9] == "iw8" )
    {
        var_10 = var_0;

        if ( !isdefined( var_1 ) )
            var_11 = [ "none", "none", "none", "none", "none", "none" ];
        else
            var_11 = var_1;

        if ( !isdefined( var_2 ) )
            var_12 = "none";
        else
            var_12 = var_2;

        if ( !isdefined( var_3 ) )
            var_13 = "none";
        else
            var_13 = var_3;

        if ( !isdefined( var_4 ) )
            var_14 = -1;
        else
            var_14 = var_4;

        if ( !isdefined( var_5 ) )
            var_15 = 0;
        else
            var_15 = var_5;

        if ( !isdefined( var_6 ) )
            var_16 = "none";
        else
            var_16 = var_6;

        return createheadicon( buildweapon( var_10, var_11, var_12, var_13, var_14, 1, 1, var_15, var_16 ) );
    }
}

turret_monitoruse()
{
    for (;;)
    {
        self waittill( "trigger", var_0 );
        thread turret_playerthread( var_0 );
    }
}

turret_playerthread( var_0 )
{
    var_0 endon( "death" );
    var_0 endon( "disconnect" );
    var_0 notify( "weapon_change", isundefinedweapon() );
    self waittill( "turret_deactivate" );
    var_0 notify( "weapon_change", var_0 getcurrentweapon() );
}

onplayerconnect()
{
    for (;;)
    {
        level waittill( "connected", var_0 );
        var_0.hits = 0;
        var_0 thread onplayerspawned();
        var_0 thread watchmissileusage();
        var_0 thread sniperdustwatcher();
        var_0 thread watchjavelinusage();
        var_0 thread updatelastweapon();
        var_0 thread watchchangeweapon();
        var_0 thread scripts\cp\equipment\cp_stinger::watchlauncherusage();
    }
}

watchjavelinusage()
{
    scripts\cp\equipment\cp_javelin::javelinusageloop();
}

watchchangeweapon()
{
    self endon( "disconnect" );
    level endon( "game_ended" );

    for (;;)
    {
        var_0 = self getcurrentweapon();

        if ( isdefined( var_0 ) )
        {
            dochangeweapon( var_0 );

            if ( scripts\cp\utility::preventleave() )
            {
                for ( var_1 = 0; var_1 < self.primaryweapons.size; var_1++ )
                {
                    var_2 = self.primaryweapons[var_1].basename;
                    var_3 = scripts\cp\utility::strip_suffix( var_2, "_mp" );

                    if ( var_1 < 2 )
                        self setplayerdata( "cp", "waveSurvivalWeapon", var_1, var_3 );
                }
            }
        }

        self waittill( "weapon_change" );
    }
}

dochangeweapon( var_0 )
{
    updateweaponspeed( var_0 );
    updatelastweaponobj( var_0 );
    updatelauncherusage();
    _id_12AF1( var_0 );
    _id_11D05( var_0 );
    updateweaponperks();
    updatedefaultflinchreduction();
    scripts\cp_mp\challenges::updateweaponchangetime();
    riotshieldonweaponchange( var_0 );

    if ( isdefined( self.suit ) && self.suit == "iw8_suit_cp" )
        thread scripts\cp_mp\gestures::_id_12974();
}

_id_11D05( var_0 )
{
    if ( istrue( level.give_killstreak_cluster ) )
        return;

    if ( _id_11FF5( var_0 ) )
    {
        scripts\common\utility::allow_mount_top( 0, "scriptedMountDisable" );
        scripts\common\utility::allow_mount_side( 0, "scriptedMountDisable" );
        thread _id_11D06();
    }
}

_id_11D06()
{
    scripts\engine\utility::_id_12E3F( "death_or_disconnect", "weapon_change" );
    scripts\common\utility::allow_mount_top( 1, "scriptedMountDisable" );
    scripts\common\utility::allow_mount_side( 1, "scriptedMountDisable" );
}

_id_11FF5( var_0 )
{
    var_1 = scripts\cp\utility::getweaponrootname( var_0 );

    if ( var_1 == "iw8_lm_sierrax" && var_0 hasattachment( "stocksaw_sierrax" ) )
        return 1;

    return 0;
}

_id_12AF1( var_0 )
{
    self notify( "end_dragBreath" );

    if ( getweapongroup( var_0 ) == "weapon_shotgun" )
    {
        if ( proplist( var_0 ) )
            thread playersetattractionextradata( var_0 );
    }
}

playersetattractionextradata( var_0 )
{
    var_0.propkilledend = 1;
    thread _id_124FD( var_0 );
}

_id_124FD( var_0 )
{
    self endon( "disconnect" );
    scripts\engine\utility::_id_12E3F( "end_dragBreath", "death" );

    if ( isdefined( var_0 ) )
        var_0.propkilledend = undefined;
}

proplist( var_0 )
{
    var_1 = getweaponammopoolname( var_0 );
    return var_1 == "WEAPON/AMMO_DB";
}

updateweaponspeed( var_0 )
{
    if ( var_0.basename == "none" )
        return;
    else if ( scripts\cp\utility::issuperweapon( var_0.basename ) )
    {
        scripts\cp\cp_loadout::updatemovespeedscale();
        return;
    }
    else if ( scripts\cp\utility::iskillstreakweapon( var_0.basename ) )
        return;
    else if ( var_0.basename == "iw8_fists_mp_ls" )
    {
        scripts\cp\cp_loadout::updatemovespeedscale();
        return;
    }
    else if ( var_0.inventorytype != "primary" && var_0.inventorytype != "altmode" )
        return;

    scripts\cp\cp_loadout::updatemovespeedscale();
}

updatedefaultflinchreduction()
{
    if ( isagent( self ) )
        return;

    var_0 = undefined;
    var_1 = _id_12FE2( self.currentweapon );

    if ( var_1 == 4 )
        var_0 = 0.85;
    else if ( var_1 == 3 )
        var_0 = 0.2;
    else if ( var_1 == 2 )
        var_0 = 0.08;
    else if ( var_1 == 1 )
        var_0 = 0.25;
    else
        var_0 = 0.05;

    updateviewkickscale( var_0 );
}

updateviewkickscale( var_0 )
{
    if ( isdefined( var_0 ) )
        self.viewkickscale = var_0;

    if ( isdefined( self.overchargeviewkickscale ) )
        var_0 = self.overchargeviewkickscale;
    else if ( isdefined( self.overrideviewkickscale ) )
    {
        var_0 = self.overrideviewkickscale;
        var_1 = _id_12FE2( self getcurrentweapon() );

        if ( var_1 == 1 )
            var_0 = self.overrideviewkickscalepistol;
        else if ( var_1 == 3 )
            var_0 = self.tank_empupdate;
        else if ( var_1 == 2 )
            var_0 = self.tank_path;
        else if ( var_1 == 4 )
            var_0 = self.overrideviewkickscalesniper;
    }
    else if ( isdefined( self.viewkickscale ) )
        var_0 = self.viewkickscale;
    else
        var_0 = 1.0;

    var_0 = clamp( var_0, 0.0, 1.0 );
    self setviewkickscale( var_0 );
}

_id_12FE2( var_0 )
{
    var_1 = "none";
    var_2 = -1;

    if ( isdefined( var_0 ) && !nullweapon( var_0 ) )
    {
        var_1 = weaponclass( var_0 );

        switch ( var_1 )
        {
            case "pistol":
                var_2 = 1;
                break;
            case "sniper":
                if ( getweapongroup( var_0 ) == "weapon_dmr" )
                {
                    if ( var_0.basename == "iw8_sn_kilo98_mp" )
                        var_2 = 2;
                    else
                        var_2 = 3;
                }
                else
                    var_2 = 4;

                break;
            default:
                var_2 = 0;
        }
    }

    return var_2;
}

updateweaponperks()
{
    self.prevweaponobj = doweaponperkupdate( self.prevweaponobj );
}

doweaponperkupdate( var_0 )
{
    var_1 = self getcurrentweapon();
    weaponattachmentperkupdate( var_1, var_0 );
    weaponperkupdate( var_1, var_0 );
    return var_1;
}

weaponperkupdate( var_0, var_1 )
{
    if ( !getqueuedspleveltransients( var_1 ) )
    {
        var_2 = scripts\cp\utility::getweaponrootname( var_1.basename );
        var_3 = weaponperkmap( var_2 );

        if ( isdefined( var_3 ) )
            scripts\cp\perks\cp_perks::removeperk( var_3 );
    }

    if ( !getqueuedspleveltransients( var_0 ) )
    {
        var_4 = scripts\cp\utility::getweaponrootname( var_0.basename );
        var_5 = weaponperkmap( var_4 );

        if ( isdefined( var_5 ) )
            scripts\cp\utility::giveperk( var_5 );
    }
}

weaponperkmap( var_0 )
{
    if ( isdefined( level.weaponmapdata[var_0] ) && isdefined( level.weaponmapdata[var_0].perk ) )
        return level.weaponmapdata[var_0].perk;

    return undefined;
}

weaponattachmentperkupdate( var_0, var_1 )
{
    var_2 = undefined;
    var_3 = undefined;

    if ( !getqueuedspleveltransients( var_1 ) )
    {
        var_3 = getweaponattachments( var_1 );

        if ( isdefined( var_3 ) && var_3.size > 0 )
        {
            foreach ( var_5 in var_3 )
            {
                var_6 = attachmentperkmap( var_5 );

                if ( !isdefined( var_6 ) )
                    continue;

                scripts\cp\perks\cp_perks::removeperk( var_6 );
            }
        }
    }

    if ( !getqueuedspleveltransients( var_0 ) )
    {
        var_2 = getweaponattachments( var_0 );

        if ( isdefined( var_2 ) && var_2.size > 0 )
        {
            foreach ( var_9 in var_2 )
            {
                var_6 = attachmentperkmap( var_9 );

                if ( !isdefined( var_6 ) )
                    continue;

                scripts\cp\utility::giveperk( var_6 );
            }
        }
    }
}

attachmentperkmap( var_0 )
{
    if ( isdefined( level.attachmentmap_attachtoperk[var_0] ) )
        return level.attachmentmap_attachtoperk[var_0];

    return undefined;
}

updatelastweaponobj( var_0 )
{
    self.lastweaponobj = var_0;

    if ( isnormallastweapon( var_0 ) )
        self.lastnormalweaponobj = var_0;

    if ( isdroppableweapon( var_0 ) )
        self.lastdroppableweaponobj = var_0;

    if ( iscacprimaryorsecondary( var_0 ) )
        self.lastcacweaponobj = var_0;
}

_id_127E2()
{
    for (;;)
    {
        self waittill( "grenade_pullback", var_0 );

        if ( !nullweapon( var_0 ) && var_0.basename == "c4_mp_p" && scripts\cp\utility::isriotshield( self getcurrentweapon() ) )
            self.suicidedfromspawnwait = 1;
    }
}

_id_127E8()
{
    if ( !istrue( self.suicidedfromspawnwait ) )
    {
        var_0 = self getheldoffhand();

        if ( !nullweapon( var_0 ) && var_0.basename != "c4_mp_p" && scripts\cp\utility::isriotshield( self getcurrentweapon() ) && scripts\cp\utility::rear_minigun_origin_offset( var_0 ) )
            self.suicidedfromspawnwait = 1;
    }
}

_id_127E3( var_0 )
{
    self notify( "trackRiotShield_monitorShieldAttach" );
    self endon( "trackRiotShield_monitorShieldAttach" );
    self endon( "death_or_disconnect" );
    self endon( "faux_spawn" );
    self endon( "riotshield_detach" );
    childthread _id_127E2();

    if ( isdefined( var_0 ) )
        self._id_12ECB = var_0;
    else if ( !isdefined( self._id_12ECB ) )
        self._id_12ECB = 0;

    while ( scripts\cp\utility::riotshield_hasweapon() )
    {
        _id_127E8();
        var_1 = scripts\cp\cp_laststand::player_in_laststand( self );

        if ( !var_1 )
        {
            if ( istrue( self._id_12ECB ) )
            {
                self.restartcircleelimination = 1;
                self.restartwrapper = gettime() + 1300;
            }
            else if ( isdefined( self.restartwrapper ) && gettime() >= self.restartwrapper )
            {
                self.restartcircleelimination = undefined;
                self.restartwrapper = undefined;
            }

            self._id_12ECB = 0;
        }
        else
        {
            self.restartcircleelimination = undefined;
            self.restartwrapper = undefined;
            self._id_12ECB = 1;
        }

        if ( self isonladder() )
            _id_127E5();
        else if ( self isinexecutionattack() )
            _id_127E5();
        else if ( self isinexecutionvictim() )
            _id_127E6();
        else if ( self isparachuting() || self isskydiving() )
            _id_127E5();
        else if ( istrue( self.restartcircleelimination ) )
            _id_127E5();
        else if ( istrue( self.suicidedfromspawnwait ) )
        {
            if ( nullweapon( self getheldoffhand() ) )
            {
                self.suicidedfromspawnwait = undefined;
                _id_127E7();
            }
            else
                _id_127E5();
        }
        else
            _id_127E7();

        waitframe();
    }

    _id_127E7();
}

_id_127E5()
{
    var_0 = isdefined( self.riotshieldmodel );
    var_1 = isdefined( self.riotshieldmodelstowed );

    if ( !var_1 )
    {
        if ( var_0 )
            scripts\cp\utility::riotshield_move( 1 );
        else
            scripts\cp\utility::riotshield_attach( 0, riotshield_getmodel() );
    }
}

_id_127E4()
{
    var_0 = isdefined( self.riotshieldmodel );
    var_1 = isdefined( self.riotshieldmodelstowed );

    if ( !var_0 )
    {
        if ( var_1 )
            scripts\cp\utility::riotshield_move( 0 );
        else
            scripts\cp\utility::riotshield_attach( 1, riotshield_getmodel() );
    }
}

_id_127E6()
{
    var_0 = isdefined( self.riotshieldmodel );
    var_1 = isdefined( self.riotshieldmodelstowed );

    if ( var_0 )
        scripts\cp\utility::riotshield_detach( 1 );

    if ( var_1 )
        scripts\cp\utility::riotshield_detach( 0 );
}

_id_127E7()
{
    if ( scripts\cp\utility::riotshield_hasweapon() )
    {
        var_0 = scripts\cp\utility::isriotshield( self getcurrentweapon() );

        if ( var_0 )
        {
            _id_127E4();
            return;
        }

        _id_127E5();
        return;
    }
    else
    {
        var_1 = isdefined( self.riotshieldmodel );
        var_2 = isdefined( self.riotshieldmodelstowed );

        if ( var_1 )
            scripts\cp\utility::riotshield_detach( 1 );

        if ( var_2 )
            scripts\cp\utility::riotshield_detach( 0 );
    }
}

riotshieldonweaponchange( var_0 )
{
    if ( scripts\cp\utility::riotshield_hasweapon() )
        thread _id_127E3();
    else
    {
        _id_127E7();
        _id_11B39();
        self notify( "riotshield_detach" );
    }
}

_id_11B39( var_0 )
{
    self.restartcircleelimination = undefined;
    self.restartwrapper = undefined;
    self._id_12ECB = undefined;

    if ( istrue( var_0 ) )
    {
        self.hasriotshield = undefined;
        self.hasriotshieldequipped = undefined;
        self.riotshieldmodel = undefined;
        self.riotshieldmodelstowed = undefined;
    }
}

get_enemies_in_range( var_0, var_1, var_2, var_3 )
{
    var_4 = cos( var_3 );
    var_5 = var_1 * var_1;
    var_6 = [];

    foreach ( var_8 in level.spawned_enemies )
    {
        if ( distancesquared( var_0, var_8.origin ) < var_5 )
        {
            if ( scripts\engine\utility::within_fov( var_0, var_2.angles, var_8.origin, var_4 ) )
                var_6[var_6.size] = var_8;
        }
    }

    return var_6;
}

sniperdustwatcher()
{
    self endon( "death" );
    self endon( "disconnect" );
    level endon( "game_ended" );
    var_0 = undefined;

    for (;;)
    {
        self waittill( "weapon_fired" );

        if ( self getstance() != "prone" )
            continue;

        var_1 = self getcurrentweapon();

        if ( var_1.classname != "weapon_sniper" )
            continue;

        var_2 = anglestoforward( self.angles );

        if ( !isdefined( var_0 ) || gettime() - var_0 > 2000 )
        {
            var_0 = gettime();
            continue;
        }
    }
}

unset_scriptable_part_state_after_time( var_0, var_1 )
{
    self endon( "death" );
    wait( var_0 );
    self setscriptablepartstate( "projectile", "inactive" );
    var_1 notify( "ranged_katana_missile_done" );

    if ( isdefined( self ) )
        self delete();
}

watchmissileusage()
{
    self endon( "disconnect" );
    thread listen_for_custom_proj_dvar();

    for (;;)
    {
        var_0 = waittill_missile_fire();
        var_1 = undefined;

        switch ( var_0.weapon_name )
        {
            case "iw8_la_gromeo_mp":
            case "iw8_la_gromeoks_mp":
                var_1 = self.missilelaunchertarget;
                break;
            case "iw8_la_juliet_mp":
                var_1 = self.javelin.target;
                break;
            case "iw8_la_mike32_mp":
                var_0 thread launch_custom_gl_projectile( var_0.owner );
                break;
            case "remotemissile_projectile_mp":
                var_0 thread grenade_earthquake();
                break;
            case "glsmoke":
                var_0 thread smokegrenadeused( 1 );
                break;
            case "glconc":
                var_0 thread watchconcussiongrenadeexplode();
                break;
            case "glflash":
                break;
            case "glincendiary":
                thread scripts\cp\equipment\cp_thermite::thermite_used( var_0, 1 );
                break;
            case "glsnap":
                thread scripts\cp\equipment\cp_snapshot_grenade::snapshot_grenade_used( var_0, 1 );
                break;
            default:
                break;
        }

        if ( scripts\cp_mp\utility\weapon_utility::islockonlauncher( var_0.weapon_name ) && isdefined( var_1 ) )
        {
            var_0.scriptable_carriable_damage_internal = var_1;
            level notify( "stinger_fired", self, var_0, var_1 );
            thread scripts\cp_mp\utility\weapon_utility::watchtargetlockedontobyprojectile( var_1, var_0 );
        }

        if ( isplayer( self ) && isdefined( var_0 ) )
            var_0.adsfire = scripts\cp\utility::isplayerads();
    }
}

issmallmissile( var_0 )
{
    return 0;
}

isexplosivemissile( var_0 )
{
    var_1 = getweaponbasename( var_0 );

    switch ( var_1 )
    {
        case "pop_rocket_proj_mp":
        case "ac130_105mm_mp":
        case "ac130_40mm_mp":
        case "ac130_25mm_mp":
            return 0;
    }

    return 1;
}

listen_for_custom_proj_dvar()
{
    self endon( "disconnect" );

    for (;;)
    {
        var_0 = getdvar( "scr_gl_proj", "none" );

        if ( var_0 != "none" )
            self.gl_proj_override = var_0;

        wait 0.1;
    }
}

launch_custom_gl_projectile( var_0 )
{
    var_1 = get_custom_gl_projectile( var_0 );

    if ( isdefined( var_1 ) )
    {
        self delete();

        if ( isdefined( level.custom_proj_func[var_1] ) )
            level thread [[ level.custom_proj_func[var_1] ]]( var_0 );
    }
}

get_custom_gl_projectile( var_0 )
{
    if ( isdefined( var_0.gl_proj_override ) )
        return var_0.gl_proj_override;

    return undefined;
}

custom_gl_proj_func_init()
{
    level.custom_proj_func["concertina"] = ::launchconcertinabomb;
    level.custom_proj_func["thermite"] = ::launchthermite;
    level.custom_proj_func["molotov"] = ::launchmolotov;
    level.custom_proj_func["semtex"] = ::launchstickytimedgrenade;
    level.custom_proj_func["c4"] = ::launchc4grenade;
}

create_new_projectile( var_0, var_1 )
{
    var_2 = anglestoforward( var_1 getplayerangles() );
    var_2 = var_2 * 2000;

    if ( var_1 tagexists( "tag_flash" ) )
        var_3 = var_1 gettagorigin( "tag_flash" );
    else
        var_3 = var_1 geteye();

    var_4 = var_1 launchgrenade( var_0, var_3, var_2 );
    var_4.owner = var_1;
    return var_4;
}

launchthermite( var_0 )
{
    var_1 = create_new_projectile( "thermite_proj_cp", var_0 );
    var_0 thread scripts\cp\equipment\cp_thermite::thermite_used( var_1 );
}

launchmolotov( var_0 )
{
    var_1 = create_new_projectile( "molotov_mp", var_0 );
    var_0 thread scripts\cp\powers\coop_molotov::molotov_used( var_1 );
    self delete();
}

launchstickytimedgrenade( var_0 )
{
    var_1 = create_new_projectile( "semtex_mp", var_0 );
    var_0 thread semtexused( var_1 );
    self delete();
}

launchc4grenade( var_0 )
{
    var_1 = create_new_projectile( "c4_mp_p", var_0 );
    var_0 thread scripts\cp\cp_c4::c4_used( var_1 );
    self delete();
}

launchexplosivetiplogic( var_0 )
{
    self waittill( "explode", var_1, var_2, var_3, var_4 );
    var_0 endon( "disconnect" );
    var_0 endon( "joined_team" );
    var_0 endon( "joined_spectators" );
    var_5 = spawn( "script_model", var_1 );
    var_5 setmodel( "offhand_wm_grenade_thermite" );
    var_5 setscriptablepartstate( "effects", "impact", 0 );
    var_5.trigger = spawn( "trigger_radius", var_5.origin, 0, 125, 72 );
    var_5.trigger thread watch_for_thermite_triggered( var_0 );
    wait 0.5;
    var_6 = 1;

    while ( var_6 <= 10 )
    {
        var_7 = var_6 + 1;
        var_6 = var_7;
        wait 0.5;
    }

    var_5 thread bolt_destroy();
}

wait_for_crate_drop_to_ground( var_0 )
{
    var_1 = scripts\engine\utility::drop_to_ground( var_0.origin + ( 0, 0, -100 ), 0, -5000 );
    var_2 = 900;
    var_3 = 1000;
    var_4 = 0;

    for (;;)
    {
        if ( distancesquared( var_0.origin, var_1 ) <= var_2 )
            return var_1;

        if ( var_4 >= var_3 )
            return var_1;

        var_4 = var_4 + 50;
        waitframe();
    }
}

watch_for_thermite_triggered( var_0 )
{
    self endon( "end_thermite_trigger" );
    self endon( "death" );

    for (;;)
    {
        self waittill( "trigger", var_1 );

        if ( isplayer( var_1 ) )
            continue;

        if ( !var_1 scripts\cp\utility::is_soldier_agent() )
            continue;

        if ( isalive( var_1 ) && !istrue( var_1.marked_for_death ) )
        {
            var_1.marked_for_death = 1;
            thread watch_for_victim_death( var_1 );
            var_1 thread scripts\cp\utility::damage_over_time( var_1, var_0, 2.5, 100, "MOD_EXPLOSIVE" );
        }
    }
}

watch_for_victim_death( var_0 )
{
    self endon( "death" );
    var_0 waittill( "death" );
    var_0.marked_for_death = undefined;
    playfx( level._effect["vfx_thermite_end"], var_0.origin );
    self delete();
}

bolt_destroy()
{
    self setscriptablepartstate( "effects", "burnEnd", 0 );
    self notify( "end_thermite_trigger" );

    if ( isdefined( self.trigger ) )
        self.trigger delete();

    self delete();
}

waitfortriggernotify( var_0 )
{
    self endon( "death" );

    for (;;)
    {
        self waittill( "trigger", var_1 );

        if ( isplayer( var_1 ) )
            continue;

        if ( !var_1 scripts\cp\utility::is_soldier_agent() )
            continue;

        if ( isalive( var_1 ) && !istrue( var_1.marked_for_death ) )
        {
            var_1.marked_for_death = 1;
            var_1 thread scripts\cp\utility::damage_over_time( var_1, var_0, 5, 100, "MOD_EXPLOSIVE" );
        }
    }
}

launchconcertinabomb( var_0 )
{
    self waittill( "missile_stuck", var_1, var_2 );
    var_3 = spawn( "trigger_radius", self.origin, 0, 500, 72 );
    var_3 thread waitfortriggernotify( var_0 );
    wait 6;
    var_3 delete();
}

removelinkafterdelay( var_0, var_1 )
{
    wait( var_1 );

    if ( scripts\engine\utility::array_contains( level.strrazorlinks, var_0 ) )
        level.strrazorlinks = scripts\engine\utility::array_remove( level.strrazorlinks, var_0 );
}

lockonlaunchers_gettargetarray( var_0 )
{
    var_1 = [];
    var_2 = 0;
    var_3 = lockonlaunchers_gettargetvehiclerefs();

    if ( level.teambased )
    {
        if ( isdefined( var_0 ) && var_0 == 1 )
        {
            foreach ( var_5 in level.characters )
            {
                if ( isdefined( var_5 ) && isalive( var_5 ) && ( var_5.team != self.team || var_2 ) )
                    var_1[var_1.size] = var_5;
            }
        }

        if ( isdefined( level.activekillstreaks ) )
        {
            foreach ( var_8 in level.activekillstreaks )
            {
                if ( isdefined( var_8.affectedbylockon ) && ( var_8.team != self.team || var_2 ) )
                    var_1[var_1.size] = var_8;
            }
        }

        if ( isdefined( level.special_lockon_target_list ) )
        {
            foreach ( var_11 in level.special_lockon_target_list )
                var_1[var_1.size] = var_11;
        }

        if ( isdefined( level.cratedropdata ) )
        {
            if ( isdefined( level.cratedropdata.ac130s ) )
            {
                foreach ( var_14 in level.cratedropdata.ac130s )
                {
                    if ( var_14.team != self.team || var_2 )
                        var_1[var_1.size] = var_14;
                }
            }
        }

        foreach ( var_17 in var_3 )
        {
            var_18 = scripts\cp_mp\vehicles\vehicle_tracking::vehicle_tracking_getgameinstances( var_17 );

            foreach ( var_20 in var_18 )
            {
                if ( !scripts\cp_mp\vehicles\vehicle::_id_12C95( var_20, self ) || var_2 )
                    var_1[var_1.size] = var_20;
            }
        }
    }
    else
    {
        if ( isdefined( var_0 ) && var_0 == 1 )
        {
            foreach ( var_5 in level.characters )
            {
                if ( ( !isdefined( var_5 ) || !isalive( var_5 ) ) && !var_2 )
                    continue;

                var_1[var_1.size] = var_5;
            }
        }

        if ( isdefined( level.activekillstreaks ) )
        {
            foreach ( var_8 in level.activekillstreaks )
            {
                if ( isdefined( var_8.affectedbylockon ) && ( isdefined( var_8.owner ) && var_8.owner != self || var_2 ) )
                    var_1[var_1.size] = var_8;
            }
        }

        if ( isdefined( level.cratedropdata ) )
        {
            if ( isdefined( level.cratedropdata.ac130s ) )
            {
                foreach ( var_14 in level.cratedropdata.ac130s )
                {
                    if ( var_14.owner != self || var_2 )
                        var_1[var_1.size] = var_14;
                }
            }
        }

        foreach ( var_17 in var_3 )
        {
            var_18 = scripts\cp_mp\vehicles\vehicle_tracking::vehicle_tracking_getgameinstances( var_17 );

            foreach ( var_20 in var_18 )
            {
                if ( !isdefined( var_20.owner ) )
                {
                    var_1[var_1.size] = var_20;
                    continue;
                }

                if ( var_20.owner != self || var_2 )
                    var_1[var_1.size] = var_20;
            }
        }
    }

    foreach ( var_34 in var_1 )
    {
        if ( !isvector( var_34.origin ) )
            var_1 = scripts\engine\utility::array_remove( var_1, var_34 );
    }

    return var_1;
}

lockonlaunchers_gettargetvehiclerefs()
{
    return [ "apc_russian", "atv", "big_bird", "cargo_truck", "cargo_truck_mg", "cop_car", "hoopty", "hoopty_truck", "jeep", "large_transport", "light_tank", "little_bird", "little_bird_mg", "medium_transport", "pickup_truck", "tac_rover", "technical", "van" ];
}

add_to_special_lockon_target_list( var_0 )
{
    if ( !isdefined( level.special_lockon_target_list ) )
        level.special_lockon_target_list = [];

    if ( !scripts\engine\utility::array_contains( level.special_lockon_target_list, var_0 ) )
        level.special_lockon_target_list = scripts\engine\utility::array_add( level.special_lockon_target_list, var_0 );
}

remove_from_special_lockon_target_list( var_0 )
{
    if ( !isdefined( level.special_lockon_target_list ) )
        level.special_lockon_target_list = [];

    if ( scripts\engine\utility::array_contains( level.special_lockon_target_list, var_0 ) )
        level.special_lockon_target_list = scripts\engine\utility::array_remove( level.special_lockon_target_list, var_0 );
}

getrandomdirection( var_0, var_1 )
{
    var_2 = anglestoup( var_1 );
    var_3 = anglestoright( var_1 );
    var_4 = anglestoforward( var_1 );
    var_5 = randomint( 360 );
    var_6 = randomint( 360 );
    var_7 = cos( var_6 ) * sin( var_5 );
    var_8 = sin( var_6 ) * sin( var_5 );
    var_9 = cos( var_5 );
    var_10 = ( var_7 * var_3 + var_8 * var_4 + var_9 * var_2 ) / 0.33;
    return -1 * var_10;
}

waittill_missile_fire()
{
    self waittill( "missile_fire", var_0, var_1 );

    if ( isdefined( var_0 ) )
    {
        if ( !isdefined( var_0.weapon_name ) )
        {
            if ( var_1.isalternate )
            {
                var_2 = scripts\cp\utility::attachmentmap_tobase( var_1.underbarrel );

                switch ( var_2 )
                {
                    case "glconc":
                        var_0.weapon_name = "glconc";
                        break;
                    case "glflash":
                        var_0.weapon_name = "glflash";
                        break;
                    case "glincendiary":
                        var_0.weapon_name = "glincendiary";
                        break;
                    case "glsnap":
                        var_0.weapon_name = "glsnap";
                        break;
                    case "glsmoke":
                        var_0.weapon_name = "glsmoke";
                        break;
                    case "gl":
                    default:
                        var_0.weapon_name = "gl";
                        break;
                }
            }
            else
                var_0.weapon_name = var_1.basename;
        }

        if ( !isdefined( var_0.owner ) )
            var_0.owner = self;

        if ( !isdefined( var_0.team ) )
            var_0.team = self.team;
    }

    return var_0;
}

onplayerspawned()
{
    self endon( "disconnect" );

    for (;;)
    {
        self waittill( "spawned_player" );
        self.currentweaponatspawn = self getcurrentweapon();
        self.empendtime = 0;
        self.concussionendtime = 0;
        self.hits = 0;

        if ( !isdefined( self.trackingweapon ) )
        {
            self.trackingweapon = isundefinedweapon();
            self.trackingweaponshots = 0;
            self.trackingweaponkills = 0;
            self.trackingweaponhits = 0;
            self.trackingweaponheadshots = 0;
            self.trackingweapondeaths = 0;
        }

        _id_11B39( 1 );
        thread watchgrenadeusage();
        thread scripts\mp\trials\mp_harbor_floorislava_create_script::safehouse_restart();
        thread stancerecoiladjuster();
        thread initlauncherlogic();
        self.lasthittime = [];
        self.droppeddeathweapon = undefined;
        self.tookweaponfrom = [];
        thread watchforweaponchange();
        thread watchforweapondropped();
        thread monitorlauncherspawnedgrenades();
        self.currentweaponatspawn = undefined;
        self.trophyremainingammo = undefined;
    }
}

initlauncherlogic()
{
    var_0 = self getcurrentweapon();

    switch ( var_0.basename )
    {
        case "iw8_la_gromeo_mp":
            thread scripts\mp\brclientmatchdata::missilelauncherusageloop();
            break;
        case "iw8_la_juliet_mp":
            thread scripts\cp\equipment\cp_javelin::javelinusageloop();
            break;
    }
}

updatelauncherusage()
{
    var_0 = self getcurrentweapon();
    var_1 = scripts\cp\utility::getweaponrootname( var_0.basename );

    switch ( var_1 )
    {
        default:
            break;
        case "iw8_la_gromeo":
            thread scripts\mp\brclientmatchdata::initmissilelauncherusage();
            break;
        case "iw8_la_juliet":
            thread scripts\cp\equipment\cp_javelin::javelin_reset();
            break;
        case "iw8_sn_crossbow":
            thread scripts\cp\helicopter\utility::players_not_in_laststand();
            break;
        case "iw8_sn_xmike109":
            thread scripts\cp\stealth\manager::playerzombiewaittillinputreturn();
            break;
        case "iw8_sh_aalpha12":
            thread scripts\cp\drone\emp_drone::playerzombiewaittillinputreturn();
            break;
    }

    self notify( "end_launcher" );

    if ( scripts\cp\utility::_hasperk( "specialty_fastreload_launchers" ) )
    {
        var_2 = weaponclass( var_0.basename ) == "rocketlauncher";

        if ( var_2 && !istrue( self.fastreloadlaunchers ) )
        {
            scripts\cp\utility::giveperk( "specialty_fastreload" );
            self.fastreloadlaunchers = 1;
        }
        else if ( istrue( self.fastreloadlaunchers ) )
        {
            scripts\cp\utility::_unsetperk( "specialty_fastreload" );
            self.fastreloadlaunchers = undefined;
        }
    }

    switch ( var_1 )
    {
        default:
            break;
        case "iw8_sn_crossbow":
            thread scripts\cp\helicopter\utility::forcestuckdamage( var_0 );
            break;
        case "iw8_la_gromeo":
            thread scripts\mp\brclientmatchdata::missilelauncherusageloop();
            break;
        case "iw8_la_juliet":
            thread scripts\cp\equipment\cp_javelin::javelinusageloop();
            break;
        case "iw8_sn_xmike109":
            thread scripts\cp\stealth\manager::_id_12B48( var_0 );
            break;
        case "iw8_sh_aalpha12":
            thread scripts\cp\drone\emp_drone::_id_12B48( var_0 );
            break;
    }
}

watchforweapondropped()
{
    self endon( "disconnect" );
    self notify( "watchForWeaponDropped" );
    self endon( "watchForWeaponDropped" );

    for (;;)
    {
        self waittill( "weapon_dropped", var_0, var_1 );

        if ( isdefined( var_0 ) && isdefined( var_1 ) )
            self.storedweapons[var_1.basename] = undefined;
    }
}

monitorlauncherspawnedgrenades()
{
    self endon( "disconnect" );
    self endon( "death" );
    self endon( "faux_spawn" );

    for (;;)
    {
        var_0 = waittill_grenade_fire();

        if ( isdefined( var_0.weapon_name ) )
        {
            if ( glprox_trygetweaponname( var_0.weapon_name ) == "stickglprox" )
                semtexused( var_0 );

            switch ( var_0.weapon_name )
            {
                case "thermite_proj_cp":
                case "thermite_mp":
                    thread scripts\cp\equipment\cp_thermite::thermite_used( var_0 );
                    break;
                case "throwingknife_drill_mp":
                case "throwingknife_electric_mp":
                case "throwingknife_fire_mp":
                case "throwingknife_mp":
                    scripts\cp_mp\equipment\throwing_knife::throwing_knife_used( var_0 );
                    break;
            }
        }
    }
}

glprox_trygetweaponname( var_0 )
{
    if ( issameweapon( var_0 ) && nullweapon( var_0 ) )
        return var_0;

    if ( isstring( var_0 ) && var_0 == "none" )
        return var_0;

    if ( getweaponbasename( var_0 ) == "iw7_glprox_mp" )
    {
        if ( isstring( var_0 ) && scripts\cp\utility::isaltmodeweapon( var_0 ) || issameweapon( var_0 ) && var_0.isalternate )
        {
            var_1 = getweaponattachments( var_0 );
            var_0 = var_1[0];
        }
        else
            var_0 = getweaponbasename( var_0 );
    }

    return var_0;
}

stancerecoiladjuster()
{
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "faux_spawn" );

    if ( !isplayer( self ) )
        return;

    self notifyonplayercommand( "adjustedStance", "+stance" );
    self notifyonplayercommand( "adjustedStance", "+goStand" );

    if ( !self isconsoleplayer() && !isai( self ) )
    {
        self notifyonplayercommand( "adjustedStance", "+togglecrouch" );
        self notifyonplayercommand( "adjustedStance", "toggleprone" );
        self notifyonplayercommand( "adjustedStance", "+movedown" );
        self notifyonplayercommand( "adjustedStance", "-movedown" );
        self notifyonplayercommand( "adjustedStance", "+prone" );
        self notifyonplayercommand( "adjustedStance", "-prone" );
    }

    for (;;)
    {
        scripts\engine\utility::_id_12E40( "adjustedStance", "sprint_begin", "weapon_change" );
        wait 0.5;

        if ( isdefined( self.onhelisniper ) && self.onhelisniper )
            continue;

        var_0 = self getstance();
        stancerecoilupdate( var_0 );
    }
}

stancerecoilupdate( var_0 )
{
    var_1 = self getcurrentprimaryweapon();
    var_2 = 0;

    if ( isrecoilreducingweapon( var_1 ) )
        var_2 = getrecoilreductionvalue();

    if ( var_0 == "prone" )
    {
        var_3 = var_1.classname;

        if ( isdefined( var_3 ) )
        {
            if ( var_3 == "weapon_lmg" )
            {
                setrecoilscale( 0, 40 );
                return;
            }

            if ( var_3 == "weapon_sniper" )
            {
                if ( var_1 hasattachment( "barrelbored", 1 ) )
                {
                    setrecoilscale( 0, 20 + var_2 );
                    return;
                }

                setrecoilscale( 0, 40 + var_2 );
                return;
                return;
            }

            return;
            return;
        }

        setrecoilscale();
        return;
    }
    else if ( var_0 == "crouch" )
    {
        var_3 = var_1.classname;

        if ( isdefined( var_3 ) )
        {
            if ( var_3 == "weapon_lmg" )
            {
                setrecoilscale( 0, 10 );
                return;
            }

            if ( var_3 == "weapon_sniper" )
            {
                if ( var_1 hasattachment( "barrelbored", 1 ) )
                {
                    setrecoilscale( 0, 10 + var_2 );
                    return;
                }

                setrecoilscale( 0, 20 + var_2 );
                return;
                return;
            }

            return;
            return;
        }

        setrecoilscale();
        return;
    }
    else if ( var_2 > 0 )
        setrecoilscale( 0, var_2 );
    else
        setrecoilscale();
}

setrecoilscale( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 0;

    if ( !isdefined( self.recoilscale ) )
        self.recoilscale = var_0;
    else
        self.recoilscale = self.recoilscale + var_0;

    if ( isdefined( var_1 ) )
    {
        if ( isdefined( self.recoilscale ) && var_1 < self.recoilscale )
            var_1 = self.recoilscale;

        var_2 = 100 - var_1;
    }
    else
        var_2 = 100 - self.recoilscale;

    if ( var_2 < 0 )
        var_2 = 0;

    if ( var_2 > 100 )
        var_2 = 100;

    if ( var_2 == 100 )
    {
        self player_recoilscaleoff();
        return;
    }

    self player_recoilscaleon( var_2 );
}

isrecoilreducingweapon( var_0 )
{
    if ( nullweapon( var_0 ) )
        return 0;

    var_1 = 0;

    if ( var_0 hasattachment( "kbsscope", 1 ) || var_0 hasattachment( "m8scope_zm", 1 ) || var_0 hasattachment( "cheytacscope", 1 ) )
        var_1 = 1;

    return var_1;
}

getrecoilreductionvalue()
{
    if ( !isdefined( self.pers["recoilReduceKills"] ) )
        self.pers["recoilReduceKills"] = 0;

    return self.pers["recoilReduceKills"] * 40;
}

watchforweaponchange()
{
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "faux_spawn" );
    self notify( "watchForWeaponChange" );
    self endon( "watchForWeaponChange" );

    for (;;)
    {
        self waittill( "weapon_change", var_0 );

        if ( nullweapon( var_0 ) )
            continue;

        if ( isvalidweapon( var_0 ) )
            self.last_valid_weapon = var_0;

        if ( !isdefined( self.storedweapons ) )
            self.storedweapons = [];

        if ( !isdefined( self.storedweapons[var_0.basename] ) )
            self.storedweapons[var_0.basename] = createheadicon( var_0 );

        thread updatelauncherusage();

        if ( scripts\cp\utility::iskillstreakweapon( var_0 ) )
            continue;

        if ( is_launcher( var_0 ) && !is_killstreak_weapon( var_0 ) )
        {
            if ( self.class == "tank" )
                var_0 = add_launcher_xmags( var_0 );
            else
                var_0 = _id_119F6( var_0 );

            if ( isdefined( level.set_relics ) )
            {
                if ( isdefined( level.set_relics["relic_rocket_kill_ammo"] ) )
                    self disableemptyclipweaponswitch( 1 );
            }

            continue;
        }

        if ( isdefined( level.set_relics ) )
        {
            if ( isdefined( level.set_relics["relic_rocket_kill_ammo"] ) )
                self disableemptyclipweaponswitch( 0 );
        }
    }
}

heardparachuteoverheadtime( var_0 )
{
    var_0 notify( "dropping_minigun" );
    var_1 = [ "iw8_minigunksjugg_mp", "iw8_lm_dblmg_mp" ];
    var_2 = "iw8_lm_dblmg_mp";

    foreach ( var_4 in var_1 )
    {
        if ( var_0 hasweapon( var_4 ) )
            var_2 = var_4;
    }

    var_6 = getcompleteweaponname( var_2 );
    var_7 = var_0 dropitem( var_6 );
    var_7 thread watchweaponpickup();
}

_id_12F06( var_0, var_1 )
{
    var_0 endon( "death" );
    var_0 endon( "disconnect" );
    var_0 endon( "faux_spawn" );
    var_0 endon( "dropping_minigun" );
    var_0 notify( "watchMinigunAmmo" );
    var_0 endon( "watchMinigunAmmo" );

    for (;;)
    {
        var_2 = var_0 getweaponammoclip( var_1 );

        if ( var_2 <= 0 )
        {
            var_0 takeweapon( var_1 );
            return;
        }

        waitframe();
    }
}

trackriotshield_trydetach( var_0 )
{
    if ( var_0.basename == "iw8_lm_dblmg_mp" )
        return 1;

    if ( var_0.basename == "iw8_minigunksjugg_mp" )
        return 1;

    return 0;
}

_id_125C3( var_0, var_1 )
{
    if ( var_1.basename == "iw8_lm_dblmg_mp" )
        return 0;

    if ( var_1.basename == "iw8_minigunksjugg_mp" )
        return 0;

    return turn_on_search_light( var_0 );
}

turn_on_search_light( var_0 )
{
    var_1 = [ "iw8_minigunksjugg_mp", "iw8_lm_dblmg_mp" ];

    foreach ( var_3 in var_1 )
    {
        if ( var_0 hasweapon( var_3 ) )
            return 1;
    }

    return 0;
}

is_launcher( var_0 )
{
    var_1 = weaponclass( var_0 );

    if ( var_1 == "rocketlauncher" )
        return 1;

    switch ( var_0.basename )
    {
        case "iw8_la_rpapa7_mp":
        case "iw8_la_kgolf_mp":
        case "iw8_la_juliet_mp":
        case "iw8_la_gromeo_mp":
            return 1;
    }

    return 0;
}

is_killstreak_weapon( var_0 )
{
    switch ( var_0.basename )
    {
        case "ac130_25mm_cp":
        case "ac130_40mm_cp":
            return 1;
        default:
            return 0;
    }
}

add_launcher_xmags( var_0 )
{
    var_1 = "xmags_cp_gromeo";

    switch ( var_0.basename )
    {
        case "iw8_la_gromeo_mp":
            var_1 = "xmags_cp_gromeo";
            break;
        case "iw8_la_juliet_mp":
            var_1 = "xmags_cp_juliet";
            break;
        case "iw8_la_kgolf_mp":
            var_1 = "xmags_cp_kgolf";
            break;
        case "iw8_la_rpapa7_mp":
            var_1 = "xmags_cp_rpapa7";
            break;
        default:
            break;
    }

    if ( !var_0 hasattachment( var_1 ) )
        var_0 = addattachmenttoweapon( var_0, var_1, 1 );

    return var_0;
}

_id_119F6( var_0 )
{
    var_1 = "xmags_cp_gromeo";

    switch ( var_0.basename )
    {
        case "iw8_la_gromeo_mp":
            var_1 = "xmags_cp_gromeo";
            break;
        case "iw8_la_juliet_mp":
            var_1 = "xmags_cp_juliet";
            break;
        case "iw8_la_kgolf_mp":
            var_1 = "xmags_cp_kgolf";
            break;
        case "iw8_la_rpapa7_mp":
            var_1 = "xmags_cp_rpapa7";
            break;
        default:
            break;
    }

    if ( var_0 hasattachment( var_1 ) )
        remove_attachment( var_1, self, var_0 );

    return var_0;
}

isfistweapon( var_0 )
{
    var_0 = scripts\cp\utility::getweaponrootname( var_0 );
    return var_0 == "iw8_fists";
}

isvalidweapon( var_0 )
{
    var_1 = level.additional_laststand_weapon_exclusion;
    var_2 = undefined;

    if ( issameweapon( var_0 ) )
        var_2 = var_0;
    else
        var_2 = asmdevgetallstates( var_0 );

    if ( nullweapon( var_2 ) )
        return 0;
    else if ( isdefined( var_1 ) && scripts\engine\utility::array_contains( var_1, var_2 ) )
        return 0;
    else if ( scripts\cp\utility::is_melee_weapon( var_2, 1 ) )
        return 0;
    else
        return 1;
}

updatesavedlastweapon()
{
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "faux_spawn" );
    var_0 = self.currentweaponatspawn;

    if ( isdefined( self.saved_lastweaponhack ) )
        var_0 = self.saved_lastweaponhack;

    self.saved_lastweapon = var_0;

    for (;;)
    {
        self waittill( "weapon_change", var_1 );

        if ( nullweapon( var_1 ) )
        {
            self.saved_lastweapon = var_0;
            continue;
        }

        var_2 = weaponinventorytype( var_1 );
        self [[ level.move_speed_scale ]]();
        self.saved_lastweapon = var_0;

        if ( isdroppableweapon( self.saved_lastweapon ) )
            self.lastdroppableweaponobj = self.saved_lastweapon;

        var_0 = var_1;
    }
}

assault_update_hint_logic()
{
    self endon( "death" );

    for (;;)
    {
        self waittill( "grenade_fire", var_0, var_1 );
        var_0.owner = self;

        switch ( var_1.basename )
        {
            case "molotov_mp":
                level thread scripts\cp\powers\coop_molotov::assault3_hangar( self, var_0 );
                break;
            case "gas_mp":
                thread scripts\cp\equipment\cp_gas_grenade::gas_used( var_0 );
                break;
            case "concussion_grenade_mp":
                var_0 thread watchconcussiongrenadeexplode();
                break;
        }
    }
}

watchgrenadeusage()
{
    self notify( "watchGrenadeUsage" );
    self endon( "watchGrenadeUsage" );
    self endon( "spawned_player" );
    self endon( "disconnect" );
    self endon( "faux_spawn" );
    self.throwinggrenade = undefined;
    self.gotpullbacknotify = 0;

    if ( !isdefined( self.plantedlethalequip ) )
    {
        self.plantedlethalequip = [];
        self.plantedtacticalequip = [];
    }

    for (;;)
    {
        self waittill( "grenade_pullback", var_0 );
        var_1 = self getthrowbackweapon();

        if ( !nullweapon( var_1 ) )
            continue;

        var_2 = var_0.basename;
        thread watchoffhandcancel();
        self.throwinggrenade = var_2;

        if ( var_2 == "c4_mp_p" )
            thread beginc4tracking();

        begingrenadetracking();
        self.throwinggrenade = undefined;
    }
}

watchoffhandcancel()
{
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "faux_spawn" );
    self endon( "grenade_fire" );
    self waittill( "offhand_end" );

    if ( isdefined( self.changingweapon ) && self.changingweapon != self getcurrentweapon() )
        self.changingweapon = undefined;
}

beginc4tracking()
{
    self notify( "beginC4Tracking" );
    self endon( "beginC4Tracking" );
    self endon( "death" );
    self endon( "disconnect" );
    scripts\engine\utility::_id_12E40( "grenade_fire", "weapon_change", "offhand_end" );
    self.changingweapon = undefined;
}

dudgrenadeused( var_0 )
{
    var_0 endon( "disconnect" );
    thread ownerdisconnectcleanup( var_0 );
    thread scripts\cp\utility::notifyafterframeend( "death", "end_explode" );
    self endon( "end_explode" );
    self waittill( "explode", var_1 );
    self delete();
}

begingrenadetracking()
{
    self endon( "offhand_end" );
    var_0 = gettime();
    var_1 = waittill_grenade_fire();

    if ( !isdefined( var_1 ) )
        return;

    if ( !isdefined( var_1.weapon_name ) )
        return;

    self.changingweapon = undefined;

    switch ( var_1.weapon_name )
    {
        case "snapshot_grenade_mp":
            thread scripts\cp\equipment\cp_snapshot_grenade::snapshot_grenade_used( var_1 );
            break;
        case "iw8_molotov_zm":
        case "molotov_mp":
            thread scripts\cp\powers\coop_molotov::molotov_used( var_1 );
            self.reset_button_init = gettime();
            break;
        case "iw8_health_marker_cp":
        case "iw8_adrenaline_marker_cp":
        case "iw8_armor_marker_cp":
        case "iw8_ammo_marker_cp":
            scripts\cp\crafting_system::throwcrate( var_1 );
            break;
        case "dud_grenade_zm":
            var_1 thread dudgrenadeused( self );
            var_1 thread grenade_earthquake();
            break;
        case "thermobaric_grenade_mp":
        case "frag_grenade_mp":
        case "frag_grenade_zm":
            if ( gettime() - var_0 > 1000 )
                var_1.iscooked = 1;

            var_1 thread _id_12F4A();
            var_1.originalowner = self;
            break;
        case "cluster_grenade_zm":
            var_1.clusterticks = var_1.ticks;

            if ( var_1.ticks >= 1 )
                var_1.iscooked = 1;

            var_1.originalowner = self;
            var_1 thread clustergrenadeused();
            var_1 thread grenade_earthquake();
            break;
        case "zfreeze_semtex_mp":
        case "semtex_zm":
        case "semtex_mp":
            thread semtexused( var_1 );
            break;
        case "gas_mp":
            thread scripts\cp\equipment\cp_gas_grenade::gas_used( var_1 );
            break;
        case "hb_sensor_mp":
            thread scripts\mp\equipment\hb_sensor::hb_sensor_used( var_1 );
            break;
        case "c4_mp_p":
            thread scripts\cp\cp_c4::c4_used( var_1 );
            break;
        case "claymore_mp":
            thread scripts\cp\cp_claymore::claymore_use( var_1 );
            break;
        case "at_mine_mp":
            thread scripts\cp\equipment\cp_at_mine::at_mine_use( var_1 );
            break;
        case "trophy_mp":
            thread scripts\cp\equipment\cp_trophy_system::trophy_used( var_1 );
            break;
        case "flare_mp":
            thread scripts\cp\crafting_system::_id_11A8E( var_1 );
            break;
        case "concussion_grenade_mp":
            var_1 thread watchconcussiongrenadeexplode();
            break;
        case "bouncing_betty_mp":
            thread mineused( var_1, ::spawnmine );
            break;
        case "throwingknifejugg_mp":
        case "throwingknifec4_mp":
        case "throwingknife_mp":
            level thread throwingknifeused( self, var_1, var_1.weapon_name );
            break;
        case "zom_repulsor_mp":
            var_1 delete();
            break;
        case "smoke_grenade_mp":
            var_1 thread smokegrenadeused();
            break;
        case "gas_grenade_mp":
            var_1 thread watchgasgrenadeexplode();
            break;
        case "trip_mine_mp":
            break;
        case "flash_grenade_mp":
            var_1.ninebangticks = var_1.ticks;
            var_1 thread _id_12F22();

            if ( var_1.ticks >= 1 )
                var_1.iscooked = 1;

            break;
        case "decoy_grenade_mp":
            thread scripts\mp\trials\mp_m_cornfield_floor_is_lava_create_script::decoy_used( var_1 );
            break;
    }

    if ( isdefined( var_1 ) )
    {
        var_1 thread scripts\cp\cp_player_battlechatter::grenadeproximitytracking();
        scripts\cp\cp_player_battlechatter::ongrenadeuse( var_1 );
    }
}

extinguishonexplode( var_0 )
{
    thread scripts\cp\utility::notifyafterframeend( "death", "end_explode" );
    self endon( "end_explode" );
    var_1 = self.owner;
    self waittill( "explode", var_2 );
    level notify( "explosion_extinguish", var_2, var_0, var_1 );
}

ninebangexplodewaiter()
{
    thread scripts\cp\utility::notifyafterframeend( "death", "end_explode" );
    self endon( "end_explode" );
    self waittill( "explode", var_0 );
    thread doninebang( var_0, self.owner, self.ninebangticks );
    ninebangdoempdamage( var_0, self.owner, self.ninebangticks );
}

ninebangdoempdamage( var_0, var_1, var_2 )
{
    if ( var_2 >= 5 )
    {
        playsoundatpos( var_0, "emp_grenade_explode_default" );
        var_3 = level.players;

        foreach ( var_5 in var_3 )
            var_5 notify( "emp_damage", self.owner, 8.0 );
    }
}

doninebang( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    var_3 = level.weaponconfigs[self.weapon_name];
    wait( randomfloatrange( 0.25, 0.5 ) );

    for ( var_4 = 1; var_4 < var_2; var_4++ )
    {
        var_5 = getninebangsubexplosionpos( var_0, var_3.vfxradius );
        playfx( var_3.onexplodevfx, var_5 );

        foreach ( var_7 in level.players )
        {
            if ( !var_7 scripts\cp_mp\utility\player_utility::_isalive() || var_7.sessionstate != "playing" )
                continue;

            var_8 = var_7 geteye();
            var_9 = distancesquared( var_0, var_8 );

            if ( var_9 > var_3.radius_max_sq )
                continue;

            if ( !scripts\engine\trace::_bullet_trace_passed( var_0, var_8, 0, var_7 ) )
                continue;

            if ( var_9 <= var_3.radius_min_sq )
                var_10 = 1.0;
            else
                var_10 = 1.0 - ( var_9 - var_3.radius_min_sq ) / ( var_3.radius_max_sq - var_3.radius_min_sq );

            var_11 = anglestoforward( var_7 getplayerangles() );
            var_12 = var_0 - var_8;
            var_12 = vectornormalize( var_12 );
            var_13 = 0.5 * ( 1.0 + vectordot( var_11, var_12 ) );
            var_14 = 1;
            var_7 notify( "flashbang", var_0, var_10, var_13, var_1, var_14 );
        }

        wait( randomfloatrange( 0.25, 0.5 ) );
    }
}

getninebangsubexplosionpos( var_0, var_1 )
{
    var_2 = ( randomfloatrange( -1.0 * var_1, var_1 ), randomfloatrange( -1.0 * var_1, var_1 ), 0 );
    var_3 = var_0 + var_2;
    var_4 = scripts\engine\trace::_bullet_trace( var_0, var_3, 0, undefined, 0, 0, 0, 0, 0 );

    if ( var_4["fraction"] < 1 )
        var_3 = var_0 + var_4["fraction"] * var_2;

    return var_3;
}

rat_executevisuals( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self playlocalsound( "eye_pulse_plr_lr" );
    self setscriptablepartstate( "rat_eye_pulse", "active" );
    scripts\engine\utility::_id_12E54( var_0, "last_stand", "death" );
    self setscriptablepartstate( "rat_eye_pulse", "inactive" );
}

handleratvisionburst( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_0 endon( "last_stand" );
    var_0 endon( "death" );
    var_0 thread rat_executevisuals( 2.4 );
}

isinvalidzone( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = getentarray( "power_exclusion_volume", "targetname" );

    if ( isdefined( var_5 ) )
    {
        if ( isdefined( level.neil ) && isdefined( level.neil.upper_body ) )
        {
            if ( var_5 == level.neil || var_5 == level.neil.upper_body )
                return 0;
        }

        if ( isdefined( level.boat_vehicle ) )
        {
            if ( var_5 == level.boat_vehicle )
                return 0;
        }

        if ( isdefined( var_5.targetname ) && var_5.targetname == "beginning_area_balloons" )
            return 0;
    }

    if ( isdefined( var_1 ) )
        var_6 = scripts\engine\utility::array_combine( var_6, var_1 );

    foreach ( var_8 in var_6 )
    {
        if ( ispointinvolume( var_0, var_8 ) )
            return 0;
    }

    if ( istrue( var_4 ) && !ispointonnavmesh( var_0 ) )
        return 0;

    if ( istrue( var_3 ) )
    {
        if ( navtrace( var_2.origin, var_0 ) )
            return 0;
    }

    return 1;
}

placeequipmentfailed( var_0, var_1, var_2, var_3 )
{
    if ( isplayer( self ) )
        self playlocalsound( "scavenger_pack_pickup" );

    if ( istrue( var_1 ) )
    {
        var_4 = undefined;

        if ( isplayer( self ) )
        {
            if ( isdefined( var_3 ) )
                var_4 = spawnfxforclient( scripts\engine\utility::getfx( "placeEquipmentFailed" ), var_2, self, anglestoforward( var_3 ), anglestoup( var_3 ) );
            else
                var_4 = spawnfxforclient( scripts\engine\utility::getfx( "placeEquipmentFailed" ), var_2, self );
        }
        else
            var_4 = spawnfx( scripts\engine\utility::getfx( "placeEquipmentFailed" ), var_2 );

        triggerfx( var_4 );
        thread placeequipmentfailedcleanup( var_4 );
    }
}

placeequipmentfailedcleanup( var_0 )
{
    wait 2;
    var_0 delete();
}

spawnmine( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( var_3 ) )
        var_3 = ( 0, randomfloat( 360 ), 0 );

    var_4 = level.weaponconfigs[var_2];
    var_5 = spawn( "script_model", var_0 );
    var_5.angles = var_3;
    var_5.owner = var_1;
    var_5.weapon_name = var_2;
    var_5.config = var_4;
    var_5 setmodel( var_4.model );
    var_5 setotherent( var_1 );
    var_5.killcamoffset = ( 0, 0, 4 );
    var_5.killcament = spawn( "script_model", var_5.origin + var_5.killcamoffset );
    var_5.killcament setscriptmoverkillcam( "explosive" );
    var_1 onlethalequipmentplanted( var_5 );

    if ( isdefined( var_4.mine_beacon ) )
        var_5 thread doblinkinglight( "tag_fx", var_4.mine_beacon["friendly"], var_4.mine_beacon["enemy"] );

    var_6 = undefined;

    if ( self != level )
        var_6 = self getlinkedparent();

    var_5 explosivehandlemovers( var_6 );
    var_5 thread mineproximitytrigger( var_6 );
    var_5 thread grenade_earthquake();
    var_5 thread mineselfdestruct();
    var_5 thread mineexplodeonnotify();
    level thread monitordisownedequipment( var_1, var_5 );
    return var_5;
}

mineselfdestruct()
{
    self endon( "mine_triggered" );
    self endon( "mine_destroyed" );
    self endon( "death" );
    wait( level.mineselfdestructtime + randomfloat( 0.4 ) );
    self notify( "mine_selfdestruct" );
    self notify( "detonateExplosive" );
}

mineexplodeonnotify()
{
    self endon( "death" );
    level endon( "game_ended" );
    self waittill( "detonateExplosive", var_0 );

    if ( !isdefined( self ) || !isdefined( self.owner ) )
        return;

    if ( !isdefined( var_0 ) )
        var_0 = self.owner;

    var_1 = self.config;
    var_2 = var_1.vfxtag;

    if ( !isdefined( var_2 ) )
        var_2 = "tag_fx";

    var_3 = self gettagorigin( var_2 );

    if ( !isdefined( var_3 ) )
        var_3 = self gettagorigin( "tag_origin" );

    self notify( "explode", var_3 );
    wait 0.05;

    if ( !isdefined( self ) || !isdefined( self.owner ) )
        return;

    self hide();

    if ( isdefined( var_1.onexplodefunc ) )
        self thread [[ var_1.onexplodefunc ]]();

    if ( isdefined( var_1.onexplodesfx ) )
        self playsound( var_1.onexplodesfx );

    var_4 = scripts\engine\utility::ter_op( isdefined( var_1.onexplodevfx ), var_1.onexplodevfx, level.mine_explode );
    var_5 = scripts\engine\utility::ter_op( isdefined( var_1.minedamagemin ), var_1.minedamagemin, level.minedamagemin );
    var_6 = scripts\engine\utility::ter_op( isdefined( var_1.minedamagemax ), var_1.minedamagemax, level.minedamagemax );
    var_7 = scripts\engine\utility::ter_op( isdefined( var_1.minedamageradius ), var_1.minedamageradius, level.minedamageradius );
    self radiusdamage( self.origin, var_7, var_6, var_5, var_0, "MOD_EXPLOSIVE", self.weapon_name );
    wait 0.2;
    deleteexplosive();
}

mineproximitytrigger( var_0 )
{
    self endon( "mine_destroyed" );
    self endon( "mine_selfdestruct" );
    self endon( "death" );
    self endon( "disabled" );
    var_1 = self.config;
    wait( var_1.armtime );

    if ( isdefined( var_1.mine_beacon ) )
        thread doblinkinglight( "tag_fx", var_1.mine_beacon["friendly"], var_1.mine_beacon["enemy"] );

    var_2 = spawn( "trigger_radius", self.origin, 0, level.minedetectionradius, level.minedetectionheight );
    var_2.owner = self;
    var_2.team = var_2.owner.team;
    thread minedeletetrigger( var_2 );

    if ( isdefined( var_0 ) )
    {
        var_2 enablelinkto();
        var_2 linkto( var_0 );
    }

    self.damagearea = var_2;

    for (;;)
    {
        var_2 waittill( "trigger", var_3 );

        if ( isplayer( var_3 ) )
        {
            wait 0.05;
            continue;
        }

        if ( var_3 damageconetrace( self.origin, self ) > 0 )
            break;
    }

    self notify( "mine_triggered" );
    self playsound( self.config.ontriggeredsfx );
    explosivetrigger( var_3, level.minedetectiongraceperiod, "mine" );
    self thread [[ self.config.ontriggeredfunc ]]();
}

minedeletetrigger( var_0 )
{
    scripts\engine\utility::_id_12E41( "mine_triggered", "mine_destroyed", "mine_selfdestruct", "death" );

    if ( isdefined( var_0 ) )
        var_0 delete();
}

doblinkinglight( var_0, var_1, var_2 )
{
    if ( !isdefined( var_1 ) )
        var_1 = scripts\engine\utility::getfx( "weap_blink_friend" );

    if ( !isdefined( var_2 ) )
        var_2 = scripts\engine\utility::getfx( "weap_blink_enemy" );

    self.blinkinglightfx["friendly"] = var_1;
    self.blinkinglightfx["enemy"] = var_2;
    self.blinkinglighttag = var_0;
    thread updateblinkinglight( var_1, var_2, var_0 );
    self waittill( "death" );
    stopblinkinglight();
}

updateblinkinglight( var_0, var_1, var_2 )
{
    self endon( "death" );
    self endon( "carried" );
    self endon( "emp_damage" );
    var_3 = ::checkteam;

    if ( !level.teambased )
        var_3 = ::checkplayer;

    var_4 = randomfloatrange( 0.05, 0.25 );
    wait( var_4 );
    childthread onjointeamblinkinglight( var_0, var_1, var_2, var_3 );

    foreach ( var_6 in level.players )
    {
        if ( isdefined( var_6 ) )
        {
            if ( self.owner [[ var_3 ]]( var_6 ) )
                playfxontagforclients( var_0, self, var_2, var_6 );
            else
                playfxontagforclients( var_1, self, var_2, var_6 );

            wait 0.05;
        }
    }
}

checkplayer( var_0 )
{
    return self == var_0;
}

checkteam( var_0 )
{
    return self.team == var_0.team;
}

onjointeamblinkinglight( var_0, var_1, var_2, var_3 )
{
    self endon( "death" );
    level endon( "game_ended" );
    self endon( "emp_damage" );

    for (;;)
    {
        level waittill( "joined_team", var_4 );

        if ( self.owner [[ var_3 ]]( var_4 ) )
        {
            playfxontagforclients( var_0, self, var_2, var_4 );
            continue;
        }

        playfxontagforclients( var_1, self, var_2, var_4 );
    }
}

stopblinkinglight()
{
    if ( isalive( self ) && isdefined( self.blinkinglightfx ) )
    {
        stopfxontag( self.blinkinglightfx["friendly"], self, self.blinkinglighttag );
        stopfxontag( self.blinkinglightfx["enemy"], self, self.blinkinglighttag );
        self.blinkinglightfx = undefined;
        self.blinkinglighttag = undefined;
    }
}

_id_12F4A()
{
    var_0 = self.owner.name;
    self waittill( "explode", var_1 );
    level notify( "grenade_exploded_during_stealth", var_1, "frag_grenade_mp", var_0 );
}

_id_12F22()
{
    var_0 = self.owner.name;
    self waittill( "explode", var_1 );
    level notify( "grenade_exploded_during_stealth", var_1, "flash_grenade_mp", var_0 );
}

watchgasgrenadeexplode()
{
    var_0 = self.owner;
    var_0 endon( "disconnect" );
    self waittill( "explode", var_1 );
    thread ongasgrenadeimpact( var_0, var_1 );
}

ongasgrenadeimpact( var_0, var_1 )
{
    var_2 = spawn( "trigger_radius", var_1, 0, 128, 160 );
    var_2.owner = var_0;
    var_3 = 128;
    var_4 = spawnfx( scripts\engine\utility::getfx( "gas_grenade_smoke_enemy" ), var_1 );
    triggerfx( var_4 );
    wait 1.0;

    for ( var_5 = 8.0; var_5 > 0.0; var_5 = var_5 - 0.2 )
    {
        var_6 = undefined;

        if ( isdefined( level.spawned_enemies ) )
            var_6 = level.spawned_enemies;
        else
            var_6 = scripts\cp\cp_agent_utils::getaliveagentsofteam( "axis" );

        foreach ( var_8 in var_6 )
        {
            if ( isdefined( var_8.agent_type ) && ( var_8.agent_type == "zombie_brute" || var_8.agent_type == "superslasher" || var_8.agent_type == "slasher" || var_8.agent_type == "zombie_grey" ) )
                continue;

            var_9 = getdamagefromzombietype( var_8 );

            if ( isalive( var_8 ) )
                var_8 applygaseffect( var_0, var_1, var_2, var_2, int( var_9 ) );
        }

        wait 0.2;
    }

    var_4 delete();
    wait 2.0;
    var_2 delete();

    foreach ( var_8 in scripts\cp\cp_agent_utils::getaliveagentsofteam( "axis" ) )
    {
        if ( isalive( var_8 ) )
            var_8.flame_damage_time = undefined;
    }
}

getdamagefromzombietype( var_0 )
{
    if ( isalive( var_0 ) )
    {
        if ( istrue( var_0.is_suicide_bomber ) )
            return int( min( 1000, var_0.maxhealth * 0.25 ) );
        else
            return int( min( 1000, var_0.maxhealth * 0.1 ) );
    }
    else
        return 150;
}

applygaseffect( var_0, var_1, var_2, var_3, var_4 )
{
    if ( isalive( self ) && self istouching( var_2 ) )
    {
        if ( var_0 scripts\cp\utility::isenemy( self ) )
        {
            var_3 radiusdamage( self.origin, 1, var_4, var_4, var_0, "MOD_GRENADE_SPLASH", "gas_grenade_mp" );
            self.flame_damage_time = gettime() + 200;
        }
    }
}

throwingknifeused( var_0, var_1, var_2 )
{
    if ( var_2 == "throwingknifec4_mp" )
    {
        var_1 makeunusable();
        var_1 thread recordthrowingknifetraveldist();
    }

    thread throwingknifedamagedvictim( var_0, var_1 );
    var_3 = undefined;
    var_4 = undefined;
    var_1 waittill( "missile_stuck", var_3, var_4 );
    var_5 = isdefined( var_4 ) && var_4 == "tag_flicker";
    var_6 = isdefined( var_4 ) && var_4 == "tag_weapon";

    if ( isdefined( var_3 ) && ( isplayer( var_3 ) || isagent( var_3 ) ) && var_5 )
        var_3 notify( "shield_hit", var_1 );

    if ( isdefined( var_3 ) && ( isplayer( var_3 ) || isagent( var_3 ) ) && !var_6 && !var_5 )
    {
        if ( var_2 == "throwingknifec4_mp" )
            throwingknifec4detonate( var_1, var_3, var_0 );
    }

    var_1.equipmentref = "equip_throwing_knife";
    var_1 thread watchgrenadedeath();

    for (;;)
    {
        var_1 waittill( "trigger", var_7 );
        var_7 scripts\cp\cp_powers::power_adjustcharges( 1, "primary" );
    }
}

throwingknifedamagedvictim( var_0, var_1 )
{
    var_1 endon( "death" );
    var_0 endon( "death" );
    var_0 endon( "disconnect" );

    for (;;)
    {
        var_0 waittill( "victim_damaged", var_2, var_3, var_4, var_5, var_6, var_7 );

        if ( isdefined( var_3 ) && var_3 == var_1 )
        {
            if ( var_7 == "throwingknifeteleport_mp" && !isdefined( var_1.knifeteleownerinvalid ) )
            {
                throwingknifeteleport( var_1, var_2, var_0, 1 );
                var_1.giveknifeback = 1;
            }

            break;
        }
    }
}

watchgrenadedeath()
{
    self waittill( "death" );

    if ( isdefined( self.knife_trigger ) )
        self.knife_trigger delete();
}

throwingknifeused_trygiveknife( var_0, var_1, var_2 )
{
    var_3 = var_0 getweaponammoclip( var_2 );
    var_4 = 2;
    var_5 = undefined;

    if ( var_3 >= var_4 )
        var_5 = 0;
    else
    {
        var_0 setweaponammoclip( var_2, var_3 + 1 );
        var_0 thread scripts\cp\cp_damagefeedback::hudicontype( "throwingknife" );
        var_5 = 1;
    }

    return var_5;
}

throwingknifeteleport( var_0, var_1, var_2, var_3 )
{
    var_2 playlocalsound( "blinkknife_teleport" );
    var_2 playsoundonmovingent( "blinkknife_teleport_npc" );
    playsoundatpos( var_0.origin, "blinkknife_impact" );
    thread throwingknifeteleport_fxstartburst( var_2, var_1 );
    var_4 = var_1 getcorpseentity();

    if ( isdefined( var_4 ) )
        var_4 notsolid();

    var_5 = [];

    foreach ( var_7 in level.characters )
    {
        if ( !isdefined( var_7 ) || !isalive( var_7 ) || var_7 == var_1 || var_7 == var_2 || !var_2 scripts\cp\utility::isenemy( var_7 ) )
            continue;

        var_5[var_5.size] = var_7;
    }

    var_5 = sortbydistance( var_5, var_1.origin );
    var_9 = var_2 gettagorigin( "TAG_EYE" );
    var_10 = var_1.origin;
    var_11 = var_1.origin + ( 0, 0, var_9[2] - var_2.origin[2] );
    var_12 = var_2.angles;

    foreach ( var_14 in var_5 )
    {
        var_15 = ( var_14.origin[0], var_14.origin[1], var_14 gettagorigin( "TAG_EYE" )[2] );

        if ( distancesquared( var_14.origin, var_1.origin ) < 230400 && sighttracepassed( var_11, var_15, 0, undefined ) )
        {
            var_12 = vectortoangles( var_15 - var_11 );
            break;
        }
    }

    var_2 setorigin( var_1.origin, !var_3 );
    var_2 setplayerangles( var_12 );
    throwingknifeteleport_fxendburst( var_2, var_1 );
}

throwingknifeteleport_fxstartburst( var_0, var_1 )
{
    var_2 = var_1.origin - var_0.origin;
    var_3 = var_0.origin + ( 0, 0, 32 );
    var_4 = vectornormalize( var_2 );
    var_5 = vectornormalize( vectorcross( var_2, ( 0, 0, 1 ) ) );
    var_6 = vectorcross( var_5, var_4 );
    var_7 = axistoangles( var_4, var_5, var_6 );
    var_8 = 0;

    if ( var_8 )
    {
        var_9 = spawn( "script_model", var_3 );
        var_9.angles = var_7;
        var_9 setmodel( "tag_origin" );
        var_9 hidefromplayer( var_0 );
        waitframe();
        playfxontagforteam( scripts\engine\utility::getfx( "vfx_knife_tele_start_friendly" ), var_9, "tag_origin", var_0.team );
        wait 3.0;
        var_9 delete();
    }
    else
    {
        var_10 = spawn( "script_model", var_3 );
        var_10.angles = var_7;
        var_10 setmodel( "tag_origin" );
        var_10 hidefromplayer( var_0 );
        waitframe();

        foreach ( var_12 in level.players )
            var_10 hidefromplayer( var_12 );

        playfxontag( scripts\engine\utility::getfx( "vfx_tele_start_friendly" ), var_10, "tag_origin" );
        wait 3.0;
        var_10 delete();
    }
}

recordthrowingknifetraveldist()
{
    level endon( "game_ended" );
    self.owner endon( "disconnect" );
    self.disttravelled = 0;
    var_0 = self.origin;

    for (;;)
    {
        var_1 = scripts\engine\utility::_id_12E54( 0.15, "death", "missile_stuck" );

        if ( !isdefined( self ) )
            break;

        var_2 = distance( var_0, self.origin );
        self.disttravelled = self.disttravelled + var_2;
        var_0 = self.origin;

        if ( var_1 != "timeout" )
            break;
    }
}

throwingknifeteleport_fxendburst( var_0, var_1 )
{

}

throwingknifec4detonate( var_0, var_1, var_2 )
{
    var_1 playsound( "biospike_explode" );
    playfx( scripts\engine\utility::getfx( "throwingknifec4_explode" ), var_0.origin );
    var_0 radiusdamage( var_0.origin, 180, 1200, 600, var_2, "MOD_EXPLOSIVE", var_0.weapon_name );
    var_0 thread grenade_earthquake();
    var_0 notify( "explode", var_0.origin );
    var_0 delete();
}

throwingknifeused_recordownerinvalid( var_0, var_1 )
{
    var_1 endon( "missile_stuck" );
    var_1 endon( "death" );
    var_0 scripts\engine\utility::_id_12E3F( "death", "disconnect" );
    var_1.knifeteleownerinvalid = 1;
}

watchconcussiongrenadeexplode()
{
    thread endondeath();
    self endon( "end_explode" );
    var_0 = self.owner.name;
    self waittill( "explode", var_1 );
    level notify( "grenade_exploded_during_stealth", var_1, "concussion_grenade_mp", var_0 );
    childthread stunenemiesinrange( var_1, self.owner );
    childthread stunplayersinrange( var_1, self.owner );
}

stunplayersinrange( var_0, var_1 )
{
    var_2 = level.players;
    var_3 = scripts\engine\utility::get_array_of_closest( var_0, var_2, undefined, 24, 256 );

    foreach ( var_5 in var_3 )
    {
        if ( ( scripts\cp\utility::is_friendly_damage( var_5, var_1 ) && var_5 != var_1 ) == 0 )
            var_5 thread stundamageonplayers( var_5, var_1, var_0 );
    }
}

stundamageonplayers( var_0, var_1, var_2 )
{
    var_3 = 3;
    var_4 = 3;

    if ( var_0 == var_1 )
    {
        var_3 = 2;
        var_4 = 2;
    }

    var_5 = 1 - distance( var_0.origin, var_2 ) / 512;

    if ( var_5 < 0 )
        var_5 = 0;

    var_6 = var_3 + var_4 * var_5;
    var_1 notify( "stun_hit" );
    var_0 notify( "concussed", var_1 );
    var_0 scripts\cp\utility::setplayerstunned();
    var_0 thread cleanupconcussionstun( var_6 );
    var_0 shellshock( "concussion_grenade_mp", var_6 );
    var_0.concussionendtime = gettime() + var_6 * 1000;
}

cleanupconcussionstun( var_0 )
{
    self endon( "death" );
    self endon( "disconnect" );
    level endon( "game_ended" );
    wait( var_0 );
    scripts\cp\utility::setplayerunstunned();
}

stunenemiesinrange( var_0, var_1 )
{
    var_2 = scripts\engine\utility::array_combine( scripts\cp\cp_agent_utils::getaliveagentsofteam( "axis" ), scripts\cp\cp_agent_utils::getaliveagentsofteam( "team_three" ) );
    var_3 = scripts\engine\utility::get_array_of_closest( var_0, var_2, undefined, 24, 500 );

    foreach ( var_5 in var_3 )
        var_5 thread fx_stun_damage( var_5, var_1 );
}

fx_stun_damage( var_0, var_1 )
{
    var_0 endon( "death" );

    if ( isdefined( var_0.stun_hit_time ) )
    {
        if ( gettime() > var_0.stun_hit_time )
        {
            var_0.allowpain = 1;
            var_0.stun_hit_time = gettime() + 1000;
            var_0.stunned = 1;
            var_0 thread x1opsinfilsequenceend();
        }
        else
            return;
    }
    else
    {
        var_0.allowpain = 1;
        var_0.stun_hit_time = gettime() + 1000;
        var_0.stunned = 1;
        var_0 thread x1opsinfilsequenceend();
    }

    var_0 dodamage( 1, var_0.origin, var_1, var_1, "MOD_GRENADE_SPLASH", "concussion_grenade_mp" );
    wait 10;
    var_0.allowpain = 0;
    var_0.stunned = undefined;
}

x1opsinfilsequenceend()
{
    self endon( "death" );
    self notify( "sturn_accuracy_reduction" );
    self endon( "sturn_accuracy_reduction" );

    if ( self.baseaccuracy != 0 )
        self.startuseweapon = self.baseaccuracy;

    self.baseaccuracy = 0;

    while ( istrue( self.stunned ) )
        waitframe();

    if ( isdefined( self.startuseweapon ) )
        self.baseaccuracy = self.startuseweapon;
}

mineused( var_0, var_1 )
{
    if ( !isalive( self ) )
    {
        var_0 delete();
        return;
    }

    var_0 thread minethrown( self, var_0.weapon_name, var_1 );
}

minethrown( var_0, var_1, var_2, var_3 )
{
    self.owner = var_0;
    self waittill( "missile_stuck", var_4 );

    if ( !isdefined( var_0 ) )
        return;

    if ( var_1 != "trip_mine_mp" )
    {
        if ( isdefined( var_4 ) && isdefined( var_4.owner ) )
        {
            if ( isdefined( var_3 ) )
                self.owner [[ var_3 ]]( self );

            self delete();
            return;
        }
    }

    var_5 = scripts\engine\trace::_bullet_trace( self.origin + ( 0, 0, 4 ), self.origin - ( 0, 0, 4 ), 0, self );
    var_6 = var_5["position"];

    if ( var_5["fraction"] == 1 )
    {
        var_6 = getgroundposition( self.origin, 12, 0, 32 );
        var_5["normal"] = var_5["normal"] * -1;
    }

    var_7 = vectornormalize( var_5["normal"] );
    var_8 = vectortoangles( var_7 );
    var_8 = var_8 + ( 90, 0, 0 );
    var_9 = [[ var_2 ]]( var_6, var_0, var_1, var_8 );
    var_9 thread minedamagemonitor();
    self delete();
}

minedamagemonitor()
{
    self endon( "mine_triggered" );
    self endon( "mine_selfdestruct" );
    self endon( "death" );
    self setcandamage( 1 );
    self.maxhealth = 100000;
    self.health = self.maxhealth;
    var_0 = undefined;

    for (;;)
    {
        self waittill( "damage", var_1, var_0, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );

        if ( !isplayer( var_0 ) && !isagent( var_0 ) )
            continue;

        if ( isdefined( var_9 ) && isendstr( var_9.basename, "betty_mp" ) )
            continue;

        if ( isdefined( self.owner ) && var_0 != self.owner && !scripts\cp\cp_damage::friendlyfirecheck( self.owner, var_0 ) )
            continue;

        if ( isdefined( var_9 ) )
        {
            switch ( var_9.basename )
            {
                case "concussion_grenade_mp":
                case "smoke_grenadejugg_mp":
                case "smoke_grenade_mp":
                case "flash_grenade_mp":
                    continue;
            }
        }

        break;
    }

    self notify( "mine_destroyed" );

    if ( isdefined( var_4 ) && ( issubstr( var_4, "MOD_GRENADE" ) || issubstr( var_4, "MOD_EXPLOSIVE" ) ) )
        self.waschained = 1;

    if ( isdefined( var_8 ) && var_8 & level.idflags_penetration )
        self.wasdamagedfrombulletpenetration = 1;

    self.wasdamaged = 1;

    if ( isdefined( var_0 ) )
        self.damagedby = var_0;

    self notify( "detonateExplosive", var_0 );
}

is_hive_explosion( var_0, var_1 )
{
    if ( !isdefined( var_0 ) || !isdefined( var_0.classname ) )
        return 0;

    return var_0.classname == "scriptable" && var_1 == "MOD_EXPLOSIVE";
}

claymoredetonation( var_0 )
{
    self endon( "death" );
    var_1 = spawn( "trigger_radius", self.origin + ( 0, 0, 0 - level.claymoredetonateradius ), 0, level.claymoredetonateradius, level.claymoredetonateradius * 2 );

    if ( isdefined( var_0 ) )
    {
        var_1 enablelinkto();
        var_1 linkto( var_0 );
    }

    thread deleteondeath( var_1 );

    for (;;)
    {
        var_1 waittill( "trigger", var_2 );

        if ( getdvarint( "scr_claymoredebug" ) != 1 )
        {
            if ( isdefined( self.owner ) )
            {
                if ( var_2 == self.owner )
                    continue;

                if ( isdefined( var_2.owner ) && var_2.owner == self.owner )
                    continue;
            }

            if ( !scripts\cp\cp_damage::friendlyfirecheck( self.owner, var_2, 0 ) )
                continue;
        }

        if ( lengthsquared( var_2 getentityvelocity() ) < 10 )
            continue;

        var_3 = abs( var_2.origin[2] - self.origin[2] );

        if ( var_3 > 128 )
            continue;

        if ( !var_2 shouldaffectclaymore( self ) )
            continue;

        if ( var_2 damageconetrace( self.origin, self ) > 0 )
            break;
    }

    explosivetrigger( var_2, level.claymoredetectiongraceperiod, "claymore" );
    self notify( "detonateExplosive" );
}

explosivetrigger( var_0, var_1, var_2 )
{
    self setscriptablepartstate( "arm", "neutral", 0 );
    self setscriptablepartstate( "trigger", "active", 0 );

    if ( isplayer( var_0 ) && var_0 scripts\cp\utility::_hasperk( "specialty_delaymine" ) )
    {
        var_0 notify( "triggeredExpl", var_2 );
        var_1 = level.delayminetime;
    }

    wait( var_1 );
}

shouldaffectclaymore( var_0 )
{
    if ( isdefined( var_0.disabled ) )
        return 0;

    var_1 = self.origin + ( 0, 0, 32 );
    var_2 = var_1 - var_0.origin;
    var_3 = anglestoforward( var_0.angles );
    var_4 = vectordot( var_2, var_3 );

    if ( var_4 < level.claymoredetectionmindist )
        return 0;

    var_2 = vectornormalize( var_2 );
    var_5 = vectordot( var_2, var_3 );
    return var_5 > level.claymoredetectiondot;
}

deleteondeath( var_0 )
{
    self waittill( "death" );
    self setscriptablepartstate( "destroy", "active", 0 );
    wait 0.05;

    if ( isdefined( var_0 ) )
    {
        if ( isdefined( var_0.trigger ) )
            var_0.trigger delete();

        var_0 delete();
    }
}

c4empdamage()
{
    self endon( "death" );

    for (;;)
    {
        self waittill( "emp_damage", var_0, var_1 );
        equipmentempstunvfx();
        self.disabled = 1;
        self notify( "disabled" );
        wait( var_1 );
        self.disabled = undefined;
        self notify( "enabled" );
    }
}

equipmentempstunvfx()
{
    playfxontag( scripts\engine\utility::getfx( "emp_stun" ), self, "tag_origin" );
}

c4implode( var_0, var_1, var_2 )
{
    var_1 endon( "disconnect" );
    wait 0.5;
    var_2 radiusdamage( var_0, 256, 1200, 600, var_1, "MOD_EXPLOSIVE", "c4_mp_p" );
    thread c4_earthquake();
}

resetc4explodethisframe()
{
    wait 0.05;
    level.c4explodethisframe = 0;
}

onlethalequipmentplanted( var_0, var_1, var_2 )
{
    if ( self.plantedlethalequip.size )
    {
        self.plantedlethalequip = scripts\engine\utility::array_removeundefined( self.plantedlethalequip );

        if ( self.plantedlethalequip.size >= level.maxperplayerexplosives )
        {
            if ( istrue( var_2 ) )
                self.plantedlethalequip[0] notify( "detonateExplosive" );
            else
                self.plantedlethalequip[0] deleteexplosive();
        }
    }

    self.plantedlethalequip[self.plantedlethalequip.size] = var_0;
    var_3 = var_0 getentitynumber();
    level.mines[var_3] = var_0;
    level notify( "mine_planted" );
}

alternate_breach_anim_func( var_0 )
{
    var_1 = var_0 getentitynumber();
    level.mines[var_1] = var_0;
}

watchc4altdetonate( var_0 )
{
    self notify( "watchC4AltDetonate" );
    self endon( "watchC4AltDetonate" );
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "detonated" );
    level endon( "game_ended" );
    var_1 = 0;

    for (;;)
    {
        if ( self usebuttonpressed() )
        {
            var_1 = 0;

            while ( self usebuttonpressed() )
            {
                var_1 = var_1 + 0.05;
                wait 0.05;
            }

            if ( var_1 >= 0.5 )
                continue;

            var_1 = 0;

            while ( !self usebuttonpressed() && var_1 < 0.5 )
            {
                var_1 = var_1 + 0.05;
                wait 0.05;
            }

            if ( var_1 >= 0.5 )
                continue;

            if ( !self.plantedlethalequip.size )
                return;

            self notify( "alt_detonate" );
        }

        wait 0.05;
    }
}

watchc4altdetonation()
{
    self notify( "watchC4AltDetonation" );
    self endon( "watchC4AltDetonation" );
    self endon( "death" );
    self endon( "disconnect" );

    for (;;)
    {
        self waittill( "alt_detonate" );
        var_0 = self getcurrentweapon();

        if ( var_0.basename != "c4_mp_p" )
            c4detonateallcharges();
    }
}

watchc4detonation()
{
    self notify( "watchC4Detonation" );
    self endon( "watchC4Detonation" );
    self endon( "death" );
    self endon( "disconnect" );
    var_0 = getcompleteweaponname( "c4_mp_p" );

    for (;;)
    {
        self waittillmatch( "detonate", var_0 );
        c4detonateallcharges();
    }
}

c4detonateallcharges()
{
    foreach ( var_1 in self.plantedlethalequip )
    {
        if ( isdefined( var_1 ) && var_1.weapon_name == "c4_mp_p" )
        {
            var_1 thread waitanddetonate( 0.1 );
            scripts\engine\utility::array_remove( self.plantedlethalequip, var_1 );
        }
    }

    self notify( "c4_update", 0 );
    waittillframeend;
    self notify( "detonated" );
}

waitanddetonate( var_0 )
{
    self endon( "death" );
    wait( var_0 );
    waittillenabled();
    self notify( "detonateExplosive" );
}

waittillenabled()
{
    if ( !isdefined( self.disabled ) )
        return;

    self waittill( "enabled" );
}

clustergrenadeused()
{
    var_0 = self.originalowner;
    var_0 endon( "disconnect" );
    thread ownerdisconnectcleanup( var_0 );
    var_1 = [];

    for ( var_2 = 0; var_2 < 4; var_2++ )
        var_1[var_2] = 0.2;

    var_3 = 0;

    foreach ( var_5 in var_1 )
        var_3 = var_3 + var_5;

    var_7 = spawn( "script_model", self.origin );
    var_7 linkto( self );
    var_7 setmodel( "tag_origin" );
    var_7 setscriptmoverkillcam( "explosive" );
    var_7 thread deathdelaycleanup( self, var_3 + 5 );
    var_7 thread ownerdisconnectcleanup( self.owner );
    var_7.threwback = self.threwback;
    var_8 = var_0 scripts\cp\utility::_launchgrenade( "cluster_grenade_indicator_mp", self.origin, ( 0, 0, 0 ) );
    var_8 linkto( self );
    var_8 thread deathdelaycleanup( self, var_3 );
    var_8 thread ownerdisconnectcleanup( self.owner );
    thread scripts\cp\utility::notifyafterframeend( "death", "end_explode" );
    self endon( "end_explode" );
    self waittill( "explode", var_9 );
    thread clustergrenadeexplode( var_9, var_1, var_0, var_7 );
}

clustergrenadeexplode( var_0, var_1, var_2, var_3 )
{
    var_2 endon( "disconnect" );
    var_4 = scripts\engine\trace::create_contents( 0, 1, 1, 0, 1, 0, 0 );
    var_5 = 0;
    var_6 = var_0 + ( 0, 0, 3 );
    var_7 = var_6 + ( 0, 0, -5 );
    var_8 = physics_raycast( var_6, var_7, var_4, undefined, 0, "physicsquery_closest" );

    if ( isdefined( var_8 ) && var_8.size > 0 )
        var_5 = 1;

    var_9 = scripts\engine\utility::ter_op( var_5, ( 0, 0, 32 ), ( 0, 0, 2 ) );
    var_10 = var_0 + var_9;
    var_11 = randomint( 90 ) - 45;
    var_4 = scripts\engine\trace::create_contents( 0, 1, 1, 0, 1, 0, 0 );

    for ( var_12 = 0; var_12 < 4; var_12++ )
    {
        var_3.shellshockondamage = scripts\engine\utility::ter_op( var_12 == 0, 1, undefined );
        var_3 radiusdamage( var_0, 256, 800, 400, var_2, "MOD_EXPLOSIVE", "cluster_grenade_zm" );
        var_13 = scripts\engine\utility::ter_op( var_12 < 4, 90 * var_12 + var_11, randomint( 360 ) );
        var_14 = scripts\engine\utility::ter_op( var_5, 110, 90 );
        var_15 = scripts\engine\utility::ter_op( var_5, 12, 45 );
        var_16 = var_14 + randomint( var_15 * 2 ) - var_15;
        var_17 = randomint( 60 ) + 30;
        var_18 = cos( var_13 ) * sin( var_16 );
        var_19 = sin( var_13 ) * sin( var_16 );
        var_20 = cos( var_16 );
        var_21 = ( var_18, var_19, var_20 ) * var_17;
        var_6 = var_10;
        var_7 = var_10 + var_21;
        var_8 = physics_raycast( var_6, var_7, var_4, undefined, 0, "physicsquery_closest" );

        if ( isdefined( var_8 ) && var_8.size > 0 )
            var_7 = var_8[0]["position"];

        playfx( scripts\engine\utility::getfx( "clusterGrenade_explode" ), var_7 );

        switch ( var_12 )
        {
            case 0:
                playsoundatpos( var_7, "frag_grenade_expl_trans" );
                break;
            case 3:
                playsoundatpos( var_7, "cluster_explode_end" );
                break;
            default:
                playsoundatpos( var_7, "cluster_explode_mid" );
        }

        wait( var_1[var_12] );
    }
}

deathdelaycleanup( var_0, var_1 )
{
    self endon( "death" );
    var_0 waittill( "death" );
    wait( var_1 );
    self delete();
}

ownerdisconnectcleanup( var_0 )
{
    self endon( "death" );
    var_0 waittill( "disconnect" );
    self delete();
}

semtexused( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    var_0.originalowner = self;
    var_0 setentityowner( self );
    var_0 setotherent( self );
    var_0 thread semtex_watch_cleanup();
    var_0 thread semtex_watch_fuse();
    var_1 = var_0.owner.name;
    var_0 waittill( "missile_stuck", var_2 );
    level notify( "grenade_exploded_during_stealth", var_0.origin, "semtex_mp", var_1 );
    var_0 thread grenade_earthquake();
    var_0 explosivehandlemovers( undefined );
}

semtex_watch_fuse()
{
    self endon( "death" );
    wait 2;
    thread semtex_explode();
}

semtex_explode()
{
    thread semtex_delete( 0.1 );
}

semtex_destroy()
{
    thread semtex_delete( 0.1 );
}

semtex_delete( var_0 )
{
    self notify( "death" );
    self.exploding = 1;
    wait( var_0 );
    self delete();
}

semtex_watch_cleanup()
{
    self endon( "death" );
    semtex_watch_cleanup_end_early();

    if ( isdefined( self ) )
        thread semtex_destroy();
}

semtex_watch_cleanup_end_early()
{
    self.owner endon( "disconnect" );
    self.owner endon( "joined_team" );
    self.owner endon( "joined_spectators" );
    level endon( "game_ended" );

    for (;;)
        waitframe();
}

canweaponhaveattachment( var_0, var_1 )
{
    var_2 = scripts\cp\utility::getweaponattachmentsbasenames( var_0 );

    foreach ( var_1 in var_2 )
    {

    }
}

doesattachmentconflict( var_0, var_1 )
{
    foreach ( var_3 in level.br_pickups.br_pickupconflicts[var_1] )
    {
        if ( attachmentisdefault( var_0 ) )
            continue;
        else
        {
            var_4 = scripts\cp\utility::attachmentmap_tobase( var_0 );

            if ( var_4 == var_3 )
                return 1;
        }
    }

    return 0;
}

attachmentisdefault( var_0 )
{
    return isdefined( var_0 ) && ( scripts\engine\utility::string_starts_with( var_0, "rec" ) || scripts\engine\utility::string_starts_with( var_0, "front" ) || scripts\engine\utility::string_starts_with( var_0, "back" ) || scripts\engine\utility::string_starts_with( var_0, "mag" ) || scripts\engine\utility::string_starts_with( var_0, "guard" ) || scripts\engine\utility::string_starts_with( var_0, "triggrip" ) || scripts\engine\utility::string_starts_with( var_0, "toprail" ) );
}

hasattachmentconflictwithweapon( var_0, var_1 )
{
    return hasattachmentconflict( getweaponattachments( var_0 ), var_1 );
}

hasattachmentconflict( var_0, var_1 )
{
    if ( var_1 == -1 )
        return 1;

    foreach ( var_3 in var_0 )
    {
        if ( doesattachmentconflict( var_3, var_1 ) )
            return 1;
    }

    return 0;
}

removeattachmentsandgiveweapon( var_0, var_1 )
{
    if ( !isdefined( var_0 ) || !isdefined( self ) || !isplayer( self ) )
        return;

    var_2 = var_1;
    var_3 = self getweaponammoclip( var_2 );
    var_4 = self getweaponammostock( var_2 );
    var_5 = scripts\cp\utility::getweaponattachmentsbasenames( var_2 );

    for ( var_6 = 0; var_6 < var_0.size; var_6++ )
    {
        if ( scripts\engine\utility::array_contains( var_5, var_0[var_6] ) )
            var_5 = scripts\engine\utility::array_remove( var_5, var_0[var_6] );
    }

    scripts\cp\cp_weapons::_takeweapon( var_2 );
    var_7 = scripts\cp\utility::getweaponrootname( var_2.basename );
    var_8 = buildweaponuniqueattachments( var_7, var_5, -1 );

    if ( isdefined( var_2.attachments ) )
    {
        foreach ( var_10 in var_2.attachments )
            var_2 = var_2 withoutattachment( var_10 );
    }

    foreach ( var_13 in var_8 )
        var_2 = var_2 withattachment( var_13 );

    self giveweapon( var_2 );
    self setweaponammoclip( var_2, var_3 );
    self setweaponammostock( var_2, var_4 );
    self switchtoweapon( var_2 );
}

remove_attachment( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0 ) && !isdefined( var_1 ) )
        return;

    var_3 = [];
    var_4 = undefined;
    var_5 = undefined;

    if ( isdefined( var_2 ) )
    {
        if ( issameweapon( var_2 ) )
            var_3[var_3.size] = var_2;
        else
            var_3[var_3.size] = asmdevgetallstates( var_2 );
    }
    else
        var_3 = var_1 getweaponslistall();

    foreach ( var_7 in var_3 )
    {
        if ( var_7 hasattachment( var_0, 1 ) )
        {
            var_8 = scripts\cp\utility::getrawbaseweaponname( var_7 );
            var_9 = getweaponbasename( var_7 );
            var_1 takeweapon( var_7 );
            var_10 = getweaponattachments( var_7 );

            foreach ( var_12 in var_10 )
            {
                if ( issubstr( var_12, var_0 ) )
                {
                    var_10 = scripts\engine\utility::array_remove( var_10, var_12 );
                    break;
                }
            }

            if ( isdefined( level.build_weapon_name_func ) )
                var_5 = var_1 [[ level.build_weapon_name_func ]]( var_9, var_10 );

            if ( isdefined( var_5 ) )
            {
                var_3 = self getweaponslistprimaries();

                foreach ( var_2 in var_3 )
                {
                    if ( issubstr( var_2.basename, var_5.basename ) )
                    {
                        if ( var_2.isalternate )
                        {
                            var_9 = getweaponbasename( var_2 );

                            if ( isdefined( level.alt_mode_weapons_allowed ) && scripts\engine\utility::array_contains( level.alt_mode_weapons_allowed, var_9 ) )
                            {
                                var_5 = var_5 getaltweapon();
                                break;
                            }
                        }
                    }
                }

                var_1 scripts\cp\utility::_giveweapon( var_5, -1, -1, 1 );
                var_1 switchtoweapon( var_5 );
            }
        }
    }
}

has_weapon_variation( var_0 )
{
    var_1 = self getweaponslistall();
    var_2 = undefined;

    if ( issameweapon( var_0 ) )
        var_2 = var_0.basename;
    else
        var_2 = var_0;

    foreach ( var_4 in var_1 )
    {
        var_5 = scripts\cp\utility::getrawbaseweaponname( var_2 );
        var_6 = scripts\cp\utility::getrawbaseweaponname( var_4 );

        if ( var_5 == var_6 )
            return 1;
    }

    return 0;
}

has_weapon_variation_without_attachments( var_0, var_1 )
{
    var_2 = self getweaponslistall();

    foreach ( var_4 in var_2 )
    {
        if ( var_1 == var_4.basename )
        {
            var_5 = [];

            foreach ( var_7 in var_4.attachments )
                var_5[var_5.size] = scripts\cp\utility::attachmentmap_tobase( var_7 );

            foreach ( var_10 in var_0 )
            {
                if ( scripts\engine\utility::array_contains( var_5, var_10 ) )
                    return 0;
                else
                    return 1;
            }
        }
    }

    return 0;
}

get_weapon_variation_obj( var_0 )
{
    var_1 = self getweaponslistall();
    var_2 = [];
    var_3 = undefined;

    if ( issameweapon( var_0 ) )
        var_3 = var_0.basename;
    else
        var_3 = var_0;

    foreach ( var_5 in var_1 )
    {
        var_6 = scripts\cp\utility::getrawbaseweaponname( var_3 );
        var_7 = scripts\cp\utility::getrawbaseweaponname( var_5 );

        if ( var_6 == var_7 )
            var_2[var_2.size] = var_5;
    }

    return var_2;
}

buildattachmentmaps()
{
    level.attachmentmap_uniquetobase = [];
    level.attachmentmap_uniquetoextra = [];
    level.weaponattachments = [];
    var_0 = [];
    var_1 = 1;

    for ( var_2 = tablelookupbyrow( "mp/attachmentmap.csv", var_1, 0 ); var_2 != ""; var_2 = tablelookupbyrow( "mp/attachmentmap.csv", var_1, 0 ) )
    {
        var_0[var_0.size] = var_2;
        var_1++;
    }

    var_3 = [];
    var_4 = 1;

    for ( var_5 = tablelookupbyrow( "mp/attachmentmap.csv", 0, var_4 ); var_5 != ""; var_5 = tablelookupbyrow( "mp/attachmentmap.csv", 0, var_4 ) )
    {
        var_3[var_5] = var_4;
        var_4++;
    }

    level.attachmentmap_basetounique = [];

    foreach ( var_2 in var_0 )
    {
        foreach ( var_10, var_8 in var_3 )
        {
            var_9 = tablelookup( "mp/attachmentmap.csv", 0, var_2, var_8 );

            if ( var_9 == "" )
                continue;

            if ( !isdefined( level.attachmentmap_basetounique[var_2] ) )
                level.attachmentmap_basetounique[var_2] = [];

            level.attachmentmap_basetounique[var_2][var_10] = var_9;

            if ( !isdefined( level.attachmentmap_uniquetobase[var_9] ) )
            {
                level.attachmentmap_uniquetobase[var_9] = var_10;
                continue;
            }

            if ( level.attachmentmap_uniquetobase[var_9] != var_10 )
            {

            }
        }
    }

    foreach ( var_20, var_13 in level.weaponmapdata )
    {
        var_14 = getsubstr( var_20, 4 );
        var_15 = "mp/gunsmith/" + var_14 + "_progression.csv";

        if ( !tableexists( var_15 ) )
            continue;

        level.weaponattachments[var_20] = [];
        var_1 = 1;
        var_16 = tablelookupbyrow( var_15, var_1, 0 );
        var_17 = tablelookupbyrow( var_15, var_1, 1 );

        for ( var_18 = "loot/iw8_" + var_14 + "_attachment_ids.csv"; var_16 != ""; var_17 = tablelookupbyrow( var_15, var_1, 1 ) )
        {
            if ( var_17 != "" )
            {
                var_19 = tablelookup( var_18, 0, var_17, 1 );

                if ( var_19 != "" )
                    level.weaponattachments[var_20][var_19] = var_19;
            }

            var_1++;
            var_16 = tablelookupbyrow( var_15, var_1, 0 );
        }
    }

    level.attachmentmap_attachtoperk = [];
    level.br_give_weapon_clip = [];
    level.br_giveselectedclass = [];
    level.br_insert_armor = [];
    var_21 = getattachmentlistuniquenames();

    foreach ( var_23 in var_21 )
    {
        var_24 = tablelookup( "mp/attachmenttable.csv", 4, var_23, 2 );
        var_25 = scripts\cp\utility::attachmentmap_tobase( var_23 );

        if ( var_24 != "" && isdefined( var_25 ) )
        {
            var_26 = level.br_giveselectedclass[var_25];

            if ( !isdefined( var_26 ) )
                level.br_giveselectedclass[var_25] = var_24;
            else if ( var_24 != var_26 )
                level.br_insert_armor[var_23] = var_24;
        }

        var_27 = tablelookup( "mp/attachmenttable.csv", 4, var_23, 12 );

        if ( var_27 != "" )
            level.attachmentmap_attachtoperk[var_23] = var_27;

        var_28 = tablelookup( "mp/attachmenttable.csv", 4, var_23, 13 );

        if ( var_28 != "" )
            level.attachmentmap_uniquetoextra[var_23] = var_28;

        var_29 = tablelookup( "mp/attachmenttable.csv", 4, var_23, 9 );

        if ( var_29 != "" )
            level.br_give_weapon_clip[var_23] = var_29;
    }

    level.attachmentmap_conflicts = [];
    var_31 = 1;

    for ( var_32 = tablelookupbyrow( "mp/attachmentcombos.csv", var_31, 0 ); var_32 != ""; var_32 = tablelookupbyrow( "mp/attachmentcombos.csv", var_31, 0 ) )
    {
        var_33 = 1;

        for ( var_34 = tablelookupbyrow( "mp/attachmentcombos.csv", 0, var_33 ); var_34 != ""; var_34 = tablelookupbyrow( "mp/attachmentcombos.csv", 0, var_33 ) )
        {
            if ( var_32 != var_34 )
            {
                var_35 = tablelookupbyrow( "mp/attachmentcombos.csv", var_31, var_33 );
                var_36 = scripts\engine\utility::alphabetize( [ var_32, var_34 ] );
                var_37 = var_36[0] + "_" + var_36[1];

                if ( var_35 == "no" && !isdefined( level.attachmentmap_conflicts[var_37] ) )
                    level.attachmentmap_conflicts[var_37] = 1;
                else if ( var_35 != "" )
                    level.attachmentmap_conflicts[var_37] = var_35;
            }

            var_33++;
        }

        var_31++;
    }
}

getattachmentlistuniquenames()
{
    var_0 = [];
    var_1 = 0;

    for ( var_2 = tablelookup( "mp/attachmenttable.csv", 0, var_1, 4 ); var_2 != ""; var_2 = tablelookup( "mp/attachmenttable.csv", 0, var_1, 4 ) )
    {
        var_0[var_2] = var_2;
        var_1++;
    }

    return var_0;
}

create_zombie_base_to_unique_map( var_0, var_1, var_2, var_3 )
{
    if ( var_0 == "zombie" )
    {
        foreach ( var_5 in var_1 )
        {
            foreach ( var_9, var_7 in var_2 )
            {
                var_8 = tablelookup( var_3, 0, var_5, var_7 );

                if ( var_8 == "" )
                    continue;

                if ( !isdefined( level.attachmentmap_basetounique[var_5] ) )
                    level.attachmentmap_basetounique[var_5] = [];

                if ( var_8 == "none" )
                {
                    level.attachmentmap_basetounique[var_5][var_9] = undefined;
                    continue;
                }

                level.attachmentmap_basetounique[var_5][var_9] = var_8;
            }
        }
    }
}

grenade_earthquake( var_0 )
{
    self notify( "grenade_earthQuake" );
    self endon( "grenade_earthQuake" );
    thread endondeath();
    self endon( "end_explode" );
    var_1 = undefined;

    if ( !isdefined( var_0 ) || var_0 )
        self waittill( "explode", var_1 );
    else
        var_1 = self.origin;

    playrumbleonposition( "grenade_rumble", var_1 );
    earthquake( 0.5, 0.75, var_1, 800 );

    foreach ( var_3 in level.players )
    {
        if ( var_3 scripts\cp\utility::isusingremote() )
            continue;

        if ( distancesquared( var_1, var_3.origin ) > 360000 )
            continue;

        if ( var_3 damageconetrace( var_1 ) )
            var_3 thread dirteffect( var_1 );

        var_3 setclientomnvar( "ui_hud_shake", 1 );
    }
}

c4_earthquake()
{
    thread endondeath();
    self endon( "end_explode" );
    self waittill( "explode", var_0 );
    playrumbleonposition( "grenade_rumble", var_0 );
    earthquake( 0.4, 0.75, var_0, 512 );

    foreach ( var_2 in level.players )
    {
        if ( var_2 scripts\cp\utility::isusingremote() )
            continue;

        if ( distance( var_0, var_2.origin ) > 512 )
            continue;

        if ( var_2 damageconetrace( var_0 ) )
            var_2 thread dirteffect( var_0 );

        var_2 setclientomnvar( "ui_hud_shake", 1 );
    }
}

endondeath()
{
    self waittill( "death" );
    waittillframeend;
    self notify( "end_explode" );
}

dirteffect( var_0 )
{
    self notify( "dirtEffect" );
    self endon( "dirtEffect" );
    self endon( "disconnect" );

    if ( !scripts\cp_mp\utility\player_utility::_isalive() )
        return;

    var_1 = vectornormalize( anglestoforward( self.angles ) );
    var_2 = vectornormalize( anglestoright( self.angles ) );
    var_3 = vectornormalize( var_0 - self.origin );
    var_4 = vectordot( var_3, var_1 );
    var_5 = vectordot( var_3, var_2 );
    var_6 = [ "death", "damage" ];
    var_7 = self getcurrentweapon();

    if ( var_4 > 0 && var_4 > 0.5 && var_7.basename != "iw6_riotshield_mp" )
        scripts\engine\utility::waittill_any_in_array_or_timeout( var_6, 2.0 );
    else if ( abs( var_4 ) < 0.866 )
    {
        if ( var_5 > 0 )
            scripts\engine\utility::waittill_any_in_array_or_timeout( var_6, 2.0 );
        else
            scripts\engine\utility::waittill_any_in_array_or_timeout( var_6, 2.0 );
    }
}

shellshockondamage( var_0, var_1 )
{
    if ( isflashbanged() )
        return;

    if ( var_0 == "MOD_EXPLOSIVE" || var_0 == "MOD_GRENADE" || var_0 == "MOD_GRENADE_SPLASH" || var_0 == "MOD_PROJECTILE" || var_0 == "MOD_PROJECTILE_SPLASH" )
    {
        if ( var_1 > 10 )
        {
            if ( isdefined( self.shellshockreduction ) && self.shellshockreduction )
                self shellshock( "damage_cp", self.shellshockreduction );
            else
                self shellshock( "damage_cp", 0.5 );
        }
    }
}

isflashbanged()
{
    return isdefined( self.flashendtime ) && gettime() < self.flashendtime;
}

waittill_grenade_fire()
{
    for (;;)
    {
        self waittill( "grenade_fire", var_0, var_1, var_2, var_3 );

        if ( isdefined( self.throwinggrenade ) && var_1.basename != self.throwinggrenade )
            continue;

        if ( isdefined( var_0 ) )
        {
            if ( !isdefined( var_0.weapon_obj ) )
                var_0.weapon_obj = var_1;

            if ( !isdefined( var_0.weapon_name ) )
                var_0.weapon_name = var_1.basename;

            if ( !isdefined( var_0.owner ) )
                var_0.owner = self;

            if ( !isdefined( var_0.team ) )
                var_0.team = self.team;

            if ( !isdefined( var_0.ticks ) && isdefined( self.throwinggrenade ) )
                var_0.ticks = scripts\cp\utility::roundup( 4 * var_2 );
        }

        grenadeinitialize( var_0, var_1, var_2, var_3 );

        if ( !scripts\cp_mp\utility\player_utility::_isalive() && !isdefined( self.throwndyinggrenade ) )
        {
            self notify( "grenade_fire_dead", var_0, var_1.basename );
            self.throwndyinggrenade = 1;
        }

        if ( istrue( var_0.threwback ) )
            scripts\cp\cp_powers::power_adjustcharges( 1, "primary" );

        return var_0;
    }
}

grenadestuckto( var_0, var_1, var_2 )
{
    if ( !isdefined( self ) )
    {
        var_0.stuckenemyentity = var_1;
        var_1.stuckbygrenade = var_0;
    }
    else if ( level.teambased && scripts\engine\utility::is_equal( var_1.team, self.team ) )
        var_0.isstuck = "friendly";
    else
    {
        var_3 = undefined;

        if ( !isdefined( var_0.weapon_name ) )
            return;

        switch ( var_0.weapon_name )
        {
            case "semtex_mp":
                var_3 = "semtex_stuck";
                break;
            case "molotov_mp":
                var_3 = "molotov_stuck";
                break;
            case "pop_rocket_proj_mp":
                var_3 = "flare_gun_attacker_stuck";
                break;
            case "thermite_mp":
                var_3 = "thermite_attacker_stuck";
                break;
        }

        var_0.isstuck = "enemy";
        var_0.stuckenemyentity = var_1;
        var_1.stuckbygrenade = var_0;
        self notify( "grenade_stuck_enemy" );

        if ( isplayer( var_1 ) )
            level thread scripts\cp\cp_player_battlechatter::trysaylocalsound( var_1, "incoming_stuck" );
    }
}

grenadestucktosplash( var_0, var_1 )
{
    var_2 = self;

    if ( isplayer( var_1 ) && isdefined( var_0 ) )
    {
        if ( isdefined( var_2.owner ) )
            var_2 = var_2.owner;

        var_2 scripts\cp\cp_hud_message::showsplash( var_0 );
    }
}

can_use_attachment( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = self getcurrentweapon();

    var_2 = getweaponbasename( var_1 );
    var_3 = var_1.classname;
    var_4 = get_possible_attachments_by_weaponclass( var_3, var_2, var_0 );

    if ( !var_4 )
        return 0;

    return 1;
}

add_attachment_to_weapon( var_0, var_1, var_2, var_3 )
{
    var_4 = undefined;

    if ( isdefined( var_1 ) )
    {
        if ( issameweapon( var_1 ) )
            var_4 = var_1;
        else
            var_4 = asmdevgetallstates( var_1 );
    }
    else
        var_4 = scripts\cp\utility::getvalidtakeweapon();

    var_5 = getweaponbasename( var_4 );
    var_6 = 0;
    var_7 = getweaponattachments( var_4 );
    var_8 = scripts\cp\utility::getcurrentcamoname( var_4 );
    var_9 = return_weapon_name_with_like_attachments( var_4, var_0, var_7, undefined, var_8 );

    if ( !isdefined( var_9 ) )
        return 0;

    var_10 = asmdevgetallstates( var_9 );

    if ( nullweapon( var_10 ) )
        return 0;

    var_11 = var_4.isalternate;

    if ( var_10 hasattachment( "xmags", 1 ) )
        var_6 = 1;

    if ( isdefined( var_0 ) )
    {
        if ( !issubstr( var_0, "pap" ) )
        {
            var_12 = self getweaponammoclip( var_4 );
            var_13 = self getweaponammostock( var_4 );

            if ( var_10 hasattachment( "akimbo", 1 ) )
                var_14 = self getweaponammoclip( var_4, "left" );
            else
                var_14 = undefined;

            self takeweapon( var_4 );
            scripts\cp\utility::_giveweapon( var_10, undefined, undefined, 1 );

            if ( var_10 hasattachment( "xmags", 1 ) && !var_6 )
                var_12 = weaponclipsize( var_10 );

            self setweaponammoclip( var_10, var_12 );
            self setweaponammostock( var_10, var_13 );

            if ( isdefined( var_14 ) )
                self setweaponammoclip( var_10, var_14, "left" );
        }
        else
        {
            self takeweapon( var_4 );
            scripts\cp\utility::_giveweapon( var_10, undefined, undefined, 0 );
            self givemaxammo( var_10 );
        }
    }

    self playlocalsound( "weap_raise_large_plr" );
    var_15 = self getweaponslistprimaries();

    foreach ( var_1 in var_15 )
    {
        if ( issubstr( var_1.basename, var_10.basename ) )
        {
            if ( var_1.isalternate )
            {
                var_17 = getweaponbasename( var_1 );

                if ( isdefined( level.alt_mode_weapons_allowed ) && scripts\engine\utility::array_contains( level.alt_mode_weapons_allowed, var_17 ) || var_11 )
                {
                    var_10 = var_10 getaltweapon();
                    break;
                }
            }
        }
    }

    if ( istrue( var_3 ) )
        return 1;

    if ( istrue( var_2 ) )
        self switchtoweaponimmediate( var_10 );
    else
        self switchtoweapon( var_10 );

    return 1;
}

isforgefreezeweapon( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( isdefined( var_0 ) )
    {
        if ( var_0 == "iw7_forgefreeze_zm" || var_0 == "iw7_forgefreeze_zm_pap1" || var_0 == "iw7_forgefreeze_zm_pap2" || var_0 == "zfreeze_semtex_mp" )
            return 1;
    }

    return 0;
}

issteeldragon( var_0 )
{
    var_1 = getweaponbasename( var_0 );

    if ( !isdefined( var_1 ) )
        return 0;

    return var_1 == "iw7_steeldragon_zm";
}

is_perk_attachment( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( var_0 == "doubletap" )
        return 1;

    return 0;
}

is_arcane_attachment( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( issubstr( var_0, "ark" ) )
        return 1;

    if ( issubstr( var_0, "arcane" ) )
        return 1;

    return 0;
}

is_mod_attachment( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( issubstr( var_0, "mod" ) )
        return 1;

    return 0;
}

is_default_attachment( var_0, var_1 )
{
    var_2 = scripts\cp\utility::weaponattachdefaultmap( var_1 );

    if ( !isdefined( var_2 ) || var_2.size < 1 )
        return 0;

    foreach ( var_4 in var_2 )
    {
        if ( var_0 == var_4 )
            return 1;
    }

    return 0;
}

is_pap_attachment( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( issubstr( var_0, "pap" ) )
        return 1;

    return 0;
}

get_possible_attachments_by_weaponclass( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( !isdefined( var_1 ) )
        return 0;

    if ( !isdefined( var_2 ) )
        return 0;

    var_3 = [];
    var_4 = scripts\cp\utility::getbaseweaponname( var_1 );

    if ( isdefined( level.attachmentmap_basetounique[var_4] ) )
    {
        if ( isdefined( level.attachmentmap_basetounique[var_4][var_2] ) )
        {
            if ( level.attachmentmap_basetounique[var_4][var_2] != "none" )
                return 1;
            else
                return 0;
        }
    }

    if ( isdefined( level.attachmentmap_basetounique[var_0] ) )
    {
        if ( isdefined( level.attachmentmap_basetounique[var_0][var_2] ) )
        {
            if ( level.attachmentmap_basetounique[var_0][var_2] != "none" )
                return 1;
            else
                return 0;
        }
    }

    if ( isdefined( level.attachmentmap_basetounique[var_4] ) )
    {
        var_5 = getarraykeys( level.attachmentmap_basetounique[var_4] );

        foreach ( var_7 in var_5 )
        {
            if ( level.attachmentmap_basetounique[var_4][var_7] == var_2 )
            {
                if ( level.attachmentmap_basetounique[var_4][var_7] != "none" )
                    return 1;
                else
                    return 0;
            }
        }
    }

    if ( isdefined( level.attachmentmap_basetounique[var_0] ) )
    {
        var_5 = getarraykeys( level.attachmentmap_basetounique[var_0] );

        foreach ( var_7 in var_5 )
        {
            if ( level.attachmentmap_basetounique[var_0][var_7] == var_2 )
            {
                if ( level.attachmentmap_basetounique[var_0][var_7] != "none" )
                    return 1;
                else
                    return 0;
            }
        }
    }

    return 0;
}

return_weapon_name_with_like_attachments( var_0, var_1, var_2, var_3, var_4 )
{
    if ( isdefined( var_0 ) )
    {
        if ( issameweapon( var_0 ) )
            var_5 = var_0;
        else
            var_5 = asmdevgetallstates( var_0 );
    }
    else
        var_5 = self getcurrentweapon();

    var_6 = getweaponbasename( var_5 );
    var_7 = scripts\cp\utility::get_weapon_variant_id( self, var_5 );
    var_8 = 0;
    var_9 = 0;
    var_10 = 0;
    var_11 = 0;
    var_12 = undefined;
    var_13 = [];
    var_14 = 7;
    var_15 = [];
    var_16 = 1;
    var_17 = [];
    var_18 = 1;
    var_19 = [];
    var_20 = 1;
    var_21 = [];
    var_22 = 1;
    var_23 = [];
    var_24 = 1;
    var_25 = [];
    var_26 = 12;
    var_27 = var_5.classname;

    if ( var_5 hasattachment( "xmags", 1 ) )
        var_9 = 1;

    var_28 = get_possible_attachments_by_weaponclass( var_27, var_6, var_1 );

    if ( !var_28 && isdefined( var_1 ) )
    {
        if ( !istrue( var_3 ) )
            scripts\cp\utility::setlowermessage( "cant_attach", &"COOP_PILLAGE/CANT_USE", 3 );

        return undefined;
    }

    if ( !isdefined( var_2 ) )
        var_2 = getweaponattachments( var_5 );

    if ( scripts\cp\utility::has_zombie_perk( "perk_machine_rat_a_tat" ) )
    {
        if ( get_possible_attachments_by_weaponclass( var_27, var_6, "doubletap" ) )
            var_2[var_2.size] = "doubletap";
    }

    if ( isdefined( var_1 ) )
    {
        if ( weaponclass( var_0 ) == "spread" )
        {
            if ( issubstr( var_1, "arkyellow" ) )
            {
                foreach ( var_30 in var_2 )
                {
                    if ( issubstr( var_30, "smart" ) )
                        var_2 = scripts\engine\utility::array_remove( var_2, var_30 );
                }
            }
        }
    }

    var_2 = scripts\engine\utility::array_remove_duplicates( var_2 );
    var_2 = scripts\engine\utility::array_removeundefined( var_2 );

    if ( var_2.size > 0 && var_2.size <= var_26 )
    {
        foreach ( var_33 in var_2 )
        {
            if ( is_pap_attachment( var_33 ) )
            {
                if ( var_17.size < var_18 )
                {
                    var_17[var_17.size] = var_33;
                    var_25[var_25.size] = var_33;
                }
                else
                    continue;

                continue;
            }

            if ( is_arcane_attachment( var_33 ) )
            {
                if ( var_23.size < var_24 )
                {
                    var_23[var_23.size] = var_33;
                    var_25[var_25.size] = var_33;
                }
                else
                    continue;

                continue;
            }

            if ( is_mod_attachment( var_33 ) )
            {
                if ( var_19.size < var_20 )
                {
                    var_19[var_19.size] = var_33;
                    var_25[var_25.size] = var_33;
                }
                else
                    continue;

                continue;
            }

            if ( is_default_attachment( var_33, scripts\cp\utility::getweaponrootname( var_6 ) ) )
            {
                if ( var_21.size < var_22 )
                {
                    var_21[var_21.size] = var_33;
                    var_25[var_25.size] = var_33;
                }
                else
                    continue;

                continue;
            }

            if ( is_perk_attachment( var_33 ) )
            {
                if ( var_15.size < var_16 )
                {
                    var_15[var_15.size] = var_33;
                    var_25[var_25.size] = var_33;
                }
                else
                    continue;

                continue;
            }

            if ( var_13.size < var_14 )
            {
                var_13[var_13.size] = var_33;
                var_25[var_25.size] = var_33;
                continue;
            }

            continue;
        }
    }

    if ( isdefined( var_1 ) )
    {
        var_35 = scripts\cp\utility::attachmentmap_tobase( var_1 );

        if ( isdefined( var_35 ) && var_35 != "none" )
        {
            for ( var_36 = 0; var_36 < var_25.size; var_36++ )
            {
                var_37 = scripts\cp\utility::attachmentmap_tobase( var_25[var_36] );

                if ( var_37 == var_35 )
                {
                    var_25[var_36] = var_1;
                    var_8 = 1;
                    break;
                }
            }
        }

        var_38 = scripts\cp\utility::getattachmenttype( var_1 );

        if ( isdefined( var_38 ) && var_38 != "none" )
        {
            if ( !var_8 )
            {
                if ( is_pap_attachment( var_1 ) )
                {
                    if ( var_17.size < var_18 )
                    {
                        var_17[var_17.size] = var_1;
                        var_25[var_25.size] = var_1;
                    }
                    else
                    {
                        for ( var_36 = 0; var_36 < var_25.size; var_36++ )
                        {
                            var_39 = scripts\cp\utility::getattachmenttype( var_25[var_36] );

                            if ( var_39 == var_38 )
                            {
                                var_17[var_17.size] = var_1;
                                var_25[var_36] = var_1;
                                var_8 = 1;
                                break;
                            }
                        }
                    }
                }
                else if ( is_arcane_attachment( var_1 ) )
                {
                    if ( var_23.size < var_24 )
                    {
                        var_23[var_23.size] = var_1;
                        var_25[var_25.size] = var_1;
                    }
                    else
                    {
                        for ( var_36 = 0; var_36 < var_25.size; var_36++ )
                        {
                            var_39 = scripts\cp\utility::getattachmenttype( var_25[var_36] );

                            if ( var_39 == var_38 )
                            {
                                var_23[var_15.size] = var_1;
                                var_25[var_36] = var_1;
                                var_8 = 1;
                                break;
                            }
                        }
                    }
                }
                else if ( is_perk_attachment( var_1 ) )
                {
                    if ( var_15.size < var_16 )
                    {
                        var_15[var_15.size] = var_1;
                        var_25[var_25.size] = var_1;
                    }
                    else
                    {
                        for ( var_36 = 0; var_36 < var_25.size; var_36++ )
                        {
                            var_39 = scripts\cp\utility::getattachmenttype( var_25[var_36] );

                            if ( var_39 == var_38 )
                            {
                                var_15[var_15.size] = var_1;
                                var_25[var_36] = var_1;
                                var_8 = 1;
                                break;
                            }
                        }
                    }
                }
                else if ( var_13.size < var_14 )
                {
                    var_13[var_13.size] = var_1;
                    var_25[var_25.size] = var_1;
                }
                else
                {
                    for ( var_36 = 0; var_36 < var_25.size; var_36++ )
                    {
                        var_39 = scripts\cp\utility::getattachmenttype( var_25[var_36] );

                        if ( var_39 == var_38 )
                        {
                            var_13[var_13.size] = var_1;
                            var_25[var_36] = var_1;
                            var_8 = 1;
                            break;
                        }
                    }

                    if ( !var_8 )
                        return undefined;
                }
            }
            else if ( is_perk_attachment( var_1 ) )
            {
                var_17[var_17.size] = var_1;
                var_25[var_25.size] = var_1;
            }
            else if ( is_pap_attachment( var_1 ) )
            {
                var_15[var_15.size] = var_1;
                var_25[var_25.size] = var_1;
            }
            else if ( is_arcane_attachment( var_1 ) )
            {
                var_23[var_23.size] = var_1;
                var_25[var_25.size] = var_1;
            }
            else
            {
                var_13[var_13.size] = var_1;
                var_25[var_25.size] = var_1;
            }
        }
        else if ( isdefined( var_1 ) )
        {
            if ( is_perk_attachment( var_1 ) )
            {
                var_15[var_15.size] = var_1;
                var_25[var_25.size] = var_1;
            }
            else if ( is_pap_attachment( var_1 ) )
            {
                var_17[var_17.size] = var_1;
                var_25[var_25.size] = var_1;
            }
            else if ( is_arcane_attachment( var_1 ) )
            {
                var_23[var_23.size] = var_1;
                var_25[var_25.size] = var_1;
            }
            else
            {
                var_13[var_13.size] = var_1;
                var_25[var_25.size] = var_1;
            }
        }
    }

    var_40 = scripts\cp\utility::getweaponrootname( var_6 );
    var_41 = isdefined( self.weapon_build_models[scripts\cp\utility::getrawbaseweaponname( var_5 )] );

    if ( !isdefined( var_4 ) && var_41 )
        var_10 = scripts\cp\utility::getweaponcamo( var_40 );
    else
        var_10 = var_4;

    if ( var_41 )
    {
        var_42 = 0;

        foreach ( var_30 in var_25 )
        {
            if ( issubstr( var_30, "cos_" ) )
            {
                var_42 = 1;
                var_12 = undefined;
                break;
            }
        }

        if ( !var_42 )
            var_12 = scripts\cp\utility::getweaponcosmeticattachment( var_40 );

        var_11 = scripts\cp\utility::getweaponreticle( var_40 );
        var_45 = scripts\cp\utility::getweaponpaintjobid( var_40 );
    }
    else
    {
        var_12 = undefined;
        var_11 = undefined;
        var_45 = undefined;
    }

    foreach ( var_30 in var_25 )
    {
        if ( issubstr( var_30, "arcane" ) || issubstr( var_30, "ark" ) )
        {
            foreach ( var_48 in var_25 )
            {
                if ( var_30 == var_48 )
                    continue;

                if ( issubstr( var_48, "cos_" ) )
                    var_25 = scripts\engine\utility::array_remove( var_25, var_48 );
            }

            var_12 = undefined;
        }
    }

    var_51 = scripts\cp\utility::mpbuildweaponname( var_40, var_25, var_10, var_11, var_7, self getentitynumber(), self.clientid, var_45, var_12 );

    if ( isdefined( var_51 ) )
        return var_51;
    else
        return createheadicon( var_5 );
}

getattachmenttypeslist( var_0, var_1 )
{
    var_2 = scripts\cp\utility::getweaponattachmentarrayfromstats( var_0 );
    var_3 = [];

    foreach ( var_5 in var_2 )
    {
        var_6 = scripts\cp\utility::getattachmenttype( var_5 );

        if ( isdefined( var_1 ) && scripts\cp\utility::listhasattachment( var_1, var_5 ) )
            continue;

        if ( !isdefined( var_3[var_6] ) )
            var_3[var_6] = [];

        var_7 = var_3[var_6];
        var_7[var_7.size] = var_5;
        var_3[var_6] = var_7;
    }

    return var_3;
}

getattachmentlistbasenames()
{
    var_0 = [];
    var_1 = [ "mp/attachmenttable.csv", "cp/cp_attachmenttable.csv" ];

    foreach ( var_3 in var_1 )
    {
        var_4 = 0;

        for ( var_5 = tablelookup( var_3, 0, var_4, 5 ); var_5 != ""; var_5 = tablelookup( var_3, 0, var_4, 5 ) )
        {
            var_6 = tablelookup( var_3, 0, var_4, 2 );

            if ( var_6 != "none" && !scripts\engine\utility::array_contains( var_0, var_5 ) )
                var_0[var_0.size] = var_5;

            var_4++;
        }
    }

    return var_0;
}

getweaponattachmentarray( var_0 )
{
    var_1 = [];
    var_2 = scripts\cp\utility::getbaseweaponname( var_0 );
    var_3 = scripts\cp\utility::coop_getweaponclass( var_0 );

    if ( isdefined( level.attachmentmap_basetounique[var_2] ) )
        var_1 = scripts\engine\utility::array_combine( var_1, level.attachmentmap_basetounique[var_2] );

    if ( isdefined( level.attachmentmap_basetounique[var_3] ) )
        var_1 = scripts\engine\utility::array_combine( var_1, level.attachmentmap_basetounique[var_3] );

    return var_1;
}

isvalidzombieweapon( var_0 )
{
    if ( !isdefined( level.weaponrefs ) )
    {
        level.weaponrefs = [];

        foreach ( var_2 in level.weaponlist )
            level.weaponrefs[createheadicon( var_2 )] = 1;
    }

    if ( isdefined( level.weaponrefs[var_0] ) )
        return 1;

    return 0;
}

setweaponlaser_internal()
{
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "unsetWeaponLaser" );
    self.perkweaponlaseron = 0;
    var_0 = self getcurrentweapon();

    for (;;)
    {
        setweaponlaser_waitforlaserweapon( var_0 );

        if ( self.perkweaponlaseron == 0 )
        {
            self.perkweaponlaseron = 1;
            enableweaponlaser();
        }

        childthread setweaponlaser_monitorads();
        childthread setweaponlaser_monitorweaponswitchstart( 1.0 );
        self.perkweaponlaseroffforswitchstart = undefined;
        self waittill( "weapon_change", var_0 );

        if ( self.perkweaponlaseron == 1 )
        {
            self.perkweaponlaseron = 0;
            disableweaponlaser();
        }
    }
}

setweaponlaser_waitforlaserweapon( var_0 )
{
    for (;;)
    {
        if ( isdefined( var_0 ) && ( var_0.basename == "iw6_kac_mp" || var_0.basename == "iw6_arx160_mp" ) )
            break;

        self waittill( "weapon_change", var_0 );
    }
}

setweaponlaser_monitorads()
{
    self endon( "weapon_change" );

    for (;;)
    {
        if ( !isdefined( self.perkweaponlaseroffforswitchstart ) || self.perkweaponlaseroffforswitchstart == 0 )
        {
            if ( self playerads() > 0.6 )
            {
                if ( self.perkweaponlaseron == 1 )
                {
                    self.perkweaponlaseron = 0;
                    disableweaponlaser();
                }
            }
            else if ( self.perkweaponlaseron == 0 )
            {
                self.perkweaponlaseron = 1;
                enableweaponlaser();
            }
        }

        waitframe();
    }
}

setweaponlaser_monitorweaponswitchstart( var_0 )
{
    self endon( "weapon_change" );

    for (;;)
    {
        self waittill( "weapon_switch_started" );
        childthread setweaponlaser_onweaponswitchstart( var_0 );
    }
}

setweaponlaser_onweaponswitchstart( var_0 )
{
    self notify( "setWeaponLaser_onWeaponSwitchStart" );
    self endon( "setWeaponLaser_onWeaponSwitchStart" );

    if ( self.perkweaponlaseron == 1 )
    {
        self.perkweaponlaseroffforswitchstart = 1;
        self.perkweaponlaseron = 0;
        disableweaponlaser();
    }

    wait( var_0 );
    self.perkweaponlaseroffforswitchstart = undefined;

    if ( self.perkweaponlaseron == 0 && self playerads() <= 0.6 )
    {
        self.perkweaponlaseron = 1;
        enableweaponlaser();
    }
}

enableweaponlaser()
{
    if ( !isdefined( self.weaponlasercalls ) )
        self.weaponlasercalls = 0;

    self.weaponlasercalls++;
    self laseron();
}

disableweaponlaser()
{
    self.weaponlasercalls--;

    if ( self.weaponlasercalls == 0 )
    {
        self laseroff();
        self.weaponlasercalls = undefined;
    }
}

ondetonateexplosive( var_0 )
{
    self endon( "death" );
    level endon( "game_ended" );
    thread cleanupexplosivesondeath();
    self waittill( "detonateExplosive" );

    if ( isdefined( var_0 ) )
        self.owner notify( var_0, 1 );
    else
        self.owner notify( "powers_c4_used", 1 );

    self detonate( self.owner );
}

cleanupexplosivesondeath()
{
    self endon( "deleted_equipment" );
    level endon( "game_ended" );
    var_0 = self getentitynumber();
    var_1 = self.killcament;
    var_2 = self.trigger;
    var_3 = self.sensor;
    self waittill( "death" );
    cleanupequipment( var_0, var_1, var_2, var_3 );
}

cleanupequipment( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( self.weapon_name ) )
    {
        if ( self.weapon_name == "c4_mp_p" )
            self.owner notify( "c4_update", 0 );
        else if ( self.weapon_name == "bouncing_betty_mp" )
            self.owner notify( "bouncing_betty_update", 0 );
        else if ( self.weapon_name == "sticky_mine_mp" )
            self.owner notify( "sticky_mine_update", 0 );
        else if ( self.weapon_name == "trip_mine_mp" )
            self.owner notify( "trip_mine_update", 0 );
        else if ( self.weapon_name == "cryo_grenade_mp" )
            self.owner notify( "restart_cryo_grenade_cooldown", 0 );
    }

    if ( isdefined( var_0 ) )
        level.mines[var_0] = undefined;

    if ( isdefined( var_1 ) )
        var_1 delete();

    if ( isdefined( var_2 ) )
        var_2 delete();

    if ( isdefined( var_3 ) )
        var_3 delete();
}

monitordamage( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    self endon( "death" );
    level endon( "game_ended" );

    if ( !isdefined( var_5 ) )
        var_5 = 0;

    self setcandamage( 1 );
    self.health = 9999999;
    self.maxhealth = var_0;
    self.damagetaken = 0;

    if ( !isdefined( var_4 ) )
        var_4 = 0;

    for ( var_6 = 1; var_6; var_6 = monitordamageoneshot( var_7, var_8, var_9, var_10, var_11, var_12, var_13, var_14, var_15, var_16, var_20, var_1, var_2, var_3, var_4 ) )
    {
        self waittill( "damage", var_7, var_8, var_9, var_10, var_11, var_12, var_13, var_14, var_15, var_16, var_17, var_18, var_19, var_20 );

        if ( var_5 )
            self playrumbleonentity( "damage_light" );

        if ( isdefined( self.helitype ) && self.helitype == "littlebird" )
        {
            if ( !isdefined( self.attackers ) )
                self.attackers = [];

            var_21 = "";

            if ( isdefined( var_8 ) && isplayer( var_8 ) )
                var_21 = var_8 scripts\cp\utility::getuniqueid();

            if ( isdefined( self.attackers[var_21] ) )
                self.attackers[var_21] = self.attackers[var_21] + var_7;
            else
                self.attackers[var_21] = var_7;
        }
    }
}

monitordamageoneshot( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13, var_14 )
{
    if ( !isdefined( self ) )
        return 0;

    if ( isdefined( var_1 ) && !scripts\cp\cp_damage::friendlyfirecheck( self.owner, var_1 ) )
    {
        if ( isdefined( self.equipmentref ) && self.equipmentref == "equip_tac_cover" )
        {

        }
        else
            return 1;
    }

    var_15 = var_0;

    if ( isdefined( var_9 ) )
    {
        if ( non_player_should_ignore_damage( var_1, var_9, var_10, var_4 ) )
            return 1;
    }

    var_16 = scripts\cp_mp\utility\damage_utility::packdamagedata( var_1, self, var_0, var_9, var_4, var_10, var_3, var_2, var_5, var_7, var_6, var_8 );

    if ( !isdefined( var_13 ) )
        var_13 = scripts\cp\cp_damage::modifydamage;

    var_15 = self [[ var_13 ]]( var_16 );

    if ( var_15 <= 0 )
        return 1;

    self.wasdamaged = 1;
    self.damagetaken = self.damagetaken + var_15;
    self.health = 2147483647;

    if ( istrue( var_14 ) )
        scripts\cp\utility::killstreakhit( var_1, var_9, self, var_4, var_15 );

    if ( isdefined( var_1 ) )
    {
        if ( isplayer( var_1 ) )
            var_1 scripts\cp\cp_damagefeedback::updatedamagefeedback( var_11 );
    }

    if ( self.damagetaken >= self.maxhealth )
    {
        var_16 = scripts\cp_mp\utility\damage_utility::packdamagedata( var_1, self, var_0, var_9, var_4, var_10, var_3, var_2, var_5, var_7, var_6, var_8 );
        self thread [[ var_12 ]]( var_16 );
        return 0;
    }

    return 1;
}

non_player_should_ignore_damage( var_0, var_1, var_2, var_3 )
{
    if ( non_player_should_ignore_damage_signature( var_0, var_1, var_2, var_3 ) )
        return 1;

    if ( isdefined( var_1.basename ) )
    {
        if ( var_3 != "MOD_MELEE" )
        {
            switch ( var_1.basename )
            {
                case "iw8_green_beam_mp":
                case "iw8_spotter_scope_mp":
                    return 1;
            }
        }

        if ( var_3 == "MOD_IMPACT" )
        {
            switch ( var_1.basename )
            {
                case "at_mine_mp":
                case "claymore_mp":
                case "c4_mp_p":
                case "thermite_mp":
                case "semtex_mp":
                    return 1;
            }
        }
        else
        {
            switch ( var_1.basename )
            {
                case "claymore_radial_mp":
                case "emp_drone_player_mp":
                case "thermite_ap_mp":
                case "snapshot_grenade_mp":
                case "concussion_grenade_mp":
                case "flash_grenade_mp":
                case "gas_mp":
                    return 1;
            }
        }
    }

    return 0;
}

non_player_should_ignore_damage_signature( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( self.ignoredamagesignatures ) )
        return 0;

    if ( isdefined( var_1 ) && isstring( var_1 ) )
        var_1 = getcompleteweaponname( var_1 );

    foreach ( var_5 in self.ignoredamagesignatures )
    {
        if ( !isdefined( var_5 ) )
            return 0;

        if ( var_5.checkattacker )
        {
            if ( !isdefined( var_5.attacker ) )
            {
                non_player_remove_ignore_damage_signature( var_5.id );
                continue;
            }
            else if ( !isdefined( var_0 ) )
                continue;
            else if ( var_0 != var_5.attacker )
                continue;
        }

        if ( var_5.checkobjweapon )
        {
            if ( !isdefined( var_1 ) || nullweapon( var_1 ) )
                continue;
            else if ( var_1 != var_5.objweapon )
                continue;
        }

        if ( var_5.checkinflictor )
        {
            if ( !isdefined( var_5.inflictor ) )
            {
                non_player_remove_ignore_damage_signature( var_5.id );
                continue;
            }
            else if ( !isdefined( var_2 ) )
                continue;
            else if ( var_2 != var_5.inflictor )
                continue;
        }

        if ( var_5.checkmeansofdeath )
        {
            if ( !isdefined( var_3 ) )
                continue;
            else if ( var_3 != var_5.meansofdeath )
                continue;
        }

        return 1;
    }

    return 0;
}

non_player_remove_ignore_damage_signature( var_0 )
{
    if ( !isdefined( self.ignoredamagesignatures ) )
        return;

    self.ignoredamagesignatures[var_0] = undefined;
}

non_player_add_ignore_damage_signature( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( self.ignoredamageid ) )
        self.ignoredamageid = 0;

    if ( !isdefined( self.ignoredamagesignatures ) )
        self.ignoredamagesignatures = [];

    var_4 = self.ignoredamageid;
    self.ignoredamageid++;

    if ( isdefined( var_1 ) && isstring( var_1 ) )
        var_1 = getcompleteweaponname( var_1 );

    var_5 = spawnstruct();
    var_5.id = var_4;
    var_5.attacker = var_0;
    var_5.objweapon = var_1;
    var_5.inflictor = var_2;
    var_5.meansofdeath = var_3;
    var_5.checkattacker = isdefined( var_0 );
    var_5.checkobjweapon = isdefined( var_1 ) && !nullweapon( var_1 );
    var_5.checkinflictor = isdefined( var_2 );
    var_5.checkmeansofdeath = isdefined( var_3 );
    self.ignoredamagesignatures[var_4] = var_5;
    return var_4;
}

explosivehandlemovers( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2.linkparent = var_0;
    var_2.deathoverridecallback = ::movingplatformdetonate;
    var_2.endonstring = "death";

    if ( !isdefined( var_1 ) || !var_1 )
        var_2.invalidparentoverridecallback = scripts\cp\cp_movers::moving_platform_empty_func;

    thread scripts\cp\cp_movers::handle_moving_platforms( var_2 );
}

movingplatformdetonate( var_0 )
{
    if ( !isdefined( var_0.lasttouchedplatform ) || !isdefined( var_0.lasttouchedplatform.destroyexplosiveoncollision ) || var_0.lasttouchedplatform.destroyexplosiveoncollision )
        self notify( "detonateExplosive" );
}

makeexplosiveusable()
{
    if ( self.owner scripts\cp_mp\utility\player_utility::_isalive() )
    {
        self setotherent( self.owner );
        self.trigger = spawn( "script_origin", self.origin + getexplosiveusableoffset() );
        self.trigger.owner = self;
        thread equipmentwatchuse( self.owner, 1 );
    }
}

equipmentwatchuse( var_0, var_1 )
{
    self notify( "equipmentWatchUse" );
    self endon( "spawned_player" );
    self endon( "disconnect" );
    self endon( "equipmentWatchUse" );
    self.trigger setcursorhint( "HINT_NOICON" );
    self.trigger scripts\cp\cp_equipment::setexplosiveusablehintstring( self.weapon_name );
    self.trigger scripts\cp\utility::setselfusable( var_0 );
    self.trigger thread scripts\cp\utility::notusableforjoiningplayers( var_0 );

    if ( isdefined( var_1 ) && var_1 )
        thread updatetriggerposition();

    for (;;)
    {
        self.trigger waittill( "trigger", var_0 );
        var_0 notify( "pickup_equipment", self.weapon_name );
        var_0 setweaponammostock( self.weapon_name, var_0 getweaponammostock( self.weapon_name ) + 1 );
        deleteexplosive();
        self notify( "death" );
    }
}

updatetriggerposition()
{
    self endon( "death" );

    for (;;)
    {
        if ( isdefined( self ) && isdefined( self.trigger ) )
        {
            self.trigger.origin = self.origin + getexplosiveusableoffset();

            if ( isdefined( self.bombsquadmodel ) )
                self.bombsquadmodel.origin = self.origin;
        }
        else
            return;

        wait 0.05;
    }
}

deleteexplosive( var_0 )
{
    if ( isdefined( self ) )
    {
        if ( isdefined( self.deletefunc ) )
        {
            self thread [[ self.deletefunc ]]();
            self notify( "deleted_equipment" );
        }
        else
        {
            var_1 = self getentitynumber();
            var_2 = self.killcament;
            var_3 = self.trigger;
            var_4 = self.sensor;
            cleanupequipment( var_1, var_2, var_3, var_4 );
            self notify( "deleted_equipment" );
            self delete();
        }
    }
}

ontacticalequipmentplanted( var_0, var_1, var_2 )
{
    var_0.equipmentref = var_1;
    var_0.deletefunc = var_2;
    var_0.planted = 1;

    if ( !istrue( var_0.issuper ) )
    {
        if ( self.plantedtacticalequip.size )
        {
            self.plantedtacticalequip = scripts\engine\utility::array_removeundefined( self.plantedtacticalequip );

            if ( self.plantedtacticalequip.size && self.plantedtacticalequip.size >= getmaxplantedtacticalequip( self ) )
                self.plantedtacticalequip[0] deleteexplosive();
        }

        self.plantedtacticalequip[self.plantedtacticalequip.size] = var_0;
    }

    var_3 = var_0 getentitynumber();
    level.mines[var_3] = var_0;
    level notify( "mine_planted" );
}

getmaxplantedtacticalequip( var_0 )
{
    var_1 = 0;
    var_1 = 4;
    return var_1;
}

equipmentdeathvfx( var_0 )
{
    var_1 = spawnfx( scripts\engine\utility::getfx( "equipment_sparks" ), self.origin );
    triggerfx( var_1 );

    if ( !isdefined( var_0 ) || var_0 == 0 )
        self playsound( "sentry_explode" );

    var_1 thread scripts\cp\utility::delayentdelete( 1 );
}

equipmentdeletevfx()
{
    var_0 = spawnfx( scripts\engine\utility::getfx( "placeEquipmentFailed" ), self.origin );
    triggerfx( var_0 );
    self playsound( "mp_killstreak_disappear" );
    var_0 thread scripts\cp\utility::delayentdelete( 1 );
}

monitordisownedequipment( var_0, var_1 )
{
    level endon( "game_ended" );
    var_1 endon( "death" );
    var_0 scripts\engine\utility::_id_12E40( "joined_team", "joined_spectators", "disconnect" );
    var_1 deleteexplosive();
}

isprimaryweapon( var_0 )
{
    if ( issameweapon( var_0 ) && nullweapon( var_0 ) )
        return 0;

    if ( isstring( var_0 ) && var_0 == "none" )
        return 0;

    if ( weaponinventorytype( var_0 ) != "primary" )
        return 0;

    switch ( weaponclass( var_0 ) )
    {
        case "smg":
        case "pistol":
        case "sniper":
        case "spread":
        case "mg":
        case "rifle":
        case "rocketlauncher":
            return 1;
        default:
            return 0;
    }
}

getexplosiveusableoffset()
{
    var_0 = anglestoup( self.angles );
    return 10 * var_0;
}

isknifeonly( var_0 )
{
    var_1 = getweaponbasename( var_0 );
    return issubstr( var_1, "knife" );
}

is_incompatible_weapon( var_0 )
{
    var_1 = undefined;

    if ( issameweapon( var_0 ) )
        var_1 = var_0.basename;
    else
        var_1 = var_0;

    if ( isdefined( level.ammoincompatibleweaponslist ) )
    {
        if ( scripts\engine\utility::array_contains( level.ammoincompatibleweaponslist, var_1 ) )
            return 1;
    }

    return 0;
}

isbulletweapon( var_0 )
{
    if ( issameweapon( var_0 ) && nullweapon( var_0 ) )
        return 0;

    if ( isstring( var_0 ) && var_0 == "none" )
        return 0;

    if ( scripts\cp\utility::isriotshield( var_0 ) || isknifeonly( var_0 ) )
        return 0;

    if ( isdefined( var_0.inventorytype ) && var_0.inventorytype == "model_only" )
        return 0;

    switch ( weaponclass( var_0 ) )
    {
        case "smg":
        case "pistol":
        case "sniper":
        case "spread":
        case "mg":
        case "rifle":
            return 1;
        default:
            return 0;
    }
}

is_explosive_kill( var_0 )
{
    var_1 = undefined;

    if ( issameweapon( var_0 ) )
        var_1 = var_0.basename;
    else
        var_1 = var_0;

    switch ( var_1 )
    {
        case "zombie_armageddon_mp":
        case "zfreeze_semtex_mp":
        case "splash_grenade_zm":
        case "splash_grenade_mp":
        case "throwingknifec4_mp":
        case "cluster_grenade_zm":
        case "semtex_zm":
        case "c4_mp_p":
        case "frag_grenade_zm":
        case "semtex_mp":
            return 1;
        default:
            return 0;
    }
}

get_weapon_level( var_0 )
{
    if ( !isplayer( self ) )
        return int( 1 );

    var_1 = undefined;

    if ( issameweapon( var_0 ) )
        var_1 = var_0.basename;
    else
        var_1 = var_0;

    if ( isdefined( self.pap[var_1] ) )
        return self.pap[var_1].lvl;

    var_2 = scripts\cp\utility::getrawbaseweaponname( var_1 );

    if ( isdefined( self.pap[var_2] ) )
        return self.pap[var_2].lvl;

    return int( 1 );
}

can_upgrade( var_0, var_1 )
{
    if ( !isdefined( level.pap ) )
        return 0;

    if ( isdefined( level.max_pap_func ) )
        return [[ level.max_pap_func ]]( var_0, var_1 );

    if ( isdefined( var_0 ) )
        var_2 = scripts\cp\utility::getrawbaseweaponname( var_0 );
    else
        return 0;

    if ( !isdefined( var_2 ) )
        return 0;

    if ( !isdefined( level.pap[var_2] ) )
    {
        var_3 = getsubstr( var_2, 0, var_2.size - 1 );

        if ( !isdefined( level.pap[var_3] ) )
            return 0;
    }

    if ( istrue( var_1 ) && isdefined( self.pap[var_2] ) && self.pap[var_2].lvl <= min( level.pap_max + 1, 2 ) )
        return 1;

    if ( isdefined( self.pap[var_2] ) && self.pap[var_2].lvl >= level.pap_max )
        return 0;
    else
        return 1;
}

get_pap_camo( var_0, var_1, var_2 )
{
    var_3 = undefined;

    if ( isdefined( var_1 ) )
    {
        if ( isdefined( level.no_pap_camos ) && scripts\engine\utility::array_contains( level.no_pap_camos, var_1 ) )
            var_3 = undefined;
        else if ( isdefined( level.pap_1_camo ) && isdefined( var_0 ) && var_0 == 2 )
            var_3 = level.pap_1_camo;
        else if ( isdefined( level.pap_2_camo ) && isdefined( var_0 ) && var_0 == 3 )
            var_3 = level.pap_2_camo;

        switch ( var_1 )
        {
            case "dischord":
                var_2 = "iw7_dischord_zm_pap1";
                var_3 = "camo20";
                break;
            case "facemelter":
                var_2 = "iw7_facemelter_zm_pap1";
                var_3 = "camo22";
                break;
            case "headcutter":
                var_2 = "iw7_headcutter_zm_pap1";
                var_3 = "camo21";
                break;
            case "forgefreeze":
                if ( var_0 == 2 )
                    var_2 = "iw7_forgefreeze_zm_pap1";
                else if ( var_0 == 3 )
                    var_2 = "iw7_forgefreeze_zm_pap2";

                var_4 = 1;
                break;
            case "axe":
                if ( var_0 == 2 )
                    var_2 = "iw7_axe_zm_pap1";
                else if ( var_0 == 3 )
                    var_2 = "iw7_axe_zm_pap2";

                var_4 = 1;
                break;
            case "shredder":
                var_2 = "iw7_shredder_zm_pap1";
                var_3 = "camo23";
                break;
        }
    }

    return var_3;
}

validate_current_weapon( var_0, var_1, var_2 )
{
    if ( isdefined( level.weapon_upgrade_path ) && isdefined( level.weapon_upgrade_path[getweaponbasename( var_2 )] ) )
        var_2 = level.weapon_upgrade_path[getweaponbasename( var_2 )];
    else if ( isdefined( var_1 ) )
    {
        switch ( var_1 )
        {
            case "two":
                if ( var_0 == 2 )
                    var_2 = "iw7_two_headed_axe_mp";
                else if ( var_0 == 3 )
                    var_2 = "iw7_two_headed_axe_mp";

                break;
            case "golf":
                if ( var_0 == 2 )
                    var_2 = "iw7_golf_club_mp";
                else if ( var_0 == 3 )
                    var_2 = "iw7_golf_club_mp";

                break;
            case "machete":
                if ( var_0 == 2 )
                    var_2 = "iw7_machete_mp";
                else if ( var_0 == 3 )
                    var_2 = "iw7_machete_mp";

                break;
            case "spiked":
                if ( var_0 == 2 )
                    var_2 = "iw7_spiked_bat_mp";
                else if ( var_0 == 3 )
                    var_2 = "iw7_spiked_bat_mp";

                break;
            case "axe":
                if ( var_0 == 2 )
                    var_2 = "iw7_axe_zm_pap1";
                else if ( var_0 == 3 )
                    var_2 = "iw7_axe_zm_pap2";

                break;
            case "katana":
                if ( var_0 == 2 )
                    var_2 = "iw7_katana_zm_pap1";
                else if ( var_0 == 3 )
                    var_2 = "iw7_katana_zm_pap2";

                break;
            case "nunchucks":
                if ( var_0 == 2 )
                    var_2 = "iw7_nunchucks_zm_pap1";
                else if ( var_0 == 3 )
                    var_2 = "iw7_nunchucks_zm_pap2";

                break;
            default:
                return var_2;
        }
    }

    return var_2;
}

watchplayermelee()
{
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "faux_spawn" );
    level endon( "game_ended" );

    for (;;)
    {
        self waittill( "melee_fired", var_0 );
        var_1 = var_0.basename;

        if ( self.meleekill == 0 )
        {
            if ( var_1 == "iw7_fists_zm_crane" || var_1 == "iw7_fists_zm_dragon" || var_1 == "iw7_fists_zm_snake" || var_1 == "iw7_fists_zm_tiger" )
            {
                if ( self.kung_fu_vo == 0 )
                {
                    self.kung_fu_vo = 1;
                    thread scripts\cp\cp_vo::try_to_play_vo( "melee_punch", "zmb_comment_vo", "high", 1, 0, 0, 1 );
                    thread kung_fu_vo_wait();
                }
                else
                {
                    self.kung_fu_vo = 1;
                    self notify( "kung_fu_vo_reset" );
                    thread scripts\cp\cp_vo::try_to_play_vo( "melee_punch", "zmb_comment_vo", "high", 1, 0, 0, 1, 60 );
                    thread kung_fu_vo_wait();
                }
            }
            else
                thread scripts\cp\cp_vo::try_to_play_vo( "melee_miss", "zmb_comment_vo", "high", 1, 0, 0, 1, 20 );

            continue;
        }

        if ( issubstr( var_1, "katana" ) && self.vo_prefix == "p5_" )
        {
            thread scripts\cp\cp_vo::try_to_play_vo( "melee_special_katana", "rave_comment_vo", "high", 1, 0, 0, 1 );
            continue;
        }

        if ( ( issubstr( var_1, "golf" ) || issubstr( var_1, "machete" ) || issubstr( var_1, "spiked_bat" ) || issubstr( var_1, "two_headed_axe" ) ) && self.meleekill == 1 )
        {
            thread scripts\cp\cp_vo::try_to_play_vo( "melee_special", "rave_comment_vo", "high", 1, 0, 0, 1 );
            continue;
        }

        if ( issubstr( var_1, "iw7_knife" ) && scripts\cp\utility::is_melee_weapon( var_1 ) && self.meleekill == 1 )
        {
            thread scripts\cp\cp_vo::try_to_play_vo( "melee_fatal", "zmb_comment_vo", "high", 1, 0, 0, 1 );
            self.meleekill = 0;
            continue;
        }

        if ( ( var_1 == "iw7_axe_zm" || var_1 == "iw7_axe_zm_pap1" || var_1 == "iw7_axe_zm_pap2" ) && scripts\cp\utility::is_melee_weapon( var_1 ) && self.meleekill == 1 )
        {
            thread scripts\cp\cp_vo::try_to_play_vo( "melee_splice", "zmb_comment_vo", "high", 1, 0, 0, 1 );
            self.meleekill = 0;
        }
    }
}

kung_fu_vo_wait()
{
    self endon( "kung_fu_vo_reset" );
    wait 4;
    self.kung_fu_vo = 0;
}

watchweaponfired()
{
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "faux_spawn" );
    self notify( "watchWeaponFired" );
    self endon( "watchWeaponFired" );
    level endon( "game_ended" );

    for (;;)
    {
        wait 1;
        var_0 = self getcurrentweapon();

        if ( !isdefined( var_0 ) || nullweapon( var_0 ) )
            continue;

        self waittill( "fired", var_0 );
        var_0 = self getcurrentweapon();
        var_1 = self getammocount( var_0 );
        var_2 = weaponclipsize( var_0 );

        if ( var_2 == 0 )
            continue;

        var_3 = var_1 / var_2;

        if ( scripts\cp\utility::is_melee_weapon( var_0 ) || issubstr( var_0.basename, "fists" ) || issubstr( var_0.basename, "heart" ) )
            continue;

        if ( var_1 <= 5 && var_1 > 0 && self getweaponammostock( var_0 ) == 0 || self getweaponammostock( var_0 ) > 0 && var_1 / self getweaponammostock( var_0 ) < 0.1 )
        {

        }
        else if ( var_1 == 0 && ( var_0.basename != "iw7_cpbasketball_mp" && !nullweapon( var_0 ) ) )
            scripts\cp\cp_vo::try_to_play_vo( "nag_out_ammo", "zmb_comment_vo", "low", 3, 0, 0, 0, 20 );

        if ( var_0.basename == "ac130_105mm_mp" || var_0.basename == "ac130_40mm_mp" || var_0.basename == "ac130_25mm_mp" )
            continue;
    }
}

getitemweaponname()
{
    var_0 = self.classname;
    var_1 = getsubstr( var_0, 7 );
    return var_1;
}

watchweaponpickup( var_0 )
{
    self endon( "death" );
    var_1 = getitemweaponname();

    for (;;)
    {
        self waittill( "trigger", var_2, var_3 );
        var_4 = var_2 getcurrentweapon();
        var_2 thread watchpickupcomplete( var_1, var_4 );
        var_2 notify( "weapon_pickup", var_1 );
        var_5 = fixupplayerweapons( var_2, var_1 );

        if ( isdefined( var_3 ) || var_5 )
            break;
    }

    if ( isdefined( var_3 ) )
    {
        var_2 notify( "manual_switch_from_minigun" );
        var_6 = var_3 getitemweaponname();
        var_7 = asmdevgetallstates( var_6 );

        if ( isdefined( var_2.tookweaponfrom[var_6] ) )
        {
            var_3.owner = var_2.tookweaponfrom[var_6];
            var_2.tookweaponfrom[var_6] = undefined;
        }

        var_3.objweapon = var_7.basename;
        var_3.targetname = "dropped_weapon";
        var_3 thread watchweaponpickup();
    }

    var_2.tookweaponfrom[var_1] = self.owner;
}

fixupplayerweapons( var_0, var_1 )
{
    var_2 = var_0 getweaponslistprimaries();
    var_3 = 1;
    var_4 = 1;
    var_5 = undefined;

    if ( issameweapon( var_1 ) )
        var_5 = createheadicon( var_1 );
    else
        var_5 = var_1;

    foreach ( var_7 in var_2 )
    {
        if ( isdefined( var_0.primaryweaponobj ) && var_0.primaryweaponobj == var_7 )
        {
            var_3 = 0;
            continue;
        }

        if ( isdefined( var_0.secondaryweaponobj ) && var_0.secondaryweaponobj == var_7 )
            var_4 = 0;
    }

    if ( var_3 )
    {
        var_0.primaryweapon = var_5;
        var_0.primaryweaponobj = asmdevgetallstates( var_5 );
    }
    else if ( var_4 )
    {
        var_0.secondaryweapon = var_5;
        var_0.secondaryweaponobj = asmdevgetallstates( var_5 );
    }

    return var_3 || var_4;
}

watchpickupcomplete( var_0, var_1 )
{
    self endon( "death" );
    self endon( "disconnect" );
    self notify( "watchPickupComplete()" );
    self endon( "watchPickupComplete()" );
    var_2 = self.currentweapon;
    var_3 = 0;

    if ( isstring( var_0 ) )
        var_0 = asmdevgetallstates( var_0 );

    if ( var_2 == var_0 )
        var_3 = 1;
    else
    {
        for (;;)
        {
            waitframe();
            var_4 = self.currentweapon;

            if ( isnullweapon( var_2, var_4, 0 ) )
                continue;

            if ( isnullweapon( var_0, var_4, 0 ) )
                var_3 = 1;
            else
                var_3 = 0;

            break;
        }
    }

    if ( var_3 )
    {
        if ( var_0.basename == "iw8_lm_dblmg_mp" )
            scripts\cp\killstreaks\juggernaut_cp::juggernautweaponpickedup( var_0, var_1 );

        thread notifyuiofpickedupweapon();
        self notify( "finish_pickup_of_weapon", var_0, var_1 );
    }
}

notifyuiofpickedupweapon()
{
    self setclientomnvar( "ui_weapon_pickup", 0 );
}

watchweaponusage( var_0 )
{
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "faux_spawn" );
    level endon( "game_ended" );
    self notify( "watchWeaponUsage" );
    self endon( "watchWeaponUsage" );

    for (;;)
    {
        self waittill( "weapon_fired", var_1 );
        var_2 = self getcurrentweapon();

        if ( !isdefined( var_2 ) || nullweapon( var_2 ) )
            continue;

        if ( !scripts\cp\utility::isinventoryprimaryweapon( var_2 ) )
            continue;

        if ( isdefined( level.updateonusepassivesfunc ) )
            thread [[ level.updateonusepassivesfunc ]]( self, createheadicon( var_2 ) );

        var_3 = gettime();

        if ( !isdefined( self.lastshotfiredtime ) )
            self.lastshotfiredtime = 0;

        var_4 = gettime() - self.lastshotfiredtime;
        self.lastshotfiredtime = var_3;

        if ( isai( self ) )
            continue;

        var_5 = getweaponbasename( var_2 );

        if ( !isdefined( self.shotsfiredwithweapon[var_5] ) )
            self.shotsfiredwithweapon[var_5] = 1;
        else
            self.shotsfiredwithweapon[var_5]++;

        if ( !isdefined( self.accuracy_shots_fired ) )
            self.accuracy_shots_fired = 1;
        else
            self.accuracy_shots_fired++;

        scripts\cp\cp_persistence::increment_player_career_shots_fired( self );

        if ( isdefined( var_5 ) )
        {
            if ( isdefined( self.hitsthismag[var_5] ) )
                thread hitsthismag_update( var_5, var_2 );
        }
    }
}

hitsthismag_update( var_0, var_1 )
{
    self endon( "death" );
    self endon( "disconnect" );
    var_0 = var_1.basename;
    self endon( "updateMagShots_" + var_0 );
    self.hitsthismag[var_0]--;
    wait 0.1;
    self notify( "shot_missed", var_1 );
    self.consecutivehitsperweapon[var_0] = 0;
    self.hitsthismag[var_0] = weaponclipsize( var_1 );
}

watchweaponchange()
{
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "faux_spawn" );
    self notify( "watchWeaponChange" );
    self endon( "watchWeaponChange" );
    self.hitsthismag = [];
    var_0 = getweaponbasename( self getcurrentweapon() );
    hitsthismag_init( var_0 );

    for (;;)
    {
        self waittill( "weapon_change", var_1 );
        var_0 = var_1.basename;
        weapontracking_init( var_0 );

        if ( isdefined( self.weapon_passives[var_1.basename] ) )
        {

        }
        else
        {

        }

        hitsthismag_init( var_0 );
    }
}

harpoon_impale_additional_func( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    if ( !issubstr( var_0, "harpoon" ) )
        return;
    else
    {
        var_2 startragdoll();
        var_8 = physics_createcontents( [ "physicscontents_solid", "physicscontents_glass", "physicscontents_missileclip", "physicscontents_vehicle" ] );
        var_9 = var_3 + var_4 * 4096;
        var_10 = scripts\engine\trace::ray_trace_detail( var_3, var_9, undefined, var_8, undefined, 1 );
        var_9 = var_10["position"] - var_4 * 12;
        var_11 = length( var_9 - var_3 );
        var_12 = var_11 / 1250;
        var_12 = clamp( var_12, 0.05, 1 );
        wait 0.05;
        var_13 = var_4;
        var_14 = anglestoup( var_1.angles );
        var_15 = vectorcross( var_13, var_14 );
        var_16 = scripts\engine\utility::spawn_tag_origin( var_3, axistoangles( var_13, var_15, var_14 ) );
        var_16 moveto( var_9, var_12 );
        var_17 = spawnragdollconstraint( var_2, var_5, var_6, var_7 );
        var_17.origin = var_16.origin;
        var_17.angles = var_16.angles;
        var_17 linkto( var_16 );
        thread play_explosion_post_impale( var_9, var_1 );
        thread impale_cleanup( var_2, var_16, var_12 + 0.05, var_17 );
    }
}

impale_cleanup( var_0, var_1, var_2, var_3 )
{
    var_0 scripts\engine\utility::_id_12E54( var_2, "death", "disconnect" );
    var_3 delete();
    var_1 delete();
}

play_explosion_post_impale( var_0, var_1 )
{
    wait 2;
    var_1 radiusdamage( var_0, 500, 1000, 500, var_1, "MOD_EXPLOSIVE" );
    playfx( level._effect["penetration_railgun_explosion"], var_0 );
}

weapontracking_init( var_0 )
{
    if ( !isdefined( var_0 ) || var_0 == "none" )
        return;

    if ( !isdefined( self.shotsfiredwithweapon[var_0] ) )
        self.shotsfiredwithweapon[var_0] = 0;

    if ( !isdefined( self.shotsontargetwithweapon[var_0] ) )
        self.shotsontargetwithweapon[var_0] = 0;

    if ( !isdefined( self.headshots[var_0] ) )
        self.headshots[var_0] = 0;

    if ( !isdefined( self.wavesheldwithweapon[var_0] ) )
        self.wavesheldwithweapon[var_0] = 1;

    if ( !isdefined( self.downsperweaponlog[var_0] ) )
        self.downsperweaponlog[var_0] = 0;

    if ( !isdefined( self.killsperweaponlog[var_0] ) )
        self.killsperweaponlog[var_0] = 0;
}

hitsthismag_init( var_0 )
{
    if ( !isdefined( var_0 ) || var_0 == "none" )
        return;

    if ( scripts\cp\utility::isinventoryprimaryweapon( var_0 ) && !isdefined( self.hitsthismag[var_0] ) )
        self.hitsthismag[var_0] = weaponclipsize( var_0 );
}

addattachmenttoweapon( var_0, var_1, var_2 )
{
    var_3 = self.currentweapon;
    var_4 = var_3;
    var_0 = undefined;
    var_5 = scripts\cp\utility::attachmentmap_tounique( var_1, var_4 );
    var_6 = 0;

    if ( var_3.attachments.size == 0 )
    {
        if ( var_4 canuseattachment( var_5 ) )
            var_6 = 1;
        else
            var_6 = 0;
    }
    else
    {
        for ( var_7 = 0; var_7 < var_3.attachments.size; var_7++ )
        {
            if ( var_4 canuseattachment( var_5 ) && attachmentsconflict( var_3.attachments[var_7], var_5, var_4 ) == "" )
            {
                var_6 = 1;
                continue;
            }

            var_6 = 0;
            break;
        }
    }

    if ( var_6 )
        var_0 = var_4 withattachment( var_5 );

    if ( !isdefined( var_0 ) )
    {
        if ( !isbot( self ) )
        {

        }

        return undefined;
    }

    var_8 = self getweaponammoclip( var_0 );
    var_9 = self getweaponammostock( var_0 );

    if ( istrue( var_2 ) )
    {
        var_8 = weaponclipsize( var_0 );
        var_9 = weaponmaxammo( var_0 );
    }

    scripts\cp_mp\utility\inventory_utility::_takeweapon( var_3 );
    self giveweapon( var_0 );
    self setweaponammoclip( var_0, var_8 );
    self setweaponammostock( var_0, var_9 );
    scripts\cp_mp\utility\inventory_utility::_switchtoweaponimmediate( var_0 );
    fixupplayerweapons( self, var_0 );
    return var_0;
}

player_has_silencer( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = self getcurrentweapon();

    return var_0 hasattachment( "silenc", 1 );
}

_buildweaponcustom( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 )
{
    var_9 = var_0;
    var_10 = strtok( var_9, "_" );
    var_11 = 0;

    if ( var_10[0] == "alt" )
        var_11++;

    if ( var_10[var_11] == "iw7" )
        return;
    else if ( var_10[var_11] == "iw8" )
    {
        var_12 = var_0;

        if ( !isdefined( var_1 ) )
            var_1 = [];

        if ( !isdefined( var_2 ) )
            var_2 = "none";

        if ( !isdefined( var_3 ) )
            var_3 = "none";

        if ( !isdefined( var_4 ) )
            var_4 = -1;

        if ( !isdefined( var_5 ) )
            var_5 = [];

        if ( !isdefined( var_6 ) )
            var_6 = "none";

        if ( !isdefined( var_7 ) )
            var_7 = [];

        if ( !isdefined( var_8 ) )
            var_8 = 0;

        if ( !isplayer( self ) )
            return buildweapon( var_12, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 );
        else
            return buildweapon( var_12, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 );
    }
}

weaponsupportslaserir( var_0 )
{
    switch ( var_0 )
    {
        case "iw8_la_juliet_mp":
        case "iw8_lm_dblmg_mp":
        case "iw8_me_riotshield_mp":
        case "iw8_fists_mp":
        case "iw8_knife_mp":
            return 0;
    }

    if ( scripts\cp\utility::iskillstreakweapon( var_0 ) )
        return 0;

    var_1 = weaponclass( var_0 );
    return var_1 == "rifle" || var_1 == "mg" || var_1 == "sniper" || var_1 == "smg" || var_1 == "spread";
}

checkforinvalidattachments( var_0, var_1 )
{
    var_2 = getcompleteweaponname( var_1 );
    var_3 = [];

    foreach ( var_5 in var_0 )
    {
        if ( var_2 canuseattachment( var_5 ) )
        {
            var_3[var_3.size] = var_5;
            continue;
        }

        thread invalidattachmentwarning( var_5, var_1 );
    }

    return var_3;
}

invalidattachmentwarning( var_0, var_1 )
{
    var_2 = "Invalid Attachment: " + var_0 + " on " + var_1;

    if ( isdefined( self ) && isplayer( self ) )
    {
        if ( getdvarint( "scr_playtest", 0 ) == 1 )
            self iprintlnbold( var_2 );
        else
        {

        }
    }
}

doesweaponhaveattachmenttype( var_0, var_1, var_2 )
{
    var_3 = [];

    if ( istrue( var_2 ) )
        var_3 = var_0.others;
    else
        var_3 = var_0.attachments;

    if ( hasattachmenttype( var_3, var_1 ) )
        return 1;
    else
        return 0;
}

hasattachmenttype( var_0, var_1 )
{
    foreach ( var_3 in var_0 )
    {
        if ( scripts\cp\utility::attachmentmap_tobase( var_3 ) == var_1 )
            return 1;
    }

    return 0;
}

hasscope( var_0 )
{
    foreach ( var_2 in var_0 )
    {
        if ( scripts\cp\utility::getattachmenttype( var_2 ) == "rail" )
            return 1;
    }

    return 0;
}

getreticleindex( var_0 )
{
    if ( !isdefined( var_0 ) )
        return undefined;

    var_1 = int( tablelookup( "mp/reticleTable.csv", 1, var_0, 5 ) );

    if ( !isdefined( var_1 ) || var_1 == 0 )
        return undefined;

    return var_1;
}

buildweaponuniqueattachments( var_0, var_1, var_2 )
{
    if ( isdefined( var_2 ) && var_2 < 0 )
        var_2 = undefined;

    var_1 = scripts\cp\utility::weaponattachremoveextraattachments( var_1, var_0 );
    var_1 = scripts\engine\utility::array_remove( var_1, "none" );
    var_3 = scripts\cp\utility::weaponattachdefaultmap( var_0 );
    var_4 = scripts\cp\utility::buildweaponassetname( var_0, var_2 );
    var_5 = var_1;

    for ( var_6 = 0; var_6 < var_5.size; var_6++ )
        var_5[var_6] = scripts\cp\utility::attachmentmap_tobase( var_5[var_6] );

    if ( isdefined( var_3 ) )
    {
        var_7 = var_3;

        for ( var_6 = 0; var_6 < var_7.size; var_6++ )
            var_7[var_6] = scripts\cp\utility::attachmentmap_tobase( var_7[var_6] );

        var_5 = scripts\engine\utility::array_combine_unique( var_5, var_7 );
    }

    var_8 = [];

    if ( var_5.size > 0 )
    {
        var_5 = scripts\cp\utility::filterattachments( var_5 );

        for ( var_9 = 0; var_9 < var_5.size; var_9++ )
            var_8[var_9] = scripts\cp\utility::attachmentmap_tounique( var_5[var_9], var_4 );
    }

    var_10 = [];

    foreach ( var_12 in var_8 )
    {
        var_13 = scripts\cp\utility::attachmentmap_toextra( var_12 );

        if ( isdefined( var_13 ) )
            var_10[var_10.size] = scripts\cp\utility::attachmentmap_tounique( var_13, var_4 );
    }

    if ( var_10.size > 0 )
        var_8 = scripts\engine\utility::array_combine_unique( var_8, var_10 );

    if ( isdefined( var_2 ) )
    {
        var_15 = scripts\cp\utility::getweaponvariantattachments( var_4, var_2 );

        foreach ( var_17 in var_15 )
            var_8[var_8.size] = var_17;
    }

    var_19 = undefined;
    return var_8;
}

applyflashfromdamage( var_0, var_1, var_2, var_3 )
{
    var_0 endon( "death" );

    if ( isdefined( var_0.usingremote ) )
        return 0;

    if ( isdefined( var_0.vehicle ) )
        return 0;

    if ( !var_0 scripts\cp_mp\utility\player_utility::_isalive() )
        return 0;

    if ( scripts\cp\utility::is_friendly_damage( var_0, var_1 ) && var_0 != var_1 )
        return 0;

    var_4 = distance( var_2, var_0.origin );
    var_5 = 0;

    if ( var_1 == var_0 )
    {
        if ( var_4 > 384 )
            return 0;
        else
            var_5 = 1;
    }

    var_6 = 0;
    var_7 = 0;

    if ( var_4 >= 512 || !scripts\engine\utility::within_fov( var_1.origin, var_1 getplayerangles(), var_2, 0.5 ) )
    {
        var_6 = 3;
        var_7 = 0.25;
    }
    else if ( var_4 <= 256 )
    {
        var_6 = 5;
        var_7 = 0.75;
    }
    else
    {
        var_8 = 1 - ( var_4 - 256 ) / 256;
        var_6 = 3 + var_8 * 2;
        var_7 = 0.25 + var_8 * 0.5;
    }

    if ( var_3 )
    {
        var_0 = var_1;
        var_6 = max( 3, var_6 * 0.75 );
        var_7 = max( 0.25, var_7 * 0.75 );
    }
    else if ( var_5 )
    {
        var_6 = max( 3, var_6 * 0.75 );
        var_7 = max( 0.25, var_7 * 0.75 );
    }

    if ( isplayer( var_0 ) )
    {
        var_0 shellshock( "flashbang_mp", var_6 );
        var_0.flashendtime = gettime() + var_6 * 1000;
        var_0 thread flashrumbleloop( var_7 );
    }
    else if ( var_0 scripts\cp\utility::is_zombie_agent() || var_0.agent_type == "soldier_agent" || var_0.unittype == "soldier" )
        stunenemiesinrange( var_2, var_1 );
    else
    {
        var_0 shellshock( "flashbang_mp", var_6 );
        var_0.flashendtime = gettime() + var_6 * 1000;
        var_0 thread flashrumbleloop( var_7 );
    }

    return 1;
}

isflashgrenadedamage( var_0, var_1 )
{
    return var_0.basename == "flash_grenade_mp" && var_1 != "MOD_IMPACT";
}

flashrumbleloop( var_0 )
{
    self endon( "stop_monitoring_flash" );
    self endon( "flash_rumble_loop" );
    self notify( "flash_rumble_loop" );
    var_1 = gettime() + var_0 * 1000;

    while ( gettime() < var_1 )
    {
        self playrumbleonentity( "damage_heavy" );
        wait 0.05;
    }
}

giveequipmentasaweapon( var_0 )
{
    switch ( var_0 )
    {
        case "molotov":
            self.last_weapon = self getcurrentweapon();
            self giveweapon( "iw8_molotov_zm" );
            self switchtoweapon( "iw8_molotov_zm" );
            break;
        case "breach_charge":
            self.last_weapon = self getcurrentweapon();
            self giveweapon( "c4_mp_p" );
            self switchtoweapon( "c4_mp_p" );
            break;
    }
}

watch_for_dropped_weapons()
{
    for (;;)
    {
        level waittill( "ai_weapon_dropped" );
        var_0 = getweaponarray();

        foreach ( var_2 in var_0 )
            var_2 setusepriority( 1, 1 );
    }
}

drop_script_weapon_from_ai( var_0, var_1 )
{
    var_2 = var_0.basename;

    if ( scripts\engine\utility::array_contains( level.invalid_drop_weapons, var_2 ) )
        return;

    var_3 = var_0.attachments;
    var_4 = getdvar( "scr_weapdrop_force_att", "" );

    if ( var_4 != "" )
        var_3 = scripts\engine\utility::array_add( var_3, var_4 );

    if ( turn_on_silo_lights() )
        var_5 = 1;
    else
        var_5 = undefined;

    var_6 = spawn_script_weapon( var_2, var_3, self.origin + ( 0, 0, 32 ), self.angles, var_5 );

    if ( !isdefined( var_6 ) )
        return;

    var_7 = getweapongroup( var_0 );
    scripts\cp_mp\utility\weapon_utility::dropweaponfordeathlaunch( var_6, var_7 );

    if ( !isdefined( var_6 ) )
        return;

    var_6 update_dropped_weapon_priorities();
    var_8 = getsubstr( var_6.classname, 7, var_6.classname.size );
    var_6 scripts\anim\shared.gsc::setscriptammo( var_8, self );
    var_6 thread delete_weapon_after_time();
    var_6 thread watchweaponpickup();
}

turn_on_silo_lights()
{
    if ( level.script == "cp_so_estate" )
        return 1;

    return 0;
}

delete_weapon_after_time()
{
    level endon( "game_ended" );
    self endon( "death" );
    self endon( "entitydeleted" );
    wait 30;
    remove_from_weapon_array( self );
    self delete();
}

update_dropped_weapon_priorities()
{
    self setusepriority( 1, 1 );
    self setuserange( 72 );
}

initializeweaponpickups()
{
    if ( level.gametype == "cp_pvpve" )
        return;

    if ( isdefined( level.custom_allowedweaponnames ) )
        var_0 = level.custom_allowedweaponnames;
    else
        var_0 = [ "iw8_ar_falpha", "iw8_sm_papa90", "iw8_sm_augolf", "iw8_lm_pkilo", "iw8_sn_alpha50", "iw8_pi_mike1911", "iw8_ar_mike4", "iw8_ar_akilo47", "iw8_sm_mpapa5", "iw8_sh_dpapa12", "iw8_lm_kilo121", "iw8_sn_mike14", "iw8_sn_kilo98", "iw8_pi_golf21", "iw8_sn_crossbow" ];

    var_1 = scripts\engine\utility::getstructarray( "weapon_pickup", "script_noteworthy" );

    foreach ( var_3 in var_1 )
    {
        if ( isdefined( var_3.script_parameters ) )
        {
            var_4 = getcompletenameforweapon( var_3.script_parameters + "_mp" );
            var_5 = spawn( "weapon_" + var_4, var_3.origin );
            var_5 itemweaponsetammo( weaponclipsize( var_4 ), weaponmaxammo( var_4 ) );
            var_5 thread watchweaponpickup();
            var_1 = scripts\engine\utility::array_remove( var_1, var_3 );
        }
    }

    var_7 = [];
    var_8 = [];

    foreach ( var_14, var_10 in level.weaponmapdata )
    {
        foreach ( var_4 in var_0 )
        {
            if ( var_14 == var_4 )
            {
                var_12 = strtok( var_14, "_" );

                if ( var_12[0] == "iw8" )
                {
                    var_7[var_7.size] = var_14;
                    level.attachmentmap[var_14] = pullattachmentsforweapon( var_14 );
                }
            }
        }
    }

    var_7 = eliminatenullweapons( var_7 );
    var_15 = 0;
    var_16 = 0;

    for ( var_17 = var_1.size; var_16 < var_17; var_16++ )
    {
        var_15 = randomintrange( 0, var_7.size );
        var_18 = attachmentroll( var_7[var_15] );

        foreach ( var_20 in var_18 )
        {
            foreach ( var_22 in var_18 )
            {
                if ( var_20 == var_22 )
                    continue;

                if ( !attachmentscompatible( var_20, var_22 ) )
                    var_18 = scripts\engine\utility::array_remove( var_18, var_22 );
            }
        }

        var_4 = getcompletenameforweapon( var_7[var_15] );
        var_5 = spawn( "weapon_" + var_4, var_1[var_16].origin );

        if ( isdefined( var_1[var_16].angles ) )
            var_5.angles = var_1[var_16].angles;
        else
            var_5.angles = ( 0, 0, 0 );

        var_5 itemweaponsetammo( weaponclipsize( var_4 ), weaponmaxammo( var_4 ) );
        var_5 thread watchweaponpickup();
    }
}

attachmentroll( var_0 )
{
    var_1 = [];

    if ( isdefined( level.attachmentmap[var_0] ) )
    {
        var_2 = scripts\engine\utility::array_randomize( level.attachmentmap[var_0] );
        var_3 = attachmentrollcount();

        for ( var_4 = 0; var_4 < var_3 && var_4 < var_2.size; var_4++ )
            var_1[var_1.size] = var_2[var_4];
    }

    return var_1;
}

attachmentrollcount()
{
    var_0 = randomint( 100 );

    if ( var_0 < 50 )
        return 0;
    else if ( var_0 < 80 )
        return 1;
    else if ( var_0 < 95 )
        return 2;
    else if ( var_0 < 100 )
        return 3;

    return 0;
}

pullattachmentsforweapon( var_0 )
{
    foreach ( var_3, var_2 in level.attachmentmap_basetounique )
    {
        if ( var_0 == var_3 )
            return returnarraywithoutdefaults( var_2, var_0 );
    }
}

returnarraywithoutdefaults( var_0, var_1 )
{
    foreach ( var_4, var_3 in level.weaponmapdata )
    {
        if ( var_1 == var_4 )
        {
            if ( scripts\engine\utility::array_contains( var_0, "doubletap" ) )
                var_0 = scripts\engine\utility::array_remove( var_0, "doubletap" );

            if ( scripts\engine\utility::array_contains( var_0, "reconsilencer_cp" ) )
                var_0 = scripts\engine\utility::array_remove( var_0, "reconsilencer_cp" );

            if ( isdefined( var_3.attachdefaults ) )
                return scripts\engine\utility::array_remove_array( var_0, var_3.attachdefaults );
        }
    }
}

eliminatenullweapons( var_0 )
{
    var_1 = [ "iw8_knife", "iw8_fists", "iw8_knifestab", "none", "speciality_null", "iw8_ar_dummycp", "iw8_ar_dummycs", "iw8_me_riotshield" ];
    var_2 = [];

    if ( isstruct( scripts\engine\utility::random( var_0 ) ) )
    {
        foreach ( var_5, var_4 in var_0 )
        {
            if ( !scripts\engine\utility::array_contains( var_1, var_5 ) )
                var_2[var_5] = var_4;
        }

        return var_2;
    }

    return scripts\engine\utility::array_remove_array( var_0, var_1 );
}

choosepassive()
{
    for (;;)
    {
        var_0 = scripts\engine\utility::random( level.lootpassivesstructs );

        foreach ( var_3, var_2 in level.cp_weapon_passives )
        {
            if ( var_0.name == var_3 )
                return var_0;
            else
                continue;
        }

        waitframe();
    }
}

makeexplosiveunusuabletag()
{
    self notify( "makeExplosiveUnusable" );
    self makeunusable();
}

isplantedequipment( var_0 )
{
    return isdefined( level.mines[var_0 getentitynumber()] ) || istrue( var_0.planted );
}

assignlootpassivetoweapon( var_0, var_1 )
{
    var_2 = choosepassive();

    if ( isdefined( var_2.attachmentref ) )
        return getcompleteweaponname( var_0, [ var_2.attachmentref ] );
    else
    {
        var_3 = scripts\cp\utility::getweaponrootname( var_0 );
        var_4 = getcompleteweaponname( var_0 );
        var_1.weapon_passives[var_3] = var_2;
        return var_4;
    }
}

grenadeinpullback()
{
    return !nullweapon( self getheldoffhand() );
}

getgrenadeinpullback()
{
    var_0 = self getheldoffhand();

    if ( isdefined( self.gestureweapon ) && var_0 == asmdevgetallstates( self.gestureweapon ) )
        var_0 = isundefinedweapon();

    return var_0;
}

grenadeinitialize( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( var_0.weapon_object ) )
        var_0.weapon_object = var_1;

    if ( !isdefined( var_0.weapon_name ) )
        var_0.weapon_name = var_1.basename;

    if ( !isdefined( var_0.owner ) )
        var_0.owner = self;

    if ( !isdefined( var_0.team ) )
        var_0.team = self.team;

    if ( !isdefined( var_0.tickpercent ) )
        var_0.tickpercent = var_2;

    if ( !isdefined( var_0.ticks ) && isdefined( var_0.tickpercent ) )
        var_0.ticks = scripts\cp\utility::roundup( 4 * var_2 );

    var_4 = scripts\cp\cp_equipment::getequipmentreffromweapon( var_1 );

    if ( isdefined( var_4 ) )
    {
        var_0.equipmentref = var_4;
        var_0.isequipment = 1;
    }

    var_0.threwback = isdefined( var_3 );
}

allow_weapon_first_raise_anims( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "firstRaiseAnims", var_0, var_1 );

    if ( isdefined( var_2 ) && var_2 )
        setsaveddvar( "MRKKPQPTQR", 0 );
    else if ( isdefined( var_2 ) && !var_2 )
        setsaveddvar( "MRKKPQPTQR", 1 );
}

updatelastweapon()
{
    self endon( "disconnect" );
    self endon( "faux_spawn" );
    self.lastnormalweaponobj = scripts\engine\utility::ter_op( isdefined( self.spawnweaponobj ), self.spawnweaponobj, isundefinedweapon() );
    self.lastweaponobj = scripts\engine\utility::ter_op( isdefined( self.spawnweaponobj ), self.spawnweaponobj, isundefinedweapon() );
    self.lastdroppableweaponobj = scripts\engine\utility::ter_op( isdefined( self.spawnweaponobj ), self.spawnweaponobj, isundefinedweapon() );
    self.lastcacweaponobj = scripts\engine\utility::ter_op( isdefined( self.spawnweaponobj ) && iscacprimaryorsecondary( self.spawnweaponobj ), self.spawnweaponobj, isundefinedweapon() );

    for (;;)
    {
        self waittill( "weapon_change", var_0 );
        self.lastweaponobj = var_0;

        if ( isnormallastweapon( var_0 ) )
            self.lastnormalweaponobj = var_0;

        if ( isdroppableweapon( var_0 ) )
            self.lastdroppableweaponobj = var_0;

        if ( iscacprimaryorsecondary( var_0 ) )
            self.lastcacweaponobj = var_0;
    }
}

isnormallastweapon( var_0 )
{
    if ( var_0.basename == "none" )
        return 0;

    if ( var_0.classname == "turret" )
        return 0;

    if ( scripts\cp\utility::issuperweapon( var_0.basename ) )
        return 0;

    if ( scripts\cp\utility::iskillstreakweapon( var_0.basename ) )
        return 0;

    if ( var_0.inventorytype != "primary" && var_0.inventorytype != "altmode" )
        return 0;

    return 1;
}

iscacprimaryweapon( var_0 )
{
    switch ( getweapongroup( var_0 ) )
    {
        case "weapon_assault":
        case "weapon_dmr":
        case "weapon_smg":
        case "weapon_melee":
        case "weapon_shotgun":
        case "weapon_lmg":
        case "weapon_sniper":
            return 1;
        default:
            return 0;
    }
}

getweapongroup( var_0 )
{
    if ( !isdefined( var_0 ) )
        return "other";

    if ( issameweapon( var_0 ) && nullweapon( var_0 ) )
        return "other";

    if ( isstring( var_0 ) && ( var_0 == "none" || var_0 == "alt_none" ) )
        return "other";

    var_1 = scripts\cp\utility::getweaponrootname( var_0 );
    var_2 = scripts\cp\utility::weapongroupmap( var_1 );

    if ( !isdefined( var_2 ) )
    {
        if ( scripts\cp\utility::issuperweapon( var_0 ) )
            var_2 = "super";
        else if ( scripts\cp\utility::isenvironmentweapon( var_0 ) )
            var_2 = "weapon_mg";
        else if ( scripts\cp\utility::iskillstreakweapon( var_0 ) )
            var_2 = "killstreak";
        else
            var_2 = "other";
    }

    return var_2;
}

iscacsecondaryweapon( var_0 )
{
    switch ( getweapongroup( var_0 ) )
    {
        case "weapon_machine_pistol":
        case "weapon_rail":
        case "weapon_beam":
        case "weapon_pistol":
        case "weapon_projectile":
        case "weapon_melee2":
            return 1;
        default:
            return 0;
    }
}

iscacprimaryorsecondary( var_0 )
{
    return iscacprimaryweapon( var_0 ) || iscacsecondaryweapon( var_0 );
}

iscacmeleeweapon( var_0 )
{
    return getweapongroup( var_0 ) == "weapon_melee";
}

isdroppableweapon( var_0 )
{
    if ( var_0.basename == "none" )
        return 0;

    if ( isfistweapon( var_0.basename ) )
        return 0;

    if ( isdefined( self ) && istrue( self.inlaststand ) )
        return 0;

    if ( scripts\cp\utility::iskillstreakweapon( var_0.basename ) )
        return 0;

    if ( scripts\cp\utility::issuperweapon( var_0.basename ) )
        return 0;

    if ( var_0.inventorytype != "primary" )
        return 0;

    if ( var_0.classname == "turret" )
        return 0;

    if ( !iscacprimaryweapon( var_0.basename ) && !iscacsecondaryweapon( var_0.basename ) )
        return 0;

    return 1;
}

gui_giveattachment()
{
    var_0 = getdvar( "scr_giveattachment" );

    if ( isdefined( var_0 ) )
    {
        foreach ( var_2 in level.players )
            gui_giveattachment_internal( var_2, var_0 );
    }
}

gui_giveattachment_internal( var_0, var_1 )
{
    var_2 = var_0.currentweapon;
    var_0 dropitem( var_2 );
    var_2 = var_2 getnoaltweapon();
    var_3 = scripts\cp\utility::getweaponattachmentsbasenames( var_2 );
    var_4 = 0;

    if ( scripts\engine\utility::array_contains( var_3, var_1 ) )
        var_4 = 1;
    else
    {
        var_5 = scripts\cp\utility::attachmentmap_tounique( var_1, var_2 );

        if ( !var_2 canuseattachment( var_5 ) )
        {
            if ( !isbot( var_0 ) )
                var_0 iprintlnbold( "Invalid attachment for this weapon: " + var_5 );

            var_4 = 1;
        }
    }

    if ( var_4 )
    {
        var_0 giveweapon( var_2 );
        return;
    }

    var_6 = var_3;
    var_6[var_6.size] = var_1;
    var_7 = scripts\cp\utility::getweaponrootname( var_2.basename );
    var_8 = buildweaponuniqueattachments( var_7, var_6, -1 );

    if ( isdefined( var_2.attachments ) )
    {
        foreach ( var_10 in var_2.attachments )
            var_2 = var_2 withoutattachment( var_10 );
    }

    foreach ( var_13 in var_8 )
        var_2 = var_2 withattachment( var_13 );

    var_15 = getweaponattachments( var_2 );

    if ( var_15.size > 12 )
    {
        var_0 iprintlnbold( "Player / Bot already has 12 attachments: " + createheadicon( var_2 ) );
        return;
    }

    var_0 giveweapon( var_2 );
    var_0 setweaponammoclip( var_2, weaponclipsize( var_2 ) );
    var_0 setweaponammostock( var_2, weaponmaxammo( var_2 ) );
    var_0 scripts\cp_mp\utility\inventory_utility::_switchtoweaponimmediate( var_2 );
    fixupplayerweapons( var_0, var_2 );
}

watchgunsmithdebugui()
{
    for (;;)
    {
        level waittill( "connected", var_0 );
        var_0 thread watchplayergunsmithdebugui();
    }
}

watchplayergunsmithdebugui()
{
    self endon( "disconnect" );

    for (;;)
    {
        self waittill( "luinotifyserver", var_0, var_1 );

        if ( var_0 == "debug_attach_select" )
        {
            var_2 = tablelookup( "mp/attachmenttable.csv", 0, var_1, 4 );
            gui_giveattachment_internal( self, var_2 );
        }
    }
}

create_weapon_pickups()
{
    var_0 = scripts\engine\utility::getstructarray( "weapon_pickup", "targetname" );

    for ( var_1 = 0; var_1 < var_0.size; var_1++ )
    {
        var_2 = strtok( var_0[var_1].script_noteworthy, "+" );
        var_3 = var_2[0];
        var_4 = [];

        if ( var_2.size > 1 )
        {
            var_5 = strtok( var_2[1], " " );

            for ( var_6 = 0; var_6 < var_5.size; var_6++ )
                var_4[var_4.size] = var_5[var_6];
        }

        var_3 = spawn_script_weapon( var_3, var_4, var_0[var_1].origin, var_0[var_1].angles );
    }
}

spawn_script_weapon( var_0, var_1, var_2, var_3, var_4 )
{
    if ( !isdefined( var_1 ) )
        var_1 = [];

    if ( !isarray( var_1 ) )
        var_1 = [ var_1 ];

    var_5 = undefined;

    if ( getdvarint( "scr_ai_random_weap", 0 ) != 0 )
        var_5 = buildweaponwithrandomattachments( var_0, var_1 );
    else
        var_5 = buildweapon( var_0, var_1, "none", "none", -1, undefined, undefined, undefined, var_4 );

    var_6 = createheadicon( var_5 );
    var_7 = spawn( "weapon_" + var_6, var_2 );

    if ( isdefined( var_7 ) )
    {
        if ( scripts\cp\utility::preventleave() )
            var_7 itemweaponsetammo( weaponclipsize( var_7 ), 0 );
        else
            var_7 itemweaponsetammo( weaponclipsize( var_7 ), weaponclipsize( var_7 ) );

        var_7.angles = var_3;
        add_to_weapon_array( var_7 );
        var_7 thread scripts\engine\utility::thread_on_notify_no_endon_death( "death", ::remove_from_weapon_array );
    }

    return var_7;
}

add_to_weapon_array( var_0 )
{
    level.dropped_weapons[level.dropped_weapons.size] = var_0;
}

remove_from_weapon_array( var_0 )
{
    if ( isdefined( var_0 ) )
    {
        if ( scripts\engine\utility::array_contains( level.dropped_weapons, var_0 ) )
            level.dropped_weapons = scripts\engine\utility::array_remove( level.dropped_weapons, var_0 );
    }
}

smokegrenadeused( var_0 )
{
    thread scripts\cp\utility::notifyafterframeend( "death", "end_explode" );
    self endon( "end_explode" );
    var_1 = self.owner.name;

    if ( istrue( var_0 ) )
    {
        self waittill( "missile_stuck", var_6, var_2, var_3, var_4, var_5, var_7 );
        thread _id_120E5( var_6 );
    }
    else
        self waittill( "explode", var_6 );

    level notify( "smoke_grenade_explosion", var_6, 330, 9.25, 1 );

    foreach ( var_9 in getaiarray( "axis" ) )
        var_9 childthread scripts\asm\gesture::ai_request_gesture( "getdown" );

    thread smokegrenadeexplode( var_6, var_1 );
    thread sfx_smoke_grenade_smoke( var_6 );

    if ( isdefined( self.owner ) )
        self.owner thread monitorsmokeactive();
}

smokegrenadeexplode( var_0, var_1 )
{
    wait 1;
    var_2 = scripts\cp\cp_outline_utility::addoutlineoccluder( var_0, 330 );
    var_3 = spawn( "script_model", var_0 );
    var_3 show();
    var_4 = getent( "smoke_grenade_sight_clip_256", "targetname" );

    if ( isdefined( var_4 ) )
    {
        level notify( "grenade_exploded_during_stealth", var_3, "smoke_grenade_mp", var_1 );
        var_3 clonebrushmodeltoscriptmodel( var_4 );
        var_3 setmovertransparentvolume();
    }
    else
        var_3 delete();

    wait 8.25;

    if ( isdefined( var_3 ) )
        var_3 delete();

    scripts\cp\cp_outline_utility::removeoutlineoccluder( var_2 );
}

sfx_smoke_grenade_smoke( var_0 )
{
    wait 0.2;
    var_1 = spawn( "script_origin", var_0 );
    var_1 playloopsound( "smoke_grenade_smoke_lp" );
    var_1 scripts\cp_mp\ent_manager::registerspawncount( 1 );
    wait 5.25;
    thread scripts\engine\utility::play_sound_in_space( "smoke_grenade_smoke_tail", var_0 );
    wait 0.3;
    var_1 scripts\cp_mp\ent_manager::deregisterspawn();
    var_1 stoploopsound();
    var_1 delete();
}

_id_120E5( var_0, var_1 )
{
    playfx( scripts\engine\utility::getfx( "glsmoke" ), var_0, anglestoup( ( 0, 90, 0 ) ) );
}

monitorsmokeactive()
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    self notify( "monitorSmokeActive()" );
    self endon( "monitorSmokeActive()" );
    scripts\cp\utility::printgameaction( "smoke grenade activated", self );
    self.hasactivesmokegrenade = 1;
    var_0 = scripts\engine\utility::_id_12E53( 9.25, "death" );
    self.hasactivesmokegrenade = 0;
    scripts\cp\utility::printgameaction( "smoke grenade deactivated", self );
}

buildweaponwithrandomattachments( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    var_10 = scripts\cp\utility::getweaponrootname( var_0 );

    if ( !isai( self ) )
        return;

    return getweapon( var_10, weaponclass( var_0 ) );
}

getweapon( var_0, var_1 )
{
    var_2 = [];

    if ( isarray( var_0 ) )
    {
        var_2 = var_0;
        var_0 = var_0[randomint( var_0.size )];
    }
    else
        var_2 = [ var_0 ];

    if ( var_0 == "iw8_lm_dblmg_mp" )
    {

    }

    if ( 1 )
        return getweapon_aq( var_1, var_0, var_2 );

    if ( issubstr( tolower( self.classname ), "_alq_" ) )
        return getweapon_aq( var_1, var_0, var_2 );
    else if ( issubstr( tolower( self.classname ), "_rus_desert_" ) )
        return getweapon_ru( var_1, var_0, var_2 );
    else if ( issubstr( tolower( self.classname ), "_spetsnaz_" ) )
        return getweapon_ru( var_1, var_0, var_2 );
    else if ( issubstr( tolower( self.classname ), "_hero_" ) )
        return getweapon_hero( var_0, var_2 );
    else if ( issubstr( tolower( self.classname ), "_villain_" ) )
        return getweapon_hero( var_0, var_2 );
    else if ( issubstr( tolower( self.classname ), "_sas_" ) )
        return getweapon_sas( var_1, var_0, var_2 );
    else if ( issubstr( tolower( self.classname ), "_reb_" ) )
        return getweapon_reb( var_1, var_0, var_2 );
    else if ( issubstr( tolower( self.classname ), "_so15_" ) )
        return getweapon_so15( var_1, var_0, var_2 );
    else if ( issubstr( tolower( self.classname ), "_london_police_" ) )
        return getweapon_so15( var_1, var_0, var_2 );
    else if ( issubstr( tolower( self.classname ), "_usmc_" ) )
        return getweapon_usmc( var_1, var_0, var_2 );
    else
        return buildweapon( var_0 );

    return var_0;
}

getweapon_hero( var_0, var_1 )
{
    if ( issubstr( tolower( self.classname ), "_hero_alex" ) )
    {
        switch ( var_0 )
        {
            case "iw8_pi_mike1911":
                return make_weapon_special( "alex_pistol" );
            case "iw8_sn_mike14":
                return make_weapon_special( "alex_sniper" );
        }
    }
    else if ( issubstr( tolower( self.classname ), "_hero_hadir" ) )
    {
        switch ( var_0 )
        {
            case "iw8_sm_augolf":
                return make_weapon_special( "hadir_smg" );
            case "iw8_sn_hdromeo":
                return make_weapon_special( "hadir_sniper" );
        }
    }
    else if ( issubstr( tolower( self.classname ), "_hero_kyle" ) )
    {
        switch ( var_0 )
        {
            case "iw8_ar_mcharlie":
                return make_weapon_special( "kyle_ar" );
        }
    }
    else if ( issubstr( tolower( self.classname ), "_hero_price" ) )
    {
        switch ( var_0 )
        {
            case "iw8_pi_papa320":
                return make_weapon_special( "papa320_black" );
            case "iw8_ar_kilo433":
                return make_weapon_special( "price_ar" );
        }
    }
    else if ( issubstr( tolower( self.classname ), "_hero_farah" ) )
    {
        switch ( var_0 )
        {
            case "iw8_ar_akilo47":
                return make_weapon_special( "farah_ar" );
        }
    }
    else if ( issubstr( tolower( self.classname ), "_villain_barkov" ) )
    {
        switch ( var_0 )
        {
            case "iw8_pi_golf21":
                return make_weapon_special( "barkov_pistol" );
        }
    }

    if ( getdvarint( "scr_randomweapon_debug" ) )
        iprintln( "not whitelisted!  skipping scripted build." );

    return make_weapon( var_0, [] );
}

getweapon_aq( var_0, var_1, var_2 )
{
    var_3 = [];
    var_4 = [];

    switch ( var_0 )
    {
        case "rifle":
        case "ar":
            var_5["iw8_ar_akilo47"] = 45;
            var_5["iw8_ar_falima"] = 35;
            var_5["iw8_ar_falpha"] = 20;
            var_1 = scripts\common\utility::get_weapon_weighted( var_2, var_5 );

            switch ( var_1 )
            {
                case "iw8_ar_akilo47":
                    var_3["scopes"] = [ 50, "thermalvz", "acog", "acog2", "holo2" ];
                    var_3["stocks"] = [ 50, "stockh", "stockl", "stockno", "stockfold" ];
                    var_3["mags"] = [ 50, "drums", "xmags" ];
                    var_3["grips"] = [ 50, "gripvert", "gripcust", "guardrail" ];
                    var_3["barrels"] = [ 50, "barlong" ];
                    var_3["underbarrels"] = [ 15, "gl", "glsmoke", "glgas", "glconc" ];
                    break;
                case "iw8_ar_falpha":
                    var_3["scopes"] = [ 10, "acog2", "acog2light", "thermalvz" ];
                    var_3["stocks"] = [ 50, "stockh", "stockl", "stocks" ];
                    var_3["mags"] = [ 20, "xmags" ];
                    var_3["grips"] = [ 50, "gripvert", "gripcust", "guardrail" ];
                    var_3["barrels"] = [ 50, "barlong" ];
                    var_3["underbarrels"] = [ 15, "selectsemi" ];
                    break;
                case "iw8_ar_falima":
                    var_3["scopes"] = [ 20, "acog2" ];
                    var_3["mags"] = [ 20, "xmags" ];
                    var_3["grips"] = [ 50, "gripvert", "gripang" ];
                    var_3["barrels"] = [ 50, "barshort", "barlong" ];
                    var_3["underbarrels"] = [ 15, "ub_mike203", "selectauto" ];
                    break;
            }

            break;
        case "dmr":
            var_5["iw8_sn_kilo98"] = 50;
            var_5["iw8_ar_falima"] = 50;
            var_1 = scripts\common\utility::get_weapon_weighted( var_2, var_5 );

            switch ( var_1 )
            {
                case "iw8_sn_kilo98":
                    var_3["scopes"] = [ 75, "scope", "vzscope" ];
                    var_3["stocks"] = [ 50, "stockh", "stockl" ];
                    var_3["barrels"] = [ 50, "barlong", "barmid", "barshort" ];
                    var_3["laserir"] = [ 50, "laserir" ];
                    var_3["mags"] = [ 35, "xmags" ];
                    break;
                case "iw8_ar_falima":
                    var_3["scopes"] = [ 20, "acog2" ];
                    var_3["mags"] = [ 20, "xmags" ];
                    var_3["grips"] = [ 50, "gripvert", "gripang" ];
                    var_3["barrels"] = [ 50, "barshort", "barlong" ];
                    var_3["underbarrels"] = [ 15, "ub_mike203", "selectauto" ];
                    break;
            }

            break;
        case "jugg":
            return "iw8_lm_dblmg";
        case "launcher":
            return "iw8_la_rpapa7";
        case "lmg":
            var_5["iw8_lm_pkilo"] = 50;
            var_5["iw8_ar_akilo47"] = 35;
            var_5["iw8_sm_augolf"] = 15;
            var_1 = scripts\common\utility::get_weapon_weighted( var_2, var_5 );

            switch ( var_1 )
            {
                case "iw8_lm_pkilo":
                    var_3["bipods"] = [ 75, "bipod" ];
                    var_3["mags"] = [ 100, "drums", "xmags" ];
                    break;
                case "iw8_sm_augolf":
                    var_3["barrels"] = [ 100, "barlong" ];
                    var_3["mags"] = [ 100, "drums", "xmags" ];
                    break;
                case "iw8_ar_akilo47":
                    var_3["scopes"] = [ 50, "thermalvz", "acog", "acog2", "holo2" ];
                    var_3["stocks"] = [ 50, "stockh", "stockl", "stockno", "stockfold" ];
                    var_3["mags"] = [ 50, "drums", "xmags" ];
                    var_3["grips"] = [ 50, "gripvert", "gripcust", "guardrail" ];
                    var_3["barrels"] = [ 50, "barlong" ];
                    break;
            }

            break;
        case "pistol":
            var_5["iw8_pi_mike1911"] = 50;
            var_5["iw8_pi_golf21"] = 35;

            switch ( var_1 )
            {
                case "iw8_pi_mike1911":
                    var_3["mags"] = [ 35, "xmags" ];
                case "iw8_pi_golf21":
                    var_3["mags"] = [ 35, "xmags" ];
                    break;
            }

            break;
        case "shotgun":
            var_5["iw8_sh_romeo870"] = 50;
            var_5["iw8_sh_charlie725"] = 35;

            switch ( var_1 )
            {
                case "iw8_sh_romeo870":
                    var_3["stocks"] = [ 80, "stockno", "stockh", "stockl", "stocks" ];
                    var_3["barrels"] = [ 50, "barshort", "barlong" ];
                    break;
                case "iw8_sh_charlie725":
                    var_3["scopes"] = [ 100, "scope" ];
                    var_3["stocks"] = [ 75, "stockno", "stockh", "stockl", "stocks" ];
                    var_3["barrels"] = [ 50, "barshort", "barlong" ];
                    break;
            }

            break;
        case "smg":
            var_5["iw8_sm_uzulu"] = 90;
            var_5["iw8_ar_akilo47"] = 10;
            var_1 = scripts\common\utility::get_weapon_weighted( var_2, var_5 );

            switch ( var_1 )
            {
                case "iw8_sm_uzulu":
                    var_3["scopes"] = [ 100, "reflex2" ];
                    break;
                case "iw8_ar_akilo47":
                    var_3["scopes"] = [ 50, "thermalvz", "acog", "acog2", "holo2" ];
                    var_3["stocks"] = [ 100, "stockl" ];
                    var_3["mags"] = [ 50, "xmags" ];
                    var_3["grips"] = [ 50, "gripvert", "gripcust", "guardrail" ];
                    var_3["barrels"] = [ 100, "barshortnoguard" ];
                    var_3["underbarrels"] = [ 15, "gl", "glsmoke", "glgas", "glconc" ];
                    break;
            }

            break;
        case "sniper":
            var_5["iw8_sn_delta"] = 50;
            var_5["iw8_sn_kilo98"] = 50;
            var_1 = scripts\common\utility::get_weapon_weighted( var_2, var_5 );

            switch ( var_1 )
            {
                case "iw8_sn_kilo98":
                    var_3["scopes"] = [ 100, "scope" ];
                    var_3["laserir"] = [ 100, "laserir" ];
                    var_3["mags"] = [ 35, "xmags" ];
                    break;
                case "iw8_sn_delta":
                    var_3["scopes"] = [ 100, "scope" ];
                    var_3["laserir"] = [ 100, "laserir" ];
                    var_3["mags"] = [ 35, "xmags" ];
                    break;
            }

            break;
    }

    return randomize_weapon( var_1, var_3, var_4 );
}

getweapon_ru( var_0, var_1, var_2 )
{
    var_3 = [];
    var_4 = [];

    switch ( var_0 )
    {
        case "rifle":
            var_5["iw8_ar_akilo47"] = 70;
            var_5["iw8_ar_asierra12"] = 30;
            var_1 = scripts\common\utility::get_weapon_weighted( var_2, var_5 );

            switch ( var_1 )
            {
                case "iw8_ar_akilo47":
                    var_3["scopes"] = [ 70, "acogstable_east01", "holostable_east01", "reflexstable_east01", "reflexstable_east02" ];
                    var_3["stocks"] = [ 100, "stocksmg_akilo47", "stockno_akilo47", "stockfold_akilo47", "stockcust_akilo47" ];
                    var_3["mags"] = [ 20, "drums_akilo47" ];
                    var_3["grips"] = [ 50, "gripvert_akilo47", "griphip_akilo47", "gripvert_akilo47" ];
                    var_3["barrels"] = [ 50, "barlmg_akilo47", "barcust_akilo47" ];
                    var_3["underbarrels"] = [ 15, "ub_golf25" ];
                    var_3["other"] = [ 15, "laserir_bar" ];
                    break;
                case "iw8_ar_asierra12":
                    var_3["scopes"] = [ 70, "reflex_east01", "reflex_east02", "holo_east01", "acog_east01_irons" ];
                    var_3["stocks"] = [ 50, "stockh_asierra12", "stockl_asierra12", "stocks_asierra12" ];
                    var_3["mags"] = [ 20, "xmags_asierra12" ];
                    var_3["grips"] = [ 50, "gripvert", "gripang" ];
                    var_3["barrels"] = [ 50, "barcust_asierra12", "barshort_asierra12", "barlong_asierra12" ];
                    var_3["other"] = [ 15, "laserir" ];
                    var_3["underbarrels"] = [ 15, "selectsemi" ];
                    break;
            }

            break;
        case "dmr":
            switch ( var_1 )
            {
                case "iw8_sn_mike14":
                    var_3["scopes"] = [ 50, "snprscope_mike14" ];
                    var_3["other"] = [ 100, "laserads_bar" ];
                    break;
            }

            break;
        case "launcher":
            break;
        case "lmg":
            switch ( var_1 )
            {
                case "iw8_lm_pkilo":
                    var_3["other"] = [ 50, "bipod_pkilo" ];
                    break;
            }

            break;
        case "pistol":
            break;
        case "shotgun":
            var_5["iw8_sh_romeo870"] = 50;
            var_5["iw8_sh_oscar12"] = 50;
            var_1 = scripts\common\utility::get_weapon_weighted( var_2, var_5 );

            switch ( var_1 )
            {
                case "iw8_sh_romeo870":
                    var_3["scopes"] = [ 50, "reflex_east01", "reflex_east02" ];
                    var_3["stocks"] = [ 50, "stockno_romeo870" ];
                    var_3["barrels"] = [ 50, "barshort_romeo870", "barlong_romeo870" ];
                    var_3["grips"] = [ 25, "gripcust_romeo870" ];
                    var_3["other"] = [ 50, "laserir_bar" ];
                    break;
                case "iw8_sh_oscar12":
                    var_3["scopes"] = [ 50, "reflex_east01", "reflex_east02" ];
                    var_3["stocks"] = [ 75, "stockno_oscar12", "stockh_oscar12" ];
                    var_3["mags"] = [ 75, "drums_oscar12" ];
                    var_3["barrels"] = [ 50, "barshort_oscar12", "barmid_oscar12", "barlong_oscar12" ];
                    var_3["other"] = [ 50, "laserir" ];
                    break;
            }

            break;
        case "smg":
            var_5["iw8_ar_akilo47"] = 70;
            var_5["iw8_sm_augolf"] = 30;
            var_1 = scripts\common\utility::get_weapon_weighted( var_2, var_5 );

            switch ( var_1 )
            {
                case "iw8_sm_augolf":
                    var_3["scopes"] = [ 50, "reflex_east01", "reflex_east02", "holo_east01" ];
                    var_3["mags"] = [ 30, "drums_augolf" ];
                    var_3["other"] = [ 50, "laserirsmg" ];
                    var_3["barrels"] = [ 50, "barshort_augolf" ];
                    var_3["grips"] = [ 50, "gripvertsmg", "gripangsmg" ];
                    break;
                case "iw8_ar_akilo47":
                    var_3["barrels"] = [ 100, "barcust_akilo47" ];
                    var_3["stocks"] = [ 100, "stockcust_akilo47", "stocksmg_akilo47", "stockno_akilo47", "stockno_akilo47" ];
                    var_3["mags"] = [ 100, "calsmg_akilo47", "calsmgdrums_akilo47" ];
                    var_3["grips"] = [ 50, "gripvert_akilo47", "gripang_akilo47" ];
                    var_3["other"] = [ 50, "laserir_bar" ];
                    var_3["scopes"] = [ 70, "holostable_east01", "reflexstable_east01", "reflexstable_east02" ];
                    break;
            }

            break;
        case "sniper":
            switch ( var_1 )
            {
                case "iw8_sn_delta":
                    var_3["other"] = [ 100, "laserads_bar" ];
                    break;
            }

            break;
    }

    return randomize_weapon( var_1, var_3, var_4 );
}

getweapon_reb( var_0, var_1, var_2 )
{
    var_3 = [];
    var_4 = [];

    switch ( var_0 )
    {
        case "rifle":
            var_5["iw8_ar_akilo47"] = 50;
            var_5["iw8_ar_falpha"] = 50;
            var_1 = scripts\common\utility::get_weapon_weighted( var_2, var_5 );

            switch ( var_1 )
            {
                case "iw8_ar_akilo47":
                    var_3["scopes"] = [ 10, "acogstable_east01" ];
                    var_3["stocks"] = [ 50, "stocklmg_akilo47", "stocksmg_akilo47", "stockno_akilo47", "stockfold_akilo47" ];
                    var_3["mags"] = [ 20, "drums_akilo47", "mag_akilo47|1" ];
                    var_3["grips"] = [ 50, "gripvert_akilo47", "griphip_akilo47", "guard_akilo47|1" ];
                    var_3["barrels"] = [ 50, "barlmg_akilo47", "front_akilo47|1" ];
                    var_3["underbarrels"] = [ 15, "ub_golf25" ];
                    var_3["other"] = [ 15, "rec_akilo47_mp|1" ];
                    break;
                case "iw8_ar_falpha":
                    var_3["scopes"] = [ 15, "acog_east01_irons" ];
                    var_3["stocks"] = [ 50, "stockh_falpha", "stockl_falpha", "stocks_falpha" ];
                    var_3["mags"] = [ 20, "xmags_falpha" ];
                    var_3["grips"] = [ 50, "gripvert", "gripang" ];
                    var_3["barrels"] = [ 50, "barlong_falpha", "barcust_falpha", "barshort_falpha" ];
                    var_3["underbarrels"] = [ 15, "selectsemi" ];
                    break;
            }

            break;
        case "dmr":
            switch ( var_1 )
            {
                case "iw8_sn_kilo98":
                    var_3["scopes"] = [ 50, "snprscope_kilo98", "vzscope_kilo98" ];
                    var_3["mags"] = [ 30, "xmags_kilo98" ];
                    var_3["other"] = [ 40, "laserads_bar" ];
                    break;
            }

            break;
        case "launcher":
            break;
        case "lmg":
            var_5["iw8_lm_pkilo"] = 50;
            var_5["iw8_ar_akilo47"] = 35;
            var_5["iw8_sm_augolf"] = 15;
            var_1 = scripts\common\utility::get_weapon_weighted( var_2, var_5 );

            switch ( var_1 )
            {
                case "iw8_lm_pkilo":
                    var_3["scopes"] = [ 50, "reflex_west01", "acog_east01_irons", "holo_east01" ];
                    var_3["bipods"] = [ 75, "bipod_pkilo" ];
                    var_3["mags"] = [ 35, "xmags_pkilo", "drums_pkilo" ];
                    break;
                case "iw8_sm_augolf":
                    var_3["scopes"] = [ 50, "reflex_west01", "acog_east01", "holo_east01" ];
                    var_3["arrels"] = [ 100, "barlmg_augolf" ];
                    var_3["ags"] = [ 100, "callmgdrums_augolf", "callmg_augolf" ];
                    var_3["ther"] = [ 50, "rec_augolf|1" ];
                    break;
                case "iw8_ar_akilo47":
                    var_3["barrels"] = [ 100, "barlmg_akilo47" ];
                    var_3["bipods"] = [ 50, "bipod_akilo47" ];
                    var_3["mags"] = [ 100, "callmgdrums_akilo47", "callmg_akilo47" ];
                    var_3["scopes"] = [ 50, "reflexstable_west01", "acogstable_east01", "holostable_east01" ];
                    var_3["stocks"] = [ 75, "stocklmg_akilo47" ];
                    var_3["grips"] = [ 50, "guard_akilo47|1" ];
                    var_3["other"] = [ 50, "rec_akilo47_mp|1" ];
                    break;
            }

            break;
        case "pistol":
            break;
        case "shotgun":
            switch ( var_1 )
            {
                case "iw8_sh_romeo870":
                    var_3["stocks"] = [ 100, "stockno_romeo870", "stockh_romeo870", "stockl_romeo870", "stocks_romeo870" ];
                    var_3["barrels"] = [ 50, "barshort_romeo870", "barlong_romeo870" ];
                    break;
            }

            break;
        case "smg":
            var_5["iw8_ar_akilo47"] = 70;
            var_5["iw8_sm_uzulu"] = 15;
            var_5["iw8_sm_mpapa5"] = 15;
            var_1 = scripts\common\utility::get_weapon_weighted( var_2, var_5 );

            switch ( var_1 )
            {
                case "iw8_sm_uzulu":
                    var_3["scopes"] = [ 50, "minireddot", "reflex_west01", "reflex_east01", "reflex_east02" ];
                    break;
                case "iw8_ar_akilo47":
                    var_3["barrels"] = [ 100, "barcust_akilo47" ];
                    var_3["stocks"] = [ 100, "stockcust_akilo47", "stockno_akilo47", "stockno_akilo47" ];
                    var_3["mags"] = [ 100, "calsmg_akilo47", "calsmgdrums_akilo47" ];
                    var_3["grips"] = [ 50, "gripvert_akilo47", "gripang_akilo47" ];
                    var_3["scopes"] = [ 30, "reflexstable_west01", "reflexstable_west01", "reflexstable_east01" ];
                    break;
                case "iw8_sm_mpapa5":
                    var_3["stocks"] = [ 50, "stockno_mpapa5", "stockh_mpapa5", "stocks_mpapa5" ];
                    var_3["mags"] = [ 35, "drums_mpapa5" ];
                    var_3["grips"] = [ 35, "gripvertsmg" ];
                    var_3["scopes"] = [ 30, "reflex_west01_irons", "reflex_east01", "reflex_east02", "minireddot" ];
                    break;
            }

            break;
        case "sniper":
            switch ( var_1 )
            {
                case "iw8_sn_alpha50":
                    var_3["scopes"] = [ 100, "snprscope_alpha50", "vzscope_alpha50" ];
                    var_3["barrels"] = [ 50, "barmid_alpha50", "barshort_alpha50" ];
                    var_3["laserir"] = [ 100, "laserads" ];
                    var_3["stocks"] = [ 50, "stockl_alpha50", "stockh_alpha50", "stocks_alpha50" ];
                    var_3["other"] = [ 25, "bipodsnpr" ];
                    var_3["mags"] = [ 35, "xmags_alpha50" ];
                    break;
            }

            break;
    }

    return randomize_weapon( var_1, var_3, var_4 );
}

getweapon_sas( var_0, var_1, var_2 )
{
    var_3 = [];
    var_4 = [];

    switch ( var_0 )
    {
        case "rifle":
            return make_weapon_special( "sas_ar" );
        case "dmr":
            break;
        case "launcher":
            break;
        case "lmg":
            break;
        case "pistol":
            return make_weapon_special( "papa320_black" );
        case "shotgun":
            break;
        case "smg":
            break;
        case "sniper":
            break;
    }

    return randomize_weapon( var_1, var_3, var_4 );
}

getweapon_so15( var_0, var_1, var_2 )
{
    var_3 = [];
    var_4 = [];

    switch ( var_0 )
    {
        case "rifle":
            break;
        case "dmr":
            break;
        case "launcher":
            break;
        case "lmg":
            break;
        case "pistol":
            if ( level.script == "piccadilly" || level.script == "ai_aitypes_allies" )
                return make_weapon_special( "papa320_black_rain" );
            else
                return make_weapon_special( "papa320_black" );
        case "shotgun":
            break;
        case "smg":
            break;
        case "sniper":
            break;
    }

    return randomize_weapon( var_1, var_3, var_4 );
}

getweapon_usmc( var_0, var_1, var_2 )
{
    var_3 = [];
    var_4 = [];

    switch ( var_0 )
    {
        case "rifle":
            switch ( var_1 )
            {
                case "iw8_ar_mike4":
                    var_3["scopes"] = [ 85, "reflex_west01", "reflex_west02", "holo_west01", "acog_west01_irons", "minireddot" ];
                    var_3["stocks"] = [ 70, "stockl_mike4", "stocks_mike4", "back_mike4|1", "back_mike4|2" ];
                    var_3["mags"] = [ 50, "xmags_mike4", "mag_mike4|1", "mag_mike4|2" ];
                    var_3["grips"] = [ 50, "gripvert", "gripang", "gripvertpro", "gripangpro" ];
                    var_3["barrels"] = [ 70, "barshort_mike4", "front_mike4|2" ];
                    var_3["underbarrels"] = [ 15, "ub_mike203" ];
                    var_3["endbarrel"] = [ 65, "flashhider", "comp", "brake", "linearbrake", "laser", "laserir" ];
                    var_3["other"] = [ 50, "rec_mike4|1", "rec_mike4|2" ];
                    break;
            }

            break;
        case "dmr":
            break;
        case "launcher":
            break;
        case "lmg":
            break;
        case "pistol":
            break;
        case "shotgun":
            break;
        case "smg":
            break;
        case "sniper":
            break;
    }

    return randomize_weapon( var_1, var_3, var_4 );
}

make_weapon_special( var_0 )
{
    switch ( var_0 )
    {
        case "farah_ar":
            var_0 = make_weapon( "iw8_ar_akilo47", [ "rec_akilo47_mp|1", "back_akilo47|1", "front_akilo47|1", "mag_akilo47|1", "guard_akilo47|1" ] );
            break;
        case "alex_sniper":
            var_0 = make_weapon( "iw8_sn_mike14", [ "vzscope_mike14", "rec_mike14|1", "reargrip_mike14|1", "front_mike14|1", "mag_mike14|1" ] );
            break;
        case "alex_pistol":
            var_0 = make_weapon( "iw8_pi_mike1911", [ "rec_mike1911|2", "mag_mike1911|2", "slide_mike1911|2" ] );
            break;
        case "hadir_smg":
            var_0 = make_weapon( "iw8_sm_augolf", [ "rec_augolf|1", "front_augolf|1", "mag_augolf|1", "toprail_augolf|1" ] );
            break;
        case "hadir_sniper":
            var_0 = make_weapon( "iw8_sn_hdromeo_ballistics", [ "vzscope_hdromeo_ballistics", "bipod_hdromeo", "rec_hdromeo|1", "back_hdromeo|1", "front_hdromeo|1", "mag_hdromeo|1" ] );
            break;
        case "sas_ar":
            var_0 = make_weapon( "iw8_ar_kilo433", [ "holo_west01", "laserir", "rec_kilo433|1", "back_kilo433|1", "front_kilo433|1", "mag_kilo433|1" ] );
            break;
        case "price_ar":
            var_0 = make_weapon( "iw8_ar_kilo433", [ "hybrid_west01", "laserir", "rec_kilo433|1", "back_kilo433|1", "front_kilo433|1", "mag_kilo433|1" ] );
            break;
        case "kyle_ar":
            var_0 = make_weapon( "iw8_ar_mcharlie", [ "semi_ar", "reflex_west01", "silencer04", "laserir", "rec_mcharlie|1", "back_mcharlie|1", "front_mcharlie|1", "mag_mcharlie|1" ] );
            break;
        case "papa320_black":
            var_0 = make_weapon( "iw8_pi_papa320", [ "rec_papa320|2", "mag_papa320|2", "slide_papa320|2" ] );
            break;
        case "papa320_black_rain":
            var_0 = make_weapon( "iw8_pi_papa320", [ "rec_papa320_r", "mag_papa320_r", "slide_papa320_r" ] );
            break;
        case "barkov_pistol":
            var_0 = make_weapon( "iw8_pi_golf21", [ "rec_golf21|1", "mag_golf21|1", "slide_golf21|1" ] );
            break;
        case "estate_teaser_price":
            var_0 = make_weapon( "iw8_ar_kilo433", [ "hybrid_west01", "laserir", "silencer04", "rec_kilo433|1", "mag_kilo433|1", "stockh" ] );
            break;
        case "estate_teaser":
            var_0 = make_weapon( "iw8_ar_kilo433", [ "reflex_west01", "laserir", "silencer04", "rec_kilo433|1", "mag_kilo433|1", "stockh" ] );
            break;
        default:
            var_0 = undefined;
    }

    return var_0;
}

make_weapon( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( level._weapons ) )
        level._weapons = spawnstruct();

    if ( !isdefined( var_1 ) )
        var_1 = [];

    if ( !issameweapon( var_0 ) )
    {
        var_6 = strtok( var_0, "+" );

        if ( var_6.size > 1 )
        {
            var_0 = var_6[0];
            var_1 = scripts\engine\utility::array_combine( var_1, scripts\engine\utility::array_remove( var_6, var_6[0] ) );
        }
    }
    else
    {
        if ( nullweapon( var_0 ) )
            return var_0;

        var_0 = getweaponbasename( var_0 );
    }

    if ( istrue( var_5 ) )
        var_7 = ::makeweaponfromstring;
    else
        var_7 = ::getcompleteweaponname;

    var_8 = var_0;

    if ( issubstr( var_0, "_mp" ) )
        var_8 = scripts\cp\utility::getweaponrootname( var_0 );

    var_9 = scripts\cp\utility::weaponattachdefaultmap( var_8 );
    var_9 = removeconflictingattachments( var_1, var_9 );
    var_1 = scripts\engine\utility::array_combine( var_1, var_9 );
    var_10 = scripts\cp\utility::buildweaponassetname( var_8, var_4 );
    var_11 = [];

    foreach ( var_13 in var_1 )
    {
        if ( issubstr( var_13, "|" ) )
        {
            var_1 = scripts\engine\utility::array_remove( var_1, var_13 );
            var_1[var_1.size] = strtok( var_13, "|" )[0];
            var_11[var_11.size] = var_13;
        }
    }

    var_15 = buildweaponuniqueattachments( var_8, var_1, var_4 );
    var_15 = checkforinvalidattachments( var_15, var_10 );
    var_1 = var_15;

    if ( isdefined( var_4 ) )
        var_16 = call [[ var_7 ]]( var_10, var_1, var_2, var_3, var_4 );
    else if ( isdefined( var_3 ) )
        var_16 = call [[ var_7 ]]( var_10, var_1, var_2, var_3 );
    else if ( isdefined( var_2 ) )
        var_16 = call [[ var_7 ]]( var_10, var_1, var_2 );
    else if ( isdefined( var_1 ) )
        var_16 = call [[ var_7 ]]( var_10, var_1 );
    else
        var_16 = call [[ var_7 ]]( var_10 );

    foreach ( var_13 in var_11 )
    {
        var_6 = strtok( var_13, "|" );
        var_16 = var_16 withattachment( var_6[0], int( var_6[1] ) );
    }

    return var_16;
}

removeconflictingattachments( var_0, var_1 )
{
    var_1 = removeconflictingdefaultattachment( var_0, var_1, "bar", "front_" );
    var_1 = removeconflictingdefaultattachment( var_0, var_1, "barlong", "slide_" );
    var_1 = removeconflictingdefaultattachment( var_0, var_1, "barcust", "guard_" );
    var_1 = removeconflictingdefaultattachment( var_0, var_1, "stock", "back_" );
    var_1 = removeconflictingdefaultattachment( var_0, var_1, "cal", "mag_" );
    var_1 = removeconflictingdefaultattachment( var_0, var_1, "drums", "mag_" );
    var_1 = removeconflictingdefaultattachment( var_0, var_1, "xmags", "mag_" );
    var_1 = removeconflictingdefaultattachment( var_0, var_1, "rack", "mag_" );
    var_1 = removeconflictingdefaultattachment( var_0, var_1, "rack", "ammo_" );
    var_1 = removeconflictingdefaultattachment( var_0, var_1, "thermal", "scope" );
    var_1 = removeconflictingdefaultattachment( var_0, var_1, "acog", "scope" );
    var_1 = removeconflictingdefaultattachment( var_0, var_1, "reflex", "scope" );
    var_1 = removeconflictingdefaultattachment( var_0, var_1, "holo", "scope" );
    var_1 = removeconflictingdefaultattachment( var_0, var_1, "grip", "grip_" );
    var_1 = removeconflictingdefaultattachment( var_0, var_1, "rec_", "rec_" );
    var_1 = removeconflictingdefaultattachment( var_0, var_1, "toprail_", "toprail_" );
    return var_1;
}

removeconflictingdefaultattachment( var_0, var_1, var_2, var_3 )
{
    var_4 = undefined;

    foreach ( var_6 in var_0 )
    {
        if ( issubstr( var_6, var_3 ) )
            var_4 = 1;

        if ( isstartstr( var_6, var_2 ) || istrue( var_4 ) )
        {
            for ( var_7 = 0; var_7 < var_1.size; var_7++ )
            {
                if ( issubstr( var_1[var_7], var_3 ) )
                {
                    var_1 = scripts\engine\utility::array_remove_index( var_1, var_7 );
                    return var_1;
                }
            }
        }
    }

    return var_1;
}

randomize_weapon( var_0, var_1, var_2 )
{
    var_3 = scripts\common\utility::get_random_attachments( var_1, var_2 );
    var_4 = make_weapon( var_0, var_3 );
    return var_4;
}

getscriptedweapon( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        return isundefinedweapon();

    if ( !isarray( var_0 ) && var_0 == "" )
        return isundefinedweapon();

    if ( isdefined( var_1 ) && var_1 == "sidearm" )
        var_2 = getweapon( var_0, "pistol" );
    else
        var_2 = getweapon( var_0, self.scriptedweaponclassprimary );

    return var_2;
}

printweapon()
{
    self notify( "stop printWeapon" );
    self endon( "death" );
    self endon( "stop printWeapon" );

    for (;;)
    {
        var_0 = 72;

        if ( isdefined( self ) && isdefined( self.weapon ) )
        {
            if ( isdefined( self.weapon.basename ) )
            {

            }

            if ( isdefined( self.weapon.attachments ) )
            {
                var_1 = var_0 - 1.5;

                foreach ( var_4, var_3 in self.weapon.attachments )
                    var_1 = var_1 - 1.4;
            }
        }

        waitframe();
    }
}

create_weapon_in_script( var_0, var_1 )
{
    if ( !isdefined( level.fnscriptedweaponassignment ) )
    {
        self.usescriptedweapon = undefined;

        if ( !isdefined( var_0 ) )
            var_2 = isundefinedweapon();
        else if ( !isarray( var_0 ) && var_0 == "" )
            var_2 = isundefinedweapon();
        else if ( isarray( var_0 ) )
            var_2 = getcompleteweaponname( var_0[randomint( var_0.size )] );
        else
            var_2 = getcompleteweaponname( var_0 );

        if ( !nullweapon( var_2 ) )
        {
            self.scriptedweaponfailed = 1;

            if ( isdefined( var_1 ) && var_1 == "sidearm" )
                self.scriptedweaponfailed_sidearmarray = var_0;
            else
                self.scriptedweaponfailed_primaryarray = var_0;
        }

        return var_2;
    }
    else
        return [[ level.fnscriptedweaponassignment ]]( var_0, var_1 );
}

buildweapon_variant( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = weaponattachcustomtoidmap( var_0, var_3 );

    if ( !isdefined( var_7 ) )
        var_7 = [];

    return buildweapon_attachmentidmap( var_0, var_7, "none", "none", var_3, var_4, var_5, var_6 );
}

buildweapon_attachmentidmap( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = [];
    var_9 = [];

    foreach ( var_12, var_11 in var_1 )
    {
        var_8[var_8.size] = var_12;
        var_9[var_9.size] = var_11;
    }

    return buildweapon( var_0, var_8, var_2, var_3, var_4, var_9, var_5, var_6, var_7 );
}

buildweapon( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 )
{
    if ( var_0 != "iw8_minigunksjugg_mp" )
    {
        if ( issubstr( var_0, "_mp" ) )
            var_0 = scripts\cp\utility::getweaponrootname( var_0 );
    }

    if ( isdefined( var_1 ) )
    {

    }
    else
        var_1 = [];

    if ( !isdefined( var_2 ) )
        var_2 = "none";

    if ( isdefined( var_4 ) && var_4 < 0 )
        var_4 = undefined;

    var_9 = scripts\cp\utility::buildweaponassetname( var_0, var_4 );
    var_10 = buildweaponattachmentidmap( var_1, var_5 );

    if ( istrue( var_8 ) )
    {
        if ( weaponsupportslaserir( var_9 ) )
        {
            var_11 = getweaponnvgattachment( var_9 );

            if ( !scripts\engine\utility::array_contains( var_1, var_11 ) )
            {
                var_1[var_1.size] = var_11;

                if ( var_10.size > 0 )
                    var_10[var_11] = 0;
            }
        }
    }

    var_12 = buildweaponuniqueattachmenttoidmap( var_0, var_1, var_4, var_10 );

    if ( isdefined( var_6 ) && var_6 != "none" )
        var_12[var_6] = 0;

    var_12 = filterinvalidattachmentsfromidmap( var_12, var_9 );
    var_1 = [];
    var_5 = [];

    foreach ( var_15, var_14 in var_12 )
    {
        var_1[var_1.size] = var_15;
        var_5[var_5.size] = var_14;
    }

    var_16 = getcompleteweaponname( var_9, [], undefined, var_2, var_4 );

    for ( var_17 = 0; var_17 < var_1.size; var_17++ )
        var_16 = var_16 withattachment( var_1[var_17], var_5[var_17] );

    if ( isdefined( var_7 ) )
    {
        for ( var_17 = 0; var_17 < var_7.size; var_17++ )
        {
            if ( !isdefined( var_7[var_17] ) )
                continue;

            var_18 = var_7[var_17];

            if ( "i/" != getsubstr( var_18, 0, 2 ) )
                var_18 = "i/" + var_7[var_17];

            var_16 = var_16 setsticker( var_17, var_18 );
        }
    }

    if ( isdefined( var_16.scope ) && !isstartstr( var_16.scope, "ironsdefault" ) )
    {
        var_19 = getreticleindex( var_3 );

        if ( isdefined( var_19 ) )
            var_16 = var_16 withreticle( var_19 );
    }

    return var_16;
}

buildweaponattachmentidmap( var_0, var_1 )
{
    var_2 = [];

    if ( isdefined( var_1 ) )
    {
        foreach ( var_5, var_4 in var_0 )
        {
            if ( var_5 < var_1.size )
            {
                var_2[var_4] = var_1[var_5];
                continue;
            }

            var_2[var_4] = 0;
        }
    }

    return var_2;
}

buildweaponuniqueattachmenttoidmap( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( var_2 ) && var_2 < 0 )
        var_2 = undefined;

    if ( !isdefined( var_3 ) )
        var_3 = [];

    var_1 = scripts\engine\utility::array_remove( var_1, "none" );
    var_3 = scripts\engine\utility::array_remove_key( var_3, "none" );

    if ( var_1.size > 0 && var_3.size == 0 )
    {
        foreach ( var_5 in var_1 )
            var_3[var_5] = 0;
    }

    var_7 = weaponattachdefaulttoidmap( var_0, var_2 );
    var_8 = scripts\cp\utility::buildweaponassetname( var_0, var_2 );
    var_9 = [];

    if ( isdefined( var_7 ) )
        var_9 = combinedefaultandcustomattachmentidmaps( var_7, var_3 );

    var_10 = [];

    if ( var_9.size > 0 )
    {
        var_9 = filterattachmenttoidmap( var_9, var_0 );

        foreach ( var_5, var_12 in var_9 )
        {
            var_13 = scripts\cp\utility::attachmentmap_tounique( var_5, var_8 );
            var_10[var_13] = var_12;
        }
    }

    var_14 = [];
    var_15 = 0;
    var_16 = undefined;

    foreach ( var_23, var_12 in var_10 )
    {
        var_18 = scripts\cp\utility::attachmentmap_toextra( var_23 );

        if ( isdefined( var_18 ) )
        {
            var_19 = 0;

            if ( isdefined( var_2 ) )
            {
                var_20 = scripts\cp\utility::attachmentmap_tobase( var_18 );
                var_19 = attachmentmap_extratovariantid( var_20, var_0, var_2 );
            }

            var_21 = scripts\cp\utility::attachmentmap_tounique( var_18, var_8 );
            var_14[var_21] = var_19;
        }

        var_22 = scripts\cp\utility::attachmentmap_tobase( var_23 );

        if ( !isdefined( var_16 ) && scripts\cp\utility::projectiledeleteonnote( var_22 ) )
            var_16 = var_23;

        if ( !var_15 && ( scripts\cp\utility::randomcarepackagedrops( var_22 ) || scripts\cp\utility::random_loot_override( var_23 ) ) )
            var_15 = 1;
    }

    if ( var_14.size > 0 )
        var_10 = scripts\engine\utility::array_combine_unique_keys( var_10, var_14 );

    if ( isdefined( var_16 ) && var_15 )
    {
        var_16 = scripts\engine\utility::ter_op( var_16 == "calsmg_mike4", "calsil_mike4smg", "calsil" );
        var_10[var_16] = 0;
    }

    return var_10;
}

combinedefaultandcustomattachmentidmaps( var_0, var_1 )
{
    var_2 = [];

    foreach ( var_5, var_4 in var_0 )
    {
        if ( scripts\engine\utility::array_contains_key( var_1, var_5 ) )
            continue;

        var_2[var_5] = var_4;
    }

    foreach ( var_5, var_4 in var_1 )
        var_2[var_5] = var_4;

    return var_2;
}

randomized_primary_weapon_objs( var_0 )
{
    if ( !issameweapon( var_0 ) )
        return 0;

    switch ( var_0.basename )
    {
        case "iw8_sn_hdromeo_mp":
            if ( var_0 hasattachment( "barmid", 1 ) )
                return 1;
            else
                return 0;

            break;
        case "iw8_ar_charlie_mp":
            if ( var_0 hasattachment( "barsil", 1 ) )
                return 1;
            else
                return 0;

            break;
        case "iw8_ar_kilo433_mp":
            if ( var_0 hasattachment( "barsil", 1 ) )
                return 1;
            else
                return 0;

            break;
        case "iw8_ar_mike4_mp":
            if ( var_0 hasattachment( "barsil", 1 ) )
                return 1;
            else
                return 0;

            break;
        case "iw8_sm_mpapa5_mp":
            if ( var_0 hasattachment( "barsil", 1 ) )
                return 1;
            else
                return 0;

            break;
        default:
            if ( var_0 hasattachment( "barsil", 1 ) )
            {
                return 1;
                return;
            }

            return 0;
            return;
    }
}

filterattachmenttoidmap( var_0, var_1 )
{
    var_2 = [];
    var_3 = [];

    foreach ( var_6, var_5 in var_0 )
        var_3[var_3.size] = var_6;

    if ( var_3.size > 0 )
    {
        for ( var_7 = 0; var_7 < var_3.size; var_7++ )
        {
            var_6 = var_3[var_7];

            if ( var_6 == "none" )
                continue;

            var_8 = 1;

            for ( var_9 = 0; var_9 < var_2.size; var_9++ )
            {
                if ( var_6 == var_2[var_9] )
                {
                    var_8 = 0;
                    break;
                }

                var_10 = attachmentsconflict( var_6, var_2[var_9], var_1 );

                if ( var_10 != "" )
                {
                    var_8 = 0;
                    var_2 = scripts\engine\utility::array_remove_index( var_2, var_9 );
                    var_11 = [];
                    var_11 = strtok( var_10, " " );

                    foreach ( var_14, var_13 in var_11 )
                        var_3 = scripts\engine\utility::array_insert( var_3, var_13, var_7 + 1 + var_14 );

                    break;
                }
            }

            if ( var_8 )
                var_2[var_2.size] = var_6;
        }
    }

    var_15 = [];

    foreach ( var_6 in var_2 )
    {
        var_5 = scripts\engine\utility::ter_op( isdefined( var_0[var_6] ), var_0[var_6], 0 );
        var_15[var_6] = var_5;
    }

    return var_15;
}

filterinvalidattachmentsfromidmap( var_0, var_1 )
{
    var_2 = getcompleteweaponname( var_1 );
    var_3 = [];

    foreach ( var_6, var_5 in var_0 )
    {
        if ( var_2 canuseattachment( var_6 ) )
        {
            var_3[var_6] = var_5;
            continue;
        }

        thread invalidattachmentwarning( var_6, var_1 );
    }

    return var_3;
}

attachmentscompatible( var_0, var_1 )
{
    if ( scripts\cp\utility::attachmentiscosmetic( var_0 ) && scripts\cp\utility::attachmentiscosmetic( var_1 ) )
        return 0;

    var_0 = scripts\cp\utility::attachmentmap_tobase( var_0 );
    var_1 = scripts\cp\utility::attachmentmap_tobase( var_1 );
    var_2 = 1;

    if ( var_0 == var_1 )
        var_2 = 0;
    else if ( isdefined( level.attachmentmap_conflicts ) )
    {
        var_3 = scripts\engine\utility::alphabetize( [ var_0, var_1 ] );
        var_2 = !isdefined( level.attachmentmap_conflicts[var_3[0] + "_" + var_3[1]] );
    }
    else if ( var_0 != "none" && var_1 != "none" )
    {
        var_4 = tablelookuprownum( "mp/attachmentcombos.csv", 0, var_1 );

        if ( tablelookup( "mp/attachmentcombos.csv", 0, var_0, var_4 ) == "no" )
            var_2 = 0;
    }

    return var_2;
}

attachmentsconflict( var_0, var_1, var_2 )
{
    if ( scripts\cp\utility::attachmentiscosmetic( var_0 ) && scripts\cp\utility::attachmentiscosmetic( var_1 ) )
        return var_0;

    var_3 = undefined;

    if ( issameweapon( var_2 ) )
        var_3 = createheadicon( var_2 );
    else
        var_3 = var_2;

    var_4 = scripts\cp\utility::attachmentmap_tounique( var_0, var_3 );
    var_5 = scripts\cp\utility::attachmentmap_tounique( var_1, var_3 );

    if ( _runmovequestlocale( var_4, var_5 ) )
        return var_0;

    if ( _runmovequestlocale( var_5, var_4 ) )
        return var_0;

    var_0 = scripts\cp\utility::attachmentmap_tobase( var_0 );
    var_1 = scripts\cp\utility::attachmentmap_tobase( var_1 );
    var_6 = "";

    if ( var_0 == var_1 )
        var_6 = var_0;
    else if ( isdefined( level.attachmentmap_conflicts ) )
    {
        var_7 = scripts\engine\utility::alphabetize( [ var_0, var_1 ] );
        var_8 = var_7[0] + "_" + var_7[1];

        if ( isdefined( level.attachmentmap_conflicts[var_8] ) )
        {
            if ( level.attachmentmap_conflicts[var_8] == "no" )
                var_6 = var_0;
            else
                var_6 = level.attachmentmap_conflicts[var_8];
        }
    }

    return var_6;
}

_runmovequestlocale( var_0, var_1 )
{
    var_2 = br_highlightlaststandfinishplayers( var_0 );
    var_3 = br_hasautopickup( var_1 );
    return isdefined( var_2 ) && isdefined( var_3 ) && var_3 == var_2;
}

br_hasautopickup( var_0 )
{
    if ( isdefined( level.br_give_weapon_clip[var_0] ) )
        return level.br_give_weapon_clip[var_0];

    return undefined;
}

br_highlightlaststandfinishplayers( var_0 )
{
    if ( isdefined( level.br_insert_armor[var_0] ) )
        return level.br_insert_armor[var_0];

    var_1 = scripts\cp\utility::attachmentmap_tobase( var_0 );

    if ( isdefined( level.br_giveselectedclass[var_1] ) )
        return level.br_giveselectedclass[var_1];

    return undefined;
}

attachmentmap_extratovariantid( var_0, var_1, var_2 )
{
    var_3 = var_1 + "|" + var_2;

    if ( isdefined( level.weaponlootmapdata[var_3] ) && isdefined( level.weaponlootmapdata[var_3].attachextratoidmap ) && isdefined( level.weaponlootmapdata[var_3].attachextratoidmap[var_0] ) )
        return level.weaponlootmapdata[var_3].attachextratoidmap[var_0];

    return 0;
}

weaponattachdefaulttoidmap( var_0, var_1 )
{
    if ( isdefined( var_1 ) )
    {
        var_2 = var_0 + "|" + var_1;

        if ( isdefined( level.weaponlootmapdata[var_2] ) && isdefined( level.weaponlootmapdata[var_2].attachdefaulttoidmap ) )
            return level.weaponlootmapdata[var_2].attachdefaulttoidmap;
    }

    if ( isdefined( level.weaponmapdata[var_0] ) && isdefined( level.weaponmapdata[var_0].attachdefaulttoidmap ) )
        return level.weaponmapdata[var_0].attachdefaulttoidmap;

    return undefined;
}

getweaponnvgattachment( var_0 )
{
    return "laserir";
}

weaponattachcustomtoidmap( var_0, var_1 )
{
    if ( isdefined( var_1 ) && var_1 >= 0 )
    {
        var_2 = var_0 + "|" + var_1;

        if ( isdefined( level.weaponlootmapdata[var_2] ) && isdefined( level.weaponlootmapdata[var_2].attachcustomtoidmap ) )
            return level.weaponlootmapdata[var_2].attachcustomtoidmap;
    }

    return undefined;
}

buildweaponmap()
{
    level.weaponmapdata = [];
    level._id_12FE5 = [];
    var_0 = tablelookupgetnumrows( "mp/statstable.csv" );

    for ( var_1 = 0; var_1 < var_0; var_1++ )
    {
        var_2 = tablelookupbyrow( "mp/statstable.csv", var_1, 0 );
        var_3 = tablelookup( "mp/statstable.csv", 0, var_2, 4 );

        if ( var_3 != "" )
        {
            level.weaponmapdata[var_3] = spawnstruct();
            var_4 = tablelookup( "mp/statstable.csv", 0, var_2, 0 );

            if ( var_4 != "" )
                level.weaponmapdata[var_3].number = var_4;

            var_5 = tablelookup( "mp/statstable.csv", 0, var_2, 1 );

            if ( var_5 != "" )
            {
                level.weaponmapdata[var_3].group = var_5;
                var_6 = tablelookup( "mp/statstable.csv", 0, var_2, 41 );

                if ( var_6 != "" )
                {
                    var_7 = int( var_6 );

                    if ( var_7 > -1 )
                    {
                        if ( !isdefined( level._id_12FE5[var_5] ) )
                            level._id_12FE5[var_5] = [];

                        level._id_12FE5[var_5][level._id_12FE5[var_5].size] = var_3;
                    }
                    else
                        level.weaponmapdata[var_3]._id_12A38 = 1;
                }
            }

            var_8 = tablelookup( "mp/statstable.csv", 0, var_2, 5 );

            if ( var_8 != "" )
                level.weaponmapdata[var_3].assetname = var_8;

            var_9 = tablelookup( "mp/statstable.csv", 0, var_2, 44 );

            if ( var_9 != "" )
                level.weaponmapdata[var_3].perk = var_9;

            var_10 = tablelookup( "mp/statstable.csv", 0, var_2, 9 );
            var_11 = parseattachdefaulttoidmap( var_10 );

            if ( isdefined( var_11 ) )
                level.weaponmapdata[var_3].attachdefaulttoidmap = var_11;

            var_12 = tablelookup( "mp/statstable.csv", 0, var_2, 8 );

            if ( var_12 != "" )
            {
                var_12 = float( var_12 );
                level.weaponmapdata[var_3].speed = var_12;
            }
        }
    }

    level.weaponlootmapdata = [];
    var_1 = -1;

    for (;;)
    {
        var_1++;
        var_13 = tablelookupbyrow( "loot/weapon_ids.csv", var_1, 0 );

        if ( var_13 == "" )
            break;

        var_3 = tablelookupbyrow( "loot/weapon_ids.csv", var_1, 1 );
        var_14 = tablelookupbyrow( "loot/weapon_ids.csv", var_1, 6 );
        var_15 = getweaponvarianttablename( var_3 );
        var_16 = tablelookup( var_15, 1, var_14, 0 );

        if ( var_16 == "" )
            continue;

        var_17 = var_3 + "|" + var_16;
        level.weaponlootmapdata[var_17] = spawnstruct();
        level.weaponlootmapdata[var_17].variantid = int( var_16 );
        var_18 = tablelookup( var_15, 1, var_14, 3 );

        if ( var_18 != "" )
            level.weaponlootmapdata[var_17].assetoverridename = var_18;

        var_19 = tablelookup( "loot/weapon_ids.csv", 6, var_14, 5 );
        level.weaponlootmapdata[var_17].pushpointoutofkothattractions = int( var_16 ) != 0 && int( var_19 ) == 99;
        var_20 = tablelookup( var_15, 1, var_14, 4 );
        var_11 = parseattachdefaulttoidmap( var_20 );

        if ( isdefined( var_11 ) )
        {
            if ( isdefined( level.weaponmapdata[var_3].attachdefaulttoidmap ) )
                var_11 = scripts\engine\utility::array_combine_unique_keys( var_11, level.weaponmapdata[var_3].attachdefaulttoidmap );

            level.weaponlootmapdata[var_17].attachdefaulttoidmap = var_11;
        }

        var_21 = [];

        for ( var_22 = 5; var_22 <= 15; var_22++ )
        {
            var_23 = tablelookup( var_15, 1, var_14, var_22 );

            if ( var_23 != "" )
            {
                var_24 = strtok( var_23, "|" );

                if ( var_24.size == 2 )
                    var_21[var_24[0]] = int( var_24[1] );
                else
                    var_21[var_24[0]] = 0;
            }
        }

        if ( var_21.size > 0 )
            level.weaponlootmapdata[var_17].attachcustomtoidmap = var_21;

        var_25 = tablelookup( var_15, 1, var_14, 16 );

        if ( var_25 != "" )
        {
            var_26 = [];
            var_27 = strtok( var_25, " " );

            foreach ( var_29 in var_27 )
            {
                var_30 = strtok( var_29, "|" );

                if ( var_30.size != 2 )
                    continue;

                var_26[var_30[0]] = int( var_30[1] );
            }

            if ( var_26.size > 0 )
                level.weaponlootmapdata[var_17].attachextratoidmap = var_26;
        }
    }
}

getweaponvarianttablename( var_0 )
{
    if ( scripts\cp\utility::isstrstart( var_0, "iw8_" ) )
        var_0 = getsubstr( var_0, 4 );

    return "mp/gunsmith/" + var_0 + "_variants.csv";
}

parseattachdefaulttoidmap( var_0 )
{
    if ( var_0 != "" )
    {
        var_1 = strtok( var_0, " " );
        var_2 = [];

        foreach ( var_4 in var_1 )
        {
            var_5 = strtok( var_4, "|" );

            if ( getdvarint( "scr_selectfire_enabled", 1 ) == 0 )
            {
                if ( scripts\engine\utility::string_starts_with( var_5[0], "select" ) )
                    continue;
            }

            if ( var_5.size == 2 )
            {
                var_2[var_5[0]] = int( var_5[1] );
                continue;
            }

            var_2[var_5[0]] = 0;
        }

        return var_2;
    }

    return undefined;
}

monitordisownedgrenade( var_0, var_1 )
{
    level endon( "game_ended" );
    var_1 endon( "death" );
    var_1 endon( "mine_planted" );
    var_0 scripts\engine\utility::_id_12E40( "joined_team", "joined_spectators", "disconnect" );

    if ( isdefined( var_1 ) )
        var_1 delete();
}

riotshield_getmodel()
{
    return "weapon_wm_riotshield";
}

setignoreriotshieldxp()
{
    self.ignoreriotshieldxp = 1;
}

clearignoreriotshieldxp()
{
    self.ignoreriotshieldxp = undefined;
}

ispickedupweapon( var_0 )
{
    if ( iscacprimaryweapon( var_0 ) || iscacsecondaryweapon( var_0 ) )
    {
        var_1 = undefined;

        if ( issameweapon( var_0 ) )
            var_1 = createheadicon( var_0 getnoaltweapon() );
        else if ( isstring( var_0 ) )
        {
            var_1 = var_0;

            if ( issubstr( var_1, "alt_" ) )
                var_1 = getsubstr( var_1, 4, var_0.size );
        }

        var_2 = isdefined( self.pers["primaryWeapon"] ) && self.pers["primaryWeapon"] == var_1;
        var_3 = isdefined( self.pers["secondaryWeapon"] ) && self.pers["secondaryWeapon"] == var_1;

        if ( !var_2 && !var_3 )
            return 1;
    }

    return 0;
}

isvehicleweapon( var_0 )
{
    var_1 = undefined;

    if ( issameweapon( var_0 ) )
        var_1 = var_0.basename;
    else
        var_1 = var_0;

    switch ( var_1 )
    {
        case "bradley_tow_proj_mp":
        case "lighttank_mp":
        case "lighttank_tur_mp":
        case "hoopty_truck_mp":
        case "van_mp":
        case "cargo_truck_mg_mp":
        case "cargo_truck_mp":
        case "med_transport_mp":
        case "hoopty_mp":
        case "pickup_truck_mp":
        case "jeep_mp":
        case "big_bird_mp":
        case "cop_car_mp":
        case "tur_apc_rus_mp":
        case "apc_rus_mp":
        case "large_transport_mp":
        case "atv_mp":
        case "tac_rover_mp":
        case "little_bird_mg_mp":
        case "little_bird_mp":
        case "technical_mp":
            return 1;
        default:
            return 0;
    }
}

attachmentsfilterforstats( var_0, var_1 )
{
    var_2 = [];

    foreach ( var_4 in var_0 )
    {
        if ( attachmentlogsstats( var_4, var_1 ) )
            var_2[var_2.size] = var_4;
    }

    return var_2;
}

attachmentlogsstats( var_0, var_1 )
{
    if ( scripts\cp\utility::attachmentiscosmetic( var_0 ) )
        return 0;

    if ( !br_give_starting_ammo( var_1, var_0 ) )
        return 0;

    if ( scripts\engine\utility::string_starts_with( var_0, "laststand_" ) )
        return 0;

    return 1;
}

br_give_starting_ammo( var_0, var_1 )
{
    var_2 = scripts\cp\utility::getweaponrootname( var_0 );
    var_3 = level.weaponattachments[var_2];
    return isdefined( var_3 ) && isdefined( var_3[var_1] );
}

_id_119DA( var_0 )
{
    switch ( var_0 )
    {
        case "laserbalanced":
        case "laserrange":
        case "laserads":
            var_0 = "laser";
            break;
        case "barsil2":
        case "silencer4":
        case "silencer3":
        case "silencer2":
        case "barsil":
            var_0 = "silencer";
            break;
        case "barcustnoguard":
        case "barcust2":
        case "barcust":
        case "barshortnoguard":
        case "barmid":
        case "barshort":
        case "barlong":
            var_0 = "barlong";
            break;
    }

    return var_0;
}

mapweapon( var_0, var_1, var_2 )
{
    var_3 = var_0;

    if ( !isdefined( var_0 ) )
        var_3 = getcompleteweaponname( "none" );

    var_4 = 0;

    if ( var_3.basename != "none" )
    {
        switch ( var_3.basename )
        {
            case "pop_rocket_proj_mp":
                var_3 = getcompleteweaponname( "pop_rocket_mp" );
                break;
            case "tur_gun_mp":
            case "tur_gun_faridah_mp":
                var_3 = getcompleteweaponname( "iw8_turret_50cal_mp" );
                break;
            case "tur_bradley_mp":
            case "tur_gun_lighttank_mp":
                var_3 = getcompleteweaponname( "lighttank_tur_mp" );
                break;
            case "tur_gun_lighttank_ks_mp":
            case "tur_bradley_ks_mp":
                var_3 = getcompleteweaponname( "lighttank_tur_ks_mp" );
                break;
            case "ks_remote_drone_mp":
                var_3 = getcompleteweaponname( "none" );
                break;
        }
    }
    else if ( isdefined( var_1 ) )
    {
        if ( isdefined( var_1.objweapon ) )
        {
            var_3 = getcompleteweaponname( var_1.objweapon.basename );
            var_4 = 1;
        }
        else if ( isdefined( var_1.weapon_name ) )
        {
            var_3 = getcompleteweaponname( var_1.weapon_name );
            var_4 = 1;
        }
    }

    if ( var_4 && !istrue( var_2 ) )
        var_3 = mapweapon( var_3, var_1, 1 );

    return var_3;
}
