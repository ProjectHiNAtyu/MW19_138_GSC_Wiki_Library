// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level.touchdown_origin = spawnstruct();
    level.touchdown_origin.totalcashongroundatstart = [ ( -289, -1790, 58 ), ( -2055, -2255, 73 ), ( 152, 3486, 110 ) ];
    level.touchdown_origin.petconsts = [];
    level.touchdown_origin.totalweaponxpearned = [];
    level.touchdown_origin.validatefuelstability = [];
    level.touchdown_origin.players = [];
    level.touchdown_origin.helilifetime = [ ( 1902, -2401, 58 ) ];
    level.touchdown_origin.helileave = [ 3, 2, 1 ];
    level.touchdown_origin.helimakeexfilwait = [];
    var_0 = [];
    var_1 = 0;

    for (;;)
    {
        var_2 = tablelookupbyrow( "mp/petWatchGoTable.csv", var_1, 1 );

        if ( !isdefined( var_2 ) || var_2 == "" )
            break;

        var_2 = int( var_2 );
        var_3 = spawnstruct();
        var_3.rarity = int( tablelookupbyrow( "mp/petWatchGoTable.csv", var_1, 2 ) );
        var_3.spawndragonsbreathstruct = int( tablelookupbyrow( "mp/petWatchGoTable.csv", var_1, 3 ) );
        var_3._id_130AF = int( tablelookupbyrow( "mp/petWatchGoTable.csv", var_1, 4 ) );
        var_3.disable_hvt_pickup = int( tablelookupbyrow( "mp/petWatchGoTable.csv", var_1, 5 ) );
        var_3.old_maxhealth = int( tablelookupbyrow( "mp/petWatchGoTable.csv", var_1, 8 ) );
        var_3.br_pickupdenyalreadyhaverevive = int( tablelookupbyrow( "mp/petWatchGoTable.csv", var_1, 8 ) );
        level.touchdown_origin.petconsts[var_2] = var_3;

        for ( var_4 = 0; var_4 < var_3.rarity; var_4++ )
            var_0[var_0.size] = var_2;

        var_1++;
    }

    var_5 = 3;

    for ( var_1 = 0; var_1 < var_5; var_1++ )
    {
        var_6 = level.touchdown_origin.totalcashongroundatstart[var_1];
        var_7 = randomintrange( 0, var_0.size );
        var_8 = var_0[var_7];
        level.touchdown_origin.totalweaponxpearned[var_1] = var_8;
        level.touchdown_origin.validatefuelstability[var_1] = [];
    }

    level thread mountain_three_death_func();
}

initpet( var_0 )
{
    if ( !isdefined( self.touchedmovingplatform ) )
    {
        self.touchedmovingplatform = spawnstruct();
        self.touchedmovingplatform.increment_timer = [];
        self.touchedmovingplatform.totalstructs = [ 1, 2, 3 ];
        self.touchedmovingplatform.fxgreen = 0;
        self.touchedmovingplatform.totaltrainlootcrates = self.touchedmovingplatform.totalstructs[self.touchedmovingplatform.fxgreen];
        level.touchdown_origin.players[level.touchdown_origin.players.size] = self;
    }

    thread move_gate();
    self setclientomnvar( "ui_pet_watch_bonus_earned_0", self.touchedmovingplatform.totaltrainlootcrates );
    self setscriptablepartstate( "watchVFXPlayer", "goWatchOn" );
}

mountain_three_death_func()
{
    level endon( "game_ended" );
    var_0 = 0;
    var_1 = 0;

    for (;;)
    {
        var_2 = level.touchdown_origin.totalcashongroundatstart[var_0];
        var_3 = level.touchdown_origin.totalweaponxpearned[var_0];

        if ( var_3 > 0 )
        {
            var_4 = scripts\common\utility::playersnear( var_2, 1500 );

            for ( var_5 = 0; var_5 < var_4.size; var_5++ )
            {
                var_6 = var_4[var_5];

                if ( isdefined( var_6 ) && isalive( var_6 ) && isdefined( var_6.touchedmovingplatform ) )
                {
                    var_1 = level.touchdown_origin.validatefuelstability[var_0].size;
                    level.touchdown_origin.validatefuelstability[var_0][var_1] = var_6;
                    var_6 updatecollectionuiforplayer( var_3, var_0, var_2 );
                }
            }
        }

        var_0++;

        if ( var_0 >= level.touchdown_origin.totalcashongroundatstart.size )
            var_0 = 0;

        var_7 = level.touchdown_origin.players[var_1];

        if ( isdefined( var_7 ) && isalive( var_7 ) )
        {
            if ( var_7.touchedmovingplatform.increment_timer.size == 0 )
            {
                for ( var_5 = 0; var_5 < level.touchdown_origin.players.size; var_5++ )
                {
                    var_10 = level.touchdown_origin.players[var_5];

                    if ( var_7 != var_10 && isalive( var_10 ) && isdefined( var_10.touchedmovingplatform ) )
                    {
                        var_9 = distancesquared( var_7.origin, var_10.origin );

                        if ( var_9 < 1000000 )
                        {
                            var_7 indanger( var_10 );
                            break;
                        }
                    }
                }
            }
            else
            {
                for ( var_5 = 0; var_5 < var_7.touchedmovingplatform.increment_timer.size; var_5++ )
                {
                    var_11 = var_7.touchedmovingplatform.increment_timer[var_5];
                    var_9 = distancesquared( var_7.origin, var_11.origin );

                    if ( var_9 > 4000000 )
                    {
                        var_7 giveammo( var_11 );
                        break;
                    }
                }
            }
        }

        var_1++;

        if ( var_1 >= level.touchdown_origin.players.size )
            var_1 = 0;

        waitframe();
    }
}

onplayerkilled( var_0 )
{
    for ( var_1 = 0; var_1 < self.touchedmovingplatform.increment_timer.size; var_1++ )
    {
        var_2 = self.touchedmovingplatform.increment_timer[var_1];
        var_2 _id_11CB6( self );
    }

    self.touchedmovingplatform.increment_timer = [];
}

_id_11CB6( var_0 )
{
    self.touchedmovingplatform.increment_timer = scripts\engine\utility::array_remove( self.touchedmovingplatform.increment_timer, var_0 );
    self iprintlnbold( " OPPONENT DIED " );
    self setclientomnvar( "ui_pet_watch_action", 16 );
    var_0 setclientomnvar( "ui_pet_watch_action", 17 );
}

giveammo( var_0 )
{
    self.touchedmovingplatform.increment_timer = scripts\engine\utility::array_remove( self.touchedmovingplatform.increment_timer, var_0 );

    if ( self.touchedmovingplatform.increment_timer.size > 0 )
    {
        for ( var_1 = 0; var_1 < self.touchedmovingplatform.increment_timer.size; var_1++ )
        {
            var_2 = self.touchedmovingplatform.increment_timer[var_1];

            if ( isdefined( var_2 ) && isalive( var_2 ) )
            {
                indanger( var_2 );
                return;
            }
        }
    }

    self setclientomnvar( "ui_pet_watch_bonus_earned_1", 1 );
}

indanger( var_0 )
{
    self.touchedmovingplatform.increment_timer[self.touchedmovingplatform.increment_timer.size] = var_0;
    self iprintlnbold( "ENGAGE WITH ENEMY " );
    self setclientomnvar( "ui_pet_watch_bonus_earned_0", var_0.touchedmovingplatform.totaltrainlootcrates + 100 );
    self setclientomnvar( "ui_pet_watch_bonus_earned_1", 2 );
}

incrementobjectiveachievementkill( var_0 )
{
    var_1 = level.touchdown_origin.helilifetime[var_0];
    var_2 = level.touchdown_origin.helileave[var_0];
    var_3 = level.touchdown_origin.helimakeexfilwait[var_0];
    self.touchedmovingplatform.increment_timer[self.touchedmovingplatform.increment_timer.size] = var_3;
    self iprintlnbold( "ENGAGE WITH DUMMY " );
    self setclientomnvar( "ui_pet_watch_bonus_earned_0", var_2 + 100 );
    self setclientomnvar( "ui_pet_watch_bonus_earned_1", 2 );
}

_id_12F51()
{
    if ( self.touchedmovingplatform.increment_timer.size > 0 )
    {
        self.touchedmovingplatform.fxgreen++;

        if ( self.touchedmovingplatform.fxgreen >= self.touchedmovingplatform.totalstructs.size )
            self.touchedmovingplatform.fxgreen = 0;

        self.touchedmovingplatform.totaltrainlootcrates = self.touchedmovingplatform.totalstructs[self.touchedmovingplatform.fxgreen];
        level.touchdown_origin.players[level.touchdown_origin.players.size] = self;
        self setclientomnvar( "ui_pet_watch_bonus_earned_0", self.touchedmovingplatform.totaltrainlootcrates );
    }
    else if ( isdefined( self.touchedmovingplatform.respawn_solo ) )
    {
        var_0 = level.touchdown_origin.totalweaponxpearned[self.touchedmovingplatform.respawn_solo];

        if ( var_0 > 0 )
            gulaglaststandholdremove( self.touchedmovingplatform.respawn_solo );
    }
}

gulaglaststandholdremove( var_0 )
{
    var_1 = level.touchdown_origin.totalweaponxpearned[var_0];
    level.touchdown_origin.totalweaponxpearned[var_0] = 0;
    self setclientomnvar( "ui_pet_watch_action", var_1 );
}

updatecollectionuiforplayer( var_0, var_1, var_2 )
{
    var_3 = int( distance( self.origin, var_2 ) ) * 100;
    var_4 = int( min( var_3, 900000 ) );
    var_5 = vectornormalize( var_2 - self.origin );
    var_6 = vectortoangles( var_5 );
    var_7 = var_6[1] - self.angles[1];

    if ( var_7 < 0 )
        var_7 = var_7 + 360;
    else if ( var_7 > 360 )
        var_7 = var_7 - 360;

    self.touchedmovingplatform.respawn_solo = var_1;
    var_8 = int( var_7 / 10 ) + var_4;
    self setclientomnvar( "ui_pet_watch_state", var_8 );
}

getovertimelength()
{

}

move_gate()
{
    self endon( "disconnect" );
    self notify( "goPetChallengeWatcher()" );
    self endon( "goPetChallengeWatcher()" );

    for (;;)
    {
        self waittill( "luinotifyserver", var_0, var_1 );

        if ( var_0 == "petwatch_go_charm" )
        {
            switch ( var_1 )
            {

            }

            continue;
        }

        if ( var_0 == "petwatch_turbo_state" )
        {

        }
    }
}
