// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

register_relics()
{
    level.updateonkillrelicsfunc = ::updateonkillrelics;
    level.updatepersistentrelicsfunc = ::updatepersistentrelics;
    level.updateondamagerelicsfunc = ::updateondamagerelics;
    level._id_12B13 = ::_id_12B12;
    level.cp_relics = [];
    level.updaterecentkillsrelics_func = ::updaterecentkills;
    level._id_12AF3 = ::_id_12AF2;
    level.relic_combos = load_relic_combos_from_table();
    level.modifyplayerdamage_relics = [];

    if ( !isdefined( level.perks ) )
        level.perks = [ "perk_machine_tough", "perk_machine_revive", "perk_machine_flash", "perk_machine_more", "perk_machine_rat_a_tat", "perk_machine_run", "perk_machine_fwoosh", "perk_machine_smack", "perk_machine_zap", "perk_machine_boom" ];

    register_relic( "passive_railgun_overload", ::init_passive_railgun_overload, ::set_passive_railgun_overload, ::unset_passive_railgun_overload );
    register_relic( "passive_last_shots_ammo", ::init_passive_last_shots_ammo, ::set_passive_last_shots_ammo, ::unset_passive_last_shots_ammo );
    register_relic( "passive_nuke", ::init_passive_nuke, ::set_passive_nuke, ::unset_passive_nuke );
    register_relic( "passive_headshot_ammo", ::init_headshot_ammo, ::set_headshot_ammo, ::unset_headshot_ammo );
    register_relic( "passive_headshot_super", ::init_headshot_super, ::set_headshot_super, ::unset_headshot_super );
    register_relic( "passive_refresh", ::init_passive_refresh, ::set_passive_refresh, ::unset_passive_refresh );
    register_relic( "passive_double_kill_reload", ::init_passive_double_kill_reload, ::set_passive_double_kill_reload, ::unset_passive_double_kill_reload );
    register_relic( "passive_gore", ::init_passive_gore, ::set_passive_gore, ::unset_passive_gore );
    register_relic( "passive_meleekill", ::init_passive_melee_kill, ::set_passive_melee_kill, ::unset_passive_melee_kill );
    register_relic( "passive_health_on_kill", ::init_passive_health_on_kill, ::set_passive_health_on_kill, ::unset_passive_health_on_kill );
    register_relic( "passive_health_regen_on_kill", ::init_passive_health_regen_on_kill, ::set_passive_health_regen_on_kill, ::unset_passive_health_regen_on_kill );
    register_relic( "passive_move_speed_on_kill", ::init_passive_move_speed_on_kill, ::set_passive_move_speed_on_kill, ::unset_passive_move_speed_on_kill );
    register_relic( "passive_hitman", ::init_passive_hitman, ::set_passive_hitman, ::unset_passive_hitman );
    register_relic( "passive_score_bonus_kills", ::init_passive_score_bonus_kills, ::set_passive_score_bonus_kills, ::unset_passive_score_bonus_kills );
    register_relic( "passive_scorestreak_pack", ::init_passive_score_bonus_kills, ::set_passive_score_bonus_kills, ::unset_passive_score_bonus_kills );
    register_relic( "passive_random_perks", ::init_passive_random_perks, ::set_passive_random_perks, ::unset_passive_random_perks );
    register_relic( "passive_visor_detonation", ::init_passive_visor_detonation, ::set_passive_visor_detonation, ::unset_passive_visor_detonation );
    register_relic( "passive_melee_super", ::init_passive_melee_super, ::set_passive_melee_super, ::unset_passive_melee_super );
    register_relic( "passive_jump_super", ::init_passive_jump_super, ::set_passive_jump_super, ::unset_passive_jump_super );
    register_relic( "passive_double_kill_super", ::init_passive_double_kill_super, ::set_passive_double_kill_super, ::unset_passive_double_kill_super );
    register_relic( "passive_mode_switch_score", ::init_passive_mode_switch_score, ::set_passive_mode_switch_score, ::unset_passive_mode_switch_score );
    register_relic( "passive_melee_cone_expl", ::init_passive_melee_cone_expl, ::set_passive_melee_cone_expl, ::unset_passive_melee_cone_expl );
    register_relic( "passive_berserk", ::init_passive_berserk, ::set_passive_berserk, ::unset_passive_berserk );
    register_relic( "passive_infinite_ammo", ::init_passive_infinite_ammo, ::set_passive_infinite_ammo, ::unset_passive_infinite_ammo );
    register_relic( "passive_crouch_move_speed", ::init_passive_crouch_move_speed, ::set_passive_crouch_move_speed, ::unset_passive_crouch_move_speed );
    register_relic( "passive_slide_blastshield", ::init_passive_fortified, ::set_passive_fortified, ::unset_passive_fortified );
    register_relic( "passive_cold_damage", ::init_passive_cold_damage, ::set_passive_cold_damage, ::unset_passive_cold_damage );
    register_relic( "passive_sonic", ::init_passive_sonic, ::set_passive_sonic, ::unset_passive_sonic );
    register_relic( "passive_below_the_belt", ::init_passive_below_the_belt, ::set_passive_below_the_belt, ::unset_passive_below_the_belt );
    register_relic( "passive_minimap_damage", ::init_passive_minimap_damage, ::set_passive_minimap_damage, ::unset_passive_minimap_damage );
    register_relic( "passive_extra_xp", ::init_extra_xp, ::set_extra_xp, ::unset_extra_xp );
    register_relic( "passive_fast_melee", ::init_passive_fast_melee, ::set_passive_fast_melee, ::unset_passive_fast_melee );
    register_relic( "coop_passive_snap_to_head", ::init_snap_to_head, ::set_snap_to_head, ::unset_snap_to_head );
    register_relic( "passive_empty_reload_speed", ::init_passive_empty_reload_speed, ::set_passive_empty_reload_speed, ::unset_passive_empty_reload_speed );
    register_relic( "passive_increased_scope_breath", ::init_passive_increased_scope_breath, ::set_passive_increased_scope_breath, ::unset_passive_increased_scope_breath );
    register_relic( "passive_hunter_killer", ::init_passive_hunter_killer, ::set_passive_hunter_killer, ::unset_passive_hunter_killer );
    register_relic( "passive_move_speed", ::init_passive_move_speed, ::set_passive_move_speed, ::unset_passive_move_speed );
    register_relic( "passive_miss_refund", ::init_passive_miss_refund, ::set_passive_miss_refund, ::unset_passive_miss_refund );
    register_relic( "passive_scoutping", ::init_passive_scoutping, ::set_passive_scoutping, ::unset_passive_scoutping );
    register_relic( "passive_scrambler", ::init_passive_scrambler, ::set_passive_scrambler, ::unset_passive_scrambler );
    register_relic( "passive_random_attachment", ::init_passive_random_attachment, ::set_passive_random_attachment, ::unset_passive_random_attachment );
    register_relic( "passive_scope_radar", ::init_passive_scope_radar, ::set_passive_scope_radar, ::unset_passive_scope_radar );
    register_relic( "passive_scorestreak_damage", ::init_passive_scorestreak_damage, ::set_passive_scorestreak_damage, ::unset_passive_scorestreak_damage );
    register_relic( "passive_scorestreak_damage_e", ::init_passive_scorestreak_damage, ::set_passive_scorestreak_damage, ::unset_passive_scorestreak_damage );
    register_relic( "relic_collat_dmg", ::init_relic_collat_dmg, ::set_relic_collat_dmg, ::unset_relic_collat_dmg );
    register_relic( "relic_catch", ::init_relic_catch, ::set_relic_catch, ::unset_relic_catch );
    register_relic( "relic_boom", ::init_relic_boom, ::set_relic_boom, ::unset_relic_boom );
    register_relic( "relic_swat", ::init_relic_swat, ::set_relic_swat, ::unset_relic_swat );
    register_relic( "relic_glasscannon", ::init_relic_glasscannon, ::set_relic_glasscannon, ::unset_relic_glasscannon );
    register_relic( "relic_aggressive_melee", ::playercinematicfadeout, ::_id_11E12, ::_id_12A6C );
    register_relic( "relic_focus_fire", ::playerenemypool, ::_id_11E20, ::_id_12A78 );
    register_relic( "relic_damage_from_above", ::playerclearjailtimeouthud, ::_id_11E17, ::_id_12A71 );
    register_relic( "relic_landlocked", ::playerexecutionsenable, ::_id_11E27, ::_id_12A7F );
    register_relic( "relic_martyrdom", ::playerexitsafearea, ::_id_11E2B, ::_id_12A83 );
    register_relic( "relic_gas_martyr", ::playerent, ::_id_11E21, ::_id_12A79 );
    register_relic( "relic_gun_game", ::playerentercombatareamessage, ::_id_11E23, ::_id_12A7B );
    register_relic( "relic_team_proximity", ::playergettotaltime, ::_id_11E3A, ::_id_12A91 );
    register_relic( "relic_squadlink", ::playergetspawnpoint, ::_id_11E37, ::_id_12A8F );
    register_relic( "relic_dfa", ::playerclearspectatekillchainsystem, ::_id_11E18, ::_id_12A72 );
    register_relic( "relic_shieldsonly", ::playergetplunderomnvarbitpackinginfo, ::_id_11E36, ::_id_12A8E );
    register_relic( "relic_mythic", ::playerexitsafeareamessage, ::_id_11E2C, ::_id_12A84 );
    register_relic( "relic_amped", ::playercleanupinfilondisconnect, ::_id_11E15, ::_id_12A6F );
    register_relic( "relic_thirdperson", ::playergetzombiespawnlocation, ::_id_11E3B, ::_id_12A92 );
    register_relic( "relic_dogtags", ::playerclearstreamhintorigin, ::_id_11E19, ::_id_12A73 );
    register_relic( "relic_lsmelee", ::playerexitcombatareamessage, ::_id_11E29, ::_id_12A81 );
    register_relic( "relic_hideobj", ::playerexecutionsdisable, ::_id_11E26, ::_id_12A7E );
    register_relic( "relic_expldmg", ::playerdatafield, ::_id_11E1E, ::_id_12A76 );
    register_relic( "relic_fastbleed", ::playerdelaydisablezombie, ::_id_11E1F, ::_id_12A77 );
    register_relic( "relic_nuketimer", ::playergetbestdropbagorigin, ::_id_11E32, ::_id_12A8A );
    register_relic( "relic_doubletap", ::playercreatehudelement, ::_id_11E1B, ::_id_12A75 );
    register_relic( "relic_vampire", ::playergulagautowinwait, ::_id_11E3D, ::_id_12A94 );
    register_relic( "relic_healthpacks", ::playerentersafeareamessage, ::_id_11E25, ::_id_12A7D );
    register_relic( "relic_noregen", ::playerfriendlyto, ::_id_11E31, ::_id_12A89 );
    register_relic( "relic_noks", ::playerforcespawn, ::_id_11E2F, ::_id_12A87 );
    register_relic( "relic_no_ammo_mun", ::playerfadeobjdelete, ::_id_11E2D, ::_id_12A85 );
    register_relic( "relic_lfo", ::playerexitlaststand, ::_id_11E2A, ::_id_12A82 );
    register_relic( "relic_aitype_shotgun", undefined, ::_id_11DF3, ::_id_12A62 );
    register_relic( "relic_aitype_sniper", undefined, ::_id_11DF4, ::_id_12A63 );
    register_relic( "relic_aitype_riotshield", undefined, ::_id_11DF1, ::_id_12A60 );
    register_relic( "relic_aitype_suicidebomber", undefined, ::_id_11DF5, ::_id_12A64 );
    register_relic( "relic_aitype_rpg", undefined, ::_id_11DF2, ::_id_12A61 );
    register_relic( "relic_aitype_armored", undefined, ::_id_11DF0, ::_id_12A66 );
    register_relic( "relic_bang_and_boom", ::playercleargulagomnvars, ::_id_11E16, ::_id_12A70 );
    register_relic( "relic_noluck", ::playerforcespectatorclientwait, ::_id_11E30, ::_id_12A88 );
    register_relic( "relic_doomslayer", ::playerconnectwatcher, ::_id_11E1A, ::_id_12A74 );
    register_relic( "relic_headbullets", ::playerentersafearea, ::_id_11E24, ::_id_12A7C );
    register_relic( "relic_rocket_kill_ammo", ::playergetlaststandpistol, ::_id_11E35, ::_id_12A8D );
    register_relic( "relic_punchbullets", ::playergetbestrespawnteammate, ::_id_11E34, ::_id_12A8C );
    register_relic( "relic_grounded", ::playerentercombatarea, ::_id_11E22, ::_id_12A7A );
    register_relic( "relic_oneclip", ::playergetbestrespawnmissionorigin, ::_id_11E33, ::_id_12A8B );
    register_relic( "relic_laststand", ::playerexitcombatarea, ::_id_11E28, ::_id_12A80 );
    register_relic( "relic_steelballs", ::playergetspectatingplayer, ::_id_11E38, ::_id_12A90 );
    register_relic( "relic_nobulletdamage", ::playerfakesplash, ::_id_11E2E, ::_id_12A86 );
    register_relic( "relic_ammo_drain", ::playercleanupentondisconnect, ::_id_11E14, ::_id_12A6E );
    register_relic( "relic_trex", ::playergoingintols, ::_id_11E3C, ::_id_12A93 );
    level.monitorplayerimpactend = [];
    level.monitorplayerimpactend["relic_noks"] = ::nuke_startexfilcountdown;
    level.monitorplayerimpactend["relic_no_ammo_mun"] = ::nodropanim;
    level.monitorplayerimpactend["relic_lfo"] = ::nuke_killplayerwithattacker;
    level.monitorplayerimpactend["relic_focus_fire"] = ::nuke_core_tug_of_war;
    level.monitorplayerimpactend["relic_mythic"] = ::nuke_shouldnukeendgame;
    level.monitorplayerimpactend["relic_dfa"] = ::notifycapturetoplayers;
    level.monitorplayerimpactend["relic_swat"] = ::disableonemilannounce;
    level.monitorplayerimpactend["relic_aitype_shotgun"] = ::calculatepurchasexp;
    level.monitorplayerimpactend["relic_aitype_sniper"] = ::calculatepurchasexp;
    level.monitorplayerimpactend["relic_aitype_riotshield"] = ::calculatepurchasexp;
    level.monitorplayerimpactend["relic_aitype_suicidebomber"] = ::calculatepurchasexp;
    level.monitorplayerimpactend["relic_aitype_rpg"] = ::calculatepurchasexp;
    level.monitorplayerimpactend["relic_aitype_armored"] = ::calculatepurchasexp;
    level.monitorplayerimpactend["relic_team_proximity"] = ::monitormountdisabled;
    level.monitorplayerimpactend["relic_landlocked"] = ::monitorimpactinternal;
    level.monitorplayerimpactend["relic_healthpacks"] = ::_id_11998;
    level.monitorplayerimpactend["relic_vampire"] = ::_id_119CD;
    level.monitorplayerimpactend["relic_squadlink"] = ::monitoringimpact;
    level.monitorplayerimpactend["relic_amped"] = ::monitorimpactend;
    level.onkillrelics = [];
    level.onkillrelics["passive_nuke"] = ::trackkillsforpassivenuke;
    level.onkillrelics["passive_random_perks"] = ::trackkillsforrandomperks;
    level.onkillrelics["passive_railgun_overload"] = ::dolocalrailgundamage;
    level.onkillrelics["passive_headshot_ammo"] = ::handleheadshotammopassive;
    level.onkillrelics["passive_headshot_super"] = ::addvaluetocardmeter;
    level.onkillrelics["passive_refresh"] = ::handlepassiverefresh;
    level.onkillrelics["passive_double_kill_reload"] = ::doublekillreloadwatcher;
    level.onkillrelics["passive_gore"] = ::handlegorepassive;
    level.onkillrelics["passive_health_regen_on_kill"] = ::handlehealthregenonkillpassive;
    level.onkillrelics["passive_move_speed_on_kill"] = ::handlemovespeedonkillpassive;
    level.onkillrelics["passive_hitman"] = ::handlehitmanpassive;
    level.onkillrelics["passive_meleekill"] = ::handlemeleekillpassive;
    level.onkillrelics["passive_health_on_kill"] = ::handlehealthonkillpassive;
    level.onkillrelics["passive_last_shots_ammo"] = ::handleammoonlastshotskill;
    level.onkillrelics["passive_visor_detonation"] = ::handlevisordetonation;
    level.onkillrelics["passive_melee_super"] = ::handlemeleesuper;
    level.onkillrelics["passive_jump_super"] = ::handleairbornesuper;
    level.onkillrelics["passive_double_kill_super"] = ::handledoublekillssuper;
    level.onkillrelics["passive_melee_cone_expl"] = ::handlemeleeconeexplode;
    level.onkillrelics["passive_berserk"] = ::handleberserk;
    level.onkillrelics["passive_ninja"] = ::handleammoonlastshotskill;
    level.onkillrelics["relic_punchbullets"] = ::nuke_playmushroombnk;
    level.onkillrelics["relic_headbullets"] = ::nuke_hostmigration_waitlongdurationwithpause;
    level.onkillrelics["relic_rocket_kill_ammo"] = ::nuke_vault_oilfire_vfx_end_on_death;
    level.onkillrelics["relic_steelballs"] = ::nuke_removefadeonbnkplay;
    level.onkillrelics["relic_collat_dmg"] = ::handlereliccollatdamage;
    level.onkillrelics["relic_catch"] = ::handlereliccatch;
    level.onkillrelics["relic_boom"] = ::handlerelicboom;
    level.onkillrelics["relic_martyrdom"] = ::nuke_vault_jugg_shoot_at_scriptables;
    level.onkillrelics["relic_gas_martyr"] = ::nuke_vault_key;
    level.onkillrelics["relic_shieldsonly"] = ::nuke_vault_oil_puddle_watch;
    level.onkillrelics["relic_healthpacks"] = ::_id_11999;
    level.onkillrelics["relic_amped"] = ::nuke_vault_escape;
    level.persistentrelics = [];
    level.persistentrelics["passive_infinite_ammo"] = ::handleinfiniteammopassive;
    level.persistentrelics["passive_fortified"] = ::handlefortified;
    level.persistentrelics["relic_landlocked"] = ::nuke_timescalefactor;
    level.persistentrelics["relic_team_proximity"] = ::nuke_vault_alarm;
    level.persistentrelics["relic_gun_game"] = ::nuke_stoptheclock;
    register_relic( "relic_just_keep_moving", undefined, ::_id_11DFF, ::_id_12A6A );
    level.persistentrelics["relic_just_keep_moving"] = ::node_targetname;
    level.ondamagerelics = [];
    level.ondamagerelics["passive_sonic"] = ::handlepassivesonic;
    level.ondamagerelics["passive_minimap_damage"] = ::updatepassiveminimapdamage;
    level.ondamagerelics["passive_cold_damage"] = ::updatepassivecolddamage;
    level.ondamagerelics["relic_swat"] = ::handlerelicswat;
    level.ondamagerelics["relic_collat_dmg"] = ::stop_with_front_truck;
    level.ondamagerelics["relic_vampire"] = ::stopimmediately;
    level.ondamagerelics["relic_lfo"] = ::stopcirclesatgameend;
    level.ondamagerelics["relic_focus_fire"] = ::stopchallengetimer;
    level.ondamagerelics["relic_damage_from_above"] = ::stopchallengetimers;
    level.ondamagerelics["relic_steelballs"] = ::stopdragonsbreathburning;
    level.ondamagerelics["relic_doomslayer"] = ::stoparmorinsert;
    level.ondamagerelics["relic_squadlink"] = ::stopdragonsbreath;
    level.ondamagerelics["relic_nobulletdamage"] = ::_id_119A6;
    level.stop_wave_section = [];
    level.stop_wave_section["relic_focus_fire"] = ::stop_wave;
    level.stoppingpower_clearhcrdata = [];
    level.stoppingpower_clearhcrdata["relic_bang_and_boom"] = ::_id_1198C;
}

load_relic_combos_from_table()
{
    var_0 = "cp/cp_relic_combos.csv";
    var_1 = [];

    for ( var_2 = 1; var_2 <= 10; var_2++ )
    {
        var_3 = table_look_up( var_0, var_2, 1 );

        if ( var_3 == "" )
            continue;

        var_1[var_2 - 1] = spawnstruct();
        var_1[var_2 - 1].scomboname = table_look_up( var_0, var_2, 1 );
        var_1[var_2 - 1].srelicref1 = table_look_up( var_0, var_2, 2 );
        var_1[var_2 - 1].srelicref2 = table_look_up( var_0, var_2, 3 );
        var_1[var_2 - 1].srelicref3 = table_look_up( var_0, var_2, 4 );
        var_1[var_2 - 1].srelicref4 = table_look_up( var_0, var_2, 5 );
        var_1[var_2 - 1].srelicref5 = table_look_up( var_0, var_2, 6 );
        var_1[var_2 - 1].srelicref6 = table_look_up( var_0, var_2, 7 );
    }

    return var_1;
}

table_look_up( var_0, var_1, var_2 )
{
    return tablelookup( var_0, 0, var_1, var_2 );
}

init_passive_random_attachment( var_0 )
{
    var_1 = getweaponswithpassive( var_0, "passive_random_attachment" );
    var_2 = [];

    foreach ( var_4 in var_1 )
    {
        var_5 = scripts\cp\utility::getrawbaseweaponname( var_4 );
        var_6 = scripts\cp\utility::getweaponrootname( var_4 );
        var_7 = scripts\cp\utility::getweaponcamo( var_6 );
        var_8 = scripts\cp\utility::getweaponcosmeticattachment( var_6 );
        var_9 = scripts\cp\utility::getweaponreticle( var_6 );
        var_10 = scripts\cp\utility::getweaponpaintjobid( var_6 );
        var_0.weapon_build_models[var_5] = scripts\cp\utility::mpbuildweaponname( var_6, var_2, var_7, var_9, scripts\cp\utility::get_weapon_variant_id( var_0, var_4 ), self getentitynumber(), self.clientid, var_10, var_8 );
    }
}

set_passive_random_attachment( var_0 )
{

}

unset_passive_random_attachment( var_0 )
{

}

getweaponswithpassive( var_0, var_1 )
{
    var_2 = [];
    var_3 = getarraykeys( var_0.weapon_passives );

    foreach ( var_5 in var_3 )
    {
        for ( var_6 = 0; var_6 < var_0.weapon_passives[var_5].size; var_6++ )
        {
            if ( var_0.weapon_passives[var_5][var_6].name == var_1 )
                var_2[var_2.size] = var_5;
        }
    }

    var_2 = scripts\engine\utility::array_remove_duplicates( var_2 );
    return var_2;
}

init_passive_fast_melee( var_0 )
{

}

set_passive_fast_melee( var_0 )
{
    var_0.increased_melee_damage = 150;
}

unset_passive_fast_melee( var_0 )
{
    var_0.increased_melee_damage = undefined;
}

init_extra_xp( var_0 )
{
    var_0.weapon_passive_xp_multiplier = 1;
    var_0.kill_with_extra_xp_passive = 0;
}

set_extra_xp( var_0 )
{
    var_0.weapon_passive_xp_multiplier = 1.25;
}

unset_extra_xp( var_0 )
{
    var_0.weapon_passive_xp_multiplier = 1;
    var_0.kill_with_extra_xp_passive = 0;
}

init_passive_below_the_belt( var_0 )
{
    var_0.crotch_damage_multiplier = undefined;
}

set_passive_below_the_belt( var_0 )
{
    var_0.crotch_damage_multiplier = 3.75;
}

unset_passive_below_the_belt( var_0 )
{
    var_0.crotch_damage_multiplier = undefined;
}

init_passive_move_speed( var_0 )
{
    var_0.weapon_passive_xp_multiplier = 1;
}

set_passive_move_speed( var_0 )
{
    var_0.weaponpassivespeedmod = 0.05;
    var_0 [[ level.move_speed_scale ]]();
}

unset_passive_move_speed( var_0 )
{
    var_0.weaponpassivespeedmod = undefined;
    var_0 [[ level.move_speed_scale ]]();
}

init_passive_empty_reload_speed( var_0 )
{

}

set_passive_empty_reload_speed( var_0 )
{
    var_0 scripts\cp\utility::_setperk( "specialty_fastreload_empty" );
}

unset_passive_empty_reload_speed( var_0 )
{
    var_0 scripts\cp\utility::_unsetperk( "specialty_fastreload_empty" );
}

init_passive_increased_scope_breath( var_0 )
{

}

set_passive_increased_scope_breath( var_0 )
{
    var_0 scripts\cp\utility::_setperk( "specialty_holdbreath" );
}

unset_passive_increased_scope_breath( var_0 )
{
    var_0 scripts\cp\utility::_unsetperk( "specialty_holdbreath" );
}

init_snap_to_head( var_0 )
{

}

set_snap_to_head( var_0 )
{
    var_0 scripts\cp\utility::_setperk( "specialty_autoaimhead" );
}

unset_snap_to_head( var_0 )
{
    var_0 scripts\cp\utility::_unsetperk( "specialty_autoaimhead" );
}

init_passive_hunter_killer( var_0 )
{
    self.hunterkilleroutlines = 0;
}

set_passive_hunter_killer( var_0 )
{
    self endon( "passive_hunter_killer_cancel" );
    var_1 = scripts\cp\cp_agent_utils::getaliveagentsofteam( "axis" );
    thread updatehunterkillerplayers( var_1 );
    thread hunterkillerlistenforconnect();

    foreach ( var_0 in var_1 )
    {
        thread hunterkillerlistenfordisconnect( var_0 );
        thread hunterkillerlistenfordamage( var_0 );
    }
}

unset_passive_hunter_killer( var_0 )
{
    self notify( "passive_hunter_killer_cancel" );

    foreach ( var_2 in self.hunterkillerids )
    {
        var_0 = self.hunterkillerents[var_2];
        scripts\cp\cp_outline::disable_outline_for_players( var_0, level.players );
    }

    self.hunterkillerids = undefined;
    self.hunterkillerents = undefined;
}

updatehunterkillerplayers( var_0 )
{
    if ( !isdefined( self.hunterkillerids ) )
        self.hunterkillerids = [];

    if ( !isdefined( self.hunterkillerents ) )
        self.hunterkillerents = [];

    foreach ( var_2 in var_0 )
    {
        if ( var_2 == self || !isdefined( self ) || !isdefined( self.team ) || !isdefined( var_2 ) || !isdefined( var_2.team ) )
            continue;

        var_3 = gethunterkillerid( var_2 );

        if ( level.teambased && self.team != var_2.team && var_2.health / var_2.maxhealth <= 0.5 && var_2.health > 0 )
        {
            if ( var_3 < 0 )
            {
                self.hunterkilleroutlines++;
                scripts\cp\cp_outline::enable_outline_for_player( var_2, self, 1, 0, 1, "high" );
                var_4 = self.hunterkilleroutlines;
                self.hunterkillerids[self.hunterkillerids.size] = var_4;
                self.hunterkillerents[var_4] = var_2;
                thread hunterkillerlistenforhealth( var_2 );
            }

            continue;
        }

        if ( var_3 >= 0 )
        {
            var_5 = [];
            var_6 = [];
            scripts\cp\cp_outline::disable_outline_for_player( var_2, self );

            foreach ( var_4 in self.hunterkillerids )
            {
                var_8 = self.hunterkillerents[var_4];

                if ( var_8 == var_2 )
                    continue;

                var_5[var_5.size] = var_4;
                var_6[var_4] = var_8;
            }

            self.hunterkillerids = var_5;
            self.hunterkillerents = var_6;
            var_2 notify( "passive_hunter_killer_listen_cancel" );
        }
    }
}

hunterkillerlistenforhealth( var_0 )
{
    self endon( "passive_hunter_killer_cancel" );
    var_0 endon( "passive_hunter_killer_listen_cancel" );

    for (;;)
    {
        wait 1.0;
        thread updatehunterkillerplayer( var_0 );
    }
}

gethunterkillerid( var_0 )
{
    if ( !isdefined( self.hunterkillerids ) || !isdefined( self.hunterkillerents ) )
        return -1;

    foreach ( var_2 in self.hunterkillerids )
    {
        var_3 = self.hunterkillerents[var_2];

        if ( !isdefined( var_3 ) )
            continue;

        if ( var_3 == var_0 )
            return var_2;
    }

    return -1;
}

hunterkillerlistenforconnect()
{
    self endon( "passive_hunter_killer_cancel" );

    for (;;)
    {
        level waittill( "agent_spawned", var_0 );
        thread updatehunterkillerplayer( var_0 );
        thread hunterkillerlistenfordamage( var_0 );
    }
}

hunterkillerlistenfordisconnect( var_0 )
{
    self endon( "passive_hunter_killer_cancel" );
    var_0 waittill( "disconnect" );
    thread updatehunterkillerplayer( var_0 );
}

hunterkillerlistenfordamage( var_0 )
{
    self endon( "passive_hunter_killer_cancel" );

    for (;;)
    {
        var_0 waittill( "damage", var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 );
        thread updatehunterkillerplayer( var_0 );
    }
}

updatehunterkillerplayer( var_0 )
{
    var_1 = [];
    var_1[var_1.size] = var_0;
    thread updatehunterkillerplayers( var_1 );
}

init_passive_refresh( var_0 )
{
    var_0.nextpassiverefreshkills = 0;
}

set_passive_refresh( var_0 )
{
    var_0.onkillrelics["passive_refresh"] = 1;
}

unset_passive_refresh( var_0 )
{
    var_0.onkillrelics["passive_refresh"] = 0;
}

handlepassiverefresh( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_1.nextpassiverefreshkills++;

    if ( var_1.nextpassiverefreshkills >= 50 )
    {
        if ( isdefined( level.power_adjustcharges ) )
            var_1 [[ level.power_adjustcharges ]]( undefined, "primary", 1 );

        var_1.nextpassiverefreshkills = 0;
    }
}

init_passive_double_kill_reload( var_0 )
{

}

set_passive_double_kill_reload( var_0 )
{
    var_0.onkillrelics["passive_double_kill_reload"] = 1;
}

unset_passive_double_kill_reload( var_0 )
{
    var_0.onkillrelics["passive_double_kill_reload"] = 0;
}

doublekillreloadwatcher( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( var_1.recentkillcount >= 4 )
    {
        var_0 = var_1 getcurrentweapon();
        var_6 = weaponclipsize( var_0 );
        var_7 = var_1 getweaponammostock( var_0 );
        var_8 = var_1 getweaponammoclip( var_0 );
        var_9 = min( var_6 - var_8, var_7 );
        var_10 = min( var_8 + var_9, var_6 );
        var_1 setweaponammoclip( var_0, int( var_10 ) );
        var_1 setweaponammostock( var_0, int( var_7 - var_9 ) );

        if ( var_1 isdualwielding() )
        {
            var_7 = var_1 getweaponammostock( var_0 );
            var_8 = var_1 getweaponammoclip( var_0, "left" );
            var_9 = min( var_6 - var_8, var_7 );
            var_10 = min( var_8 + var_9, var_6 );
            var_1 setweaponammoclip( var_0, int( var_10 ), "left" );
            var_1 setweaponammostock( var_0, int( var_7 - var_9 ) );
        }
    }
}

init_passive_melee_kill( var_0 )
{
    var_0.passive_melee_kill_damage = 0;
}

set_passive_melee_kill( var_0 )
{
    var_0.skip_weapon_check = 1;
    var_0.passive_melee_kill_damage = 1000;
    var_0.onkillrelics["passive_meleekill"] = 1;
}

unset_passive_melee_kill( var_0 )
{
    var_0.skip_weapon_check = undefined;
    var_0.passive_melee_kill_damage = 0;
    var_0.onkillrelics["passive_meleekill"] = 0;
}

handlemeleekillpassive( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    if ( var_3 != "MOD_MELEE" )
        return;

    level thread handlegoreeffect( var_2 );
    wait 0.05;
    var_6 = var_2 getcorpseentity();

    if ( isdefined( var_6 ) )
    {
        var_6 hide();
        var_6.permhidden = 1;
    }
}

handlegoreeffect( var_0 )
{
    var_1 = var_0 gettagorigin( "j_spine4" );
    playfx( level._effect["gore"], var_1, ( 1, 0, 0 ) );
    playsoundatpos( var_1, "gib_fullbody" );

    foreach ( var_3 in level.players )
        var_3 earthquakeforplayer( 0.5, 1.5, var_1, 120 );
}

init_passive_gore( var_0 )
{

}

set_passive_gore( var_0 )
{
    var_0.onkillrelics["passive_gore"] = 1;
}

unset_passive_gore( var_0 )
{
    var_0.onkillrelics["passive_gore"] = 0;
}

handlegorepassive( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    var_2 endon( "diconnect" );
    wait 0.05;
    var_6 = var_2 getcorpseentity();

    if ( !isdefined( var_6 ) )
        return;

    var_7 = var_6.origin;
    earthquake( 0.5, 1.5, var_7, 120 );
    playfx( level._effect["corpse_pop"], var_7 + ( 0, 0, 12 ) );

    if ( isdefined( var_6 ) )
    {
        var_6 hide();
        var_6.permhidden = 1;
    }
}

init_passive_health_on_kill( var_0 )
{
    var_0.passive_regen_on_kill_count = 0;
}

set_passive_health_on_kill( var_0 )
{
    var_0.onkillrelics["passive_health_on_kill"] = 1;
}

unset_passive_health_on_kill( var_0 )
{
    var_0.onkillrelics["passive_health_on_kill"] = 0;
}

handlehealthonkillpassive( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_1.passive_regen_on_kill_count++;

    if ( var_1.passive_regen_on_kill_count >= 2 )
    {
        var_1 notify( "force_regeneration" );
        var_1.passive_regen_on_kill_count = 0;
    }
}

init_passive_health_regen_on_kill( var_0 )
{
    var_0.passive_regen_on_kill_count = 0;
}

set_passive_health_regen_on_kill( var_0 )
{
    var_0.onkillrelics["passive_health_regen_on_kill"] = 1;
}

unset_passive_health_regen_on_kill( var_0 )
{
    var_0.onkillrelics["passive_health_regen_on_kill"] = 0;
}

handlehealthregenonkillpassive( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( var_1.passive_regen_on_kill_count >= 2 )
    {
        var_1 notify( "force_regeneration" );
        var_1.passive_regen_on_kill_count = 0;
    }
    else
        var_1.passive_regen_on_kill_count++;
}

init_passive_move_speed_on_kill( var_0 )
{
    var_0.weaponpassivespeedonkillmod = 0;
}

set_passive_move_speed_on_kill( var_0 )
{
    var_0.onkillrelics["passive_move_speed_on_kill"] = 1;
}

unset_passive_move_speed_on_kill( var_0 )
{
    var_0.onkillrelics["passive_move_speed_on_kill"] = 0;
}

handlemovespeedonkillpassive( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = "passive_move_speed_on_kill";
    var_1 notify( var_6 );
    var_1 endon( var_6 );

    if ( var_1.weaponpassivespeedonkillmod != 0.075 )
    {
        var_1.weaponpassivespeedonkillmod = 0.075;
        var_1 [[ level.move_speed_scale ]]();
    }

    var_1 scripts\engine\utility::_id_12E54( 5, "death", "disconnect" );

    if ( !isdefined( var_1 ) )
        return;

    var_1.weaponpassivespeedonkillmod = 0;
    var_1 [[ level.move_speed_scale ]]();
}

init_passive_score_bonus_kills( var_0 )
{

}

set_passive_score_bonus_kills( var_0 )
{
    var_0.cash_scalar = var_0.cash_scalar + 0.1;
    var_0.cash_scalar_weapon = scripts\cp\utility::getrawbaseweaponname( var_0 getcurrentweapon() );
}

unset_passive_score_bonus_kills( var_0 )
{
    var_0.cash_scalar = var_0.cash_scalar - 0.1;
    var_0.cash_scalar_weapon = undefined;
}

init_passive_hitman( var_0 )
{

}

set_passive_hitman( var_0 )
{
    var_0.onkillrelics["passive_hitman"] = 1;
}

unset_passive_hitman( var_0 )
{
    var_0.onkillrelics["passive_hitman"] = 0;
}

handlehitmanpassive( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( var_1 ) || !var_1 scripts\cp_mp\utility\player_utility::_isalive() || !isdefined( var_2 ) )
        return;

    if ( !isdefined( var_1.hitmankills ) )
        var_1.hitmankills = [];
    else if ( hitmankeyexists( var_1, var_2.birthtime ) )
        return;

    var_1 thread resethitmanaftertimeout();
    var_1.hitmankills[var_1.hitmankills.size] = var_2.birthtime;

    if ( var_1.hitmankills.size >= 10 )
    {
        var_1 notify( "consumable_charge", 200 );
        var_1.hitmankills = [];
    }
}

resethitmanaftertimeout()
{
    self notify( "hitman_timeout" );
    self endon( "hitman_timeout" );
    self endon( "death" );
    level endon( "game_ended" );
    wait 10;
    self.hitmankills = [];
}

hitmankeyexists( var_0, var_1 )
{
    if ( !isdefined( var_0.hitmankills ) )
        return 0;

    foreach ( var_3 in var_0.hitmankills )
    {
        if ( var_3 == var_1 )
            return 1;
    }

    return 0;
}

hitmanpassivedeathwatcher()
{
    self endon( "disconnect" );
    self waittill( "death" );
    self.hitmankills = undefined;
}

init_passive_nuke( var_0 )
{
    var_0.passivenukekillcount = 0;
    var_0.lastpassivenukeactivation = 0;
    var_0 thread tracklaststandforpassivenuke( var_0 );
}

set_passive_nuke( var_0 )
{
    var_0.onkillrelics["passive_nuke"] = 1;
}

unset_passive_nuke( var_0 )
{
    var_0.onkillrelics["passive_nuke"] = 0;
}

trackkillsforpassivenuke( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_1.passivenukekillcount++;

    if ( var_1.passivenukekillcount >= 3 )
    {
        var_6 = spawn( "script_model", var_1.origin );
        var_6 thread scripts\cp\utility::delayentdelete( 10 );
        var_7 = scripts\cp\cp_agent_utils::getactiveenemyagents( "allies" );
        var_8 = 0;

        foreach ( var_10 in var_7 )
            var_10 kill();

        var_1.passivenukekillcount = 0;
    }
}

tracklaststandforpassivenuke( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );

    for (;;)
    {
        var_0 waittill( "last_stand" );
        var_0.passivenukekillcount = 0;
    }
}

init_headshot_ammo( var_0 )
{

}

set_headshot_ammo( var_0 )
{
    var_0.onkillrelics["passive_headshot_ammo"] = 1;
}

unset_headshot_ammo( var_0 )
{
    var_0.onkillrelics["passive_headshot_ammo"] = 0;
}

handleheadshotammopassive( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( var_1 ) || !isdefined( var_0 ) )
        return;

    if ( !scripts\cp\utility::isheadshot( var_0, var_4, var_3, var_1 ) )
        return;

    var_6 = weaponclipsize( var_0 );
    adjust_clip_ammo_from_stock( var_1, var_0, "right", var_6 );

    if ( var_1 isdualwielding() )
        adjust_clip_ammo_from_stock( var_1, var_0, "left", var_6 );
}

adjust_clip_ammo_from_stock( var_0, var_1, var_2, var_3 )
{
    var_4 = var_0 getweaponammostock( var_1 );

    if ( var_4 < 1 )
        return;

    var_5 = var_0 getweaponammoclip( var_1, var_2 );
    var_6 = var_3 - var_5;

    if ( var_4 >= var_6 )
        var_0 setweaponammostock( var_1, var_4 - var_6 );
    else
    {
        var_6 = var_4;
        var_0 setweaponammostock( var_1, 0 );
    }

    var_7 = min( var_5 + var_6, var_3 );
    var_0 setweaponammoclip( var_1, int( var_7 ), var_2 );
}

init_passive_fortified( var_0 )
{
    var_0.has_fortified_passive = 0;
}

set_passive_fortified( var_0 )
{
    var_0.persistentrelics["passive_fortified"] = 1;
    var_0.has_fortified_passive = 1;
}

unset_passive_fortified( var_0 )
{
    var_0.persistentrelics["passive_fortified"] = 0;
    var_0.has_fortified_passive = 0;
}

handlefortified( var_0, var_1, var_2 )
{

}

init_passive_ninja( var_0 )
{

}

set_passive_ninja( var_0 )
{
    var_0.persistentrelics["passive_ninja"] = 1;
}

unset_passive_ninja( var_0 )
{
    var_0.persistentrelics["passive_ninja"] = 0;
}

handleninjaonlastshot( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0 ) || !isdefined( var_1 ) )
        return;

    var_3 = weaponclipsize( var_1 );
    var_4 = var_0 getweaponammoclip( var_1, "right" );

    if ( var_4 == 0 )
        var_0 thread set_player_stealthed();

    if ( var_4 == 0 && !scripts\engine\utility::array_contains( var_0.stealth_used, "right" ) )
        var_0 thread set_player_stealthed();
    else if ( var_4 > 0 )
        var_0.stealth_used = scripts\engine\utility::array_remove( var_0.stealth_used, "right" );

    if ( var_0 isdualwielding() )
    {
        var_5 = var_0 getweaponammoclip( var_1, "left" );

        if ( var_5 == 0 && !scripts\engine\utility::array_contains( var_0.stealth_used, "left" ) )
            var_0 thread set_player_stealthed();
        else if ( var_5 > 0 )
            var_0.stealth_used = scripts\engine\utility::array_remove( var_0.stealth_used, "left" );
    }
}

set_player_stealthed()
{
    self notify( "reset_stealth" );
    self endon( "reset_stealth" );
    self endon( "disconnect" );

    if ( !scripts\cp\utility::isignoremeenabled() )
        scripts\cp\utility::allow_player_ignore_me( 1 );

    playfx( level._effect["stimulus_glow_burst"], scripts\engine\utility::drop_to_ground( self.origin ) - ( 0, 0, 30 ) );
    scripts\engine\utility::play_sound_in_space( "zmb_fnf_stimulus", scripts\engine\utility::drop_to_ground( self.origin ) );

    if ( self isdualwielding() )
        wait 3.0;
    else
        wait 4.0;

    if ( scripts\cp\utility::isignoremeenabled() )
        scripts\cp\utility::allow_player_ignore_me( 0 );
}

init_passive_last_shots_ammo( var_0 )
{

}

set_passive_last_shots_ammo( var_0 )
{
    var_0.onkillrelics["passive_last_shots_ammo"] = 1;
}

unset_passive_last_shots_ammo( var_0 )
{
    var_0.onkillrelics["passive_last_shots_ammo"] = 0;
}

handleammoonlastshotskill( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( var_1 ) || !isdefined( var_0 ) )
        return;

    var_6 = weaponclipsize( var_0 );
    var_7 = var_1 getweaponammoclip( var_0, "right" );

    if ( var_7 <= int( var_6 * 0.2 ) )
        adjust_clip_ammo_from_stock( var_1, var_0, "right", var_6 );

    if ( var_1 isdualwielding() )
    {
        var_7 = var_1 getweaponammoclip( var_0, "left" );

        if ( var_7 <= int( var_6 * 0.2 ) )
            adjust_clip_ammo_from_stock( var_1, var_0, "left", var_6 );
    }
}

init_passive_railgun_overload( var_0 )
{

}

set_passive_railgun_overload( var_0 )
{
    var_0.onkillrelics["passive_railgun_overload"] = 1;
}

unset_passive_railgun_overload( var_0 )
{
    var_0.onkillrelics["passive_railgun_overload"] = 0;
}

dolocalrailgundamage( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( var_2.hitbychargedshot ) )
        return 0;

    if ( !scripts\engine\utility::isbulletdamage( var_3 ) )
        return 0;

    if ( isdefined( var_2.agent_type ) && ( var_2.agent_type == "zombie_brute" || var_2.agent_type == "zombie_grey" || var_2.agent_type == "slasher" || var_2.agent_type == "superslasher" || var_2.agent_type == "zombie_sasquatch" || var_2.agent_type == "lumberjack" ) )
        return;

    var_6 = istrue( var_2.is_suicide_bomber );
    var_2.head_is_exploding = 1;
    var_7 = var_2 gettagorigin( "j_spine4" );
    playsoundatpos( var_2.origin, "zmb_fnf_headpopper_explo" );
    playfx( level._effect["bloody_death"], var_7 );

    if ( isdefined( var_2.headmodel ) )
        var_2 detach( var_2.headmodel );

    if ( !var_6 )
        var_2 setscriptablepartstate( "head", "hide" );

    var_2.hitbychargedshot radiusdamage( var_2.origin, 64, var_2.maxhealth, var_2.maxhealth, var_2.hitbychargedshot, "MOD_EXPLOSIVE", "iw7_zombieDoors_zm" );
    var_2.hitbychargedshot = undefined;
}

init_headshot_super( var_0 )
{
    var_0.delayedsuperbonus = 0;
}

set_headshot_super( var_0 )
{
    var_0.onkillrelics["passive_headshot_super"] = 1;
}

unset_headshot_super( var_0 )
{
    var_0.onkillrelics["passive_headshot_super"] = 0;
}

addvaluetocardmeter( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_1.delayedsuperbonus++;
    wait( 0.05 * var_1.delayedsuperbonus );
    var_1.delayedsuperbonus--;

    if ( var_1.delayedsuperbonus < 0 )
        var_1.delayedsuperbonus = 0;

    var_1 notify( "consumable_charge", 10 );
}

init_passive_sonic( var_0 )
{
    var_0.sonictimer = 0;
}

set_passive_sonic( var_0 )
{
    var_0.ondamagerelics["passive_sonic"] = 1;
}

unset_passive_sonic( var_0 )
{
    var_0.ondamagerelics["passive_sonic"] = 0;
}

handlepassivesonic( var_0, var_1, var_2 )
{
    var_3 = gettime();

    if ( var_2 scripts\cp\utility::agentisfnfimmune() )
        return;

    if ( var_3 <= var_0.sonictimer )
        return;

    if ( distance2dsquared( var_0.origin, var_2.origin ) <= 62500 )
        thread scripts\cp\cp_weapon::fx_stun_damage( var_2, var_0 );

    var_0.sonictimer = var_3 + 1000;
}

init_passive_crouch_move_speed( var_0 )
{

}

set_passive_crouch_move_speed( var_0 )
{
    var_0 thread adjust_move_speed_while_crouched( var_0 );
    var_0 thread adjust_move_speed_while_sliding( var_0 );
}

unset_passive_crouch_move_speed( var_0 )
{
    var_0 notify( "remove_crouch_speed_mod" );
    var_0.weaponpassivespeedmod = undefined;
}

adjust_move_speed_while_sliding( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_0 endon( "remove_crouch_speed_mod" );

    for (;;)
    {
        self waittill( "sprint_slide_end" );

        if ( var_0 getstance() == "crouch" )
        {
            if ( isdefined( level.move_speed_scale ) )
            {
                var_0.weaponpassivespeedmod = 0.5;
                var_0 [[ level.move_speed_scale ]]();
            }
        }

        while ( var_0 getstance() == "crouch" )
            wait 0.1;

        var_0.weaponpassivespeedmod = undefined;
        var_0 [[ level.move_speed_scale ]]();
    }
}

adjust_move_speed_while_crouched( var_0, var_1 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_0 endon( "remove_crouch_speed_mod" );

    for (;;)
    {
        if ( var_0 getstance() == "crouch" )
        {
            if ( isdefined( level.move_speed_scale ) )
            {
                var_0.weaponpassivespeedmod = 0.5;
                var_0 [[ level.move_speed_scale ]]();
            }
        }

        while ( var_0 getstance() == "crouch" )
            wait 0.1;

        var_0.weaponpassivespeedmod = undefined;
        var_0 [[ level.move_speed_scale ]]();
        var_0 waittill( "adjustedStance" );
    }
}

init_passive_infinite_ammo( var_0 )
{

}

set_passive_infinite_ammo( var_0 )
{
    var_0 scripts\cp\utility::enable_infinite_ammo( 1 );
    var_0.persistentrelics["passive_infinite_ammo"] = 1;
}

unset_passive_infinite_ammo( var_0 )
{
    var_0 scripts\cp\utility::enable_infinite_ammo( 0 );
    var_0.persistentrelics["passive_infinite_ammo"] = 0;
    var_0 notify( "cleanup_watcher_threads_passive_infinite_ammo" );
}

handleinfiniteammopassive( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "cleanup_watcher_threads_passive_infinite_ammo" );

    for (;;)
    {
        var_0 waittill( "weapon_fired", var_2 );
        var_0 thread listenforfirecomplete();
        var_3 = 4;
        var_4 = self.health;

        if ( var_4 - var_3 < 1 )
            var_3 = 0;

        if ( var_3 > 0 )
            var_0 dodamage( var_3, var_0 gettagorigin( "j_wrist_ri" ), var_0, undefined, "MOD_RIFLE_BULLET" );

        var_0 updateinfiniteammopassive( var_2 );
    }
}

listenforfirecomplete()
{
    self endon( "disconnect" );
    self endon( "last_stand" );
    self notify( "infinite_ammo_fire" );
    self endon( "infinite_ammo_fire" );
    self.selfdamaging = 1;
    wait 0.2;
    self.selfdamaging = 0;
}

updateinfiniteammopassive( var_0 )
{
    var_1 = self.health;
    var_2 = weaponclipsize( var_0 );
    self setweaponammoclip( var_0, var_2 );

    if ( self isdualwielding() )
        self setweaponammoclip( var_0, var_2, "left" );
}

init_passive_miss_refund( var_0 )
{

}

set_passive_miss_refund( var_0 )
{
    var_1 = var_0 getcurrentweapon();
    var_0 thread missrefundwatcher( var_1 );
}

unset_passive_miss_refund( var_0 )
{
    var_0 notify( "removeMissRefundPassive" );
}

missrefundwatcher( var_0 )
{
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "removeMissRefundPassive" );

    for (;;)
    {
        self waittill( "shot_missed", var_1 );

        if ( var_1 == var_0 )
        {
            if ( randomfloat( 1.0 ) > 0.75 )
            {
                var_2 = self getweaponammostock( var_0 );
                self setweaponammostock( var_0, var_2 + 1 );
            }
        }
    }
}

init_passive_scrambler( var_0 )
{

}

set_passive_scrambler( var_0 )
{
    var_0 thread handlepassivescrambler( var_0 );
}

unset_passive_scrambler( var_0 )
{
    var_0 notify( "handlePassiveScrambler" );
}

scrambler_executevisuals( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    var_1 = spawn( "script_model", self gettagorigin( "tag_eye" ) );
    var_1 setmodel( "prop_mp_optic_wave_scr" );
    var_1.angles = self getplayerangles();
    var_1 setotherent( self );
    var_1 setscriptablepartstate( "effects", "active", 0 );
    var_2 = var_1.origin + anglestoforward( var_1.angles ) * 256;
    var_1 moveto( var_2, var_0 );
    scripts\engine\utility::_id_12E54( var_0, "last_stand", "death" );

    if ( isdefined( var_1 ) )
        var_1 delete();
}

handlepassivescrambler( var_0 )
{
    var_0 notify( "handlePassiveScrambler" );
    var_0 endon( "handlePassiveScrambler" );
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_0 endon( "last_stand" );
    var_0 endon( "death" );

    for (;;)
    {
        if ( randomint( 100 ) > 85 )
        {
            var_1 = scripts\cp\cp_agent_utils::getaliveagentsofteam( "axis" );
            var_2 = scripts\engine\utility::get_array_of_closest( var_0.origin, var_1, undefined, 24, 256 );
            var_3 = 0;

            foreach ( var_5 in var_2 )
            {
                if ( scripts\engine\utility::within_fov( var_0 geteye(), var_0.angles, var_5.origin, cos( 65 ) ) )
                {
                    if ( !var_3 )
                        var_0 thread scrambler_executevisuals( 0.8 );

                    thread scrambler_stun_damage( var_5, var_0 );
                    var_3++;
                }

                if ( var_3 >= 5 )
                    break;
            }
        }

        wait( randomfloatrange( 5.0, 10.0 ) );
    }
}

scrambler_stun_damage( var_0, var_1 )
{
    var_0 endon( "death" );

    if ( isdefined( var_0.stun_hit_time ) )
    {
        if ( gettime() > var_0.stun_hit_time )
        {
            var_0.allowpain = 1;
            var_0.stun_hit_time = gettime() + 1000;
            var_0.stunned = 1;
        }
        else
            return;
    }
    else
    {
        var_0.allowpain = 1;
        var_0.stun_hit_time = gettime() + 1000;
        var_0.stunned = 1;
    }

    var_0 dodamage( 1, var_0.origin, var_1, var_1, "MOD_UNKNOWN", "iw7_scrambler_zm" );
    var_0 thread addhealthback( var_0 );
    wait 1;
    var_0.allowpain = 0;
    var_0.stunned = undefined;
}

addhealthback( var_0 )
{
    var_0 endon( "death" );
    waittillframeend;

    if ( var_0.health < var_0.maxhealth )
        var_0.health = var_0.health + 1;
}

init_passive_random_perks( var_0 )
{
    var_0.passiverandomperkskillcount = 0;
    var_0 thread tracklaststandforpassiverandomperks( var_0 );
}

tracklaststandforpassiverandomperks( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );

    for (;;)
    {
        var_0 waittill( "last_stand" );
        var_0.passiverandomperkskillcount = 0;
    }
}

set_passive_random_perks( var_0 )
{
    var_0.onkillrelics["passive_random_perks"] = 1;
}

trackkillsforrandomperks( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_1 endon( "disconnect" );
    var_1 endon( "last_stand" );
    var_1 endon( "death" );
    var_1.passiverandomperkskillcount++;

    if ( var_1.passiverandomperkskillcount >= 75 )
    {
        var_6 = level.perks;
        var_1.passiverandomperkskillcount = 0;

        if ( !isdefined( var_1.zombies_perks ) || var_1.zombies_perks.size < 5 )
        {
            for (;;)
            {
                var_7 = scripts\engine\utility::random( var_6 );

                if ( !var_1 scripts\cp\utility::has_zombie_perk( var_7 ) )
                {
                    var_1 iprintln( " zombies_perk_machines is disabled for now!. Can be reenabled based on requirements. " );
                    break;
                }
                else
                    var_6 = scripts\engine\utility::array_remove( var_6, var_7 );

                waitframe();
            }
        }
    }
}

unset_passive_random_perks( var_0 )
{
    var_0.onkillrelics["passive_random_perks"] = 0;
}

init_passive_melee_super( var_0 )
{

}

set_passive_melee_super( var_0 )
{
    var_0.skip_weapon_check = 1;
    var_0.onkillrelics["passive_melee_super"] = 1;
}

unset_passive_melee_super( var_0 )
{
    var_0.skip_weapon_check = undefined;
    var_0.onkillrelics["passive_melee_super"] = 0;
}

handlemeleesuper( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    level endon( "game_ended" );
    var_1 endon( "disconnect" );

    if ( isdefined( var_3 ) && var_3 == "MOD_MELEE" )
        var_1 notify( "consumable_charge", 125 );
}

init_passive_jump_super( var_0 )
{

}

set_passive_jump_super( var_0 )
{
    var_0.onkillrelics["passive_jump_super"] = 1;
    var_0.current_weapon_jump_super = scripts\cp\utility::getrawbaseweaponname( var_0 getcurrentweapon() );
}

unset_passive_jump_super( var_0 )
{
    var_0.onkillrelics["passive_jump_super"] = 0;
    var_0.current_weapon_jump_super = undefined;
}

handleairbornesuper( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    level endon( "game_ended" );
    var_1 endon( "disconnect" );

    if ( !var_1 isonground() && ( isdefined( var_1.current_weapon_jump_super ) && scripts\cp\utility::getrawbaseweaponname( var_0 ) == var_1.current_weapon_jump_super ) )
        var_1 notify( "consumable_charge", 75 );
}

init_passive_double_kill_super( var_0 )
{

}

set_passive_double_kill_super( var_0 )
{
    var_0.onkillrelics["passive_double_kill_super"] = 1;
    var_0.current_weapon_double_super = scripts\cp\utility::getrawbaseweaponname( var_0 getcurrentweapon() );
}

unset_passive_double_kill_super( var_0 )
{
    var_0.onkillrelics["passive_double_kill_super"] = 0;
    var_0.current_weapon_double_super = undefined;
}

handledoublekillssuper( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    level endon( "game_ended" );
    var_1 endon( "disconnect" );

    if ( isdefined( var_1.recentkillcount ) && ( isdefined( var_1.current_weapon_double_super ) && scripts\cp\utility::getrawbaseweaponname( var_0 ) == var_1.current_weapon_double_super ) )
    {
        if ( var_1.recentkillcount == 2 )
            var_1 notify( "consumable_charge", 125 );
    }
}

init_passive_mode_switch_score( var_0 )
{

}

set_passive_mode_switch_score( var_0 )
{
    var_0.alt_mode_passive = 1;
    var_0.cash_scalar_alt_weapon = scripts\cp\utility::getrawbaseweaponname( var_0 getcurrentweapon() );
    var_0.cash_scalar = var_0.cash_scalar + 0.1;
}

unset_passive_mode_switch_score( var_0 )
{
    var_0.cash_scalar = var_0.cash_scalar - 0.1;
    var_0.cash_scalar_alt_weapon = undefined;
    var_0.alt_mode_passive = 0;
}

init_passive_visor_detonation( var_0 )
{

}

set_passive_visor_detonation( var_0 )
{
    var_0.onkillrelics["passive_visor_detonation"] = 1;
}

unset_passive_visor_detonation( var_0 )
{
    var_0.onkillrelics["passive_visor_detonation"] = 0;
}

handlevisordetonation( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !scripts\engine\utility::isbulletdamage( var_3 ) )
        return 0;

    if ( !scripts\cp\utility::isheadshot( var_0, var_4, var_3, var_1 ) )
        return 0;

    if ( isdefined( var_2.agent_type ) && ( var_2.agent_type == "zombie_brute" || var_2.agent_type == "zombie_grey" || var_2.agent_type == "slasher" || var_2.agent_type == "superslasher" || var_2.agent_type == "zombie_sasquatch" || var_2.agent_type == "lumberjack" ) )
        return;

    var_6 = istrue( var_2.is_suicide_bomber );
    var_2.head_is_exploding = 1;
    var_7 = var_2 gettagorigin( "j_spine4" );
    playsoundatpos( var_2.origin, "zmb_fnf_headpopper_explo" );
    playfx( level._effect["bloody_death"], var_7 );

    if ( isdefined( var_2.headmodel ) )
        var_2 detach( var_2.headmodel );

    if ( !var_6 )
        var_2 setscriptablepartstate( "head", "hide" );
}

passive_visor_detonation_activate()
{
    self endon( "death" );
    self endon( "disconnect" );
    self endon( "end_passive_visor_detonation" );

    for (;;)
    {
        self waittill( "headshot_done_with_this_weapon", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );
        waitframe();
    }
}

init_passive_berserk( var_0 )
{

}

set_passive_berserk( var_0 )
{
    var_0.onkillrelics["passive_berserk"] = 1;
}

unset_passive_berserk( var_0 )
{
    var_0.onkillrelics["passive_berserk"] = 0;
}

handleberserk( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !istrue( var_1.berserk ) )
    {
        var_1.berserk = 1;
        var_1 setfiretimescaleon( 65 );
        var_6 = var_1 player_getrecoilscale();

        if ( var_6 < 0 )
            var_6 = 100;

        var_6 = max( var_6 - 20, 0 );
        var_1 player_recoilscaleon( int( var_6 ) );
    }

    var_1 notify( "stop_berserk_timer" );
    var_1 thread remove_berserk_after_timeout( 2 );
}

remove_berserk_after_timeout( var_0 )
{
    self endon( "end_berserk" );
    self endon( "stop_berserk_timer" );
    self endon( "death" );
    self endon( "disconnect" );
    thread listencancelberserk();
    wait( var_0 );
    unset_berserk();
}

listencancelberserk()
{
    self endon( "end_berserk" );
    self endon( "stop_berserk_timer" );
    self endon( "disconnect" );
    scripts\engine\utility::_id_12E3F( "death", "weapon_change" );
    unset_berserk();
}

unset_berserk()
{
    if ( istrue( self.berserk ) )
    {
        self.berserk = 0;
        self setfiretimescaleoff();
        var_0 = self player_getrecoilscale();
        var_0 = min( var_0 + 20, 100 );
        self player_recoilscaleon( int( var_0 ) );
        self notify( "end_berserk" );
    }
}

unsetquadfeederpassive()
{
    self notify( "end_quadFeederEffect" );
    self notify( "end_quadFeederPassive" );
    unset_berserk();
}

init_passive_melee_cone_expl( var_0 )
{

}

set_passive_melee_cone_expl( var_0 )
{
    var_0.onkillrelics["passive_melee_cone_expl"] = 1;
    var_0.skip_weapon_check = 1;
}

unset_passive_melee_cone_expl( var_0 )
{
    var_0.onkillrelics["passive_melee_cone_expl"] = 0;
    var_0.skip_weapon_check = undefined;
}

handlemeleeconeexplode( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( var_3 != "MOD_MELEE" )
        return;

    if ( !issubstr( var_0, "meleervn" ) && !var_1 isalternatemode( var_0 ) )
        return;

    var_6 = var_2 gettagorigin( "j_spineupper" );
    var_7 = var_1 getplayerangles();
    var_8 = anglestoforward( var_7 );
    var_9 = anglestoup( var_7 );
    var_10 = var_6 - var_8 * 128;
    var_11 = 384;
    playfx( level._effect["cone_expl_fx"], var_6 + ( 0, 2, 0 ), var_8, var_9 );
    var_12 = scripts\cp\cp_agent_utils::get_alive_enemies();

    foreach ( var_14 in var_12 )
    {
        if ( isdefined( var_14.flung ) || isdefined( var_14.agent_type ) && ( var_14.agent_type == "zombie_brute" || var_14.agent_type == "zombie_ghost" || var_14.agent_type == "zombie_grey" || var_14.agent_type == "slasher" || var_14.agent_type == "superslasher" ) )
            continue;

        if ( !scripts\engine\math::pointvscone( var_14 gettagorigin( "tag_origin" ), var_10, var_8, var_9, var_11, 128, 12 ) )
            continue;

        if ( var_14 damageconetrace( var_6, var_1 ) <= 0 )
            continue;

        var_15 = int( 1500 * var_1 scripts\cp\cp_weapon::get_weapon_level( var_0 ) );
        wait 0.05;
        var_14 dodamage( var_15, var_6, var_1, var_1, "MOD_EXPLOSIVE", var_0 );
    }
}

init_passive_minimap_damage( var_0 )
{

}

set_passive_minimap_damage( var_0 )
{
    var_0.ondamagerelics["passive_minimap_damage"] = 1;
}

unset_passive_minimap_damage( var_0 )
{
    var_0.ondamagerelics["passive_minimap_damage"] = 0;
}

updatepassiveminimapdamage( var_0, var_1, var_2 )
{
    if ( !isdefined( var_2 ) )
        return;

    var_3 = "outlinefill_depth_orange";

    if ( isdefined( var_2.damaged_by_players ) )
        var_3 = "outlinefill_depth_yellow";

    if ( isdefined( var_2.marked_for_challenge ) )
        var_3 = "outlinefill_depth_white";
    else
        var_3 = "outlinefill_depth_orange";

    level thread set_outline_passive_minimap_damage( var_0, var_2, var_3 );
}

enable_outline_for_players( var_0, var_1, var_2, var_3 )
{
    var_0 hudoutlineenableforclients( var_1, var_2 );
}

set_outline_passive_minimap_damage( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    level endon( "outline_disabled" );

    if ( !isdefined( var_1 ) )
        return;

    if ( !isdefined( var_2 ) )
        var_2 = "outlinefill_depth_orange";

    enable_outline_for_players( var_1, level.players, var_2, "high" );
    wait 10;
    unset_outline_passive_minimap_damage( var_1 );
}

disable_outline_for_players( var_0, var_1 )
{
    var_0 hudoutlinedisableforclients( var_1 );
}

unset_outline_passive_minimap_damage( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    scripts\cp\cp_outline::disable_outline_for_players( var_0, level.players );
}

activate_adrenaline_boost( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_0 endon( "last_stand" );
    var_0 endon( "death" );
    var_0 scripts\cp\utility::adddamagemodifier( "health_boost", 0.2, 0 );
    var_0 notify( "force_regeneration" );
    var_0 playlocalsound( "breathing_heartbeat_alt" );
    wait 5;
    var_0 scripts\cp\utility::removedamagemodifier( "health_boost", 0 );
    var_0 playlocalsound( "breathing_limp" );
}

adr_boost( var_0 )
{
    var_0 notify( "updatepassiveminimapdamage" );
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_0 endon( "last_stand" );
    var_0 endon( "death" );

    for (;;)
    {
        if ( randomint( 100 ) > 30 )
        {
            thread run_adrenaline_visuals( var_0, 5 );
            thread activate_adrenaline_boost( var_0 );
        }

        wait( randomfloatrange( 5.0, 15.0 ) );
    }
}

remove_adrenaline_visuals( var_0 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "last_stand" );
    var_0 endon( "death" );
    var_0 visionsetnakedforplayer( "", 0.5 );
}

run_adrenaline_visuals( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 endon( "last_stand" );
    var_0 endon( "death" );
    var_0 endon( "remove_adrenaline_visuals" );
    var_0 visionsetnakedforplayer( "missilecam", scripts\engine\utility::ter_op( 1, 0.1, 0.0 ) );
    var_0 scripts\engine\utility::_id_12E53( var_1, "last_stand" );
    var_0 thread remove_adrenaline_visuals( var_0 );
}

init_passive_cold_damage( var_0 )
{

}

set_passive_cold_damage( var_0 )
{
    var_0.ondamagerelics["passive_cold_damage"] = 1;
    var_0.cold_weapon = var_0 getcurrentweapon();
}

unset_passive_cold_damage( var_0 )
{
    var_0.ondamagerelics["passive_cold_damage"] = 0;
    var_0.cold_weapon = undefined;
}

updatepassivecolddamage( var_0, var_1, var_2 )
{
    var_3 = isdefined( var_2.agent_type ) && var_2.agent_type == "zombie_brute";
    var_4 = isdefined( var_2.agent_type ) && var_2.agent_type == "zombie_grey";
    var_5 = istrue( var_2.is_suicide_bomber );

    if ( var_3 || var_4 || var_5 )
        return;

    if ( isdefined( var_0.cold_weapon ) )
    {
        if ( scripts\cp\utility::getrawbaseweaponname( var_0.cold_weapon ) == scripts\cp\utility::getrawbaseweaponname( var_1 ) )
        {
            var_2 thread unsetslowmovementaftertime( var_2, var_2.movemode );
            var_2.movemode = "slow_walk";
            var_2 scripts\asm\asm_bb::bb_requestmovetype( "slow_walk" );
        }
    }
}

unsetslowmovementaftertime( var_0, var_1 )
{
    level endon( "game_ended" );
    var_0 endon( "death" );
    wait 10;

    if ( isdefined( var_1 ) )
    {
        var_0.movemode = var_1;
        var_0 scripts\asm\asm_bb::bb_requestmovetype( var_1 );
    }
}

init_passive_scorestreak_damage( var_0 )
{

}

set_passive_scorestreak_damage( var_0 )
{
    var_0.special_zombie_damage = 1.1;
}

unset_passive_scorestreak_damage( var_0 )
{
    var_0.special_zombie_damage = undefined;
}

init_passive_scope_radar( var_0 )
{
    var_0.activate_radar = 0;
    var_0 notifyonplayercommand( "scope_radar_ads_in", "+speed_throw" );
    var_0 notifyonplayercommand( "scope_radar_ads_out", "-speed_throw" );
}

set_passive_scope_radar( var_0 )
{
    var_0 thread updatescoperadar( var_0 );
}

unset_passive_scope_radar( var_0 )
{
    var_0 notify( "unsetScopeRadar" );
    var_0 thread cleanup_outlines( var_0 );
}

updatescoperadar( var_0 )
{
    var_0 notify( "updateScopeRadar" );
    var_0 endon( "updateScopeRadar" );
    level endon( "game_ended" );
    var_0 endon( "death" );
    var_0 endon( "disconnect" );
    var_0 endon( "unsetScopeRadar" );
    var_1 = 2.4;
    var_2 = 1750;

    for (;;)
    {
        if ( !var_0 adsbuttonpressed() )
            var_3 = var_0 scripts\engine\utility::_id_12E51( "scope_radar_ads_in", "scope_radar_ads_out", "last_stand", "death", "weapon_change" );
        else
            var_3 = "scope_radar_ads_in";

        if ( var_3 == "scope_radar_ads_in" )
            runscoperadarinloop( var_0, var_1, var_2 );

        var_0 thread remove_visuals( var_0 );
    }
}

runscoperadarinloop( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    var_0 notify( "runScopeRadarInLoop" );
    var_0 endon( "runScopeRadarInLoop" );
    var_0 endon( "scope_radar_ads_out" );
    var_0 endon( "last_stand" );
    var_0 endon( "death" );
    var_0 endon( "disconnect" );
    var_3 = 0.75;

    while ( var_0 adsbuttonpressed() )
    {
        if ( var_0 playerads() >= var_3 )
        {
            var_0 playlocalsound( "uav_ping" );
            var_0 thread scoperadar_executeping( var_0, var_1, var_2 );
            var_0 scoperadar_executevisuals( var_0, var_1 );
        }

        waitframe();
    }
}

scoperadar_executeping( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    var_0 endon( "death" );
    var_0 endon( "scope_radar_ads_out" );
    var_3 = 0;
    var_4 = scripts\cp\cp_agent_utils::getaliveagentsofteam( "axis" );
    var_5 = scripts\engine\utility::get_array_of_closest( var_0.origin, var_4, undefined, 24, var_2 );
    var_0.closestenemies = var_5;
    var_6 = 0;

    foreach ( var_8 in var_0.closestenemies )
    {
        var_8.is_outlined_from_scoperadar = 0;

        if ( scripts\engine\utility::within_fov( var_0 geteye(), var_0.angles, var_8.origin, cos( 65 ) ) )
        {
            var_6++;
            var_9 = var_8.origin - var_0.origin;

            if ( 1 && vectordot( anglestoforward( var_0.angles ), var_9 ) < 0 )
                continue;

            var_10 = var_2 * var_2;

            if ( length2dsquared( var_9 ) > var_10 )
                continue;

            var_0 thread outlineplayerbydistance( var_8, var_0, distance2d( var_0.origin, var_8.origin ) / var_2, var_1 );
            var_3 = 1;
        }
    }
}

enable_outline_for_player( var_0, var_1, var_2, var_3 )
{
    var_0 hudoutlineenableforclient( var_1, var_2 );
}

outlineplayerbydistance( var_0, var_1, var_2, var_3 )
{
    level endon( "game_ended" );
    var_1 endon( "scope_radar_ads_out" );
    var_1 endon( "last_stand" );
    var_1 endon( "death" );
    var_1 endon( "disconnect" );
    var_1 endon( "weapon_change" );
    wait( var_3 * var_2 );
    var_4 = 1;
    var_0.is_outlined_from_scoperadar = 1;
    enable_outline_for_player( var_0, var_1, var_4, 1, 1, "high" );
}

watchhighlightfadetime( var_0, var_1, var_2 )
{
    var_0 endon( "disconnect" );
    level endon( "game_ended" );
    var_0 scripts\engine\utility::_id_12E59( var_2 );

    if ( isdefined( var_1 ) )
        disable_outline_for_player( var_1, var_0 );
}

disable_outline_for_player( var_0, var_1 )
{
    var_0 hudoutlinedisableforclient( var_1 );
}

scoperadar_executevisuals( var_0, var_1 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_0 visionsetnakedforplayer( "opticwave_mp", 0.2 );
    var_0.fxent = spawn( "script_model", var_0 gettagorigin( "tag_eye" ) );
    var_0.fxent setmodel( "prop_mp_optic_wave_scr" );
    var_0.fxent.angles = var_0 getplayerangles();
    var_0.fxent setotherent( var_0 );
    var_0.fxent setscriptablepartstate( "effects", "active", 0 );
    var_2 = var_0.fxent.origin + anglestoforward( var_0.fxent.angles ) * 1750;
    var_0.fxent moveto( var_2, var_1 );
    var_0 scripts\engine\utility::_id_12E5D( var_1, "last_stand", "death", "scope_radar_ads_out", "weapon_change", "unsetScopeRadar" );

    if ( isdefined( var_0.closestenemies ) )
    {
        foreach ( var_4 in var_0.closestenemies )
        {
            if ( isdefined( var_4 ) )
            {
                if ( istrue( var_4.is_outlined_from_scoperadar ) )
                {
                    disable_outline_for_player( var_4, var_0 );
                    var_4.is_outlined_from_scoperadar = 0;
                }
            }
        }
    }

    var_0 visionsetnakedforplayer( "", 0.1 );

    if ( isdefined( var_0.fxent ) )
        var_0.fxent delete();
}

remove_visuals( var_0 )
{
    var_1 = scripts\cp\cp_agent_utils::getaliveagentsofteam( "axis" );

    foreach ( var_3 in var_1 )
    {
        if ( isdefined( var_3 ) )
        {
            if ( istrue( var_3.is_outlined_from_scoperadar ) )
            {
                disable_outline_for_player( var_3, var_0 );
                var_3.is_outlined_from_scoperadar = 0;
            }
        }
    }

    if ( isdefined( var_0.fxent ) )
        var_0.fxent delete();
}

cleanup_outlines( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_0 endon( "last_stand" );
    var_0 endon( "death" );
    var_1 = scripts\cp\cp_agent_utils::getaliveagentsofteam( "axis" );

    foreach ( var_3 in var_1 )
    {
        if ( isdefined( var_3 ) )
        {
            if ( istrue( var_3.is_outlined_from_scoperadar ) )
            {
                disable_outline_for_player( var_3, var_0 );
                var_3.is_outlined_from_scoperadar = 0;
            }
        }
    }
}

init_passive_scoutping( var_0 )
{

}

set_passive_scoutping( var_0 )
{
    var_0 thread updatescoutping( var_0 );
}

unset_passive_scoutping( var_0 )
{
    var_0 notify( "unsetScoutPing" );
}

updatescoutping( var_0 )
{
    var_0 endon( "death" );
    var_0 endon( "disconnect" );
    var_0 endon( "unsetScoutPing" );
    var_1 = 1000;
    var_2 = 0.1;

    for (;;)
    {
        var_3 = scripts\cp\cp_agent_utils::getaliveagentsofteam( "axis" );
        var_4 = var_1;
        var_5 = var_2;
        var_4 = int( var_4 );
        var_5 = float( var_5 );

        if ( isdefined( var_3 ) )
            var_6 = scripts\engine\utility::get_array_of_closest( var_0.origin, var_3, undefined, 24, var_4 );
        else
        {
            waitframe();
            continue;
        }

        if ( var_6.size >= 1 )
        {
            foreach ( var_8 in var_6 )
            {
                scripts\cp\cp_outline::enable_outline_for_players( var_8, level.players, "outline_nodepth_red", "low" );
                wait( var_5 );
            }

            continue;
        }

        waitframe();
    }
}

updateonkillrelics( var_0, var_1, var_2, var_3, var_4 )
{
    if ( !isdefined( var_1.onkillrelics ) )
        return;

    var_5 = gettime();
    var_6 = getarraykeys( var_1.onkillrelics );

    if ( !isdefined( var_6 ) )
        return;

    foreach ( var_8 in var_6 )
    {
        if ( istrue( var_1.onkillrelics[var_8] ) )
            thread [[ level.onkillrelics[var_8] ]]( var_0, var_1, var_2, var_3, var_4, var_5 );
    }
}

updatepersistentrelics( var_0 )
{
    if ( !isdefined( var_0.persistentrelics ) )
        return;

    var_1 = gettime();
    var_2 = getarraykeys( var_0.persistentrelics );

    if ( !isdefined( var_2 ) )
        return;

    foreach ( var_4 in var_2 )
    {
        if ( istrue( var_0.persistentrelics[var_4] ) )
            var_0 thread [[ level.persistentrelics[var_4] ]]( var_0 );
    }
}

updateondamagerelics( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = undefined;

    if ( isplayer( var_2 ) )
        var_6 = var_2;
    else if ( isplayer( var_0 ) )
        var_6 = var_0;

    if ( !isdefined( var_6 ) )
        return;

    if ( !isdefined( var_6.ondamagerelics ) )
        return;

    var_5 = gettime();
    var_7 = getarraykeys( var_6.ondamagerelics );

    if ( !isdefined( var_7 ) )
        return;

    foreach ( var_9 in var_7 )
    {
        if ( istrue( var_6.ondamagerelics[var_9] ) )
            thread [[ level.ondamagerelics[var_9] ]]( var_0, var_1, var_2, var_3, var_4, var_5 );
    }
}

_id_12B12( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = undefined;

    if ( isplayer( var_2 ) )
        var_6 = var_2;
    else if ( isplayer( var_0 ) )
        var_6 = var_0;
    else if ( isdefined( var_0.owner ) && isplayer( var_0.owner ) )
        var_6 = var_0.owner;

    if ( !isdefined( var_6 ) )
        return;

    if ( !isdefined( var_6.ondamagerelics ) )
        return;

    var_5 = gettime();
    var_7 = getarraykeys( var_6.ondamagerelics );

    if ( !isdefined( var_7 ) )
        return;

    foreach ( var_9 in var_7 )
    {
        if ( isdefined( var_6.stop_wave_section ) )
        {
            if ( istrue( var_6.stop_wave_section[var_9] ) )
            {
                if ( isdefined( level.stop_wave_section[var_9] ) )
                    thread [[ level.stop_wave_section[var_9] ]]( var_0, var_1, var_2, var_3, var_4, var_5 );
            }
        }
    }
}

_id_12AF2( var_0, var_1 )
{
    var_2 = undefined;

    if ( !isplayer( var_1.eattacker ) )
    {
        if ( !isdefined( var_1.eattacker.owner ) )
            return;
        else
            var_2 = var_1.eattacker.owner;
    }
    else
        var_2 = var_1.eattacker;

    if ( !isdefined( var_2 ) || !isdefined( var_2.stoppingpower_clearhcrdata ) )
        return;

    var_3 = gettime();
    var_4 = getarraykeys( var_2.stoppingpower_clearhcrdata );

    if ( !isdefined( var_4 ) )
        return;

    foreach ( var_6 in var_4 )
    {
        if ( istrue( var_2.stoppingpower_clearhcrdata[var_6] ) )
            thread [[ level.stoppingpower_clearhcrdata[var_6] ]]( var_0, var_1 );
    }
}

init()
{
    if ( scripts\cp\utility::preventleave() || scripts\cp\utility::prematchintiallandingcomplete() )
        return;

    sceneangles();
    register_relics();
    relics_monitor();
    level thread player_connect_monitor();
}

sceneangles()
{
    level._effect["headshot_explode"] = loadfx( "vfx/iw8_cp/misc/vfx_cp_head_explode.vfx" );
    level._effect["headshot_explode_jugg"] = loadfx( "vfx/iw8_cp/misc/vfx_cp_head_explode_jug.vfx" );
    level._effect["healthpack_pickup"] = loadfx( "vfx/iw8_cp/vfx_healthpack_vanish.vfx" );
    level._effect["healthpack_spawn"] = loadfx( "vfx/iw8_cp/vfx_healthpack.vfx" );
    level._effect["stump_landing"] = loadfx( "vfx/iw8_mp/killstreak/vfx_carepkg_landing_dust.vfx" );
}

player_connect_monitor()
{
    level endon( "game_ended" );

    for (;;)
    {
        level waittill( "connected", var_0 );
        playergulaggetrespawnpoint( var_0 );
        var_0 thread _id_119CE();
    }
}

playergulaggetrespawnpoint( var_0 )
{
    var_0.onkillrelics = [];
    var_0.persistentrelics = [];
    var_0.ondamagerelics = [];
    var_0.relics = [];
}

relics_monitor()
{
    level endon( "game_ended" );
    scavengerlootcacheused();
}

_id_119CE()
{
    var_0 = self;
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_0 notify( "relics_monitor" );
    var_0 endon( "relics_monitor" );
    var_0.activated_relics = [];
    scripts\engine\utility::flag_wait( "create_script_initialized" );
    var_0 init_and_set_relics( var_0 );

    for (;;)
    {
        var_0 waittill( "relic_update", var_1, var_2 );

        if ( isdefined( var_2 ) )
        {
            if ( !istrue( var_2 ) )
            {
                unset_relics( var_0, var_1 );
                continue;
            }

            set_relics( var_0, var_1 );
        }
    }
}

scavengerlootcacheused()
{
    level.set_relics = [];
    var_0 = getdvar( "scr_set_relics", "" );
    var_1 = strtok( var_0, "," );

    foreach ( var_3 in var_1 )
    {
        if ( isdefined( var_3 ) && var_3 != "" )
        {
            level.set_relics[var_3] = 1;
            level thread _id_11BC4( var_3 );
        }
    }
}

_id_11BC4( var_0 )
{
    if ( isdefined( level.monitorplayerimpactend[var_0] ) && isbuiltinfunction( level.monitorplayerimpactend[var_0] ) )
        level thread [[ level.monitorplayerimpactend[var_0] ]]();
}

load_relics_via_dvar()
{
    level endon( "game_ended" );
    level.set_relics = [];

    for (;;)
    {
        var_0 = getdvar( "scr_set_relics", "" );
        var_1 = strtok( var_0, "," );

        foreach ( var_3 in var_1 )
        {
            if ( istrue( level.set_relics[var_3] ) )
            {
                waitframe();
                continue;
            }

            if ( isdefined( var_3 ) && var_3 != "" )
            {
                level.set_relics[var_3] = 1;

                foreach ( var_5 in level.players )
                    var_5 notify( "relic_update", var_3, 1 );
            }
        }

        waitframe();
    }
}

_id_11E5C( var_0 )
{
    var_1 = self;

    if ( !isdefined( var_1._id_11990 ) )
        var_1._id_11990 = 1;
    else
        var_1._id_11990 = var_1._id_11990 + 1;

    var_2 = tablelookup( "cp/cp_relic_table.csv", 1, var_0, 0 );
    var_3 = int( var_2 );
    var_4 = "cp_relic_1";

    switch ( var_1._id_11990 )
    {
        case 1:
            var_4 = "cp_relic_1";
            break;
        case 2:
            var_4 = "cp_relic_2";
            break;
        case 3:
            var_4 = "cp_relic_3";
            break;
        case 4:
            var_4 = "cp_relic_4";
            break;
    }

    var_1 setclientomnvar( var_4, var_3 );
}

unload_relics_via_dvar()
{
    level endon( "game_ended" );

    for (;;)
    {
        var_0 = getdvar( "scr_unset_relics", "" );
        var_1 = strtok( var_0, "," );

        foreach ( var_3 in var_1 )
        {
            if ( istrue( level.set_relics[var_3] ) )
            {
                if ( isdefined( var_3 ) && var_3 != "" )
                {
                    foreach ( var_5 in level.players )
                        var_5 notify( "relic_update", var_3, 0 );

                    level.set_relics[var_3] = undefined;
                }
            }
        }

        waitframe();
    }
}

debug_set_relic( var_0, var_1 )
{
    if ( isdefined( var_1 ) && isdefined( level.cp_relics[var_1] ) )
    {
        var_0.relics[var_1] = level.cp_relics[var_1];
        set_relics( var_0, var_1 );
    }
}

debug_unset_relic( var_0, var_1 )
{
    if ( isdefined( var_1 ) && isdefined( level.cp_relics[var_1] ) )
    {
        var_0.relics[var_1] = level.cp_relics[var_1];
        unset_relics( var_0, var_1 );
    }
}

init_and_set_relics( var_0 )
{
    foreach ( var_4, var_2 in level.set_relics )
    {
        var_3 = level.cp_relics[var_4];
        var_4 = var_3.name;
        set_relics( var_0, var_4 );
    }
}

unset_relics( var_0, var_1 )
{
    var_2 = level.cp_relics[var_1];

    if ( !isdefined( var_2 ) )
        return;

    if ( isdefined( var_2 ) )
    {
        if ( isdefined( var_2 ) && isdefined( var_2.unset_func ) )
            [[ var_2.unset_func ]]( var_0 );

        var_0.activated_relics = scripts\engine\utility::array_remove( var_0.activated_relics, var_2.name );
    }
}

set_relics( var_0, var_1 )
{
    var_2 = level.cp_relics[var_1];

    if ( !isdefined( var_2 ) )
        return;

    if ( isdefined( var_2 ) )
    {
        if ( isdefined( var_2 ) && isdefined( var_2.init_func ) )
            [[ var_2.init_func ]]( var_0 );
    }

    if ( isdefined( var_2 ) && isdefined( var_2.set_func ) )
        [[ var_2.set_func ]]( var_0 );

    if ( isdefined( level.updatepersistentrelicsfunc ) )
        level thread [[ level.updatepersistentrelicsfunc ]]( var_0 );

    var_0.activated_relics = scripts\engine\utility::array_add( var_0.activated_relics, var_2.name );
    var_0 _id_11E5C( var_2.name );
}

register_relic( var_0, var_1, var_2, var_3 )
{
    var_4 = spawnstruct();
    var_4.init_func = var_1;
    var_4.set_func = var_2;
    var_4.unset_func = var_3;
    var_4.name = var_0;
    level.cp_relics[var_0] = var_4;
}

parserelicstable()
{
    if ( !isdefined( level.lootpassivesstructs ) )
        level.lootpassivesstructs = [];

    var_0 = 0;

    for (;;)
    {
        var_1 = tablelookupbyrow( "cp/zombies/loot_Weapons_Passivetable.csv", var_0, 0 );

        if ( var_1 == "" )
            break;

        var_2 = tablelookupbyrow( "cp/zombies/loot_Weapons_Passivetable.csv", var_0, 1 );
        var_3 = tablelookupbyrow( "cp/zombies/loot_Weapons_Passivetable.csv", var_0, 2 );
        var_4 = tablelookupbyrow( "cp/zombies/loot_Weapons_Passivetable.csv", var_0, 12 );
        var_5 = tablelookupbyrow( "cp/zombies/loot_Weapons_Passivetable.csv", var_0, 13 );
        var_6 = tablelookupbyrow( "cp/zombies/loot_Weapons_Passivetable.csv", var_0, 15 );
        var_7 = tablelookupbyrow( "cp/zombies/loot_Weapons_Passivetable.csv", var_0, 23 );
        var_8 = tablelookupbyrow( "cp/zombies/loot_Weapons_Passivetable.csv", var_0, 24 );
        var_9 = tablelookupbyrow( "cp/zombies/loot_Weapons_Passivetable.csv", var_0, 25 );
        var_10 = spawnstruct();
        var_10.name = var_2;
        var_10.passivestringref = var_3;
        var_10.passiveindex = int( var_1 );
        var_10.weapontype = scripts\engine\utility::ter_op( tablelookupbyrow( "cp/zombies/loot_Weapons_Passivetable.csv", var_0, 8 ) == "", 0, 1 );
        var_10.killstreaktype = scripts\engine\utility::ter_op( tablelookupbyrow( "cp/zombies/loot_Weapons_Passivetable.csv", var_0, 9 ) == "", 0, 1 );
        var_10.lethaltype = scripts\engine\utility::ter_op( tablelookupbyrow( "cp/zombies/loot_Weapons_Passivetable.csv", var_0, 10 ) == "", 0, 1 );
        var_10.tacticaltype = scripts\engine\utility::ter_op( tablelookupbyrow( "cp/zombies/loot_Weapons_Passivetable.csv", var_0, 11 ) == "", 0, 1 );

        if ( var_4 != "" )
            var_10.attachmentref = var_4;

        if ( getdvar( "MOLPOSLOMO" ) == "zombie" || getdvar( "MOLPOSLOMO" ) == "cp_strike" )
        {
            var_11 = tablelookupbyrow( "cp/zombies/loot_Weapons_Passivetable.csv", var_0, 22 );

            if ( var_11 != "" )
                var_10.attachmentref = var_11;
        }

        if ( var_5 != "" )
            var_10.perkref = var_5;

        if ( var_6 != "" )
            var_10.messageref = var_6;

        if ( isdefined( var_7 ) )
            var_10.prdprobability = int( var_7 );

        if ( isdefined( var_8 ) )
            var_10.prdconstant = float( var_8 );

        if ( isdefined( var_9 ) )
            var_10.maxrolls = int( var_9 );

        if ( !isdefined( level.lootpassivesstructs[var_2] ) )
            level.lootpassivesstructs[var_2] = var_10;

        var_0++;
    }
}

updaterecentkills( var_0, var_1 )
{
    self endon( "disconnect" );
    level endon( "game_ended" );
    self notify( "updateRecentKills" );
    self endon( "updateRecentKills" );
    self.recentkillcount++;
    var_2 = getweaponbasename( var_1 );

    if ( !isdefined( self.killsperweaponlog[var_2] ) )
        self.killsperweaponlog[var_2] = 1;
    else
        self.killsperweaponlog[var_2]++;

    if ( !isdefined( self.recentkillsperweapon ) )
        self.recentkillsperweapon = [];

    if ( !isdefined( self.recentkillsperweapon[var_2] ) )
        self.recentkillsperweapon[var_2] = 1;
    else
        self.recentkillsperweapon[var_2]++;

    wait 3.5;
    self.recentkillcount = 0;
    self.recentkillsperweapon = undefined;
}

init_relic_collat_dmg( var_0 )
{

}

set_relic_collat_dmg( var_0 )
{
    var_0.ondamagerelics["relic_collat_dmg"] = 1;
    level.explosivedamagemod = 0.4;
    var_0.onkillrelics["relic_collat_dmg"] = 1;
}

unset_relic_collat_dmg( var_0 )
{
    level.explosivedamagemod = undefined;
    var_0.ondamagerelics["relic_collat_dmg"] = 0;
    var_0.onkillrelics["relic_collat_dmg"] = 0;
}

stop_with_front_truck( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isagent( var_2 ) )
        return;

    if ( !scripts\cp\utility::isheadshot( var_1, var_4, var_3, var_0 ) && ( var_3 != "MOD_MELEE" && var_3 != "MOD_IMPACT" ) )
        return;

    var_2.nocorpse = 1;
}

handlereliccollatdamage( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !scripts\cp\utility::isheadshot( var_0, var_4, var_3, var_1 ) && ( var_3 != "MOD_MELEE" && var_3 != "MOD_IMPACT" ) )
        return;

    var_6 = isdefined( var_2.unittype ) && var_2.unittype == "juggernaut";
    var_7 = var_2.origin;

    if ( var_2 tagexists( "j_head" ) )
        var_7 = var_2 gettagorigin( "j_head" );
    else if ( var_2 tagexists( "tag_eye" ) )
        var_7 = var_2 gettagorigin( "tag_eye" );

    var_2.brtruck_cleanupents = 1;

    if ( var_6 )
    {
        radiusdamage( var_2.origin + ( 0, 0, 60 ), 512, 666, 69, undefined, "MOD_RIFLE_BULLET" );
        scripts\mp\trials\mp_trl_create_a_script_race_euphrates::_id_11BEA( "Earthquake", 1.0, 0.6, var_2.origin, 84 );
        playfx( level._effect["headshot_explode_jugg"], var_7 );
        var_2 playsound( "gib_fullbody" );
    }
    else
    {
        radiusdamage( var_2.origin + ( 0, 0, 60 ), 333, 333, 33, undefined, "MOD_RIFLE_BULLET" );
        scripts\mp\trials\mp_trl_create_a_script_race_euphrates::_id_11BEA( "Earthquake", 1.0, 0.6, var_2.origin, 84 );
        playfx( level._effect["headshot_explode"], var_7 );
        var_2 playsound( "gib_fullbody" );
    }

    playrumbleonposition( "grenade_rumble", var_2.origin );
}

init_relic_catch( var_0 )
{
    level.grenade_drop_cooldown = [];
}

set_relic_catch( var_0 )
{
    var_0.onkillrelics["relic_catch"] = 1;
    scripts\cp\cp_agent_damage::register_drop_func( "grenade", ::drop_grenade, ::should_drop_grenade, 0 );
}

unset_relic_catch( var_0 )
{
    var_0.onkillrelics["relic_catch"] = 0;
}

handlereliccatch( var_0, var_1, var_2, var_3, var_4, var_5 )
{

}

drop_grenade( var_0, var_1, var_2 )
{
    var_3 = scripts\engine\utility::drop_to_ground( self.origin + ( 0, 0, 32 ), 90 ) + ( 0, 0, 2 );

    if ( isdefined( var_1 ) )
        var_3 = var_1;

    var_4 = "offhand_wm_grenade_mike67";

    if ( isdefined( level.areplayersnear ) )
        var_4 = level.areplayersnear;

    var_5 = 1;

    if ( isdefined( level.argshave ) )
        var_5 = level.argshave;

    var_6 = 200;

    if ( isdefined( level.armor_nag ) )
        var_6 = level.armor_nag;

    var_7 = &"COOP_GAME_PLAY/PICK_GRENADE";

    if ( isdefined( level.armor_piercing ) )
        var_7 = level.armor_piercing;

    var_8 = spawn( "script_model", var_3 );
    var_8 setmodel( var_4 );
    var_8.headicon = var_8 thread scripts\cp_mp\entityheadicons::setheadicon_singleimage( level.players, "cp_crate_icon_lethalrefill", 7, 0, 128, 128, undefined, 0, 0, undefined, undefined );
    var_8.trigger = spawn( "trigger_rotatable_radius", var_3, 0, 32, 32 );
    var_8 thread scripts\cp\utility::delayentdelete( 30 );
    var_8.trigger thread scripts\cp\utility::delayentdelete( 30 );
    var_8 thread activate_grenade_object();
}

activate_grenade_object()
{
    self endon( "death" );

    for (;;)
    {
        self.trigger waittill( "trigger", var_0 );

        if ( !isplayer( var_0 ) )
            continue;

        if ( scripts\cp\cp_laststand::player_in_laststand( var_0 ) )
            continue;

        if ( scripts\cp\cp_powers::vip_death_player_hits_million( var_0 ) )
        {
            var_0 thread scripts\cp\utility::hint_prompt( "max_grenades", 1, 1 );
            continue;
        }

        if ( !nullweapon( var_0 getcurrentweapon() ) )
            var_0 forceplaygestureviewmodel( "ges_pickup" );

        var_0 playlocalsound( "weap_ammo_pickup" );

        foreach ( var_2 in var_0.powers )
        {
            if ( isdefined( level.armor_target_vo ) )
            {
                var_3 = 0;

                if ( isdefined( var_0.powers[level.armor_target_vo] ) )
                    var_3 = var_0.powers[level.armor_target_vo].charges;

                var_4 = var_0 scripts\cp\cp_loadout::get_num_of_charges_for_power( var_0, "primary" );

                if ( var_3 >= var_4 )
                    var_3 = var_4 - 1;

                var_0 scripts\cp\cp_powers::givepower( level.armor_target_vo, "primary", undefined, undefined, undefined, 0, 0, var_3 + 1 );
            }
            else
                var_0 notify( "pickup_equipment", var_2.weaponuse );

            waitframe();
        }

        if ( isdefined( self.trigger ) )
            self.trigger delete();

        self delete();
    }
}

should_drop_grenade( var_0 )
{
    var_1 = getdvarint( "scr_force_grenade_drop" );

    if ( var_1 )
        return 1;

    if ( !isdefined( level.grenade_drop_cooldown ) )
        return 0;

    if ( isdefined( self.unittype ) && self.unittype == "suicidebomber" )
        return 0;

    if ( !isdefined( var_0.eattacker ) )
        return 0;

    var_2 = 10;
    var_3 = gettime();
    var_4 = var_0.eattacker getentitynumber();

    if ( !isdefined( level.grenade_drop_cooldown[var_4] ) )
    {
        level.grenade_drop_cooldown[var_4] = var_3 + var_2 * 1000;
        return 1;
    }

    if ( var_3 > level.grenade_drop_cooldown[var_4] )
    {
        level.grenade_drop_cooldown[var_4] = var_3 + var_2 * 1000;
        return 1;
    }

    return 0;
}

load_relic_catch_params()
{
    self.script_forcegrenade = 1;
    self.grenadeammo = 255;
    self.fngrenadecooldownelapsedoverride = ::play_get_in_sequence_for_convoy_vehicle;
    self.grenadesafedist = 64;
}

play_get_in_sequence_for_convoy_vehicle( var_0 )
{
    return scripts\engine\utility::cointoss();
}

init_relic_boom( var_0 )
{

}

set_relic_boom( var_0 )
{
    var_0.onkillrelics["relic_boom"] = 1;
}

unset_relic_boom( var_0 )
{
    var_0.onkillrelics["relic_boom"] = 0;
}

handlerelicboom( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = magicgrenademanual( "thermite_mp", var_2.origin, ( 0, 0, 0 ) );
    var_6.owner = var_2;
    var_2 thread scripts\cp\equipment\cp_thermite::thermite_used( var_6 );
}

init_relic_swat( var_0 )
{
    scripts\mp\trials\mp_trl_create_a_script_race_euphrates::zombiepower( "Earthquake", ::earthquake, 5, ::bink_save_hack, 0, 0, 0, 1, 1 );
}

bink_save_hack( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    return 1;
}

set_relic_swat( var_0 )
{
    var_0.ondamagerelics["relic_swat"] = 1;

    if ( !scripts\engine\utility::array_contains( level.modifyplayerdamage_relics, ::relic_swat_modifyplayerdamage ) )
        level.modifyplayerdamage_relics = scripts\engine\utility::array_add( level.modifyplayerdamage_relics, ::relic_swat_modifyplayerdamage );
}

preinfilstreamfunc()
{
    return istrue( level.set_relics["relic_swat"] );
}

pregeneratespawnpoints()
{
    return istrue( level.set_relics["relic_collat_dmg"] );
}

predictandclearintermissionstreaming( var_0 )
{
    if ( isdefined( level.set_relics ) && isdefined( level.set_relics[var_0] ) )
        return istrue( level.set_relics[var_0] );
    else
        return 0;
}

disableonemilannounce()
{
    if ( !isdefined( level._id_11FCD ) )
        level._id_11FCD = [];

    level._id_11FCD = scripts\engine\utility::array_add( level._id_11FCD, ::_id_12BBC );
}

_id_12BBC( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( var_0 ) )
        return 1;

    if ( isdefined( var_0.owner ) )
    {
        if ( !isplayer( var_0.owner ) )
            return 1;
    }

    if ( !isplayer( var_0 ) )
        return 1;

    var_6 = var_2 == "MOD_IMPACT";
    var_7 = var_2 == "MOD_EXPLOSIVE_BULLET" && ( isdefined( var_4 ) && var_4 == "none" ) || var_2 == "MOD_EXPLOSIVE" || var_2 == "MOD_GRENADE_SPLASH" || var_2 == "MOD_PROJECTILE" || var_2 == "MOD_PROJECTILE_SPLASH";
    var_8 = var_2 == "MOD_FIRE";
    var_9 = isdefined( var_0.classname ) && var_0.classname == "script_vehicle" && isdefined( var_0.owner ) && isplayer( var_0.owner );
    var_10 = var_9 && var_2 == "MOD_CRUSH";
    var_11 = isdefined( var_0.classname ) && var_0.classname == "script_vehicle" && !isdefined( var_0.owner );
    var_12 = var_11 && var_2 == "MOD_CRUSH";
    var_13 = var_2 == "MOD_CRUSH";
    var_14 = var_2 == "MOD_EXECUTION";
    var_15 = var_2 == "MOD_MELEE";
    var_16 = var_6 || var_7 || var_14 || var_15 || var_13 || var_9 || var_10 || var_11 || var_12 || postspawn_rescued_allies( var_3 ) || scripts\cp\utility::isheadshot( var_3, var_4, var_2, var_0 );

    if ( var_16 )
        return 1;

    if ( !scripts\cp\pvpe\pvpe::pvpe_enabled() )
    {
        if ( isplayer( var_0 ) && isai( var_5 ) )
        {
            if ( var_16 )
                return 1;
            else
                return 0;
        }
        else
            return 1;
    }
    else if ( var_16 )
        return 1;
    else
        return 0;

    return 0;
}

unset_relic_swat( var_0 )
{
    var_0.ondamagerelics["relic_swat"] = 0;
    level.modifyplayerdamage_relics = scripts\engine\utility::array_remove( level.modifyplayerdamage_relics, ::relic_swat_modifyplayerdamage );
}

relic_swat_modifyplayerdamage( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    if ( _id_12BBC( var_1, var_2, var_3, var_4, var_7, var_0 ) )
        return var_2;
    else
        return 0;
}

postspawn_rescued_allies( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    switch ( var_0.basename )
    {
        case "nuke_mp":
        case "cruise_proj_mp":
            return 1;
        case "fuelstrike_proj_mp":
        case "emp_drone_non_player_direct_mp":
        case "hover_jet_proj_mp":
        case "apache_proj_mp":
        case "bradley_tow_proj_mp":
        case "bradley_tow_proj_ks_mp":
        case "iw8_la_rpapa7_mp":
        case "iw8_la_kgolf_mp":
        case "iw8_la_juliet_mp":
        case "iw8_la_gromeo_mp":
        case "iw8_la_gromeoks_mp":
        case "ac130_105mm_mp":
        case "at_mine_mp":
        case "emp_drone_non_player_mp":
            return 1;
        case "white_phosphorus_proj_mp":
        case "toma_proj_mp":
        case "lighttank_tur_ks_mp":
        case "lighttank_mp":
        case "lighttank_tur_mp":
        case "hoopty_truck_mp":
        case "van_mp":
        case "cargo_truck_mg_mp":
        case "cargo_truck_mp":
        case "med_transport_mp":
        case "hoopty_mp":
        case "pickup_truck_mp":
        case "big_bird_mp":
        case "cop_car_mp":
        case "apc_rus_mp":
        case "large_transport_mp":
        case "atv_mp":
        case "tac_rover_mp":
        case "little_bird_mg_mp":
        case "little_bird_mp":
        case "technical_mp":
        case "ac130_40mm_mp":
            return 1;
        case "artillery_mp":
        case "thermite_bolt_mp":
        case "at_mine_ap_mp":
        case "pac_sentry_turret_mp":
        case "thermite_av_mp":
        case "ac130_25mm_mp":
        case "claymore_mp":
        case "c4_mp_p":
        case "frag_grenade_mp":
        case "semtex_mp":
            return 1;
        default:
            return 0;
    }
}

handlerelicswat( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( isplayer( var_0 ) )
        var_2 notify( "hit_ai", var_0 );
}

playerclearjailtimeouthud( var_0 )
{

}

_id_11E17( var_0 )
{
    var_0.ondamagerelics["relic_damage_from_above"] = 1;
    var_0.gas_triggers_init = 1;
}

_id_12A71( var_0 )
{
    var_0.ondamagerelics["relic_damage_from_above"] = undefined;
    var_0.gas_triggers_init = undefined;
}

init_relic_glasscannon( var_0 )
{

}

set_relic_glasscannon( var_0 )
{
    while ( !isdefined( var_0.gs ) )
        waitframe();

    var_0.og_health_value = var_0.maxhealth;
    var_0.og_health_regen_delay = var_0.gs.healthregendelay;
    var_0.og_health_regen_rate = var_0.gs.healthregenrate;
    var_0.maxhealth = 100;
    var_0.gs.healthregendelay = 1.5;
    var_0.gs.healthregenrate = 50;
}

unset_relic_glasscannon( var_0 )
{
    var_0.maxhealth = var_0.og_health_value;
    var_0.gs.healthregendelay = var_0.og_health_regen_delay;
    var_0.gs.healthregenrate = var_0.og_health_regen_rate;
}

nuke_vault_alarm( var_0, var_1, var_2 )
{

}

playergettotaltime( var_0 )
{

}

_id_11E3A( var_0 )
{
    var_0.persistentrelics["relic_team_proximity"] = 1;
}

_id_12A91( var_0 )
{
    var_0.persistentrelics["relic_team_proximity"] = 0;
}

monitormountdisabled()
{
    level thread _id_119C9( 500 );
}

_id_119C9( var_0 )
{
    level endon( "game_ended" );
    level waittill( "player_spawned_with_loadout" );

    for (;;)
    {
        var_1 = level.players;

        if ( var_1.size <= 1 )
        {
            wait 3;
            continue;
        }

        foreach ( var_3 in var_1 )
        {
            if ( !pre_race( var_3 ) )
            {
                if ( isdefined( var_3.post_loadout_spawn_func ) )
                {
                    if ( isdefined( level.support_box_make_entity_usable ) )
                    {
                        foreach ( var_5 in level.support_box_make_entity_usable )
                            var_3 thread [[ var_5 ]]( var_3 );
                    }
                }

                var_3.post_loadout_spawn_func = undefined;
                continue;
            }

            if ( latespawnsnatchtoc130( var_3 ) > var_0 )
            {
                if ( !istrue( var_3.post_loadout_spawn_func ) )
                {
                    if ( isdefined( level.support_box_update_hint_logic ) )
                    {
                        foreach ( var_5 in level.support_box_update_hint_logic )
                            var_3 thread [[ var_5 ]]( var_3 );
                    }
                }

                var_3.post_loadout_spawn_func = 1;
                continue;
            }

            if ( istrue( var_3.post_loadout_spawn_func ) )
            {
                if ( isdefined( level.support_box_spawn ) )
                {
                    foreach ( var_5 in level.support_box_spawn )
                        var_3 thread [[ var_5 ]]( var_3 );
                }
            }

            var_3.post_loadout_spawn_func = 0;
        }

        waitframe();
    }
}

pre_race( var_0 )
{
    var_1 = !isalive( var_0 ) || istrue( var_0.inlaststand ) || istrue( var_0.bspawningviaac130 ) || istrue( var_0.propwhistletime );
    return !var_1;
}

latespawnsnatchtoc130( var_0 )
{
    var_1 = scripts\cp\utility::getplayersinteam( var_0.team );

    if ( var_1.size <= 1 )
        return 0;

    var_2 = -1;

    foreach ( var_4 in var_1 )
    {
        if ( var_4 == var_0 )
            continue;

        var_5 = distance2d( var_0.origin, var_4.origin );

        if ( var_5 < var_2 || var_2 < 0 )
            var_2 = var_5;
    }

    return var_2;
}

monitorimpactend()
{
    scripts\mp\trials\mp_trl_create_a_script_race_euphrates::zombiepower( "Earthquake", ::earthquake, 5, ::bink_save_hack, 0, 0, 0, 1, 1 );
    level thread _id_1197B( "allies" );
}

playercleanupinfilondisconnect( var_0 )
{

}

_id_1197B( var_0 )
{
    level endon( "game_ended" );
    level notify( "relic_amped_single_thread" );
    level endon( "relic_amped_single_thread" );

    if ( !isdefined( var_0 ) )
        var_0 = "allies";

    for (;;)
    {
        if ( !isdefined( level._id_11976 ) )
        {
            wait 0.2;
            continue;
        }

        if ( !isdefined( level._id_11987 ) || !_id_11978( level._id_11987 ) || numpropsperarea() )
        {
            if ( istrue( numpropsperarea() ) && !istrue( _id_11979() ) )
            {
                _id_11972();
                _id_1197E( 1 );
                wait 3.0;
                _id_1197E( 0 );
                continue;
            }
            else
            {
                level._id_11987 = _id_11980( var_0, 1 );

                if ( !isdefined( level._id_11987 ) )
                    level waittill( "killed_enemy" );
                else
                    waitframe();

                continue;
            }
        }

        if ( isdefined( level.blockingcover ) && level.blockingcover <= 0 )
        {
            var_1 = level._id_11987;

            if ( isdefined( var_1 ) )
            {
                level _id_11975( var_1 );
                _id_1197E( 1 );
                wait 3.0;
                _id_1197E( 0 );
            }
            else
                level waittill( "killed_enemy" );

            continue;
        }

        waitframe();
    }
}

_id_1197C( var_0 )
{
    level endon( "game_ended" );
    level endon( "relic_amped_stop_timer" );
    level endon( "relic_amped_explosion" );
    level notify( "relic_amped_beeps_single_thread" );
    level endon( "relic_amped_beeps_single_thread" );

    if ( !isdefined( var_0 ) )
        var_0 = "allies";

    for (;;)
    {
        if ( !isdefined( level._id_11976 ) || !isdefined( level.blockingcover ) )
        {
            waitframe();
            continue;
        }

        var_1 = 0.5;

        if ( level.blockingcover > 7500.0 )
            var_1 = 0.5;
        else if ( level.blockingcover > 5000.0 )
        {
            _id_11982( "breach_warning_beep_01", var_0 );
            var_1 = 1;
        }
        else
        {
            _id_11982( "breach_warning_beep_02", var_0 );
            var_1 = 0.2;
        }

        if ( isdefined( level._id_11987 ) && level.blockingcover <= -1500 )
            return;

        wait( var_1 );
    }
}

numpropsperarea()
{
    if ( !isdefined( level._id_11987 ) )
        return 1;

    return istrue( level._id_11987.numberaudioalias );
}

numrequireddestinations()
{
    if ( !isdefined( level._id_11987 ) )
        return 1;

    if ( !isdefined( level._id_11987.blockeddoubledoor ) )
    {
        level._id_11987.blockeddoubledoor = gettime();
        return 0;
    }

    return gettime() - level._id_11987.blockeddoubledoor >= 15000;
}

_id_11974( var_0 )
{
    level endon( "game_ended" );
    level notify( "relic_ampeddebug_single_thread" );
    level endon( "relic_ampeddebug_single_thread" );
    level waittill( "player_spawned_with_loadout" );
    wait 3;

    for (;;)
    {
        wait( var_0 );
        _id_1197D();
    }
}

_id_1197D()
{
    level notify( "killed_enemy" );

    if ( !istrue( level._id_1197F ) && !istrue( level._id_11977 ) )
    {
        if ( !isdefined( level._id_11976 ) )
        {
            level._id_11976 = gettime() + 10000;
            var_0 = level._id_11976;
        }
        else
            var_0 = level._id_11976 + 6000;

        var_1 = gettime() + 20000;
        level._id_1197A = gettime();
        level._id_11976 = min( var_0, var_1 );

        if ( isdefined( level._id_11987 ) && var_0 > var_1 )
            level._id_11987.numberaudioalias = 1;
    }
}

_id_11985( var_0, var_1 )
{
    level endon( "game_ended" );
    level endon( "relic_amped_stop_timer" );
    level endon( "relic_amped_explosion" );
    var_0 endon( "disconnect" );
    var_0 endon( "death" );
    level notify( "relic_ampedtimer_single_thread" );
    level endon( "relic_ampedtimer_single_thread" );
    var_2 = gettime();
    var_3 = var_2 + 2000;
    var_4 = 0;
    level._id_11977 = 1;

    if ( isdefined( level.blockedvariantidsmap ) )
        objective_setprogress( level.blockedvariantidsmap, 0 );

    while ( var_3 > gettime() )
    {
        var_5 = max( gettime() - var_2, 0.1 );
        var_4 = var_5 / 2000 / 2;

        if ( isdefined( var_0 ) )
            var_0 setclientomnvar( "ui_relic_meter_progress", var_4 );

        waitframe();
    }

    level._id_11977 = 0;

    if ( istrue( var_1 ) )
        level._id_11976 = gettime() + 10000;

    level thread _id_1197C( "allies" );

    for (;;)
    {
        if ( !isdefined( level._id_11976 ) )
        {
            waitframe();
            continue;
        }

        level.blockingcover = level._id_11976 - gettime();

        if ( level.blockingcover > 0 )
        {
            var_0 setclientomnvar( "ui_relic_meter_progress", level.blockingcover / 20000 );

            if ( isdefined( level.blockedvariantidsmap ) )
                objective_setprogress( level.blockedvariantidsmap, level.blockingcover / 20000 );
        }
        else
        {
            var_0 setclientomnvar( "ui_relic_meter_progress", 0 );
            objective_setprogress( level.blockedvariantidsmap, 0 );
        }

        if ( isdefined( level._id_11987 ) && level.blockingcover <= -1500 )
        {
            if ( _id_11978( level._id_11987 ) )
                level _id_11975( level._id_11987 );

            _id_1197E( 1 );
            wait 3.0;
            _id_1197E( 0 );
            level notify( "relic_amped_stop_timer" );
        }

        waitframe();
    }
}

_id_11982( var_0, var_1 )
{
    if ( !soundexists( var_0 ) )
        return;

    if ( isdefined( level._id_11987 ) )
        level._id_11987 playsound( var_0 );
}

_id_11979()
{
    var_0 = level._id_11987;

    if ( !isdefined( var_0 ) )
        return 1;

    var_1 = scripts\engine\utility::array_remove( scripts\cp\utility::getplayersinteam( var_0.team ), var_0 );

    if ( var_1.size <= 0 )
        return 0;

    foreach ( var_3 in var_1 )
    {
        if ( _id_11978( var_3 ) )
            return 1;
    }

    return 0;
}

_id_11972()
{
    if ( isdefined( level._id_11987 ) )
    {
        level._id_11987.numberaudioalias = 0;
        level._id_11987.blockeddoubledoor = undefined;
        level._id_11987 setclientomnvar( "ui_relic_meter_progress", 0 );
    }

    level._id_11976 = undefined;
    level._id_1197A = undefined;
    level._id_11987 = undefined;

    if ( isdefined( level.blockedvariantidsmap ) )
    {
        objective_addalltomask( level.blockedvariantidsmap );
        objective_hidefromplayersinmask( level.blockedvariantidsmap );
    }
}

_id_11986( var_0 )
{
    for (;;)
    {
        var_1 = undefined;

        if ( level.players.size > 1 )
        {
            var_1 = level.players[1];
            var_1 scripts\engine\utility::ent_flag_wait( "player_spawned_with_loadout" );
        }

        if ( isdefined( var_1 ) )
        {
            var_1.wipeweapon = 1;
            var_1.shouldskipdeathsshield = 1;
            var_1 dodamage( var_1.maxhealth + 100000, var_1.origin, var_1, undefined, "MOD_SUICIDE" );
            var_1 waittill( "revived" );
            wait( var_0 );
            continue;
        }

        wait 1;
    }
}

_id_11980( var_0, var_1 )
{
    var_2 = undefined;

    if ( isdefined( level._id_11987 ) )
    {
        var_2 = level._id_11987;
        _id_11972();
    }

    var_3 = _id_11981( var_0, var_2 );

    if ( getdvarint( "scr_test_amped", 0 ) > 0 && level.players.size > 1 && _id_11978( level.players[0] ) )
        var_3 = level.players[0];

    if ( !isdefined( var_3 ) )
        return;

    level._id_11987 = var_3;
    level._id_11987.blockeddoubledoor = gettime();
    level._id_11987.numberaudioalias = 0;
    _id_11984( var_3 );

    if ( !isdefined( var_1 ) )
        var_1 = 0;

    level.blockingcover = undefined;
    level thread _id_11985( var_3, var_1 );
    return var_3;
}

_id_11981( var_0, var_1 )
{
    var_2 = scripts\cp\utility::getplayersinteam( var_0 );

    foreach ( var_4 in var_2 )
    {
        if ( !_id_11978( var_4 ) )
            var_2 = scripts\engine\utility::array_remove( var_2, var_4 );
    }

    if ( var_2.size <= 0 )
        return undefined;

    if ( isdefined( var_1 ) && scripts\engine\utility::array_contains( var_2, var_1 ) && var_2.size > 1 )
        var_2 = scripts\engine\utility::array_remove( var_2, var_1 );

    return scripts\engine\utility::random( var_2 );
}

_id_11984( var_0 )
{
    if ( !isdefined( level.blockedvariantidsmap ) )
    {
        var_1 = scripts\cp\cp_objectives::requestworldid( "ampedWID" );
        level.blockedvariantidsmap = var_1;
        objective_setplayintro( var_1, 0 );
        objective_setplayoutro( var_1, 0 );
        objective_state( var_1, "current" );
        objective_icon( var_1, "icon_waypoint_timed" );
        objective_setbackground( var_1, 0 );
        objective_setshowoncompass( var_1, 1 );
        objective_setshowprogress( var_1, 1 );
        objective_setprogress( var_1, 0 );
    }

    objective_onentity( level.blockedvariantidsmap, var_0 );
    objective_setzoffset( level.blockedvariantidsmap, 90 );
    objective_addalltomask( level.blockedvariantidsmap );
    objective_showtoplayersinmask( level.blockedvariantidsmap );
}

_id_11978( var_0 )
{
    var_1 = var_0 scripts\engine\utility::ent_flag( "player_spawned_with_loadout" );
    var_2 = !isalive( var_0 ) || istrue( var_0.inlaststand ) || istrue( var_0.respawn_in_progress ) || istrue( var_0.bspawningviaac130 ) || isdefined( var_0.super_invulnerable ) || !istrue( var_1 );
    return !var_2;
}

_id_11973()
{
    level endon( "game_ended" );
    scripts\engine\utility::flag_wait( "player_spawned_with_loadout" );
    var_0 = level.players[0];
    var_0 endon( "death" );
    var_0 waittill( "started_revive" );
    wait 4;
    var_0.wipeweapon = 1;
    var_0.shouldskipdeathsshield = 1;
    var_0 dodamage( var_0.maxhealth + 100000, var_0.origin, var_0, undefined, "MOD_SUICIDE" );
}

_id_11975( var_0 )
{
    level endon( "game_ended" );
    var_1 = var_0.origin;

    if ( var_0 tagexists( "j_head" ) )
        var_1 = var_0 gettagorigin( "j_head" );
    else if ( var_0 tagexists( "tag_eye" ) )
        var_1 = var_0 gettagorigin( "tag_eye" );

    var_2 = 3000;
    var_3 = gettime();

    while ( istrue( var_0.invulnerable ) && gettime() - var_3 <= var_2 )
        waitframe();

    var_4 = var_0 scripts\cp_mp\utility\player_utility::getvehicle();
    var_0.wipeweapon = 1;
    var_0.shouldskipdeathsshield = 1;
    var_0 dodamage( var_0.maxhealth + 100000, var_0.origin, var_0, undefined, "MOD_SUICIDE" );
    radiusdamage( var_0.origin + ( 0, 0, 60 ), 600, var_0.maxhealth, var_0.maxhealth, undefined, "MOD_RIFLE_BULLET" );
    scripts\mp\trials\mp_trl_create_a_script_race_euphrates::_id_11BEA( "Earthquake", 1.0, 0.6, var_0.origin, 84 );
    earthquake( 1.0, 0.6, var_0.origin, 333 );
    playfx( level._effect["headshot_explode"], var_1 );
    var_0 playsound( "gib_fullbody" );

    if ( isdefined( var_4 ) )
        var_4 dodamage( var_4.maxhealth, ( 0, 0, 0 ), undefined, undefined );

    var_0.wipeweapon = 0;
    playrumbleonposition( "grenade_rumble", var_0.origin );
    var_0 setclientomnvar( "ui_relic_meter_progress", 0 );
    var_0.blockeddoubledoor = undefined;
    level notify( "relic_amped_explosion" );
    var_0 thread _id_11983( var_0 );
}

_id_11983( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );

    while ( !isalive( var_0 ) || istrue( var_0.inlaststand ) || istrue( var_0.respawn_in_progress ) )
        wait 1;

    var_0 scripts\engine\utility::_id_12E3F( "revive", "death" );
    var_0.shouldskipdeathsshield = 0;
    var_0.shouldskiplaststand = 0;
}

_id_11E15( var_0 )
{
    var_0.onkillrelics["relic_amped"] = 1;
}

_id_12A6F( var_0 )
{
    var_0.onkillrelics["relic_amped"] = 0;
}

_id_1197E( var_0 )
{
    level._id_1197F = var_0;

    if ( istrue( var_0 ) )
    {
        level notify( "relic_amped_stop_timer" );

        if ( isdefined( level.blockedvariantidsmap ) )
        {
            objective_addalltomask( level.blockedvariantidsmap );
            objective_hidefromplayersinmask( level.blockedvariantidsmap );
        }

        if ( isdefined( level._id_11987 ) )
            level._id_11987 = undefined;

        level._id_11976 = undefined;
        level._id_1197A = undefined;
        level.blockingcover = undefined;
    }
    else
    {

    }
}

nuke_vault_escape( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( var_1 ) || !isai( var_2 ) )
        return;

    if ( !isdefined( level._id_11987 ) )
    {
        _id_11980( var_1.team, 1 );
        _id_1197D();
    }
    else if ( level._id_11987 == var_1 )
        _id_1197D();
}

playergetplunderomnvarbitpackinginfo( var_0 )
{
    var_0 thread _id_119B5( var_0 );
}

_id_119B5( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_0 waittill( "spawned_player" );
    var_0.maxhealth = 1;
    scripts\cp\cp_armor::givearmor( var_0, 100, 1 );
}

_id_11E36( var_0 )
{
    var_0.onkillrelics["relic_shieldsonly"] = 1;
}

_id_12A8E( var_0 )
{
    var_0.onkillrelics["relic_shieldsonly"] = 0;
}

nuke_vault_oil_puddle_watch( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( var_1 ) )
        return;

    if ( scripts\cp\cp_armor::player_have_full_armor( var_1 ) )
        return;

    var_6 = scripts\cp\cp_armor::get_player_armor_amount( var_1 );
    var_7 = int( clamp( var_6 + 50, 50, 100 ) );
    scripts\cp\cp_armor::givearmor( var_1, var_7, 1 );
}

_id_119B8()
{
    level._effect["vfx_squadlink_tunnelvision"] = loadfx( "vfx/iw8_cp/misc/vfx_cp_tunnel_vision.vfx" );
}

monitoringimpact()
{
    level thread _id_119C9( 200 );

    if ( !isdefined( level.support_box_update_hint_logic ) )
        level.support_box_update_hint_logic = [];

    if ( !isdefined( level.support_box_spawn ) )
        level.support_box_spawn = [];

    if ( !isdefined( level.support_box_make_entity_usable ) )
        level.support_box_make_entity_usable = [];

    level.support_box_spawn = scripts\engine\utility::array_add( level.support_box_spawn, ::_id_119BB );
    level.support_box_update_hint_logic = scripts\engine\utility::array_add( level.support_box_update_hint_logic, ::_id_119BC );
    level.support_box_make_entity_usable = scripts\engine\utility::array_add( level.support_box_make_entity_usable, ::_id_119BA );

    if ( !scripts\engine\utility::array_contains( level.modifyplayerdamage_relics, ::_id_119B9 ) )
        level.modifyplayerdamage_relics = scripts\engine\utility::array_add( level.modifyplayerdamage_relics, ::_id_119B9 );
}

nuke_triggermercywin( var_0, var_1, var_2 )
{

}

_id_119BB( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "death" );
    var_0 endon( "last_stand" );
    var_0 endon( "disconnect" );
    var_0._id_119CF = 1;
    var_0 notify( "squadlink_stepped_too_close" );
    var_0 thread scripts\cp\cp_hud_message::tutorialprint( "", 0.2 );
    var_0 thread _id_119B7( var_0, 2, "squadlink_stepped_too_far", 2 );
    var_0 _id_119C0( var_0, 0 );
    var_0 thread _id_119BE( var_0 );
}

_id_119BC( var_0 )
{
    level endon( "game_ended" );
    var_0._id_119CF = 0;
    var_0 notify( "squadlink_stepped_too_far" );
    var_0 _id_119C0( var_0, 1 );
    var_0 thread _id_119BF( var_0 );
    var_0 thread _id_119C1( var_0 );
}

_id_119BA( var_0 )
{
    level endon( "game_ended" );
    var_0 setclientomnvar( "ui_cp_relic_squad_link", 0 );
}

_id_119B7( var_0, var_1, var_2, var_3 )
{
    level endon( "game_ended" );
    var_0 endon( var_2 );
    var_0 endon( "death" );
    var_0 endon( "disconnect" );
    var_0 setclientomnvar( "ui_cp_relic_squad_link", var_3 );
    wait( var_1 );
    var_0 setclientomnvar( "ui_cp_relic_squad_link", 0 );
}

_id_119C1( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_0 endon( "squadlink_stepped_too_close" );
    var_0 endon( "death" );
    var_0 endon( "last_stand" );
    var_0 thread _id_119C2( var_0 );
    var_0 thread _id_119B6( var_0 );
}

_id_119C2( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_0 endon( "squadlink_stepped_too_close" );
    var_0 scripts\engine\utility::_id_12E3F( "death", "last_stand" );
    var_0 _id_119BE( var_0 );
}

_id_119B6( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );
    var_0 endon( "squadlink_stepped_too_close" );
    var_0 visionsetnakedforplayer( "nuke_deathblur", 0 );
    var_0 allowsupersprint( 0 );
    wait 5;
    playfxontagforclients( level._effect["vfx_squadlink_tunnelvision"], var_0, "tag_origin", var_0 );
}

_id_119BE( var_0 )
{
    var_0 visionsetnakedforplayer( "", 0 );
    var_0 allowsupersprint( 1 );
    stopfxontag( level._effect["vfx_squadlink_tunnelvision"], var_0, "tag_origin" );
}

_id_119BF( var_0 )
{
    level endon( "game_ended" );
    var_0 endon( "death" );
    var_0 endon( "disconnect" );
    var_0 endon( "squadlink_stepped_too_close" );

    for (;;)
    {
        var_1 = 3;
        var_0 thread scripts\cp\cp_hud_message::tutorialprint( &"CP_BR_SYRK_OBJECTIVES/RELIC_SQUADLINK_FAR", var_1 - 1 );
        var_0 thread _id_119B7( var_0, var_1 - 1, "squadlink_stepped_too_close", 1 );
        var_0 playlocalsound( "cp_computer_fail" );
        wait( var_1 );
    }
}

playergetspawnpoint( var_0 )
{

}

_id_11E37( var_0 )
{
    var_0.ondamagerelics["relic_squadlink"] = 1;
    var_0.stop_wave_section["relic_squadlink"] = 1;
    var_0 setclientomnvar( "ui_cp_relic_squad_link", 0 );

    if ( !isdefined( var_0._id_12384 ) )
    {
        var_1 = scripts\cp\cp_objectives::requestworldid( var_0.name + "_squadlinkWID" );
        var_0._id_12384 = var_1;
        objective_setplayintro( var_1, 0 );
        objective_setplayoutro( var_1, 0 );
        objective_state( var_1, "current" );
        objective_icon( var_1, "icon_waypoint_objective_general" );
        objective_setbackground( var_1, 1 );
        objective_setshowoncompass( var_1, 1 );
        objective_onentity( var_1, var_0 );
        objective_setzoffset( var_1, 70 );
        objective_setshowdistance( var_1, 1 );
        objective_addalltomask( var_1 );
        objective_hidefromplayersinmask( var_1 );
    }
}

_id_12A8F( var_0 )
{
    var_0.ondamagerelics["relic_squadlink"] = 0;
    var_0.stop_wave_section["relic_squadlink"] = 0;
    var_0 setclientomnvar( "ui_cp_relic_squad_link", 0 );

    if ( isdefined( var_0._id_12384 ) )
    {
        objective_delete( var_0._id_12384 );
        var_0._id_12384 = scripts\cp\cp_objectives::freeworldid( var_0.name + "_squadlinkWID" );
        var_0._id_12384 = undefined;
    }
}

stopdragonsbreath( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    return;
}

_id_119B9( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = 1;

    if ( isdefined( var_1 ) && isplayer( var_1 ) )
    {
        if ( !istrue( var_1.post_loadout_spawn_func ) )
            var_8 = 2;
    }
    else if ( isdefined( var_0 ) && isplayer( var_0 ) )
    {
        if ( !istrue( var_0.post_loadout_spawn_func ) )
            var_8 = 0.5;
    }

    return int( var_2 * var_8 );
}

_id_119BD( var_0 )
{
    var_0 endon( "death" );
    level endon( "game_ended" );

    if ( isdefined( var_0._id_12383 ) )
        return;

    var_0._id_12383 = scripts\cp\cp_outline_utility::outlineenableforall( var_0, "snapshotgrenade_longfade", "killstreak_personal" );
    wait 2;
    scripts\cp\cp_outline_utility::outlinedisable( var_0._id_12383, var_0 );
    var_0._id_12383 = undefined;
}

_id_119C0( var_0, var_1 )
{
    var_2 = scripts\cp\utility::getplayersinteam( var_0.team );
    var_2 = scripts\engine\utility::array_remove( var_2, var_0 );

    if ( var_2.size <= 0 )
        return;

    foreach ( var_4 in var_2 )
    {
        if ( isdefined( var_4._id_12384 ) )
        {
            if ( istrue( var_1 ) )
            {
                objective_removeclientfrommask( var_4._id_12384, var_0 );
                objective_hidefromplayersinmask( var_4._id_12384 );
                continue;
            }

            objective_addclienttomask( var_4._id_12384, var_0 );
            objective_hidefromplayersinmask( var_4._id_12384 );
        }
    }
}

monitorimpactinternal()
{
    scripts\mp\trials\mp_trl_create_a_script_race_euphrates::zombiepower( "Earthquake", ::earthquake, 5, ::bink_save_hack, 0, 0, 0, 1, 1 );
}

playerexecutionsenable( var_0 )
{

}

_id_11E27( var_0 )
{
    var_0.persistentrelics["relic_landlocked"] = 1;
}

_id_12A7F( var_0 )
{
    var_0.persistentrelics["relic_landlocked"] = 0;
}

nuke_timescalefactor( var_0, var_1, var_2 )
{

}

_id_1199D( var_0 )
{
    var_0 endon( "death" );
    var_0 endon( "disconnect" );
    level endon( "game_ended" );
    var_0 endon( "relic_landlocked_returned_safe" );
    var_0 notify( "relic_landlocked_do_explosion" );
    var_0 endon( "relic_landlocked_do_explosion" );
    var_0 thread _id_1199C( var_0 );
    var_0 thread scripts\cp\cp_hud_message::tutorialprint( &"CP_BR_SYRK_OBJECTIVES/RELIC_LANDLOCKED_MSG", 2 );
    wait 2;
    var_1 = var_0.origin;

    if ( var_0 tagexists( "j_head" ) )
        var_1 = var_0 gettagorigin( "j_head" );
    else if ( var_0 tagexists( "tag_eye" ) )
        var_1 = var_0 gettagorigin( "tag_eye" );

    var_0 notify( "relic_landlocked_exploded" );
    radiusdamage( var_0.origin + ( 0, 0, 60 ), 333, 333, 33, undefined, "MOD_RIFLE_BULLET" );
    scripts\mp\trials\mp_trl_create_a_script_race_euphrates::_id_11BEA( "Earthquake", 1.0, 0.6, var_0.origin, 84 );
    playfx( level._effect["headshot_explode"], var_1 );
    var_0 playsound( "gib_fullbody" );
    playrumbleonposition( "grenade_rumble", var_0.origin );
}

_id_1199C( var_0 )
{
    var_0 endon( "death" );
    var_0 endon( "disconnect" );
    level endon( "game_ended" );
    var_0 endon( "relic_landlocked_exploded" );
    var_0 endon( "relic_landlocked_do_explosion" );

    while ( !isdefined( var_0.inhackring ) )
        waitframe();

    var_0 notify( "relic_landlocked_returned_safe" );
}

playerexitlaststand( var_0 )
{

}

_id_11E2A( var_0 )
{
    var_0.ondamagerelics["relic_lfo"] = 1;
    var_0._id_11C30 = [];
    var_0 thread set_ending_pack();
}

_id_12A82( var_0 )
{
    var_0.ondamagerelics["relic_lfo"] = 0;
}

nuke_killplayerwithattacker()
{
    scripts\mp\playeractions::registeractionset( "LFO_1", [ "slide", "sprint", "crouch", "prone", "mantle" ] );
    scripts\mp\playeractions::registeractionset( "LFO_2", [ "slide", "sprint" ] );
    scripts\mp\playeractions::registeractionset( "LFO_3", [ "slide", "sprint" ] );
    scripts\mp\playeractions::registeractionset( "LFO_4", [ "slide", "sprint" ] );
}

calculatepurchasexp( var_0 )
{

}

_id_11DF3( var_0 )
{
    if ( !isdefined( level.isscriptedagentdamage ) )
        level.isscriptedagentdamage = [];

    level.isscriptedagentdamage[level.isscriptedagentdamage.size] = "shotgun";
}

_id_11DF4( var_0 )
{
    if ( !isdefined( level.isscriptedagentdamage ) )
        level.isscriptedagentdamage = [];

    level.isscriptedagentdamage[level.isscriptedagentdamage.size] = "sniper";
}

_id_11DF1( var_0 )
{
    if ( !isdefined( level.isscriptedagentdamage ) )
        level.isscriptedagentdamage = [];

    level.isscriptedagentdamage[level.isscriptedagentdamage.size] = "riotshield";
}

_id_11DF5( var_0 )
{
    if ( !isdefined( level.isscriptedagentdamage ) )
        level.isscriptedagentdamage = [];

    level.isscriptedagentdamage[level.isscriptedagentdamage.size] = "suicidebomber";
}

_id_11DF2( var_0 )
{
    if ( !isdefined( level.isscriptedagentdamage ) )
        level.isscriptedagentdamage = [];

    level.isscriptedagentdamage[level.isscriptedagentdamage.size] = "rpg";
}

_id_12A61( var_0 )
{
    if ( isdefined( level.isscriptedagentdamage ) && scripts\engine\utility::array_contains( level.isscriptedagentdamage, "rpg" ) )
    {
        level.isscriptedagentdamage = scripts\engine\utility::array_remove( level.isscriptedagentdamage, "rpg" );

        if ( level.isscriptedagentdamage.size < 1 )
            _id_12A65();
    }
}

_id_12A62( var_0 )
{
    if ( isdefined( level.isscriptedagentdamage ) && scripts\engine\utility::array_contains( level.isscriptedagentdamage, "shotgun" ) )
    {
        level.isscriptedagentdamage = scripts\engine\utility::array_remove( level.isscriptedagentdamage, "shotgun" );

        if ( level.isscriptedagentdamage.size < 1 )
            _id_12A65();
    }
}

_id_12A63( var_0 )
{
    if ( isdefined( level.isscriptedagentdamage ) && scripts\engine\utility::array_contains( level.isscriptedagentdamage, "sniper" ) )
    {
        level.isscriptedagentdamage = scripts\engine\utility::array_remove( level.isscriptedagentdamage, "sniper" );

        if ( level.isscriptedagentdamage.size < 1 )
            _id_12A65();
    }
}

_id_12A60( var_0 )
{
    if ( isdefined( level.isscriptedagentdamage ) && scripts\engine\utility::array_contains( level.isscriptedagentdamage, "riotshield" ) )
    {
        level.isscriptedagentdamage = scripts\engine\utility::array_remove( level.isscriptedagentdamage, "riotshield" );

        if ( level.isscriptedagentdamage.size < 1 )
            _id_12A65();
    }
}

_id_12A64( var_0 )
{
    if ( isdefined( level.isscriptedagentdamage ) && scripts\engine\utility::array_contains( level.isscriptedagentdamage, "suicidebomber" ) )
    {
        level.isscriptedagentdamage = scripts\engine\utility::array_remove( level.isscriptedagentdamage, "suicidebomber" );

        if ( level.isscriptedagentdamage.size < 1 )
            _id_12A65();
    }
}

_id_12A65( var_0 )
{
    level.isscriptedagentdamage = undefined;
}

_id_11DF0( var_0 )
{
    level.issameteamplayer = 1;
}

_id_12A66( var_0 )
{
    level.issameteamplayer = undefined;
}

_id_11DFF( var_0 )
{
    var_0.persistentrelics["relic_just_keep_moving"] = 1;
    var_0._id_11991 = 0;
}

_id_12A6A( var_0 )
{
    var_0.persistentrelics["relic_just_keep_moving"] = 0;
    var_0._id_11991 = undefined;
}

node_targetname( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );

    for (;;)
    {
        if ( !isdefined( var_0.velo_forward ) )
        {
            wait 0.1;
            continue;
        }

        var_3 = var_0.velo_forward - var_0.origin;
        var_3 = ( var_3[0], var_3[1], 0 );
        var_4 = length( var_3 );

        if ( var_4 > 0 )
            var_0._id_11991 = 0;
        else if ( isdefined( self._id_12D3D ) && self._id_12D3D.size < 3 )
            var_0._id_11991 = 1;

        wait 0.25;
    }
}

set_ending_pack()
{
    self endon( "disconnect" );

    for (;;)
    {
        waitframe();

        if ( scripts\cp\cp_laststand::player_in_laststand( self ) )
            continue;

        var_0 = lbravo_spawner_jammer4( self );

        foreach ( var_2 in self._id_11C30 )
        {
            if ( var_2 == var_0 )
                continue;
        }

        switch ( var_0 )
        {
            case 2:
            case 1:
                if ( scripts\engine\utility::array_contains( self._id_11C30, var_0 ) )
                    break;

                self._id_11C30 = scripts\engine\utility::array_add( self._id_11C30, var_0 );
                scripts\mp\playeractions::allowactionset( "LFO_" + var_0, 0 );
                break;
            case 4:
            case 3:
                foreach ( var_2 in self._id_11C30 )
                {
                    scripts\mp\playeractions::allowactionset( "LFO_" + var_2, 1 );
                    self._id_11C30 = scripts\engine\utility::array_remove( self._id_11C30, var_2 );
                }

                break;
            default:
                break;
        }
    }
}

stopcirclesatgameend( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isplayer( var_2 ) )
        return;

    var_6 = var_2;

    if ( scripts\cp\cp_laststand::player_in_laststand( var_6 ) )
        return;

    switch ( lbravo_spawner_jammer4( var_6 ) )
    {
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        default:
            break;
    }
}

stopchallengetimers( var_0, var_1, var_2, var_3, var_4, var_5 )
{

}

lbravo_spawner_jammer4( var_0 )
{
    var_1 = var_0.health / var_0.maxhealth;

    if ( var_1 <= 0.33 )
        return 1;
    else if ( var_1 <= 0.66 )
        return 2;
    else if ( var_1 <= 1.0 )
        return 3;
    else
        return 4;
}

playerforcespawn( var_0 )
{

}

_id_11E2F( var_0 )
{

}

_id_12A87( var_0 )
{

}

nuke_startexfilcountdown()
{
    level.getsuperrefforsuperextraweapon = 1;
    level.disable_loot_drop = 1;
    wait 10;
    scripts\cp\cp_munitions::_id_119FC();
}

playerfadeobjdelete( var_0 )
{

}

_id_11E2D( var_0 )
{
    var_0.spawnflags_check = 1;
}

_id_12A85( var_0 )
{
    var_0.spawnflags_check = undefined;
}

nodropanim()
{
    level.getsubgametype = 1;
    wait 10;
    scripts\cp\cp_munitions::_id_119FC( [ "brloot_munition_ammo" ] );
}

nuke_shouldnukeendgame()
{
    scripts\cp\cp_modular_spawning::add_global_spawn_function( "axis", ::play_lz_vo );

    if ( !scripts\engine\utility::array_contains( level.modifyplayerdamage_relics, ::_id_119A1 ) )
        level.modifyplayerdamage_relics = scripts\engine\utility::array_add( level.modifyplayerdamage_relics, ::_id_119A1 );
}

_id_119A1( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    wait_to_spawn_r0( var_0, var_1, var_4, var_7, var_3 );

    if ( isdefined( var_3 ) && var_3 == "MOD_MELEE" )
        return int( var_2 * lbravo_spawner_jammer3b() );
    else
        return int( var_2 );
}

wait_to_spawn_r0( var_0, var_1, var_2, var_3, var_4 )
{
    if ( isdefined( var_0 ) && isplayer( var_0 ) )
        return;

    if ( _id_119A4( var_2 ) )
    {
        var_0._id_119A0 = 1;
        return;
    }

    var_5 = scripts\engine\utility::isbulletdamage( var_4 ) || var_4 == "MOD_EXPLOSIVE_BULLET" && var_3 != "none";
    var_6 = var_5 && scripts\cp\utility::isheadshot( var_2, var_3, var_4, var_1 );

    if ( _id_119A5( var_6, var_4 ) )
    {
        if ( _id_1199F( var_0 ) )
        {
            var_0._id_119A0 = 1;
            return;
        }
    }
}

_id_1199F( var_0 )
{
    var_1 = gettime();
    return var_1 >= var_0._id_119A2;
}

_id_119A5( var_0, var_1 )
{
    if ( istrue( var_0 ) )
        return 1;

    if ( isdefined( var_1 ) && var_1 == "MOD_MELEE" )
        return 1;

    return 0;
}

_id_119A4( var_0 )
{
    if ( scripts\cp\cp_agent_damage::is_flashbang( var_0.basename, var_0, undefined ) )
        return 1;

    return 0;
}

play_lz_vo()
{
    var_0 = self.maxhealth;
    var_1 = lbravo_spawner_jammer3b();
    var_2 = var_0 * var_1;
    scripts\mp\mp_agent::set_agent_health( var_2 );
    self._id_119A2 = gettime();
    self.fnshouldplaypainanim = ::_id_119A3;
}

_id_119A3()
{
    if ( istrue( self._id_119A0 ) )
    {
        self._id_119A2 = gettime() + 2000;
        self._id_119A0 = 0;
        return 1;
    }
    else
        return 0;
}

lbravo_spawner_jammer3b()
{
    if ( getdvarint( "relic_mythic_multiplier", 0 ) != 0 )
        return int( getdvarint( "relic_mythic_multiplier", 0 ) );
    else
        return 10;
}

playerexitsafeareamessage( var_0 )
{

}

_id_11E2C( var_0 )
{

}

_id_12A84( var_0 )
{
    if ( scripts\engine\utility::array_contains( level.modifyplayerdamage_relics, ::_id_119A1 ) )
        level.modifyplayerdamage_relics = scripts\engine\utility::array_remove( level.modifyplayerdamage_relics, ::_id_119A1 );
}

nuke_core_tug_of_war()
{
    scripts\cp\cp_modular_spawning::add_global_spawn_function( "axis", ::_id_11DEB );

    if ( !scripts\engine\utility::array_contains( level.modifyplayerdamage_relics, ::_id_11995 ) )
        level.modifyplayerdamage_relics = scripts\engine\utility::array_add( level.modifyplayerdamage_relics, ::_id_11995 );
}

_id_11DEB()
{
    self.isplayerinsiderectangularzone = [];
}

pre_defend_filler_bad_guys( var_0, var_1 )
{
    return scripts\engine\utility::array_contains( var_1.isplayerinsiderectangularzone, var_0 );
}

allowobjectiveuseaftermatchstart( var_0, var_1 )
{
    var_1.isplayerinsiderectangularzone = scripts\engine\utility::array_add( var_1.isplayerinsiderectangularzone, var_0 );
    _id_12AAE( var_1 );

    if ( isplayeronintelchallenge() )
    {
        if ( var_1.isplayerinsiderectangularzone.size == 1 )
            var_1.isplayerusingtablet = scripts\cp\cp_outline_utility::outlineenableforall( var_1, "snapshotgrenade_longfade", "killstreak_personal" );
    }
}

_id_11A04( var_0, var_1 )
{
    var_1.isplayerinsiderectangularzone = scripts\engine\utility::array_remove( var_1.isplayerinsiderectangularzone, var_0 );
    _id_12AAE( var_1 );

    if ( isplayeronintelchallenge() )
    {
        if ( numkilled( var_1 ) )
        {
            if ( isdefined( var_1.isplayerusingtablet ) )
                scripts\cp\cp_outline_utility::outlinedisable( var_1.isplayerusingtablet, var_1 );
        }
    }
}

isplayeronintelchallenge()
{
    if ( getdvarint( "show_focus_fire_outline", 0 ) != 0 )
        return 1;

    return 0;
}

lb_mg_impulse_dmg_factor_mid_high( var_0 )
{
    if ( !isplayeronground( var_0 ) )
        return 1;
    else
    {
        var_1 = last_vampire_sound( var_0 );
        var_2 = lb_mg_dmg_factor_main_rotor( var_0 );
        var_3 = var_1 + var_2;
        return var_3;
    }
}

lb_mg_dmg_factor_main_rotor( var_0 )
{
    var_1 = 0;
    return var_1 * var_0.isplayerinsiderectangularzone.size;
}

last_vampire_sound( var_0 )
{
    switch ( var_0.isplayerinsiderectangularzone.size )
    {
        case 1:
            return 1;
        case 2:
            return 8;
        case 3:
            return 27;
        case 4:
            return 64;
        default:
            return 64;
    }
}

isplayerinorgoingtogulag( var_0, var_1, var_2 )
{
    var_2 endon( "death" );
    var_2 notify( "focus_fire_attacker_" + var_1 );
    var_2 endon( "focus_fire_attacker_" + var_1 );
    scripts\engine\utility::waittill_any_ents_or_timeout_return( 4.5, var_0, "disconnect" );
    _id_11A04( var_1, var_2 );
}

isplayeronground( var_0 )
{
    return isdefined( var_0.isplayerinsiderectangularzone );
}

_id_12AAF( var_0 )
{
    if ( !_id_11FDF() )
        return;

    if ( numkilled( var_0 ) )
        var_0 notify( "delete_focus_fire_icon" );
    else if ( !numbersroomdogtagrevive( var_0 ) )
        server_activate( var_0 );
    else
        objective_icon( var_0.isplayermatched, lb_mg_impulse_dmg_factor_mid_low( var_0 ) );
}

server_activate( var_0 )
{
    var_1 = sequence_progression( var_0 );
    var_2 = var_0 getentitynumber();
    var_3 = scripts\cp\cp_objectives::requestworldid( "enemy_AI_focus_fire_ID_" + var_2, 22 );
    objective_state( var_3, "current" );
    objective_icon( var_3, lb_mg_impulse_dmg_factor_mid_low( var_0 ) );
    objective_setbackground( var_3, 1 );
    objective_addalltomask( var_3 );
    objective_showtoplayersinmask( var_3 );
    objective_setplayintro( var_3, 0 );
    objective_setplayoutro( var_3, 0 );
    objective_setshowdistance( var_3, 0 );
    objective_setshowprogress( var_3, 0 );
    objective_setfadedisabled( var_3, 1 );
    objective_sethot( var_3, 1 );
    objective_setpulsate( var_3, 0 );
    objective_setshowoncompass( var_3, 0 );
    objective_onentity( var_3, var_1 );
    var_0.isplayermatched = var_3;
    var_1 thread isplayerloading( var_1, var_0, var_2, var_3 );
}

isplayerloading( var_0, var_1, var_2, var_3 )
{
    var_0 endon( "death" );
    var_1 scripts\engine\utility::_id_12E3F( "delete_focus_fire_icon", "death" );
    scripts\cp\cp_objectives::freeworldid( "enemy_AI_focus_fire_ID_" + var_2 );
    objective_delete( var_3 );
    var_1.isplayermatched = undefined;
    var_0 delete();
}

sequence_progression( var_0 )
{
    var_1 = ( 0, 0, 15 );
    var_2 = ( 23, 8, 0 );
    var_3 = "j_neck";
    var_4 = var_0 gettagorigin( var_3 );
    var_5 = spawn( "script_model", var_4 + var_1 );
    var_5 setmodel( "tag_origin" );
    var_5 linkto( var_0, var_3, var_2, ( 0, 0, 0 ) );
    return var_5;
}

numbersroomdogtagrevive( var_0 )
{
    return isdefined( var_0.isplayermatched );
}

_id_12AAE( var_0 )
{
    if ( !_id_11FDF() )
        return;

    if ( numkilled( var_0 ) )
    {
        scripts\cp_mp\entityheadicons::setheadicon_deleteicon( var_0.isplayerinsiderectangularzonebasedonent );
        var_0.isplayerinsiderectangularzonebasedonent = undefined;
    }
    else if ( !numbers( var_0 ) )
        sequence_interaction_init( var_0 );
    else
        setheadiconfriendlyimage( var_0.isplayerinsiderectangularzonebasedonent, lb_mg_impulse_dmg_factor_mid_low( var_0 ) );
}

_id_11FDF()
{
    if ( getdvarint( "hide_focus_fire_icon", 0 ) != 0 )
        return 0;

    return 1;
}

numkilled( var_0 )
{
    return var_0.isplayerinsiderectangularzone.size == 0;
}

numbers( var_0 )
{
    return isdefined( var_0.isplayerinsiderectangularzonebasedonent );
}

sequence_interaction_init( var_0 )
{
    var_1 = lb_mg_impulse_dmg_factor_mid_low( var_0 );
    var_0.isplayerinsiderectangularzonebasedonent = var_0 scripts\cp_mp\entityheadicons::setheadicon_singleimage( "allies", var_1, 10, 1, undefined, undefined, undefined, 0, 1 );
}

lb_mg_impulse_dmg_factor_mid_low( var_0 )
{
    switch ( var_0.isplayerinsiderectangularzone.size )
    {
        case 1:
            return "hud_icon_focus_fire_bonus_level_one";
        case 2:
            return "hud_icon_focus_fire_bonus_level_two";
        case 3:
            return "hud_icon_focus_fire_bonus_level_three";
        case 4:
            return "hud_icon_focus_fire_bonus_level_four";
    }
}

stopchallengetimer( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    return;
}

stop_wave( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( isdefined( var_2 ) && isplayer( var_2 ) )
        return;

    if ( isdefined( var_0.owner ) && isplayer( var_0.owner ) )
        var_0 = var_0.owner;

    if ( !( isdefined( var_0 ) && isplayer( var_0 ) ) )
        return;

    var_6 = var_0 getentitynumber();

    if ( !pre_defend_filler_bad_guys( var_6, var_2 ) )
        allowobjectiveuseaftermatchstart( var_6, var_2 );

    var_2 thread isplayerinorgoingtogulag( var_0, var_6, var_2 );
}

_id_11995( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = lb_mg_impulse_dmg_factor_mid_high( var_0 );
    return int( var_2 * var_8 );
}

playerenemypool( var_0 )
{

}

_id_11E20( var_0 )
{
    var_0.ondamagerelics["relic_focus_fire"] = 1;
    var_0.stop_wave_section["relic_focus_fire"] = 1;
}

_id_12A78( var_0 )
{
    var_0.ondamagerelics["relic_focus_fire"] = 0;
    var_0.stop_wave_section["relic_focus_fire"] = 0;

    if ( scripts\engine\utility::array_contains( level.modifyplayerdamage_relics, ::_id_11995 ) )
        level.modifyplayerdamage_relics = scripts\engine\utility::array_remove( level.modifyplayerdamage_relics, ::_id_11995 );
}

playerent( var_0 )
{

}

_id_11E21( var_0 )
{
    var_0.onkillrelics["relic_gas_martyr"] = 1;
}

_id_12A79( var_0 )
{
    var_0.onkillrelics["relic_gas_martyr"] = 0;
}

nuke_vault_key( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    nuke_vault_jugg_internal( var_0, var_1, var_2, var_3, var_4, var_5, ::lb_wood_surf_dmg_scalar );
}

lb_wood_surf_dmg_scalar()
{
    return [ "gas_mp" ];
}

playerexitsafearea( var_0 )
{

}

_id_11E2B( var_0 )
{
    var_0.onkillrelics["relic_martyrdom"] = 1;
}

_id_12A83( var_0 )
{
    var_0.onkillrelics["relic_martyrdom"] = 0;
}

nuke_vault_jugg_shoot_at_scriptables( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    nuke_vault_jugg_internal( var_0, var_1, var_2, var_3, var_4, var_5, ::level_carepackage_drop_defined );
}

nuke_vault_jugg_internal( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = 147456;
    var_8 = "j_spine4";

    if ( isdefined( var_2.unittype ) && var_2.unittype == "suicidebomber" )
        return;

    var_9 = 15;
    var_10 = anglestoforward( var_2.angles );
    var_11 = var_2 gettagorigin( var_8 ) + var_10 * var_9;
    var_12 = [[ var_6 ]]();
    var_13 = var_2;
    var_14 = scripts\engine\utility::random( var_12 );
    var_15 = var_13 launchgrenade( var_14, var_11, var_10 * lbravo_actorthinkpath( var_14 ), lbravo_hover_attack_think( var_14 ) );

    if ( var_14 == "concussion_grenade_mp" )
        var_15.owner = var_2;
    else
    {
        var_15.owner = spawnstruct();
        var_15.owner.team = "axis";
    }

    var_15.team = "axis";

    switch ( var_14 )
    {
        case "frag_grenade_mp":
            level thread guard_spawners( var_15 );
            break;
        case "molotov_mp":
            level thread scripts\cp\powers\coop_molotov::assault3_hangar( var_13, var_15 );
            break;
        case "gas_mp":
            var_13 thread scripts\cp\equipment\cp_gas_grenade::gas_used( var_15 );
            break;
        case "concussion_grenade_mp":
            var_15 thread scripts\cp\cp_weapon::watchconcussiongrenadeexplode();
            break;
    }
}

guard_spawners( var_0 )
{
    var_0 endon( "trigger" );
    var_0 waittill( "explode", var_1 );
    var_2 = scripts\cp\cp_agent_utils::getaliveagentsofteam( "axis" );

    if ( var_2.size > 0 )
    {
        var_3 = scripts\engine\utility::getclosest( var_1, var_2 );
        var_3 radiusdamage( var_1, 256, 140, 70, var_3, "MOD_GRENADE_SPLASH", getcompleteweaponname( "frag_grenade_mp" ) );
    }
    else
        radiusdamage( var_1, 256, 140, 70, undefined, "MOD_GRENADE_SPLASH", getcompleteweaponname( "frag_grenade_mp" ) );
}

level_carepackage_drop_defined()
{
    var_0 = [ "frag_grenade_mp" ];
    var_1 = getdvar( "martyrdom_grenade_types", "" );

    if ( var_1 != "" )
        return laps_data( var_1 );
    else
        return var_0;
}

laps_data( var_0 )
{
    var_1 = strtok( var_0, "," );
    var_2 = [];

    foreach ( var_4 in var_1 )
        var_2 = scripts\engine\utility::array_add( var_2, laser_trap_combat( var_4 ) );

    return var_2;
}

laser_trap_combat( var_0 )
{
    switch ( var_0 )
    {
        case "frag":
            return "frag_grenade_mp";
        case "gas":
            return "gas_mp";
        case "molotov":
            return "molotov_mp";
        case "concussion":
            return "concussion_grenade_mp";
        default:
    }
}

lbravo_actorthinkpath( var_0 )
{
    switch ( var_0 )
    {
        case "frag_grenade_mp":
            return 40;
        case "gas_mp":
            return 400;
        case "molotov_mp":
            return 400;
        case "concussion_grenade_mp":
            return 120;
        default:
            return 100;
    }
}

lbravo_hover_attack_think( var_0 )
{
    switch ( var_0 )
    {
        case "frag_grenade_mp":
            return 1.5;
        case "flash_grenade_mp":
            return 1.0;
        default:
            return 1.5;
    }
}

playerentercombatareamessage( var_0 )
{

}

_id_11E23( var_0 )
{
    var_0.persistentrelics["relic_gun_game"] = 1;
    var_0 thread turn_on_laser_vfx( var_0 );
    var_0 thread turn_on_laser_trap( var_0 );
}

turn_on_laser_trap( var_0 )
{
    var_0 endon( "disconnect" );
    var_0 notify( "player_gun_game_next_weapon_think" );
    var_0 endon( "player_gun_game_next_weapon_think" );
    var_0 endon( "unset_gun_game" );
    var_0 waittill( "player_spawned_with_loadout" );
    var_0.multiplepubliceventsenabled = var_0.primaryweaponobj;

    for (;;)
    {
        var_0 waittill( "gun_game_next_weapon" );
        var_1 = little_bird_mg_cp_initlate( var_0 );
        var_0 scripts\cp_mp\utility\inventory_utility::_giveweapon( var_1, undefined, undefined, 1 );
        var_0 givemaxammo( var_1 );
        var_2 = var_0 scripts\cp_mp\utility\inventory_utility::domonitoredweaponswitch( var_1, 0 );
        var_0 scripts\engine\utility::_id_12E53( 1, "weapon_change" );
        var_0 takeweapon( var_0.multiplepubliceventsenabled );
        var_0.multiplepubliceventsenabled = var_1;
    }
}

nuke_stoptheclock( var_0, var_1 )
{
    var_0 endon( "disconnect" );
    var_0 notify( "handlePersistentGunGame" );
    var_0 endon( "handlePersistentGunGame" );
    var_0 endon( "unset_gun_game" );

    for (;;)
    {
        var_0 waittill( "weapon_fired", var_2 );

        if ( isdefined( var_0.multiplepubliceventsenabled ) && !scripts\cp\cp_laststand::player_in_laststand( var_0 ) )
        {
            var_3 = var_0 getweaponammoclip( var_0.multiplepubliceventsenabled ) + var_0 getweaponammostock( var_0.multiplepubliceventsenabled );

            if ( var_3 == 0 )
                var_0 notify( "gun_game_next_weapon" );

            if ( !var_0 hasweapon( var_0.multiplepubliceventsenabled ) )
                var_0 notify( "gun_game_next_weapon" );
        }
    }
}

turn_on_laser_vfx( var_0 )
{
    var_0 endon( "disconnect" );
    var_0 notify( "player_gun_game_randomize_weapon_list_think" );
    var_0 endon( "player_gun_game_randomize_weapon_list_think" );
    var_0 endon( "unset_gun_game" );

    for (;;)
    {
        var_0 waittill( "luinotifyserver", var_1, var_2 );

        if ( var_1 == "class_select" || var_1 == "class_edit" || var_1 == "class_menu_closed" )
            break;
    }

    for (;;)
    {
        var_0 waittill( "player_spawned_with_loadout" );

        if ( isdefined( var_0.secondaryweaponobj ) )
            var_0 takeweapon( var_0.secondaryweaponobj );

        large_transport_initdamage( var_0 );
    }
}

little_bird_mg_cp_initlate( var_0 )
{
    var_1 = var_0.waypoint_active_vfx[var_0.wavetime];
    var_0.wavetime++;

    if ( var_0.wavetime == var_0.waypoint_active_vfx.size )
        var_0.wavetime = 0;

    return var_1;
}

large_transport_initdamage( var_0 )
{
    var_1 = [];

    for ( var_2 = 0; var_2 < 10; var_2++ )
    {
        if ( isdefined( var_0.gametypekillspermatchmax ) && var_2 == var_0.gametypekillspermatchmax )
            continue;

        var_3 = fix_door_clip( var_0, var_2 );
        var_1[var_1.size] = var_3;
    }

    for ( var_4 = 0; var_4 < 10; var_4++ )
        var_1 = scripts\engine\utility::array_randomize( var_1 );

    if ( isdefined( var_0.gametypekillspermatchmax ) )
    {
        var_3 = fix_door_clip( var_0, var_0.gametypekillspermatchmax );
        var_1[var_1.size] = var_3;
    }

    var_0.wavetime = 0;
    var_0.waypoint_active_vfx = var_1;
}

fix_door_clip( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_3 = var_0 scripts\cp\cp_loadout::loadout_updateclasscustom( var_2, var_1 );
    var_4 = scripts\cp\cp_weapon::buildweapon( var_3.loadoutprimary, var_3.loadoutprimaryattachments, var_3.loadoutprimarycamo, var_3.loadoutprimaryreticle, var_3.loadoutprimaryvariantid, var_3.loadoutprimaryattachmentids, var_3.loadoutprimarycosmeticattachment, var_3.loadoutprimarystickers, istrue( var_3.loadouthasnvg ) );
    var_4 = scripts\cp\cp_loadout::molotov_watch_cleanup_pool( var_0, var_4 );
    return var_4;
}

_id_12A7B( var_0 )
{
    var_0.persistentrelics["relic_gun_game"] = 0;
    var_0 notify( "unset_gun_game" );
}

playerclearspectatekillchainsystem( var_0 )
{

}

_id_11E18( var_0 )
{
    var_0._id_124C6 = 0.0;
}

_id_12A72( var_0 )
{
    var_0._id_124C6 = undefined;
}

notifycapturetoplayers()
{
    level thread _id_123E3();
}

_id_123E3( var_0 )
{
    wait 45;
    level.getvehicleplayercamo = undefined;

    switch ( level.script )
    {
        case "cp_arms_dealer":
            level thread scripts\cp\killstreaks\gunship_cp::incendiary_pickup_watcher( 75, undefined, ( -18750.2, 9332.44, 0 ), 40000, 15000, var_0 );
            break;
        case "cp_smuggler":
            level thread scripts\cp\killstreaks\gunship_cp::incendiary_pickup_watcher( 45, undefined, undefined, 40000, 15000, var_0 );
            break;
        case "cp_landlord_2":
            level thread scripts\cp\killstreaks\gunship_cp::incendiary_pickup_watcher( 45, undefined, ( 3289.02, 45965.8, 0 ), 40000, 15000, var_0 );
            break;
        default:
            level thread scripts\cp\killstreaks\gunship_cp::incendiary_pickup_watcher( 45, undefined, undefined, undefined, undefined, var_0 );
            break;
    }
}

playercinematicfadeout( var_0 )
{

}

_id_11E12( var_0 )
{
    scripts\cp\cp_modular_spawning::add_global_spawn_function( "axis", ::_id_11E13 );

    foreach ( var_2 in level.spawned_enemies )
        var_2 _id_11E13();
}

_id_12A6C( var_0 )
{
    scripts\cp\cp_modular_spawning::remove_global_spawn_function( "axis", ::_id_11E13 );

    foreach ( var_2 in level.spawned_enemies )
        var_2 _id_12A6D();
}

_id_11E13()
{
    thread are_players_in_volume( self );
    self.fnmeleecharge_init = ::are_equal;

    if ( self.meleechargedistvsplayer < 3000 )
    {
        self.are_all_players_in_region = 1;
        self.taccovertriggerblockers = self.meleechargedistvsplayer;
        self.meleechargedistvsplayer = 3000;
    }
}

_id_12A6D()
{
    self.fnmeleecharge_init = undefined;
    self notify( "stop_aggressively_chase_down_target" );

    if ( istrue( self.are_all_players_in_region ) )
    {
        self.meleechargedistvsplayer = self.taccovertriggerblockers;
        self.taccovertriggerblockers = undefined;
        self.are_all_players_in_region = undefined;
    }
}

are_equal( var_0 )
{
    self.melee.bignoretimeout = 1;
    self.melee.bignoretargetflee = 1;
}

are_players_in_volume( var_0 )
{
    var_0 endon( "death" );
    var_0 endon( "stop_aggressively_chase_down_target" );

    for (;;)
    {
        if ( isdefined( var_0.enemy ) && isplayer( var_0.enemy ) )
        {
            var_1 = getclosestpointonnavmesh( var_0.enemy.origin );
            var_0 setgoalpos( var_1 );
        }

        wait 1;
    }
}

playergetzombiespawnlocation( var_0 )
{
    var_0._id_119CA = 1;
    var_0 setcamerathirdperson( 1 );
}

_id_11E3B( var_0 )
{
    var_0._id_119CA = 1;
    var_0 thread _id_11E54();
}

_id_11E54()
{
    self endon( "death" );
    self endon( "disconnect" );
    self waittill( "spawned_player" );
    wait 1;
    self setcamerathirdperson( 1 );
}

_id_12A92( var_0 )
{
    var_0._id_119CA = undefined;
    var_0 setcamerathirdperson( 0 );
}

playerfriendlyto( var_0 )
{
    var_0.getsolospawnstruct = 1;
}

_id_11E31( var_0 )
{
    var_0.getsolospawnstruct = 1;
}

_id_12A89( var_0 )
{
    var_0.getsolospawnstruct = undefined;
}

playergulagautowinwait( var_0 )
{
    var_0 thread _id_12ABB();
}

_id_119CD()
{
    level._id_119CB = 1;
    setomnvar( "ui_showhealthbar", 1 );
}

_id_11E3D( var_0 )
{
    var_0.ondamagerelics["relic_vampire"] = 1;
}

_id_12A94( var_0 )
{
    level._id_119CB = 0;
}

stopimmediately( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isagent( var_2 ) )
        return;

    var_6 = undefined;

    if ( !isplayer( var_0 ) )
    {
        if ( !isdefined( var_0.owner ) )
            return;
        else
            var_6 = var_0.owner;
    }
    else
        var_6 = var_0;

    if ( isdefined( var_6 ) && !istrue( var_6.inlaststand ) )
    {
        if ( var_6.health + 5 > var_6.maxhealth )
            var_6 scripts\cp\cp_damage::set_normalhealth( var_6.maxhealth / var_6.maxhealth );
        else
            var_6 scripts\cp\cp_damage::set_normalhealth( ( var_6.health + 5 ) / var_6.maxhealth );

        if ( !isdefined( var_6.reset_target_group ) )
            var_6.reset_target_group = 0;

        if ( gettime() < var_6.reset_target_group )
            return;

        var_6.reset_target_group = gettime() + 300;
        var_6 thread _id_119CC();
    }
}

_id_119CC()
{
    self endon( "last_stand" );
    self endon( "disconnect" );
    wait 0.25;
    self setclientomnvar( "damage_feedback_icon", "hitadrenaline" );
    self setclientomnvar( "damage_feedback_icon_notify", gettime() );

    if ( !isdefined( self.reset_timescalefactor ) )
        self.reset_timescalefactor = 0;

    if ( gettime() < self.reset_timescalefactor )
        return;

    self playlocalsound( "cp_hacking_success" );
    self.reset_timescalefactor = gettime() + 500;
}

playerentersafeareamessage( var_0 )
{
    var_0 thread _id_12ABB();
}

_id_11998()
{
    level._id_11997 = 1;
    setomnvar( "ui_showhealthbar", 1 );
    level.old_spectator_func = getdvarint( "relic_healthpack_health", 25 );
}

_id_11E25( var_0 )
{
    var_0.onkillrelics["relic_healthpacks"] = 1;
}

_id_12A7D( var_0 )
{
    var_0.onkillrelics["relic_healthpacks"] = 0;
}

_id_11999( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( level.allassassin_give ) )
        level.allassassin_give = [];

    if ( level.allassassin_give.size >= 20 )
    {
        level.allassassin_give[0].trigger.fx delete();
        level.allassassin_give[0].trigger delete();
        level.allassassin_give[0] delete();
        waitframe();
    }

    while ( isdefined( var_2 ) && isdefined( var_2.a ) && istrue( var_2 scripts\engine\utility::doinglongdeath() ) )
        wait 0.1;

    var_6 = getgroundposition( var_2.origin, 4, 10 );
    var_7 = spawn( "trigger_radius", var_6, 0, 72, 72 );
    var_7.fx = spawnfx( level._effect["healthpack_spawn"], var_6 + ( 0, 0, 25 ) );
    triggerfx( var_7.fx );
    var_7 thread _id_1199A();
}

_id_1199A()
{
    self endon( "pickedup" );
    self endon( "death" );
    thread _id_1199B();
    var_0 = gettime() + 20000;

    while ( gettime() < var_0 )
        wait 0.05;

    playsoundatpos( self.origin, "mp_killconfirm_tags_pickup" );
    playfx( level._effect["healthpack_pickup"], self.origin + ( 0, 0, 25 ) );
    self.fx delete();
    self delete();
}

_id_1199B()
{
    self endon( "death" );

    for (;;)
    {
        self waittill( "trigger", var_0 );

        if ( !isplayer( var_0 ) || !var_0 scripts\cp\utility::is_valid_player() || var_0.health == var_0.maxhealth )
            continue;
        else
        {
            self notify( "pickedup" );
            var_0 playlocalsound( "mp_killconfirm_tags_pickup" );
            playfx( level._effect["healthpack_pickup"], self.origin );
            var_1 = var_0 getnormalhealth();

            if ( var_1 + int( level.old_spectator_func / 100 ) )
                var_0 scripts\cp\cp_damage::set_normalhealth( 1 );
            else
                var_0 scripts\cp\cp_damage::set_normalhealth( var_1 + int( level.old_spectator_func / 100 ) );

            self.fx delete();
            self delete();
            return;
        }
    }
}

playercleargulagomnvars( var_0 )
{

}

_id_11E16( var_0 )
{
    level._id_1198B = 1;
    var_0.stoppingpower_clearhcrdata["relic_bang_and_boom"] = 1;
    var_0.spawnflags_check = 1;
}

_id_12A70( var_0 )
{
    level._id_1198B = 0;
    var_0.stoppingpower_clearhcrdata["relic_bang_and_boom"] = 0;
    var_0.spawnflags_check = undefined;
}

_id_1198C( var_0, var_1 )
{
    if ( !isdefined( level.allassassin_init ) )
        level.allassassin_init = [];

    if ( level.allassassin_init.size >= 20 )
    {
        level.allassassin_init[0].trigger delete();
        level.allassassin_init[0] delete();
        waitframe();
    }

    var_2 = locindex( var_1 );

    if ( !isdefined( var_2 ) )
        return;

    var_3 = spawn( "trigger_radius", var_0, 0, 72, 72 );

    if ( var_2 == "ammo" )
        var_3.heli_assault3_hangar_death_watcher = "ammo";
    else
        var_3.heli_assault3_hangar_death_watcher = "grenade";

    playsoundatpos( var_0, "mp_killconfirm_tags_drop" );
    var_3 thread _id_1198D();
}

locindex( var_0 )
{
    var_1 = undefined;

    switch ( var_0.smeansofdeath )
    {
        case "MOD_PROJECTILE":
        case "MOD_PISTOL_BULLET":
        case "MOD_RIFLE_BULLET":
            var_1 = "grenade";
            break;
        case "MOD_EXPLOSIVE_BULLET":
        case "MOD_FIRE":
        case "MOD_EXPLOSIVE":
        case "MOD_GRENADE_SPLASH":
        case "MOD_GRENADE":
        case "MOD_PROJECTILE_SPLASH":
        case "MOD_IMPACT":
            var_1 = "ammo";
            break;
    }

    return var_1;
}

_id_1198D()
{
    self endon( "pickedup" );
    self endon( "death" );
    thread _id_1198E();
    var_0 = gettime() + 20000;

    while ( gettime() < var_0 )
        wait 0.05;

    setheadiconimage( self.headicon );
    self delete();
}

_id_1198E()
{
    self endon( "death" );
    self.headicon = setheadicondrawinmap( self.origin + ( 0, 0, 14 ) );

    if ( self.heli_assault3_hangar_death_watcher == "ammo" )
        setheadiconfriendlyimage( self.headicon, "hud_icon_ammo" );
    else
        setheadiconfriendlyimage( self.headicon, "hud_icon_equipment_frag" );

    setheadiconsnaptoedges( self.headicon, 29000 );
    setheadiconmaxdistance( self.headicon, 10 );
    addclienttoheadiconmask( self.headicon, 10 );

    for (;;)
    {
        self waittill( "trigger", var_0 );

        if ( !isplayer( var_0 ) || !var_0 scripts\cp\utility::is_valid_player() )
            continue;
        else
        {
            var_1 = 0;

            if ( self.heli_assault3_hangar_death_watcher == "ammo" )
            {
                var_0 playlocalsound( "weap_ammo_pickup" );
                var_1 = var_0 scripts\cp\cp_agent_damage::module_has_data_for_call_count();
            }
            else
            {
                var_0 playlocalsound( "weap_ammo_pickup" );

                if ( var_0 _id_11FD8() )
                {
                    var_1 = 1;
                    var_0 thread scripts\cp\cp_grenade_crate::healthbox_onusedeployable();
                }
            }

            if ( var_1 )
            {
                self notify( "pickedup" );
                playfx( level._effect["dogtag_pickup"], self.origin );
                setheadiconimage( self.headicon );
                self delete();
                return;
            }
        }
    }
}

_id_11FD8()
{
    var_0 = 1;
    var_1 = 1;
    var_2 = self getweaponslistprimaries();

    foreach ( var_4 in var_2 )
    {
        if ( weapontype( var_4 ) == "projectile" )
        {
            if ( var_4.basename == "iw8_la_mike32_mp" )
            {
                if ( self.gl_proj_override == "thermite" )
                    continue;
            }

            if ( !scripts\cp\cp_grenade_crate::set_vehicle_anims_tromeo( var_4 ) )
                var_1 = 0;
        }

        if ( var_4.inventorytype == "altmode" && isdefined( var_4.underbarrel ) && var_4.underbarrel == "ubshtgn" )
        {
            if ( !scripts\cp\cp_grenade_crate::set_vehicle_anims_tromeo( var_4 ) )
                var_1 = 0;
        }
    }

    foreach ( var_7 in self.powers )
    {
        if ( var_7.charges < var_7.maxcharges )
            var_0 = 0;
    }

    if ( !var_0 || !var_1 )
        return 1;

    return 0;
}

playerforcespectatorclientwait( var_0 )
{

}

_id_11E30( var_0 )
{
    var_0.spawnflags_check = 1;
}

_id_12A88( var_0 )
{
    var_0.spawnflags_check = undefined;
}

playerexitcombatarea( var_0 )
{

}

_id_11E28( var_0 )
{
    if ( !scripts\engine\utility::array_contains( level.modifyplayerdamage_relics, ::_id_1199E ) )
        level.modifyplayerdamage_relics = scripts\engine\utility::array_add( level.modifyplayerdamage_relics, ::_id_1199E );
}

_id_12A80( var_0 )
{
    level.modifyplayerdamage_relics = scripts\engine\utility::array_remove( level.modifyplayerdamage_relics, ::_id_1199E );
}

_id_1199E( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    var_8 = 1;

    if ( isdefined( var_1 ) && isplayer( var_1 ) )
    {
        foreach ( var_10 in level.players )
        {
            if ( isdefined( var_10 ) && scripts\cp\cp_laststand::player_in_laststand( var_10 ) )
                var_8++;
        }
    }

    var_12 = int( var_2 * var_8 );
    return var_12;
}

playerconnectwatcher( var_0 )
{

}

_id_11E1A( var_0 )
{
    var_0.ondamagerelics["relic_doomslayer"] = 1;
    var_0.spawnflags_check = 1;
}

_id_12A74( var_0 )
{
    var_0.ondamagerelics["relic_doomslayer"] = 0;
    var_0.spawnflags_check = 0;
}

stoparmorinsert( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    level endon( "game_ended" );
    var_0 endon( "disconnect" );

    if ( !isdefined( var_0 ) || !isalive( var_0 ) )
        return;

    if ( isdefined( var_3 ) && ( var_3 == "MOD_MELEE" || var_3 == "MOD_EXECUTION" ) )
        var_0.spawnflags_check = 0;
    else
        var_0.spawnflags_check = 1;
}

playergetlaststandpistol( var_0 )
{

}

_id_11E35( var_0 )
{
    var_0.onkillrelics["relic_rocket_kill_ammo"] = 1;
}

_id_12A8D( var_0 )
{
    var_0.onkillrelics["relic_rocket_kill_ammo"] = 0;
    var_0 setclientomnvar( "ui_cp_relic_ammo_reward", 0 );
}

nuke_vault_oilfire_vfx_end_on_death( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    level endon( "game_ended" );
    var_1 endon( "disconnect" );

    if ( !isdefined( var_1 ) || !isalive( var_1 ) )
        return;

    if ( !isdefined( var_0 ) || weapontype( var_0 ) != "projectile" || !var_1 hasweapon( var_0 ) )
        return;

    var_6 = var_1 getammocount( var_0 );
    var_7 = weaponclipsize( var_0 );
    var_1 setweaponammoclip( var_0, var_7 );
    var_1 setweaponammostock( var_0, var_6 - var_7 + 1 );
}

playerentersafearea( var_0 )
{

}

_id_11E24( var_0 )
{
    var_0.onkillrelics["relic_headbullets"] = 1;
}

_id_12A7C( var_0 )
{
    var_0.onkillrelics["relic_headbullets"] = 0;
    var_0 setclientomnvar( "ui_cp_relic_ammo_reward", 0 );
}

nuke_hostmigration_waitlongdurationwithpause( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    level endon( "game_ended" );
    var_1 endon( "disconnect" );

    if ( !isdefined( var_1 ) || !isalive( var_1 ) )
        return;

    if ( !scripts\cp\utility::isheadshot( var_0, var_4, var_3, var_1 ) )
        return;

    if ( !isdefined( var_0 ) || weapontype( var_0 ) != "bullet" || !var_1 hasweapon( var_0 ) )
        return;

    while ( var_1 isreloading() )
        wait 0.05;

    var_6 = weaponclipsize( var_0 );
    var_7 = int( var_6 * 0.25 );
    var_7 = int( clamp( var_7, 1, 10 ) );
    var_1 thread _id_11989( var_0, var_7 );
}

playergetbestrespawnteammate( var_0 )
{

}

_id_11E34( var_0 )
{
    var_0.onkillrelics["relic_punchbullets"] = 1;
    var_0 thread _id_119B4();
}

_id_12A8C( var_0 )
{
    var_0.onkillrelics["relic_punchbullets"] = 0;
    var_0 setclientomnvar( "ui_cp_relic_ammo_reward", 0 );
    var_0 notify( "relic_punchbullets_ender" );
    var_0.wait_for_kills = undefined;
}

_id_119B3()
{
    scripts\engine\utility::flag_wait( "player_spawned_with_loadout" );
    wait 1;
    self takeallweapons();
    self giveweapon( "iw8_fists_mp" );
    self switchtoweapon( "iw8_fists_mp" );
    self disableweaponpickup();
    wait 1;
    self setscriptablepartstate( "equipMtovFXWorld", "neutral", 0 );
    self setscriptablepartstate( "equipMtovFXView", "active", 0 );
    self setscriptablepartstate( "burning", "active" );
    wait 0.5;
    self setscriptablepartstate( "equipMtovFXWorld", "active", 0 );
}

_id_119B4()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "relic_punchbullets_ender" );

    for (;;)
    {
        var_0 = self getcurrentweapon();

        if ( isdefined( var_0 ) && weapontype( var_0 ) == "bullet" )
            self.wait_for_kills = var_0;
        else if ( isdefined( self.wait_for_kills ) && !self hasweapon( self.wait_for_kills ) )
            self.wait_for_kills = undefined;

        self waittill( "weapon_change" );
    }
}

nuke_playmushroombnk( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    level endon( "game_ended" );
    var_1 endon( "death_or_disconnect" );

    if ( !isdefined( var_1 ) || !isalive( var_1 ) )
        return;

    if ( !isdefined( var_3 ) || var_3 != "MOD_MELEE" && var_3 != "MOD_EXECUTION" )
        return;

    if ( var_3 == "MOD_EXECUTION" && isdefined( var_1.wait_for_kills ) )
        var_0 = var_1.wait_for_kills;

    if ( !isdefined( var_0 ) || weapontype( var_0 ) != "bullet" || !var_1 hasweapon( var_0 ) )
        return;

    while ( var_1 isreloading() )
        wait 0.05;

    var_6 = weaponclipsize( var_0 );
    var_7 = int( var_6 * 0.25 );
    var_7 = int( clamp( var_7, 1, 10 ) );
    var_1 thread _id_11989( var_0, var_7 );
}

_id_11989( var_0, var_1, var_2 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    var_3 = self;
    wait 0.75;

    if ( !isdefined( var_0 ) || weapontype( var_0 ) != "bullet" || !var_3 hasweapon( var_0 ) )
        return;

    if ( !isdefined( var_2 ) )
        var_2 = 1;

    var_4 = predictandclearintermissionstreaming( "relic_oneclip" );
    var_5 = weaponclipsize( var_0 );
    var_6 = var_3 getweaponammoclip( var_0 );

    if ( !istrue( var_4 ) )
    {
        var_5 = var_5 + weaponmaxammo( var_0 );
        var_6 = var_6 + var_3 getweaponammostock( var_0 );
    }

    var_1 = int( min( var_5 - var_6, var_1 ) );

    if ( var_1 == 0 )
        return;

    var_7 = var_3 getcurrentweapon() == var_0 || var_3 isinexecutionattack();

    if ( var_7 )
        var_3 thread _id_1198F( var_1 );

    if ( var_7 && var_2 )
    {
        while ( var_1 > 0 )
        {
            var_8 = var_3 thread _id_1198A( var_0, var_4 );

            if ( istrue( var_8 ) )
                var_3 notify( "ammo_awarded" );
            else
                break;

            wait 0.2;
            var_1--;
        }
    }
    else
    {
        var_9 = weaponclipsize( var_0 );
        var_10 = var_3 getweaponammoclip( var_0 );
        var_11 = var_9 - var_10;

        if ( var_11 >= var_1 )
            var_3 setweaponammoclip( var_0, var_10 + var_1 );
        else
        {
            var_3 setweaponammoclip( var_0, var_9 );

            if ( !istrue( var_4 ) )
            {
                var_12 = weaponmaxammo( var_0 );
                var_13 = var_3 getweaponammostock( var_0 );
                var_1 = var_1 - var_11;
                var_14 = int( min( var_12, var_13 + var_1 ) );
                var_3 setweaponammostock( var_0, var_14 );
            }
        }

        var_3 notify( "ammo_awarded" );
    }
}

_id_1198A( var_0, var_1 )
{
    var_2 = self;

    if ( !isdefined( var_0 ) || weapontype( var_0 ) != "bullet" || !var_2 hasweapon( var_0 ) )
        return;

    var_3 = var_2 getweaponammoclip( var_0 );

    if ( istrue( var_1 ) || var_3 < weaponclipsize( var_0 ) )
    {
        var_2 setweaponammoclip( var_0, var_3 + 1 );
        var_2 playlocalsound( "weap_ammo_pickup" );
        return 1;
    }
    else
    {
        var_4 = var_2 getweaponammostock( var_0 );

        if ( var_4 < weaponmaxammo( var_0 ) )
        {
            var_2 setweaponammostock( var_0, var_4 + 1 );
            var_2 playlocalsound( "weap_ammo_pickup" );
            return 1;
        }
    }

    return 0;
}

_id_1198F( var_0 )
{
    self notify( "relic_punchbullets_reward_hud_display" );
    self endon( "relic_punchbullets_reward_hud_display" );
    self endon( "disconnect" );
    level endon( "game_ended" );
    self setclientomnvar( "ui_cp_relic_ammo_reward", 0 );
    wait 0.25;
    self setclientomnvar( "ui_cp_relic_ammo_reward", var_0 );
    wait 1.75;
    self setclientomnvar( "ui_cp_relic_ammo_reward", 0 );
}

playergetspectatingplayer( var_0 )
{

}

_id_11E38( var_0 )
{
    var_0.onkillrelics["relic_steelballs"] = 1;
    var_0.ondamagerelics["relic_steelballs"] = 1;
    var_0 thread _id_119C3();
    var_0 thread _id_119C6();
    var_0 thread _id_119C7();
    var_0 thread _id_11E39( var_0 );
}

_id_11E39( var_0 )
{
    scripts\engine\utility::flag_wait( "player_spawned_with_loadout" );
    var_1 = var_0.origin;

    while ( var_0.origin == var_1 )
        wait 0.25;

    var_0 scripts\cp\utility::giveperk( "specialty_extendedMelee" );
    var_0 scripts\cp\utility::giveperk( "specialty_hardmelee" );
    wait 0.05;
    var_0.perk_data["melee_scalar"] = 3;
}

_id_12A90( var_0 )
{
    var_0 scripts\cp\perks\cp_perks::removeperk( "specialty_extendedMelee" );
    var_0 scripts\cp\perks\cp_perks::removeperk( "specialty_hardmelee" );
    var_0.onkillrelics["relic_steelballs"] = 0;
    var_0.ondamagerelics["relic_steelballs"] = 0;

    if ( isdefined( var_0._id_120D5 ) )
        var_0._id_120D5 delete();

    var_0 notify( "relic_steelballs_ender" );
}

nuke_removefadeonbnkplay( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( var_1 ) || !isalive( var_1 ) )
        return;

    if ( !isdefined( var_3 ) || var_3 != "MOD_MELEE" )
        return;

    var_1 thread _id_119C5();
    var_1 playsound( "gib_fullbody" );
}

stopdragonsbreathburning( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( var_2 ) )
        return;

    var_2.issmallsplashdamage = undefined;
    var_2.shouldhelmetpop = undefined;

    if ( isdefined( var_2.tac_rover_trail ) && isdefined( var_2.a ) )
        var_2.a.disablelongdeath = var_2.tac_rover_trail;

    if ( !isdefined( var_0 ) || !isalive( var_0 ) )
        return;

    if ( !isdefined( var_3 ) || var_3 != "MOD_MELEE" )
        return;

    var_2.issmallsplashdamage = 1;
    var_2.shouldhelmetpop = 1;

    if ( isdefined( var_2.a ) )
    {
        if ( isdefined( var_2.a.disablelongdeath ) )
            var_2.tac_rover_trail = var_2.a.disablelongdeath;

        var_2.a.disablelongdeath = 1;
    }
}

_id_119C5()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    var_0 = self;
    var_1 = clamp( self.health + 90, 0, self.maxhealth );
    scripts\cp\cp_damage::set_normalhealth( var_1 / self.maxhealth );
}

_id_119C6()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "relic_steelballs_ender" );

    while ( !isdefined( self.model ) || self.model == "" )
        wait 0.05;

    wait 1;
    var_0 = self gettagorigin( "j_ball_le" );
    var_1 = spawn( "trigger_radius", var_0, 0, 32, 48 );
    var_1 enablelinkto();
    var_1 linkto( self, "j_ball_le", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    self._id_120D5 = var_1;
    var_1 endon( "death" );

    for (;;)
    {
        self waittill( "sprint_slide_begin" );
        wait 0.3;

        while ( self issprintsliding() )
        {
            self._id_120D5 waittill( "trigger", var_2 );
            earthquake( 0.2, 0.25, self.origin, 100 );
            self playrumbleonentity( "slide_loop" );

            if ( isdefined( var_2 ) && !isplayer( var_2 ) && ( isai( var_2 ) || isagent( var_2 ) ) && self issprintsliding() )
            {
                _id_119C4( var_2, self, 32, 285 );
                physicsexplosionsphere( self.origin, 68, 48, 2.5 );
                self playrumbleonentity( "artillery_rumble" );
                playrumbleonposition( "slide_collision", self.origin );
                earthquake( 0.5, 0.5, self.origin, 100 );

                while ( self issprintsliding() )
                {
                    earthquake( 0.2, 0.25, self.origin, 100 );
                    self playrumbleonentity( "slide_loop" );
                    wait 0.05;
                }
            }
        }
    }
}

_id_119C4( var_0, var_1, var_2, var_3 )
{
    var_0.init_trap_room_traps = 1;
    var_0.shouldhelmetpop = 1;
    var_4 = var_0.health;
    radiusdamage( var_0.origin + ( 0, 0, 8 ), var_2, var_3, var_3 - 1, var_1, "MOD_MELEE" );
    var_1.lasthitmarkertime = undefined;
    var_1 scripts\cp\cp_damagefeedback::updatedamagefeedback( "hitcritical" );
}

_id_119C3()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "relic_steelballs_ender" );

    for (;;)
    {
        self waittill( "melee_swipe_start" );
        var_0 = 250;
        var_1 = anglestoforward( self getplayerangles( 1 ) );
        var_2 = scripts\cp\cp_agent_utils::getaliveagentsofteam( "axis" );
        var_3 = scripts\engine\utility::get_array_of_closest( self.origin, var_2, undefined, undefined, 128 );

        if ( isdefined( var_3 ) && var_3.size > 0 )
        {
            var_4 = var_3[0];
            var_5 = var_4 geteye() - ( 0, 0, 12 );
            var_6 = self worldpointinreticle_circle( var_5, 70, 300 );
            var_7 = sighttracepassed( var_4 geteye(), self geteye(), 0, var_4 );

            if ( var_6 && var_7 )
            {
                var_1 = scripts\engine\utility::flatten_vector( var_4.origin - self.origin );
                var_0 = 350;
            }
            else
            {

            }
        }

        self knockback( var_1, var_0 );
        wait 0.5;
    }
}

_id_119C7()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self endon( "relic_steelballs_ender" );
    childthread _id_119C8();

    for (;;)
    {
        self waittill( "stump_damage", var_0, var_1, var_2 );
        radiusdamage( self.origin, 64, 150, 149, self, "MOD_MELEE" );
        playfx( level._effect["stump_landing"], self.origin );
        self playrumbleonentity( "artillery_rumble" );
        playrumbleonposition( "slide_collision", self.origin );
        earthquake( 0.5, 1.5, self.origin, 100 );
    }
}

_id_119C8()
{
    for (;;)
    {
        while ( self isonground() )
            wait 0.05;

        var_0 = gettime();
        var_1 = self.origin[2];

        while ( !self isonground() )
        {
            if ( self.origin[2] > var_1 )
                var_1 = self.origin[2];

            wait 0.05;
        }

        var_2 = max( 0, var_1 - self.origin[2] );

        if ( var_2 < 128 )
            continue;

        var_3 = ( gettime() - var_0 ) / 1000;
        self notify( "stump_damage", var_3, var_1, var_2 );
    }
}

playergetbestrespawnmissionorigin( var_0 )
{

}

_id_11E33( var_0 )
{
    var_0 thread _id_119B1();
}

_id_12A8B( var_0 )
{
    var_0 notify( "set_relic_oneclip_ender" );
    var_0 setclientomnvar( "ui_cp_relic_ammo_reward", 0 );
}

_id_119B1()
{
    self endon( "death_or_disconnect" );
    self endon( "set_relic_oneclip_ender" );
    scripts\engine\utility::flag_wait( "player_spawned_with_loadout" );
    wait 0.5;
    thread _id_119B2();

    for (;;)
    {
        var_0 = self getweaponslistprimaries();

        foreach ( var_2 in var_0 )
        {
            if ( !isdefined( var_2 ) || weapontype( var_2 ) != "bullet" )
                continue;

            var_3 = self getweaponammostock( var_2 );

            if ( var_3 > 0 )
            {
                var_4 = weaponclipsize( var_2 );
                var_5 = self getweaponammoclip( var_2 );

                if ( var_5 < var_4 )
                {
                    var_6 = int( min( var_4, var_5 + var_3 ) );
                    thread _id_11989( var_2, var_6 - var_5 );
                }

                self setweaponammostock( var_2, 0 );
            }
        }

        scripts\engine\utility::_id_12E42( "ammo_pickup", "weapon_change", "weapon_swap", "ammo_awarded", "ammo_stock_not_empty" );
    }
}

_id_119B2()
{
    self endon( "death_or_disconnect" );
    self endon( "set_relic_oneclip_ender" );

    for (;;)
    {
        wait 0.05;
        var_0 = self getcurrentweapon();

        if ( !isdefined( var_0 ) || weapontype( var_0 ) != "bullet" )
            continue;

        if ( self getweaponammostock( var_0 ) > 0 )
            self notify( "ammo_stock_not_empty" );
    }
}

playerentercombatarea( var_0 )
{

}

_id_11E22( var_0 )
{
    var_0 thread _id_11996();
}

_id_11996()
{
    self endon( "death_or_disconnect" );
    self endon( "set_relic_grounded_ender" );

    for (;;)
    {
        self waittill( "reload_start" );
        var_0 = self getcurrentweapon();

        if ( !isdefined( var_0 ) || weapontype( var_0 ) != "bullet" )
            continue;

        var_1 = self getweaponammoclip( var_0 );
        self setweaponammoclip( var_0, 0 );
        var_2 = self getweaponammostock( var_0 );

        while ( var_2 == self getweaponammostock( var_0 ) )
        {
            if ( !self hasweapon( var_0 ) )
                break;

            if ( !self isreloading() || self getcurrentweapon() != var_0 )
            {
                self setweaponammoclip( var_0, var_1 );
                break;
            }

            wait 0.05;
        }
    }
}

_id_12A7A( var_0 )
{
    var_0 notify( "set_relic_grounded_ender" );
}

playerfakesplash( var_0 )
{

}

_id_11E2E( var_0 )
{
    var_0.ondamagerelics["relic_nobulletdamage"] = 1;

    if ( !scripts\engine\utility::array_contains( level.modifyplayerdamage_relics, ::_id_119A6 ) )
        level.modifyplayerdamage_relics = scripts\engine\utility::array_add( level.modifyplayerdamage_relics, ::_id_119A6 );
}

_id_12A86( var_0 )
{
    var_0.ondamagerelics["relic_nobulletdamage"] = 0;
    level.modifyplayerdamage_relics = scripts\engine\utility::array_remove( level.modifyplayerdamage_relics, ::_id_119A6 );
}

_id_119A6( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    if ( !isdefined( var_1 ) )
        return var_2;

    if ( !isent( var_1 ) )
        return var_2;

    if ( isdefined( var_1.owner ) )
    {
        if ( !isplayer( var_1.owner ) )
            return var_2;
    }

    if ( !isplayer( var_1 ) )
        return var_2;

    var_8 = scripts\engine\utility::isbulletdamage( var_3 ) || var_3 == "MOD_EXPLOSIVE_BULLET" && var_7 != "none";

    if ( var_8 )
    {
        if ( istrue( var_4.propkilledend ) )
            var_8 = 0;
    }

    if ( !scripts\cp\pvpe\pvpe::pvpe_enabled() )
    {
        if ( isplayer( var_1 ) && isai( var_0 ) )
        {
            if ( !var_8 )
                return var_2;
            else
                return 0;
        }
        else
            return var_2;
    }
    else if ( !var_8 )
        return var_2;
    else
        return 0;
}

playergoingintols( var_0 )
{
    level.persistentrelics["relic_trex"] = ::nuke_vault_runner_internal;
}

_id_11E3C( var_0 )
{
    var_0.persistentrelics["relic_trex"] = 1;
}

_id_12A93( var_0 )
{
    var_0.persistentrelics["relic_trex"] = 0;
}

nuke_vault_runner_internal( var_0 )
{
    self notify( "handleTRex" );
    self endon( "handleTRex" );
    self endon( "stop_trex" );
    level endon( "game_ended" );

    for (;;)
    {
        wait 0.05;

        if ( !defend_wave_2( var_0 ) )
            continue;

        var_1 = var_0 getvelocity();
        var_2 = length( var_1 );

        if ( var_2 < 5 )
        {
            var_0 scripts\cp\utility::allow_player_ignore_me( 1 );
            var_0.calculatehelitimetoarrive = 1;
            var_0 thread disable_spawnpoints_in_hangar( var_0 );
        }
    }
}

disable_spawnpoints_in_hangar( var_0 )
{
    self notify( "check_for_TrexRemoval" );
    self endon( "check_for_TrexRemoval" );

    for (;;)
    {
        waitframe();
        var_1 = var_0 getvelocity();
        var_2 = length( var_1 );

        if ( var_2 >= 5 )
        {
            var_0 scripts\cp\utility::allow_player_ignore_me( 0 );
            var_0.calculatehelitimetoarrive = undefined;
            break;
        }
    }
}

defend_wave_2( var_0 )
{
    if ( istrue( var_0.inlaststand ) )
        return 0;

    if ( istrue( var_0.calculatehelitimetoarrive ) )
        return 0;

    return 1;
}

playercleanupentondisconnect( var_0 )
{
    var_0.num_players_by_truck = 0;
}

_id_11E14( var_0 )
{
    var_0.num_players_by_truck = 1;
    var_0 thread _id_11971();
}

_id_12A6E( var_0 )
{
    var_0.num_players_by_truck = 0;
    var_0 notify( "stop_ammo_drain" );
}

_id_11971()
{
    level endon( "game_ended" );
    self endon( "stop_ammo_drain" );

    for (;;)
    {
        if ( !scripts\cp\utility::is_valid_player() )
        {
            wait 1;
            continue;
        }

        var_0 = self getcurrentprimaryweapon();

        if ( !isdefined( var_0 ) )
        {
            wait 1;
            continue;
        }

        var_1 = 0;
        var_2 = weaponclipsize( var_0 );

        if ( !isdefined( var_2 ) )
            var_2 = 22.5;

        if ( var_2 < 1 )
            var_2 = 22.5;

        if ( weapontype( var_0 ) == "riotshield" )
            var_1 = 1;

        if ( istrue( var_0.ismelee ) )
            var_1 = 1;

        if ( isdefined( var_0.classname ) )
        {
            if ( var_0.classname == "none" )
                var_1 = 1;

            if ( var_0.classname == "grenade" )
                var_1 = 1;

            if ( var_0.classname == "rocketlauncher" )
                var_1 = 1;
        }

        if ( self isreloading() )
            var_1 = 1;

        if ( scripts\cp\cp_weapon::is_incompatible_weapon( var_0 ) )
            var_1 = 1;

        if ( !var_1 )
        {
            if ( isdefined( self.last_weapon ) && self.last_weapon == var_0 )
            {
                if ( var_0.inventorytype == "altmode" )
                {
                    if ( isdefined( var_0.underbarrel ) && var_0.underbarrel == "ubshtgn" )
                    {
                        var_3 = self getweaponammoclip( var_0 );
                        var_4 = int( max( 0, var_3 - 1 ) );
                        self setweaponammoclip( var_0, var_4 );
                        self setweaponammostock( var_0, 0 );
                        self notify( "ammo_drained" );
                        thread _id_1198F( -1 );
                        break;
                    }
                }
                else
                {
                    if ( var_0 hasattachment( "akimbo", 1 ) )
                    {
                        var_5 = self getweaponammoclip( var_0, "left" );
                        var_6 = self getweaponammoclip( var_0, "right" );

                        if ( !isdefined( self.request_crate_drop ) )
                            self.request_crate_drop = "left";

                        if ( self.request_crate_drop == "left" )
                        {
                            var_4 = int( max( 0, var_5 - 1 ) );
                            self setweaponammoclip( var_0, var_4, "left" );
                            self.request_crate_drop = "right";
                        }
                        else
                        {
                            var_4 = int( max( 0, var_6 - 1 ) );
                            self setweaponammoclip( var_0, var_4, "right" );
                            self.request_crate_drop = "left";
                        }
                    }
                    else
                    {
                        var_3 = self getweaponammoclip( var_0 );
                        var_4 = int( max( 0, var_3 - 1 ) );
                        self setweaponammoclip( var_0, var_4 );
                    }

                    self notify( "ammo_drained" );
                    thread _id_1198F( -1 );
                }
            }

            var_7 = max( 45 / var_2, 0.4 );
            self.last_weapon = var_0;
            scripts\engine\utility::_id_12E53( var_7, "weapon_change" );
            continue;
        }

        wait 1;
    }
}

playerclearstreamhintorigin( var_0 )
{

}

_id_11E19( var_0 )
{
    level._id_11992 = 1;
    level.disable_hotjoin_via_ac130 = 1;
    level.dogtag_revive = 1;
}

_id_12A73( var_0 )
{
    level._id_11992 = 0;
    level.disable_hotjoin_via_ac130 = 0;
    level.dogtag_revive = 0;
}

playerexitcombatareamessage( var_0 )
{

}

_id_11E29( var_0 )
{
    var_1 = scripts\cp\cp_weapon::buildweapon( "iw8_fists_mp", [], "none", "none", -1 );
    var_0.isshield = var_1;
}

_id_12A81( var_0 )
{
    var_0.isshield = undefined;
}

playerdelaydisablezombie( var_0 )
{

}

_id_11E1F( var_0 )
{
    level.get_bleed_out_time = ::_id_11994;
}

_id_11994()
{
    return 7;
}

_id_12A77( var_0 )
{
    level.get_bleed_out_time = undefined;
}

playergetbestdropbagorigin( var_0 )
{

}

_id_11E32( var_0 )
{
    level thread _id_119AA();
}

_id_12A8A( var_0 )
{
    level notify( "relic_nuketimer_end" );
}

_id_119AA()
{
    level endon( "game_ended" );
    level endon( "relic_nuketimer_end" );

    if ( isdefined( level._id_119A7 ) )
        return;

    level._id_119A7 = spawnstruct();
    level._id_119A7.point_of_no_return = 16;
    level._id_119A7.nuke_clockobject = spawn( "script_origin", ( 0, 0, 100 ) );
    level._id_119A7.nuke_clockobject dontinterpolate();
    level._id_119A7.nuke_clockobject hide();
    level._id_119A7.spotlight_reach_goal_node_dist_sq = spawnstruct();
    level._id_119A7.spotlight_reach_goal_node_dist_sq.targetname = "nuke_expl_pos";
    level._id_119A7.spotlight_reach_goal_node_dist_sq.origin = level._id_119A7.nuke_clockobject.origin;
    level.nuke_expl_struct = level._id_119A7.spotlight_reach_goal_node_dist_sq;
    scripts\engine\utility::flag_wait( "player_spawned_with_loadout" );
    wait 0.5;
    var_0 = "safehouse_door_opened";
    var_1 = "obj_extract_informant_started";
    var_2 = "players_go_to_safehouse";
    var_3 = 60;
    var_4 = "player_entered_safehouse_vol";
    var_5 = tolower( getdvar( "mapname" ) );

    switch ( var_5 )
    {
        case "cp_scaletest":
            var_0 = "scaletest_fire_early";
            level thread scripts\cp\utility::notify_delay( var_0, 10 );
            break;
        case "cp_smuggler":
            level._id_119A7.intel_loc = 1;
            var_0 = "safehouse_door_opened";
            var_1 = "obj_extract_informant_started";
            var_2 = "players_go_to_safehouse";
            var_3 = 60;
            var_4 = "player_entered_safehouse_vol";
            var_6 = getdvar( "restart_checkpoint", "" );

            if ( isdefined( var_6 ) && var_6 == "tow_p1" )
            {
                var_0 = "smuggler_fire_early";
                level thread scripts\cp\utility::notify_delay( var_0, 5 );
            }

            break;
    }

    level waittill( var_0 );
    level thread _id_119AD();
    level thread _id_119B0();
    level thread _id_119AF( var_1, var_2, var_4, var_3 );
    waitframe();
    level waittill( "relic_nuke_explode" );
    var_7 = level._id_119A7.nuke_clockobject.origin;
    var_8 = spawn( "script_model", var_7 );
    var_8 setmodel( "tag_origin" );
    var_8.team = "axis";
    var_8.pers = [];
    var_8.pers["team"] = "axis";
    var_8.owner = var_8;
    var_9 = var_8 scripts\cp_mp\utility\killstreak_utility::createstreakinfo( "nuke", var_8 );
    var_8 thread scripts\mp\trials\trial_race::nuke_start( var_9 );
    level waittill( "nuke_detonated" );
    wait 5;

    if ( istrue( level._id_119A7.intel_loc ) )
        scripts\cp\cp_objectives::wait_and_destroy( "obj_nuke_ending" );

    var_10 = scripts\cp\cp_agent_utils::getactiveenemyagents( "allies" );

    foreach ( var_12 in var_10 )
        var_12 suicide();

    foreach ( var_15 in level.players )
        var_15 dodamage( var_15.health + 1000, var_15.origin, var_15 );

    wait 4;
    var_17 = 0;

    foreach ( var_15 in level.players )
    {
        if ( var_15 scripts\cp_mp\utility\player_utility::_isalive() )
            var_17 = 1;
    }

    if ( var_17 )
        level thread [[ level.endgame ]]( "axis", level.end_game_string_index["kia"] );
}

_id_119AD()
{
    level endon( "game_ended" );
    level endon( "relic_nuketimer_end" );
    level._id_119A7._id_12734 = 0;
    level._id_119A7._id_12734 = _id_119A9();
    var_0 = getdvar( "scr_relicnuketimerset", 0 );

    if ( int( var_0 ) > 5 )
        level._id_119A7._id_12734 = int( var_0 );

    if ( soundexists( "iw8_nuke_alarm" ) )
        level._id_119A7.nuke_clockobject playsound( "iw8_nuke_alarm" );

    level thread _id_119AE();
}

_id_119AE()
{
    level endon( "relic_nuketimer_end" );
    setomnvar( "ui_nuke_end_milliseconds", gettime() + level._id_119A7._id_12734 * 1000 );
    setomnvar( "ui_nuke_countdown_active", 1 );
    setomnvar( "ui_nuke_timer_type", 1 );

    while ( level._id_119A7._id_12734 > level._id_119A7.point_of_no_return )
    {
        if ( level._id_119A7._id_12734 % 2 == 0 && soundexists( "iw8_nuke_countdown" ) )
            level._id_119A7.nuke_clockobject playsound( "iw8_nuke_countdown" );

        var_0 = scripts\cp\utility::maxrangesq( level._id_119A7._id_12734 - 1, 1 );

        if ( isdefined( var_0 ) )
            level thread scripts\cp\cp_vo::try_to_play_vo_on_team( var_0, "allies" );

        level._id_119A7._id_12734 = level._id_119A7._id_12734 - 1;
        wait 1;
    }

    level._id_119A7.is_exploder = 1;
    level notify( "relic_nuke_explode" );
}

_id_119AF( var_0, var_1, var_2, var_3 )
{
    level endon( "nuke_detonated" );
    level waittill( var_0 );
    level notify( "relic_nuketimer_end" );
    scripts\mp\trials\trial_race::splashtime_helis();
    setomnvar( "ui_nuke_countdown_active", 0 );

    if ( isdefined( var_1 ) && isdefined( var_2 ) )
    {
        if ( !isdefined( var_3 ) )
            var_3 = 60;

        level waittill( var_1 );

        if ( level._id_119A7._id_12734 > var_3 )
        {
            level thread _id_119AE();
            level thread _id_119AF( var_2 );
        }
    }
}

_id_119B0()
{
    level endon( "game_ended" );
    level endon( "relic_nuketimer_end" );

    for (;;)
    {
        level waittill( "give_objective_xp_to_all_players", var_0 );

        if ( level._id_119A7._id_12734 > level._id_119A7.point_of_no_return + 1 )
        {
            if ( var_0 == "minor_objective" )
                _id_119A8( 15 );
            else
                _id_119A8( 30 );

            if ( istrue( level._id_119A7.is_exploder ) )
            {
                scripts\mp\trials\trial_race::splashtime_helis();
                level._id_119A7.is_exploder = 0;
                waitframe();
                level thread _id_119AE();
            }
        }
    }
}

_id_119A8( var_0 )
{
    if ( level.gameskill < 3 )
        var_0 = var_0 * 2;

    level._id_119A7._id_12734 = level._id_119A7._id_12734 + var_0;
    setomnvar( "ui_nuke_end_milliseconds", gettime() + level._id_119A7._id_12734 * 1000 );
}

_id_119A9()
{
    var_0 = 900;
    var_1 = tolower( getdvar( "mapname" ) );

    switch ( var_1 )
    {
        case "cp_scaletest":
            var_0 = 80;
            level scripts\engine\utility::delaythread( 61, scripts\cp\cp_objectives::molotov_crate_spawn, "minor_objective" );
            break;
        case "cp_smuggler":
            var_2 = getdvar( "restart_checkpoint", "" );

            if ( isdefined( var_2 ) && var_2 == "tow_p1" )
            {
                if ( level.gameskill < 3 )
                    var_0 = 300;
                else
                    var_0 = 240;
            }
            else if ( level.gameskill < 3 )
                var_0 = 960;
            else
                var_0 = 720;

            break;
    }

    return var_0;
}

playerexecutionsdisable( var_0 )
{

}

_id_11E26( var_0 )
{
    level endon( "game_ended" );
    level endon( "relic_hideobjicons_ender" );

    for (;;)
    {
        level scripts\engine\utility::_id_12E3F( "worldObjIDPool_requested", "objective_minimapUpdate" );

        foreach ( var_2 in level.worldobjidpool.active )
            objective_state( var_2.objid, "active" );
    }
}

_id_12A7E( var_0 )
{
    level notify( "relic_hideobjicons_ender" );
}

playerdatafield( var_0 )
{

}

_id_11E1E( var_0 )
{
    level.explosivedamagemod = 7;
}

_id_12A76( var_0 )
{
    level.explosivedamagemod = undefined;
}

bot1()
{
    if ( scripts\cp\utility::preventleave() || scripts\cp\utility::prematchintiallandingcomplete() )
        return 0;

    if ( getdvar( "scr_set_relics", "" ) != "" )
        return 1;

    return 0;
}

playercreatehudelement( var_0 )
{

}

_id_11E1B( var_0 )
{
    scripts\cp\cp_modular_spawning::add_global_spawn_function( "axis", ::_id_11E1C );

    foreach ( var_2 in level.spawned_enemies )
        var_2 _id_11E1C();
}

_id_12A75( var_0 )
{
    scripts\cp\cp_modular_spawning::remove_global_spawn_function( "axis", ::_id_11E1C );

    foreach ( var_2 in level.spawned_enemies )
    {
        if ( isdefined( var_2 ) )
        {
            var_2 notify( "relic_doubletap_ender" );
            var_2 notify( "relic_doubletap_helper_reset" );

            if ( istrue( var_2.a.doinglongdeath ) )
            {
                var_2 scripts\asm\soldier\long_death::longdeathkillme();
                continue;
            }

            var_2.forcelongdeath = undefined;
            var_2.longdeathnoncombat = undefined;
            var_2.invulnerable = 0;
            var_2.health = var_2.maxhealth;
            var_2.skipdyingbackcrawl = undefined;

            if ( isdefined( var_2.a ) )
                var_2.a.force_num_crawls = undefined;
        }
    }
}

_id_11E1C()
{
    thread _id_11E1D();
}

_id_11E1D()
{
    self endon( "death" );
    self endon( "relic_doubletap_ender" );

    if ( scripts\cp\utility::isjuggernaut() )
        return;

    if ( isdefined( self.unittype ) && self.unittype == "suicidebomber" )
        return;

    var_0 = self.health;
    wait 0.05;
    var_1 = self.weapon;

    if ( !isdefined( self.weapon ) || !issameweapon( self.weapon ) )
    {
        var_2 = self getweaponslistprimaries();

        if ( isdefined( var_2 ) && var_2.size > 0 )
            var_1 = var_2[0];
    }

    for ( var_3 = 3; var_3 > 0; var_3-- )
    {
        var_4 = var_0;
        self.health = var_0 + var_4;
        var_5 = undefined;

        while ( var_4 > 0 )
        {
            self waittill( "damage", var_6, var_7, var_8, var_9, var_5 );

            if ( isdefined( var_7 ) && isplayer( var_7 ) )
                var_4 = var_4 - var_6;
        }

        if ( scripts\cp\cp_modular_spawning::is_riding_vehicle() || istrue( self.playing_skit ) || istrue( self.a.disablelongdeath ) || istrue( self.attempting_teleport ) || istrue( self.buildweapon_blueprintwithcustomattachments ) || isdefined( var_5 ) && var_5 == "MOD_FIRE" || isdefined( self.script ) && ( self.script == "scripted" || self.script == "<custom>" ) || istrue( self._blackboard.animscriptedactive ) )
        {
            self.health = 1;
            return;
        }

        self.invulnerable = 1;
        self.health = 1000;

        if ( !isdefined( self.asm.longdeathanims ) )
            self.asm.longdeathanims = spawnstruct();

        childthread _id_11993();
        wait 0.05;
        self asmsetstate( self.asmname, "choose_long_death" );
        wait 0.8;
        self.invulnerable = 0;
        self.health = var_0;
        wait 3;
        self notify( "kill_long_death" );
        self notify( "dying_crawl_finished" );
        self notify( "relic_doubletap_helper_reset" );
        self.a.doinglongdeath = undefined;
        scripts\asm\asm::asm_setstate( "exposed_prone_to_stand" );

        if ( !isdefined( var_1 ) )
        {
            var_2 = self getweaponslistprimaries();

            if ( isdefined( var_2 ) && var_2.size > 0 )
                var_1 = var_2[0];
        }

        if ( isdefined( var_1 ) )
        {
            self takeweapon( var_1 );
            self giveweapon( var_1 );
            scripts\anim\shared.gsc::forceuseweapon( var_1, "primary" );
        }
    }
}

_id_11993()
{
    self endon( "death" );
    self endon( "relic_doubletap_ender" );
    self endon( "relic_doubletap_helper_reset" );
    self.a.force_num_crawls = 3;
    self.skipdyingbackcrawl = 1;
    self.forcelongdeath = 3;
    self.longdeathnoncombat = 1;

    for (;;)
    {
        self.asm.longdeathanims.earlyfinishtime = undefined;
        self.desiredtimeofdeath = gettime() + 1000;
        self.bulletsinclip = 0;
        wait 0.05;
    }
}

_id_12ABB()
{
    self endon( "disconnect" );

    for (;;)
    {
        self waittill( "spawned_player" );
        wait 1;
        thread _id_12ABC();
    }
}

_id_12ABC()
{
    self endon( "disconnect" );
    self endon( "death" );
    colmodel( self );

    for (;;)
    {
        self.staticmodelid = self.health;
        self.stay_on_roof_until_bothered = self.maxhealth;
        wait 0.1;

        if ( self.health != self.staticmodelid || self.maxhealth != self.stay_on_roof_until_bothered )
            colmodel( self );
    }
}

colmodel( var_0 )
{
    var_1 = var_0 getentitynumber();
    var_2 = int( var_0.health );
    var_3 = var_0.maxhealth;

    if ( istrue( var_0.inlaststand ) )
        var_4 = 0;

    scripts\cp\cp_persistence::setcoopplayerdata_for_everyone( "EoGPlayer", var_1, "tickettotal", var_3 );
    scripts\cp\cp_persistence::setcoopplayerdata_for_everyone( "EoGPlayer", var_1, "playerHealth", var_2 );
}
