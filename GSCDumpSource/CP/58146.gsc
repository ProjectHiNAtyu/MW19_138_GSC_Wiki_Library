// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

playerzombiewaittillinputreturn( var_0 )
{
    if ( !isdefined( level.brjugg_watchgasdamage ) )
        level.brjugg_watchgasdamage = [];
}

_id_12B48( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "faux_spawn" );
    self endon( "end_launcher" );
    var_1 = lootchopper_managespawns( var_0 );
    var_2 = lootchopper_modifyweapondamage( var_1 );
    thread brjugg_watchoverheat( var_0, var_1, var_2 );
}

emp_target_list()
{
    self waittill( "end_launcher" );
    wait 6;
    self notify( "cleanupImpactWatcher" );
}

brjugg_watchoverheat( var_0, var_1, var_2 )
{
    self notify( "cleanupImpactWatcher" );
    self endon( "disconnect" );
    self endon( "cleanupImpactWatcher" );
    childthread emp_target_list();

    for (;;)
    {
        self waittill( "bullet_first_impact", var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 );

        if ( var_0 != var_7 )
            continue;

        var_11 = _id_12285( var_9, var_8, var_1, var_7 );
        nuke_hostmigration_waittillhostmigrationdone( var_11, var_3, var_4, var_10, var_5, var_6, var_7, var_8, var_9, var_2 );
    }
}

nuke_hostmigration_waittillhostmigrationdone( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    if ( _id_12019( var_5, var_0, var_1, var_2 ) )
        x1opsplayertransition( var_0, var_4, var_7, var_8 );
    else if ( _id_11FF4( var_1 ) )
    {
        var_0 delete();
        return;
    }
    else if ( _id_12007( var_1 ) )
        linktoent( var_0, var_1, var_2 );

    if ( isdefined( var_9 ) )
        [[ var_9 ]]( var_0, var_1, var_2, var_3, var_5 );
}

_id_12285( var_0, var_1, var_2, var_3 )
{
    var_4 = lootidtoindex( var_3 );
    var_5 = spawn( "script_model", var_0 );
    var_5 setmodel( var_4 );
    var_5.angles = vectortoangles( var_1 ) + ( 90, 0, 0 );
    var_5 _id_11E9A( var_2 );
    var_5.owner = self;
    var_5.blockdrive = var_2;
    var_5.weapon = var_3;
    var_5.processed_tilt = 1;

    if ( _id_1200C( var_2 ) )
        var_5 = set_door_open( var_5 );

    var_5 thread calloutmarkerpingvo_playpredictivepingadded();
    set_heli_crash_override( var_5 );
    return var_5;
}

_id_1200C( var_0 )
{
    if ( var_0 == "bolt_default" )
        return 1;

    return 0;
}

set_door_open( var_0 )
{
    var_1 = var_0.origin + anglestoforward( var_0.angles ) * 15;
    var_2 = axistoangles( anglestoup( var_0.angles ), anglestoright( var_0.angles ), anglestoforward( var_0.angles ) );
    var_3 = spawn( "trigger_rotatable_radius", var_1, 0, 64, 79 );
    var_3.angles = var_2;
    var_3.targetname = "bolt_pickup";
    var_3 enablelinkto();
    var_3 linkto( var_0 );
    var_0.train_attach_player_hurts = var_3;
    var_0 thread calloutmarkerpingvo_playpredictivepingacknowledged();
    return var_0;
}

_id_11A2C( var_0 )
{
    var_0 notify( "removePickup" );

    if ( isdefined( var_0.train_attach_player_hurts ) )
        var_0.train_attach_player_hurts delete();
}

calloutmarkerpingvo_playpredictivepingacknowledged()
{
    self endon( "entitydeleted" );
    self endon( "removePickup" );
    wait 2;

    for (;;)
    {
        self.train_attach_player_hurts waittill( "trigger", var_0 );

        if ( !isplayer( var_0 ) )
            continue;

        if ( !var_0 scripts\cp_mp\utility\player_utility::_isalive() )
            continue;

        if ( isdefined( self.stuckenemyentity ) && isalive( self.stuckenemyentity ) )
            continue;

        var_1 = logevent_servermatchstart( var_0 getweaponslistprimaries() );

        if ( !isdefined( var_1 ) )
            continue;

        if ( var_0 calloutmarkerpingvo_play( var_1 ) )
            self delete();
    }
}

logevent_servermatchstart( var_0 )
{
    foreach ( var_2 in var_0 )
    {
        if ( var_2 hasattachment( "mag_me_t9ballisticknife" ) && self.blockdrive == "bolt_default" )
            return var_2;
    }

    return undefined;
}

calloutmarkerpingvo_play( var_0 )
{
    var_1 = weaponmaxammo( var_0 );
    var_2 = self getweaponammostock( var_0 );

    if ( var_2 >= var_1 )
        return 0;

    var_3 = int( min( var_1, var_2 + 1 ) );
    self setweaponammostock( var_0, var_3 );

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "damage", "hudIconType" ) )
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "damage", "hudIconType" ) ]]( "throwingknife" );

    return 1;
}

_id_11E9A( var_0 )
{
    switch ( var_0 )
    {
        default:
            self.getbrgametypedata = 1;
    }
}

_id_11E9B( var_0 )
{
    self endon( "entitydeleted" );
    wait( var_0 );
    self.getbrgametypedata = 1;
    set_heli_crash_override();
}

set_heli_crash_override( var_0 )
{
    if ( isdefined( var_0 ) )
        var_1 = [ var_0 ];
    else
        var_1 = [];

    foreach ( var_3 in level.brjugg_watchgasdamage )
    {
        if ( !isdefined( var_3 ) )
            continue;

        if ( isdefined( var_3 ) )
        {
            if ( var_1.size >= 7 && var_3.getbrgametypedata )
            {
                var_3 delete();
                continue;
            }

            var_1[var_1.size] = var_3;
        }
    }

    level.brjugg_watchgasdamage = var_1;
}

lootchopper_managespawns( var_0 )
{
    return "bolt_default";
}

lootchopper_modifyweapondamage( var_0 )
{
    return;
}

lootidtoindex( var_0 )
{
    var_1 = 0;
    var_1 = getweaponvariantindex( var_0 );

    if ( isdefined( var_1 ) )
    {
        switch ( var_1 )
        {
            case 1:
                return "weapon_wm_special_t9ballisticknife_projectile_v2";
            default:
                break;
        }
    }

    return "weapon_wm_special_t9ballisticknife_projectile";
}

_id_12019( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( var_2 ) && isdefined( var_3 ) )
        return 1;

    if ( !isdefined( var_0 ) )
        return 0;

    switch ( var_0 )
    {
        case "glass_solid":
        case "glass_pane":
            return 1;
    }

    if ( raid_player_start_pos_array( var_2 ) )
        return 1;

    if ( raid_objective_cleanup_func( var_2 ) )
        return 1;

    switch ( var_0 )
    {
        case "metal_car":
        case "metal_tank":
        case "metal_helicopter":
        case "metal_thin":
        case "metal_thick":
        case "metal_grate":
        case "riotshield":
            return 1;
        default:
            return 0;
    }
}

x1opsplayertransition( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\engine\math::vector_reflect( var_2, var_1 );
    var_5 = abs( vectordot( var_2, var_1 ) );
    var_6 = scripts\engine\math::factor_value( 2300, 1000, var_5 );
    var_4 = var_4 * var_6;
    var_0 physicslaunchserver( var_3, var_4 );
}

_id_11FF4( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( isagent( var_0 ) && var_0 prepdoorsforunload() && !isalive( var_0 ) && !isdefined( var_0 getcorpseentity() ) )
        return 1;

    return 0;
}

_id_12007( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( isdefined( var_0.classname ) && var_0.classname == "weapon_scavenger_bag_mp" )
        return 0;

    return 1;
}

prepdoorsforunload()
{
    return istrue( isdefined( self.unittype ) && self.unittype == "suicidebomber" );
}

linktoent( var_0, var_1, var_2 )
{
    if ( ( isplayer( var_1 ) || isagent( var_1 ) ) && !isalive( var_1 ) )
    {
        var_3 = var_1 getcorpseentity();

        if ( isdefined( var_3 ) )
            var_1 = var_3;
    }

    if ( isplayer( var_1 ) )
    {
        var_0 hidefromplayer( var_1 );

        if ( isdefined( var_0.train_attach_player_hurts ) )
            var_0.train_attach_player_hurts hidefromplayer( var_1 );
    }

    if ( isdefined( var_2 ) )
        var_0 linkto( var_1, var_2 );
    else
        var_0 linkto( var_1 );

    if ( delay_show_balloon( var_1 ) )
    {
        var_0.stuckenemyentity = var_1;
        var_0 thread _id_11A3C( var_1 );
    }

    var_0 notsolid();
    var_0 thread callouts( var_1 );
    var_0 thread calloutmarkerpingvo_playpredictivepingacknowledgedcancel( var_1, "vehicle_deleted" );
    var_0 thread calloutmarkerpingvo_playpredictivepingacknowledgedcancel( var_1, "detonated" );
    var_0 thread calloutmarkerpingvo_playpredictivepingacknowledgedcancel( var_1, "beginC130" );
}

_id_12BBB()
{
    if ( isdefined( self ) && istrue( self.processed_tilt ) )
        return 1;
    else
    {

    }
}

_id_11A3C( var_0 )
{
    self endon( "entitydeleted" );
    var_0 scripts\engine\utility::_id_12E40( "entitydeleted", "death", "disconnect" );

    if ( !_id_12BBB() )
        return;

    self.stuckenemyentity = undefined;

    if ( isdefined( var_0 ) && isdefined( var_0.nocorpse ) )
        self delete();
}

callouts( var_0 )
{
    self endon( "entitydeleted" );
    var_0 scripts\engine\utility::_id_12E3F( "entitydeleted", "disconnect" );

    if ( !_id_12BBB() )
        return;

    calloutmarkerpingvohandlerpool();
}

calloutmarkerpingvohandlerpool( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = ( 0, 0, 100 );

    if ( self islinked() )
        self unlink();

    if ( !isdefined( self.model ) || self.model == "tag_origin" )
        return;

    self solid();
    self physicslaunchserver( self.origin, var_0 );
}

calloutmarkerpingvo_playpredictivepingacknowledgedcancel( var_0, var_1 )
{
    self endon( "entitydeleted" );
    var_0 waittill( var_1 );

    if ( !_id_12BBB() )
        return;

    self delete();
}

calloutmarkerpingvo_playpredictivepingadded()
{
    self waittill( "entitydeleted" );

    if ( isdefined( self.train_attach_player_hurts ) )
        self.train_attach_player_hurts delete();

    if ( isdefined( self.grenade ) )
        self.grenade delete();
}

raid_player_start_pos_array( var_0 )
{
    if ( !isplayer( var_0 ) )
        return 0;

    if ( scripts\mp\utility\player::isenemy( var_0 ) )
        return 0;
    else
        return 1;
}

raid_objective_cleanup_func( var_0 )
{
    if ( !isagent( var_0 ) )
        return 0;

    if ( isdefined( var_0.agentteam ) && self.team == var_0.agentteam )
        return 1;

    return 0;
}

delay_show_balloon( var_0 )
{
    var_1 = 0;

    if ( isplayer( var_0 ) || isagent( var_0 ) )
        var_1 = 1;

    if ( var_0 scripts\cp_mp\vehicles\vehicle::isvehicle() )
        var_1 = 1;

    if ( isdefined( var_0.classname ) )
    {
        if ( var_0.classname == "misc_turret" )
            var_1 = 1;

        if ( var_0.classname == "script_model" )
        {
            if ( isdefined( var_0.streakinfo ) && ( var_0.streakinfo.streakname == "uav" || var_0.streakinfo.streakname == "gunship" ) )
                var_1 = 1;
        }
    }

    if ( isdefined( var_0.equipmentref ) )
    {
        if ( var_0.equipmentref == "equip_tac_cover" )
            var_1 = 1;
    }

    return var_1;
}
