// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level._effect["sentry_overheat_mp"] = loadfx( "vfx/core/mp/killstreaks/vfx_sg_overheat_smoke" );
    level._effect["sentry_explode_mp"] = loadfx( "vfx/core/mp/killstreaks/vfx_ims_explosion" );
    level._effect["sentry_smoke_mp"] = loadfx( "vfx/core/mp/killstreaks/vfx_sg_damage_blacksmoke" );
    level.sentrysettings["crafted_autosentry"] = spawnstruct();
    level.sentrysettings["crafted_autosentry"].health = 999999;
    level.sentrysettings["crafted_autosentry"].maxhealth = 300;
    level.sentrysettings["crafted_autosentry"].burstmin = 5;
    level.sentrysettings["crafted_autosentry"].burstmax = 10;
    level.sentrysettings["crafted_autosentry"].pausemin = 0.15;
    level.sentrysettings["crafted_autosentry"].pausemax = 0.25;
    level.sentrysettings["crafted_autosentry"].sentrymodeon = "sentry";
    level.sentrysettings["crafted_autosentry"].sentrymodeoff = "sentry_offline";
    level.sentrysettings["crafted_autosentry"].timeout = 90.0;
    level.sentrysettings["crafted_autosentry"].spinuptime = 1.0;
    level.sentrysettings["crafted_autosentry"].overheattime = 15.0;
    level.sentrysettings["crafted_autosentry"].cooldowntime = 0.2;
    level.sentrysettings["crafted_autosentry"].fxtime = 0.3;
    level.sentrysettings["crafted_autosentry"].weaponinfo = "alien_sentry_minigun_4_mp";
    level.sentrysettings["crafted_autosentry"].modelbase = "weapon_sentry_chaingun";
    level.sentrysettings["crafted_autosentry"].modelplacement = "weapon_sentry_chaingun";
    level.sentrysettings["crafted_autosentry"].modelplacementfailed = "weapon_sentry_chaingun_obj_red";
    level.sentrysettings["crafted_autosentry"].modeldestroyed = "weapon_sentry_chaingun_destroyed";
    level.sentrysettings["crafted_autosentry"].hintstring = &"COOP_CRAFTABLES/PICKUP";
    level.sentrysettings["crafted_autosentry"].headicon = 1;
    level.sentrysettings["crafted_autosentry"].vodestroyed = "sentry_destroyed";
    level.sentrysettings["crafted_autosentry"].issentient = 0;
}

test_ammo_crate( var_0 )
{
    var_0 thread watch_dpad();
    var_0 notify( "new_power", "crafted_autosentry" );
    scripts\cp\utility::set_crafted_inventory_item( "crafted_autosentry", ::give_crafted_sentry, var_0 );
}

test_crafted_sentry( var_0 )
{
    var_0 thread watch_dpad();
    var_0 notify( "new_power", "crafted_autosentry" );
    scripts\cp\utility::set_crafted_inventory_item( "crafted_autosentry", ::give_crafted_sentry, var_0 );
}

give_crafted_sentry( var_0, var_1 )
{
    var_1 thread watch_dpad();
    var_1 notify( "new_power", "crafted_autosentry" );
    scripts\cp\utility::set_crafted_inventory_item( "crafted_autosentry", ::give_crafted_sentry, var_1 );
}

watch_dpad()
{
    self endon( "disconnect" );
    self endon( "death" );
    self endon( "remove_sentry" );
    self notify( "craft_dpad_watcher" );
    self endon( "craft_dpad_watcher" );
    self notifyonplayercommand( "pullout_sentry", "+actionslot 1" );

    for (;;)
    {
        var_0 = scripts\engine\utility::_id_12E47( "pullout_sentry", "pullout_ammocrate" );

        if ( !isdefined( var_0 ) )
            continue;

        if ( istrue( self.iscarrying ) )
            continue;

        if ( istrue( self.linked_to_coaster ) )
            continue;

        if ( isdefined( self.allow_carry ) && self.allow_carry == 0 )
            continue;

        if ( !scripts\cp\utility::is_valid_player() )
            continue;

        switch ( var_0 )
        {
            case "pullout_sentry":
                thread givesentry( "crafted_autosentry" );
                break;
            case "pullout_ammocrate":
                var_1 = scripts\cp\cp_deployablebox::createboxforplayer( "support_box", self.origin + ( 0, 5, 5 ), self );
                var_2 = spawnstruct();
                var_2.linkparent = self;

                if ( isdefined( var_2.linkparent ) && isdefined( var_2.linkparent.model ) && var_2.linkparent.model != "" )
                {
                    var_1.origin = var_2.linkparent.origin;
                    var_3 = var_2.linkparent getlinkedparent();

                    if ( isdefined( var_3 ) )
                        var_2.linkparent = var_3;
                    else
                        var_2.linkparent = undefined;
                }

                var_2.deathoverridecallback = scripts\cp\cp_deployablebox::override_box_moving_platform_death;
                var_1.moving_platform = var_2.linkparent;
                var_1 setotherent( self );
                waitframe();
                var_1 thread scripts\cp\cp_deployablebox::box_setactive( undefined, undefined, undefined );

                if ( isdefined( var_1 ) && var_1 scripts\cp\utility::touchingbadtrigger() )
                    var_1 notify( "death" );

                break;
        }
    }
}

givesentry( var_0 )
{
    self endon( "disconnect" );
    self.last_sentry = var_0;
    scripts\cp\utility::clearlowermessage( "msg_power_hint" );
    var_1 = createsentryforplayer( var_0, self );
    self.itemtype = var_0;
    scripts\cp\utility::remove_player_perks();
    self.carriedsentry = var_1;
    var_2 = setcarryingsentry( var_1, 1 );
    self.carriedsentry = undefined;
    thread scripts\cp\utility::wait_restore_player_perk();
    self.iscarrying = 0;

    if ( isdefined( var_1 ) )
        return 1;
    else
        return 0;
}

setcarryingsentry( var_0, var_1 )
{
    self endon( "disconnect" );
    var_0 sentry_setcarried( self, var_1 );
    scripts\common\utility::allow_weapon( 0 );
    self notifyonplayercommand( "place_sentry", "+attack" );
    self notifyonplayercommand( "place_sentry", "+attack_akimbo_accessible" );
    self notifyonplayercommand( "cancel_sentry_left", "+actionslot 3" );
    self notifyonplayercommand( "cancel_sentry_right", "+actionslot 4" );
    self notifyonplayercommand( "cancel_sentry_down", "+actionslot 2" );

    if ( !self isconsoleplayer() )
    {
        self notifyonplayercommand( "cancel_sentry", "+actionslot 5" );
        self notifyonplayercommand( "cancel_sentry", "+actionslot 6" );
        self notifyonplayercommand( "cancel_sentry", "+actionslot 7" );
    }

    for (;;)
    {
        var_2 = scripts\engine\utility::_id_12E4B( "place_sentry", "cancel_sentry_left", "cancel_sentry_right", "cancel_sentry_down", "force_cancel_placement", "cancel_sentry" );

        if ( !isdefined( var_0 ) )
        {
            scripts\common\utility::allow_weapon( 1 );
            return 1;
        }

        if ( !isdefined( var_2 ) )
            var_2 = "force_cancel_placement";

        if ( var_2 == "cancel_sentry" || var_2 == "force_cancel_placement" || var_2 == "cancel_sentry_left" || var_2 == "cancel_sentry_right" || var_2 == "cancel_sentry_down" )
        {
            if ( !var_1 && ( var_2 == "cancel_sentry" || var_2 == "cancel_sentry_left" || var_2 == "cancel_sentry_right" || var_2 == "cancel_sentry_down" ) )
                continue;

            self.bgivensentry = 0;
            scripts\common\utility::allow_weapon( 1 );
            var_0 sentry_setcancelled();

            if ( var_2 != "force_cancel_placement" )
            {

            }
            else if ( var_1 )
                scripts\cp\utility::remove_crafted_item_from_inventory( self );

            return 0;
        }

        if ( !var_0.canbeplaced )
            continue;

        if ( var_1 )
        {
            self notify( "remove_sentry" );
            scripts\cp\utility::remove_crafted_item_from_inventory( self );
        }

        var_0 sentry_setplaced();
        scripts\common\utility::allow_weapon( 1 );
        return 1;
    }
}

createsentryforplayer( var_0, var_1 )
{
    var_2 = spawnturret( "misc_turret", var_1.origin, level.sentrysettings[var_0].weaponinfo );
    var_2.angles = var_1.angles;
    var_2.name = "crafted_autosentry";
    var_2 sentry_initsentry( var_0, var_1 );
    return var_2;
}

sentry_initsentry( var_0, var_1 )
{
    self.sentrytype = var_0;
    self.canbeplaced = 1;
    self setmodel( level.sentrysettings[self.sentrytype].modelbase );
    self.shouldsplash = 1;
    self setcandamage( 1 );

    switch ( var_0 )
    {
        case "crafted_autosentry":
        default:
            self maketurretinoperable();
            self setleftarc( 100 );
            self setrightarc( 100 );
            self setbottomarc( 90 );
            self settoparc( 60 );
            self setconvergencetime( 0.3, "pitch" );
            self setconvergencetime( 0.3, "yaw" );
            self setconvergenceheightpercent( 0.65 );
            self setdefaultdroppitch( -89.0 );
            break;
    }

    self setturretmodechangewait( 1 );
    sentry_setinactive();
    sentry_setowner( var_1 );
    thread sentry_handledeath( var_1 );
    thread scripts\cp\utility::item_timeout( undefined, level.sentrysettings[self.sentrytype].timeout );
    thread sentry_handleuse();
    thread sentry_attacktargets();
    thread sentry_beepsounds();
}

sentry_handledeath( var_0 )
{
    self waittill( "death" );

    if ( !isdefined( self ) )
        return;

    self setmodel( level.sentrysettings[self.sentrytype].modeldestroyed );
    sentry_setinactive();
    self setdefaultdroppitch( 40 );

    if ( isdefined( self.carriedby ) )
        self setsentrycarrier( undefined );

    self setsentryowner( undefined );
    self playsound( "sentry_explode" );

    if ( isdefined( self ) )
        thread sentry_deleteturret();
}

sentry_deleteturret()
{
    self notify( "sentry_delete_turret" );
    self endon( "sentry_delete_turret" );

    if ( isdefined( self.inuseby ) )
    {
        playfxontag( scripts\engine\utility::getfx( "sentry_explode_mp" ), self, "tag_origin" );
        playfxontag( scripts\engine\utility::getfx( "sentry_smoke_mp" ), self, "tag_aim" );
        self.inuseby scripts\cp\utility::restore_player_perk();
        self notify( "deleting" );
        self useby( self.inuseby );
        wait 1.0;
    }
    else
    {
        wait 1.5;
        playfxontag( scripts\engine\utility::getfx( "sentry_explode_mp" ), self, "tag_aim" );
        playfxontag( scripts\engine\utility::getfx( "sentry_smoke_mp" ), self, "tag_aim" );
        self playsound( "sentry_explode_smoke" );
        wait 0.1;
        self notify( "deleting" );
    }

    if ( isdefined( self.killcament ) )
        self.killcament delete();

    if ( isdefined( self ) )
        self delete();
}

sentry_handleuse()
{
    self endon( "death" );
    level endon( "game_ended" );

    for (;;)
    {
        self waittill( "trigger", var_0 );

        if ( !var_0 scripts\cp\utility::is_valid_player() )
            continue;

        if ( istrue( var_0.iscarrying ) )
            continue;

        var_0 setcarryingsentry( self, 0 );
    }
}

sentry_setowner( var_0 )
{
    var_0.current_sentry = self;
    self.owner = var_0;
    self setsentryowner( self.owner );
    self.team = self.owner.team;
    self setturretteam( self.team );
    thread scripts\cp\utility::item_handleownerdisconnect( "sentry_handleOwner" );
}

sentry_setplaced()
{
    if ( !istrue( self.firsttimeplace ) )
    {
        self.owner scripts\cp\crafting_system::remove_crafted_item_from_slot( scripts\cp\crafting_system::getitemslot( "sentry" ) );
        self.owner.bgivensentry = 0;
        var_0 = "sentry";
        var_1 = level.crafting_table_data[var_0].metal;
        var_2 = 0;

        if ( self.owner scripts\cp\cp_persistence::try_take_player_currency( var_1 ) )
        {

        }

        foreach ( var_4 in level.players )
            var_4 thread scripts\cp\cp_hud_message::showsplash( "cp_sentry", undefined, self.owner );

        self.firsttimeplace = 1;
        self.owner notify( "munitions_used", "sentry" );
    }

    self setmodel( level.sentrysettings[self.sentrytype].modelbase );

    if ( self getmode() == "manual" )
        self setmode( level.sentrysettings[self.sentrytype].sentrymodeoff );

    self setsentrycarrier( undefined );
    sentry_makesolid();
    self.carriedby forceusehintoff();
    self.carriedby = undefined;

    if ( isdefined( self.owner ) )
    {
        self.owner.iscarrying = 0;

        if ( level.sentrysettings[self.sentrytype].issentient )
            scripts\cp\utility::make_entity_sentient_cp( self.owner.team );

        self.owner notify( "new_sentry", self );
    }

    sentry_setactive();
    self playsound( "sentry_gun_plant" );
    self laseron();
    self notify( "placed" );
}

sentry_setcancelled()
{
    self.carriedby forceusehintoff();

    if ( isdefined( self.owner ) )
        self.owner.iscarrying = 0;

    self delete();
}

sentry_setcarried( var_0, var_1 )
{
    self setmodel( level.sentrysettings[self.sentrytype].modelplacement );
    self setsentrycarrier( var_0 );
    self setcandamage( 0 );
    self laseroff();
    sentry_makenotsolid();
    self.carriedby = var_0;
    var_0.iscarrying = 1;
    var_0 thread updatesentryplacement( self, var_1 );
    thread scripts\cp\utility::item_oncarrierdeath( var_0 );
    thread scripts\cp\utility::item_oncarrierdisconnect( var_0 );
    thread scripts\cp\utility::item_ongameended( var_0 );
    self freeentitysentient();
    self setdefaultdroppitch( -89.0 );
    sentry_setinactive();
    self notify( "carried" );
}

updatesentryplacement( var_0, var_1 )
{
    self endon( "death" );
    self endon( "disconnect" );
    level endon( "game_ended" );
    var_0 endon( "placed" );
    var_0 endon( "death" );
    var_0.canbeplaced = 1;
    var_2 = -1;

    for (;;)
    {
        var_0.canbeplaced = can_place_sentry( var_0 );

        if ( var_0.canbeplaced != var_2 )
        {
            if ( var_0.canbeplaced )
            {
                var_0 setmodel( level.sentrysettings[var_0.sentrytype].modelplacement );

                if ( !var_1 )
                    self forceusehinton( &"COOP_CRAFTABLES/PLACE" );
                else
                    self forceusehinton( &"COOP_CRAFTABLES/PLACE_CANCELABLE" );
            }
            else
            {
                var_0 setmodel( level.sentrysettings[var_0.sentrytype].modelplacementfailed );
                self forceusehinton( &"COOP_CRAFTABLES/CANNOT_PLACE" );
            }
        }

        var_2 = var_0.canbeplaced;
        wait 0.05;
    }
}

can_place_sentry( var_0 )
{
    var_1 = self canplayerplacesentry();
    var_0.origin = var_1["origin"];
    var_0.angles = var_1["angles"];

    if ( scripts\cp\utility::ent_is_near_equipment( var_0 ) )
        return 0;

    return self isonground() && var_1["result"] && abs( var_0.origin[2] - self.origin[2] ) < 10;
}

sentry_setactive()
{
    self setmode( level.sentrysettings[self.sentrytype].sentrymodeon );
    self setcursorhint( "HINT_NOICON" );
    self sethintstring( level.sentrysettings[self.sentrytype].hintstring );
    self makeusable();
    self setusefov( 120 );
    self setuserange( 96 );

    switch ( self.sentrytype )
    {
        case "crafted_autosentry":
            addtoturretlist( self getentitynumber() );
            break;
    }
}

sentry_setinactive()
{
    self setmode( level.sentrysettings[self.sentrytype].sentrymodeoff );
    self makeunusable();
    removefromturretlist();
}

sentry_makesolid()
{
    self solid();
}

sentry_makenotsolid()
{
    self notsolid();
}

addtoturretlist( var_0 )
{
    if ( !scripts\engine\utility::array_contains( level.turrets, self ) )
    {
        level.turrets = scripts\engine\utility::array_add_safe( level.turrets, self );

        if ( level.turrets.size > 4 )
        {
            if ( isdefined( level.turrets[0] ) )
                level.turrets[0] notify( "death" );
        }
    }
    else
    {

    }
}

removefromturretlist()
{
    level.turrets = scripts\engine\utility::array_remove( level.turrets, self );
}

sentry_attacktargets()
{
    self endon( "death" );
    level endon( "game_ended" );
    self.momentum = 0;
    self.heatlevel = 0;
    self.overheated = 0;
    thread sentry_heatmonitor();

    for (;;)
    {
        scripts\engine\utility::waittill_either( "turretstatechange", "cooled" );

        if ( self isfiringturret() )
        {
            thread sentry_burstfirestart();
            continue;
        }

        sentry_spindown();
        thread sentry_burstfirestop();
    }
}

sentry_targetlocksound()
{
    self endon( "death" );
    self playsound( "sentry_gun_target_lock_beep" );
    wait 0.19;
    self playsound( "sentry_gun_target_lock_beep" );
    wait 0.19;
    self playsound( "sentry_gun_target_lock_beep" );
}

sentry_spinup()
{
    thread sentry_targetlocksound();

    while ( self.momentum < level.sentrysettings[self.sentrytype].spinuptime )
    {
        self.momentum = self.momentum + 0.1;
        wait 0.1;
    }
}

sentry_spindown()
{
    self.momentum = 0;
}

sentry_burstfirestart()
{
    self endon( "death" );
    self endon( "stop_shooting" );
    level endon( "game_ended" );
    sentry_spinup();
    var_0 = weaponfiretime( level.sentrysettings[self.sentrytype].weaponinfo );
    var_1 = level.sentrysettings[self.sentrytype].burstmin;
    var_2 = level.sentrysettings[self.sentrytype].burstmax;
    var_3 = level.sentrysettings[self.sentrytype].pausemin;
    var_4 = level.sentrysettings[self.sentrytype].pausemax;

    for (;;)
    {
        var_5 = randomintrange( var_1, var_2 + 1 );

        for ( var_6 = 0; var_6 < var_5 && !self.overheated; var_6++ )
        {
            self shootturret( "tag_flash" );
            self notify( "bullet_fired" );
            self.heatlevel = self.heatlevel + var_0;
            wait( var_0 );
        }

        wait( randomfloatrange( var_3, var_4 ) );
    }
}

sentry_burstfirestop()
{
    self notify( "stop_shooting" );
}

turret_shotmonitor( var_0 )
{
    self endon( "death" );
    self endon( "disconnect" );
    level endon( "game_ended" );
    var_0 endon( "death" );
    var_0 endon( "player_dismount" );
    var_1 = weaponfiretime( level.sentrysettings[var_0.sentrytype].weaponinfo );

    for (;;)
    {
        var_0 waittill( "turret_fire" );
        var_0 getturretowner() notify( "turret_fire" );
        var_0.heatlevel = var_0.heatlevel + var_1;
        var_0.cooldownwaittime = var_1;
    }
}

sentry_heatmonitor()
{
    self endon( "death" );
    var_0 = weaponfiretime( level.sentrysettings[self.sentrytype].weaponinfo );
    var_1 = 0;
    var_2 = 0;
    var_3 = level.sentrysettings[self.sentrytype].overheattime;
    var_4 = level.sentrysettings[self.sentrytype].cooldowntime;

    for (;;)
    {
        if ( self.heatlevel != var_1 )
            wait( var_0 );
        else
            self.heatlevel = max( 0, self.heatlevel - 0.05 );

        if ( self.heatlevel > var_3 )
        {
            self.overheated = 1;
            thread playheatfx();

            switch ( self.sentrytype )
            {
                case "crafted_autosentry":
                    playfxontag( scripts\engine\utility::getfx( "sentry_smoke_mp" ), self, "tag_aim" );
                    break;
                default:
                    break;
            }

            while ( self.heatlevel )
            {
                self.heatlevel = max( 0, self.heatlevel - 0.1 );
                wait 0.1;
            }

            self.overheated = 0;
            self notify( "not_overheated" );
        }

        var_1 = self.heatlevel;
        wait 0.05;
    }
}

turret_heatmonitor()
{
    self endon( "death" );
    var_0 = level.sentrysettings[self.sentrytype].overheattime;

    for (;;)
    {
        if ( self.heatlevel > var_0 )
        {
            self.overheated = 1;
            thread playheatfx();

            switch ( self.sentrytype )
            {
                case "gl_turret":
                    playfxontag( scripts\engine\utility::getfx( "sentry_smoke_mp" ), self, "tag_aim" );
                    break;
                default:
                    break;
            }

            while ( self.heatlevel )
                wait 0.1;

            self.overheated = 0;
            self notify( "not_overheated" );
        }

        wait 0.05;
    }
}

turret_coolmonitor()
{
    self endon( "death" );

    for (;;)
    {
        if ( self.heatlevel > 0 )
        {
            if ( self.cooldownwaittime <= 0 )
                self.heatlevel = max( 0, self.heatlevel - 0.05 );
            else
                self.cooldownwaittime = max( 0, self.cooldownwaittime - 0.05 );
        }

        wait 0.05;
    }
}

playheatfx()
{
    self endon( "death" );
    self endon( "not_overheated" );
    level endon( "game_ended" );
    self notify( "playing_heat_fx" );
    self endon( "playing_heat_fx" );

    for (;;)
    {
        playfxontag( scripts\engine\utility::getfx( "sentry_overheat_mp" ), self, "tag_flash" );
        wait( level.sentrysettings[self.sentrytype].fxtime );
    }
}

playsmokefx()
{
    self endon( "death" );
    self endon( "not_overheated" );
    level endon( "game_ended" );

    for (;;)
    {
        playfxontag( scripts\engine\utility::getfx( "sentry_smoke_mp" ), self, "tag_aim" );
        wait 0.4;
    }
}

sentry_beepsounds()
{
    self notify( "sentry_beepSounds" );
    self endon( "sentry_beepSounds" );
    self endon( "death" );
    level endon( "game_ended" );

    for (;;)
    {
        wait 3.0;

        if ( !isdefined( self.carriedby ) )
            self playsound( "sentry_gun_beep" );
    }
}

remove_sentry_for_player( var_0 )
{
    var_0 notify( "remove_sentry" );
    var_0 notify( "force_cancel_placement" );

    if ( isdefined( var_0.current_sentry ) )
    {
        level.turrets = scripts\engine\utility::array_remove( level.turrets, var_0.current_sentry );
        var_0 forceusehintoff();
        var_0.iscarrying = 0;
        var_0.current_sentry delete();
    }
}
