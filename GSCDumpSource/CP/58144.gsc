// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

playerzombiewaittillinputreturn( var_0 )
{

}

_id_12B48( var_0 )
{
    self endon( "death_or_disconnect" );
    self endon( "faux_spawn" );
    self endon( "end_launcher" );
    var_1 = longgulagstream( var_0 );

    if ( var_1 == "mag_aalpha12" )
        return;

    var_2 = longwaitradarsweep( var_1 );
    thread play_gas_sequence( var_0, var_1, var_2 );
}

emp_target_list()
{
    self waittill( "end_launcher" );
    wait 6;
    self notify( "cleanupaalpha12ImpactWatcher" );
}

play_gas_sequence( var_0, var_1, var_2 )
{
    self notify( "cleanupaalpha12ImpactWatcher" );
    self endon( "disconnect" );
    self endon( "cleanupaalpha12ImpactWatcher" );
    childthread emp_target_list();

    if ( var_1 == "default" )
        return;

    for (;;)
    {
        self waittill( "bullet_first_impact", var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 );

        if ( var_0 != var_7 )
            continue;

        nuke_hostmigration_waittillhostmigrationdone( var_3, var_4, var_10, var_5, var_6, var_7, var_8, var_9, var_2, var_1 );
    }
}

nuke_hostmigration_waittillhostmigrationdone( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    var_10 = _id_12019( var_4, var_9, var_0, var_1, var_3, var_6 );

    if ( var_10 )
        var_7 = x1opsrespawnselection( var_3, var_6, var_7, 0 );

    var_11 = _id_122EC( var_7, var_6, var_9, var_5, var_10, var_3 );

    if ( _id_11FF4( var_0 ) )
    {
        var_11 delete();
        return;
    }
    else if ( _id_12007( var_0, var_10 ) )
        linktoent( var_11, var_0, var_1 );

    if ( isdefined( var_8 ) )
        [[ var_8 ]]( var_11, var_2, var_7, var_3 );
}

play_found_leads_counting_building_one( var_0, var_1, var_2, var_3 )
{
    thread waitforremoteend( var_0, var_1, var_2, var_3 );
}

play_found_leads_counting_building_two( var_0, var_1, var_2, var_3 )
{

}

waitforremoteend( var_0, var_1, var_2, var_3 )
{
    self endon( "disconnect" );
    var_0 endon( "entitydeleted" );
    var_0 scripts\engine\utility::_id_12E59( 0.0, "explode" );
    playfx( level._effect["aalpha12_explo"], var_2, var_3 );
    var_4 = getcompleteweaponname( "semtex_aalpha12_mp" );
    var_5 = getcompleteweaponname( "semtex_aalpha12_splash_mp" );
    var_4.teamclearextractplunder = var_0.weapon;
    var_5.teamclearextractplunder = var_0.weapon;
    var_4._id_12342 = var_5;
    glassradiusdamage( var_0.origin, 130, 50, 1 );

    if ( isdefined( var_0.stuckenemyentity ) && isalive( var_0.stuckenemyentity ) )
    {
        var_0.stuckenemyentity scripts\cp_mp\utility\damage_utility::isteameliminated();
        var_0.stuckenemyentity dodamage( 1, var_0.origin, self, self, "MOD_EXPLOSIVE", var_4, var_1 );
        var_0.stuckenemyentity scripts\cp_mp\utility\damage_utility::isteamextracted();
    }

    getplaylistname( var_0.origin, 11, 25, 12, 25, 35, 14, self, "MOD_EXPLOSIVE", var_5 );
    wait 0.4;

    if ( !var_0 _id_12BC2() )
        return;

    var_0 delete();
}

_id_122EC( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = magicgrenademanual( "semtex_aalpha12_mp", var_0, ( 0, 0, 0 ), 0.0 );
    var_6.angles = vectortoangles( var_5 );
    var_6.propwaitminigamefalltimer = 1;
    var_6.owner = self;
    var_6.blockdrive = var_2;
    var_6.weapon = var_3;
    var_6.prewaitandspawnclient = 1;
    return var_6;
}

longgulagstream( var_0 )
{
    var_1 = "";

    if ( var_0 hasattachment( "calcustmags_aalpha12" ) )
        return "explosive";

    return "default";
}

longwaitradarsweep( var_0 )
{
    switch ( var_0 )
    {
        case "explosive":
            return ::play_found_leads_counting_building_one;
        default:
            return ::play_found_leads_counting_building_two;
    }
}

_id_12019( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( var_0 ) )
        var_0 = "";

    if ( var_0 == "riotshield" )
        return 1;

    return 0;
}

x1opsrespawnselection( var_0, var_1, var_2, var_3 )
{
    return var_2 + var_0 * 25;
}

_id_11FF4( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( isagent( var_0 ) && var_0 prepdoorsforunload() && !isalive( var_0 ) && !isdefined( var_0 getcorpseentity() ) )
        return 1;

    return 0;
}

_id_12007( var_0, var_1 )
{
    if ( var_1 || !isdefined( var_0 ) )
        return 0;

    if ( isdefined( var_0.classname ) && var_0.classname == "weapon_scavenger_bag_mp" )
        return 0;

    return 1;
}

prepdoorsforunload()
{
    return istrue( isdefined( self.unittype ) && self.unittype == "suicidebomber" );
}

linktoent( var_0, var_1, var_2 )
{
    if ( ( isplayer( var_1 ) || isagent( var_1 ) ) && !isalive( var_1 ) )
    {
        var_3 = var_1 getcorpseentity();

        if ( isdefined( var_3 ) )
            var_1 = var_3;
    }

    if ( isplayer( var_1 ) )
        var_0 hidefromplayer( var_1 );

    if ( isdefined( var_2 ) )
        var_0 linkto( var_1, var_2 );
    else
        var_0 linkto( var_1 );

    if ( delay_show_balloon( var_1 ) )
    {
        var_0.stuckenemyentity = var_1;
        var_0 thread _id_11A3C( var_1 );
    }

    if ( !istrue( var_0.propwaitminigamefalltimer ) )
        var_0 notsolid();

    var_0 thread waitforstuck( var_1 );
    var_0 thread waitforplayerstoconnect_countdown( var_1, "vehicle_deleted" );
    var_0 thread waitforplayerstoconnect_countdown( var_1, "detonated" );
    var_0 thread waitforplayerstoconnect_countdown( var_1, "beginC130" );
}

_id_12BC2()
{
    if ( isdefined( self ) && istrue( self.prewaitandspawnclient ) )
        return 1;
    else
    {

    }
}

_id_11A3C( var_0 )
{
    self endon( "entitydeleted" );
    var_0 scripts\engine\utility::_id_12E40( "entitydeleted", "death", "disconnect" );

    if ( !_id_12BC2() )
        return;

    self.stuckenemyentity = undefined;

    if ( isdefined( var_0 ) && isdefined( var_0.nocorpse ) )
        self delete();
}

waitforstuck( var_0 )
{
    self endon( "entitydeleted" );

    if ( isagent( var_0 ) )
        var_0 waittill( "entitydeleted" );
    else
        var_0 scripts\engine\utility::_id_12E3F( "entitydeleted", "disconnect" );

    if ( !_id_12BC2() )
        return;

    waitforstreamsynccomplete();
}

waitforstreamsynccomplete( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = ( 0, 0, 100 );

    if ( self islinked() )
        self unlink();

    if ( !istrue( self.propwaitminigamefalltimer ) )
    {
        self solid();
        self physicslaunchserver( self.origin, var_0 );
    }
}

waitforplayerstoconnect_countdown( var_0, var_1 )
{
    self endon( "entitydeleted" );
    var_0 waittill( var_1 );

    if ( !_id_12BC2() )
        return;

    self delete();
}

waitforplayerstospawn()
{
    self waittill( "entitydeleted" );

    if ( isdefined( self.grenade ) )
        self.grenade delete();
}

raid_player_start_pos_array( var_0 )
{
    if ( !isplayer( var_0 ) )
        return 0;

    if ( scripts\mp\utility\player::isenemy( var_0 ) )
        return 0;
    else
        return 1;
}

propminigameupdateshowloser( var_0 )
{
    if ( !isplayer( var_0 ) )
        return 0;

    if ( scripts\mp\utility\player::isenemy( var_0 ) )
        return 1;
    else
        return 0;
}

raid_objective_cleanup_func( var_0 )
{
    if ( !isagent( var_0 ) )
        return 0;

    if ( isdefined( var_0.agentteam ) && self.team == var_0.agentteam )
        return 1;

    return 0;
}

propminigameupdates( var_0 )
{
    if ( !isagent( var_0 ) )
        return 0;

    if ( isdefined( var_0.agentteam ) && self.team == var_0.agentteam )
        return 0;

    return 1;
}

delay_show_balloon( var_0 )
{
    var_1 = 0;

    if ( isplayer( var_0 ) || isagent( var_0 ) )
        var_1 = 1;

    if ( var_0 scripts\cp_mp\vehicles\vehicle::isvehicle() )
        var_1 = 1;

    if ( isdefined( var_0.classname ) )
    {
        if ( var_0.classname == "misc_turret" )
            var_1 = 1;

        if ( var_0.classname == "script_model" )
        {
            if ( isdefined( var_0.streakinfo ) && ( var_0.streakinfo.streakname == "uav" || var_0.streakinfo.streakname == "gunship" ) )
                var_1 = 1;
        }
    }

    if ( isdefined( var_0.equipmentref ) )
    {
        if ( var_0.equipmentref == "equip_tac_cover" )
            var_1 = 1;
    }

    return var_1;
}
