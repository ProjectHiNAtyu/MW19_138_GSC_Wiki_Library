// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

register_ai_damage_callbacks()
{
    level.agent_funcs["soldier_agent"]["on_damaged"] = ::callbacksoldieragentdamaged;
    level.agent_funcs["soldier_agent"]["gametype_on_damage_finished"] = ::callbacksoldieragentgametypedamagefinished;
    level.agent_funcs["soldier_agent"]["gametype_on_killed"] = ::callbacksoldieragentgametypekilled;
    level.agent_funcs["soldier"]["on_damaged"] = ::callbacksoldieragentdamaged;
    level.agent_funcs["soldier"]["gametype_on_damage_finished"] = ::callbacksoldieragentgametypedamagefinished;
    level.agent_funcs["soldier"]["gametype_on_killed"] = ::callbacksoldieragentgametypekilled;
    level.agent_funcs["civilian"]["on_damaged"] = ::callbacksoldieragentdamaged;
    level.agent_funcs["civilian"]["gametype_on_damage_finished"] = ::callbacksoldieragentgametypedamagefinished;
    level.agent_funcs["civilian"]["gametype_on_killed"] = ::callbacksoldieragentgametypekilled;
    level.agent_funcs["juggernaut_agent"]["on_damaged"] = ::callbacksoldieragentdamaged;
    level.agent_funcs["juggernaut_agent"]["gametype_on_damage_finished"] = ::callbacksoldieragentgametypedamagefinished;
    level.agent_funcs["juggernaut_agent"]["gametype_on_killed"] = ::callbacksoldieragentgametypekilled;
    level.agent_funcs["juggernaut"]["on_damaged"] = ::callbacksoldieragentdamaged;
    level.agent_funcs["juggernaut"]["gametype_on_damage_finished"] = ::callbacksoldieragentgametypedamagefinished;
    level.agent_funcs["juggernaut"]["gametype_on_killed"] = ::callbacksoldieragentgametypekilled;
    level.agent_funcs["suicidebomber"]["on_damaged"] = ::callbacksoldieragentdamaged;
    level.agent_funcs["suicidebomber"]["gametype_on_damage_finished"] = ::callbacksoldieragentgametypedamagefinished;
    level.agent_funcs["suicidebomber"]["gametype_on_killed"] = ::callbacksoldieragentgametypekilled;
}

callbacksoldieragentdamaged( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 )
{
    var_13 = self;

    if ( !isdefined( var_13.agent_type ) )
        return;

    if ( istrue( var_13.brtruck_cleanupents ) )
        var_13.brtruck_cleanupents = undefined;
    else
    {
        if ( !isdefined( var_12 ) )
            var_12 = var_5;

        if ( var_4 != "MOD_SUICIDE" )
        {
            if ( scripts\cp\utility::is_friendly_damage( var_13, var_0 ) )
                return;
        }

        if ( !isdefined( var_1 ) )
            var_1 = var_13;

        var_14 = should_do_damage_checks( var_1, var_2, var_4, var_5, var_8, var_13 );

        if ( !var_14 )
            return;

        var_3 = var_3 | 4;
        var_15 = var_2;
        var_16 = isdefined( var_13.agent_type );
        var_17 = var_12.basename;
        var_18 = var_12.classname;
        var_19 = post_get_up_animation_function();
        var_20 = istrue( var_1.inlaststand );
        var_21 = var_4 == "MOD_MELEE";
        var_22 = var_13 scripts\cp\utility::agentisinstakillimmune();
        var_23 = scripts\engine\utility::isbulletdamage( var_4 ) || var_4 == "MOD_EXPLOSIVE_BULLET" && var_8 != "none";
        var_24 = isdefined( var_1 ) && isplayer( var_1 );
        var_25 = isdefined( var_1.owner ) && isplayer( var_1.owner );
        var_26 = isdefined( var_1 ) && isdefined( var_1.agent_type ) && var_1.agent_type == "soldier_agent";
        var_27 = isdefined( var_13.unittype ) && var_13.unittype == "juggernaut";
        var_28 = var_23 && scripts\cp\utility::isheadshot( var_12, var_8, var_4, var_1 );
        var_29 = var_4 == "MOD_EXPLOSIVE_BULLET" && ( isdefined( var_8 ) && var_8 == "none" ) || var_4 == "MOD_EXPLOSIVE" || var_4 == "MOD_GRENADE_SPLASH" || var_4 == "MOD_PROJECTILE" || var_4 == "MOD_PROJECTILE_SPLASH" || var_4 == "MOD_GRENADE";
        var_30 = var_4 == "MOD_FIRE";
        var_31 = 0;
        var_32 = var_24 && var_1 scripts\cp\utility::_hasperk( "specialty_bulletdamage" );
        var_33 = isdefined( var_1.classname ) && var_1.classname == "script_vehicle" && isdefined( var_1.owner ) && isplayer( var_1.owner );
        var_34 = var_33 && var_4 == "MOD_CRUSH";
        var_35 = isdefined( var_1.classname ) && var_1.classname == "script_vehicle" && !isdefined( var_1.owner );
        var_36 = var_35 && var_4 == "MOD_CRUSH";

        if ( isdefined( level._id_12B13 ) )
            level thread [[ level._id_12B13 ]]( var_1, var_5, var_13, var_4, var_8, var_9 );

        if ( ( var_24 || var_25 ) && istrue( var_13.invulnerable ) && var_4 != "MOD_SUICIDE" )
            return;

        if ( var_27 )
        {
            if ( var_21 )
            {
                var_37 = [];
                var_38 = spawnstruct();
                var_38.type = "break_stealth_with_no_damage";
                var_38.entity = var_1;
                var_37[0] = var_38;
                var_13 notify( "ai_events", var_37 );
                return;
            }
            else
            {
                if ( var_17 == "thermite_ap_mp" || var_17 == "thermite_proj_cp" )
                    var_2 = var_2 * 15;

                if ( var_17 == "cruise_proj_mp" )
                    var_2 = self.health + 1000;
            }

            if ( var_34 )
            {
                var_39 = [ "atv" ];

                if ( scripts\engine\utility::array_contains( var_39, var_1.vehiclename ) )
                    var_1 dodamage( 10000, var_1.origin, var_13 );
                else
                {
                    playsoundatpos( self.origin + ( 0, 0, 40 ), "gib_fullbody" );
                    var_2 = self.health + 1000;
                }
            }
        }
        else if ( var_24 )
        {
            if ( var_17 == "throwingknife_mp" )
                var_2 = self.health + 1000;

            if ( ( var_17 == "tur_bradley_mp" || var_17 == "tur_bradley_ks_mp" ) && var_4 == "MOD_PROJECTILE" )
                var_2 = self.health + 1000;
        }

        if ( istrue( self.buildweapon_blueprintwithcustomattachments ) )
        {
            if ( nuke_vault_oilfire_player_vision( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 ) )
                return;

            if ( var_8 == "shield" && ( var_4 == "MOD_GRENADE" || var_4 == "MOD_PROJECTILE" ) && var_2 > 175 )
            {
                var_2 = var_2 * 0.05;
                var_8 = "torso_lower";
            }
        }

        if ( var_19 )
        {
            if ( var_17 == "emp_drone_player_mp" )
                var_2 = self.health + 1000;
        }

        if ( var_34 )
        {
            playsoundatpos( self.origin + ( 0, 0, 40 ), "gib_fullbody" );

            if ( !istrue( level.global_stealth_broken ) )
            {

            }
        }

        if ( var_36 )
        {
            if ( istrue( self.plunderfxondropthreashold ) )
            {
                var_2 = 0;
                var_13 notify( "veh_crush_damage", var_1 );
            }
        }

        if ( var_24 )
        {
            var_13.damaged_by_player = 1;

            if ( var_28 )
            {
                if ( var_27 )
                {
                    if ( scripts\cp\utility::prematchintiallandingcomplete() )
                        var_2 = var_2 * 0.3;
                    else
                        var_2 = animscripted_loop( var_2, var_5, var_18, var_4, var_1 );
                }
            }

            if ( var_32 )
                var_2 = var_2 * 2;

            if ( var_29 )
            {
                var_40 = var_2 * 2.5;

                if ( isdefined( level.explosivedamagemod ) )
                    var_40 = var_40 * level.explosivedamagemod;

                var_2 = var_2 + var_40;
            }

            if ( var_30 )
                var_2 = var_2 + var_2 * 3.5;

            if ( var_21 )
            {
                if ( istrue( var_13.immune_to_melee_damage ) )
                {
                    var_2 = 0;
                    var_13 notify( "melee_hit_on_melee_immune", var_1 );
                }
                else
                {
                    var_2 = 150;
                    var_2 = var_2 * var_1 scripts\cp\perks\cp_perks::get_perk( "melee_scalar" );

                    if ( pressure_timeout( var_17 ) )
                        var_2 = 175;
                    else
                    {
                        if ( issubstr( var_17, "iw8_knife_mp" ) )
                            var_2 = 350;

                        if ( issubstr( var_17, "iw8_me_" ) )
                            var_2 = 350;
                        else if ( isdefined( var_12.muzzle ) )
                        {
                            if ( issubstr( var_12.muzzle, "muzzlemelee" ) )
                                var_2 = 350;

                            if ( issubstr( var_12.muzzle, "bayonet" ) )
                                var_2 = 350;
                        }
                    }
                }
            }

            if ( var_23 )
            {
                if ( !var_28 )
                {
                    if ( !isdefined( level.bullet_damage_scalar ) )
                        level.bullet_damage_scalar = 1;

                    var_2 = var_2 * level.bullet_damage_scalar;
                }

                var_2 = var_2 * var_1 scripts\cp\perks\cp_perks::get_perk( "bullet_damage_scalar" );
            }

            if ( is_wearing_armor() )
            {
                if ( var_27 || var_8 == "torso_upper" || var_8 == "torso_lower" )
                {
                    var_2 = scripts\cp\cp_damage::handleapdamage( var_12, var_4, var_2, var_1 );
                    var_2 = var_2 * 0.5;
                }
            }

            if ( var_2 < var_13.health )
                var_1 scripts\cp\cp_persistence::give_player_currency( 10, "large", var_8 );
            else if ( var_24 )
            {
                if ( var_27 )
                    thread scripts\cp\so_laststand::died_poorly_funcs();

                thread scripts\cp\cp_achievement::aigroundturret_cancel( var_1, var_4, var_17 );
            }

            var_41 = var_1 scripts\cp\perks\cp_perks::get_perk( "short_range_damage_scalar" );

            if ( var_41 > 1 )
            {
                var_42 = distancesquared( var_1.origin, var_13.origin );

                if ( var_42 < 40000 )
                    var_2 = var_2 * var_41;
            }

            if ( istrue( var_1.gas_triggers_init ) )
            {
                var_43 = var_1.origin[2];
                var_44 = var_13.origin[2];

                if ( var_43 >= var_44 )
                {
                    var_45 = int( abs( var_43 - var_44 ) );
                    var_46 = int( var_45 / 64 );

                    if ( var_46 > 0 )
                        var_2 = var_2 * ( 1 + 0.4 * var_46 );
                }
            }
        }

        if ( !var_27 && var_31 )
            var_2 = self.health + 100;

        if ( isdefined( var_17 ) && var_17 == "tur_bradley_mp" && isdefined( var_4 ) && var_4 == "MOD_PROJECTILE_SPLASH" )
            var_2 = var_2 * 2;

        if ( isplayer( var_1 ) )
        {
            scripts\mp\brmatchdata::sethasdonecombat( var_1, 1 );

            if ( isdefined( var_1.pers["participation"] ) )
                var_1.pers["participation"]++;
            else
                var_1.pers["participation"] = 1;

            if ( isdefined( var_1.pers["periodic_xp_participation"] ) )
                var_1.pers["periodic_xp_participation"]++;
            else
                var_1.pers["periodic_xp_participation"] = 1;
        }

        var_47 = isdefined( var_4 ) && var_4 == "MOD_EXECUTION";

        if ( var_47 )
            var_1 thread scripts\cp\cp_player_battlechatter::ammobox_addrandomweapon();

        var_2 = scripts\cp\cp_damage::modifydamagegeneral( var_0, var_1, var_13, var_2, var_3, var_4, var_12, var_6, var_7, var_8 );

        if ( var_24 || var_25 || var_34 )
        {
            if ( isdefined( var_12 ) )
            {
                if ( var_25 )
                    var_1 = var_1.owner;

                addattacker( self, var_1, var_0, var_12, var_2, var_6, var_7, var_8, var_9, var_4 );
            }

            if ( var_2 >= var_13.health )
            {
                if ( var_12.basename == "none" )
                {
                    if ( isdefined( var_0 ) && isdefined( var_0.weapon_name ) )
                        var_12 = getcompleteweaponname( var_0.weapon_name );
                }

                var_48 = spawnstruct();
                var_48.einflictor = var_0;
                var_48.eattacker = var_1;
                var_48.idamage = var_2;
                var_48.idflags = var_3;
                var_48.smeansofdeath = var_4;
                var_48.sweapon = var_5;
                var_48.vpoint = var_6;
                var_48.vdir = var_7;
                var_48.shitloc = var_8;
                var_48.timeoffset = var_9;
                var_48.modelindex = var_10;
                var_48.partname = var_11;
                var_48.objweapon = var_12;
                thread ai_drop_func( var_48 );
            }
        }

        wait_to_play_intro_vo( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 );
        var_2 = int( min( var_2, var_13.maxhealth ) );

        if ( isdefined( level.updateondamagerelicsfunc ) )
            level thread [[ level.updateondamagerelicsfunc ]]( var_1, var_5, var_13, var_4, var_8, var_9 );

        scripts\cp\cp_damagefeedback::process_damage_feedback( var_0, var_1, var_2, var_3, var_4, var_5, var_7, var_7, var_8, var_9, self );

        if ( is_flashbang( var_17, var_12, var_0 ) && var_4 == "MOD_GRENADE_SPLASH" )
            var_13 notify( "flashbang", var_8, 1, undefined, var_1, "allies" );

        if ( is_gas( var_17 ) && var_4 == "MOD_GRENADE_SPLASH" )
            var_13 notify( "flashbang", var_8, 1, undefined, var_1, "allies" );

        if ( isdefined( var_13.unittype ) && isdefined( level.agent_funcs[var_13.unittype] ) && isdefined( level.agent_funcs[var_13.unittype]["on_damaged_finished"] ) )
        {
            var_13 [[ level.agent_funcs[var_13.unittype]["on_damaged_finished"] ]]( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, 0.0, var_10, var_11 );
            return;
        }

        var_13 [[ level.agent_funcs[var_13.agent_type]["on_damaged_finished"] ]]( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, 0.0, var_10, var_11 );
    }
}

pressure_timeout( var_0 )
{
    switch ( var_0 )
    {
        case "iw8_me_akimboblunt_mp":
        case "iw8_me_riotshield_mp":
            return 1;
    }

    return 0;
}

wait_to_play_intro_vo( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 )
{
    var_13 = self;
    var_13 endon( "death" );

    if ( !isplayer( var_1 ) )
        return;

    if ( var_2 >= var_13.health )
    {
        if ( isdefined( var_1.search_target_think ) && var_1.search_target_think.size > 0 )
        {
            if ( istrue( var_1.search_target_think[var_13 getentitynumber()] ) )
                return;
        }

        var_1 thread scripts\cp_mp\challenges::relic_nuketimer_timerloop( undefined, self, var_12, var_4, var_0, 0, var_8 );
        thread scripts\cp\so_trigger::onplayerkilled( var_0, var_1, var_2, var_3, var_4, var_12, var_8, var_1.modifiers );
    }
}

nuke_vault_oilfire_player_vision( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 )
{
    var_13 = var_12.basename;
    var_14 = 0;

    if ( isdefined( var_0 ) && ( issubstr( var_13, "thermite" ) || isdefined( var_12.magazine ) && issubstr( var_12.magazine, "boltfire" ) || isdefined( var_0.weapon_name ) && issubstr( var_0.weapon_name, "incendiary" ) ) )
    {
        var_14 = 1;
        var_15 = var_8 == "shield";

        if ( var_15 )
        {
            var_16 = scripts\engine\trace::create_character_contents();
            var_17 = vectornormalize( var_7 );
            var_18 = var_6 - var_17 * 12;
            var_19 = var_6 + var_17 * 12;
            var_20 = scripts\engine\trace::ray_trace_detail( var_18, var_19, undefined, var_16 );

            if ( var_20["fraction"] > 0 && var_20["fraction"] < 1 )
            {
                var_21 = var_6 - self.origin;
                var_21 = ( var_21[0], var_21[1], 0 );

                if ( vectordot( var_21, var_20["normal"] ) < 0 )
                    var_15 = 0;
            }
            else
                var_15 = 0;
        }

        if ( var_15 )
        {
            var_22 = var_0 getlinkedparent();

            if ( isdefined( var_22 ) && var_22 == self )
            {
                self.buildweaponfromrandomcategory = 1;
                self._id_126EC = 0;
            }
        }
        else if ( var_8 != "none" )
        {
            self.buildweaponfromrandomcategory = undefined;
            self._id_126EC = undefined;
        }
    }

    if ( var_8 == "shield" )
    {
        if ( var_14 )
            return 1;
    }
    else if ( var_8 == "none" && isdefined( var_0 ) )
    {
        var_23 = var_0 getlinkedparent();

        if ( istrue( self.buildweaponfromrandomcategory ) && var_14 && isdefined( var_23 ) && var_23 == self )
        {
            if ( !isdefined( self._id_126EE ) )
                self._id_126EE = [ var_0 ];
            else if ( !scripts\engine\utility::array_contains( self._id_126EE, var_0 ) )
                self._id_126EE[self._id_126EE.size] = var_0;

            self._id_126EC++;
            return 1;
        }
        else if ( issubstr( var_13, "molotov" ) )
        {
            var_24 = var_0.origin - self.origin;
            var_25 = vectornormalize( ( var_24[0], var_24[1], 0 ) );
            var_24 = vectornormalize( var_24 );

            if ( vectordot( anglestoforward( self.angles ), var_25 ) > 0.5 && -0.98 < var_24[2] && var_24[2] < 0.98 )
                return 1;
        }
    }

    if ( var_4 == "MOD_MELEE" )
    {
        if ( isdefined( var_1 ) )
            var_26 = vectornormalize( var_1.origin - self.origin );
        else
            var_26 = vectornormalize( var_6 - self.origin );

        var_27 = anglestoforward( self.angles );

        if ( vectordot( var_27, var_26 ) > 0.5 )
            return 1;
    }

    return 0;
}

animscripted_loop( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = var_0;

    switch ( var_2 )
    {
        case "rifle":
            var_5 = min( var_0, 84 );
            break;
        case "smg":
            var_5 = min( var_0, 110 );
            break;
        case "mg":
            var_5 = min( var_0, 105 );
            break;
        case "spread":
            var_5 = min( var_0, 84 );
            break;
        case "pistol":
            var_5 = min( var_0, 75 );
            break;
        case "sniper":
            var_5 = min( var_0, 130 );
            break;
        default:
            var_5 = var_0;
            break;
    }

    return var_0;
}

post_get_up_animation_function()
{
    return istrue( isdefined( self.unittype ) && self.unittype == "suicidebomber" );
}

disable_purchase_munitions()
{
    level endon( "game_ended" );
    level.bullet_damage_scalar = 1;

    for (;;)
    {
        var_0 = getdvarfloat( "scr_bullet_damage_scalar", 1.0 );

        if ( level.bullet_damage_scalar != var_0 )
            level.bullet_damage_scalar = var_0;

        wait 1;
    }
}

register_ai_drop_funcs()
{
    register_drop_func( "weapon", ::drop_weapon_func, ::should_drop_weapon, 0 );
}

register_drop_func( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( level.ai_drop_info ) )
        level.ai_drop_info = [];

    var_4 = spawnstruct();
    var_4.name = var_0;
    var_4.chance_func = var_2;
    var_4.func = var_1;
    var_4.score = 0;
    var_4.delay = var_3;
    var_4.next_chance = 0;
    level.ai_drop_info[level.ai_drop_info.size] = var_4;
}

ai_drop_func( var_0 )
{
    if ( !isdefined( level.ai_drop_info ) )
        return;

    if ( isdefined( level._id_12AF3 ) )
        [[ level._id_12AF3 ]]( self.origin, var_0 );

    if ( isdefined( self.force_drop ) )
    {
        var_1 = get_func_by_name( self.force_drop );
        self thread [[ var_1 ]]( var_0 );
    }
    else
        var_2 = check_for_drop( var_0 );
}

get_func_by_name( var_0 )
{
    for ( var_1 = 0; var_1 < level.ai_drop_info.size; var_1++ )
    {
        if ( level.ai_drop_info[var_1].name == var_0 )
            return level.ai_drop_info[var_1].func;
    }
}

drop_ready_item( var_0, var_1 )
{
    var_2 = gettime();
    self thread [[ var_0.func ]]( var_1 );
    var_0.score = 0;
    var_0.next_chance = var_2 + var_0.delay * 1000;
}

check_for_drop( var_0 )
{
    var_1 = gettime();
    var_2 = 0;
    var_3 = scripts\engine\utility::array_randomize( level.ai_drop_info );

    for ( var_4 = 0; var_4 < var_3.size; var_4++ )
    {
        var_5 = var_3[var_4];

        if ( !var_2 )
        {
            if ( var_1 > var_5.next_chance )
            {
                if ( var_5.score > 99 )
                {
                    drop_ready_item( var_5, var_0 );
                    var_2 = 1;
                    continue;
                }

                if ( [[ var_5.chance_func ]]( var_0 ) )
                {
                    drop_ready_item( var_5, var_0 );
                    var_2 = 1;
                }
            }
        }
    }

    return var_2;
}

drop_weapon_func( var_0 )
{
    if ( !istrue( var_0.eattacker.spawnflags_check ) )
        self.dropweapon = 1;

    if ( !isplayer( var_0.eattacker ) )
        return;

    if ( isdefined( var_0.eattacker.class ) && var_0.eattacker.class == "crusader" || isdefined( level.argshave ) )
    {
        if ( _id_11FCF( var_0.eattacker ) )
            drop_grenade( var_0 );
    }

    if ( var_0.eattacker scripts\cp\utility::_hasperk( "specialty_scavenger" ) )
    {
        if ( _id_11FD2( var_0.eattacker ) )
        {
            var_1 = self.origin - ( 10, 10, 0 );
            heli_anim( var_0, var_1 );
        }
    }
}

_id_11FD2( var_0 )
{
    if ( isdefined( self.chute ) )
        return 0;

    if ( !self isonground() )
        return 0;

    if ( isdefined( self.ridingvehicle ) )
        return 0;

    if ( !isdefined( var_0.requestgamerprofile ) )
    {
        var_0.requestgamerprofile = gettime();
        return 1;
    }

    var_1 = 10000;
    var_2 = gettime() - var_0.requestgamerprofile;

    if ( var_2 > var_1 )
    {
        var_0.requestgamerprofile = gettime();
        return 1;
    }

    return 0;
}

heli_anim( var_0, var_1 )
{
    var_2 = self.origin;

    if ( isdefined( var_1 ) )
        var_2 = var_1;

    var_3 = spawn( "script_model", var_2 );
    var_3 thread airlock_slot_think( var_0.eattacker );
}

airlock_slot_think( var_0 )
{
    self endon( "death" );

    foreach ( var_2 in level.players )
    {
        if ( var_2 != var_0 )
            self hidefromplayer( var_2 );
    }

    self setmodel( "equipment_scavenger_bag" );
    self.trigger = spawn( "trigger_radius", self.origin, 0, 30, 10 );
    thread scripts\cp\utility::delayentdelete( 20 );
    self.trigger thread scripts\cp\utility::delayentdelete( 20 );

    for (;;)
    {
        self.trigger waittill( "trigger", var_4 );

        if ( var_4 == var_0 )
        {
            var_4 playlocalsound( "weap_ammo_pickup" );
            var_4 module_has_data_for_call_count();
            var_4 thread scripts\cp\cp_damagefeedback::hudicontype( "scavenger" );
            self.trigger delete();
            self delete();
        }
    }
}

module_set_goal_radius()
{
    var_0 = self getweaponslistprimaries();

    foreach ( var_2 in var_0 )
    {
        if ( !scripts\cp\utility::is_valid_player() )
            continue;

        if ( weapontype( var_2 ) == "riotshield" )
            continue;

        if ( scripts\cp\cp_weapon::is_incompatible_weapon( var_2 ) )
            continue;

        if ( scripts\cp\cp_weapon::is_launcher( var_2 ) )
            continue;

        if ( cangive_ammo() )
        {
            var_3 = self getweaponammoclip( var_2 );
            var_4 = self getweaponammostock( var_2 );
            var_5 = weaponclipsize( var_2 );
            var_6 = var_3 + var_4 + var_5;

            if ( var_6 == var_5 )
                self setweaponammoclip( var_2, var_6 );
            else
            {
                self setweaponammoclip( var_2, var_5 );
                var_7 = var_6 - var_5;
                self setweaponammostock( var_2, var_7 );
            }
        }
    }
}

module_has_data_for_call_count()
{
    var_0 = 30;
    var_1 = 0;
    var_2 = self getcurrentprimaryweapon();

    if ( !scripts\cp\utility::is_valid_player() )
        var_1 = 1;

    if ( weapontype( var_2 ) == "riotshield" )
        var_1 = 1;

    if ( scripts\cp\cp_weapon::is_incompatible_weapon( var_2 ) )
        var_1 = 1;

    if ( scripts\cp\cp_weapon::is_launcher( var_2 ) )
        var_1 = 1;

    if ( !var_1 )
    {
        if ( cangive_ammo() )
        {
            var_0 = getammooverride( var_2 );
            var_3 = self getweaponammostock( var_2 );
            var_4 = weaponmaxammo( var_2 );
            var_5 = var_3 + var_0;
            var_6 = int( min( var_4, var_5 ) );
            self setweaponammostock( var_2, var_6 );
            return 1;
        }
    }

    var_7 = self getweaponslistprimaries();

    foreach ( var_2 in var_7 )
    {
        if ( !scripts\cp\utility::is_valid_player() )
            continue;

        if ( weapontype( var_2 ) == "riotshield" )
            continue;

        if ( scripts\cp\cp_weapon::is_incompatible_weapon( var_2 ) )
            continue;

        if ( scripts\cp\cp_weapon::is_launcher( var_2 ) )
            continue;

        if ( cangive_ammo() )
        {
            var_0 = getammooverride( var_2 );
            var_3 = self getweaponammostock( var_2 );
            var_4 = weaponmaxammo( var_2 );
            var_5 = var_3 + var_0;
            var_6 = int( min( var_4, var_5 ) );
            self setweaponammostock( var_2, var_6 );
            return 1;
        }
    }

    return 0;
}

getammooverride( var_0 )
{
    var_1 = var_0 getbaseweapon();
    var_2 = weaponclipsize( var_1 );
    var_3 = scripts\cp\utility::getweaponrootname( var_0 );
    var_4 = 30;
    var_5 = var_4;

    if ( var_0.isalternate )
    {
        var_6 = scripts\cp\utility::attachmentmap_tobase( var_0.underbarrel );

        switch ( var_6 )
        {
            case "glsemtex":
            case "glgas":
            case "gl":
            case "glsnap":
            case "glincendiary":
            case "glflash":
            case "glconc":
            case "glsmoke":
                var_5 = 1;
                break;
            case "ubshtgn":
                var_5 = 999;
                break;
            default:
                var_5 = 0;
                break;
        }
    }
    else
    {
        switch ( var_0.classname )
        {
            case "spread":
                switch ( var_3 )
                {
                    case "iw8_sh_charlie725":
                        var_5 = 6;
                        break;
                    case "iw8_sh_dpapa12":
                        var_5 = 8;
                        break;
                    default:
                        var_5 = int( min( var_2, var_4 ) );
                        break;
                }

                break;
            case "sniper":
                switch ( var_3 )
                {
                    case "iw8_sn_crossbow":
                        var_5 = 3;
                        break;
                    default:
                        var_5 = int( min( var_2, var_4 ) );
                        break;
                }

                break;
            default:
                var_5 = int( min( var_2, var_4 ) );
        }
    }

    return var_5;
}

cangive_ammo()
{
    var_0 = scripts\cp\utility::getvalidtakeweapon();
    var_1 = self getweaponammoclip( var_0 );
    var_2 = weaponclipsize( var_0 );
    var_3 = weaponmaxammo( var_0 );
    var_4 = self getweaponammostock( var_0 );

    if ( var_4 < var_3 || var_1 < var_2 )
        return 1;
    else
        return 0;
}

_id_11FCF( var_0 )
{
    if ( isdefined( self.chute ) )
        return 0;

    if ( !self isonground() )
        return 0;

    if ( isdefined( self.ridingvehicle ) )
        return 0;

    if ( !isdefined( var_0.reset_attacks_next_available_time ) )
    {
        var_0.reset_attacks_next_available_time = gettime();
        return 1;
    }

    var_1 = 10000;
    var_2 = gettime() - var_0.reset_attacks_next_available_time;

    if ( var_2 > var_1 )
    {
        var_0.reset_attacks_next_available_time = gettime();
        return 1;
    }

    return 0;
}

drop_grenade( var_0 )
{
    var_1 = self.origin + ( 10, 10, 0 );
    headoffset( var_0, var_1 );
}

headoffset( var_0, var_1, var_2 )
{
    var_3 = self.origin;

    if ( isdefined( var_1 ) )
        var_3 = var_1;

    var_4 = scripts\cp\utility::createhintobject( var_3, "HINT_BUTTON", "cp_crate_icon_lethalrefill", &"COOP_GAME_PLAY/PICK_GRENADE", 5, "duration_short", "show", 200, undefined, 100, 360 );
    var_4 setmodel( "offhand_wm_grenade_mike67" );
    var_4 thread activate_grenade_object();
    var_4 thread scripts\cp\utility::delayentdelete( 30 );

    if ( isdefined( var_2 ) )
    {
        foreach ( var_6 in level.players )
        {
            if ( var_6 != var_2 )
                var_4 hidefromplayer( var_6 );
        }
    }
}

activate_grenade_object()
{
    self endon( "death" );

    for (;;)
    {
        self waittill( "trigger", var_0 );
        var_0 forceplaygestureviewmodel( "ges_pickup" );
        var_0 playlocalsound( "weap_ammo_pickup" );

        foreach ( var_2 in var_0.powers )
        {
            if ( var_2.slot == "primary" )
            {
                var_0 notify( "pickup_equipment", var_2.weaponuse );
                waitframe();
            }
        }

        self delete();
    }
}

is_wearing_armor()
{
    if ( self.unittype == "juggernaut" )
        return 1;
    else if ( scripts\cp\cp_modular_spawning::is_armored() )
        return 1;
    else
        return 0;
}

should_do_damage_checks( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( var_3 ) )
        return 0;
    else if ( var_0 != var_5 && isdefined( var_0.team ) && var_0.team == var_5.team )
        return 0;
    else if ( isdefined( level.should_do_damage_check_func ) && ![[ level.should_do_damage_check_func ]]( var_0, var_1, var_2, var_3, var_4, var_5 ) )
        return 0;

    if ( isdefined( level._id_11FCD ) )
    {
        if ( isarray( level._id_11FCD ) && level._id_11FCD.size > 0 )
        {
            foreach ( var_7 in level._id_11FCD )
            {
                if ( ![[ var_7 ]]( var_0, var_1, var_2, var_3, var_4, var_5 ) )
                    return 0;
            }
        }
    }

    return 1;
}

ishighdamageweapon( var_0 )
{
    return var_0.classname == "sniper" || var_0.classname == "dmr";
}

should_drop_weapon( var_0 )
{
    var_1 = getdvarint( "scr_force_weapon_drop" );

    if ( var_1 )
        return 1;

    if ( !isdefined( level.weapon_drop_cooldown ) )
        return 0;

    if ( isdefined( self.unittype ) && self.unittype == "suicidebomber" )
        return 0;

    if ( !isdefined( var_0.eattacker ) )
        return 0;

    var_2 = 5;
    var_3 = gettime();
    var_4 = var_0.eattacker getentitynumber();

    if ( !isdefined( level.weapon_drop_cooldown[var_4] ) )
    {
        level.weapon_drop_cooldown[var_4] = var_3 + var_2 * 1000;
        return 1;
    }

    if ( var_3 > level.weapon_drop_cooldown[var_4] )
    {
        level.weapon_drop_cooldown[var_4] = var_3 + var_2 * 1000;
        return 1;
    }

    return 0;
}

is_flashbang( var_0, var_1, var_2 )
{
    if ( isdefined( var_1.underbarrel ) )
    {
        var_3 = scripts\cp\utility::attachmentmap_tobase( var_1.underbarrel );

        if ( var_3 == "glflash" || var_3 == "glconc" )
            return 1;
    }

    return var_0 == "flash_grenade_mp";
}

is_gas( var_0 )
{
    return var_0 == "gas_mp";
}

callbacksoldieragentgametypedamagefinished( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13, var_14 )
{
    if ( var_4 == "MOD_SUICIDE" )
        return;

    var_3 = 0;

    if ( !isdefined( self.painsound ) )
        return;

    if ( gettime() > self.next_dmg_sound )
    {
        if ( soundexists( self.painsound ) )
            self playsound( self.painsound );

        self.next_dmg_sound = gettime() + 500;
    }
}

callbacksoldieragentgametypekilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 )
{
    scripts\cp\cp_agent_utils::deactivateagent();

    if ( isdefined( level.spawnloopupdatefunc ) )
        [[ level.spawnloopupdatefunc ]]( var_1, var_4 );

    if ( post_get_up_animation_function() )
    {
        if ( !istrue( self.died_poorly ) )
            level notify( "grenade_exploded_during_stealth", self.origin, "suicide_vest", loadout_fixcopiedclassstruct( var_0, var_1, self.origin ) );
    }

    if ( var_3 == "MOD_SUICIDE" )
        return;

    if ( istrue( self.marked_for_death ) )
        self.marked_for_death = undefined;

    if ( isdefined( self.get_center_loc_among_target_players ) )
    {
        var_9 = spawnstruct();
        var_9.einflictor = var_0;
        var_9.eattacker = var_1;
        var_9.idamage = var_2;
        var_9.smeansofdeath = var_3;
        var_9.sweapon = var_4;
        var_9.vdir = var_5;
        var_9.shitloc = var_6;
        var_9.timeoffset = var_7;
        var_9.deathanimduration = var_8;
        thread [[ self.get_center_loc_among_target_players ]]( var_9 );
    }

    if ( isplayer( var_1 ) )
    {
        level notify( "zombie_killed_by", var_1 );
        level thread handle_death_sounds( var_1, self, var_3 );
        self.died_poorly = undefined;
        var_10 = scripts\cp\cp_endgame::get_current_zone( var_1 );
        var_11 = 1;
        scripts\cp\cp_analytics::scriptableusepart( var_1, self, var_4 );

        if ( isdefined( var_1.perk_data ) && var_1 scripts\cp\utility::_hasperk( "specialty_chain_killstreaks" ) )
        {
            var_12 = 10;
            var_13 = var_12 * var_1.perk_data["super_fill_scalar"];
            var_1 scripts\cp\coop_super::increase_super_progress( var_13 );
        }
    }

    if ( scripts\cp\cp_relics::bot1() )
    {
        if ( isplayer( var_1 ) && isdefined( level.updateonkillrelicsfunc ) )
            level thread [[ level.updateonkillrelicsfunc ]]( var_4, var_1, self, var_3, var_6 );
    }

    if ( isdefined( level.removefromtargetmarkeronkillfunc ) )
        level thread [[ level.removefromtargetmarkeronkillfunc ]]( self );

    if ( isdefined( self.attackers ) )
    {
        foreach ( var_15 in self.attackers )
        {
            if ( !isdefined( _validateattacker( var_15 ) ) )
                continue;

            if ( var_15 == var_1 )
                continue;

            if ( self == var_15 )
                continue;

            if ( isdefined( level.assists_disabled ) )
                continue;

            var_16 = undefined;

            if ( isdefined( self.attackerdata ) )
            {
                var_17 = self.attackerdata[var_15.guid];

                if ( isdefined( var_17 ) )
                    var_16 = var_17.objweapon;
            }

            var_18 = 0;

            if ( self.attackerdata[var_15.guid].damage >= 35 )
                var_18 = 1;

            if ( self.attackerdata[var_15.guid].damage >= 70 )
                var_18 = 2;

            var_15 thread scripts\cp\cp_gamescore::processassist( self, var_16, var_18 );
        }
    }

    give_attacker_kill_rewards( var_0, var_1, var_6, var_3, var_4 );
    var_20 = 0;
    scripts\cp\cp_damagefeedback::process_damage_feedback( var_0, var_1, var_2, var_20, var_3, var_4, var_5, var_5, var_6, var_7, self );
    scripts\cp\cp_merits::process_agent_on_killed_merits( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 );
    level thread scripts\cp\utility::add_to_notify_queue( "ai_killed", self.origin, var_4, var_3, var_1, self, self.team );
}

_id_127C3()
{
    self endon( "death_or_disconnect" );
    self notify( "stop_tracking_consec_kills" );
    self endon( "stop_tracking_consec_kills" );

    for (;;)
    {
        level waittill( "ai_killed", var_0, var_1, var_2, var_3, var_4, var_5 );

        if ( !isdefined( self.extract_dialogue_played ) )
            self.extract_dialogue_played = 1;
        else
            self.extract_dialogue_played = self.extract_dialogue_played + 1;

        thread _id_1272C();
    }
}

_id_1272C()
{
    self endon( "death_or_disconnect" );
    self notify( "stop_timeout_consec_kills" );
    self endon( "stop_timeout_consec_kills" );
    wait( laststandgiveloadoutonrevive() );
    self.extract_dialogue_played = undefined;
}

laststandgiveloadoutonrevive()
{
    var_0 = 3;

    if ( scripts\cp\utility::_hasperk( "specialty_killstreak_to_scorestreak" ) )
        var_0 = var_0 + 3;

    return var_0;
}

handle_death_sounds( var_0, var_1, var_2 )
{
    if ( !scripts\engine\utility::isbulletdamage( var_2 ) )
        return;

    if ( isdefined( var_1.deathsound ) && soundexists( var_1.deathsound ) )
        playsoundatpos( var_1.origin, var_1.deathsound );

    var_3 = var_1;

    if ( var_2 == "MOD_HEAD_SHOT" )
    {
        var_3 playsoundtoplayer( "bullet_impact_headshot", var_0 );
        var_3 playsoundtoteam( "bullet_impact_headshot_npc", var_0.team, var_0 );
    }
    else
    {
        var_3 playsoundtoplayer( "mp_kill_alert", var_0 );
        var_3 playsoundtoteam( "mp_hit_alert_final_npc", var_0.team, var_0 );
    }
}

give_attacker_kill_rewards( var_0, var_1, var_2, var_3, var_4 )
{
    if ( !isdefined( var_1 ) )
        return;

    if ( isdefined( self.team ) && isdefined( var_1.team ) && self.team == var_1.team )
        return;

    if ( !isdefined( self.agent_type ) )
        return;

    var_5 = scripts\mp\mp_agent::get_agent_type( self );
    var_6 = getdvarint( "scr_agent_points_override", 0 );

    if ( var_6 != 0 )
        var_7 = var_6;
    else
        var_7 = level.agent_definition[var_5]["reward"];

    var_8 = level.agent_definition[var_5]["xp"];
    var_9 = 0;
    var_10 = post_get_up_animation_function();
    var_11 = isdefined( var_4 ) && ( var_4.basename == "incendiary_ammo_mp" || var_4.basename == "slayer_ammo_mp" );

    if ( isdefined( var_1.classname ) && var_1.classname == "trigger_radius" )
    {
        if ( isdefined( level.consumable_cash_scalar ) )
            var_12 = var_7 * ( level.cash_scalar + level.consumable_cash_scalar );
        else
            var_12 = var_7 * level.cash_scalar;

        foreach ( var_14 in level.players )
        {
            if ( !var_14 scripts\cp\utility::is_valid_player() )
                continue;

            if ( isdefined( level.zombie_xp ) )
                var_14 scripts\cp\cp_persistence::give_player_xp( int( var_8 ) );

            if ( istrue( level.special_event ) )
                continue;

            var_15 = "large";
            var_2 = "none";
            var_14 scripts\cp\cp_persistence::give_player_currency( var_12, var_15, var_2, 1, "crafted" );
        }

        return;
    }

    if ( !isplayer( var_1 ) && ( !isdefined( var_1.owner ) || !isplayer( var_1.owner ) ) )
        return;

    if ( isdefined( var_1.owner ) )
    {
        var_1 = var_1.owner;
        var_9 = 1;
    }

    if ( !var_11 && ( var_5 == "generic_zombie" || var_5 == "fast_zombie" || var_5 == "zombie_cop" ) )
    {
        if ( scripts\cp\utility::isheadshot( var_4, var_2, var_3, var_1 ) && !var_9 && scripts\engine\utility::isbulletdamage( var_3 ) && !var_10 )
        {
            var_7 = int( 100 );
            var_8 = int( 75 );
        }

        if ( isdefined( var_3 ) && var_3 == "MOD_MELEE" && !issubstr( var_4.basename, "axe" ) )
        {
            var_7 = int( 130 );
            var_8 = int( 100 );
        }
    }

    if ( isplayer( var_1 ) )
    {
        if ( !istrue( var_1.pers["ignoreWeaponMatchBonus"] ) && ( scripts\cp\cp_weapon::iscacprimaryweapon( var_4 ) || scripts\cp\cp_weapon::iscacsecondaryweapon( var_4 ) ) )
        {
            if ( !isdefined( var_1.pers["weaponMatchBonusKills"] ) )
                var_1.pers["weaponMatchBonusKills"] = 1;
            else
                var_1.pers["weaponMatchBonusKills"]++;

            if ( var_1.pers["weaponMatchBonusKills"] > scripts\cp\cp_weaponrank::managecontrolledcallbacktimeout() )
            {
                var_1.pers["ignoreWeaponMatchBonus"] = 1;
                var_1.pers["weaponMatchBonusKills"] = undefined;
                var_1.pers["killsPerWeapon"] = undefined;
            }
            else
            {
                if ( !isdefined( var_1.pers["killsPerWeapon"] ) )
                    var_1.pers["killsPerWeapon"] = [];

                var_17 = scripts\cp\utility::getweaponrootname( var_4 );
                var_18 = 0;

                foreach ( var_21, var_20 in var_1.pers["killsPerWeapon"] )
                {
                    if ( var_21 == var_17 )
                    {
                        var_20.killcount++;
                        var_18 = 1;
                        break;
                    }
                }

                if ( !var_18 )
                {
                    var_20 = spawnstruct();
                    var_20.killcount = 1;
                    var_20.basename = var_4.basename;
                    var_20.tac_cover_on_destroyed_by_mover = var_1.pers["killsPerWeapon"].size;
                    var_1.pers["killsPerWeapon"][var_17] = var_20;
                }
            }
        }
    }

    if ( isdefined( level.kill_reward_func ) )
        var_7 = [[ level.kill_reward_func ]]( var_0, var_1, var_2, var_3, var_4, var_5, var_7 );

    if ( isdefined( var_7 ) )
        givekillreward( var_0, var_1, var_7, var_8, "large", var_2, var_4, var_3 );
}

givekillreward( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    if ( isdefined( level.consumable_cash_scalar ) )
        var_2 = var_2 * ( level.cash_scalar + level.consumable_cash_scalar );
    else
        var_2 = var_2 * level.cash_scalar;

    var_1 thread giveplayerbonuscash( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 );
    var_1 scripts\cp\cp_persistence::record_player_kills( var_6, var_5, var_7, var_1 );

    if ( isdefined( self.shared_damage_points ) )
    {
        foreach ( var_9 in level.players )
        {
            if ( !var_9 scripts\cp\utility::is_valid_player() )
                continue;

            if ( istrue( level.special_event ) )
                continue;

            var_9 scripts\cp\cp_persistence::give_player_currency( var_2, var_4, var_5, 1, "crafted" );
        }
    }
    else if ( should_get_currency_from_kill( var_0, var_1, var_6 ) )
        var_1 scripts\cp\cp_persistence::give_player_currency( var_2, var_4, var_5, 1 );

    if ( !scripts\cp\utility::prematchintiallandingcomplete() )
        var_1 thread scripts\mp\brmatchdata::giveunifiedpoints( "kill", var_6, undefined, undefined, self );
}

giveplayerbonuscash( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    if ( should_get_currency_from_kill( var_0, var_1, var_6 ) )
    {
        if ( var_1 scripts\cp\utility::is_consumable_active( "extra_sniping_points" ) && scripts\engine\utility::isbulletdamage( var_7 ) && var_6.classname == "weapon_sniper" && checkaltmodestatus( var_6 ) )
        {
            var_8 = 300;

            if ( var_6 == "iw7_shared_fate_weapon" )
                var_1 scripts\cp\utility::notify_used_consumable( "extra_sniping_points" );
            else
            {
                var_1 scripts\cp\utility::notify_used_consumable( "extra_sniping_points" );
                var_1 thread delaygivecurrency( var_8, var_4, var_5, "bonus", 0.15 );
            }
        }

        if ( isplayer( var_1 ) && isdefined( var_1.cash_scalar ) )
        {
            if ( isdefined( var_1.cash_scalar_weapon ) && var_1.cash_scalar_weapon == scripts\cp\utility::getrawbaseweaponname( var_6 ) )
            {
                var_9 = int( var_2 * var_1.cash_scalar - var_2 );
                var_1 thread delaygivecurrency( var_9, var_4, var_5, "bonus", 0.25 );
            }

            if ( isdefined( var_1.cash_scalar_alt_weapon ) && var_1.cash_scalar_alt_weapon == scripts\cp\utility::getrawbaseweaponname( var_6 ) && istrue( var_6.isalternate ) && istrue( var_1.alt_mode_passive ) )
            {
                var_9 = int( var_2 * var_1.cash_scalar - var_2 );
                var_1 thread delaygivecurrency( var_9, var_4, var_5, "bonus", 0.25 );
            }
        }
    }
}

delaygivecurrency( var_0, var_1, var_2, var_3, var_4 )
{
    self endon( "disconnect" );
    wait( var_4 );
    scripts\cp\cp_persistence::give_player_currency( var_0, var_1, var_2, 1, var_3 );
}

should_get_currency_from_kill( var_0, var_1, var_2 )
{
    if ( isplayer( var_1 ) && scripts\cp\cp_laststand::player_in_laststand( var_1 ) )
        return 0;

    if ( scripts\cp\utility::is_trap( var_0, var_2 ) )
        return 0;

    if ( istrue( level.special_event ) )
        return 0;

    return 1;
}

checkaltmodestatus( var_0 )
{
    if ( !isdefined( var_0 ) || var_0 == "none" )
        return 0;

    var_1 = scripts\cp\utility::getbaseweaponname( var_0 );

    switch ( var_1 )
    {
        case "iw7_m8":
            if ( scripts\cp\utility::isaltmodeweapon( var_0 ) )
                return 0;
            else
                return 1;
        default:
            return 1;
    }
}

addattacker( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    if ( !isdefined( var_0.attackerdata ) )
        var_0.attackerdata = [];

    if ( !isdefined( var_1.guid ) && ( isagent( var_1 ) || isplayer( var_1 ) ) )
        var_1.guid = var_1 scripts\cp\utility\player::getuniqueid();

    if ( !isdefined( var_1.guid ) )
        return;

    if ( !isdefined( var_0.attackerdata[var_1.guid] ) )
    {
        var_0.attackers[var_1.guid] = var_1;
        var_0.attackerdata[var_1.guid] = spawnstruct();
        var_0.attackerdata[var_1.guid].damage = 0;
        var_0.attackerdata[var_1.guid].attackerent = var_1;
        var_0.attackerdata[var_1.guid].firsttimedamaged = gettime();
        var_0.attackerdata[var_1.guid].hitcount = 1;
    }
    else
        var_0.attackerdata[var_1.guid].hitcount++;

    if ( scripts\cp\cp_weapon::iscacprimaryweapon( var_3 ) && !scripts\cp\cp_weapon::iscacsecondaryweapon( var_3 ) )
        var_0.attackerdata[var_1.guid].diddamagewithprimary = 1;

    if ( isdefined( var_9 ) && var_9 != "MOD_MELEE" )
        var_0.attackerdata[var_1.guid].didnonmeleedamage = 1;

    var_10 = scripts\cp\utility::getequipmenttype( var_3.basename );

    if ( isdefined( var_10 ) )
    {
        if ( var_10 == "lethal" )
            var_0.attackerdata[var_1.guid].diddamagewithlethalequipment = 1;

        if ( var_10 == "tactical" )
            var_0.attackerdata[var_1.guid].diddamagewithtacticalequipment = 1;
    }

    var_0.attackerdata[var_1.guid].damage = var_0.attackerdata[var_1.guid].damage + var_4;
    var_0.attackerdata[var_1.guid].weapon = createheadicon( var_3 );
    var_0.attackerdata[var_1.guid].objweapon = var_3;
    var_0.attackerdata[var_1.guid].vpoint = var_5;
    var_0.attackerdata[var_1.guid].vdir = var_6;
    var_0.attackerdata[var_1.guid].shitloc = var_7;
    var_0.attackerdata[var_1.guid].psoffsettime = var_8;
    var_0.attackerdata[var_1.guid].smeansofdeath = var_9;
    var_0.attackerdata[var_1.guid].attackerent = var_1;
    var_0.attackerdata[var_1.guid].lasttimedamaged = gettime();

    if ( isdefined( var_2 ) && !isplayer( var_2 ) && isdefined( var_2.primaryweapon ) )
        var_0.attackerdata[var_1.guid].sprimaryweapon = var_2.primaryweapon;
    else if ( isdefined( var_1 ) && isplayer( var_1 ) && !nullweapon( var_1 getcurrentprimaryweapon() ) )
        var_0.attackerdata[var_1.guid].sprimaryweapon = createheadicon( var_1 getcurrentprimaryweapon() );
    else
        var_0.attackerdata[var_1.guid].sprimaryweapon = undefined;
}

loadout_fixcopiedclassstruct( var_0, var_1, var_2 )
{
    if ( isplayer( var_1 ) )
        return var_1.name;

    if ( isplayer( var_0 ) )
        return var_0.name;

    if ( isdefined( var_0.owner ) && isplayer( var_0.owner ) )
        return var_0.owner.name;

    var_3 = scripts\engine\utility::getclosest( var_2, level.players );
    return var_3.name;
}

_validateattacker( var_0 )
{
    if ( isagent( var_0 ) && ( !isdefined( var_0.isactive ) || !var_0.isactive ) )
        return undefined;

    if ( isagent( var_0 ) && !isdefined( var_0.classname ) )
        return undefined;

    return var_0;
}
