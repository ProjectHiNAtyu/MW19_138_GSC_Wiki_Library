// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

vehicle_damage_setcandamage( var_0 )
{
    var_1 = self getlinkedchildren( 1 );

    if ( isdefined( var_1 ) )
    {
        foreach ( var_3 in var_1 )
        {
            if ( isdefined( var_3.code_classname ) && var_3.code_classname == "misc_turret" )
            {
                if ( var_0 )
                {
                    var_3 thread vehicle_damage_keepturretalive( self );
                    continue;
                }

                var_3 vehicle_damage_keepturretaliveend();
            }
        }
    }

    self setcandamage( var_0 );
    vehicle_damage_cleareventlog( self );
}

vehicle_damage_getleveldataforvehicle( var_0, var_1, var_2 )
{
    var_3 = vehicle_damage_getleveldata();
    var_4 = var_3.vehicledata[var_0];

    if ( !isdefined( var_4 ) )
    {
        if ( istrue( var_1 ) )
        {
            var_4 = spawnstruct();
            var_3.vehicledata[var_0] = var_4;
            var_4.generatespawnpoint = [];
            var_4.class = "none";
            var_4.oldbranchents = undefined;
            var_4.wait_spawn_sidehouse_trucks = undefined;
            var_4.onattackerdamagenottracked = undefined;
            var_4.currentbestdist = undefined;
            var_4.visualpercents = [];
            var_4.visualcallbacks = [];
            var_4.visualclearcallbacks = [];
            var_4.visualhighesttolowest = undefined;
        }
        else if ( !istrue( var_2 ) )
        {

        }
    }

    return var_4;
}

_id_12C2D( var_0, var_1, var_2 )
{
    var_3 = var_0.damagedata;

    if ( !isdefined( var_3 ) )
    {
        if ( istrue( var_1 ) )
        {
            var_3 = spawnstruct();
            var_0.damagedata = var_3;
            var_3.getknivesoutsetting = undefined;
            var_3.getkothlocations = undefined;
            var_3.getjuggmazebutton = undefined;
            var_3.getjuggmazespawnpoint = undefined;
            var_3.on_min = undefined;
            var_3.onarmorboxusedbyplayer = undefined;
            var_3.on_killed_tutorial = undefined;
            var_3.on_max = undefined;
        }
        else if ( !istrue( var_2 ) )
        {

        }
    }

    return var_3;
}

_id_12C4D( var_0 )
{
    return _id_12C2D( var_0, 1 );
}

_id_12C23( var_0 )
{
    var_0.damagedata = undefined;
}

_id_12C2E( var_0, var_1, var_2, var_3 )
{
    var_4 = vehicle_damage_getleveldataforvehicle( var_0, var_2, var_3 );
    var_5 = var_4.generatespawnpoint[var_1];

    if ( !isdefined( var_5 ) )
    {
        if ( istrue( var_2 ) )
        {
            var_5 = spawnstruct();
            var_4.generatespawnpoint[var_1] = var_5;
            var_5.maxhealth = undefined;
            var_5.stoppingpower_clearhcronperkscleared = undefined;
            var_5.stoppingpower_isvalidprimaryoralt = undefined;
        }
        else if ( !istrue( var_3 ) )
        {

        }
    }

    return var_5;
}

_id_12C4E( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = vehicle_damage_getleveldataforvehicle( var_0, 1 );
    var_5.visualpercents[var_4] = var_1;
    var_5.visualcallbacks[var_4] = var_2;
    var_5.visualclearcallbacks[var_4] = var_3;
}

_id_12C24( var_0, var_1 )
{
    var_2 = vehicle_damage_getleveldataforvehicle( var_0, 0 );

    if ( isdefined( var_2 ) )
    {
        var_2.visualpercents[var_1] = undefined;
        var_2.visualcallbacks[var_1] = undefined;
        var_2.visualclearcallbacks[var_1] = undefined;
    }
}

_id_12C4C( var_0 )
{
    var_1 = vehicle_damage_getleveldataforvehicle( var_0, 1 );
    var_1.visualhighesttolowest = 1;
    _id_12C4E( var_0, 0.85, ::_id_12C3D, ::vehicle_damage_lightvisualclearcallback, "light" );
    _id_12C4E( var_0, 0.5, ::_id_12C40, ::vehicle_damage_mediumvisualclearcallback, "medium" );
    _id_12C4E( var_0, 0.15, ::_id_12C38, ::vehicle_damage_heavyvisualclearcallback, "heavy" );
    _id_12C4E( var_0, 0.15, ::_id_12C27, ::_id_12C28, "engine" );
}

_id_12C22( var_0 )
{
    var_1 = vehicle_damage_getleveldataforvehicle( var_0, 1 );
    var_1.visualhighesttolowest = undefined;
    _id_12C24( var_0, "light" );
    _id_12C24( var_0, "medium" );
    _id_12C24( var_0, "heavy" );
    _id_12C24( var_0, "engine" );
}

vehicle_damage_clearvisuals( var_0, var_1, var_2 )
{
    var_3 = vehicle_damage_getleveldataforvehicle( self.vehiclename, 0, 1 );

    if ( isdefined( var_3 ) )
    {
        foreach ( var_5 in var_3.visualclearcallbacks )
            self thread [[ var_5 ]]( var_0, var_1, var_2 );
    }
}

_id_12C4F()
{
    _id_12C1E( self.maxhealth );
}

_id_12C1E( var_0 )
{
    self.health = int( min( self.health + var_0, self.maxhealth ) );
    var_1 = vehicle_damage_getleveldataforvehicle( self.vehiclename, undefined, 1 );

    if ( !isdefined( var_1 ) )
        return;

    if ( level.gametype == "br" )
        _id_12C5F();
    else
        _id_12C60( undefined, 0, 1 );

    scripts\cp_mp\utility\vehicle_omnvar_utility::vehomn_updateomnvarsondamage( self );
}

_id_12C41( var_0, var_1, var_2 )
{
    var_3 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getoccupantseat( var_0, var_1 );
    var_4 = vehicle_damage_getleveldataforvehicle( var_0.vehiclename );

    if ( isdefined( var_3 ) )
    {
        if ( isdefined( var_4.startholowatchvfx ) && isdefined( var_4.startholowatchvfx[var_3] ) )
            var_2 = var_2 * var_4.startholowatchvfx[var_3];

        if ( isdefined( var_4.starthacktimer ) && isdefined( var_4.starthacktimer[var_3] ) )
            var_2 = clamp( var_2, 0, var_4.starthacktimer[var_3] );
    }

    return var_2;
}

vehicle_damage_init()
{
    var_0 = spawnstruct();
    level.vehicle.damage = var_0;
    var_0.vehicledata = [];
    var_0.wait_spawn_sidehouse_trucks = getdvarint( "scr_vehicleDamageStatePristineHealthAdd", 125 );
    var_0.onattackerdamagenottracked = getdvarint( "scr_vehicleDamageStateHeavyHealthAdd", 350 );
    var_0.setroundwinstreakspecialcamos = getdvarfloat( "scr_vehicleDamageStateMediumHealthRatio", 0.5 );
    var_0.currentbestdist = getdvarfloat( "scr_vehicleDamageBurnDownTime", 8 );
    _id_12C3E();
    vehicle_damage_initdebug();

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "vehicle_damage", "init" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "vehicle_damage", "init" ) ]]();

    if ( level.gametype == "br" )
        _id_12C3A();
    else
        _id_12C39();

    _id_12C3B();
}

_id_12C3E()
{
    var_0 = vehicle_damage_getleveldata();
    var_1 = spawnstruct();
    var_0.table = var_1;
    var_1.shownonscriptableextracticons = [];
    var_1.shownonspectatingwinnersplash = [];
    var_1.pasystems = [];
    var_1.patch_collisions_crates = [];
    var_1._id_120A0 = [];
    var_1._id_120A1 = [];
    var_2 = [];
    var_2["class"] = [];
    var_2["vehicle"] = [];
    var_3 = [];
    var_3["weaponMod"] = [];
    var_3["weaponHPA"] = [];
    var_3["weaponSkipBurnDown"] = [];

    if ( getdvar( "scr_vehicle_damage_table", "" ) != "" )
        var_1 = getdvar( "scr_vehicle_damage_table", "" );
    else if ( level.gametype == "br" )
        var_1 = "mp_cp/vehicleDamageTable_br.csv";
    else
        var_1 = "mp_cp/vehicleDamageTable.csv";

    var_4 = undefined;
    var_5 = tablelookupgetnumcols( var_1 );

    for ( var_6 = 1; var_6 < var_5; var_6++ )
    {
        var_7 = tablelookupbyrow( var_1, 0, var_6 );

        if ( isdefined( var_7 ) && var_7 != "" )
        {
            if ( getsubstr( var_7, 0, 1 ) == "*" )
            {
                var_4 = getsubstr( var_7, 1, var_7.size );
                continue;
            }

            if ( isdefined( var_2[var_4] ) )
                var_2[var_4][var_7] = var_6;
        }
    }

    var_8 = undefined;
    var_9 = 0;
    var_10 = tablelookupgetnumrows( var_1 );

    for ( var_9 = 0; var_9 < var_10; var_9++ )
    {
        var_11 = tablelookupbyrow( var_1, var_9, 1 );

        if ( isdefined( var_11 ) && var_11 != "" )
        {
            if ( getsubstr( var_11, 0, 1 ) == "*" )
            {
                var_8 = getsubstr( var_11, 1, var_11.size );
                continue;
            }

            if ( isdefined( var_3[var_8] ) )
                var_3[var_8][var_11] = var_9;
        }
    }

    foreach ( var_8, var_13 in var_3 )
    {
        foreach ( var_11, var_15 in var_13 )
        {
            foreach ( var_4, var_17 in var_2 )
            {
                foreach ( var_7, var_19 in var_17 )
                {
                    var_20 = tablelookup( var_1, 0, var_15, var_19 );

                    if ( isdefined( var_20 ) && var_20 != "" )
                        _id_12C3F( var_20, var_11, var_8, var_7, var_4 );
                }
            }
        }
    }
}

_id_12C3F( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = vehicle_damage_getleveldata();
    var_6 = var_5.table;

    if ( var_2 == "weaponMod" )
    {
        var_7 = float( var_0 );

        if ( var_4 == "class" )
        {
            if ( !isdefined( var_6.shownonscriptableextracticons[var_3] ) )
                var_6.shownonscriptableextracticons[var_3] = [];

            var_6.shownonscriptableextracticons[var_3][var_1] = var_7;
        }
        else if ( var_4 == "vehicle" )
        {
            if ( !isdefined( var_6.shownonspectatingwinnersplash[var_3] ) )
                var_6.shownonspectatingwinnersplash[var_3] = [];

            var_6.shownonspectatingwinnersplash[var_3][var_1] = var_7;
        }
    }

    if ( var_2 == "weaponHPA" )
    {
        var_7 = int( var_0 );

        if ( var_4 == "class" )
        {
            if ( !isdefined( var_6.pasystems[var_3] ) )
                var_6.pasystems[var_3] = [];

            var_6.pasystems[var_3][var_1] = var_7;
        }
        else if ( var_4 == "vehicle" )
        {
            if ( !isdefined( var_6.patch_collisions_crates[var_3] ) )
                var_6.patch_collisions_crates[var_3] = [];

            var_6.patch_collisions_crates[var_3][var_1] = var_7;
        }
    }

    if ( var_2 == "weaponSkipBurnDown" )
    {
        var_7 = int( var_0 ) != 0;

        if ( var_4 == "class" )
        {
            if ( !isdefined( var_6._id_120A0[var_3] ) )
                var_6._id_120A0[var_3] = [];

            var_6._id_120A0[var_3][var_1] = var_7;
        }
        else if ( var_4 == "vehicle" )
        {
            if ( !isdefined( var_6._id_120A1[var_3] ) )
                var_6._id_120A1[var_3] = [];

            var_6._id_120A1[var_3][var_1] = var_7;
        }
    }
}

_id_12C1F( var_0, var_1 )
{
    var_2 = vehicle_damage_getleveldata();
    var_3 = var_2.table;
    var_4 = vehicle_damage_getleveldataforvehicle( var_0, undefined, var_1 );

    if ( !isdefined( var_4 ) )
        return;

    var_5 = var_4.class;

    if ( isdefined( var_3.shownonscriptableextracticons[var_5] ) )
    {
        foreach ( var_8, var_7 in var_3.shownonscriptableextracticons[var_5] )
            _id_12C59( var_8, var_7, 0, var_0 );
    }

    if ( isdefined( var_3.shownonspectatingwinnersplash[var_0] ) )
    {
        foreach ( var_8, var_7 in var_3.shownonspectatingwinnersplash[var_0] )
            _id_12C59( var_8, var_7, 0, var_0 );
    }

    if ( isdefined( var_3.pasystems[var_5] ) )
    {
        foreach ( var_12, var_11 in var_3.pasystems[var_5] )
        {
            _id_12C5B( var_12, var_11, var_0 );
            _id_12C58( var_0, 100, var_12 );
        }
    }

    if ( isdefined( var_3.patch_collisions_crates[var_0] ) )
    {
        foreach ( var_12, var_11 in var_3.patch_collisions_crates[var_0] )
        {
            _id_12C5B( var_12, var_11, var_0 );
            _id_12C58( var_0, 100, var_12 );
        }
    }
}

_id_12C39()
{
    _id_12C5A( "iw8_la_gromeo_mp", 5 );
    _id_12C5A( "iw8_la_kgolf_mp", 5 );
    _id_12C5A( "iw8_la_t9standard_mp", 5 );
    _id_12C5A( "iw8_la_rpapa7_mp", 5 );
    _id_12C5A( "iw8_la_t9freefire_mp", 5 );
    _id_12C5A( "iw8_la_juliet_mp", 6 );
    _id_12C5A( "iw8_la_gromeoks_mp", 4 );
    _id_12C5A( "iw8_la_mike32_mp", 3 );
    _id_12C5A( "iw8_la_t9launcher_mp", 3 );
    _id_12C5A( "iw8_ar_mike4_mp", 3 );
    _id_12C5A( "iw8_ar_akilo47_mp", 3 );
    _id_12C5A( "frag_grenade_mp", 3 );
    _id_12C5A( "semtex_mp", 3 );
    _id_12C5A( "c4_mp_p", 3 );
    _id_12C5A( "at_mine_ap_mp", 3 );
    _id_12C5A( "at_mine_mp", 3 );
    _id_12C5A( "claymore_mp", 3 );
    _id_12C5A( "molotov_mp", 2 );
    _id_12C5A( "thermite_mp", 2 );
    _id_12C5A( "thermite_av_mp", 1 );
    _id_12C5A( "thermite_bolt_mp", 1 );
    _id_12C5A( "semtex_bolt_mp", 4 );
    _id_12C5A( "thermite_xmike109_mp", 0.5 );
    _id_12C5A( "semtex_xmike109_mp", 2 );
    _id_12C5A( "semtex_aalpha12_mp", 1 );
    _id_12C5A( "apache_proj_mp", 3 );
    _id_12C5A( "toma_proj_mp", 3 );
    _id_12C5A( "cruise_proj_mp", 15 );
    _id_12C5A( "artillery_mp", 3 );
    _id_12C5A( "nuke_mp", 15 );
    _id_12C5A( "ac130_105mm_mp", 15 );
    _id_12C5A( "ac130_40mm_mp", 5 );
    _id_12C5A( "ac130_25mm_mp", 1 );
    _id_12C5A( "hover_jet_proj_mp", 3 );
    _id_12C5A( "assault_drone_mp", 5 );
    _id_12C5A( "emp_drone_non_player_mp", 3 );
    _id_12C5A( "emp_drone_non_player_direct_mp", 5 );
}

_id_12C3A()
{
    _id_12C5A( "iw8_la_gromeo_mp", 10 );
    _id_12C5A( "iw8_la_kgolf_mp", 10 );
    _id_12C5A( "iw8_la_rpapa7_mp", 10 );
    _id_12C5A( "iw8_la_t9freefire_mp", 10 );
    _id_12C5A( "iw8_la_t9standard_mp", 10 );
    _id_12C5A( "iw8_la_juliet_mp", 20 );
    _id_12C5A( "iw8_la_gromeoks_mp", 10 );
    _id_12C5A( "iw8_la_mike32_mp", 6 );
    _id_12C5A( "iw8_la_t9launcher_mp", 6 );
    _id_12C5A( "iw8_ar_mike4_mp", 6 );
    _id_12C5A( "iw8_ar_akilo47_mp", 6 );
    _id_12C5A( "c4_mp_p", 13 );
    _id_12C5A( "semtex_mp", 4 );
    _id_12C5A( "frag_grenade_mp", 4 );
    _id_12C5A( "pop_rocket_mp", 4 );
    _id_12C5A( "molotov_mp", 1 );
    _id_12C5A( "at_mine_ap_mp", 5 );
    _id_12C5A( "at_mine_mp", 13 );
    _id_12C5A( "thermite_mp", 1 );
    _id_12C5A( "thermite_av_mp", 1 );
    _id_12C5A( "emp_grenade_mp", 4 );
    _id_12C5A( "claymore_mp", 13 );
    _id_12C5A( "thermite_bolt_mp", 1 );
    _id_12C5A( "semtex_bolt_mp", 4 );
    _id_12C5A( "thermite_xmike109_mp", 0.5 );
    _id_12C5A( "semtex_xmike109_mp", 2 );
    _id_12C5A( "semtex_aalpha12_mp", 1 );
    _id_12C5A( "apache_proj_mp", 3 );
    _id_12C5A( "toma_proj_mp", 12 );
    _id_12C5A( "cruise_proj_mp", 15 );
    _id_12C5A( "artillery_mp", 10 );
    _id_12C5A( "nuke_mp", 20 );
    _id_12C5A( "ac130_105mm_mp", 15 );
    _id_12C5A( "ac130_40mm_mp", 6 );
    _id_12C5A( "ac130_25mm_mp", 1 );
    _id_12C5A( "hover_jet_proj_mp", 3 );
    _id_12C5A( "hover_jet_proj_mp", 3 );
    _id_12C5A( "assault_drone_mp", 10 );
    _id_12C5A( "emp_drone_non_player_mp", 3 );
    _id_12C5A( "emp_drone_non_player_direct_mp", 5 );
}

_id_12C3B()
{
    _id_12C53( "specialty_armorpiercing", 0.5, 0 );
}

vehicle_damage_getleveldata()
{
    return level.vehicle.damage;
}

vehicle_damage_isselfdamage( var_0, var_1 )
{
    if ( isdefined( var_1.inflictor ) )
    {
        if ( var_1.inflictor == var_0 )
            return 1;

        var_2 = scripts\cp_mp\vehicles\vehicle::_id_12C71( var_0 );

        foreach ( var_4 in var_2 )
        {
            if ( var_1.inflictor == var_4 )
                return 1;
        }

        if ( var_1.inflictor.classname == "rocket" && isdefined( var_1.inflictor.vehicle ) && var_1.inflictor.vehicle == var_0 )
            return 1;
    }

    return 0;
}

vehicle_damage_enableownerdamage( var_0 )
{
    var_0.ownerdamageenabled = 1;
}

vehicle_damage_isownerdamageenabled( var_0 )
{
    return istrue( var_0.ownerdamageenabled );
}

vehicle_damage_logevent( var_0, var_1 )
{
    if ( !isdefined( var_0.damageevents ) )
        var_0.damageevents = [];

    var_0.damageevents[var_0.damageevents.size] = var_1;
    thread vehicle_damage_cleareventlogatframeend( var_0 );
}

vehicle_damage_cleareventlog( var_0 )
{
    var_0 notify( "vehicle_damage_clearEventLog" );
    var_0.damageevents = undefined;
}

vehicle_damage_cleareventlogatframeend( var_0 )
{
    var_0 endon( "death" );
    var_0 endon( "vehicle_damage_clearEventLog" );
    var_0 notify( "vehicle_damage_clearEventLogAtFrameEnd" );
    var_0 endon( "vehicle_damage_clearEventLogAtFrameEnd" );
    waittillframeend;
    thread vehicle_damage_cleareventlog( var_0 );
}

vehicle_damage_referevent( var_0, var_1, var_2 )
{
    if ( !isdefined( var_2.meansofdeath ) )
        return 0;

    if ( !isexplosivedamagemod( var_2.meansofdeath ) )
        return 0;

    if ( !isdefined( var_2.eventid ) )
        return 0;

    if ( isdefined( var_0.damageevents ) )
    {
        foreach ( var_4 in var_0.damageevents )
        {
            if ( var_4.eventid == var_2.eventid )
                return 0;
        }
    }

    if ( !isdefined( var_2.inflictor ) )
        var_2.inflictor = undefined;

    var_0 endon( "death" );
    var_0 endon( "vehicle_damage_clearEventLog" );
    var_0 dodamage( var_2.damage, var_2.point, var_2.attacker, var_2.inflictor, var_2.meansofdeath, var_2.objweapon, var_2.hitlocation );
    vehicle_damage_logevent( var_0, var_2 );
}

vehicle_damage_keepturretalive( var_0 )
{
    self endon( "death" );
    self endon( "vehicle_damage_keepTurretAliveEnd" );
    self setcandamage( 1 );
    self.health = 2147483647;
    self waittill( "damage", var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13, var_14, var_15 );
    var_16 = scripts\cp_mp\utility\damage_utility::packdamagedata( var_2, self, var_1, var_10, var_5, var_14, var_4, var_3, var_6, var_8, var_7, var_9, var_15 );
    vehicle_damage_referevent( var_0, self, var_16 );
    self.health = 2147483647;
}

vehicle_damage_keepturretaliveend( var_0 )
{
    self notify( "vehicle_damage_keepTurretAliveEnd" );
    self setcandamage( 0 );
}

vehicle_damage_dovisuals( var_0 )
{
    var_1 = vehicle_damage_getleveldataforvehicle( self.vehiclename );

    if ( isdefined( var_1 ) )
    {
        var_2 = self.health / self.maxhealth;
        var_3 = self.health;
        var_4 = 0;

        if ( isdefined( var_0 ) && isdefined( var_0.damage ) )
            var_3 = int( max( 0, self.health - var_0.damage ) );

        var_5 = var_3 / self.maxhealth;
        var_6 = getarraykeys( var_1.visualpercents );

        if ( istrue( var_1.visualhighesttolowest ) )
        {
            if ( var_1.visualpercents.size > 1 )
            {
                var_6 = getarraykeys( var_1.visualpercents );

                for ( var_7 = 0; var_7 < var_6.size; var_7++ )
                {
                    for ( var_8 = var_7 + 1; var_8 < var_6.size; var_8++ )
                    {
                        var_9 = var_1.visualpercents[var_6[var_7]];
                        var_10 = var_1.visualpercents[var_6[var_8]];

                        if ( var_9 < var_10 )
                        {
                            var_11 = var_6[var_7];
                            var_6[var_7] = var_6[var_8];
                            var_6[var_8] = var_11;
                        }
                    }
                }
            }
        }

        for ( var_7 = 0; var_7 < var_6.size; var_7++ )
        {
            var_12 = var_6[var_7];
            var_13 = var_1.visualpercents[var_12];

            if ( var_5 > var_13 )
            {
                if ( isdefined( var_1.visualclearcallbacks[var_12] ) )
                {
                    var_14 = var_2 <= var_13;
                    self thread [[ var_1.visualclearcallbacks[var_12] ]]( var_0, var_14 );
                }

                continue;
            }

            if ( isdefined( var_1.visualcallbacks[var_12] ) )
            {
                var_14 = var_2 > var_13;
                self thread [[ var_1.visualcallbacks[var_12] ]]( var_0, var_14 );
            }
        }
    }
}

_id_12C62( var_0, var_1 )
{
    self notify( "vehicle_damage_visualStopWatchingSpeedChange" );
    self endon( "vehicle_damage_visualStopWatchingSpeedChange" );
    var_2 = undefined;

    while ( isdefined( self ) )
    {
        if ( !scripts\cp_mp\vehicles\vehicle_tracking::_issuspendedvehicle() )
        {
            var_3 = undefined;
            var_4 = int( self vehicle_getspeed() );
            var_5 = istrue( scripts\cp_mp\vehicles\vehicle::vehiclecanfly() );

            if ( var_5 && self vehicle_isonground() )
                var_3 = 0;
            else if ( !var_5 && var_4 <= 3 )
                var_3 = 0;
            else if ( var_4 <= 25 )
                var_3 = 1;
            else
                var_3 = 2;

            if ( isdefined( var_2 ) && var_3 != var_2 )
            {
                var_6 = _id_12C2E( self.vehiclename, var_0 );
                self thread [[ var_6.stoppingpower_clearhcronperkscleared ]]( var_0, var_1 );
                return;
            }

            var_2 = var_3;
        }

        wait 0.1;
    }
}

vehicle_damage_visualstopwatchingspeedchange()
{
    self notify( "vehicle_damage_visualStopWatchingSpeedChange" );
}

_id_12C3D( var_0, var_1 )
{
    if ( scripts\cp_mp\vehicles\vehicle_tracking::_issuspendedvehicle() )
        self setscriptablepartstate( "damageLight", "stopped", 1 );
    else
    {
        var_2 = int( self vehicle_getspeed() );
        var_3 = istrue( scripts\cp_mp\vehicles\vehicle::vehiclecanfly() );

        if ( var_3 && self vehicle_isonground() )
            self setscriptablepartstate( "damageLight", "stopped", 1 );
        else if ( !var_3 && var_2 <= 3 )
            self setscriptablepartstate( "damageLight", "stopped", 1 );
        else if ( var_2 <= 25 )
            self setscriptablepartstate( "damageLight", "lowSpeed", 1 );
        else
            self setscriptablepartstate( "damageLight", "highSpeed", 1 );
    }

    thread _id_12C62( "light", var_0 );
}

vehicle_damage_lightvisualclearcallback( var_0, var_1, var_2 )
{
    vehicle_damage_visualstopwatchingspeedchange();
    self setscriptablepartstate( "damageLight", "off", 1 );
}

_id_12C40( var_0, var_1 )
{
    if ( scripts\cp_mp\vehicles\vehicle_tracking::_issuspendedvehicle() )
        self setscriptablepartstate( "damageMedium", "stopped", 1 );
    else
    {
        var_2 = int( self vehicle_getspeed() );
        var_3 = istrue( scripts\cp_mp\vehicles\vehicle::vehiclecanfly() );

        if ( var_3 && self vehicle_isonground() )
            self setscriptablepartstate( "damageMedium", "stopped", 1 );
        else if ( !var_3 && var_2 <= 3 )
            self setscriptablepartstate( "damageMedium", "stopped", 1 );
        else if ( var_2 <= 25 )
            self setscriptablepartstate( "damageMedium", "lowSpeed", 1 );
        else
            self setscriptablepartstate( "damageMedium", "highSpeed", 1 );
    }

    thread _id_12C62( "medium", var_0 );
}

vehicle_damage_mediumvisualclearcallback( var_0, var_1, var_2 )
{
    vehicle_damage_visualstopwatchingspeedchange();
    self setscriptablepartstate( "damageMedium", "off", 1 );
}

_id_12C38( var_0, var_1 )
{
    if ( scripts\cp_mp\vehicles\vehicle_tracking::_issuspendedvehicle() )
        self setscriptablepartstate( "damageHeavy", "stopped", 1 );
    else
    {
        var_2 = int( self vehicle_getspeed() );
        var_3 = istrue( scripts\cp_mp\vehicles\vehicle::vehiclecanfly() );

        if ( var_3 && self vehicle_isonground() )
            self setscriptablepartstate( "damageHeavy", "stopped", 1 );
        else if ( !var_3 && var_2 <= 3 )
            self setscriptablepartstate( "damageHeavy", "stopped", 1 );
        else if ( var_2 <= 25 )
            self setscriptablepartstate( "damageHeavy", "lowSpeed", 1 );
        else
            self setscriptablepartstate( "damageHeavy", "highSpeed", 1 );
    }

    thread _id_12C62( "heavy", var_0 );
}

vehicle_damage_heavyvisualclearcallback( var_0, var_1, var_2 )
{
    vehicle_damage_visualstopwatchingspeedchange();
    self setscriptablepartstate( "damageHeavy", "off", 1 );
}

_id_12C27( var_0, var_1 )
{
    self setscriptablepartstate( "damageEngine", "explode", 1 );
}

_id_12C28( var_0, var_1, var_2 )
{
    self setscriptablepartstate( "damageEngine", "off", 1 );
}

_id_12C33()
{
    if ( !isdefined( self.generic_waittill_button_press ) )
        return "pristine";

    return self.generic_waittill_button_press;
}

_id_12C56( var_0, var_1, var_2 )
{
    self notify( "damage_state_change" );

    if ( var_1 != "pristine" )
    {
        var_3 = _id_12C2E( self.vehiclename, var_1 );

        if ( isdefined( var_3.stoppingpower_isvalidprimaryoralt ) )
            self thread [[ var_3.stoppingpower_isvalidprimaryoralt ]]( var_0, var_2 );
    }

    if ( var_0 != "pristine" )
    {
        var_3 = _id_12C2E( self.vehiclename, var_0 );

        if ( isdefined( var_3.stoppingpower_clearhcronperkscleared ) )
            self thread [[ var_3.stoppingpower_clearhcronperkscleared ]]( var_1, var_2 );
    }

    self.generic_waittill_button_press = var_0;
}

_id_12C5D( var_0, var_1, var_2 )
{
    var_3 = vehicle_damage_getleveldataforvehicle( self.vehiclename, undefined, var_2 );

    if ( !isdefined( var_3 ) )
        return;

    self.lasttimedamaged = gettime();
    _id_12C60( var_0, var_1, var_2 );
}

_id_12C60( var_0, var_1, var_2 )
{
    var_3 = vehicle_damage_getleveldataforvehicle( self.vehiclename, undefined, var_2 );
    var_4 = self.health;

    if ( isdefined( var_0 ) && isdefined( var_0.damage ) )
        var_4 = var_4 - int( var_0.damage );

    var_5 = "pristine";
    var_6 = undefined;
    var_7 = undefined;

    foreach ( var_10, var_9 in var_3.generatespawnpoint )
    {
        if ( !isdefined( var_7 ) || var_9.maxhealth < var_7 )
        {
            if ( var_4 <= var_9.maxhealth )
            {
                var_5 = var_10;
                var_6 = var_9;
                var_7 = var_9.maxhealth;
            }
        }
    }

    var_11 = _id_12C33();

    if ( var_5 != var_11 )
    {
        if ( !istrue( var_1 ) )
        {
            if ( var_5 == "heavy" && ( !isdefined( var_11 ) || var_11 != "heavy" ) )
            {
                if ( !istrue( self.give_full_stoppingpower_clip ) )
                {
                    var_12 = _id_12C2C( undefined, self.vehiclename );

                    if ( isdefined( var_12 ) )
                    {
                        if ( isdefined( var_0 ) && isdefined( var_0.damage ) && var_0.damage != 0 )
                            self.health = self.health + ( var_12 - var_4 );
                    }
                }
            }
        }

        _id_12C56( var_5, var_11, var_0 );
    }
}

_id_12C5E( var_0, var_1 )
{
    var_2 = vehicle_damage_getleveldataforvehicle( self.vehiclename, undefined, var_1 );

    if ( !isdefined( var_2 ) )
        return;

    self.lasttimedamaged = gettime();
    _id_12C5F( var_0 );
}

_id_12C5F( var_0 )
{
    var_1 = self.health;

    if ( isdefined( var_0 ) && isdefined( var_0.damage ) )
        var_1 = var_1 - int( var_0.damage );

    var_2 = var_1 / self.maxhealth;

    if ( var_2 <= 0.1 )
        var_3 = "heavy";
    else if ( var_2 <= 0.5 )
        var_3 = "medium";
    else if ( var_2 <= 0.85 )
        var_3 = "light";
    else
        var_3 = "pristine";

    var_4 = _id_12C33();

    if ( var_3 != var_4 )
        _id_12C56( var_3, var_4, var_0 );
}

_id_12C25( var_0 )
{
    if ( var_0 )
        self.give_full_stoppingpower_clip = 1;
    else
        self.give_full_stoppingpower_clip = undefined;
}

_id_12C46( var_0, var_1 )
{
    _id_12C3D( var_1, 1 );
}

_id_12C49( var_0, var_1 )
{
    vehicle_damage_lightvisualclearcallback( var_1, 1 );
}

_id_12C47( var_0, var_1 )
{
    _id_12C40( var_1, 1 );
}

_id_12C4A( var_0, var_1 )
{
    vehicle_damage_mediumvisualclearcallback( var_1, 1 );
}

_id_12C44( var_0, var_1 )
{
    _id_12C38( var_1, 1 );
    _id_12C27( var_1, 1 );

    if ( !isdefined( var_0 ) || var_0 != "heavy" )
    {
        scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_allowmovement( self, 0 );
        _id_12C45( var_0, var_1 );
        thread _id_12C20( var_1 );
    }
}

_id_12C48( var_0, var_1 )
{
    vehicle_damage_heavyvisualclearcallback( var_1, 1 );
    _id_12C28( var_1, 1 );

    if ( !isdefined( var_0 ) || var_0 != "heavy" )
    {
        scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_allowmovement( self, 1 );
        _id_12C26();
    }
}

_id_12C4B( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = vehicle_damage_getleveldataforvehicle( var_0, 1 );
    var_6.health = var_1;
    var_6.wait_spawn_sidehouse_trucks = var_2;
    var_6.onattackerdamagenottracked = var_3;
    var_6.setroundwinstreakspecialcamos = var_4;
    var_6.currentbestdist = var_5;
    var_7 = _id_12C2E( var_0, "light", 1 );
    var_7.stoppingpower_clearhcronperkscleared = ::_id_12C46;
    var_7.stoppingpower_isvalidprimaryoralt = ::_id_12C49;
    var_7 = _id_12C2E( var_0, "medium", 1 );
    var_7.stoppingpower_clearhcronperkscleared = ::_id_12C47;
    var_7.stoppingpower_isvalidprimaryoralt = ::_id_12C4A;
    var_7 = _id_12C2E( var_0, "heavy", 1 );
    var_7.stoppingpower_clearhcronperkscleared = ::_id_12C44;
    var_7.stoppingpower_isvalidprimaryoralt = ::_id_12C48;
    _id_12C61( var_0 );
}

_id_12C2F( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = var_0.vehiclename;

    var_2 = vehicle_damage_getleveldata();
    var_3 = vehicle_damage_getleveldataforvehicle( var_1, 1 );

    if ( !isdefined( var_3 ) )
    {
        if ( isdefined( var_0 ) )
            return var_0.maxhealth;

        return undefined;
    }

    if ( !isdefined( var_3.health ) )
    {
        if ( isdefined( var_0 ) )
            return var_0.maxhealth;

        return undefined;
    }

    var_4 = var_3.health;
    var_5 = _id_12C31( var_1 );

    if ( isdefined( var_5 ) )
        var_4 = var_4 + var_5;

    var_6 = _id_12C2B( var_1 );

    if ( isdefined( var_6 ) )
        var_4 = var_4 + var_6;

    return int( var_4 );
}

_id_12C32( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = var_0.vehiclename;

    var_2 = vehicle_damage_getleveldata();
    var_3 = vehicle_damage_getleveldataforvehicle( var_1, 1 );

    if ( !isdefined( var_3 ) )
        return undefined;

    if ( !isdefined( var_3.health ) )
        return undefined;

    var_4 = var_3.health;
    var_5 = _id_12C2B( var_1 );

    if ( isdefined( var_5 ) )
        var_4 = var_4 + var_5;

    if ( !isdefined( var_4 ) || var_4 <= 0 )
        return undefined;

    return int( var_4 );
}

_id_12C2C( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = var_0.vehiclename;

    var_2 = vehicle_damage_getleveldata();
    var_3 = vehicle_damage_getleveldataforvehicle( var_1 );

    if ( !isdefined( var_3 ) )
        return undefined;

    if ( !isdefined( var_3.health ) )
        return undefined;

    var_4 = _id_12C2B( var_1 );

    if ( !isdefined( var_4 ) || var_4 <= 0 )
        return undefined;

    return int( var_4 );
}

_id_12C61( var_0 )
{
    var_1 = vehicle_damage_getleveldataforvehicle( var_0 );
    var_2 = undefined;
    var_3 = undefined;

    foreach ( var_6, var_5 in var_1.generatespawnpoint )
    {
        if ( var_6 == "light" )
        {
            var_5.maxhealth = _id_12C32( undefined, var_0 );
            var_3 = var_5.maxhealth;
            continue;
        }

        if ( var_6 == "heavy" )
        {
            var_5.maxhealth = _id_12C2C( undefined, var_0 );
            var_2 = var_5.maxhealth;
        }
    }

    var_5 = var_1.generatespawnpoint["medium"];

    if ( isdefined( var_5 ) )
    {
        if ( isdefined( var_2 ) && isdefined( var_3 ) )
        {
            var_7 = _id_12C30( var_0 );

            if ( isdefined( var_7 ) )
                var_5.maxhealth = int( scripts\engine\math::lerp( var_2, var_3, var_7 ) );
        }
    }
}

_id_12C31( var_0 )
{
    var_1 = vehicle_damage_getleveldata();
    var_2 = vehicle_damage_getleveldataforvehicle( var_0 );
    var_3 = var_2.wait_spawn_sidehouse_trucks;

    if ( !isdefined( var_3 ) )
        var_3 = var_1.wait_spawn_sidehouse_trucks;

    if ( !isdefined( var_3 ) || var_3 <= 0 )
        return undefined;

    return int( var_3 );
}

_id_12C2B( var_0 )
{
    var_1 = vehicle_damage_getleveldata();
    var_2 = vehicle_damage_getleveldataforvehicle( var_0 );
    var_3 = var_2.onattackerdamagenottracked;

    if ( !isdefined( var_3 ) )
        var_3 = var_1.onattackerdamagenottracked;

    if ( !isdefined( var_3 ) || var_3 <= 0 )
        return undefined;

    return int( var_3 );
}

_id_12C30( var_0 )
{
    var_1 = vehicle_damage_getleveldata();
    var_2 = vehicle_damage_getleveldataforvehicle( var_0 );
    var_3 = var_2.setroundwinstreakspecialcamos;

    if ( !isdefined( var_3 ) )
        var_3 = var_1.setroundwinstreakspecialcamos;

    if ( !isdefined( var_3 ) || var_3 <= 0 || var_3 > 1 )
        return undefined;

    return var_3;
}

_id_12C20( var_0 )
{
    self endon( "death" );
    self endon( "end_burn_down" );

    if ( !istrue( self.currentcarrier ) )
    {
        var_1 = scripts\cp_mp\vehicles\vehicle::vehicle_getleveldataforvehicle( self.vehiclename );
        var_2 = var_1.destroycallback;
        var_3 = _id_12C2A( self.vehiclename );

        if ( isdefined( var_3 ) && isdefined( var_2 ) )
        {
            self.currentcarrier = 1;
            var_4 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getalloccupants( self, 0 );

            if ( isdefined( var_4 ) )
                scripts\cp_mp\utility\vehicle_omnvar_utility::vehomn_showwarning( "burningDown", var_4, self.vehiclename );

            wait( var_3 );
            self.currentcarrier = undefined;
            scripts\cp_mp\pet_watch::disabledvehicles();
            self.currentability = 1;
            self thread [[ var_2 ]]( var_0, 0 );
            return;
        }
    }
}

_id_12C26( var_0 )
{
    if ( !istrue( self.currentcarrier ) )
        return;

    self notify( "end_burn_down" );
    scripts\cp_mp\pet_watch::disabledvehicles();

    if ( !istrue( var_0 ) )
    {
        var_1 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getalloccupants( self, 0 );

        if ( isdefined( var_1 ) )
            scripts\cp_mp\utility\vehicle_omnvar_utility::vehomn_hidewarning( "burningDown", var_1, self.vehiclename );
    }

    self.currentcarrier = undefined;
}

_id_12C3C()
{
    return istrue( self.currentcarrier );
}

_id_12C2A( var_0 )
{
    var_1 = vehicle_damage_getleveldata();
    var_2 = vehicle_damage_getleveldataforvehicle( var_0 );
    var_3 = var_2.currentbestdist;

    if ( !isdefined( var_3 ) )
        var_3 = var_1.currentbestdist;

    if ( !isdefined( var_3 ) || var_3 <= 0 )
        return undefined;

    return var_3;
}

_id_12C5C( var_0 )
{
    if ( isdefined( var_0.meansofdeath ) )
    {
        if ( var_0.meansofdeath == "MOD_CRUSH" )
            return 1;

        if ( !isexplosivedamagemod( var_0.meansofdeath ) && var_0.meansofdeath != "MOD_FIRE" )
            return 0;
    }

    if ( isdefined( var_0.objweapon ) && !nullweapon( var_0.objweapon ) && isdefined( self.vehiclename ) )
    {
        var_1 = undefined;
        var_2 = self.vehiclename;
        var_3 = var_0.objweapon.basename;
        var_4 = vehicle_damage_getleveldata();
        var_5 = var_4.table;

        if ( isdefined( var_4.table._id_120A1[var_2] ) )
            var_1 = var_4.table._id_120A1[var_2][var_3];

        if ( isdefined( var_1 ) )
            return var_1;

        var_6 = vehicle_damage_getleveldataforvehicle( var_2, undefined, 1 );

        if ( isdefined( var_6 ) )
        {
            var_7 = var_6.class;

            if ( !isdefined( var_7 ) || var_7 == "none" )
                return 1;

            if ( isdefined( var_4.table._id_120A0[var_7] ) )
                var_1 = var_4.table._id_120A0[var_7][var_3];

            if ( isdefined( var_1 ) )
                return var_1;
        }
        else
            return 1;
    }
    else
        return 1;

    return 0;
}

_id_12C45( var_0, var_1 )
{
    if ( isdefined( var_1 ) && isdefined( var_1.attacker ) )
    {
        var_2 = vehicle_damage_getleveldataforvehicle( self.vehiclename, undefined, 1 );

        if ( isdefined( var_2 ) )
        {
            var_3 = _id_12C2D( self, undefined, 1 );
            var_4 = undefined;
            var_5 = undefined;
            var_6 = undefined;
            var_7 = undefined;

            if ( isdefined( var_3 ) )
            {
                var_4 = var_3.on_min;
                var_5 = var_3.onarmorboxusedbyplayer;
                var_6 = var_3.on_killed_tutorial;
                var_7 = var_3.on_max;
            }

            if ( isdefined( var_2.class ) )
            {
                if ( !isdefined( var_4 ) )
                {
                    switch ( var_2.class )
                    {
                        case "light":
                        case "super_light":
                            var_4 = "disabled_vehicle_light";
                            break;
                        case "medium_heavy":
                        case "medium_light":
                        case "medium":
                            var_4 = "disabled_vehicle_medium";
                            break;
                        case "heavy":
                        case "super_heavy":
                            var_4 = "disabled_vehicle_heavy";
                            break;
                    }
                }

                if ( !isdefined( var_6 ) )
                {

                }
            }

            if ( isdefined( var_4 ) && var_4 == "none" )
                var_4 = undefined;

            if ( isdefined( var_6 ) && var_6 == "none" )
                var_6 = undefined;

            if ( !istrue( var_1.monitor_player_found_supply_station ) && isplayer( var_1.attacker ) )
                var_1.monitor_player_found_supply_station = scripts\cp_mp\vehicles\vehicle::_id_12C93( self, var_1.attacker );

            if ( isdefined( var_1.objweapon ) && weaponclass( var_1.objweapon.basename ) != "rocketlauncher" )
            {
                if ( istrue( var_5 ) )
                    var_1._id_11CB1 = 1;

                if ( istrue( var_7 ) )
                    var_1.brgetloadoutoptionstandardloadoutindex = 1;
            }

            var_1.attacker thread _id_12C37( var_4, var_6, var_1, self );
        }
    }
}

_id_12C43( var_0 )
{
    if ( isdefined( var_0 ) && isdefined( var_0.attacker ) )
    {
        var_1 = vehicle_damage_getleveldataforvehicle( self.vehiclename, undefined, 1 );

        if ( isdefined( var_1 ) )
        {
            var_2 = _id_12C2D( self, undefined, 1 );
            var_3 = undefined;
            var_4 = undefined;
            var_5 = undefined;
            var_6 = undefined;

            if ( isdefined( var_2 ) )
            {
                var_3 = var_2.getknivesoutsetting;
                var_4 = var_2.getkothlocations;
                var_5 = var_2.getjuggmazebutton;
                var_6 = var_2.getjuggmazespawnpoint;
            }

            if ( isdefined( var_1.class ) )
            {
                if ( !isdefined( var_3 ) )
                {
                    switch ( var_1.class )
                    {
                        case "light":
                        case "super_light":
                            var_3 = "destroyed_vehicle_light";
                            break;
                        case "medium_heavy":
                        case "medium_light":
                        case "medium":
                            var_3 = "destroyed_vehicle_medium";
                            break;
                        case "heavy":
                        case "super_heavy":
                            var_3 = "destroyed_vehicle_heavy";
                            break;
                        default:
                            var_3 = "none";
                            break;
                    }
                }

                if ( !isdefined( var_5 ) )
                {

                }
            }

            if ( isdefined( var_3 ) && var_3 == "none" )
                var_3 = undefined;

            if ( isdefined( var_5 ) && var_5 == "none" )
                var_5 = undefined;

            if ( isplayer( var_0.attacker ) )
            {
                if ( !isdefined( var_0.monitor_player_found_supply_station ) )
                    var_0.monitor_player_found_supply_station = scripts\cp_mp\vehicles\vehicle::_id_12C93( self, var_0.attacker );
                else if ( var_0.monitor_player_found_supply_station && scripts\cp_mp\vehicles\vehicle::_id_12C95( self, var_0.attacker ) )
                    var_0.monitor_player_found_supply_station = 0;
                else if ( !var_0.monitor_player_found_supply_station && scripts\cp_mp\vehicles\vehicle::_id_12C93( self, var_0.attacker ) )
                    var_0.monitor_player_found_supply_station = 1;
            }
            else
                var_0.monitor_player_found_supply_station = 0;

            if ( isdefined( var_0.objweapon ) && weaponclass( var_0.objweapon.basename ) != "rocketlauncher" )
            {
                if ( istrue( var_4 ) )
                    var_0._id_11CB1 = 1;

                if ( istrue( var_6 ) )
                    var_0.brgetloadoutoptionstandardloadoutindex = 1;
            }

            if ( var_0.monitor_player_found_supply_station && scripts\cp_mp\utility\script_utility::issharedfuncdefined( "challenges", "onVehicleKilled" ) )
                var_0.attacker thread [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "challenges", "onVehicleKilled" ) ]]( self, var_0.inflictor, var_0.attacker, var_0.damage, var_0.objweapon );

            var_0.attacker _id_12C36( var_3, var_5, var_0, self getentitynumber() );
        }
    }
}

_id_12C37( var_0, var_1, var_2, var_3 )
{
    var_4 = var_3 getentitynumber();
    self endon( "disconnect" );
    self endon( "vehicle_damage_giveScoreAndXP" + var_4 );
    waittillframeend;
    thread _id_12C36( var_0, var_1, var_3, var_4 );
}

_id_12C36( var_0, var_1, var_2, var_3 )
{
    self notify( "vehicle_damage_giveScoreAndXP" + var_3 );

    if ( isdefined( var_0 ) && scripts\cp_mp\utility\script_utility::issharedfuncdefined( "vehicle_damage", "giveScore" ) )
    {
        var_4 = scripts\engine\utility::ter_op( istrue( var_2._id_11CB1 ), undefined, var_2.objweapon );
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "vehicle_damage", "giveScore" ) ]]( var_0, var_4, !istrue( var_2.monitor_player_found_supply_station ) );
    }

    if ( isdefined( var_1 ) && scripts\cp_mp\utility\script_utility::issharedfuncdefined( "vehicle_damage", "giveAward" ) )
    {
        var_4 = scripts\engine\utility::ter_op( istrue( var_2.brgetloadoutoptionstandardloadoutindex ), undefined, var_2.objweapon );
        self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "vehicle_damage", "giveAward" ) ]]( var_1, var_4, !istrue( var_2.monitor_player_found_supply_station ) );
    }
}

_id_12C59( var_0, var_1, var_2, var_3 )
{
    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "vehicle_damage", "setWeaponClassModDamageForVehicle" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "vehicle_damage", "setWeaponClassModDamageForVehicle" ) ]]( var_0, var_1, var_2, var_3 );
}

_id_12C53( var_0, var_1, var_2 )
{
    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "vehicle_damage", "setPerkModDamage" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "vehicle_damage", "setPerkModDamage" ) ]]( var_0, var_1, var_2 );
}

_id_12C5A( var_0, var_1 )
{
    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "vehicle_damage", "setWeaponHitDamageData" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "vehicle_damage", "setWeaponHitDamageData" ) ]]( var_0, var_1 );
}

_id_12C57( var_0, var_1 )
{
    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "vehicle_damage", "setVehicleHitDamageData" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "vehicle_damage", "setVehicleHitDamageData" ) ]]( var_0, var_1 );
}

_id_12C58( var_0, var_1, var_2 )
{
    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "vehicle_damage", "setVehicleHitDamageDataForWeapon" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "vehicle_damage", "setVehicleHitDamageDataForWeapon" ) ]]( var_0, var_1, var_2 );
}

_id_12C5B( var_0, var_1, var_2 )
{
    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "vehicle_damage", "setWeaponHitDamageDataForVehicle" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "vehicle_damage", "setWeaponHitDamageDataForVehicle" ) ]]( var_0, var_1, var_2 );
}

_id_12C55( var_0, var_1 )
{
    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "vehicle_damage", "setPreModDamageCallback" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "vehicle_damage", "setPreModDamageCallback" ) ]]( var_0, var_1 );
}

_id_12C54( var_0, var_1 )
{
    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "vehicle_damage", "setPostModDamageCallback" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "vehicle_damage", "setPostModDamageCallback" ) ]]( var_0, var_1 );
}

_id_12C50( var_0, var_1 )
{
    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "vehicle_damage", "setDeathCallback" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "vehicle_damage", "setDeathCallback" ) ]]( var_0, var_1 );
}

_id_12C52( var_0, var_1, var_2 )
{
    var_3 = vehicle_damage_getleveldataforvehicle( var_0, 1 );

    if ( !isdefined( var_3.startholowatchvfx ) )
        var_3.startholowatchvfx = [];

    var_3.startholowatchvfx[var_1] = var_2;
}

_id_12C51( var_0, var_1, var_2 )
{
    var_3 = vehicle_damage_getleveldataforvehicle( var_0, 1 );

    if ( !isdefined( var_3.starthacktimer ) )
        var_3.starthacktimer = [];

    var_3.starthacktimer[var_1] = var_2;
}

vehicle_damage_initdebug()
{
    setdvarifuninitialized( "scr_vehicleGod", 0 );
    setdvarifuninitialized( "scr_simulateVehicleDamage", 0 );
}
