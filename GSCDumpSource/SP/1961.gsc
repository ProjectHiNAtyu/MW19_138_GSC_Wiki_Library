// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    if ( getdvarint( "scr_damageFeedbackDisabled" ) )
        return;

    precacheshader( "damage_feedback_thin" );
    level.hitmarkerpriorities = [];
    level.hitmarkerpriorities["low_damage"] = 35;
    level.hitmarkerpriorities["standard"] = 50;
    level.hitmarkerpriorities["standard_cp"] = 50;
    level.hitmarkerpriorities["high_damage"] = 85;
}

damagefeedback_took_damage( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    if ( getdvarint( "scr_damageFeedbackDisabled" ) )
        return;

    if ( !isdefined( var_1 ) || !isplayer( var_1 ) || var_1 == self || var_0 <= 0 )
        return;

    var_10 = "standard";
    var_11 = "standard";

    if ( isdefined( var_9 ) )
    {
        if ( var_0 <= weapongetdamagemin( var_9 ) )
            var_11 = "low_damage";
        else if ( var_0 >= weapongetdamagemax( var_9 ) )
            var_11 = "high_damage";
    }

    var_12 = 0;
    var_13 = 0;

    if ( isai( self ) )
    {
        var_12 = !isalive( self );
        var_13 = isheadshot( var_7 );
    }

    level.player thread updatedamagefeedback( var_10, var_12, var_13, var_11, self );
}

updatedamagefeedback( var_0, var_1, var_2, var_3, var_4 )
{
    if ( !isplayer( self ) )
        return;

    if ( !isdefined( var_3 ) )
        var_3 = "standard";

    switch ( var_0 )
    {
        case "hithealthshield":
        case "hitspawnprotect":
        case "hitbulletstorm":
        case "hitcritical":
        case "hitmotionsensor":
        case "hitmorehealth":
        case "hitjuggernaut":
        case "hitlightarmor":
        case "hitblastshield":
        case "thermobaric_debuff":
            setomnvar( "damage_feedback_icon", var_0 );
            self setclientomnvar( "damage_feedback_icon_notify", gettime() );
            updatehitmarker( var_3, var_1, var_2 );
            break;
        case "none":
            break;
        default:
            updatehitmarker( var_3, var_1, var_2, var_4 );
            break;
    }
}

updatehitmarker( var_0, var_1, var_2, var_3 )
{
    if ( getdvarint( "scr_no_hitmarker" ) )
        return;

    if ( !isdefined( var_0 ) )
        return;

    if ( !isdefined( var_1 ) )
        var_1 = 0;

    if ( !isdefined( var_2 ) )
        var_2 = 0;

    if ( isdefined( var_3 ) && var_3.team == "allies" )
        return;

    var_4 = gethitmarkerpriority( var_0 );

    if ( isdefined( self.lasthitmarkertime ) && self.lasthitmarkertime == gettime() && var_4 <= self.lasthitmarkerpriority && !var_1 )
        return;

    self.lasthitmarkertime = gettime();
    self.lasthitmarkerpriority = var_4;
    setomnvar( "damage_feedback", var_0 );
    self setclientomnvar( "damage_feedback_notify", gettime() );

    if ( var_1 )
        setomnvar( "damage_feedback_kill", 1 );
    else
        setomnvar( "damage_feedback_kill", 0 );

    if ( var_2 )
        setomnvar( "damage_feedback_headshot", 1 );
    else
        setomnvar( "damage_feedback_headshot", 0 );
}

gethitmarkerpriority( var_0 )
{
    if ( !isdefined( level.hitmarkerpriorities[var_0] ) )
        return 0;

    return level.hitmarkerpriorities[var_0];
}

isheadshot( var_0 )
{
    switch ( var_0 )
    {
        case "j_head_pv_z":
        case "j_head_pv_horizontal":
        case "j_head":
        case "j_neck":
            return 1;
        default:
            return 0;
    }

    return 0;
}
