// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    if ( isdefined( self.stealth ) )
        return;

    self endon( "death" );
    self endon( "stealth_disabled" );
    self.stealth = spawnstruct();
    scripts\stealth\utility::group_flag_init( "stealth_spotted" );
    scripts\engine\utility::ent_flag_init( "stealth_enabled" );
    scripts\engine\utility::ent_flag_set( "stealth_enabled" );
    scripts\engine\utility::ent_flag_init( "stealth_in_shadow" );
    scripts\engine\utility::ent_flag_init( "stealth_use_real_lighting" );
    scripts\engine\utility::ent_flag_set( "stealth_use_real_lighting" );
    self.stealth.spotted_list = [];
    scripts\stealth\utility::group_add();
    thread maxvisibility_thread();

    if ( scripts\common\utility::issp() )
        thread stealthhints_thread();
}

maxvisibility_thread()
{
    self endon( "death" );
    self endon( "disconnect" );

    for (;;)
    {
        if ( maxvisibility_shouldupdate() )
            self.maxvisibledist = get_detect_range();

        waitframe();
    }
}

maxvisibility_shouldupdate()
{
    if ( istrue( self.maxvisibiltyupdate_disabled ) )
        return 0;

    if ( !scripts\engine\utility::ent_flag( "stealth_enabled" ) )
        return 0;

    if ( scripts\engine\utility::ent_flag( "stealth_in_shadow" ) )
        return 1;

    if ( isdefined( self.lightmeterdelay ) && gettime() < self.lightmeterdelay )
        return 0;

    return 1;
}

get_detect_range()
{
    var_0 = self getstance();

    if ( scripts\stealth\utility::group_spotted_flag() )
        var_1 = "spotted";
    else
        var_1 = "hidden";

    var_2 = level.stealth.detect.range[var_1][var_0];
    var_3 = 0;

    if ( scripts\engine\utility::ent_flag( "stealth_in_shadow" ) )
    {
        var_2 = var_2 * level.stealth.detect.range[var_1]["shadow"];
        var_3 = 1;
    }
    else if ( scripts\engine\utility::ent_flag( "stealth_use_real_lighting" ) )
    {
        var_2 = var_2 * self getplayerlightlevel();
        var_3 = 1;
    }

    if ( var_3 )
        var_2 = max( var_2, level.stealth.detect.minrangedarkness[var_1][var_0] );

    return var_2;
}

combatstate_thread( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 1;

    if ( !var_0 )
    {
        self notify( "stop_player_combat_state_thread" );
        self.stealth.combatstate = undefined;
        return;
    }
    else if ( isdefined( self.stealth.combatstate ) )
        return;

    self endon( "death" );
    self endon( "stealth_disabled" );
    self endon( "stop_player_combat_state_thread" );
    self endon( "disconnect" );
    childthread playerattackedmonitor();
    childthread combatstate_updatethread();
    self.stealth.combatstate = spawnstruct();
    self.stealth.combatstate.name = "stealth";
    self.stealth.combatstate.type = "idle";
    self.stealth.combatstate.updatefuncs = [];
    var_1 = [];
    var_2 = [];

    for (;;)
    {
        scripts\engine\utility::ent_flag_wait( "stealth_enabled" );
        var_1 = scripts\engine\utility::array_removeundefined( var_1 );
        var_1 = scripts\engine\utility::array_removedead( var_1 );
        var_2 = scripts\engine\utility::array_removeundefined( var_2 );
        var_2 = scripts\engine\utility::array_removedead( var_2 );
        var_3 = [];
        var_4 = [];
        var_5 = 0;

        if ( isdefined( self.lastattackedtime ) && !scripts\engine\utility::time_has_passed( self.lastattackedtime, 10 ) )
            var_5 = 1;

        foreach ( var_7 in getaiarray( "axis" ) )
        {
            if ( !isalive( var_7 ) )
                continue;

            if ( !scripts\engine\utility::array_contains( var_1, var_7 ) )
            {
                if ( var_7 scripts\engine\utility::doinglongdeath() )
                    continue;

                if ( scripts\engine\utility::is_equal( var_7.script, "pain" ) )
                    continue;
            }

            if ( var_7 [[ var_7.fnisinstealthcombat ]]() )
            {
                if ( isdefined( self.stealth.combatstate.maxcombatdist ) )
                {
                    var_8 = self.stealth.combatstate.maxcombatdist;

                    if ( distancesquared( self.origin, var_7.origin ) > squared( var_8 ) )
                    {
                        var_4[var_4.size] = var_7;
                        continue;
                    }
                }

                var_3[var_3.size] = var_7;

                if ( var_5 )
                    continue;

                if ( !scripts\engine\utility::is_equal( var_7.enemy, self ) )
                    continue;

                if ( var_7 cansee( self ) )
                    var_5 = 1;

                continue;
            }

            if ( var_7 [[ var_7.fnisinstealthhunt ]]() )
                var_4[var_4.size] = var_7;
        }

        var_10 = self.stealth.combatstate.name;
        var_11 = self.stealth.combatstate.type;
        var_12 = var_10;
        var_13 = undefined;

        if ( var_10 == "combat" )
        {
            if ( var_3.size == 0 )
            {
                var_12 = "stealth";

                if ( scripts\engine\utility::array_intersection( var_1, var_4 ).size > 0 )
                    var_13 = "hunt";
                else if ( var_4.size == 0 )
                    var_13 = "all_clear";
                else
                    var_13 = "combat_clear";
            }
            else if ( scripts\engine\utility::is_equal( var_11, "unaware" ) && var_5 )
                var_13 = "aware";
        }
        else if ( var_3.size > 0 )
        {
            var_12 = "combat";

            if ( var_5 )
                var_13 = "aware";
            else
                var_13 = "unaware";
        }
        else if ( scripts\engine\utility::is_equal( var_11, "hunt" ) && var_4.size == 0 )
            var_13 = "all_clear";

        if ( var_12 != var_10 || isdefined( var_13 ) && !scripts\engine\utility::is_equal( var_13, var_11 ) )
        {
            self.stealth.combatstate.name = var_12;
            self.stealth.combatstate.type = var_13;
            self notify( "player_combat_state_updated", var_12, var_13 );
        }

        var_1 = var_3;
        var_2 = var_4;
        waitframe();
    }
}

combatstate_updatethread()
{
    for (;;)
    {
        self waittill( "player_combat_state_updated", var_0, var_1 );

        foreach ( var_3 in self.stealth.combatstate.updatefuncs )
            self thread [[ var_3 ]]( var_0, var_1 );
    }
}

combatstate_addupdatefunc( var_0, var_1 )
{
    self.stealth.combatstate.updatefuncs[var_0] = var_1;
}

combatstate_removeupdatefunc( var_0 )
{
    self.stealth.combatstate.updatefuncs = scripts\engine\utility::array_remove_key( self.stealth.combatstate.updatefuncs, var_0 );
}

playerattackedmonitor()
{
    for (;;)
    {
        level scripts\engine\utility::waittill_any( "an_enemy_shot", "enemy_grenade_fire" );
        self.lastattackedtime = gettime();
    }
}

stealthhints_thread()
{
    self endon( "stealth_disabled" );
    self.stealth.hints = spawnstruct();
    self.stealth.hints.causeofdeath = undefined;
    self.stealth.hints.investigators = [];
    self.stealth.hints.deathhints["footstep_sprint"] = 6;
    self.stealth.hints.deathhints["gunshot"] = 8;
    self.stealth.hints.deathhints["proximity_speed"] = 16;
    self.stealth.hints.deathhints["sight_standing"] = 19;
    childthread stealthhints_eventmonitor();
    childthread stealthhints_deathmonitor();
    childthread stealthhints_combatmonitor();
}

stealthhints_eventmonitor()
{
    self endon( "death" );

    for (;;)
    {
        scripts\engine\utility::ent_flag_wait( "stealth_enabled" );
        level waittill( "stealth_event", var_0, var_1 );

        if ( !isalive( var_1 ) )
            continue;

        if ( !scripts\engine\utility::is_equal( var_0.entity, level.player ) )
            continue;

        if ( !scripts\engine\utility::ent_flag( "stealth_enabled" ) )
        {
            self.stealth.hints.causeofdeath = undefined;
            self.stealth.hints.investigators = [];
            continue;
        }

        if ( scripts\stealth\utility::any_groups_in_combat() )
        {
            if ( var_0.type != "combat" )
                continue;

            var_2 = 0;

            foreach ( var_4 in getaiarray( var_1.team ) )
            {
                if ( var_4 == var_1 )
                    continue;

                if ( var_4 [[ var_4.fnisinstealthcombat ]]() )
                {
                    var_2 = 1;
                    break;
                }
            }

            if ( var_2 )
                continue;
        }

        var_6 = var_0.typeorig;

        if ( var_6 == "gunshot" && !istrue( level.hassuppressedweapons ) )
            continue;

        if ( ( var_6 == "sight" || var_6 == "proximity" ) && self issprinting() )
            var_6 = "footstep_sprint";
        else if ( var_6 == "proximity" && length2dsquared( level.player getvelocity() ) > 11025 )
            var_6 = "proximity_speed";
        else if ( var_6 == "sight" && self getstance() == "stand" )
            var_6 = "sight_standing";

        if ( !isdefined( self.stealth.hints.deathhints[var_6] ) )
            continue;

        if ( scripts\engine\utility::array_contains( self.stealth.hints.investigators, var_1 ) )
            continue;

        childthread stealthhints_aimonitor( var_1, var_6 );
    }
}

stealthhints_aimonitor( var_0, var_1 )
{
    self endon( "combat_started" );
    self endon( "stealth_enabled" );
    self.stealth.hints.investigators[self.stealth.hints.investigators.size] = var_0;

    if ( var_0 [[ var_0.fnisinstealthhunt ]]() )
    {
        var_0 scripts\engine\utility::delaythread( 10, scripts\engine\utility::send_notify, "stealthHints_timeout" );
        var_0 scripts\engine\utility::waittill_any( "stealth_combat", "death", "stealthHints_timeout" );
    }
    else if ( var_0 [[ var_0.fnisinstealthinvestigate ]]() )
        var_0 scripts\engine\utility::waittill_any( "stealth_idle", "stealth_combat", "death" );

    self.stealth.hints.investigators = scripts\engine\utility::array_remove( self.stealth.hints.investigators, var_0 );

    if ( !isalive( var_0 ) || !var_0 [[ var_0.fnisinstealthcombat ]]() )
        return;

    self.stealth.hints.causeofdeath = var_1;
    self.stealth.hints.investigators = [];
    self notify( "combat_started" );
}

stealthhints_deathmonitor()
{
    self waittill( "death" );

    if ( !scripts\engine\utility::ent_flag( "stealth_enabled" ) )
        return;

    if ( isdefined( level.custom_death_quote ) )
        return;

    if ( !isdefined( self.stealth.hints.causeofdeath ) )
        return;

    level.custom_death_quote = self.stealth.hints.deathhints[self.stealth.hints.causeofdeath];
}

stealthhints_combatmonitor()
{
    self endon( "death" );

    for (;;)
    {
        scripts\engine\utility::ent_flag_wait( "stealth_enabled" );

        while ( !isdefined( self.stealth.hints.causeofdeath ) )
            waitframe();

        while ( scripts\stealth\utility::any_groups_in_combat() )
            waitframe();

        self.stealth.hints.causeofdeath = undefined;
    }
}
