// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init_mover_candidates()
{
    level.mover_candidates = undefined;
}

trigger_moveto( var_0 )
{
    if ( !isdefined( level.mover_candidates ) )
    {
        level.mover_candidates = getentarray( "script_brushmodel", "classname" );
        level.mover_candidates = scripts\engine\utility::array_combine( level.mover_candidates, getentarray( "script_model", "classname" ) );
    }

    var_1 = getentarray( var_0.target, "targetname" );
    scripts\engine\utility::array_thread( var_1, ::moveto_volume_think, var_0 );
}

moveto_volume_think( var_0 )
{
    var_1 = [];
    var_2 = scripts\engine\utility::spawn_tag_origin();
    var_3 = self;

    foreach ( var_5 in level.mover_candidates )
    {
        var_2.origin = var_5.origin;

        if ( var_2 istouching( var_3 ) )
        {
            level.mover_candidates = scripts\engine\utility::array_remove( level.mover_candidates, var_5 );
            var_1 = scripts\engine\utility::array_add( var_1, var_5 );
        }
    }

    var_2 delete();
    var_7 = undefined;

    foreach ( var_5 in var_1 )
    {
        if ( isdefined( var_5.script_parameters ) && var_5.script_parameters == "mover" )
        {
            var_7 = var_5;
            break;
        }

        if ( isdefined( var_5.script_parent ) && var_5.script_parent == "mover" )
        {
            var_7 = var_5;
            break;
        }
    }

    foreach ( var_5 in var_1 )
    {
        if ( var_7 != var_5 )
            var_5 linkto( var_7 );
    }

    var_15 = scripts\engine\utility::get_target_ent();

    if ( var_15 scripts\common\vehicle::isvehicle() )
    {
        var_7 moveto_volume_vehiclespline( var_15, var_0 );
        self notify( "done_moving" );
        return;
    }

    if ( !isdefined( var_15.angles ) )
        var_15.angles = ( 0, 0, 0 );

    var_0.mover = var_7;
    var_7.origin = var_15.origin;
    var_7.angles = var_15.angles;
    var_16 = undefined;
    var_17 = undefined;
    var_18 = 5;
    var_19 = 0;
    var_20 = 0;
    var_21 = undefined;

    if ( isdefined( var_15.script_duration ) )
        var_18 = var_15.script_duration;

    if ( isdefined( var_15.script_accel ) )
        var_19 = var_15.script_accel;

    if ( isdefined( var_15.script_decel ) )
        var_20 = var_15.script_decel;

    if ( isdefined( var_15.script_earthquake ) )
        var_16 = var_15.script_earthquake;

    if ( isdefined( var_15.script_exploder ) )
        var_17 = var_15.script_exploder;

    if ( isdefined( var_15.script_flag_wait ) )
        var_21 = var_15.script_flag_wait;

    var_0 waittill( "trigger" );
    var_15 scripts\engine\utility::script_delay();

    if ( isdefined( var_15.target ) )
        var_15 = var_15 scripts\engine\utility::get_target_ent();
    else
        var_15 = undefined;

    while ( isdefined( var_15 ) )
    {
        if ( isdefined( var_21 ) )
            scripts\engine\utility::flag_wait( var_21 );

        if ( isdefined( var_17 ) )
        {
            scripts\engine\utility::exploder( var_17 );
            level notify( "geo_mover_exploder", var_17 );
        }
        else if ( isdefined( var_16 ) )
        {
            if ( issubstr( var_16, "constant" ) )
                var_7 thread constant_quake( var_16 );
        }

        if ( !isdefined( var_15.angles ) )
            var_15.angles = ( 0, 0, 0 );

        var_7 moveto_rotateto( var_15, var_18, var_19, var_20 );
        var_7 notify( "stop_constant_quake" );
        var_18 = 5;
        var_19 = 0;
        var_20 = 0;
        var_16 = undefined;
        var_15 scripts\engine\utility::script_delay();

        if ( isdefined( var_15.script_duration ) )
            var_18 = var_15.script_duration;

        if ( isdefined( var_15.script_accel ) )
            var_19 = var_15.script_accel;

        if ( isdefined( var_15.script_decel ) )
            var_20 = var_15.script_decel;

        if ( isdefined( var_15.script_earthquake ) )
            var_16 = var_15.script_earthquake;

        if ( isdefined( var_15.script_exploder ) )
            var_17 = var_15.script_exploder;

        if ( isdefined( var_15.script_flag_wait ) )
            var_21 = var_15.script_flag_wait;

        var_22 = var_15 scripts\engine\utility::get_linked_ents();

        if ( var_22.size > 0 )
        {
            if ( issubstr( var_22[0].classname, "trigger" ) )
                var_22[0] waittill( "trigger" );
        }

        if ( isdefined( var_15.target ) )
        {
            var_15 = var_15 scripts\engine\utility::get_target_ent();
            continue;
        }

        var_15 = undefined;
    }

    self notify( "done_moving" );
}

moveto_volume_vehiclespline( var_0, var_1 )
{
    var_2 = self;
    var_3 = getvehiclenode( var_0.target, "targetname" );

    if ( !isdefined( var_3.angles ) )
        var_3.angles = ( 0, 0, 0 );

    var_1.mover = var_2;
    var_2.origin = var_3.origin;
    var_2.angles = var_3.angles;
    var_1 waittill( "trigger" );
    var_4 = var_0 vehicle_dospawn();
    var_4 vehicle_turnengineoff();
    var_4 hide();
    var_4 scripts\common\vehicle::godon();
    var_4 vehicle_turnengineoff();
    var_2 linkto( var_4 );
    var_4 attachpath( var_3 );
    var_4 startpath();
}

constant_quake( var_0 )
{
    self endon( "stop_constant_quake" );

    for (;;)
    {
        thread scripts\engine\utility::do_earthquake( var_0, self.origin );
        wait( randomfloatrange( 0.1, 0.2 ) );
    }
}

moveto_rotateto_speed( var_0, var_1, var_2, var_3 )
{
    var_4 = var_0.origin;
    var_5 = self.origin;
    var_6 = distance( var_5, var_4 );
    var_7 = var_6 / var_1;

    if ( !isdefined( var_2 ) )
        var_2 = 0;

    if ( !isdefined( var_3 ) )
        var_3 = 0;

    self rotateto( var_0.angles, var_7, var_7 * var_2, var_7 * var_3 );
    self moveto( var_4, var_7, var_7 * var_2, var_7 * var_3 );
    self waittill( "movedone" );
}

moveto_rotateto( var_0, var_1, var_2, var_3 )
{
    self moveto( var_0.origin, var_1, var_2, var_3 );
    self rotateto( var_0.angles, var_1, var_2, var_3 );
    self waittill( "movedone" );
}

set_start_positions( var_0 )
{
    var_1 = scripts\engine\utility::getstructarray( var_0, "targetname" );

    foreach ( var_3 in var_1 )
    {
        switch ( var_3.script_noteworthy )
        {
            case "player":
                level.player setorigin( var_3.origin );
                level.player setplayerangles( var_3.angles );
                break;
        }
    }
}
